{"otcdelegation.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender , \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface MerchantInterface {\r\n    function getPledgeStatus(address _address) external view returns(bool);\r\n\r\n    function merchantApealPledge(uint _orderNo, uint _delegationNo, address _userAddr,address _merchantAddr,uint _coinCount) external;\r\n\r\n    function userAppealPledge(uint _orderNo, uint _delegationNo, address _userAddr,address _merchantAddr,uint _coinCount) external;\r\n\r\n    function handleAppealPledge(uint _orderNo, uint _result, uint appeal_type) external;\r\n\r\n     function drawAppealPledge(uint _orderNo) external;\r\n}\r\n\r\ninterface RecordInterface {\r\n    function callMerchantRecord(address userAddr,uint coinCount) external;\r\n}\r\n\r\ncontract DelegationOrder is Ownable {\r\n    using SafeMath for uint256;\r\n    address public usdtAddress;\r\n\r\n    struct DelegationInfo {//委托单\r\n        uint delegationNo; //单号\r\n        address userAddr;\r\n        uint totalCount; //总数量\r\n        uint remainderCount; //剩余数量\r\n        string pay_type; //支付类型\r\n        uint max_money; //最大金额\r\n        uint min_money; //最小金额\r\n        uint price; //单价\r\n        uint itype; //1买单,2卖单\r\n        uint status; //1启用,0不起用2已撤销3已完成\r\n        uint undoneOrderCount; //未完成的订单数量\r\n        string terms; //交易条款\r\n        //string legal_currency_name; //法币名称\r\n        uint create_time;\r\n        uint update_time;\r\n    }\r\n\r\n    mapping(uint256 =\u003e DelegationInfo) public records; //delegationNo ==\u003e DelegationInfo\r\n    mapping(uint256 =\u003e uint256) public recordIndex;\r\n    DelegationInfo[] public recordList;    \r\n\r\n    event RecordAdd(\r\n        uint delegationNo, //单号\r\n        address userAddr,\r\n        uint total_money, //总数量\r\n        string pay_type, //支付类型\r\n        uint max_money, //最大金额\r\n        uint min_money, //最小金额\r\n        uint price, //单价\r\n        uint itype, //1买单,2卖单\r\n        string terms, //交易条款\r\n        uint create_time\r\n    );    \r\n\r\n    event RecordUpdate(\r\n        uint delegationNo, //单号\r\n        address userAddr,\r\n        uint total_money, //总数量\r\n        string pay_type, //支付类型\r\n        uint max_money, //最大金额\r\n        uint min_money, //最小金额\r\n        uint price, //单价\r\n        uint itype, //1买单,2卖单\r\n        string terms, //交易条款\r\n        uint update_time\r\n    );\r\n    constructor() {\r\n        usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    address _merchantAddr; \r\n    address _OrderAddr;\r\n    address _recordAddr;\r\n\r\n    function authFromContract(\r\n        address __merchantAddr,\r\n        address _orderAddr,\r\n        address __recordAddr\r\n    ) external onlyOwner {\r\n        _merchantAddr = __merchantAddr;\r\n        _OrderAddr = _orderAddr;    \r\n        _recordAddr = __recordAddr;      \r\n    }\r\n\r\n    modifier onlyAuthFromOrderAddr() {\r\n        require(_OrderAddr == msg.sender, \"Invalid contract address\");\r\n        _;\r\n    }\r\n\r\n    function addBuyDelegation(\r\n        uint _delegationNo,\r\n        uint _total_money,\r\n        string memory _pay_type,\r\n        uint _max_money,\r\n        uint _min_money,\r\n        uint _price,\r\n        string memory _terms     \r\n    ) external payable{\r\n        require(MerchantInterface(_merchantAddr).getPledgeStatus(msg.sender), \r\n            \"Please become a merchant first\");\r\n        \r\n        require(records[_delegationNo].delegationNo == uint256(0), \"order exist\");\r\n\r\n        _payFee(\"addBuyDelegation\");\r\n\r\n        DelegationInfo memory _record = DelegationInfo({\r\n            delegationNo: _delegationNo,\r\n            userAddr: msg.sender,\r\n            totalCount: _total_money,\r\n            remainderCount: _total_money,\r\n            pay_type: _pay_type,\r\n            max_money: _max_money,\r\n            min_money: _min_money,\r\n            price: _price,\r\n            itype: 1,\r\n            status: 1,\r\n            undoneOrderCount: 0,\r\n            terms: _terms,\r\n            create_time: block.timestamp,\r\n            update_time: 0\r\n        });\r\n\r\n        records[_delegationNo] = _record;\r\n\r\n        recordList.push(_record);\r\n        recordIndex[_delegationNo] = recordList.length - 1;  \r\n        emit RecordAdd(\r\n            _delegationNo,\r\n            msg.sender,\r\n            _total_money,\r\n            _pay_type, \r\n            _max_money, \r\n            _min_money, \r\n            _price,\r\n            1, \r\n            _terms,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n   function addSellDelegation(\r\n        uint _delegationNo,\r\n        uint _total_money,\r\n        string memory _pay_type,\r\n        uint _max_money,\r\n        uint _min_money,\r\n        uint _price,\r\n        string memory _terms      \r\n    ) external payable{\r\n        require(MerchantInterface(_merchantAddr).getPledgeStatus(msg.sender), \r\n            \"Please become a merchant first\");\r\n        \r\n        require(records[_delegationNo].delegationNo == uint256(0), \"order exist\");\r\n\r\n        _payFee(\"addSellDelegation\");\r\n\r\n        DelegationInfo memory _record = DelegationInfo({\r\n            delegationNo: _delegationNo,\r\n            userAddr: msg.sender,\r\n            totalCount: _total_money,\r\n            remainderCount: _total_money,\r\n            pay_type: _pay_type,\r\n            max_money: _max_money,\r\n            min_money: _min_money,\r\n            price: _price,\r\n            itype: 2,\r\n            status: 1,\r\n            undoneOrderCount: 0,\r\n            terms: _terms,\r\n            create_time: block.timestamp,\r\n            update_time: 0\r\n        });\r\n\r\n        records[_delegationNo] = _record;\r\n\r\n        recordList.push(_record);\r\n        recordIndex[_delegationNo] = recordList.length - 1;  \r\n        //转账usdt到监管合约\r\n        IERC20(usdtAddress).transferFrom(msg.sender, _recordAddr, _total_money);\r\n\r\n        emit RecordAdd(\r\n            _delegationNo,\r\n            msg.sender,\r\n            _total_money,\r\n            _pay_type, \r\n            _max_money, \r\n            _min_money, \r\n            _price,\r\n            2, \r\n            _terms, \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function callBuyDelegation(\r\n        uint _delegationNo\r\n    ) external payable onlyDelegationOwner(_delegationNo){\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        require(_record.delegationNo != 0, \"order does not exist\");        \r\n        require(_record.status != 3, \"order completed\");\r\n        require(_record.userAddr == msg.sender, \"You do not have permission\");\r\n        require(_record.undoneOrderCount == 0, \"Has an open order\");\r\n\r\n        _payFee(\"callDelegation\"); \r\n\r\n        _record.status = 2;\r\n        _record.update_time = block.timestamp;  \r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;        \r\n    }\r\n\r\n    function callSellDelegation(\r\n        uint _delegationNo\r\n    ) external payable onlyDelegationOwner(_delegationNo){\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        require(_record.delegationNo != 0, \"order does not exist\");        \r\n        require(_record.status != 3, \"order completed\");\r\n        require(_record.undoneOrderCount == 0, \"Has an open order\");\r\n\r\n        _payFee(\"callSellDelegation\"); \r\n\r\n        _record.status = 2;\r\n        _record.update_time = block.timestamp;  \r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;        \r\n        //取回质押的USDT\r\n        RecordInterface(_recordAddr).callMerchantRecord(msg.sender, _record.remainderCount);\r\n    }  \r\n\r\n    function setEnaleDelegation(\r\n        uint _delegationNo,\r\n        bool enable\r\n    )external payable onlyDelegationOwner(_delegationNo){\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        require(_record.delegationNo != 0, \"order does not exist\");                  \r\n        //1启用,0不起用2已撤销3已完成\r\n        if (enable){\r\n            require(_record.status == 0, \"order status error\"); \r\n            _record.status = 1;\r\n        }else{\r\n            require(_record.status == 1, \"order status error\"); \r\n            _record.status = 0;\r\n        }\r\n        \r\n        _record.update_time = block.timestamp;   \r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;              \r\n    }\r\n\r\n    function IncreaseUndoneOrderCount(\r\n        uint256 _delegationNo\r\n    )external onlyAuthFromOrderAddr{\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        require(_record.delegationNo != 0, \"order does not exist\");  \r\n\r\n        _record.undoneOrderCount = _record.undoneOrderCount.add(1);  \r\n\r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;        \r\n    }\r\n\r\n    function DecreaseUndoneOrderCount(\r\n        uint256 _delegationNo\r\n    )external onlyAuthFromOrderAddr{\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        require(_record.delegationNo != 0, \"order does not exist\");  \r\n\r\n        _record.undoneOrderCount = _record.undoneOrderCount.sub(1);  \r\n\r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;        \r\n    }\r\n\r\n    function updateRemainCount(\r\n        uint256 _delegationNo, \r\n        uint256 _coinCount,\r\n        uint256 _iType //0减少剩余数量 1增加剩余数量\r\n    )external onlyAuthFromOrderAddr{\r\n        DelegationInfo memory _record = records[_delegationNo];\r\n        if(_iType == 0){\r\n            require(\r\n                _record.remainderCount \u003e= _coinCount,\r\n                \"DelegationOrder:coin count error\"\r\n            );            \r\n            _record.remainderCount = _record.remainderCount.sub(_coinCount); \r\n        }else{\r\n            require(\r\n                _record.remainderCount + _coinCount \u003c= _record.totalCount,\r\n                \"DelegationOrder:coin count error 2\"\r\n            );             \r\n            _record.remainderCount = _record.remainderCount.add(_coinCount); \r\n        }\r\n        \r\n        _record.update_time = block.timestamp;\r\n        records[_delegationNo] = _record;\r\n        recordList[recordIndex[_delegationNo]] = _record;        \r\n    }    \r\n\r\n    function getDelegationInfo(uint delegationNo) public view returns(DelegationInfo memory){\r\n        return records[delegationNo];\r\n    }\r\n\r\n    modifier onlyDelegationOwner(uint256 _delegationNo) {\r\n        require(_delegationNo != uint256(0), \"orderNo null\");\r\n        require(\r\n            records[_delegationNo].userAddr == msg.sender,\r\n            \"only delegation owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //_payFee(\"pledge\");\r\n    mapping(string =\u003e address) public feeAddrSet;\r\n    mapping(string =\u003e uint256) public feeAmountSet;\r\n    function setFee(string calldata _method,address _addr,uint256 _amount) external onlyOwner {\r\n        feeAddrSet[_method] = _addr;\r\n        feeAmountSet[_method] = _amount;\r\n    }\r\n\r\n    function _payFee(string memory _method) internal {\r\n        uint256 _amt = feeAmountSet[_method];\r\n        address _addr = feeAddrSet[_method];\r\n\r\n        if (_amt \u003e 0) {\r\n            require(_addr != address(0), \"1\");\r\n            require(msg.value \u003e= _amt, \"2\");\r\n            payable(_addr).transfer(_amt);\r\n        }\r\n    }       \r\n}"},"otcOrder.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./otcdelegation.sol\";\r\nimport \"./otcRecord.sol\";\r\n\r\ncontract OrderStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    DelegationOrder private _delegationOrder;\r\n    RecordStorage private _recordStorage;\r\n    MerchantInterface private _merchantStorage;\r\n\r\n    address public usdtAddress;\r\n    address public otcAddress;\r\n\r\n    struct OrderInfo {//订单\r\n        uint orderNo; //订单号\r\n        uint delegationNo; //委托单号 \r\n\r\n        address userAddr; //用户\r\n        address merchantAddr; //商家\r\n\r\n        uint coinCount; //数量\r\n        uint price; //单价\r\n        uint orderAmount; //总金额\r\n        uint order_type; //1买单,2卖单\r\n        uint status; //0 已转币 1 已打款 2 待打款 3 申诉中 4 已完成  \r\n        bool occupied; //是否占用委托单剩余数量\r\n        uint appeal_type; //0未申诉 1用户申诉,2商家申诉\r\n        \r\n        // uint user_confirm_status; //\u0027客户是否确认支付\u0027\r\n        // uint seller_confirm_status; //商家是否确认支付\r\n\r\n        // uint user_confirm_time; //客户确认时间\r\n        // uint seller_confirm_time; //商家确认时间\r\n\r\n        // uint appeal_status; //是否申诉\r\n        // uint appeal_type; //1卖家申诉,2买家申诉\r\n        // uint appeal_result_status;//1卖家胜,2买家胜\r\n        // string appeal_result_version;//申诉结果原因\r\n        // uint appeal_time; //申诉时间\r\n        // uint appeal_token_money; //商家申诉质押数量\r\n        // uint appeal_result_time; //申诉结果时间\r\n        // uint appeal_token_money_status; //0没有提现1已提现\r\n\r\n        uint pay_type; //支付类型\r\n        string terms; //交易条款       \r\n\r\n        uint create_time;\r\n        uint update_time;\r\n    }\r\n    \r\n    event OrderUpdateStatus(uint256 _orderNo, uint256 _orderStatus);\r\n\r\n    mapping(uint256 =\u003e OrderInfo) private orders; //orderNo ==\u003e OrderInfo\r\n    mapping(uint256 =\u003e uint256) private orderIndex;\r\n    OrderInfo[] private orderList;\r\n\r\n    uint public apealPledgeAmount; //申诉质押数量\r\n\r\n    event OrderAdd(\r\n        uint orderNo,\r\n        uint delegationNo, //质押单号\r\n        address userAddr,\r\n        address buyerAddr, //买家\r\n        address sellerAddr, //卖家\r\n        uint coinCount, //数量\r\n        uint orderAmount, //总金额\r\n        uint payType, //付款方式\r\n        uint orderType //1买单,2卖单\r\n    );  \r\n    \r\n    constructor() {\r\n        usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\r\n        otcAddress = address(0xF8f840AB06CA4db83A22dDeaF03141097B6105C5);\r\n        apealPledgeAmount = 10000 * 10**18;\r\n    }    \r\n\r\n    address _recordAddr;\r\n    address _delegationAddr;\r\n    address _merchantStorageAddr;\r\n\r\n    function authFromContract(\r\n        address __recordAddr,\r\n        address __delegationAddr,\r\n        address __merchantAddr\r\n    ) external onlyOwner {\r\n        _recordAddr = __recordAddr; \r\n        _delegationAddr = __delegationAddr;\r\n        _merchantStorageAddr = __merchantAddr;\r\n\r\n        _recordStorage = RecordStorage(_recordAddr);    \r\n        _delegationOrder = DelegationOrder(_delegationAddr);\r\n        _merchantStorage = MerchantInterface(__merchantAddr);\r\n    }\r\n\r\n    function setApealPledgeAmount(uint amount) external onlyOwner{\r\n        apealPledgeAmount = amount;\r\n    }       \r\n\r\n    //用户买单\r\n    function addBuyOrder(\r\n        uint _orderNo, //订单号\r\n        uint256 _delegationNo, //委托单号\r\n        uint256 _coinCount, //数量\r\n        uint256 _orderAmount, //总金额\r\n        uint256 _payType //支付方式\r\n    ) external payable {\r\n        require(_delegationAddr != address(0), \"delegation address not set\");\r\n        require(_recordAddr != address(0), \"record address not set\");\r\n\r\n        _payFee(\"addBuyOrder\");\r\n        DelegationOrder.DelegationInfo memory delegation = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(delegation.delegationNo != uint256(0), \"DelegationOrder not exist\");\r\n\r\n        require(delegation.userAddr != msg.sender, \"rest not exist\");\r\n        require(delegation.itype == 2, \"sell DelegationOrder not exist\");\r\n        require(_coinCount \u003e 0 \u0026\u0026 _orderAmount \u003e 0, \"coin count error\");\r\n        require(delegation.status == 1, \"DelegationOrder status error\");\r\n\r\n        require(_coinCount \u003c= delegation.remainderCount, \"insufficient quantity remaining\");\r\n\r\n        uint _amount = _coinCount.mul(delegation.price).div(10**18);\r\n        require(\r\n            _amount \u003e= delegation.min_money \u0026\u0026\r\n                _amount \u003c= delegation.max_money,\r\n            \"amount error\"\r\n        );\r\n        \r\n        _delegationOrder.updateRemainCount(_delegationNo, _coinCount, 0); //委托单减少剩余数量      \r\n        _delegationOrder.IncreaseUndoneOrderCount(_delegationNo); //委托单未完成数量 + 1\r\n\r\n        _insert(\r\n            _orderNo,\r\n            _delegationNo,\r\n            _coinCount,\r\n            _orderAmount,\r\n            _payType,\r\n            1,//1买单,2卖单\r\n            delegation.userAddr,\r\n            2,\r\n            false\r\n        );\r\n        emit OrderAdd(\r\n            _orderNo,\r\n            _delegationNo,\r\n            msg.sender,\r\n            msg.sender,\r\n            delegation.userAddr,\r\n            _coinCount,\r\n            _orderAmount,\r\n            _payType,\r\n            1      \r\n        ); \r\n    }\r\n\r\n    //用户卖单 合约增加记录 用于转币\r\n    function addSellOrder(\r\n        uint _orderNo, //订单号\r\n        uint256 _delegationNo, //委托单号\r\n        uint256 _coinCount, //数量\r\n        uint256 _orderAmount, //总金额\r\n        uint256 _payType //支付方式\r\n    ) external payable {\r\n        require(_delegationAddr != address(0), \"delegation address not set\");\r\n        require(_recordAddr != address(0), \"record address not set\");\r\n\r\n        _payFee(\"addSellOrder\");\r\n        DelegationOrder.DelegationInfo memory delegation = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(delegation.delegationNo != uint256(0), \"DelegationOrder not exist\");\r\n\r\n        require(delegation.userAddr != msg.sender, \"rest not exist\");\r\n        require(delegation.itype == 1, \"buy DelegationOrder not exist\");\r\n        require(_coinCount \u003e 0 \u0026\u0026 _orderAmount \u003e 0, \"coin count error\");\r\n        require(delegation.status == 1, \"DelegationOrder status error\");\r\n\r\n        require(_coinCount \u003c= delegation.remainderCount, \"insufficient quantity remaining\");\r\n\r\n        //\r\n        uint _amount = _coinCount.mul(delegation.price).div(10**18);\r\n        require(\r\n            _amount \u003e= delegation.min_money \u0026\u0026\r\n                _amount \u003c= delegation.max_money,\r\n            \"amount error\"\r\n        );\r\n\r\n        _delegationOrder.updateRemainCount(_delegationNo, _coinCount, 0); //委托单减少剩余数量      \r\n        _delegationOrder.IncreaseUndoneOrderCount(_delegationNo); //委托单未完成数量 + 1\r\n\r\n        _insert(\r\n            _orderNo,\r\n            _delegationNo,\r\n            _coinCount,\r\n            _orderAmount,\r\n            _payType,\r\n            2,//1买单,2卖单\r\n            delegation.userAddr,\r\n            0,\r\n            true\r\n        );\r\n        //转账usdt到监管合约\r\n        IERC20(usdtAddress).transferFrom(msg.sender, _recordAddr, _coinCount);\r\n        _recordStorage.addRecord(\r\n            _orderNo,\r\n            _delegationNo, \r\n            delegation.totalCount,\r\n            delegation.remainderCount,\r\n            msg.sender, \r\n            delegation.userAddr,\r\n            _coinCount,\r\n            2\r\n        );\r\n        emit OrderAdd(\r\n            _orderNo,\r\n            _delegationNo,\r\n            msg.sender,\r\n            delegation.userAddr,\r\n            msg.sender,\r\n            _coinCount,\r\n            _orderAmount,\r\n            _payType,\r\n            2      \r\n        );        \r\n    }\r\n\r\n    //用户取消买单\r\n    function cancelBuyOrder(\r\n        uint _orderNo, //订单号\r\n        uint256 _delegationNo //委托单号\r\n    ) external payable onlyUserOrMerchant(_orderNo){\r\n        _payFee(\"cancelBuyOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");         \r\n        require(_order.order_type == 1, \"only buy order\");\r\n\r\n        if(orders[_orderNo].merchantAddr == msg.sender){ //商户只能取消待打款 并且30分钟之后的买单\r\n            require(_order.status == 2, \"seller only cancel order status in 2\");  //需要处于待打款状态 \r\n            require( block.timestamp - _order.create_time \u003e 30*60, \"seller only cancel must be after 30 minutes\");  //需要30分钟之后\r\n        }else{ //用户可以取消待打款和已打款的买单\r\n            require(_order.status == 1 || _order.status == 2, \"buyer only cancel order status in 1 or 2\");  //需要处于待打款和已打款状态\r\n        }      \r\n        \r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(info.delegationNo != uint256(0), \"delegation order not exist\");   \r\n\r\n        _delegationOrder.updateRemainCount(_delegationNo, _order.coinCount, 1); //委托单增加剩余数量 \r\n        _delegationOrder.DecreaseUndoneOrderCount(_delegationNo); //委托单未完成数量 - 1   \r\n\r\n        _order.status = 4;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;        \r\n    }\r\n\r\n    //用户取消卖单\r\n    function cancelSellOrder(\r\n        uint _orderNo, //订单号\r\n        uint256 _delegationNo //委托单号\r\n    ) external payable onlyUserOrMerchant(_orderNo){\r\n        _payFee(\"cancelSellOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");         \r\n        require(_order.order_type == 2, \"only sell order\");        \r\n        require(_order.status == 0, \"Invalid order status\");  //需要处于已转币\r\n        \r\n        if(orders[_orderNo].userAddr == msg.sender){ //用户只能取消30分钟之后的卖单\r\n            require( block.timestamp - _order.create_time \u003e 30*60, \"seller only cancel must be after 30 minutes\");  //需要30分钟之后\r\n        }\r\n\r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(info.delegationNo != uint256(0), \"delegation order not exist\");   \r\n        \r\n        _recordStorage.callRecord(//用户取消卖单 把币还给用户\r\n            _order.orderNo,\r\n            _order.delegationNo\r\n        );\r\n\r\n        _order.status = 4;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n\r\n        _delegationOrder.updateRemainCount(_delegationNo, _order.coinCount, 1); //委托单增加剩余数量 \r\n        _delegationOrder.DecreaseUndoneOrderCount(_delegationNo); //委托单未完成数量 - 1   \r\n\r\n    }\r\n\r\n    function _insert(\r\n        uint256 _orderNo,\r\n        uint256 _delegationNo,\r\n        uint256 _coinCount,\r\n        uint256 _orderAmount,\r\n        uint256 _payType,\r\n        uint256 _orderType,\r\n        address _merchantAddr,\r\n        uint256 _status,\r\n        bool _occupied\r\n    ) internal returns (uint256 orderNo) {\r\n        require(orders[_orderNo].orderNo == uint256(0), \"order exist\");        \r\n\r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(info.delegationNo != uint256(0), \"order not exist\");\r\n\r\n        OrderInfo memory order = OrderInfo({\r\n            orderNo: _orderNo,\r\n            delegationNo: _delegationNo,\r\n            userAddr: msg.sender,\r\n            merchantAddr: _merchantAddr,\r\n            coinCount: _coinCount,\r\n            price: info.price,\r\n            orderAmount: _orderAmount,\r\n            order_type: _orderType,\r\n            status: _status,\r\n            occupied: _occupied,\r\n            appeal_type: 0,\r\n            pay_type: _payType,\r\n            terms: info.terms, \r\n            create_time: block.timestamp,\r\n            update_time: 0\r\n        });\r\n\r\n        orders[_orderNo] = order;\r\n\r\n        orderList.push(order);\r\n        orderIndex[_orderNo] = orderList.length - 1;\r\n\r\n        return _orderNo;\r\n    }\r\n\r\n    //0 已转币 1 已打款 2 待打款 3 申诉中 4 已完成\r\n    //用户点击已打款 合约增加记录 用于转币\r\n    function alreadyPay(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyUser(_orderNo)\r\n    {\r\n        _payFee(\"alreadyPay\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");  \r\n        require(_order.order_type == 1, \"only buy order\");\r\n        require(_order.status == 2, \"Invalid order status\");  //需要处于待打款状态\r\n          \r\n        _order.occupied = true;\r\n        _order.status = 1;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n\r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_order.delegationNo);\r\n        require(info.delegationNo != uint256(0), \"order not exist\");       \r\n\r\n        //_delegationOrder.updateRemainCount(info.delegationNo, _order.coinCount, 0);  //委托单减少剩余数量  \r\n        //_delegationOrder.IncreaseUndoneOrderCount(info.delegationNo); //委托单未完成数量 + 1\r\n\r\n        _recordStorage.addRecord(\r\n            _orderNo,\r\n            info.delegationNo, \r\n            info.totalCount,\r\n            info.remainderCount,\r\n            info.userAddr,\r\n            msg.sender,             \r\n            _order.coinCount,\r\n            1\r\n        );\r\n\r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }\r\n\r\n    //商户点击已打款\r\n    function alreadyMerchantPay(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyMerchant(_orderNo)\r\n    {\r\n        _payFee(\"alreadyMerchantPay\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");  \r\n        require(_order.order_type == 2, \"only sell order\");\r\n        require(_order.status == 0, \"Invalid order status\"); //需要处于已转币状态\r\n\r\n        _order.status = 1;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n        \r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }    \r\n\r\n    //用户发起申诉\r\n    function appealOrder(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyUser(_orderNo)\r\n    {\r\n        _payFee(\"appealOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");\r\n        require(_order.status != 4,\"order completed\"); //不能是已完成\r\n        require(_order.status == 1, \"Must be in transferred status\");  //需要处于已打款状态\r\n\r\n        IERC20(otcAddress).transferFrom(msg.sender, _merchantStorageAddr, apealPledgeAmount);\r\n\r\n        _merchantStorage.userAppealPledge(\r\n            _order.orderNo,\r\n            _order.delegationNo,\r\n            _order.userAddr,\r\n            _order.merchantAddr,\r\n            apealPledgeAmount\r\n        );\r\n\r\n        _order.status = 3;\r\n        _order.appeal_type = 1;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n     \r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }\r\n\r\n    //商家发起申诉\r\n    function appealMerchantOrder(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyMerchant(_orderNo)\r\n    {\r\n        _payFee(\"appealMerchantOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");\r\n        require(_order.status != 4,\"order completed\"); //不能是已完成\r\n        require(_order.status == 1, \"Must be in transferred status\");  //需要处于已打款状态\r\n\r\n        IERC20(otcAddress).transferFrom(msg.sender, _merchantStorageAddr, apealPledgeAmount);\r\n\r\n        _merchantStorage.merchantApealPledge(\r\n            _order.orderNo,\r\n            _order.delegationNo,\r\n            _order.userAddr,\r\n            _order.merchantAddr,\r\n            apealPledgeAmount\r\n        );\r\n\r\n        _order.status = 3;\r\n        _order.appeal_type = 2;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n     \r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }\r\n    \r\n    //用户点击已确认 完成订单\r\n    function confirmOrder(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyUser(_orderNo)\r\n    {\r\n        _payFee(\"confirmOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");  \r\n\r\n        require(_order.status == 1, \"Invalid order status\");   //需要是已打款状态\r\n\r\n        _order.status = 4;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n        \r\n        _recordStorage.confirmRecord(\r\n            _order.orderNo,\r\n            _order.delegationNo\r\n        );\r\n        \r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_order.delegationNo);\r\n        require(info.delegationNo != uint256(0), \"order not exist\");        \r\n        _delegationOrder.DecreaseUndoneOrderCount(_order.delegationNo); //委托单未完成数量 - 1\r\n\r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }\r\n\r\n    //商户点击已确认 完成订单\r\n    function confirmMerchantOrder(uint256 _orderNo)\r\n        external\r\n        payable\r\n        onlyMerchant(_orderNo)\r\n    {\r\n        _payFee(\"confirmMerchantOrder\");\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");  \r\n\r\n        require(_order.status == 1, \"Invalid order status\");  //需要是已打款状态\r\n\r\n        _order.status = 4;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n        \r\n        _recordStorage.confirmMerchantRecord(\r\n            _order.orderNo,\r\n            _order.delegationNo\r\n        );\r\n        \r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_order.delegationNo);\r\n        require(info.delegationNo != uint256(0), \"order not exist\");        \r\n        _delegationOrder.DecreaseUndoneOrderCount(_order.delegationNo); //委托单未完成数量 - 1\r\n\r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);\r\n    }\r\n\r\n    //管理员处理申诉结果\r\n    function appealConfirmation(\r\n        uint256 _orderNo,\r\n        uint _delegationNo,\r\n        uint _result //0用户赢 1商户赢\r\n    ) external onlyOwner{\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        OrderInfo memory _order = orders[_orderNo];\r\n        require(_order.orderNo != 0, \"order does not exist\");         \r\n        require(_order.delegationNo == _delegationNo , \"_delegation order is Mismatch\");         \r\n        require(_order.status == 3,\"Invalid order status\"); //需要是申诉中的\r\n        DelegationOrder.DelegationInfo memory info = _delegationOrder.getDelegationInfo(_delegationNo);\r\n        require(info.delegationNo != uint256(0), \"delegation order not exist\");        \r\n\r\n        //0 已转币 1 已打款 2 待打款 3 申诉中 4 已完成 \r\n        if(_order.order_type == 1){//买单\r\n            if(_result == 0){\r\n                _recordStorage.appealHandle(\r\n                    _orderNo,\r\n                    _delegationNo,\r\n                    _result\r\n                );\r\n            }else{\r\n                _delegationOrder.updateRemainCount(_delegationNo, _order.coinCount, 1); //委托单增加剩余数量    \r\n            }\r\n        }else{\r\n            if(_result == 0){\r\n                _recordStorage.appealHandle(\r\n                    _orderNo,\r\n                    _delegationNo,\r\n                    _result\r\n                );\r\n                _delegationOrder.updateRemainCount(_delegationNo, _order.coinCount, 1); //委托单增加剩余数量       \r\n            }else{\r\n                _recordStorage.appealHandle(\r\n                    _orderNo,\r\n                    _delegationNo,\r\n                    _result\r\n                );                 \r\n            }\r\n        }\r\n        //质押合约处理申诉抵押的OTC\r\n        _merchantStorage.handleAppealPledge(_orderNo, _result, _order.appeal_type);\r\n\r\n        _order.status = 4;\r\n        orders[_orderNo] = _order;\r\n        orderList[orderIndex[_orderNo]] = _order;\r\n        \r\n        _delegationOrder.DecreaseUndoneOrderCount(_order.delegationNo); //委托单未完成数量 - 1\r\n\r\n        emit OrderUpdateStatus(_order.orderNo, _order.status);        \r\n    }\r\n\r\n    function getOrderInfo(uint _orderNo) public view returns(OrderInfo memory){\r\n        return orders[_orderNo];\r\n    }    \r\n\r\n    modifier onlyUser(uint256 _orderNo) {\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        require(\r\n            orders[_orderNo].userAddr == msg.sender,\r\n            \"only user\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyMerchant(uint256 _orderNo) {\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        require(\r\n            orders[_orderNo].merchantAddr == msg.sender,\r\n            \"only merchant\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyUserOrMerchant(uint256 _orderNo) {\r\n        require(_orderNo != uint256(0), \"orderNo null\");\r\n        require(\r\n            orders[_orderNo].userAddr == msg.sender || orders[_orderNo].merchantAddr == msg.sender,\r\n            \"Only user or merchant\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //_payFee(\"pledge\");\r\n    mapping(string =\u003e address) public feeAddrSet;\r\n    mapping(string =\u003e uint256) public feeAmountSet;\r\n    function setFee(string calldata _method,address _addr,uint256 _amount) external onlyOwner {\r\n        feeAddrSet[_method] = _addr;\r\n        feeAmountSet[_method] = _amount;\r\n    }\r\n\r\n    function _payFee(string memory _method) internal {\r\n        uint256 _amt = feeAmountSet[_method];\r\n        address _addr = feeAddrSet[_method];\r\n\r\n        if (_amt \u003e 0) {\r\n            require(_addr != address(0), \"1\");\r\n            require(msg.value \u003e= _amt, \"2\");\r\n            payable(_addr).transfer(_amt);\r\n        }\r\n    }     \r\n}"},"otcRecord.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./otcdelegation.sol\";\r\n\r\ncontract RecordStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public usdtAddress;\r\n\r\n    struct Record {\r\n        uint orderNo; //订单号 唯一值\r\n        uint delegationNo; //委托单号 \r\n        uint totalCount; //总数量\r\n        uint remainderCount; //剩余数量\r\n        address userAddr; \r\n        address buyerAddr; //买家\r\n        uint coinCount; //数量\r\n        uint status; //0 未完成  1 完成\r\n        uint orderType; //1买单,2卖单\r\n        uint create_time;\r\n        uint update_time;\r\n    }\r\n\r\n    mapping(uint256 =\u003e Record) public records;  //orderNo ==\u003e Record\r\n    mapping(uint256 =\u003e uint256) public recordIndex;\r\n\r\n    Record[] public recordList;\r\n    \r\n    constructor() {\r\n        usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function addRecord(\r\n        uint _orderNo,\r\n        uint _delegationNo, \r\n        uint _totalCount,\r\n        uint _remainderCount,\r\n        address _userAddr, \r\n        address _buyerAddr,\r\n        uint _coinCount,\r\n        uint _orderType\r\n    ) public onlyAuthFromOrderAddr {\r\n\r\n        require(records[_orderNo].orderNo == uint256(0), \"record exist\");  \r\n\r\n        Record memory _record = Record({\r\n            orderNo: _orderNo,\r\n            delegationNo: _delegationNo,\r\n            totalCount: _totalCount,\r\n            remainderCount: _remainderCount,\r\n            userAddr: _userAddr,\r\n            buyerAddr: _buyerAddr,\r\n            coinCount: _coinCount,\r\n            status: 0,\r\n            orderType: _orderType,\r\n            create_time: block.timestamp,\r\n            update_time: 0\r\n        });\r\n\r\n        records[_orderNo] = _record;\r\n\r\n        recordList.push(_record);\r\n        recordIndex[_orderNo] = recordList.length - 1;\r\n    }\r\n\r\n    //用户确认订单 把币转给商户\r\n    function confirmRecord(\r\n        uint _orderNo,\r\n        uint _delegationNo\r\n    ) public onlyAuthFromOrderAddr{\r\n        Record memory _record = records[_orderNo];\r\n        require(_record.orderNo != 0, \"order does not exist\");   \r\n        require(_record.delegationNo == _delegationNo, \"delegation does not exist\");  \r\n        require(_record.status == 0, \"order status error\");\r\n\r\n        IERC20(usdtAddress).transfer(_record.buyerAddr, _record.coinCount); \r\n        _record.status = 1;\r\n        _record.update_time = block.timestamp;\r\n        \r\n        records[_orderNo] = _record;\r\n        recordList[recordIndex[_orderNo]] = _record;        \r\n    } \r\n\r\n    //用户取消卖单 把币还给用户\r\n    function callRecord(\r\n        uint _orderNo,\r\n        uint _delegationNo\r\n    ) public onlyAuthFromOrderAddr{\r\n        Record memory _record = records[_orderNo];\r\n        require(_record.orderNo != 0, \"order does not exist\");   \r\n        require(_record.delegationNo == _delegationNo, \"delegation does not exist\");  \r\n        require(_record.status == 0, \"order status error\");\r\n\r\n        IERC20(usdtAddress).transfer(_record.userAddr, _record.coinCount); \r\n        _record.status = 1;\r\n        _record.update_time = block.timestamp;\r\n        \r\n        records[_orderNo] = _record;\r\n        recordList[recordIndex[_orderNo]] = _record;        \r\n    }  \r\n\r\n    //商户取消卖单 把币还给商户\r\n    function callMerchantRecord(\r\n        address userAddr,\r\n        uint coinCount\r\n    ) public onlyAuthFromDelegationAddr{\r\n        IERC20(usdtAddress).transfer(userAddr, coinCount);        \r\n    }  \r\n    \r\n    //商家确认订单 把币转给用户\r\n    function confirmMerchantRecord(\r\n        uint _orderNo,\r\n        uint _delegationNo\r\n    ) public onlyAuthFromOrderAddr{\r\n        Record memory _record = records[_orderNo];\r\n        require(_record.orderNo != 0, \"order does not exist\");   \r\n        require(_record.delegationNo == _delegationNo, \"delegation does not exist\");  \r\n        require(_record.status == 0, \"order status error\");\r\n\r\n        IERC20(usdtAddress).transfer(_record.buyerAddr, _record.coinCount); \r\n        _record.status = 1;\r\n        _record.update_time = block.timestamp;\r\n        \r\n        records[_orderNo] = _record;\r\n        recordList[recordIndex[_orderNo]] = _record;        \r\n    }\r\n\r\n    //处理申诉结果 进行转币\r\n    function appealHandle(\r\n        uint _orderNo,\r\n        uint _delegationNo,\r\n        uint _result  //0用户赢 1商户赢\r\n    ) public onlyAuthFromOrderAddr{\r\n        Record memory _record = records[_orderNo];\r\n        require(_record.orderNo != 0, \"order does not exist\");       \r\n        require(_record.delegationNo == _delegationNo, \"delegation does not exist\");  \r\n        \r\n        require(_record.status == 0, \"order not in complaint\");\r\n\r\n        _record.status = 1;\r\n        _record.update_time = block.timestamp;\r\n        \r\n        records[_orderNo] = _record;\r\n        recordList[recordIndex[_orderNo]] = _record;\r\n\r\n        //将币转到赢的一方 orderType; //1买单,2卖单\r\n        if (_result == 0){\r\n            if(_record.orderType == 1){ //买单 把币转给买家\r\n                IERC20(usdtAddress).transfer( _record.buyerAddr, _record.coinCount);\r\n            }else if(_record.orderType == 2){ //卖单 把币转给卖家\r\n                IERC20(usdtAddress).transfer( _record.userAddr, _record.coinCount);\r\n            }\r\n        }else if (_result == 1){\r\n            if(_record.orderType == 2){ //卖单 把币转给买家\r\n                IERC20(usdtAddress).transfer( _record.buyerAddr, _record.coinCount);\r\n            }            \r\n        }\r\n    }\r\n\r\n    function updateRecordStatus2(\r\n        uint _orderNo,\r\n        uint _delegationNo,\r\n        uint status  //0买家赢 1卖家赢\r\n    ) public onlyOwner{\r\n        Record memory _record = records[_orderNo];\r\n        require(_record.orderNo != 0, \"order does not exist\");       \r\n        require(_record.delegationNo == _delegationNo, \"delegation does not exist\");  \r\n        \r\n        require(_record.status == 0, \"order not in complaint\");\r\n\r\n        _record.status = 1;\r\n        _record.update_time = block.timestamp;\r\n        \r\n        records[_orderNo] = _record;\r\n        recordList[recordIndex[_orderNo]] = _record;\r\n\r\n        //将币转到赢的一方\r\n        if (status == 0){\r\n            IERC20(usdtAddress).transferFrom(address(this), _record.buyerAddr, _record.coinCount);    \r\n        }else{\r\n            IERC20(usdtAddress).transferFrom(address(this), _record.userAddr, _record.coinCount);    \r\n        }\r\n    }    \r\n\r\n    address _orderAddr;\r\n    address _delegationAddr;\r\n    modifier onlyAuthFromOrderAddr() {\r\n        require(_orderAddr == msg.sender, \"Invalid contract address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthFromDelegationAddr() {\r\n        require(_delegationAddr == msg.sender, \"Invalid contract address\");\r\n        _;\r\n    }\r\n\r\n    function authFromContract(\r\n        address __orderAddr,\r\n        address __delegationAddr\r\n    ) external onlyOwner {\r\n        _orderAddr = __orderAddr;  \r\n        _delegationAddr = __delegationAddr;\r\n\r\n    }      \r\n}"}}