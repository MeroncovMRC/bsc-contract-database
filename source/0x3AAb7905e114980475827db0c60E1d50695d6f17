// SPDX-License-Identifier: GPL-2.0

pragma solidity 0.8.17;

interface IBITCOINF {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
   
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract Context {
  // Empty internal constructor, to prevent people from mistakenly deploying
  // an instance of this contract, which should be used via inheritance.
  constructor () { }

  function _msgSender() internal view returns (address payable) {
    return payable (msg.sender);
  }

  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor () {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract BEP20BITCOINF is Context, Ownable, IBITCOINF {
    using SafeMath for uint256;
    
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _maxSupply;
    uint256 private _totalSupply;
    uint8 private immutable _decimals;
    string private _symbol;
    string private _name;

    address private _bridgeAddress;
    event BridgeConnected(address bridgeAddress);
        
    modifier onlyBridge {
      require(msg.sender == _bridgeAddress, "only bridge has access to this function");
      _;
    }

    constructor() {
        _name = "BITCOIN FUTURE";
        _symbol = "BITCOINF";
        _decimals = 2;
    }

    function connectBridge(address _bridge) external onlyOwner {
      _bridgeAddress = _bridge;
      emit BridgeConnected(_bridge);
    }

    function getConnectedBridge () external view returns (address) {
      return _bridgeAddress;
    }

    function getOwner() external override view returns (address) {
      return owner();
    }

    function decimals() external override view returns (uint8) {
      return _decimals;
    }

    function symbol() external override view returns (string memory) {
      return _symbol;
    }

    function name() external override view returns (string memory) {
      return _name;
    }
    function totalSupply() external override view returns (uint256) {
      return _totalSupply;
    }

    function balanceOf(address account) external override view returns (uint256) {
      return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
      _transfer(_msgSender(), recipient, amount);
      return true;
    }

    function allowance(address owner, address spender) external override view returns (uint256) {
      return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
      _approve(_msgSender(), spender, amount);
      return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
      _transfer(sender, recipient, amount);
      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BITCOINF: transfer amount exceeds allowance"));
      return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
      return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BITCOINF: decreased allowance below zero"));
      return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "BITCOINF: transfer from the zero address");
      require(recipient != address(0), "BITCOINF: transfer to the zero address");

      _balances[sender] = _balances[sender].sub(amount, "BITCOINF: transfer amount exceeds balance");
      _balances[recipient] = _balances[recipient].add(amount);
      
      emit Transfer(sender, recipient, amount);    
    }

    function _approve(address owner, address spender, uint256 amount) internal {
      require(owner != address(0), "BITCOINF: approve from the zero address");
      require(spender != address(0), "BITCOINF: approve to the zero address");

      _allowances[owner][spender] = amount;
      emit Approval(owner, spender, amount);
    }

    function mint(address recipient, uint256 amount) public onlyBridge {
      _mint(recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
      require(account != address(0), "BITCOINF: mint to the zero address");
      _totalSupply += amount;
      _balances[account] += amount;
      emit Transfer(address(0), account, amount);        
    }

    function burn(uint256 amount) public onlyBridge {
      _burn(_msgSender(), amount);
    }

    function _burn(address account, uint256 amount) internal {
      require(account != address(0), "BITCOINF: burn from the zero address");

      uint256 accountBalance = _balances[account];
      require(accountBalance >= amount, "BITCOINF: burn amount exceeds balance");
      unchecked {
          _balances[account] = accountBalance - amount;
      }
      _totalSupply -= amount;

      emit Transfer(account, address(0), amount);
    }

    function burnFrom(address account, uint256 amount) public onlyBridge {
      _burn(account, amount);
      _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "BITCOINF: burn amount exceeds allowance"));
    }    
}