// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
interface IGifter {
    function gift (address to, uint amount) external returns(bool);
}
abstract contract Context 
{
    function _msgSender() internal view virtual returns (address) 
    {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) 
    {
        this; 
        return msg.data;
    }
}

abstract contract OwnableV2 is Context
{
    address _owner;
    address public _newOwner;
    constructor()  
    {
        _owner = payable(msg.sender);
    }

    modifier onlyOwner() 
    {
        require(_msgSender() == _owner, "Only owner");
        _;
    }

    function changeOwner(address newOwner) onlyOwner public
    {
        _newOwner = newOwner;
    }
    function confirm() public
    {
        require(_newOwner == msg.sender);
        _owner = _newOwner;
    }
}





contract Gift is IGifter, OwnableV2
{
    IGifter controller;
    
    mapping (address => bool) private owners;
    function addOwner(address added) onlyOwner public {
        owners[added] = true;
    }
    constructor(address _controller)
    { 
        controller = IGifter(_controller);
    }
    function gift (address to, uint amount) public returns(bool) 
    {
        require(owners[msg.sender], "no way");
        return controller.gift(to, amount);
    }
}