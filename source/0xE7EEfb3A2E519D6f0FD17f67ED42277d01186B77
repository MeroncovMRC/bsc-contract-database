// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    bool public salesStarted;
    uint256 public saleLimit;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event SaleStarted();
    event SaleStopped();

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply,
        uint256 _saleLimit
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply * 10**uint256(_decimals);
        balanceOf[msg.sender] = totalSupply;
        salesStarted = false;
        saleLimit = _saleLimit * 10**uint256(_decimals);
    }

    modifier saleIsOpen() {
        require(salesStarted, "Sales are not open yet.");
        _;
    }

    function startSale() external {
        require(!salesStarted, "Sales are already started.");
        salesStarted = true;
        emit SaleStarted();
    }

    function stopSale() external {
        require(salesStarted, "Sales are already stopped.");
        salesStarted = false;
        emit SaleStopped();
    }

    function transfer(address _to, uint256 _value) external saleIsOpen {
        require(_to != address(0), "Invalid address.");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance.");
        require(_value <= saleLimit, "Exceeds the sale limit.");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
    }
}