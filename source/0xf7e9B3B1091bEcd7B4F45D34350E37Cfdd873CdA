pragma solidity ^0.5.0;

contract ERC20Interface {
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function transfer(address to, uint tokens) public returns (bool success);
}

contract WhiteListMYSCAR{
     struct project{
         uint activ;
     }

     struct User{
         uint status;
     }
   
    address public owner;

    mapping (address => project) public projects;
    mapping (address => User) public Users;

    constructor() public {
        owner = msg.sender;
    }

        modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }

        modifier onlyProject() {
    require(projects[msg.sender].activ == 1);
    _;
    }

    function changeOwner(address newOwner) public onlyOwner{
    require(newOwner != address(0));
    owner = newOwner;
    }

    function addProject(address _project, uint _status) public onlyOwner{
       projects[_project] = project(_status);
    }

    function addUserOwnerSend(address _project, uint _status) public onlyOwner{
       Users[_project] = User(_status);
    }

    function addToWhiteList(address _user) external  onlyProject{
       uint _status = 1;
       Users[_user] = User(_status);
    }

    function getWhitelist(address tokenOwner) public view returns (uint status){
        return Users[tokenOwner].status;
    }

        function ExtraTokens(address tokens, address wallet) public onlyOwner{
        uint ratio = ERC20Interface(tokens).balanceOf(address(this));
        ERC20Interface(tokens).transfer(wallet, ratio);
    }

    function ExtraBNB(address payable wallet) public onlyOwner{
        uint ratio = (address(this)).balance;
        wallet.transfer(ratio);
    }
}