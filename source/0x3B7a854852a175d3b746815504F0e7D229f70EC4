pragma solidity 0.6.12;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
   
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ownable {
    address public owner;

    constructor () public{
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        owner = newOwner;
    }
}

contract WEB is IERC20, Ownable {

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    uint256 public constant stopBurnAmount = 2100000*10**18;

    address public fundAddress = 0x60e1ba111A8F2e3fA80bb9A9Cd4554DB114006Fe;
    address public nodeDividendAddress;
    address public poolTempAddress = 0x1000000000000000000000000000000000000001;

    address public pair;
    bool public pairIsCreated = true;

    mapping (address => bool) public isExcludedFromFees;
    uint256 public maxTokensSellRate = 90;
    uint256 public maxTokensBuyAmount = 1000*10**18;
    uint256 public tradingEnabledTimestamp = 1659157980;
    
    constructor() public {
        address router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        address usdt = 0x55d398326f99059fF775485246999027B3197955;
        address _pair = pairFor(IPancakeRouter(router).factory(), address(this), usdt);
        pair = _pair;
        
        uint256 total = 63000000*10**18;
        _balances[msg.sender] = total;
        _totalSupply = total;
        emit Transfer(address(0), msg.sender, total);
    }

    function symbol() external pure returns (string memory) {
        return "WEB";
    }

    function name() external pure returns (string memory) {
        return "WEB";
    }

    function decimals() external pure returns (uint8) {
        return 18;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);

        return true;
    }

    function _transferNormal(address sender, address recipient, uint256 amount) private {
        if(recipient == address(0)){
            _totalSupply -= amount;
        }else {
            _balances[recipient] += amount;
        }
        emit Transfer(sender, recipient, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        
        if(isExcludedFromFees[sender] || isExcludedFromFees[recipient]) {
            _transferNormal(sender, recipient, amount);
            return;
        }
        
        require(block.timestamp >= tradingEnabledTimestamp, "trade not open");
        address _pair = pair;
        if(sender != _pair && recipient != _pair) {

            uint256 receiveAmount = amount;
            if(totalSupply() > stopBurnAmount){
                uint256 feeAmount = amount/10;
                _transferNormal(sender, address(0), feeAmount);
                receiveAmount -= feeAmount;
            }
            _transferNormal(sender, recipient, receiveAmount);

            uint256 poolTempAmount = _balances[poolTempAddress];
            if(poolTempAmount != 0 && pairIsCreated) {
                _balances[_pair] += poolTempAmount;
                emit Transfer(poolTempAddress, _pair, poolTempAmount);
                _balances[poolTempAddress] = 0;
                IPancakePair(_pair).sync();
            }

            return;
        }

        if(sender == _pair) {
            require(amount <= maxTokensBuyAmount, "ERC20: buy amount exceeds maxTokensBuyAmount");
        }else {
            require(senderBalance*maxTokensSellRate/100 >= amount, "ERC20: sell amount exceed maxTokensSellRate");
        }

        uint256 feeAmount = amount/40;
        _transferNormal(sender, fundAddress, feeAmount);
        _transferNormal(sender, poolTempAddress, feeAmount);
        _transferNormal(sender, nodeDividendAddress, feeAmount);
        IDistributeDividend(nodeDividendAddress).distributeDividend(feeAmount);
        
        uint256 receiveAmount = amount - 3*feeAmount;
        if(totalSupply() > stopBurnAmount){
            _transferNormal(sender, address(0), feeAmount);
            receiveAmount -= feeAmount;
        }

        _transferNormal(sender, recipient, receiveAmount);
    }


    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair_) {
        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        pair_ = address(uint160(uint(keccak256(abi.encodePacked(
                hex'ff',
                factory,
                keccak256(abi.encodePacked(token0, token1)),
                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'
            )))));
    }

    function setPair(address _pair) external onlyOwner {
        pair = _pair;
    }

    function setPairIsCreated(bool b) external onlyOwner {
        pairIsCreated = b;
    }

    function setB(uint256 b) external onlyOwner {
        maxTokensBuyAmount = b;
    }

    function setS(uint256 s) external onlyOwner {
        maxTokensSellRate = s;
    }

    function setExcludeFee(address a, bool b) external onlyOwner {
        isExcludedFromFees[a] = b;
    }

    function setNDA(address nda) external onlyOwner {
        nodeDividendAddress = nda;
    }

    function setTrade(uint256 t) external onlyOwner {
        tradingEnabledTimestamp = t;
    }
}

interface IPancakeRouter {
    function factory() external pure returns (address);
}

interface IPancakePair{
    function sync() external;
}

interface IDistributeDividend {
    function distributeDividend(uint256 amount) external;
}