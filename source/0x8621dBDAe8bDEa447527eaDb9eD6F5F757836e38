pragma solidity ^0.6.12;
// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}
library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly {codehash := extcodehash(account)}
        return (codehash != accountHash && codehash != 0x0);
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }
    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}
interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);
    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);
    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);
    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;
    function initialize(address, address) external;
}
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = now + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "");
        require(now > _lockTime, "");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}
contract GOD is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    mapping(address => uint256) private _tokenOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    mapping(address => uint256) private _buyCountToken;
    
    uint256 private _airDropFee = 10;
    uint public _grantAirDropLastTime;
    
    address public _airDropAddress;
    address[] private _airDropAccount;
    
    mapping(address => bool) private _receiveAirDrop;
    
    mapping(address => uint256) private _airDropNum;
    mapping(address => uint256) private _airDropAmount;
    
    uint256 private _ipoFee = 20;
    
    address public _ipoAddress;
    address[] private _ipoAccount;
    uint public _grantIpoLastTime;
    
    mapping(address => bool) private _receiveIpo;
    
    mapping(address => uint256) private _ipoNum;
    
    mapping(address => uint256) private _ipoAmount;
    
    uint public _returnLastTime;
    uint private _oneDay = 86400000;
    
    uint256 private _buyOrderCount;
    
    mapping(uint256 => uint256) private _spend;
    
    mapping(uint256 => bool) private _isPrize;
    
    mapping(uint256 => address) private _buyAccount;
    
    mapping(uint256 => uint256) private _surplusToken;     
    mapping(address => bool) private _freed;
    
    uint256 private _returnToken = 3;
    uint256 private _total = 100000000 * 10 ** 9;
    uint256 private _burnFee = 3;
    uint256 private _burnTotal;
    uint256 private _maxBurnTotal = 90000000 * 10 ** 9 ;
    uint256 private _oldBurnFee;
    
    uint256 private _failedBurnFee= 10;
    uint256 private _oldFailedBurnFee;
    string private _name = "dragon of  god";
    string private _symbol = "GOD";
    uint8 private _decimals = 9;
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    event UpdateChargeAddress(address account);
    
    event IssueTokens(uint256 time,uint256 accountSum,uint256 amount);
    
    event  DrawAPrize(uint256 buyOrder,bool isPrize); 
    event BuyBlindBox(uint256 buyOrder);
    
    event IpoInfo(address account,uint256 amount);
    
    event AirDropRegister(address account,uint256 amount);
    
    event AirDrop(uint time,uint256 accountSum,uint256 amount);
    
    event GrantIPO(uint time,uint256 accountSum,uint256 amount);
    constructor () public {
        _tokenOwned[_msgSender()] = _total;
        _buyOrderCount = 0;
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
        .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;
        _freed[owner()] = true;
        _freed[_msgSender()] = true;
        emit Transfer(address(0), _msgSender(), _total);
    }
    function _setFreed(address account)public onlyOwner{
        require(!_freed[account],"account exist");
        _freed[account] = true;
    }
    function _getFreed(address account)public view returns(bool){
        return _freed[account];
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view override returns (uint256) {
        return _total;
    }
    function balanceOf(address account) public view override returns (uint256) {
        return _tokenOwned[account];
    }
    
    function _return(uint256 buyOrder,address account,uint256 returnTotal,uint256 returnAmount)private{
        if(returnTotal <= returnAmount){
            returnAmount = returnTotal;
        }
            _tokenOwned[address(this)]=_tokenOwned[address(this)].sub(returnAmount);
            _tokenOwned[account]=_tokenOwned[account].add(returnAmount);
            _surplusToken[buyOrder]=_surplusToken[buyOrder].sub(returnAmount);
    }
    
     function _returnBuyToken() public onlyOwner returns(bool) {
        require((now - _returnLastTime) > _oneDay , "Please do not re issue");
        uint256 count = 0;
        uint256 amount = 0;
        for(uint i=1;i <= _buyOrderCount;i++){
            (bool isPrize,address account,uint256 surplusToken) = _getOrder(i);
            uint256 spend = _spend[i];
            if(!isPrize && surplusToken > 0){
                uint256 returnAmount = _calculateReturnFee(spend);
                _return(i,account,surplusToken,returnAmount);
                count++;
                amount += returnAmount;
            }
        }
        _returnLastTime = now;
        emit IssueTokens(_returnLastTime,count,amount);
        return true;
     }
    
    function _successPrize(uint256 buyOrder)public onlyOwner{
        (bool isPrize,,uint256 surplusToken) = _getOrder(buyOrder);
        require(isPrize,"The order did not win the prize");
        require(surplusToken > 0,"Awards issued"); 
        _surplusToken[buyOrder] = 0;
        emit DrawAPrize(buyOrder,true);
    }
    
    function _failedPrize(uint256 buyOrder)public onlyOwner{
        
        require(buyOrder <= _buyOrderCount,"order exist");
        
        require(_isPrize[buyOrder],"The order has not won the prize");
        
        uint256 spend = _spend[buyOrder];
        uint256 failedBurnAmount = _calculateFailedBurnFee(spend);
        _burnToken(address(this),failedBurnAmount);
        _surplusToken[buyOrder] = _surplusToken[buyOrder].sub(failedBurnAmount);
        _isPrize[buyOrder]=false;
        emit DrawAPrize(buyOrder,false);
    }
    
    function _getOrder(uint256 buyOrder)public view returns(bool,address,uint256){
        bool isPrize = _isPrize[buyOrder];
        address account = _buyAccount[buyOrder];
        uint256 surplusToken = _surplusToken[buyOrder];
        return (isPrize,account,surplusToken);
    }
    function _getBurnFee() public view returns (uint256){
        return _burnFee;
    }
    function _setBurnFee(uint256 burnFee) public onlyOwner {
        _burnFee = burnFee;
    }
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function _buyBlindBox(address account,uint256 spend)public onlyOwner{
        transferFrom(account,address(this),spend);
        _buyOrderCount++;
        
        _buyAccount[_buyOrderCount] = account;
        
        _isPrize[_buyOrderCount] = true;
        _spend[_buyOrderCount] = spend;
        
        _surplusToken[_buyOrderCount] = spend.sub(_calculateBurnFee(spend));
        emit BuyBlindBox(_buyOrderCount);
    }
    
    function _grantAirDrop()public onlyOwner{
        uint256 accountSum = 0;
        uint256 amountSum = 0;
        for(uint i = 0;i < _airDropAccount.length;i++){
            address account = _airDropAccount[i];
            uint256 amount = _airDropAmount[account];
            if(amount > 0){
                uint256 airDropNum = _airDropNum[account];
                uint256 receiveAmount =  _calculateAirDropFee(airDropNum);
                if(receiveAmount >= amount) receiveAmount = amount;
                _airDropAmount[account] = _airDropAmount[account].sub(receiveAmount);
                accountSum++;
                amountSum=amountSum.add(receiveAmount);
                emit Transfer(_airDropAddress,account,receiveAmount);
            }
        }
        _grantAirDropLastTime = now;
        emit AirDrop(_grantAirDropLastTime,accountSum,amountSum);
    }
    
    function _airDrop(address account,uint256 amount) public onlyOwner{
        require(_tokenOwned[_airDropAddress] >= amount, "Insufficient balance of airdrop account");
        require(!_receiveAirDrop[account],"Received airdrop");
        _tokenOwned[_airDropAddress] = _tokenOwned[_airDropAddress].sub(amount);
        _addAirDropAmount(account,amount);
        emit AirDropRegister(account,amount);
    }
    
    function _addAirDropAmount(address account,uint256 amount)private{
        _tokenOwned[account] = _tokenOwned[account].add(amount);
        _airDropAccount.push(account);
        _airDropAmount[account] = amount;
        _airDropNum[account] = amount;
        _receiveAirDrop[account] = true;
    }
    
    function _setAirDropAddress(address airDropAddress) public onlyOwner{
        _airDropAddress = airDropAddress;
        _freed[airDropAddress] = true;
    }
    
    function _getAirDropAmount(address account)public view returns(uint256){
        return _airDropAmount[account];
    }
    
    function _grantIpo()public onlyOwner{
        uint256 accountSum = 0;
        uint256 amountSum = 0;
        for(uint i = 0;i < _ipoAccount.length;i++){
            address account = _ipoAccount[i];
            uint256 amount = _ipoAmount[account];
            if(amount > 0){
                uint256 ipoNum = _ipoNum[account];
                uint256 receiveAmount =  _calculateIpoFee(ipoNum);
                if(receiveAmount >= amount) receiveAmount = amount;
                _ipoAmount[account] = _ipoAmount[account].sub(receiveAmount);
                accountSum++;
                amountSum=amountSum.add(receiveAmount);
                emit Transfer(_ipoAddress,account,receiveAmount);
            }
        }
        _grantIpoLastTime = now;
        emit GrantIPO(now,accountSum,amountSum);
    }
    
    function _ipo(address account,uint256 amount)public onlyOwner{
        require(_tokenOwned[_ipoAddress] >=amount,"Insufficient balance of private placement address");
        require(!_receiveIpo[account],"The account has been privately placed");
        _tokenOwned[_ipoAddress] = _tokenOwned[_ipoAddress].sub(amount);
        _addIpoAmount(account,amount);
        emit IpoInfo(account,amount);
    }
    
    function _addIpoAmount(address account,uint256 amount)private{
        _tokenOwned[account] = _tokenOwned[account].add(amount);
        _ipoAccount.push(account);
        _ipoAmount[account] = amount;
        _ipoNum[account] = amount;
        _receiveIpo[account] = true;
    }
    
    function _setIpoAddress(address ipoAddress)public onlyOwner{
        _ipoAddress = ipoAddress;
        _freed[ipoAddress] = true;
    }
    
    function _getIpoAmount(address account)public view returns(uint256){
        return _ipoAmount[account];
    }
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint256 addAmount) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addAmount));
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    receive() external payable {}
    function _burnToken(address account, uint256 amount) private {
        if (amount > 0) {
            _tokenOwned[account] = _tokenOwned[account].sub(amount);
            _tokenOwned[address(0)] = _tokenOwned[address(0)].add(amount);
            emit Transfer(account, address(0), amount);
        }
    }
    
    function _removeAllFee() private {
        if(_burnFee != 0 || _failedBurnFee != 0){
            _oldBurnFee = _burnFee;
            _burnFee = 0;
            _oldFailedBurnFee=_failedBurnFee;
            _failedBurnFee = 0;
        }
    }
    
    function _restoreAllFee() private {
        _burnFee=_oldBurnFee;
        _failedBurnFee=_oldFailedBurnFee;
    }
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0 && amount <= _total, "Transfer amount must be greater than zero or no greater than total");
        require(_tokenOwned[from] >= amount, "ERC20: Insufficient total");
        bool takeFee = true;
        if (_freed[from] || _freed[to]) takeFee = false;
        _tokenTransfer(from, to, amount, takeFee);
    }
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee)
            _removeAllFee();
        if(_burnTotal >= _maxBurnTotal){
            _burnFee = 0;
            _oldBurnFee = 0;
        }
            _transferStandard(sender, recipient, amount);
        if (!takeFee)
            _restoreAllFee();
    }
    function _transferStandard(address sender, address recipient, uint256 amount) private {
        uint256 frozenAmount = _getFrozenAmount(sender);
        require(_tokenOwned[sender].sub(amount) >= frozenAmount,"Token is frozen and not released yet");
        uint256 burnToken = _calculateBurnFee(amount);
        _burnToken(sender,burnToken);
        _burnTotal = _burnTotal.add(burnToken);
        amount = amount.sub(burnToken);
        
        _tokenOwned[sender] = _tokenOwned[sender].sub(amount);
        _tokenOwned[recipient] = _tokenOwned[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    
    function _getFrozenAmount(address account)private view returns(uint256){
        uint256 frozenAmount = 0;
        if(_receiveAirDrop[account]){
            frozenAmount = frozenAmount.add(_airDropAmount[account]);
        }
        if(_receiveIpo[account]){
            frozenAmount = frozenAmount.add(_ipoAmount[account]);
        }
        return frozenAmount;
    } 
    
    function _calculateReturnFee(uint256 amount) public view returns (uint256) {
        return amount.mul(_returnToken).div(10 ** 3);
    }
    
    function _calculateBurnFee(uint256 amount) private view returns (uint256) {
        return amount.mul(_burnFee).div(10 ** 2);
    }
    
    function _calculateAirDropFee(uint256 amount)private view returns (uint256){
        return amount.mul(_airDropFee).div(10 ** 2);
    }
    
    function _calculateIpoFee(uint256 amount)private view returns (uint256){
        return amount.mul(_ipoFee).div(10 ** 2);
    }
    
    function _calculateFailedBurnFee(uint256 amount) private view returns (uint256) {
        return amount.mul(_failedBurnFee).div(10 ** 2);
    }
}