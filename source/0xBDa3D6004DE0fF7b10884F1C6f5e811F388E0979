// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract BEP20Token is IBEP20 {
    string private constant _name = "GOFUN Token";
    string private constant _symbol = "GOFUN";
    uint8 private constant _decimals = 18;
    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // 分红相关
    mapping (address => uint256) private _dividendBalances;
    mapping (address => uint256) private _lastDividendPoints;
    uint256 private _totalDividendPoints;
    uint256 private _unclaimedDividends;

    constructor() {
        _totalSupply = 21000000 * 10**_decimals;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public pure returns (string memory) {
        return _name;
    }
    
    function symbol() public pure returns (string memory) {
        return _symbol;
    }
    
    function decimals() public pure returns (uint8) {
        return _decimals;
    }
    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }
    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(_balances[sender] >= amount, "BEP20: transfer amount exceeds balance");
        
        uint256 fee = amount * 4 / 100; // 4%的手续费
        uint256 transferAmount = amount - fee;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        
        // 分红逻辑
        uint256 dividendPoints = _totalDividendPoints - _lastDividendPoints[sender];
        uint256 dividends = (_dividendBalances[sender] * dividendPoints) / (10**_decimals);
        _unclaimedDividends -= dividends;
        _dividendBalances[sender] += transferAmount;
        _lastDividendPoints[sender] = _totalDividendPoints;
        _unclaimedDividends += (transferAmount * _totalDividendPoints) / (10**_decimals);
        
        emit Transfer(sender, recipient, transferAmount);
    }
    
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    // 分红相关函数
    function claimDividends() public {
        uint256 dividends = _unclaimedDividends;
        require(dividends > 0, "BEP20: no dividends to claim");

        _unclaimedDividends = 0;
        _balances[msg.sender] += dividends;

        emit Transfer(address(0), msg.sender, dividends);
    }
    
    function totalDividends() public view returns (uint256) {
        return _unclaimedDividends;
    }
}