// SPDX-License-Identifier: MIT
pragma solidity ^0.8.5;

contract Ownable {
    address public owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

contract CozmosToken is Ownable {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public decimalfactor;
    uint256 public Max_Token;
    bool public mintAllowed = true;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    address[] public founderWallets = [
        0x8dd00a71480717e142DaF0a30764Cc03601Caf79,
        0xb2a103D8803e10f61d99aeF1b3E3519442D0D98a,
        0x9766B9Ee8e38d255C960097ad989927aA224BeB9,
        0x255AE544513ED27608Dc6942eb9e1EbD5fbab821
    ];

    address[] public managerWallets = [
        0xC77DF40481d2a7bC02cB2a71ABcD06e758535221,
        0x19d7BB2E173136aF9Df0c2C71ea2D0e08a7Ff01b,
        0xBC1e29790F5E5f7D78d615f605c0d1A6c8394713,
        0xA9b06492Dd6B14Be0bC4D4209CF8D24783F350be
    ];

    address public ico_ido_address = 0x3657eD684614938508dBD8c4b7Fb237f3569ADf1;
    address public donationTeam = 0x57E4827c2967F0376aC1150522181fc51527E602;
    address public burnAddress = 0x000000000000000000000000000000000000dEaD;

    address[] public airdrop = [
        0x6e71557d4b1646BFc57aCaC88F325fD9A6BFFBC9,
        0x1b59ae4870F491a0BC99829ACB549aF2d40f7076,
        0xf70F81D0DFCaaA5154F9cDe99840d6a53955939e,
        0x453e1d28bE586a12Bc84ca87C891dce05218CEE7,
        0x534F2baca79469ec9cABF8aaDc622df6654dbd99,
        0x31A281b16375B8Cb657f22E2E0A9c323Bf875537,
        0x110Ae1712F1bB06d5c3a0cb6472fB6ccFA899445,
        0xF0adDb559095FC27E02b9f8E1B289706d76A367B,
        0x19584a78Cca640A1F5AC50164BdF7953F69140EE
    ];

    address[] public other = [
        0xEB467d83602462C75C7610D4ACf234716829f8f0,
        0x3A80139CAA4abFf4047078840fE4D5C7DA2F547f,
        0x2c373342d5A7109e1231D0e6353AEC5da9F1EC29
    ];

    constructor(
        string memory _symbol,
        string memory _name,
        uint8 _decimals
    ) {
        symbol = _symbol;
        name = _name;
        decimals = _decimals;
        decimalfactor = 10**uint256(decimals);
        Max_Token = 625_000_000_000_000 * decimalfactor;

        // founder wallets
        mint(founderWallets[0], 15_081_250_000_000 * decimalfactor);
        mint(founderWallets[1], 15_081_250_000_000 * decimalfactor);
        mint(founderWallets[2], 15_081_250_000_000 * decimalfactor);
        mint(founderWallets[3], 15_081_250_000_000 * decimalfactor);

        // managerWallets
        mint(managerWallets[0], 156_250_000_000_00 * decimalfactor);
        mint(managerWallets[1], 156_250_000_000_00 * decimalfactor);
        mint(managerWallets[2], 156_250_000_000_00 * decimalfactor);
        mint(managerWallets[3], 156_250_000_000_00 * decimalfactor);

        mint(ico_ido_address, 275_000_000_000_000 * decimalfactor);

        mint(donationTeam, 50_000_000_000_000 * decimalfactor);
        mint(burnAddress, 175_000_000_000_000 * decimalfactor);

        // airdrop wallets
        mint(airdrop[0], 75_000_000_000 * decimalfactor);
        mint(airdrop[1], 75_000_000_000 * decimalfactor);
        mint(airdrop[2], 75_000_000_000 * decimalfactor);
        mint(airdrop[3], 75_000_000_000 * decimalfactor);
        mint(airdrop[4], 75_000_000_000 * decimalfactor);
        mint(airdrop[5], 75_000_000_000 * decimalfactor);
        mint(airdrop[6], 75_000_000_000 * decimalfactor);
        mint(airdrop[7], 75_000_000_000 * decimalfactor);
        mint(airdrop[8], 75_000_000_000 * decimalfactor);

        // other wallets
        mint(other[0], 500_000_000_000 * decimalfactor);
        mint(other[1], 500_000_000_000 * decimalfactor);
        mint(other[2], 500_000_000_000 * decimalfactor);
    }

    function _transfer(
        address _from,
        address _to,
        uint256 _value
    ) internal {
        require(_to != address(0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }

    function transfer(address _to, uint256 _value) external returns (bool) {
        _transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) external returns (bool success) {
        require(_value <= allowance[_from][msg.sender], "Allowance error");
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value)
        external
        returns (bool success)
    {
        allowance[msg.sender][_spender] = _value;
        return true;
    }

    function burn(uint256 _value) external returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }

    function mint(address _to, uint256 _value) public returns (bool success) {
        require(Max_Token >= (totalSupply + _value));
        require(mintAllowed, "Max supply reached");
        if (Max_Token == (totalSupply + _value)) {
            mintAllowed = false;
        }
        require(msg.sender == owner, "Only Owner Can Mint");
        balanceOf[_to] += _value;
        totalSupply += _value;
        require(balanceOf[_to] >= _value);
        emit Transfer(address(0), _to, _value);
        return true;
    }
}