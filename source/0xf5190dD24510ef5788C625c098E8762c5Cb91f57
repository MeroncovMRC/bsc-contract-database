/**
 *Submitted for verification at BscScan.com on 2023-07-26
*/

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract NikitosCoinBEP20 is IBEP20 {
    string private constant _name = "Nikitos"; // Название монеты
    string private constant _symbol = "NIK"; // Символ монеты
    uint8 private constant _decimals = 18; // Количество десятичных знаков
    uint256 private constant _totalSupply = 1000000000 ether; // Общее количество монет (1 млрд в нашем случае)

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private _exchangeAddress; // Адрес контракта платформы обмена
    uint256 private _liquidityFeePercent = 3; // Процент сжигаемого газа, который идет в ликвидность

    constructor() {
        _balances[msg.sender] = _totalSupply;
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: transfer amount must be greater than zero");
        require(_balances[from] >= amount, "BEP20: transfer amount exceeds balance");

        uint256 liquidityFeeAmount = amount * _liquidityFeePercent / 100; // Рассчитываем сумму для ликвидности
        uint256 transferAmount = amount - liquidityFeeAmount; // Сумма после вычета ликвидности

        _balances[from] -= amount;
        _balances[to] += transferAmount;
        _balances[_exchangeAddress] += liquidityFeeAmount;

        emit Transfer(from, to, transferAmount);
        emit Transfer(from, _exchangeAddress, liquidityFeeAmount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    // Установить адрес платформы обмена (применяется только один раз)
    function setExchangeAddress(address exchangeAddress) external {
        require(_exchangeAddress == address(0), "Exchange address has already been set");
        _exchangeAddress = exchangeAddress;
    }

    // Получить адрес платформы обмена
    function getExchangeAddress() external view returns (address) {
        return _exchangeAddress;
    }

    // Получить процент сжигаемого газа, который идет в ликвидность
    function getLiquidityFeePercent() external view returns (uint256) {
        return _liquidityFeePercent;
    }
}