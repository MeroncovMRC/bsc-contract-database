{"Address.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"},"Context.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"CXCToken.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IUniswapV2Router01.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\ncontract CXCToken is ERC20(\"CXCoin\", \"CXC\"), Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private _decimals = 6;\r\n    uint256 private _totalSupply = 21* 10**7 * (10**_decimals);\r\n\r\n    mapping(address =\u003e uint256) private _rOwned;\r\n    mapping(address =\u003e uint256) private _tOwned;\r\n\r\n    uint256 private _tTotal = _totalSupply;\r\n    // uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _rTotal = _tTotal.mul(1e20);\r\n    uint256 private _tFeeTotal;\r\n\r\n    uint256 public burnFee = 2;\r\n    uint256 public foundtionFee = 2;\r\n    uint256 public liquidityFee = 1;\r\n    uint256 public rewardFee = 1;\r\n    uint256 public genFee = 3;\r\n    uint256 public genSecondFee = 3;\r\n\r\n    mapping (address =\u003e bool) public managerMap;\r\n    mapping(address =\u003e bool) public _taxExcluded;\r\n    mapping (address =\u003e bool) public _pairs;\r\n    bool public transferTaxEnabled = true;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedReward;\r\n    address[] private _excluded;\r\n    \r\n    uint256 public _swapFeesAt = 1000 * 10**decimals();\r\n    bool public swapEnabled = true;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public uniswapV2BNBPair;\r\n\r\n    address public foundtionWallet = 0x93eA04Fb393a06520C27867046289AC3110b39a8;\r\n    address public desilterWallet = 0xDB2890754CC11A54c56D23E9c136b625aE38f3A8;\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    mapping (address =\u003e address ) public _referrerByAddr;\r\n    \r\n    mapping (address =\u003e bool) public _isBlacklisted;\r\n\r\n    bool public tradingEnabled = false;\r\n    address public liquidityWallet;\r\n    uint256 public launchedAtTime;\r\n    uint256 public keepLaunchedLive = 24 hours;\r\n    uint256 public keepProtectTime = 2 minutes;\r\n\r\n    mapping (address =\u003e uint256) public usdtBalanceByAddr;\r\n\r\n    struct FeeInfo {\r\n        uint256 tAmount;\r\n        uint256 tTransferAmount;\r\n\r\n        uint256 tFee;\r\n        uint256 tBurn;\r\n        uint256 tFoundation;\r\n        uint256 tLiquidity;\r\n        uint256 tGen;\r\n        uint256 tGenSecond;\r\n\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n\r\n        uint256 rFee;\r\n        uint256 rBurn;\r\n        uint256 rFoundation;\r\n        uint256 rLiquidity;\r\n        uint256 rGen;\r\n        uint256 rGenSecond;\r\n    }\r\n\r\n    bool internal _inSwap = false;\r\n\r\n    modifier lockSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        // bsctestnet: 0xBA8085922c2Dd0f68D8cA9729Ed36f830B86d767\r\n        // bscmainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    \t\r\n        if (block.chainid == 56) {\r\n            uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else {\r\n            uniswapV2Router = IUniswapV2Router02(0xBA8085922c2Dd0f68D8cA9729Ed36f830B86d767);\r\n            usdt = 0xC18D1550220b20Ed38b541877eFc0D73E51c7c8a;\r\n        }\r\n      \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                usdt);\r\n        uniswapV2BNBPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH());\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        liquidityWallet = 0xff0aBCf50C71Dfc7F43919C3Db668F2083409eE0;    \r\n        _taxExcluded[owner()] = true;\r\n        _taxExcluded[address(this)] = true;\r\n        _taxExcluded[liquidityWallet] = true;  \r\n        managerMap[owner()] = true;   \r\n        excludeFromReward(address(uniswapV2Pair));\r\n        excludeFromReward(address(uniswapV2BNBPair));\r\n        excludeFromReward(deadWallet);\r\n        _pairs[uniswapV2BNBPair] = true;\r\n        _pairs[uniswapV2Pair] = true;       \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function openTrading() public onlyOwner  {\r\n        tradingEnabled = true;\r\n        launchedAtTime = block.timestamp;\r\n    }\r\n\r\n    function closeTrading() public onlyOwner  {\r\n        tradingEnabled = false;\r\n    }\r\n\r\n    function updateTaxExcluded(address account, bool enabled) public onlyManager {\r\n        _taxExcluded[account] = enabled;\r\n    }\r\n\r\n    function updateWhiteList(address account, bool enabled) public onlyManager {\r\n        _taxExcluded[account] = enabled;\r\n    }\r\n\r\n    function updatePairs(address pair, bool enabled) public onlyManager {\r\n        _pairs[pair] = enabled;\r\n    }\r\n\r\n    function updateManager(address account, bool enabled) public onlyOwner {\r\n        managerMap[account] = enabled;\r\n    }\r\n\r\n    function updateLiquidityWallet(address account) public onlyOwner {\r\n        liquidityWallet = account;\r\n        _taxExcluded[liquidityWallet] = true;\r\n    }\r\n\r\n    function updateFoundtionWallet(address account) public onlyOwner {\r\n        foundtionWallet = account;\r\n    }\r\n\r\n    function updateDesilterWallet(address account) public onlyOwner {\r\n        desilterWallet = account;\r\n    }\r\n\r\n    function updateBurnFee(uint256 value) public onlyOwner {\r\n        burnFee = value;\r\n    }\r\n\r\n    function updateFoundtionFee(uint256 value) public onlyOwner {\r\n        foundtionFee = value;\r\n    }\r\n\r\n    function updateLiquidityFee(uint256 value) public onlyOwner {\r\n        liquidityFee = value;\r\n    }\r\n\r\n    function updateRewardFee(uint256 value) public onlyOwner {\r\n        rewardFee = value;\r\n    }\r\n\r\n    function updateGenFee(uint256 value) public onlyOwner {\r\n        genFee = value;\r\n    }\r\n\r\n    function updateGenSecondFee(uint256 value) public onlyOwner {\r\n        genSecondFee = value;\r\n    }\r\n\r\n    function updateSwapFeesAt(uint256 value) public onlyManager {\r\n        _swapFeesAt = value;\r\n    }\r\n\r\n    function updateSwapEnabled(bool enabled) public onlyManager {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    function updateUsdt(address _usdt) public onlyManager {\r\n        usdt = _usdt;\r\n    }\r\n\r\n    function updateBlacklisted(address account, bool enabled) public onlyManager {\r\n        _isBlacklisted[account] = enabled;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedReward[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n\r\n    //to receive BNB from pancakeRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcludedReward[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , ) = _getValues(tAmount, false);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rTotal = _rTotal - rAmount;\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount, false);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount, false);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount \u003c= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n    \r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \u0027We can not exclude Pancake router.\u0027);\r\n        require(!_isExcludedReward[account], \"Account is already excluded\");\r\n        if (_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedReward[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedReward[account], \"Account is already included\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedReward[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _takeFees(address sender, address recipient, FeeInfo memory _feeInfo) private {\r\n        if (_feeInfo.rBurn \u003e 0) {\r\n            uint256 endTotal =  3300 * 10**4 * 10**decimals();\r\n            if (totalSupply().sub(_feeInfo.tBurn).sub(balanceOf(deadWallet)) \u003c endTotal) {\r\n                _feeInfo.tBurn = totalSupply().sub(endTotal).sub(balanceOf(deadWallet));\r\n                _feeInfo.rBurn = _feeInfo.tBurn.mul(_getRate());\r\n                burnFee = 0;\r\n            }\r\n            _rOwned[deadWallet] = _rOwned[deadWallet].add(_feeInfo.rBurn);\r\n            if (_isExcludedReward[deadWallet]) {\r\n                _tOwned[deadWallet] = _tOwned[deadWallet].add(_feeInfo.tBurn);\r\n            }\r\n            emit Transfer(address(this), deadWallet, _feeInfo.tBurn);\r\n        }\r\n\r\n        if (_feeInfo.rFoundation \u003e 0) {\r\n            _rOwned[foundtionWallet] = _rOwned[foundtionWallet].add(_feeInfo.rFoundation);\r\n            if (_isExcludedReward[foundtionWallet]) {\r\n                _tOwned[foundtionWallet] = _tOwned[foundtionWallet].add(_feeInfo.tFoundation);\r\n            }\r\n            emit Transfer(address(this), foundtionWallet, _feeInfo.tFoundation);\r\n        }\r\n\r\n        if (_feeInfo.rLiquidity \u003e 0) {\r\n            address pairTmp = uniswapV2Pair;\r\n            if (_pairs[sender]) {\r\n                pairTmp = sender;\r\n            } else if (_pairs[recipient]) {\r\n                pairTmp = recipient;\r\n            }\r\n            _rOwned[address(pairTmp)] = _rOwned[address(pairTmp)].add(_feeInfo.rLiquidity);\r\n            if (_isExcludedReward[address(pairTmp)]) {\r\n                _tOwned[address(pairTmp)] = _tOwned[address(pairTmp)].add(_feeInfo.tLiquidity);\r\n            }\r\n            emit Transfer(sender, address(pairTmp), _feeInfo.tLiquidity);\r\n        }\r\n\r\n        address taxer = sender;\r\n\r\n        if (_pairs[sender]) {\r\n            taxer = recipient;\r\n        }\r\n\r\n        address referrer = _referrerByAddr[taxer];\r\n        address referrer2 = _referrerByAddr[referrer];\r\n        bool checkBalance = true;\r\n        if (referrer == address(0)) {\r\n            checkBalance = false;\r\n            referrer = desilterWallet;\r\n            referrer2 = desilterWallet;\r\n        }\r\n        \r\n        if (_feeInfo.rGen \u003e 0) {\r\n            if (checkBalance \u0026\u0026 balanceOf(referrer) \u003c 30000 * 10** decimals()) {\r\n                referrer = desilterWallet;\r\n            }\r\n            _rOwned[referrer] = _rOwned[referrer].add(_feeInfo.rGen);\r\n            if (_isExcludedReward[referrer]) {\r\n                _tOwned[referrer] = _tOwned[referrer].add(_feeInfo.tGen);\r\n            }\r\n            emit Transfer(address(this), referrer, _feeInfo.tGen);\r\n        }\r\n\r\n        if (_feeInfo.rGenSecond \u003e 0) {\r\n            if (checkBalance) {\r\n                if (referrer2 == address(0)) {\r\n                    referrer2 = desilterWallet;\r\n                } else if (balanceOf(referrer2) \u003c 100000 * 10** decimals()) {\r\n                    referrer2 = desilterWallet;\r\n                }\r\n            }\r\n            \r\n            _rOwned[referrer2] = _rOwned[referrer2].add(_feeInfo.rGenSecond);\r\n            if (_isExcludedReward[referrer2]) {\r\n                _tOwned[referrer2] = _tOwned[referrer2].add(_feeInfo.tGenSecond);\r\n            }\r\n            emit Transfer(address(this), referrer2, _feeInfo.tGenSecond);\r\n        }\r\n\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount, bool _isBuy)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            FeeInfo memory\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            FeeInfo memory _feeInfoTmp\r\n        ) = _getTValues(tAmount, _isBuy);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, FeeInfo memory _feeInfo) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            _feeInfoTmp,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            _feeInfo\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, bool _isBuy)\r\n        private\r\n        view\r\n        returns (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            FeeInfo memory _feeInfoTmp\r\n        )\r\n    {\r\n        tTransferAmount = tAmount;\r\n        \r\n        \r\n        if (_isBuy) {\r\n            _feeInfoTmp.tGen = tAmount.mul(genFee).div(100);\r\n            _feeInfoTmp.tGenSecond = tAmount.mul(genSecondFee).div(100);\r\n        } else {\r\n            _feeInfoTmp.tBurn = tAmount.mul(burnFee).div(100);\r\n            _feeInfoTmp.tFoundation = tAmount.mul(foundtionFee).div(100);\r\n            _feeInfoTmp.tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n            tFee = tAmount.mul(rewardFee).div(100);\r\n        }\r\n        \r\n\r\n        _feeInfoTmp.tAmount = tAmount;\r\n        _feeInfoTmp.tFee = tFee;\r\n\r\n        tTransferAmount = tTransferAmount.sub(_feeInfoTmp.tBurn).sub(_feeInfoTmp.tFoundation).sub(_feeInfoTmp.tLiquidity);\r\n        tTransferAmount = tTransferAmount.sub(_feeInfoTmp.tFee).sub(_feeInfoTmp.tGen).sub(_feeInfoTmp.tGenSecond);\r\n\r\n        _feeInfoTmp.tTransferAmount = tTransferAmount;\r\n\r\n        return (tTransferAmount, tFee, _feeInfoTmp);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        FeeInfo memory _feeInfoTmp,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            FeeInfo memory _feeInfo\r\n        )\r\n    {\r\n        rAmount = tAmount.mul(currentRate);\r\n        rTransferAmount = rAmount;\r\n        \r\n        _feeInfoTmp.rBurn = _feeInfoTmp.tBurn.mul(currentRate);\r\n        _feeInfoTmp.rFoundation = _feeInfoTmp.tFoundation.mul(currentRate);\r\n        _feeInfoTmp.rLiquidity = _feeInfoTmp.tLiquidity.mul(currentRate);\r\n        rFee = tFee.mul(currentRate);\r\n        _feeInfoTmp.rGen = _feeInfoTmp.tGen.mul(currentRate);\r\n        _feeInfoTmp.rGenSecond = _feeInfoTmp.tGenSecond.mul(currentRate);\r\n\r\n        _feeInfoTmp.rAmount = rAmount;\r\n        _feeInfoTmp.rFee = rFee;\r\n\r\n        rTransferAmount = rTransferAmount.sub(_feeInfoTmp.rBurn).sub(_feeInfoTmp.rFoundation).sub(_feeInfoTmp.rLiquidity);\r\n        rTransferAmount = rTransferAmount.sub(_feeInfoTmp.rFee).sub(_feeInfoTmp.rGen).sub(_feeInfoTmp.rGenSecond);\r\n\r\n        _feeInfoTmp.rTransferAmount = rTransferAmount;\r\n\r\n        _feeInfo = _feeInfoTmp;\r\n\r\n        return (rAmount, rTransferAmount, rFee, _feeInfo);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] \u003e rSupply ||\r\n                _tOwned[_excluded[i]] \u003e tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply \u003c _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function swapAndLiquify(address sender, address recipient) private lockSwap {\r\n        recipient;\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don\u0027t get caught in a circular liquidity event.\r\n        // also, don\u0027t swap \u0026 liquify if sender is pancake pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance \u003e= _swapFeesAt;\r\n\r\n        if (\r\n            shouldSell \u0026\u0026\r\n            _pairs[sender] \u0026\u0026\r\n            swapEnabled \u0026\u0026\r\n            sender != address(this)\r\n        ) {\r\n            // add liquidity\r\n            // split the contract balance into 3 pieces\r\n            uint256 half = contractTokenBalance.div(2);\r\n            uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n            // now is to lock into staking pool\r\n            swapTokensForEth(otherHalf);\r\n\r\n            uint256 ethBalance = address(this).balance;\r\n\r\n            // how much BNB did we just swap into?\r\n\r\n            // capture the contract\u0027s current BNB balance.\r\n            // this is so that we can capture exactly the amount of BNB that the\r\n            // swap creates, and not make the liquidity event include any BNB that\r\n            // has been manually sent to the contract\r\n\r\n            // add liquidity to pancake\r\n            addLiquidityEth(half, ethBalance);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the pancake pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(address recipient, uint256 ethAmount) private {\r\n        // generate the pancake pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: ethAmount\r\n        }(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function addLiquidityEth(\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp + 360\r\n        );  \r\n    }\r\n    \r\n    modifier onlyManager() {\r\n        require(managerMap[msg.sender], \"caller is not the manager\");\r\n        _;\r\n    }\r\n    \r\n    function isBuy(address sender, address recipient)\r\n        internal \r\n        view \r\n        returns (bool)\r\n    {\r\n        recipient;\r\n        return _pairs[sender];\r\n    }\r\n\r\n    function isSell(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        recipient;\r\n        return !_pairs[sender];\r\n    }\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(_rOwned[sender] \u003e= amount, \"Not enough tokens\");\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlacklisted[sender], \"this address on blackList\");\r\n        \r\n        if (_referrerByAddr[recipient] == address(0) \u0026\u0026 amount \u003e= 10 ** decimals() \u0026\u0026 !sender.isContract() \u0026\u0026 !recipient.isContract()) {\r\n            _referrerByAddr[recipient] = sender;\r\n        }\r\n        bool takeTax = _pairs[sender] || _pairs[recipient];\r\n\r\n        if (!tradingEnabled \u0026\u0026 takeTax) {\r\n            require(sender == liquidityWallet || recipient == liquidityWallet, \"trading not allow\");\r\n        }\r\n        \r\n        if (_taxExcluded[sender] || _taxExcluded[recipient]) {\r\n            _tokenTransferNoFee(sender, recipient, amount);\r\n            return;\r\n        }\r\n        \r\n        if (!transferTaxEnabled) {\r\n            \r\n            if (!takeTax) {\r\n                _tokenTransferNoFee(sender, recipient, amount);\r\n                return;\r\n            }    \r\n        }\r\n\r\n        _tokenTransferWithFee(sender, recipient, amount);\r\n    }\r\n\r\n    function _tokenTransferNoFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n        ) internal {\r\n        uint256 rate = _getRate();\r\n        uint256 rAmount = tAmount.mul(rate);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (_isExcludedReward[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        }\r\n        \r\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n        if (_isExcludedReward[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n        }\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _tokenTransferWithFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n        ) internal {\r\n            if (launchedAtTime \u003e 0 \u0026\u0026 (_pairs[sender] || _pairs[recipient])) {\r\n                require(launchedAtTime.add(keepProtectTime) \u003c block.timestamp, \"on whiteList\u0027s time\");\r\n            }\r\n            \r\n        if (!_pairs[sender]) {\r\n            // require(balanceOf(sender).sub(tAmount) \u003e= 10 ** decimals(), \"must have 1 token\");\r\n            if (balanceOf(sender).sub(tAmount) == 0) {\r\n                tAmount = tAmount.sub(1);\r\n            }\r\n        }\r\n        bool _isBuy = isBuy(sender, recipient);\r\n        if (_isBuy \u0026\u0026 launchedAtTime.add(keepLaunchedLive) \u003e= block.timestamp) {\r\n            uint256 usdtBalance = _tokenToUsdtValue(sender, recipient, tAmount);\r\n            usdtBalanceByAddr[recipient] = usdtBalanceByAddr[recipient].add(usdtBalance);\r\n            require(usdtBalanceByAddr[recipient] \u003c= 500  * (10 ** IERC20Metadata(usdt).decimals()), \"Protect time Max 500 USDT\");\r\n        }\r\n        // swapAndLiquify(sender, recipient);\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, FeeInfo memory _feeInfo) = _getValues(tAmount, _isBuy);\r\n\r\n        _reflectFee(rFee, tFee);\r\n        _takeFees(sender, recipient, _feeInfo);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (_isExcludedReward[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        }\r\n        \r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        if (_isExcludedReward[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _tokenToUsdtValue(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tokenAmount\r\n        ) public view returns (uint256) {\r\n        if (sender == uniswapV2BNBPair) {\r\n            address[] memory _path = new address[](3);\r\n            _path[0] = address(this);\r\n            _path[1] = uniswapV2Router.WETH();\r\n            _path[2] = usdt;\r\n            uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, _path);\r\n            if (amounts.length \u003e 0) {\r\n                uint256 usdtValue = amounts[amounts.length - 1];\r\n                return usdtValue;\r\n            }\r\n        } else {\r\n            address[] memory _path = new address[](2);\r\n            _path[0] = address(this);\r\n            _path[1] = usdt;\r\n            uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, _path);\r\n            if (amounts.length \u003e 0) {\r\n                uint256 usdtValue = amounts[amounts.length - 1];\r\n                return usdtValue;\r\n            }\r\n        }\r\n        recipient;\r\n        return 0;\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) public onlyManager returns(bool _sent){\r\n        require(_token != address(this), \"Can\u0027t let you take all native token\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n    \r\n    function Sweep() external onlyManager {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n    \r\n}"},"ERC20.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: Unlicensed\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"ERC20Burnable.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nimport \"./Context.sol\";\r\nimport \"./ERC20.sol\";\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance \u003e= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}"},"IERC20.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IERC20Metadata.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nimport \"./IERC20.sol\";\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Pair.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router01.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"},"IUniswapV2Router02.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nimport \"./IUniswapV2Router01.sol\";\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nimport \"./Context.sol\";\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.8.2;\r\n// SPDX-License-Identifier: MIT\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}