// SPDX-License-Identifier: No License (None)
pragma solidity ^0.7.0;

interface Iwhitelist{
    
    function addNewWallet(
        address _which,
        uint256 _flags,
        uint256 _maxWallets
    ) external returns (bool);
    
    function updateMaxWallet(address _which, uint256 _maxWallets) external returns (bool);
    
    function changeFlags(address _which, uint256 _flags) external returns (bool);
    
    function addWalletBehalfExchange(address _mainWallet,address _subWallet)
        external
        returns (bool);
}


contract Ownable  {
    
    address public primaryOwner;

    
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    
    

    /**
     * @dev The Ownable constructor sets the `primaryOwner`
     * account.
     */
    constructor(){
        primaryOwner = msg.sender;
        emit OwnershipTransferred(primaryOwner, address(0));
    }

    modifier onlyOwner() {
        require(msg.sender == primaryOwner, "ERR_OWNER_ADDRESS_ONLY");
        _;
    }

 
    /**
     * @dev change system address
     * @param _which The address to which is new system address
     */
    function changePrimaryOwner(address _which)
        public
        onlyOwner()
        returns (bool)
    {
        require(_which != address(0),"ERR_ZERO_ADDRESS");
        emit OwnershipTransferred(primaryOwner, _which);
        primaryOwner = _which;
        return true;
    }

}

contract WhiteListHelper is Ownable {
    
    Iwhitelist whitelist;
    
    
    constructor(address _whitelist){
        whitelist = Iwhitelist(_whitelist);
    }
    
    mapping (address => bool) public systemWallets;
    
    modifier onlySystem() {
        require(systemWallets[msg.sender],"ERR_NOT_SYSTEM_ADDRESS");
        _;
    }
    
    event SystemWalletAdded(address which);
    event SystemWalletRemoved(address which);
    
    event WhitelistMethodCalled(address caller,string  methodname);
    
    function addSystemWallet(address which) external onlyOwner() returns(bool){
        require(!systemWallets[which],"ALREADY_SYSTEM_WALLET");
        systemWallets[which] = true;
        emit SystemWalletAdded(which);
        return true;
    }
    
    
    function removeSystemWallet(address which) external onlyOwner() returns(bool){
        require(systemWallets[which],"NOT_SYSTEM_WALLET");
        systemWallets[which] = false;
        emit SystemWalletRemoved(which);
        return true;
    }
    
    function addNewWallet(address _which,uint256 _flags,uint256 _maxWallets) external onlySystem() returns (bool){
        emit WhitelistMethodCalled(msg.sender,"addSystemWallet");
        return whitelist.addNewWallet(_which,_flags,_maxWallets);
        
    }
    
    function updateMaxWallet(address _which, uint256 _maxWallets) external onlySystem() returns (bool){
         emit WhitelistMethodCalled(msg.sender,"updateMaxWallet");
        return whitelist.updateMaxWallet(_which,_maxWallets);
    }
    
    function changeFlags(address _which, uint256 _flags) external onlySystem() returns (bool){
         emit WhitelistMethodCalled(msg.sender,"changeFlags");
        return whitelist.changeFlags(_which,_flags);
    }
    
    function addWalletBehalfExchange(address _mainWallet,address _subWallet)
        external
        returns (bool)
    {
        emit WhitelistMethodCalled(msg.sender,"addWalletBehalfExchange");
        return whitelist.addWalletBehalfExchange(_mainWallet,_subWallet);   
    }
}