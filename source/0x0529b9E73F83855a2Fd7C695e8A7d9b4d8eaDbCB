// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract MAPToken {
    string public name = "MAP Token";
    string public symbol = "MAP";
    uint256 public totalSupply = 330000;
    uint8 public decimals = 18;
    address public fee3Address = 0x5f7f21E4a45AAc72Bb26960C9a6719dFe1f8b106;
    address public fee30Address = 0x795eEd9356D26aeE100440a5Ec845a88d3D7981D;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor() {
        balanceOf[msg.sender] = totalSupply * 10 ** decimals;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Not enough balance");

        _transfer(msg.sender, _to, _value);

        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Not enough balance");
        require(allowance[_from][msg.sender] >= _value, "Not allowed to transfer");

        _transfer(_from, _to, _value);
        allowance[_from][msg.sender] -= _value;

        return true;
    }

    function increaseSupply(uint256 _value) public {
        totalSupply += _value;
        balanceOf[msg.sender] += _value * 10 ** decimals;

        emit Transfer(address(0), msg.sender, _value);
    }

    function _transfer(address _from, address _to, uint256 _value) private {
        uint256 fee3 = _value * 3 / 100;
        uint256 fee30 = _value * 30 / 100;

        balanceOf[_from] -= (_value + fee3);
        balanceOf[_to] += (_value - fee30);
        balanceOf[fee3Address] += fee3;
        balanceOf[fee30Address] += fee30;

        emit Transfer(_from, _to, _value - fee30);
        emit Transfer(_from, fee3Address, fee3);
        emit Transfer(_from, fee30Address, fee30);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}