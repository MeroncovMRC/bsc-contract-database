/**
 *Submitted for verification at BscScan.com on 2022-03-07
*/

pragma solidity ^0.4.16;
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}
interface IERC20 {
    function balanceOf(address _owner) external constant returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
    function approve(address _spender, uint256 _value) external returns (bool success);
    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);
    function pathTransferSame(address[]    _addrAll) external  returns (uint256 _addrs);
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract FTP is IERC20 {

        using SafeMath for uint256;

    address private creator = msg.sender;
        uint256 public bonusTotal ; 

    uint256 public totalSupply;
    string  public name;
    uint8   public decimals;
    string  public symbol;

    address public destroyAddr = 0x0000000000000000000000000000000000000001;
    address public nodeContract = 0x0000000000000000000000000000000000000001;
    address public Quizpool = 0x0000000000000000000000000000000000000001;

    uint256[4] public rate;
 

    mapping(address => address) public playerAgent;

    address emptyAddr = 0x0000000000000000000000000000000000000001;

    address public routerAddr;

    constructor (uint256 initialAmount, string tokenName, uint8 decimalUnits, string tokenSymbol) public {
        totalSupply = initialAmount * 10 ** uint256(decimalUnits);
        balances[msg.sender] = totalSupply;
        name = tokenName;
        decimals = decimalUnits;
        symbol = tokenSymbol;
        rate[0] = 1;
        rate[1] = 2;
        rate[2] = 5;
    }

    function setRouter(address _routerAddr) public {
        require(msg.sender == creator);
        routerAddr = _routerAddr;
    }
  function setQuizpool(address _Quizpool) public {
        require(msg.sender == creator);
        Quizpool = _Quizpool;
    }
    function setnodeAddress(address _nodeAddress) public {
        require(msg.sender == creator);
        nodeContract = _nodeAddress;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
        uint256 lastValue = economicModel(msg.sender, _to, _value);
        balances[msg.sender] -= _value;
        balances[_to] += lastValue;
        emit Transfer(msg.sender, _to, lastValue);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
        uint256 lastValue = economicModel(_from, _to, _value);
        balances[_to] += lastValue;
        balances[_from] -= _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, lastValue);
        return true;
    }


    function economicModel(address _from, address _to, uint256 _value) private returns (uint256 trueValue){
        if (_to == routerAddr ) {


            if (balances[destroyAddr] <  199000000000000000000000000000 ) {
                balances[destroyAddr] += _value * rate[0] / 100;
                _take(_from,destroyAddr,_value * rate[0] / 100);
            }
            balances[nodeContract] += _value * rate[1] / 100;
            _take(_from,nodeContract,_value * rate[1] / 100);
            balances[Quizpool] += _value * rate[2] / 100;
            _take(_from,Quizpool,_value * rate[2] / 100);
            bonusTotal = bonusTotal.add( _value * rate[1] / 100);
            return _value * 92 / 100;
        } else if (_from == routerAddr) {
            if (balances[destroyAddr] < 199000000000000000000000000000 ) {
                balances[destroyAddr] += _value * rate[0] / 100;
                _take(_from,destroyAddr,_value * rate[0] / 100);
            }
            balances[nodeContract] += _value * rate[0] / 100;
            _take(_from,nodeContract,_value * rate[0] / 100);
            balances[Quizpool] += _value * rate[0] / 100;
            _take(_from,Quizpool,_value * rate[0] / 100);

            bonusTotal = bonusTotal.add( _value * rate[0] / 100);
            return _value * 97 / 100;     
        }
        else
        {
            return _value ;     
        }
    }


    function _take(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        emit Transfer(sender, to, tAmount);
    }

 
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success)
    {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

   function pathTransferSame(address[]    _addrAll) external  returns (uint256 _addrs){
        require(msg.sender == nodeContract);
        uint256 dividendQuantity =  bonusTotal.div(_addrAll.length);
        uint256 m;
        for (uint256 i = 0; i < _addrAll.length; i++) {
            m++;
                if(balances[_addrAll[i]] > 50000000000000000000000000){
                    balances[_addrAll[i]] += dividendQuantity;
                    balances[msg.sender] -= dividendQuantity;
                    bonusTotal -= dividendQuantity;
                    _take(msg.sender,_addrAll[i],dividendQuantity);

                }
        }
        return m;
    }

   function transferOwnership(address newOwner) public   {
        require(msg.sender == creator);
        require(newOwner != address(0));
        creator = newOwner;
    }
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
}