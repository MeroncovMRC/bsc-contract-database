pragma solidity 0.8.19;

// How fast can you get to 100 points and win the prize?
// First person to deposit 0.01 BNB (10000000000000000 wei) wins the entire prize!
// 1 wei = 1 point

contract CryptoSprint {
    // 100 points to win!
    uint256 public SCORE_TO_WIN = 10000000000000000;
    uint256 public PRIZE;
    
    // 100 points = 0.01 BNB
    // Speed limit: 0.005 BNB to prevent insta-win
    // Prevents people from going too fast!
    uint256 public speed_limit = 5000000000000000;
    
    // Keep track of everyone's score
    mapping (address => uint256) racerScore;
    mapping (address => uint256) racerSpeedLimit;
    
    uint256 latestTimestamp;
    address owner;
    
    constructor () payable {
        PRIZE = msg.value;
        owner = msg.sender;
    }
    
    function race() public payable {
        if (racerSpeedLimit[msg.sender] == 0) { racerSpeedLimit[msg.sender] = speed_limit; }
        require(msg.value <= racerSpeedLimit[msg.sender] && msg.value > 1 wei);
        
        racerScore[msg.sender] += msg.value;
        racerSpeedLimit[msg.sender] = (racerSpeedLimit[msg.sender] / 2);
        
        latestTimestamp = block.timestamp;
    
        // YOU WON
        if (racerScore[msg.sender] >= SCORE_TO_WIN) {
            payable(msg.sender).transfer(PRIZE);
        }
    }
    
    receive() external payable {
        race();
    }
    
    // Pull the prize if no one has raced in 1 days :(
    function endRace() public {
        require(msg.sender == owner);
        require(block.timestamp > latestTimestamp + 1 days);
        
        payable(msg.sender).transfer(address(this).balance);
    }
}