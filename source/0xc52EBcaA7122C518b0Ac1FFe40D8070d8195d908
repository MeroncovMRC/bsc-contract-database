// SPDX-License-Identifier: MIT



// File: contracts/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
// File: contracts/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
// File: contracts/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}
// File: contracts/WinkPrivateSale_nocomments.sol


pragma solidity ^0.8.19;



contract WinkPrivateSale is Ownable {
    event Purchase(address indexed buyer, uint256 wink, uint256 usdt);

    IERC20 public USDT;

    address public treasuryAddress;

    mapping(address => UserData) users;

    struct UserData {
        uint256 bought;
        uint256 discountedBought;
        uint256 bonus;
        uint256 whitelist;
    }

    uint256 totalBought = 0;
    uint256 price = 12;
    uint256 discountedPrice = 11;
    uint256 minimum = 100_000_00000_00000_00000;
    
    uint256 baseLimit = 0;

    constructor() {
        USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    }

    function setUSDT(address _usdt) public onlyOwner {
        USDT = IERC20(_usdt);
    }

    function setMinimum(uint256 _minimum) public onlyOwner {
        minimum = _minimum;
    }

    function getMinimum() public view returns (uint256) {
        return minimum;
    }

    


    function buyDiscountedWink(uint256 USDTAmount) public {
        uint256 winkAmount = USDTAmount * 1e3 / discountedPrice;

        require(users[msg.sender].discountedBought < users[msg.sender].whitelist * 1e3 / discountedPrice, "Address purchase limit reached");

        if(users[msg.sender].discountedBought + winkAmount > users[msg.sender].whitelist * 1e3 / discountedPrice) {
            winkAmount = users[msg.sender].whitelist - users[msg.sender].whitelist * 1e3 / discountedPrice;
        }

        USDTAmount = winkAmount * discountedPrice / 1e3;

        require(USDTAmount >= minimum, "Minimum amount not reached");

        uint256 USDTBalanceOfUser = USDT.balanceOf(msg.sender);
        require(USDTBalanceOfUser >= USDTAmount, "You dont have enough balance");
        
        uint256 allowance = USDT.allowance(msg.sender, address(this));
        require(allowance >= USDTAmount, "Check allowance");

        USDT.transferFrom(msg.sender, address(this), USDTAmount);

        users[msg.sender].discountedBought += winkAmount;

        emit Purchase(msg.sender, winkAmount, USDTAmount);
    }

    function buyBaseWink(uint256 USDTAmount) public {
        uint256 winkAmount = USDTAmount * 1e3 / price;

        require(totalBought < baseLimit, "Purchase limit reached");

        if(totalBought + winkAmount > baseLimit) {
            winkAmount = baseLimit - totalBought;
        }

        USDTAmount = winkAmount * price / 1e3;

        require(USDTAmount >= minimum, "Minimum amount not reached");

        uint256 USDTBalanceOfUser = USDT.balanceOf(msg.sender);
        require(USDTBalanceOfUser >= USDTAmount, "You dont have enough balance");
        
        uint256 allowance = USDT.allowance(msg.sender, address(this));
        require(allowance >= USDTAmount, "Check allowance");

        USDT.transferFrom(msg.sender, address(this), USDTAmount);

        users[msg.sender].bought += winkAmount;
        totalBought += winkAmount;

        emit Purchase(msg.sender, winkAmount, USDTAmount);
    }





    function setPrice(uint256 _price) public onlyOwner {
        price = _price;
    }

    function getPrice() public view returns (uint256) {
        return price;
    }

    function setDiscountedPrice(uint256 _discountedPrice) public onlyOwner {
        discountedPrice = _discountedPrice;
    }

    function getDiscountedPrice() public view returns (uint256) {
        return discountedPrice;
    }




    function setBonus(address _address, uint256 _amount) public onlyOwner {
        users[_address].bonus = _amount;
    }

    function getUserData(address _address) public view returns (uint256 bought, uint256 discountedBought, uint256 bonus, uint256 whitelist) {
        bought = users[_address].bought;
        discountedBought = users[_address].discountedBought;
        bonus = users[_address].bonus;
        whitelist = users[_address].whitelist;
    }

    function getTotalBought() public view returns (uint256) {
        return totalBought;
    }




    function setBaseLimit(uint256 _baseLimit) public onlyOwner {
        baseLimit = _baseLimit;
    }

    function getBaseLimit() public view returns (uint256) {
        return baseLimit;
    }

    function setAddressLimit(address _address, uint256 _addressLimit) public onlyOwner {
        users[_address].whitelist = _addressLimit;
    }
 
    


    function withdrawUSDT() public onlyOwner {
        uint256 USDTBalance = USDT.balanceOf(address(this));
        USDT.transfer(treasuryAddress, USDTBalance);
    }

    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {
        treasuryAddress = _treasuryAddress;
    }
}