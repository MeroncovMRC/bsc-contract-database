
// File: contracts/mosAsLp/interfaces/IAsdic.sol
// SPDX-License-Identifier: MIT
interface IAsdic {
    function asyncMosInvite(address account) external returns (bool);

    function superior(address account) external returns (address);

    function getLowerLevel(
        address account
    ) external view returns (address[] memory);
}


// File: contracts/mosAsLp/interfaces/IFarmerPool.sol
// SPDX-License-Identifier: MIT
interface IFarmerPool {
    function asyncHashrate(address user, uint amount, bool flag) external;
}


// File: contracts/mosAsLp/interfaces/ILock.sol
// SPDX-License-Identifier: MIT
interface ILock {
    function locking(address account, uint256 lock) external;
}


// File: contracts/mosAsLp/interfaces/IPancakePair.sol
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}


// File: contracts/mosAsLp/interfaces/IPancakeRouter01.sol
pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/mosAsLp/interfaces/IPancakeRouter02.sol
pragma solidity >=0.6.2;

import "./IPancakeRouter01.sol";

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/mosAsLp/mosAsPool.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "contracts/util/IERC20.sol";
import "contracts/util/SafeMath.sol";
import "./interfaces/IPancakeRouter02.sol";
import "./interfaces/ILock.sol";
import "./interfaces/IPancakePair.sol";
import "./interfaces/IAsdic.sol";
import "./interfaces/IFarmerPool.sol";

contract TokenReceiver {
    //回流
    constructor(address token) {
        IERC20(token).approve(msg.sender, type(uint256).max);
    }
}

contract MOSASPOOL {
    using SafeMath for uint;
    enum opreate {
        stake,
        upStake,
        claim
    }
    struct StakedInfo {
        uint index;
        uint stakedAmount;
        uint updateTime;
        uint available;
        uint accruedReward;
    }
    struct recordInfo {
        uint lpAmount;
        uint stakeTime;
        uint endTime;
    }

    StakedInfo public globalStakedInfo;
    mapping(address => StakedInfo) public userStakedInfos;

    mapping(address => recordInfo[]) public record;

    uint public startTime;
    uint public yearHalfCount;
    uint public yearHalfAmount = 25000000e18;
    uint public takeSeconds;
    uint public subHalfTime = 365 days;
    uint public backFlowAmount;

    address public tokenReceiver;

    IFarmerPool public IFarmer;
    address public owner;
    IAsdic public Iasdic;
    IERC20 public asdic;
    IERC20 public usdt;
    IERC20 public mos;
    ILock public lock;
    IPancakeRouter02 public route;
    address public factory;
    IPancakePair public pair;

    constructor(
        address _usdt,
        address _mos,
        address _route,
        address _pair,
        address _asdic,
        address _lock
    ) {
        owner = msg.sender;
        usdt = IERC20(_usdt);
        route = IPancakeRouter02(_route);
        mos = IERC20(_mos);
        asdic = IERC20(_asdic);
        Iasdic = IAsdic(_asdic);
        lock = ILock(_lock);
        pair = IPancakePair(_pair);

        IERC20(asdic).approve(address(lock), type(uint).max);
        usdt.approve(address(route), type(uint).max);
        mos.approve(address(route), type(uint).max);
        asdic.approve(address(route), type(uint).max);
        tokenReceiver = address(new TokenReceiver(_asdic));
    }

    function setFarmerPool(address _poolAddress) external {
        require(msg.sender == owner, "Can't set the fermer address");
        IFarmer = IFarmerPool(_poolAddress);
    }

    function setTakeDays(uint _takeSeconds) external {
        require(msg.sender == owner, "Can't set the take time");
        takeSeconds = _takeSeconds;
    }

    function setYearHalfAmount(uint amount) external {
        require(msg.sender == owner, "No owner and set the year half amount");
        yearHalfAmount = amount;
    }

    function setSubHalfTime(uint _time) external {
        require(msg.sender == owner, "No owner to set the time");
        subHalfTime = _time;
    }

    function getRecordInfos(
        address account
    ) external view returns (recordInfo[] memory) {
        return record[account];
    }

    function setAddress(address _asdic, address _pair) external {
        require(msg.sender == owner);
        pair = IPancakePair(_pair);
        asdic = IERC20(_asdic);
    }

    function asyncCrowdfund(address user, uint _amount) external {
        // 众筹过来质押
        address sender = msg.sender;
        _stake(user, _amount, 300 days);
        pair.transferFrom(sender, address(this), _amount);
    }

    function onceDepositAsdic(uint _amount, uint _days) external {
        /*
            一键质押,买入MOS 买ASDIC，添加流动性，然后进行质押
        */
        address sender = msg.sender;
        require(_amount > 0, "Oncedeposit: The amount is less than zero");
        require(
            Iasdic.superior(sender) != address(0),
            "No superior with can't once deposit the Asdic"
        );

        asdic.transferFrom(sender, address(this), _amount);
        address[] memory path = new address[](2);
        path[0] = address(asdic);
        path[1] = address(mos);

        uint temp = _amount.mul(50).div(100);

        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            temp,
            0,
            path,
            address(this),
            block.timestamp + 1000
        );

        uint value = mos.balanceOf(address(this));
        (, , uint liquidity) = route.addLiquidity(
            address(mos),
            address(asdic),
            value,
            temp,
            1,
            1,
            address(this),
            block.timestamp + 1000
        );
        _stake(sender, liquidity, _days);
    }

    function onceDepositMos(uint _amount, uint _days) external {
        /*
            一键质押,买入MOS 买ASDIC，添加流动性，然后进行质押
        */
        address sender = msg.sender;
        require(_amount > 0, "Oncedeposit: The amount is less than zero");
        require(
            Iasdic.superior(sender) != address(0),
            "No superior with can't once deposit the Mos"
        );
        mos.transferFrom(sender, address(this), _amount);
        address[] memory path = new address[](2);
        path[0] = address(mos);
        path[1] = address(asdic);

        uint temp = _amount.mul(50).div(100);

        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            temp,
            0,
            path,
            address(this),
            block.timestamp + 1000
        );

        uint value = asdic.balanceOf(address(this));
        (, , uint liquidity) = route.addLiquidity(
            address(mos),
            address(asdic),
            temp,
            value,
            1,
            1,
            address(this),
            block.timestamp + 1000
        );

        _stake(sender, liquidity, _days);
    }

    //一键质押
    function onceDeposit(uint _amount, uint _days) external {
        /*
            从USDT开始，进行一键质押,买入MOS 买ASDIC，添加流动性，然后进行质押
        */
        address sender = msg.sender;
        require(_amount > 0, "Oncedeposit: The amount is less than zero");
        require(
            Iasdic.superior(sender) != address(0),
            "No superior with can't once deposit the usdt"
        );

        usdt.transferFrom(sender, address(this), _amount);

        // USDT->MOS
        address[] memory path = new address[](2);
        path[0] = address(usdt); //USDT
        path[1] = address(mos); //MOS
        uint[] memory amountArray;
        amountArray = route.swapExactTokensForTokens(
            _amount,
            0,
            path,
            address(this),
            block.timestamp + 1000
        );
        // MOS-> ASDIC
        uint temp = amountArray[1].mul(50).div(100);
        path[0] = address(mos); //MOS
        path[1] = address(asdic); //ASDIC

        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            temp,
            0,
            path,
            address(this),
            block.timestamp + 1000
        );
        uint value = asdic.balanceOf(address(this));

        (, , uint liquidity) = route.addLiquidity(
            address(mos),
            address(asdic),
            temp,
            value,
            1,
            1,
            address(this),
            block.timestamp + 1000
        );
        _stake(sender, liquidity, _days);
    }

    function takeLp(uint index, uint amount) external {
        //取出可领取的LP
        address sender = msg.sender;
        uint cTime = block.timestamp;
        uint lpValue;

        recordInfo[] storage info = record[sender];
        require(info.length > index, "Take lp error for index too long");
        require(
            info[index].lpAmount >= amount,
            "Take lp error for exceed balance"
        );
        require(
            info[index].endTime >= cTime,
            "Take lp error for exceed the time"
        );
        uint time = info[index].endTime.sub(info[index].stakeTime).div(1 days);
        if (time == 100) {
            lpValue = amount;
        }
        if (time == 200) {
            lpValue = amount.mul(150).div(100);
        }
        if (time == 300) {
            lpValue = amount.mul(2);
        }
        info[index].lpAmount = info[index].lpAmount.sub(amount);

        if (info[index].lpAmount < 1e10) {
            info[index] = info[info.length - 1];
            info.pop();
        }

        updateIndex(opreate.upStake, lpValue);
        updateUserIndex(sender, opreate.upStake, lpValue);

        pair.transfer(sender, amount);

        address superior = Iasdic.superior(sender);
        IFarmer.asyncHashrate(superior, lpValue, false);
    }

    function halfYear() public returns (uint) {
        require(subHalfTime > 0, "SubHalf time error");
        startTime = startTime == 0 ? block.timestamp : startTime;
        uint yearCount = (block.timestamp - startTime).div(subHalfTime);
        uint value;
        if (yearHalfCount <= yearCount) {
            yearHalfCount = yearCount + 1;
            uint backflow = IERC20(asdic).balanceOf(address(tokenReceiver));
            if (backflow > 0) {
                IERC20(asdic).transferFrom(
                    tokenReceiver,
                    address(this),
                    backflow.div(2)
                );
                backFlowAmount = backflow.div(2);
            }

            yearHalfAmount = yearHalfAmount.div(2);
        }
        value = backFlowAmount + yearHalfAmount;
        return value.div(subHalfTime);
    }

    function claim() public {
        address sender = msg.sender;
        updateIndex(opreate.claim, 0);
        updateUserIndex(sender, opreate.claim, 0);

        StakedInfo storage userStakedInfo = userStakedInfos[sender];

        if (userStakedInfo.available > 0) {
            uint temp = userStakedInfo.available;
            IERC20(asdic).transfer(sender, temp.mul(30).div(100));
            ILock(lock).locking(sender, temp.mul(70).div(100));
            userStakedInfo.accruedReward += temp;

            userStakedInfo.available = 0;
        }
    }

    function updateIndex(opreate _oprea, uint lpAmount) internal {
        StakedInfo storage info = globalStakedInfo;
        if (info.updateTime == 0 || info.stakedAmount == 0) {
            info.updateTime = block.timestamp;
            info.stakedAmount += lpAmount;
            halfYear();
            return;
        }
        uint release = halfYear();

        release = release.mul(block.timestamp - info.updateTime);

        release = release.mul(1e18);

        release = release.div(info.stakedAmount);

        info.index += release;

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.updateTime = block.timestamp;
    }

    function getHalfYear() internal view returns (uint) {
        if (yearHalfAmount == 0) {
            return 0;
        }
        uint value = backFlowAmount + yearHalfAmount;
        return value.div(subHalfTime);
    }

    function awaitGetAmount(address user) external view returns (uint) {
        StakedInfo memory infoGlo = globalStakedInfo;
        StakedInfo memory infoUser = userStakedInfos[user];

        uint secRelease = getHalfYear();

        if (infoGlo.stakedAmount == 0) return 0;

        uint _time = block.timestamp.sub(infoGlo.updateTime);

        uint _amount = _time.mul(secRelease);

        _amount = _amount.mul(1e18);

        _amount = _amount.div(infoGlo.stakedAmount);

        uint _gloIndex = infoGlo.index.add(_amount);

        uint value = _gloIndex.sub(infoUser.index);

        value = value.mul(infoUser.stakedAmount);

        value = value.div(1e18);

        value = value.add(infoUser.available);

        return (value);
    }

    function updateUserIndex(
        address user,
        opreate _oprea,
        uint lpAmount
    ) internal {
        StakedInfo storage info = userStakedInfos[user];

        info.updateTime = block.timestamp;

        uint value = info.stakedAmount.mul(globalStakedInfo.index - info.index);

        value = value / 1e18;

        if (value != 0) {
            info.available += value;
        }

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.index = globalStakedInfo.index;
    }

    function stake(uint _amount, uint _days) external {
        _stake(msg.sender, _amount, _days);
        pair.transferFrom(msg.sender, address(this), _amount);
    }

    function _stake(address _sender, uint _amount, uint _days) internal {
        require(
            _days == 100 days || _days == 200 days || _days == 300 days,
            "deposit days error"
        );
        uint lpAmount;
        if (_days == 100 days) {
            lpAmount = _amount;
        }
        if (_days == 200 days) {
            lpAmount = _amount.mul(150).div(100);
        }
        if (_days == 300 days) {
            lpAmount = _amount.mul(2);
        }

        updateIndex(opreate.stake, lpAmount);
        updateUserIndex(_sender, opreate.stake, lpAmount);
        _days = takeSeconds == 0 ? _days : takeSeconds;
        record[_sender].push(
            recordInfo({
                lpAmount: _amount,
                stakeTime: block.timestamp,
                endTime: block.timestamp + _days
            })
        );
        address superior = Iasdic.superior(_sender);
        IFarmer.asyncHashrate(superior, lpAmount, true);
    }
}


// File: contracts/util/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/util/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}
