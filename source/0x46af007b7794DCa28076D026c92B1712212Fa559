{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IPancakeRouterV2.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.5;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"StarGateToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e= 0.8.5;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IPancakeRouterV2.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n contract StarGateToken is Context, IERC20Metadata, Ownable {\r\n\r\n\tstring private constant NAME = \"STARGATE\";\r\n\tstring private constant SYMBOL = \"STAR\";\r\n\tuint8 private constant DECIMALS = 18;\r\n\r\n\tuint256 public _celestialLpFee; //% of each transaction that will be added as liquidity\r\n\tuint256 public _stargateFee; //% of each transaction that will be used for BNB reward pool\r\n\tuint256 public _bigBangFee; //% of each transaction that will be used for _bigBangFee\r\n\tuint256 public _blackHoleFee; //% of each transaction that will be burned to the blackhole\r\n\tuint256 public _additionalSellFee; //Additional % fee to apply on sell transactions.\r\n\tuint256 public _totalFee; //The total fee to be taken\r\n\r\n\tuint256 private constant _totalTokens = 100000 * 10**DECIMALS;\r\n\tmapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\tmapping (address =\u003e uint256) private _balances; \r\n\tmapping (address =\u003e bool) private _addressesExcludedFromFees; \r\n\tmapping (address =\u003e bool) private _blacklistedAddresses; \r\n\tmapping (address =\u003e uint256) private _sellsAllowance; //consecutive sells are not allowed within a 1min window\r\n\r\n\tbool private _isFeeEnabled; // True if fees should be applied on transactions, false otherwise\r\n\r\n\tuint256 private _tokenSwapThreshold = 250 * 10**DECIMALS; //There should be at least of the total supply in the contract before triggering a swap\r\n\tuint256 private _tokenSwapThresholdAmount = _totalTokens; //max token Amount that gets swapped \r\n\tuint256 private _transactionLimit = _totalTokens; // The amount of tokens that can be sold at once\r\n\r\n\t// UNISWAP INTERFACES (For swaps)\r\n\tIPancakeRouter02 internal _pancakeswapV2Router;\r\n\taddress private _pancakeswapV2Pair;\r\n\taddress public _celestialLiquidityWallet; \r\n\taddress public _bigBangWallet;\r\n\taddress public _StarGateReserve;\r\n\taddress public _blackHole; \r\n\r\n\t// EVENTS\r\n\tevent Swapped(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity, uint256 bnbIntoLiquidity, bool successSentMarketing);\r\n\r\n    //Router MAINNET: 0x10ED43C718714eb63d5aA57B78B54704E256024E TESTNET ROPSTEN: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n\tconstructor () {\r\n\t\t_balances[_msgSender()] = totalSupply();\r\n\t\t\r\n\t\t// Exclude contract from fees\r\n\t\t_addressesExcludedFromFees[address(this)] = true;\r\n\r\n\t\t_bigBangWallet = msg.sender;\r\n\t\t_StarGateReserve = msg.sender;\r\n\t\t_blackHole = msg.sender;\r\n\r\n\t\t// Initialize Pancakeswap V2 router and STAR \u003c-\u003e BNB pair.\r\n\t\tsetPancakeswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\tsetFees(1, 2, 1, 1, 8);\r\n\r\n\t\temit Transfer(address(0), _msgSender(), totalSupply());\r\n\t\tsetAutoLiquidityWallet(owner());\r\n\r\n\t\tpresale();\r\n\t}\r\n\r\n\tfunction presale() public onlyOwner {\r\n\t\tsetExcludedFromFees(owner(),true);\r\n\t\tsetTransactionLimit(_totalTokens); \r\n\t}\r\n\r\n\tfunction activate() public onlyOwner {\r\n\t\tsetTransactionLimit(_totalTokens / 100 * 1); \r\n\t\tsetFeeEnabled(true);\r\n\t}\r\n\r\n\tfunction setMarketingWallet(address marketingWallet) public onlyOwner() {\r\n        _bigBangWallet = marketingWallet;\r\n    }\r\n  \r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\t\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\tdoTransfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\tdoTransfer(sender, recipient, amount);\r\n\t\tdoApprove(sender, _msgSender(), _allowances[sender][_msgSender()] - amount); // Will fail when there is not enough allowance\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\tdoApprove(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction doTransfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"Transfer from the zero address is not allowed\");\r\n\t\trequire(recipient != address(0), \"Transfer to the zero address is not allowed\");\r\n\t\trequire(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\t\t\r\n\t\tif(!isExcludedFromFees(sender)){\r\n\t\t\tif (isTransferLimited(sender, recipient)) {\r\n\t\t\t\trequire(amount \u003c= _transactionLimit, \"Transfer amount exceeds the maximum allowed\");\r\n\t\t\t}\r\n\r\n\t\t\t// Perform a swap if needed.  A swap in the context of this contract is the process of swapping the contract\u0027s token balance with BNBs in order to provide liquidity and increase the reward pool\r\n\t\t\texecuteSwapIfNeeded(sender, recipient);\r\n\t\t}\r\n\r\n\t\tonBeforeTransfer(sender, recipient, amount);\r\n\r\n\t\t// Calculate fee rate\r\n\t\tuint256 feeRate = calculateFeeRate(sender, recipient);\r\n\t\t\r\n\t\tuint256 feeAmount = amount * feeRate / 100;\r\n\t\tuint256 transferAmount = amount - feeAmount;\r\n\r\n\t\tuint256 burnFee = 0;\r\n\t\tif(feeAmount \u003e 0){\r\n\t\t\tburnFee = amount * _blackHoleFee / 100;\r\n\t\t}\r\n\t\t// Update balances\r\n\t\tupdateBalances(sender, recipient, amount, feeAmount,burnFee);\r\n\r\n\t\temit Transfer(sender, recipient, transferAmount); \r\n\t\tonTransfer(sender, recipient, amount);\r\n\r\n\t}\r\n\t\r\n\tfunction executeSwapIfNeeded(address sender, address recipient) private {\r\n\t\tif (!isMarketTransfer(sender, recipient)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 tokensAvailableForSwap = balanceOf(address(this));\r\n\t\tif (tokensAvailableForSwap \u003e= _tokenSwapThreshold) {\r\n\t\t\ttokensAvailableForSwap = _tokenSwapThresholdAmount;\r\n\t\t\t// Swap on sells and enable a 30 seconds cooldown\r\n\t\t\tbool isSelling = isPancakeswapPair(recipient);\r\n\t\t\tif (isSelling) {\r\n\t\t\t\texecuteSwap(tokensAvailableForSwap);\r\n\t\t\t    if (sender != address(this)) {\r\n    \t\t\t\trequire((block.timestamp \u003e= (_sellsAllowance[sender] + 60)), \"Sell was less than 1 minute ago, wait a bit.\");\r\n    \t\t\t\t_sellsAllowance[sender] = block.timestamp;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction executeSwap(uint256 amount) private {\r\n\t\t// Allow pancakeswap to spend the tokens of the address\r\n\t\tdoApprove(address(this), address(_pancakeswapV2Router), amount);\r\n\r\n\t\tuint256 poolFee = _totalFee + _additionalSellFee;\r\n\r\n\t\tuint256 tokensReservedForLiquidity = amount * _celestialLpFee / poolFee;\r\n\t\tuint256 tokensReservedForReward = amount * _stargateFee / poolFee;\r\n\t\tuint256 tokensReservedForMarketing = amount - tokensReservedForLiquidity - tokensReservedForReward;\r\n\r\n\t\tuint256 tokensToSwapForLiquidity = tokensReservedForLiquidity / 2;\r\n\t\tuint256 tokensToAddAsLiquidity = tokensToSwapForLiquidity;\r\n\r\n\t\tuint256 tokensToSwap = tokensReservedForReward + tokensToSwapForLiquidity + tokensReservedForMarketing;\r\n\t\tuint256 bnbSwapped = swapTokensForBNB(tokensToSwap);\r\n\t\t\r\n\t\tuint256 bnbToBeAddedToLiquidity = bnbSwapped * tokensToSwapForLiquidity / tokensToSwap;\r\n\t\tuint256 bnbToBeSentToMarketing = bnbSwapped * tokensReservedForMarketing / tokensToSwap;\r\n\t\tuint256 bnbToBeSentToStargate = bnbSwapped -bnbToBeAddedToLiquidity - bnbToBeSentToMarketing;\r\n\r\n\t\t(bool successSentMarketing,) = _bigBangWallet.call{value:bnbToBeSentToMarketing}(\"\");\r\n\t\t_StarGateReserve.call{value:bnbToBeSentToStargate};\r\n\t\t(,uint bnbAddedToLiquidity,) = _pancakeswapV2Router.addLiquidityETH{value: bnbToBeAddedToLiquidity}(address(this), tokensToAddAsLiquidity, 0, 0, _celestialLiquidityWallet, block.timestamp + 360);\r\n\t\t\r\n\t\temit Swapped(tokensToSwap, bnbSwapped, tokensToAddAsLiquidity, bnbToBeAddedToLiquidity, successSentMarketing);\r\n\t}\r\n\r\n\tfunction onBeforeTransfer(address sender, address recipient, uint256 amount) internal virtual { }\r\n\tfunction onTransfer(address sender, address recipient, uint256 amount) internal virtual { }\r\n\r\n\tfunction updateBalances(address sender, address recipient, uint256 sentAmount, uint256 feeAmount, uint256 burnAmount) private {\r\n\t\t// Calculate amount to be received by recipient\r\n\t\tuint256 receivedAmount = sentAmount - feeAmount;\r\n\r\n\t\t// Update balances\r\n\t\t_balances[sender] -= sentAmount;\r\n\t\t_balances[recipient] += receivedAmount;\r\n\t\t\r\n\t\t// Add fees to contract\r\n\t\t_balances[address(this)] += feeAmount;\r\n\r\n\t\t// burn blackhole portion from contract\r\n\t\t_balances[address(this)] -= burnAmount;\r\n\t\t_balances[_blackHole] += burnAmount;\r\n\t\temit Transfer(address(this), _blackHole, burnAmount); \r\n\t}\r\n\r\n\tfunction doApprove(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"Cannot approve from the zero address\");\r\n\t\trequire(spender != address(0), \"Cannot approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction calculateFeeRate(address sender, address recipient) private view returns(uint256) {\r\n\t\tbool applyFees = _isFeeEnabled \u0026\u0026 !_addressesExcludedFromFees[sender] \u0026\u0026 !_addressesExcludedFromFees[recipient];\r\n\t\tif (applyFees) {\r\n\t\t\tif (isPancakeswapPair(recipient)) {\r\n\t\t\t\tif (_blacklistedAddresses[sender]) {\r\n\t\t\t\t    return _totalFee + 36;\r\n\t\t\t\t} else {\r\n\t\t\t\t    return _totalFee + _additionalSellFee;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn _totalFee;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\r\n\t// This function swaps a {tokenAmount} of STAR tokens for BNB and returns the total amount of BNB received\r\n\tfunction swapTokensForBNB(uint256 tokenAmount) internal returns(uint256) {\r\n\t\tuint256 initialBalance = address(this).balance;\r\n\t\t\r\n\t\t// Generate pair for STAR -\u003e WBNB\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _pancakeswapV2Router.WETH();\r\n\r\n\t\t// Swap\r\n\t\t_pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp + 360);\r\n\t\t\r\n\t\t// Return the amount received\r\n\t\treturn address(this).balance - initialBalance;\r\n\t}\r\n\r\n\t// Returns true if the transfer between the two given addresses should be limited by the transaction limit and false otherwise\r\n\tfunction isTransferLimited(address sender, address recipient) private view returns(bool) {\r\n\t\tbool isSelling = isPancakeswapPair(recipient);\r\n\t\treturn isSelling \u0026\u0026 isMarketTransfer(sender, recipient);\r\n\t}\r\n\r\n\tfunction isSwapTransfer(address sender, address recipient) private view returns(bool) {\r\n\t\tbool isContractSelling = sender == address(this) \u0026\u0026 isPancakeswapPair(recipient);\r\n\t\treturn isContractSelling;\r\n\t}\r\n\r\n\t// Function that is used to determine whether a transfer occurred due to a user buying/selling/transfering and not due to the contract swapping tokens\r\n\tfunction isMarketTransfer(address sender, address recipient) internal virtual view returns(bool) {\r\n\t\treturn !isSwapTransfer(sender, recipient);\r\n\t}\r\n\r\n\t// Returns how many more $STAR tokens are needed in the contract before triggering a swap\r\n\tfunction amountUntilSwap() public view returns (uint256) {\r\n\t\tuint256 balance = balanceOf(address(this));\r\n\t\tif (balance \u003e _tokenSwapThreshold) {\r\n\t\t\t// Swap on next relevant transaction\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn _tokenSwapThreshold - balance;\r\n\t}\r\n\r\n\tfunction setPancakeswapRouter(address routerAddress) public onlyOwner {\r\n\t\trequire(routerAddress != address(0), \"Cannot use the zero address as router address\");\r\n\t\t\r\n\t\t_pancakeswapV2Router = IPancakeRouter02(routerAddress);\r\n\t\t_pancakeswapV2Pair = IPancakeFactory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\r\n     \r\n\t}\r\n\r\n\tfunction isPancakeswapPair(address addr) internal view returns(bool) {\r\n\t\treturn _pancakeswapV2Pair == addr;\r\n\t}\r\n\r\n    // update fee manually\r\n\tfunction setFees(uint256 liquidityFee, uint256 rewardFee, uint256 marketingFee, uint256 burnFee ,uint256 additionalSellFee) public onlyOwner {\r\n\t\t\r\n\t\t_celestialLpFee = liquidityFee;\r\n\t\t_stargateFee = rewardFee;\r\n\t\t_bigBangFee = marketingFee;\r\n\t\t_blackHoleFee = burnFee;\r\n\r\n\t\t// Enforce invariant\r\n\t\tuint256 newFee = _stargateFee + _bigBangFee + _celestialLpFee + _blackHoleFee;\r\n\r\n\t\trequire(newFee \u003c= 10, \"fee to high\");\r\n\t\trequire(additionalSellFee \u003c= 10, \"fee to high\");\r\n\r\n\t\t_totalFee = newFee;\r\n\t\t_additionalSellFee = additionalSellFee;\r\n\t}\r\n\r\n\tfunction updateSwapAmount(uint256 _amount) public onlyOwner{\r\n\t\t_tokenSwapThresholdAmount = _amount;\r\n\t}\r\n\t\r\n\t// This function will be used to reduce the limit later on, according to the price of the token\r\n\tfunction setTransactionLimit(uint256 limit) public onlyOwner {\r\n\t\trequire(limit \u003e 100 * 10**DECIMALS);\r\n\t\t_transactionLimit = limit;\r\n\t}\r\n\r\n\tfunction transactionLimit() public view returns (uint256) {\r\n\t\treturn _transactionLimit;\r\n\t}\r\n\r\n\tfunction setTokenSwapThreshold(uint256 threshold) public onlyOwner {\r\n\t\trequire(threshold \u003e 0, \"Threshold must be greater than 0\");\r\n\t\t_tokenSwapThreshold = threshold;\r\n\t}\r\n\r\n\tfunction tokenSwapThreshold() public view returns (uint256) {\r\n\t\treturn _tokenSwapThreshold;\r\n\t}\r\n\r\n\r\n\tfunction name() public override pure returns (string memory) {\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\r\n\tfunction symbol() public override pure returns (string memory) {\r\n\t\treturn SYMBOL;\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public override pure returns (uint256) {\r\n\t\treturn _totalTokens;\r\n\t}\r\n\t\r\n\r\n\tfunction decimals() public override pure returns (uint8) {\r\n\t\treturn DECIMALS;\r\n\t}\r\n\t\r\n\r\n\tfunction allowance(address user, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[user][spender];\r\n\t}\r\n\r\n\tfunction pancakeswapPairAddress() public view returns (address) {\r\n\t\treturn _pancakeswapV2Pair;\r\n\t}\r\n\r\n\tfunction setAutoLiquidityWallet(address liquidityWallet) public onlyOwner {\r\n\t\t_celestialLiquidityWallet = liquidityWallet;\r\n\t}\r\n\r\n\tfunction setStarGateReserve(address _stargate) public onlyOwner {\r\n\t\t_StarGateReserve = _stargate;\r\n\t}\r\n\r\n\tfunction isFeeEnabled() public view returns (bool) {\r\n\t\treturn _isFeeEnabled;\r\n\t}\r\n\r\n\tfunction setFeeEnabled(bool isEnabled) public onlyOwner {\r\n\t\t_isFeeEnabled = isEnabled;\r\n\t}\r\n\r\n\tfunction isExcludedFromFees(address addr) public view returns(bool) {\r\n\t\treturn _addressesExcludedFromFees[addr];\r\n\t}\r\n\r\n\tfunction setExcludedFromFees(address addr, bool value) public onlyOwner {\r\n\t\t_addressesExcludedFromFees[addr] = value;\r\n\t}\r\n\t\t\r\n\tfunction setBlacklistedWallet(address wallet) public onlyOwner {\r\n\t    _blacklistedAddresses[wallet] = true;\r\n\t}\r\n\t\r\n\tfunction removeBlacklistedWallet(address wallet) public onlyOwner {\r\n\t    _blacklistedAddresses[wallet] = false;\r\n\t}\r\n\t\r\n\tfunction isBlacklistedWallet(address wallet) public view onlyOwner returns(bool)  {\r\n\t    return _blacklistedAddresses[wallet];\r\n\t}\r\n\r\n\t// sends stuck tokens\r\n    function sendToBigBang() public payable onlyOwner {\r\n        (bool os, ) = payable(_bigBangWallet).call{value: address(this).balance }(\"\");\r\n        require(os);\r\n    }\r\n\r\n\t// Ensures that the contract is able to receive BNB\r\n\treceive() external payable {}\r\n}"}}