
// File: /contracts/NomiswapEPCSRouter.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.15;

import './interfaces/INomiswapEPCSFactory.sol';
import './interfaces/INomiswapEPCSPair.sol';
import './interfaces/INomiswapEPCSRouter.sol';

contract NomiswapEPCSRouter is INomiswapEPCSRouter {

    address public immutable factory;
    mapping(uint160 => address) public pairCache;

    constructor(address _factory) {
        factory = _factory;
    }
    
    modifier ensure(uint deadline) {
        require(deadline >= block.timestamp, 'NomiswapEPCSRouter: EXPIRED');
        _;
    }

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external override ensure(deadline) returns (uint[] memory amounts) {
        require(path.length >= 2, 'NomiswapEPCSRouter: INVALID_PATH');
        amounts = new uint[](path.length);
        amounts[0] = amountIn;
        address sourceToken = path[0];
        address targetToken = path[1];
        address pair = getPair(sourceToken, targetToken);
        safeTransferFrom(sourceToken, msg.sender, pair, amountIn);
        
        for (uint i; i < path.length - 2; i++) {
            address nextTargetToken = path[i + 2];
            address swapTo = getPair(targetToken, nextTargetToken);
            amounts[i + 1] = INomiswapEPCSPair(pair).swap(sourceToken, swapTo);
            pair = swapTo;
            sourceToken = targetToken;
            targetToken = nextTargetToken;
        }

        amounts[path.length - 1] = INomiswapEPCSPair(pair).swap(sourceToken, to);

        require(amounts[amounts.length - 1] >= amountOutMin, 'NomiswapEPCSRouter: INSUFFICIENT_OUTPUT_AMOUNT');
    }

    function _addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin
    ) internal virtual returns (uint amountA, uint amountB) {
        require(amountADesired > 0 && amountBDesired > 0, "AMOUNT ZERO");
        address pair = getPair(tokenA, tokenB);
        require(pair != address(0), "Nomiswap: NO_PAIR");

        (uint baseReserve, uint quoteReserve,,) = INomiswapEPCSPair(pair).getSwapInfo();
        if (baseReserve == 0 || quoteReserve == 0) {
            return (amountADesired, amountBDesired);
        }

        if (tokenA == INomiswapEPCSPair(pair).baseToken()) {

            uint amountBOptimal = amountADesired * quoteReserve / baseReserve;
            if (amountBOptimal <= amountBDesired) {
                require(amountBOptimal >= amountBMin, 'NomiswapEPCSRouter: INSUFFICIENT_B_AMOUNT');
                (amountA, amountB) = (amountADesired, amountBOptimal);
            } else {
                uint amountAOptimal = amountBDesired * baseReserve / quoteReserve;
                assert(amountAOptimal <= amountADesired);
                require(amountAOptimal >= amountAMin, 'NomiswapEPCSRouter: INSUFFICIENT_A_AMOUNT');
                (amountA, amountB) = (amountAOptimal, amountBDesired);
            }

        } else {

            uint amountAOptimal = amountBDesired * quoteReserve / baseReserve;
            if (amountAOptimal <= amountADesired) {
                require(amountAOptimal >= amountAMin, 'NomiswapEPCSRouter: INSUFFICIENT_B_AMOUNT');
                (amountA, amountB) = (amountAOptimal, amountBDesired);
            } else {
                uint amountBOptimal = amountADesired * baseReserve / quoteReserve;
                assert(amountBOptimal <= amountBDesired);
                require(amountBOptimal >= amountBMin, 'NomiswapEPCSRouter: INSUFFICIENT_A_AMOUNT');
                (amountA, amountB) = (amountADesired, amountBOptimal);
            }

        }
    }

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
        address pair = getPair(tokenA, tokenB);
        safeTransferFrom(tokenA, msg.sender, pair, amountA);
        safeTransferFrom(tokenB, msg.sender, pair, amountB);
        liquidity = INomiswapEPCSPair(pair).mint(to);
    }

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
        address pair = getPair(tokenA, tokenB);
        INomiswapEPCSPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair
        (uint baseAmount, uint quoteAmount) = INomiswapEPCSPair(pair).burn(to);
        (amountA, amountB) = tokenA == INomiswapEPCSPair(pair).baseToken()
                ? (baseAmount, quoteAmount)
                : (quoteAmount, baseAmount);
        require(amountA >= amountAMin, 'NomiswapEPCSRouter: INSUFFICIENT_A_AMOUNT');
        require(amountB >= amountBMin, 'NomiswapEPCSRouter: INSUFFICIENT_B_AMOUNT');
    }

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB) {
        address pair = getPair(tokenA, tokenB);
        uint value = approveMax ? type(uint256).max : liquidity;
        INomiswapEPCSPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) private {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::transferFrom: transferFrom failed'
        );
    }

    function getPair(address token1, address token2) private returns (address) {
        uint160 cacheKey = uint160(token1) ^ uint160(token2);
        address pair = pairCache[cacheKey];
        if (pair != address(0)) {
            return pair;
        }
        pair =  INomiswapEPCSFactory(factory).getPair(token1, token2);
        pairCache[cacheKey] = pair;
        return pair;
    }

    function cleanCache(address token1, address token2) external {
        require(msg.sender == INomiswapEPCSFactory(factory).feeTo(), "");
        uint160 cacheKey = uint160(token1) ^ uint160(token2);
        pairCache[cacheKey] = address(0);
    }
}


// File: /contracts/interfaces/IWhitelist.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {IAccessControl} from "@openzeppelin/contracts/access/IAccessControl.sol";

interface IWhitelist is IAccessControl {
    function setWhitelistEnabled(bool _whitelistEnabled) external;
}

// File: /contracts/interfaces/INomiswapERC20.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";

interface INomiswapERC20 is IERC20Metadata {
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
}


// File: /contracts/interfaces/INomiswapEPCSRouter.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.15;

import "./INomiswapERC20.sol";
import "./IWhitelist.sol";

interface INomiswapEPCSRouter {

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

}


// File: /contracts/interfaces/INomiswapEPCSPair.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.15;

import "./INomiswapERC20.sol";
import "./IWhitelist.sol";

interface INomiswapEPCSPair is INomiswapERC20, IWhitelist {

    event Mint(address indexed sender, uint baseAmount, uint quoteAmount, address indexed to);
    event Burn(address indexed sender, uint baseAmount, uint quoteAmount, address indexed to);

    function setSwapFee(uint32) external;
    function setDevFee(uint128) external;

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    
    function factory() external view returns (address);
    function baseToken() external view returns (address);
    function quoteToken() external view returns (address);
    function getSwapInfo() external view returns (uint baseReserve, uint quoteReserve, uint fee, uint price);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint baseAmount, uint quoteAmount);
    function mintDevFee() external returns (uint liquidity);
    function swap(address tokenIn, address to) external returns (uint amountOut);
    function sync() external;
    function skim(address to) external;

}


// File: /contracts/interfaces/INomiswapEPCSFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.15;

interface INomiswapEPCSFactory {
    event PairCreated(address indexed base, address indexed quote, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(
            address base,
            address quote,
            address baseOracle,
            address quoteOracle) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
    function setSwapFee(address pair, uint32 fee) external;
    function setDevFee(address pair, uint128 devFee) external;

    function setWhitelistEnabled(address pair, bool enable) external;
    function grantRole(address pair, bytes32 role, address account) external;
    function revokeRole(address pair, bytes32 role, address account) external;

    function setActivePair(uint) external;
    function setPriceSetter(address pair, address priceSetter) external;

}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}

