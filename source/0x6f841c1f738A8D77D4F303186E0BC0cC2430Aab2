{"BNBNFT.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ncontract BNBNFT is Ownable {\n\n    address public mintToken = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\n\n    uint256[4] public rarities = [\n        500 * 10**18, 1000 * 10**18, 2000 * 10**18, 5000 * 10**18\n    ];\n\n    address public mintRecipient;\n\n    bool public tradingEnabled;\n\n    event MintedOnBSC(address indexed user, uint256 num, uint8 rarity);\n\n    constructor(address mintRecipient_) {\n        mintRecipient = mintRecipient_;\n    }\n\n    function setMintRecipient(address newRecipient) external onlyOwner {\n        mintRecipient = newRecipient;\n    }\n\n    function setMintToken(address newToken) external onlyOwner {\n        mintToken = newToken;\n    }\n\n    function setTradingEnabled(bool enabled) external onlyOwner {\n        tradingEnabled = enabled;\n    }\n\n    function mint(uint256 num, uint8 rarity) external {\n        require(\n            num \u003e 0, \n            \u0027Invalid Number\u0027\n        );\n        require(\n            uint(rarity) \u003c rarities.length,\n            \u0027Invalid Length\u0027\n        );\n        require(\n            tradingEnabled,\n            \u0027Trading Not Enabled\u0027\n        );\n\n        // determine cost\n        uint256 cost = num * rarities[rarity];\n\n        // ensure user has balance and approval of this amount\n        require(\n            IERC20(mintToken).balanceOf(msg.sender) \u003e= cost,\n            \u0027Insufficient USDC Balance\u0027\n        );\n        require(\n            IERC20(mintToken).allowance(msg.sender, address(this)) \u003e= cost,\n            \u0027Insufficient Allowance\u0027\n        );\n        require(\n            IERC20(mintToken).transferFrom(msg.sender, mintRecipient, cost),\n            \u0027Error Transfer From\u0027\n        );\n\n        // emit event to pull later\n        emit MintedOnBSC(msg.sender, num, rarity);\n    }\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.14;\n\n/**\n * @title Owner\n * @dev Set \u0026 change owner\n */\ncontract Ownable {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier onlyOwner() {\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"}}