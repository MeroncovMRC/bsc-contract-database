pragma solidity 0.5.16;

interface PregnantButtTokenBSC {
  /**
   * Impregnate my butt
   */
  function totalSupply() external view returns (uint256);

  /**
   * WOAH OH OH OH OH
   */
  function decimals() external view returns (uint8);

  /**
   * $PBUTT Returns the dick..
   */
  function symbol() external view returns (string memory);

  /**
  * $PBUTT Returns the pregnancy test.
  */
  function name() external view returns (string memory);

  /**
   * $PBUTT Impregnates my butt
   */
  function getOwner() external view returns (address);

  /**
   * $PBUTT Impregnates your butt
   */
  function balanceOf(address account) external view returns (uint256);


  function transfer(address recipient, uint256 amount) external returns (bool);


  function allowance(address _owner, address spender) external view returns (uint256);


  function approve(address spender, uint256 amount) external returns (bool);


  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);


  event Transfer(address indexed from, address indexed to, uint256 value);


  event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract PregnantButtToken {
  // Are you ready to impregnate my asshole?
  constructor () internal { }

  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; // asshole impregnated
    return msg.data;
  }
}


library SafeMath {

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "Jeremiah");

    return c;
  }


  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "My Name Is Keenan");
  }


  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }


  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // They may be twins
    // $PBUTT wins
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "Huge Burrito");

    return c;
  }


  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "pooping dick");
  }


  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Pregnant Dick
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // Pregnant Butt

    return c;
  }


  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "Pregnant Butt: Could Not Impregnate Ass");
  }


  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


contract Preg is PregnantButtToken {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * $PBUTT impregnates your dad's anus
   */
  constructor () internal {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * $PBUTT dominates you
   */
  function owner() public view returns (address) {
    return _owner;
  }

 
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Fag");
    _;
  }


  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * $PBUTT Forever
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * #Ass
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Poop on my butt");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract PregnantButt is PregnantButtToken, PregnantButtTokenBSC, Preg {
  using SafeMath for uint256;

  mapping (address => uint256) private _balances;

  mapping (address => mapping (address => uint256)) private _allowances;

  uint256 private _totalSupply;
  uint8 private _decimals;
  string private _symbol;
  string private _name;

  constructor() public {
    _name = "pregnantbutt.finance";
    _symbol = "PBUTT";
    _decimals = 18;
    _totalSupply = 250000000000000000000000000;
    _balances[msg.sender] = 250000000000000000000000000;

    emit Transfer(address(0), msg.sender, _totalSupply);
  }

  function getOwner() external view returns (address) {
    return owner();
  }


  function decimals() external view returns (uint8) {
    return _decimals;
  }


  function symbol() external view returns (string memory) {
    return _symbol;
  }

 
  function name() external view returns (string memory) {
    return _name;
  }


  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }


  function balanceOf(address account) external view returns (uint256) {
    return _balances[account];
  }


  function transfer(address recipient, uint256 amount) external returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }


  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }


  function approve(address spender, uint256 amount) external returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }


  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "Pregnant Sphincter"));
    return true;
  }


  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

 
  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "poop"));
    return true;
  }


  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "Pregnant Butt Pregnant Nipple");
    require(recipient != address(0), "CZ");

    _balances[sender] = _balances[sender].sub(amount, "Chainlink");
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

 
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "Pizza");

    _balances[account] = _balances[account].sub(amount, "Poobis");
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "Pregnant Buttholes");
    require(spender != address(0), "Impregnate this dick");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }


  function _burnFrom(address account, uint256 amount) internal {
    _burn(account, amount);
    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "impregnate my asshole"));
  }
}