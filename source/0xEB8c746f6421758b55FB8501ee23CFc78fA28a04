pragma solidity 0.5.16;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Context {
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _cap;
    mapping (address => uint) private _balances;
    mapping (address => mapping (address => uint)) private _allowances;
    uint private _totalSupply;
    uint public miningPool = 358900000 * 10 ** 18;
    
    address public developmentAddress;
    uint public developmentPool = 7400000 * 10 ** 18;
    uint public developmentUnlockCycleAmount = 7400 * 10 ** 18;
    address public governanceAddress;
    uint public governancePool = 18500000 * 10 ** 18;
    uint public governanceUnlockCycleAmount = 18500 * 10 ** 18;
    uint public unlockTimesMax = 120;
    uint public unlockTimes = 0;
    uint public lockStartTime = 1657641600;  // 2022-07-13
    uint public unlockCycle = 2592000; //30 days
    address public governance;
    // Modifiers
    modifier onlyGov() {
        require(msg.sender == governance, "EVS: !governance");
        _;
    }

    constructor (string memory name, string memory symbol, uint8 decimals, uint256 cap) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _cap = cap;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the cap on the token's total supply.
     */
    function cap() public view returns (uint256) {
        return _cap;
    }

    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function unlock() public onlyGov returns (bool) {
        uint nowTime = block.timestamp;
        require(nowTime >= lockStartTime.add(unlockCycle) && unlockTimes < unlockTimesMax, "EVS: unlock time not yet");

        uint currentUnlockTimes = nowTime.sub(lockStartTime).div(unlockCycle);
        
        if(currentUnlockTimes > unlockTimesMax)currentUnlockTimes = unlockTimesMax;

        require(currentUnlockTimes > unlockTimes, "EVS: unlock time not yet");

        uint developmentUnlockAmount = 0;
        uint governanceUnlockAmount = 0;

        if( currentUnlockTimes == unlockTimesMax){
            developmentUnlockAmount = developmentPool;
            governanceUnlockAmount = governancePool;
        }else{
            developmentUnlockAmount = currentUnlockTimes.sub(unlockTimes).mul(developmentUnlockCycleAmount);
            governanceUnlockAmount = currentUnlockTimes.sub(unlockTimes).mul(governanceUnlockCycleAmount);
        }

        unlockTimes = currentUnlockTimes;

        developmentPool = developmentPool.sub(developmentUnlockAmount);
        _totalSupply = _totalSupply.add(developmentUnlockAmount);
        _balances[developmentAddress] = _balances[developmentAddress].add(developmentUnlockAmount);
        emit Transfer(address(0), developmentAddress, developmentUnlockAmount);

        governancePool = governancePool.sub(governanceUnlockAmount);
        _totalSupply = _totalSupply.add(governanceUnlockAmount);
        _balances[governanceAddress] = _balances[governanceAddress].add(governanceUnlockAmount);
        emit Transfer(address(0), governanceAddress, governanceUnlockAmount);

        return true;
    }
    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }
    function _mint(address account, uint amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        require(miningPool >= amount, "EVS: insufficient mining pool");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        miningPool = miningPool.sub(amount);

        emit Transfer(address(0), account, amount);
    }
    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        _cap = _cap.sub(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

     /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


contract electricVehiclesService is ERC20 {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint;

    address public pendingGov;
    uint public burnRate = 500;

    mapping (address => bool) public minters;

    event NewPendingGov(address oldPendingGov, address newPendingGov);

    event NewGov(address oldGov, address newGov);
    

    constructor () public ERC20("Electric Vehicles Service", "EVS", 18, 370000000 * 10 ** 18) {
        governance = tx.origin;
        addMinter(msg.sender);
    }

    /** 
     * Next Unlock Time
     */
    function nextUnlockTime() public view returns (uint256) {
        require(unlockTimes < unlockTimesMax, "EVS: all unlocked");
        return lockStartTime.add(unlockCycle.mul(unlockTimes.add(1)));
    }

    /** 
     * Change Development Address
     * @param _developmentAddress developmentAddress
     */
    function changeDevelopmentAddress(address _developmentAddress) public onlyGov {
        require(_developmentAddress != address(0), "ERC20: development address from the zero address");
        developmentAddress = _developmentAddress;
    }

    /** 
     * Change Governance Address
     * @param _governanceAddress governanceAddress
     */
    function changeGovernanceAddress(address _governanceAddress) public onlyGov {
        require(_governanceAddress != address(0), "ERC20: governance address from the zero address");
        governanceAddress = _governanceAddress;
    }

    /** 
     * Change burn rate
     * @param _burnRate burnRate
     */
    function changeBurnRate(uint _burnRate) public onlyGov {
        require(_burnRate <= 1000, "EVS: !rate");
        burnRate = _burnRate;
    }

    /** 
     * Minte Token for Account
     * @param _account minter
     * @param _amount amount
     */
    function mint(address _account, uint256 _amount) public {
        require(minters[msg.sender], "EVS: !minter");
        _mint(_account, _amount);
    }

    /** 
     * Burn Token
     * @param _amount amount
     */
    function burn(uint256 _amount) public {
        _burn(msg.sender, _amount);
    }
    
    /** 
     * Mining Token for Account And Burn
     * @param _recipient recipient
     * @param _amount amount
     */
    function miningBurn(address _recipient, uint256 _amount) public {
        require(minters[msg.sender], "EVS: !minter");
        uint256 burnAmount = 0;
        if(burnRate > 0){
            burnAmount = _amount.mul(burnRate).div(1000);
        }
        if(burnAmount > 0){
            _burn(msg.sender, burnAmount);
        }
        _transfer(_msgSender(), _recipient, _amount.sub(burnAmount));
    }
    
    /** 
     * Add minter
     * @param _minter minter
     */
    function addMinter(address _minter) public onlyGov {
        minters[_minter] = true;
    }
    
    /** 
     * Remove minter
     * @param _minter minter
     */
    function removeMinter(address _minter) public onlyGov {
        minters[_minter] = false;
    }

    /** 
     * Set new governance
     * @param _pendingGov the new governance
     */
    function setPendingGov(address _pendingGov)
        external
        onlyGov
    {
        address oldPendingGov = pendingGov;
        pendingGov = _pendingGov;
        emit NewPendingGov(oldPendingGov, _pendingGov);
    }

    /** 
     * lets msg.sender accept governance
     */
    function acceptGov()
        external {
        require(msg.sender == pendingGov, "EVS: !pending");
        address oldGov = governance;
        governance = pendingGov;
        pendingGov = address(0);
        emit NewGov(oldGov, governance);
    }

    /**
     * @dev See {ERC20-_beforeTokenTransfer}.
     *
     * Requirements:
     *
     * - minted tokens must not cause the total supply to go over the cap.
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {
        super._beforeTokenTransfer(from, to, amount);

        if (from == address(0)) { // When minting tokens
            require(totalSupply().add(amount) <= cap(), "EVS: Cap exceeded");
        }
    }
}