// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract SavingsAccount {
    uint256 constant private DECIMALS = 10**18;
    address payable public owner;
    uint256 public balance;

    constructor() {
        owner = payable(msg.sender);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }

    function deposit() public payable {
        balance += msg.value;
    }

    function withdrawAll() public onlyOwner {
        uint256 amount = balance;
        balance = 0;
        call(owner, amount);
    }

    function withdraw(uint256 _amount) public onlyOwner {
        require(_amount <= balance, "Insufficient balance.");
        balance -= _amount;
        call(owner, _amount);
    }

    function invest() public payable {
        require(msg.value > 0, "Invalid amount to invest.");
        uint256 amount = msg.value;
        balance += amount;
    }

    function getBalance() public view returns (uint256) {
        return balance;
    }

    function getInterest() public view returns (uint256) {
        return balance / DECIMALS * 10;
    }

    function claimInterest() public onlyOwner {
        uint256 interest = getInterest();
        require(interest > 0, "No interest to claim.");
        balance += interest;
    }

    function call(address payable _to, uint256 _amount) private {
        (bool success, ) = _to.call{value: _amount}("");
        require(success, "Transfer failed.");
    }
}