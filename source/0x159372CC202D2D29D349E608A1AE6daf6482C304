
// File: /contracts/StabledocStaking.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import "./libs/math/BoringMath.sol";
import './libs/access/Ownable.sol';
import './libs/token/BEP20/IBEP20.sol';
import './libs/token/BEP20/SafeBEP20.sol';
import "./libs/utils/ReentrancyGuard.sol";
import "./libs/math/SignedSafeMath.sol";
import "./libs/interfaces/IRewarder.sol";

contract StabledocStaking is Ownable, ReentrancyGuard {
    using BoringMath for uint256;
    using BoringMath128 for uint128;
    using SafeBEP20 for IBEP20;
    using SignedSafeMath for int256;

    /// @notice Info of each user's stake
    /// `depositAmount` LP tokens amount deposited in the stake
    /// `depositTime` The time when token is deposited
    /// `withdrawn` State of the stake - True if withdrawn, false if otherwise
    struct StakeInfo {
        uint256 depositAmount;
        uint256 depositTime;
        bool withdrawn;
    }

    /// @notice Info of each StabledocStaking user.
    /// `amount` LP token amount the user has deposited.
    /// `rewardDebt` The amount of reward debt - See below:
    /// `stakes` A collection of user's stakes
    /// At any point in time, the amount of SDT entitled to a user but is pending to be distributed is:
    /// pending reward = (user.amount * pool.accSdtPerShare) - user.rewardDebt
    struct UserInfo {
        uint256 amount;
        int256 rewardDebt;
        StakeInfo[] stakes;
    }

    /// @notice Info of each StabledocStaking pool.
    /// `totalLp` The amount of token deposited in the pool.
    /// `allocPoint` The amount of allocation points assigned to the pool.
    struct PoolInfo {
        uint256 totalLp;
        uint128 accSdtPerShare;
        uint64 lastRewardBlock;
        uint64 allocPoint;
    }

    /// @notice Address of SDT contract.
    IBEP20 public immutable SDT;

    /// @notice Info of each StabledocStaking pool.
    PoolInfo[] public poolInfo;

    /// @notice Address of the LP token for each StabledocStaking pool.
    IBEP20[] public lpToken;

    /// @notice Address of each `IRewarder` contract in StabledocStaking.
    IRewarder[] public rewarder;

    /// @notice Info of each user that deposited LP tokens.
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;

    /// @notice Mappings of blacklisted wallets
    mapping(address => bool) public isBlackListed;

    /// @dev Time when users can start staking and farming.
    uint256 public startTime;

    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint;

    /// @notice Total amount of SDT deposited in pools
    uint256 public totalSdtInPools;

    uint256 private constant SDT_PER_BLOCK = 15e16;
    uint256 private constant ACC_SDT_PRECISION = 1e12;
    uint256 private constant LOCK_DURATION = 30 days;

    /// @notice Determines if users can perform emergency withdrawal
    bool public emergencyWithdrawable;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);
    event SetEmergencyWithdrawable(bool indexed oldStatus, bool indexed newStatus);
    event SetBlackListed(address indexed user, bool indexed status);
    event WithdrawSdtReward(uint256 indexed amount);
    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, IRewarder indexed rewarder);
    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);
    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSdtPerShare);
    
    /// @param _sdt The SDT contract address.
    /// @param _startTime The StabledocStaking start time.
    constructor(IBEP20 _sdt, uint256 _startTime) public {
        SDT = _sdt;
        startTime = _startTime;
    }

    /// @notice Returns the remaining SDT rewards in StabledocStaking
    function remainingRewards() external view returns (uint256 sdtRewardsLeft) {
        sdtRewardsLeft = SDT.balanceOf(address(this)).sub(totalSdtInPools);
    }

    /// @notice Returns the number of StabledocStaking pools.
    function poolLength() public view returns (uint256 pools) {
        pools = poolInfo.length;
    }

    /// @notice Pool existence: used to avoid adding duplicate LP token pool
    mapping(IBEP20 => bool) public poolExistence;
    modifier nonDuplicated(IBEP20 _lpToken) {
        require(!poolExistence[_lpToken], "nonDuplicated: duplicated");
        _;
    }

    /// @notice Validate pool by pid: used to ensure that only existing pools are accessed
    modifier validatePoolByPid(uint256 _pid) {
        require(poolInfo.length > _pid, "validatePoolByPid: pool does not exist");
        _;
    }

    /// @notice View function to see the time left to unlock withdrawal for a stake
    /// @param _pid The index of the pool. See `poolInfo`.
    /// @param _stakeId The index of the user's stake.
    /// @param _user Address of user.
    /// @return timeLeft - time left to unlock withdrawal
    function remainingLockTime(uint256 _pid, uint256 _stakeId, address _user) external view returns (uint256 timeLeft) {
        UserInfo storage user = userInfo[_pid][_user];
        if(user.stakes.length > _stakeId){
            uint256 unlockTime = user.stakes[_stakeId].depositTime.add(LOCK_DURATION);
            if(block.timestamp < unlockTime){
                timeLeft = unlockTime.sub(block.timestamp);
            }else{
                timeLeft = 0;
            }
        } else {
            timeLeft = 0;
        }
    }

    /// @notice View function to see all user's stakes
    /// @param _pid The index of the pool. See `poolInfo`.
    /// @param _user Address of user.
    /// @return stakes - array of user's stakes
    function userStakes(uint256 _pid, address _user) external view returns (StakeInfo[] memory stakes) {
        UserInfo memory user = userInfo[_pid][_user];
        stakes = user.stakes;
    }

    /// @notice Enables or disables emergency withdrawal
    /// @param _newStatus True if emergency withdrawal should be enabled. Otherwise emergency withdrawal is disabled
    function setEmergencyWithdrawable(bool _newStatus) external onlyOwner {
        emit SetEmergencyWithdrawable(emergencyWithdrawable, _newStatus);
        emergencyWithdrawable = _newStatus;
    }

    /// @notice Add a new LP to the pool. Can only be called by the owner.
    /// @param _allocPoint AP of the new pool.
    /// @param _lpToken Address of the LP BEP20 token.
    /// @param _rewarder Address of the rewarder delegate.
    function add(uint256 _allocPoint, IBEP20 _lpToken, IRewarder _rewarder) external onlyOwner nonDuplicated(_lpToken){
        uint256 lastRewardBlock = block.number;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        lpToken.push(_lpToken);
        rewarder.push(_rewarder);
        poolExistence[_lpToken] = true;

        poolInfo.push(PoolInfo({
            allocPoint: _allocPoint.to64(),
            lastRewardBlock: lastRewardBlock.to64(),
            accSdtPerShare: 0,
            totalLp: 0
        }));

        emit LogPoolAddition(lpToken.length.sub(1), _allocPoint, _lpToken, _rewarder);
    }

    /// @notice Update the given pool's SDT allocation point and `IRewarder` contract. Can only be called by the owner.
    /// @param _pid The index of the pool.
    /// @param _allocPoint New AP of the pool.
    /// @param _rewarder Address of the rewarder delegate.
    /// @param _overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.
    function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool _overwrite) external validatePoolByPid(_pid) onlyOwner {
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint.to64();
        if (_overwrite) { rewarder[_pid] = _rewarder; }
        emit LogSetPool(_pid, _allocPoint, _overwrite ? _rewarder : rewarder[_pid], _overwrite);
    }

    /// @notice View function to see pending SDT on frontend.
    /// @param _pid The index of the pool. See `poolInfo`.
    /// @param _user Address of user.
    /// @return pending SDT reward for a given user.
    function pendingSdt(uint256 _pid, address _user) external view returns (uint256 pending) {
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accSdtPerShare = pool.accSdtPerShare;
        if (block.number > pool.lastRewardBlock && pool.totalLp != 0) {
            uint256 blocks = block.number.sub(pool.lastRewardBlock);
            uint256 sdtReward = blocks.mul(SDT_PER_BLOCK).mul(pool.allocPoint) / totalAllocPoint;
            accSdtPerShare = accSdtPerShare.add(sdtReward.mul(ACC_SDT_PRECISION) / pool.totalLp);
        }
        pending = int256(user.amount.mul(accSdtPerShare) / ACC_SDT_PRECISION).sub(user.rewardDebt).toUInt256();
    }

    /// @notice Update reward variables for all pools. Be careful of gas spending!
    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.
    function massUpdatePools(uint256[] calldata pids) external {
        uint256 len = pids.length;
        for (uint256 i = 0; i < len; ++i) {
            updatePool(pids[i]);
        }
    }

    /// @notice Update reward variables of the given pool.
    /// @param pid The index of the pool.
    /// @return pool Returns the pool that was updated.
    function updatePool(uint256 pid) public validatePoolByPid(pid) returns (PoolInfo memory pool) {
        pool = poolInfo[pid];
        if (block.number > pool.lastRewardBlock) {
            if (pool.totalLp > 0) {
                uint256 blocks = block.number.sub(pool.lastRewardBlock);
                uint256 sdtReward = blocks.mul(SDT_PER_BLOCK).mul(pool.allocPoint) / totalAllocPoint;
                pool.accSdtPerShare = pool.accSdtPerShare.add((sdtReward.mul(ACC_SDT_PRECISION) / pool.totalLp).to128());
            }
            pool.lastRewardBlock = block.number.to64();
            poolInfo[pid] = pool;
            emit LogUpdatePool(pid, pool.lastRewardBlock, pool.totalLp, pool.accSdtPerShare);
        }
    }

    /// @notice Deposit LP tokens to StabledocStaking for SDT allocation.
    /// @param pid The index of the pool.
    /// @param amount LP token amount to deposit.
    /// @param to The receiver of `amount` deposit benefit.
    function deposit(uint256 pid, uint256 amount, address to) external validatePoolByPid(pid) nonReentrant {
        require(block.timestamp >= startTime, "deposit: staking has not started");
        require(amount > 0, "deposit: amount is 0");
        require(to != address(0), "deposit: receiver is the zero address");

        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][to];

        user.amount = user.amount.add(amount);
        user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accSdtPerShare) / ACC_SDT_PRECISION));
        user.stakes.push(StakeInfo({
            depositAmount: amount,
            depositTime: block.timestamp,
            withdrawn: false
        }));

        IRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSdtReward(pid, to, to, 0, user.amount);
        }

        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);
        pool.totalLp = pool.totalLp.add(amount);
        poolInfo[pid] = pool;

        if(address(lpToken[pid]) == address(SDT)){
            totalSdtInPools = totalSdtInPools.add(amount);
        }

        emit Deposit(msg.sender, pid, amount, to);
    }

    /// @notice Withdraw single staked LP tokens from StabledocStaking.
    /// @param pid The index of the pool.
    /// @param stakeId The index of the user's stake.
    /// @param to Receiver of the LP tokens.
    function withdraw(uint256 pid, uint256 stakeId, address to) external validatePoolByPid(pid) nonReentrant {
        require(to != address(0), "withdraw: receiver is the zero address");

        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];

        // Withdraw conditions
        require(user.stakes.length > stakeId, "withdraw: invalid stake id");
        uint256 amount = user.stakes[stakeId].depositAmount;
        require(user.amount >= amount, "withdraw: total deposit amount is less than withdraw amount");
        require(block.timestamp > user.stakes[stakeId].depositTime.add(LOCK_DURATION), "withdraw: lock period is not over");
        require(!user.stakes[stakeId].withdrawn, "withdraw: stake is already withdrawn");

        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accSdtPerShare) / ACC_SDT_PRECISION));
        user.amount = user.amount.sub(amount);
        user.stakes[stakeId].withdrawn = true;

        IRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSdtReward(pid, msg.sender, to, 0, user.amount);
        }
        
        lpToken[pid].safeTransfer(to, amount);
        pool.totalLp = pool.totalLp.sub(amount);
        poolInfo[pid] = pool;

        if(address(lpToken[pid]) == address(SDT)){
            totalSdtInPools = totalSdtInPools.sub(amount);
        }

        emit Withdraw(msg.sender, pid, amount, to);
    }

    /// @notice Withdraw multiple staked LP tokens from StabledocStaking.
    /// @param pid The index of the pool.
    /// @param to Receiver of the LP tokens.
    function withdrawAll(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {
        require(to != address(0), "withdrawAll: receiver is the zero address");

        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];
        StakeInfo[] memory stakes = user.stakes;

        // Calculate amount to withdraw
        uint256 amount = 0;
        for(uint256 index = 0; index < stakes.length; index++){
            if(
                (block.timestamp > stakes[index].depositTime.add(LOCK_DURATION)) &&
                !stakes[index].withdrawn
            ){
                amount = amount.add(stakes[index].depositAmount);
                user.stakes[index].withdrawn = true;
            }
        }

        // Withdraw condition
        require(amount > 0, "withdrawAll: there is nothing to withdraw");
        require(user.amount >= amount, "withdrawAll: total deposit amount is less than withdraw amount");

        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accSdtPerShare) / ACC_SDT_PRECISION));
        user.amount = user.amount.sub(amount);

        IRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSdtReward(pid, msg.sender, to, 0, user.amount);
        }
        
        lpToken[pid].safeTransfer(to, amount);
        pool.totalLp = pool.totalLp.sub(amount);
        poolInfo[pid] = pool;

        if(address(lpToken[pid]) == address(SDT)){
            totalSdtInPools = totalSdtInPools.sub(amount);
        }

        emit Withdraw(msg.sender, pid, amount, to);
    }

    /// @notice Harvest proceeds for transaction sender to `to`.
    /// @param pid The index of the pool.
    /// @param to Receiver of SDT rewards.
    function harvest(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {
        require(to != address(0), "harvest: receiver is the zero address");
        require(!isBlackListed[to], "harvest: receiver is blacklisted");

        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];
        int256 accumulatedSdt = int256(user.amount.mul(pool.accSdtPerShare) / ACC_SDT_PRECISION);
        uint256 _pendingSdt = accumulatedSdt.sub(user.rewardDebt).toUInt256();

        user.rewardDebt = accumulatedSdt;

        if (_pendingSdt != 0) {
            _safeSdtRewardTransfer(to, _pendingSdt);
        }
        
        IRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSdtReward( pid, msg.sender, to, _pendingSdt, user.amount);
        }

        emit Harvest(msg.sender, pid, _pendingSdt);
    }

    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.
    /// @param pid The index of the pool.
    /// @param to Receiver of the LP tokens.
    function emergencyWithdraw(uint256 pid, address to) external validatePoolByPid(pid) nonReentrant {
        require(emergencyWithdrawable, "emergencyWithdraw: emergency withdraw is disabled");
        require(to != address(0), "emergencyWithdraw: receiver is the zero address");

        PoolInfo memory pool = poolInfo[pid];
        UserInfo storage user = userInfo[pid][msg.sender];
        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        
        // Set all stakes to withdrawn
        for(uint256 index = 0; index < user.stakes.length; index++){
            if(!user.stakes[index].withdrawn){
                user.stakes[index].withdrawn = true;
            }
        }

        IRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSdtReward(pid, msg.sender, to, 0, 0);
        }

        lpToken[pid].safeTransfer(to, amount);
        pool.totalLp = pool.totalLp.sub(amount);
        poolInfo[pid] = pool;

        if(address(lpToken[pid]) == address(SDT)){
            totalSdtInPools = totalSdtInPools.sub(amount);
        }

        emit EmergencyWithdraw(msg.sender, pid, amount, to);
    }

    /// @notice Safely transfer SDT reward - Makes sure that rewards are not taken from the actual SDT deposited in pool.
    /// @param to Receiver of the SDT rewards
    /// @param amount SDT reward amount to transfer
    function _safeSdtRewardTransfer(address to, uint256 amount) internal {
        if (SDT.balanceOf(address(this)) > totalSdtInPools) {
            uint256 _remainingRewards = SDT.balanceOf(address(this)).sub(totalSdtInPools);
            bool transferSuccess = false;
            if (amount > _remainingRewards) {            
                transferSuccess = SDT.transfer(to, _remainingRewards);
            } else {            
                transferSuccess = SDT.transfer(to, amount);
            }
            require(transferSuccess, "safeSdtRewardTransfer: transfer failed");
        }
    }

    /// @notice Blacklist or unblacklist an address.
    /// @param _user Address of user
    /// @param _status Status (true or false)
    function setBlackListed(address _user, bool _status) external onlyOwner {
        isBlackListed[_user] = _status;
        emit SetBlackListed(_user, _status);
    }

    /// @notice Withdraw SDT reward from StabledocStaking - Can only be called by the owner.
    /// @param amount SDT amount to withdraw
    function withdrawSdtReward(uint256 amount) external onlyOwner  {        
        require(SDT.balanceOf(address(this)) >= totalSdtInPools + amount, "withdrawSdtReward: withdraw failed");
        SDT.transfer(msg.sender, amount);
        emit WithdrawSdtReward(amount);
    }
}


// File: /contracts/libs/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() public {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: /contracts/libs/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, 'Address: insufficient balance');

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}('');
        require(success, 'Address: unable to send value, recipient may have reverted');
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, 'Address: low-level call failed');
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, 'Address: insufficient balance for call');
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), 'Address: call to non-contract');

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: /contracts/libs/token/BEP20/SafeBEP20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

import './IBEP20.sol';
import '../../math/SafeMath.sol';
import '../../utils/Address.sol';

/**
 * @title SafeBEP20
 * @dev Wrappers around BEP20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeBEP20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IBEP20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            'SafeBEP20: approve from non-zero to non-zero allowance'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(
            value,
            'SafeBEP20: decreased allowance below zero'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IBEP20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');
        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');
        }
    }
}


// File: /contracts/libs/token/BEP20/IBEP20.sol
// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.6.12;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: /contracts/libs/math/SignedSafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

library SignedSafeMath {
    int256 constant private _INT256_MIN = -2**255;

    /**
     * @dev Returns the multiplication of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");

        int256 c = a * b;
        require(c / a == b, "SignedSafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two signed integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        require(b != 0, "SignedSafeMath: division by zero");
        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");

        int256 c = a / b;

        return c;
    }

    /**
     * @dev Returns the subtraction of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");

        return c;
    }

    /**
     * @dev Returns the addition of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");

        return c;
    }

    function toUInt256(int256 a) internal pure returns (uint256) {
        require(a >= 0, "Integer < 0");
        return uint256(a);
    }
}

// File: /contracts/libs/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}


// File: /contracts/libs/math/BoringMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;

/// @notice A library for performing overflow-/underflow-safe math,
/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).
library BoringMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require((c = a + b) >= b, "BoringMath: Add Overflow");
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require((c = a - b) <= a, "BoringMath: Underflow");
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
    }

    function to128(uint256 a) internal pure returns (uint128 c) {
        require(a <= uint128(-1), "BoringMath: uint128 Overflow");
        c = uint128(a);
    }

    function to64(uint256 a) internal pure returns (uint64 c) {
        require(a <= uint64(-1), "BoringMath: uint64 Overflow");
        c = uint64(a);
    }

    function to32(uint256 a) internal pure returns (uint32 c) {
        require(a <= uint32(-1), "BoringMath: uint32 Overflow");
        c = uint32(a);
    }
}

/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.
library BoringMath128 {
    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
        require((c = a + b) >= b, "BoringMath: Add Overflow");
    }

    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
        require((c = a - b) <= a, "BoringMath: Underflow");
    }
}

/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.
library BoringMath64 {
    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
        require((c = a + b) >= b, "BoringMath: Add Overflow");
    }

    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
        require((c = a - b) <= a, "BoringMath: Underflow");
    }
}

/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.
library BoringMath32 {
    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
        require((c = a + b) >= b, "BoringMath: Add Overflow");
    }

    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
        require((c = a - b) <= a, "BoringMath: Underflow");
    }
}

// File: /contracts/libs/interfaces/IRewarder.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
import '../token/BEP20/SafeBEP20.sol';

interface IRewarder {
    using SafeBEP20 for IBEP20;
    function onSdtReward(uint256 pid, address user, address recipient, uint256 sdtAmount, uint256 newLpAmount) external;
    function pendingTokens(uint256 pid, address user, uint256 sdtAmount) external view returns (IBEP20[] memory, uint256[] memory);
}


// File: /contracts/libs/access/Ownable.sol
// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.6.12;

import '../GSN/Context.sol';

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: /contracts/libs/GSN/Context.sol
// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.6.12;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    
    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

