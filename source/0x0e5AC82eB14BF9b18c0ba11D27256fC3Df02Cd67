// SPDX-License-Identifier: MIT
pragma solidity >0.4.0 <= 0.9.0;

contract MyToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    address public owner;
    

    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
        totalSupply = 1000000000000000000000000;
        name = "MUX Token";
        symbol = "MUX";
        decimals = 18;
    }
    
    function mint(uint256 _value) public returns (bool success) {
    require(msg.sender == owner, "Only owner can mint");
    balanceOf[msg.sender] += _value;
    totalSupply += _value;
    emit Transfer(address(0), msg.sender, _value);
    return true;
    }

    function transfer(address _to, uint256 _value) private returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(_value <= balanceOf[msg.sender], "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) private returns (bool success) {
        require(_spender != address(0), "Invalid address");
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) private returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(_value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Insufficient allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}