
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/ISwapGetAmounts.sol
interface ISwapGetAmounts {
    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);
}


// File: contracts/ReferralMarketingClient.sol
// Referral Marketing contract

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./ReferralMarketingSDK.sol";

abstract contract NetworkSDK {
    address private _network;
    ReferralMarketingSDK public sdk;

    event NetworkTransferred(address indexed previousNetwork, address indexed newNetwork);
    event SDKChanged(address indexed previousSDK, address indexed newSDK);

    constructor(address __network, address __sdk) {
        _network = __network;
        sdk = ReferralMarketingSDK(__sdk);
    }

    function network() public view virtual returns (address) {
        return _network;
    }

    modifier onlyNetwork() {
        _checkNetwork();
        _;
    }

    function _checkNetwork() internal view virtual {
        require(network() == msg.sender, "caller is not Network");
    }

    function transferNetwork(address newAddress) public virtual onlyNetwork {
        require(newAddress != address(0), "new address is zero");
        address oldAddress = _network;
        _network = newAddress;
        emit NetworkTransferred(oldAddress, newAddress);
    }

    function setSDK(address newAddress) public virtual onlyNetwork {
        address oldAddress = address(sdk);
        sdk = ReferralMarketingSDK(newAddress);
        emit SDKChanged(oldAddress, newAddress);
    }
}

contract ReferralMarketingClient is Ownable, NetworkSDK {
    address public seller;
    mapping (bytes32 => address) public referrers;
    uint256 public receivedTotal; // total amount of tokens sold (in coins)
    IERC20 public tokenContract; // tokens to sell
    IERC20 public coinContract; // coins to buy with

    event TokensBought(
        uint256 sellPrice,
        uint256 pricePerToken,
        uint256 networkAmount,
        uint256 referrerAmount,
        address indexed referrerAddress,
        bytes32 indexed _referrerCode,
        uint256 sellerAmount
    );

    event SellerChanged(address indexed previousSeller, address indexed newSeller);
    event TokenContractChanged(address indexed previousTokenContract, address indexed newTokenContract);
    event CoinContractChanged(address indexed previousCoinContract, address indexed newCoinContract);

    constructor(
        address _seller, address _network,
        address _tokenContract, address _coinContract,
        address _sdk
    ) NetworkSDK(_network, _sdk) {
        seller = _seller;
        tokenContract = IERC20(_tokenContract);
        coinContract = IERC20(_coinContract);
        receivedTotal = 0;
    }

    function buyTokens(uint256 _numTokens, bytes32 _referrerCode) public {
        uint256 sellPrice; // tokens to sell
        uint256 pricePerToken;
        uint256 networkAmount;
        uint256 referrerAmount;
        address referrerAddress;
        uint256 sellerAmount;
        (sellPrice, pricePerToken, networkAmount, referrerAmount, referrerAddress, sellerAmount) = sdk.calcRefSplit(_numTokens, _referrerCode, receivedTotal);

        // transfer coins to contract
        require(coinContract.transferFrom(msg.sender, address(this), _numTokens * pricePerToken / 10**9), "Transfer failed");

        receivedTotal += sellPrice;

        // transfer tokens to buyer
        require(tokenContract.transfer(msg.sender, _numTokens), "Token transfer failed");

        // transfer tokens to network
        if (networkAmount > 0) {
            require(coinContract.transfer(network(), networkAmount), "Network transfer failed");
        }

        // transfer tokens to seller
        if (sellerAmount > 0) {
            require(coinContract.transfer(seller, sellerAmount), "Seller transfer failed");
        }

        // transfer tokens to referrer
        if (referrerAddress != address(0) && referrerAmount > 0) {
            require(coinContract.transfer(referrerAddress, referrerAmount), "Referrer transfer failed");
        }

        emit TokensBought(sellPrice, pricePerToken, networkAmount, referrerAmount, referrerAddress, _referrerCode, sellerAmount);
    }

    function withdrawCoins() public onlyOwner {
        require(coinContract.transfer(msg.sender, coinContract.balanceOf(address(this))), "Withdrawal failed");
    }

    function withdrawTokens() public onlyOwner {
        require(tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))), "Withdrawal failed");
    }

    function setSeller(address newAddress) public onlyOwner {
        address oldAddress = address(seller);
        seller = newAddress;
        emit SellerChanged(oldAddress, newAddress);
    }

    function setTokenContract(address newAddress) public onlyNetwork {
        address oldAddress = address(tokenContract);
        tokenContract = IERC20(newAddress);
        emit TokenContractChanged(oldAddress, newAddress);
    }

    function setCoinContract(address newAddress) public onlyNetwork {
        address oldAddress = address(coinContract);
        coinContract = IERC20(newAddress);
        emit CoinContractChanged(oldAddress, newAddress);
    }

    function withdrawTokensCustom(address tokenAddress, uint256 amount) public onlyOwner {
        IERC20 token = IERC20(tokenAddress);
        require(token.balanceOf(address(this)) >= amount, "Insufficient balance");
        token.transfer(msg.sender, amount);
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient balance");
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }
}


// File: contracts/ReferralMarketingSDK.sol
// Referral Marketing contract

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./ISwapGetAmounts.sol";

contract ReferralMarketingSDK is Ownable {
    address private clientAdmin;
    mapping (bytes32 => address) public referrers;
    uint256 public networkFee; // platform fee in 1/1000 of % of coins
    uint256 public networkFeeDiscounted; // platform fee in 1/1000 of % of coins after discount cap
    uint256 public discountThreshold; // threshold in coins after which networkFeeDiscounted is applied
    uint256 public referrerFee; // referrer fee in 1/1000 of % of coins
    uint256 public _pricePerToken; // price of each token in coins (multiplied by 10^18)
    ISwapGetAmounts swapContract;
    IERC20 tokenContract;
    IERC20 coinContract;
    IERC20 swapTokenContract;

    event ClientTransferred(address indexed previousClientAdmin, address indexed newClientAdmin);
    event ReferrerFeeSet(uint256 newFee);
    event NetworkFeeSet(uint256 newFee);
    event ReferrerSet(address indexed newRecipient, bytes32 indexed referrerCode);

    constructor(
        uint256 _referrerFee,
        uint256 _networkFee,
        uint256 _networkFeeDiscounted,
        uint256 _discountThreshold,
        uint256 __pricePerToken,
        address _swapContract,
        address _tokenContract,
        address _coinContract,
        address _swapTokenContract
    ) {
        referrerFee = _referrerFee;
        networkFee = _networkFee;
        networkFeeDiscounted = _networkFeeDiscounted;
        discountThreshold = _discountThreshold;
        _pricePerToken = __pricePerToken;
        clientAdmin = address(0);
        swapContract = ISwapGetAmounts(_swapContract);
        tokenContract = IERC20(_tokenContract);
        coinContract = IERC20(_coinContract);
        swapTokenContract = IERC20(_swapTokenContract);
    }

    function calcRefSplit(
        uint256 _numTokens,
        bytes32 _referrerCode,
        uint256 _receivedTotal
    ) public view returns (
        uint256 sellPrice,
        uint256 __pricePerToken,
        uint256 networkAmount,
        uint256 referrerAmount,
        address referrerAddress,
        uint256 sellerAmount
    ) {
        if (_referrerCode != bytes32(0)) {
            referrerAddress = referrers[_referrerCode];
//            require(referrerAddress != address(0), "Referrer not found");
        } else {
            referrerAddress = address(0);
        }

        __pricePerToken = pricePerToken();
        sellPrice = _numTokens * __pricePerToken / 10**9;

        if (_referrerCode != bytes32(0)) {
            // calculate network amount
            if (discountThreshold > _receivedTotal) {
                networkAmount = sellPrice * networkFee / 100_000;
            } else {
                networkAmount = sellPrice * networkFeeDiscounted / 100_000;
            }

            // calculate referral amount
            referrerAmount = sellPrice * referrerFee / 100_000;

            sellerAmount = sellPrice - networkAmount - referrerAmount;
        } else {
            networkAmount = 0;
            referrerAmount = 0;
            sellerAmount = sellPrice;
        }
    }

    function setReferrerFee(uint256 _newFee) public onlyAdmins {
        require(_newFee <= 100_000 - networkFee, "Fee must be between 0 and 100'000");
        referrerFee = _newFee;
        emit ReferrerFeeSet(referrerFee);
    }

    function setNetworkFee(uint256 _newFee) public onlyOwner {
        require(_newFee <= 100_000, "Fee must be between 0 and 100'000");
        networkFee = _newFee;
        emit NetworkFeeSet(networkFee);
    }

    function setReferrer(bytes32 _referrerCode, address _newRecipient) public onlyAdmins {
        referrers[_referrerCode] = _newRecipient;
        emit ReferrerSet(_newRecipient, _referrerCode);
    }

    function getReferrer(bytes32 referrerCode) public view returns (address) {
        return referrers[referrerCode];
    }

    function setTokenPrice(uint256 _newPrice) public onlyAdmins {
        _pricePerToken = _newPrice;
    }

    function pricePerToken() public view returns (uint256) {
        if (_pricePerToken != 0) return _pricePerToken;
        address[] memory addressChain = new address[](3);
        addressChain[0] = address(coinContract);
        addressChain[1] = address(swapTokenContract);
        addressChain[2] = address(tokenContract);
        uint[] memory amounts = swapContract.getAmountsIn(1_000_000_000, addressChain);
        return amounts[2];
    }

    function transferClientAdmin(address newAddress) public virtual onlyAdmins {
        require(newAddress != address(0), "new address is zero");
        address oldAddress = clientAdmin;
        clientAdmin = newAddress;
        emit ClientTransferred(oldAddress, newAddress);
    }

    modifier onlyAdmins() {
        require(msg.sender == owner() || msg.sender == clientAdmin, "caller is not admin");
        _;
    }

    function withdrawTokensCustom(address tokenAddress, uint256 amount) public onlyOwner {
        IERC20 token = IERC20(tokenAddress);
        require(token.balanceOf(address(this)) >= amount, "Insufficient balance");
        token.transfer(msg.sender, amount);
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient balance");
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
    }

    event SwapContractChanged(address indexed previousContract, address indexed newContract);
    function setSwapContract(address newAddress) public onlyOwner {
        address oldAddress = address(swapContract);
        swapContract = ISwapGetAmounts(newAddress);
        emit SwapContractChanged(oldAddress, newAddress);
    }

    event SwapTokenContractChanged(address indexed previousContract, address indexed newContract);
    function setTokenSwapContract(address newAddress) public onlyOwner {
        address oldAddress = address(swapTokenContract);
        swapTokenContract = IERC20(newAddress);
        emit SwapTokenContractChanged(oldAddress, newAddress);
    }

    event TokenContractChanged(address indexed previousContract, address indexed newContract);
    function setTokenContract(address newAddress) public onlyOwner {
        address oldAddress = address(tokenContract);
        tokenContract = IERC20(newAddress);
        emit TokenContractChanged(oldAddress, newAddress);
    }

    event CoinContractChanged(address indexed previousContract, address indexed newContract);
    function setCoinContract(address newAddress) public onlyOwner {
        address oldAddress = address(coinContract);
        coinContract = IERC20(newAddress);
        emit CoinContractChanged(oldAddress, newAddress);
    }
}

