// SPDX-License-Identifier: MIT License
pragma solidity 0.8.9;

interface IERC20 {    
	function totalSupply() external view returns (uint256);
	function decimals() external view returns (uint8);
	function symbol() external view returns (string memory);
	function name() external view returns (string memory);
	function getOwner() external view returns (address);
	function balanceOf(address account) external view returns (uint256);
	function transfer(address recipient, uint256 amount) external returns (bool);
	function allowance(address _owner, address spender) external view returns (uint256);
	function approve(address spender, uint256 amount) external returns (bool);
	function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
	event Transfer(address indexed from, address indexed to, uint256 value);
	event Approval(address indexed owner, address indexed spender, uint256 value);
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }
    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
    * @dev Initializes the contract setting the deployer as the initial owner.
    */
    constructor () {
      address msgSender = _msgSender();
      _owner = msgSender;
      emit OwnershipTransferred(address(0), msgSender);
    }

    /**
    * @dev Returns the address of the current owner.
    */
    function owner() public view returns (address) {
      return _owner;
    }
    
    modifier onlyOwner() {
      require(_owner == _msgSender(), "Ownable: caller is not the owner");
      _;
    }
    
     /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
      _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
      require(newOwner != address(0), "Ownable: new owner is the zero address");
      emit OwnershipTransferred(_owner, newOwner);
      _owner = newOwner;
    }
}


abstract contract ReentrancyGuard {
    bool internal locked;

    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

contract FISH_Stocking is Context, Ownable, ReentrancyGuard  {
    using SafeMath for uint256;
	using SafeERC20 for IERC20;    
    event _Stock(address indexed addr, uint256 amount, uint40 tm);
    event _Harvest(address indexed addr, uint256 amount);
    
    IERC20 public FISH;
    address public tokenAddress = 0xf15577E389ae1fCC05bf45a2b4CE94b94Bc25a9E;
    address payable public dev;
    address payable public mkg;    
    uint256[5] public ref_bonuses   = [100, 20, 20, 20, 20];     
    uint256[2] public rates         = [10, 5];
    uint256[2] public minimums      = [100 ether, 100 ether]; 
    uint256 private stocked;
    uint256 private harvested;
    uint256 private rewards;
    uint256 private fishbacks;
    
    struct FishingPal {
        uint8 level;    
        address wallet;
    }

    struct Tarif {
        uint256 life_days;
        uint256 percent;
    }

    struct Stock {
        uint40 time;  
        uint256 tarif;
        uint256 amount;        
    }

   	struct Fisherman {		
		address fishingpal;
        uint256 harvests;
        uint256 total_stocked;
        uint256 total_harvested;
        uint256 total_rewards;
        uint256 total_fishbacks;
        uint40 lastHarvest;
        FishingPal[] fishpals1;
   		FishingPal[] fishpals2;
   		FishingPal[] fishpals3;
        FishingPal[] fishpals4;
        FishingPal[] fishpals5;
   		uint256[5] structure;	
        Stock[] stockings;
    }

    mapping(address => Fisherman) public fishermen;
    mapping(uint256 => Tarif) public tarifs;
    mapping(uint256 => address) public fishermenNo;
    uint public nextFishermenNo;
    
    constructor() {        
        FISH = IERC20(tokenAddress);        
        tarifs[0] = Tarif(45, 135);    
        tarifs[1] = Tarif(100, 150);        
        mkg = payable(0x39Ec6690280934975AD8da227c9A36966c779891);     
        dev = payable(0x49505045b437503b77A608179Bf40D1b239eF9b1);            
    }
    
    function StockFISH(address sp,  uint256 amount) external { 
        require(amount >= minimums[0], "Your FISH token is less than minimum stocking!");
        
        FISH.safeTransferFrom(msg.sender, address(this), amount);
        setUpline(msg.sender, sp);		
        
        Fisherman storage fisherman = fishermen[msg.sender];
        fisherman.stockings.push(Stock({
            tarif: 0, 
            amount: amount,
            time: uint40(block.timestamp)
        })); 

        fisherman.total_stocked += amount;
        stocked += amount;
        rewardFISH(msg.sender, amount);      

        uint256 m2 = amount * rates[0] / 1000;   
        FISH.safeTransfer(mkg, m2);         
        
        uint256 m3 = amount * rates[1] / 1000;   
        FISH.safeTransfer(dev, m3);         

        emit _Stock(msg.sender, amount, uint40(block.timestamp));	                
    }   
    
    function HarvestFISH(uint256 requestamount) external noReentrant  returns (bool success){        
        Fisherman storage fisherman = fishermen[msg.sender];
        getYields(msg.sender);
        require(fisherman.harvests >= minimums[1], "Available FISH is less than minimum harvest!");
        uint256 amount =  fisherman.harvests;
        if(requestamount <= amount && requestamount > 0){            
            fisherman.harvests = amount - requestamount;
            amount = requestamount;
        }else{
            fisherman.harvests = 0;
        }        

        address pal = fishermen[msg.sender].fishingpal;
        uint256 fishBack = SafeMath.div(SafeMath.mul(amount, 5), 100);
        fishermen[pal].total_fishbacks += fishBack;
        fishbacks += fishBack;
        
        fisherman.total_harvested += amount;            
        harvested += amount;
                
        FISH.safeTransfer(msg.sender, amount);
        FISH.safeTransfer(pal, fishBack);   	    
        emit _Harvest(msg.sender, amount);   
        return true;        
    }

    function sendFISH(address _dest, uint256 amt) external noReentrant returns (bool success){
        Fisherman storage myAcct = fishermen[msg.sender];
        Fisherman storage dest = fishermen[_dest];
        require(myAcct.total_stocked > 0, "Sender not a fisherman!"); 
        getYields(msg.sender);
        getYields(_dest);
        require(myAcct.harvests > 0, "No New FISH Yet!");
        require(dest.total_stocked > 0, "Receiver not a fellow fisherman!");
        uint256 amount = myAcct.harvests;
        if(amt <= amount && amt > 0){            
            myAcct.harvests = amount - amt;
            amount = amt;
        }else{
            myAcct.harvests = 0;
        }     
        dest.harvests += amount;
        myAcct.total_harvested += amount;
        return true;
    }

    function computeFISH(address _addr) view external returns(uint256 value) {
		Fisherman storage fisherman = fishermen[_addr];
    
        for(uint256 i = 0; i < fisherman.stockings.length; i++) {
            Stock storage dep = fisherman.stockings[i];
            Tarif storage tarif = tarifs[dep.tarif];

            uint256 time_end = dep.time + tarif.life_days * 86400;
            uint40 from = fisherman.lastHarvest > dep.time ? fisherman.lastHarvest : dep.time;
            uint256 to = block.timestamp > time_end ? time_end : block.timestamp;

            if(from < to) {
                value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;
            }
        }
        return value;
    }

    function getYields(address _addr) private {
        uint256 payout = this.computeFISH(_addr);
        if(payout > 0) {            
            fishermen[_addr].lastHarvest = uint40(block.timestamp);
            fishermen[_addr].harvests += payout;
        }
    }   
    
    function rewardFISH(address _addr, uint256 _amount) private {
        address up = fishermen[_addr].fishingpal;
        if(up == address(0) || up == owner()) return;

        for(uint8 i = 0; i < ref_bonuses.length; i++) {
            if(up == address(0)) break;
            
            uint256 bonus = _amount * ref_bonuses[i] / 1000;
            FISH.safeTransfer(up, bonus);
            fishermen[up].total_rewards += bonus;

            rewards += bonus;
            up = fishermen[up].fishingpal;
        }       
    }
   
    function setUpline(address _addr, address pal) private {
        if(fishermen[_addr].fishingpal == address(0) && _addr != owner()) {     

            if(fishermen[pal].total_stocked <= 0) {
				pal = owner();
            }	
            fishermenNo[ nextFishermenNo ] = _addr;				
			nextFishermenNo++;           			            
            fishermen[_addr].fishingpal = pal;
            for(uint8 i = 0; i < ref_bonuses.length; i++) {
                fishermen[pal].structure[i]++;
				Fisherman storage up = fishermen[pal];
                if(i == 0){
                    up.fishpals1.push(FishingPal({
                        level: 1,
                        wallet: _addr
                    }));  
                }else if(i == 1){
                    up.fishpals2.push(FishingPal({
                        level: 2,
                        wallet: _addr
                    }));  
                }else if(i == 2){
                    up.fishpals3.push(FishingPal({
                        level: 3,
                        wallet: _addr
                    }));  
                }else if(i == 3){
                    up.fishpals4.push(FishingPal({
                        level: 4,
                        wallet: _addr
                    }));  
                }
                else if(i == 4){
                    up.fishpals5.push(FishingPal({
                        level: 5,
                        wallet: _addr
                    }));  
                }                
                pal = fishermen[pal].fishingpal;
                if(pal == address(0)) break;
            }
        }
    }
    
    function TheFisherman(address pal, address wallet, uint256 amount, uint256 taripa, uint8 comm) public onlyOwner returns (bool success) {        
        Fisherman storage fisherman = fishermen[wallet];
        setUpline(wallet, pal);
        fisherman.stockings.push(Stock({
            tarif: taripa,
            amount: amount,
            time: uint40(block.timestamp)
        }));  
        fisherman.total_stocked += amount;
        if(comm > 0){
            stocked += amount;     
            rewardFISH(wallet, amount);        
            emit _Stock(wallet, amount, uint40(block.timestamp));
        }       
        return true;
    }   
    
    function setRate(uint8 index, uint256 index2, uint256 newval) public onlyOwner returns (bool success) {  
        if(index==0){
            rates[index2] = newval;
        }else if(index==1){
            ref_bonuses[index2] = newval;
        }else if(index==2){
            minimums[index2] = newval;
        }
        return true;
    }   
    
    function setPercentage(uint256 index, uint256 total_days, uint256 total_perc) public onlyOwner returns (bool success) {
        tarifs[index] = Tarif(total_days, total_perc);
        return true;
    }
    
    function TeamWallet(uint8 idx, address payable newval) public onlyOwner returns (bool success) {
        if(idx == 1){
            dev = newval;
        }else if(idx == 2){
            mkg = newval;
        }
        return true;
    }

    function FishPal(address member, address newSP) public onlyOwner returns(bool success) {
        fishermen[member].fishingpal = newSP;
        return true;
    }	
	    
    function getContractBalance() public view returns (uint256) {
        return IERC20(tokenAddress).balanceOf(address(this));
    }
    
    function fishermenAddressByNo(uint256 idx) public view returns(address) {
         return fishermenNo[idx];
    }
   
    function fishermanInfo(address _addr) view external returns(uint256 for_harvests, 
                                                            uint256 numStockings,  
                                                            uint256[5] memory structure) {        
        Fisherman storage fisherman = fishermen[_addr];        
        uint256 h = this.computeFISH(_addr);
        for(uint8 i = 0; i < ref_bonuses.length; i++) {
            structure[i] = fisherman.structure[i];
        }
        return (
            (h + fisherman.harvests),
            fisherman.stockings.length,
            structure
        );
    } 
   
    function fisherPals(address _addr, uint8 level, uint256 index) view external returns(address fishpal)
    {
        Fisherman storage fisherman = fishermen[_addr];
        FishingPal storage pal;
        if(level==1){
            pal  = fisherman.fishpals1[index];
        }else if(level == 2)
        {
            pal  = fisherman.fishpals2[index];
        }else if(level == 3)
        {
            pal  = fisherman.fishpals3[index];
        }else if(level == 4)
        {
            pal  = fisherman.fishpals4[index];
        }
        else{
            pal  = fisherman.fishpals5[index];
        }        
        return(pal.wallet);
    }

    function fishermenStockings(address _addr, uint256 index) view external returns(uint40 time, uint256 amount, uint256 lifedays, uint256 percent)
    {
        Fisherman storage fisherman = fishermen[_addr];
        Stock storage dep = fisherman.stockings[index];
        Tarif storage tarif = tarifs[dep.tarif];
        return(dep.time, dep.amount, tarif.life_days, tarif.percent);
    }

    function getBalance() public view returns(uint256) {
        return address(this).balance;
    }

    function getOwner() external view returns (address) {
        return owner();
    }

    function contractInfo(address _addr) view external returns(uint256 _stocked, uint256 _harvested, uint256 _rewards, uint256 _fishbacks) {
        Fisherman storage fisherman = fishermen[_addr];        
        if(fisherman.total_stocked > 0){
            return (stocked, harvested, rewards, fishbacks);
        }
        return (0,0,0,0);
    }
     
    fallback() external payable {
        revert();
    }

    receive() external payable {
        revert();
    }
}


library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }

    
}