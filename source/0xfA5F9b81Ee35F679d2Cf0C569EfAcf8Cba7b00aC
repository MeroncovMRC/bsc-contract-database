{"EmissionDistributor.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\n\ninterface IDaylight {\n    function getOwner() external view returns (address);\n}\n\ncontract EmissionDistributor {\n\n    // daylight token\n    address public immutable daylight;\n\n    // percentage awarded per block\n    uint256 public percentPerBlock = 347_222_222_222;\n\n    // max percent that can be awarded per day\n    uint256 public maxPercent = 5 * 10**16;\n\n    // reward distributor \n    address public rewardDistributor;\n\n    // last reward block\n    uint256 public lastRewardBlock;\n    \n    // only daylight owner\n    modifier onlyOwner() {\n        require(\n            msg.sender == IDaylight(daylight).getOwner(),\n            \u0027Only Daylight Owner\u0027\n        );\n        _;\n    }\n\n    constructor(address daylight_) {\n        daylight = daylight_;\n        lastRewardBlock = block.number;\n    }\n\n    function trigger() external {\n\n        // get amount to distribute\n        uint256 amount = amountToDistribute();\n\n        // reset timer\n        lastRewardBlock = block.number;\n\n        // leave if amount is zero\n        if (amount == 0 || rewardDistributor == address(0)) {\n            return;\n        }\n\n        // send tokens to reward distributor\n        IERC20(daylight).transfer(rewardDistributor, amount);\n    }\n\n    function resetTimer() external onlyOwner {\n        lastRewardBlock = block.number;\n    }\n\n    function setPercentPerBlock(uint newPercent) external onlyOwner {\n        // ensure new percent is valid\n        percentPerBlock = newPercent;\n    }\n\n    function setMaxPercent(uint maxPercent_) external onlyOwner {\n        // ensure maximum percent is valid\n        maxPercent = maxPercent_;\n    }\n\n    function setRewardDistributor(address rewardDistributor_) external onlyOwner {\n        rewardDistributor = rewardDistributor_;\n    }\n\n    function amountToDistribute() public view returns (uint256) {\n        uint percent = timeSince() * percentPerBlock;\n        if (percent \u003e maxPercent) {\n            percent = maxPercent;\n        }\n        return ( balanceOf() * percent ) / 10**18;\n    }\n\n    function timeSince() public view returns (uint256) {\n        return lastRewardBlock \u003c block.number ? block.number - lastRewardBlock : 0;\n    }\n\n    function balanceOf() public view returns (uint256) {\n        return IERC20(daylight).balanceOf(address(this));\n    }\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"}}