{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\n\n"},"ROCKET.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\ncontract ROCKET is Context, IERC20, IERC20Metadata {\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    mapping (uint256 =\u003e address) private _holders;\n    mapping (address =\u003e bool) private _holdersExist;\n\n    uint256 private _holdersCount;\n    uint256 private _holdersWithBalanceCount;\n    uint256 private _initialSupply;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    constructor (address owner_) {\n        _name           = \"Rocketyield.finance\";\n        _symbol         = \"ROCKET\";\n        _initialSupply  = 70000000000000000000000000; // 70 million\n        _totalSupply    = _initialSupply;\n\n        _holders[0]              = owner_;\n        _holdersExist[owner_]    = true;\n        _holdersCount            = 1;\n        _holdersWithBalanceCount = 1;\n\n        _balances[owner_] = _totalSupply;\n    }\n    \n    function gettaxburn() public view virtual returns (uint256) {\n        return _initialSupply - _totalSupply;\n    }\n\n    function gettaxfee() public view virtual returns (string memory) {\n        return \"0.02\";\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 100, \"amount too small\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\n        uint256 deductedAmount         = amount * 10 / 100;\n        uint256 sentAmount             = amount - deductedAmount;\n        uint256 burnAmount             = deductedAmount * 20 / 100;\n        uint256 totalDistributedAmount = deductedAmount - burnAmount;\n\n        _balances[sender] = senderBalance - amount;\n\n        uint256 distributedAmount = totalDistributedAmount / _holdersWithBalanceCount;\n        uint256 timesDistributed = 0;\n        for ( uint i = 0; i \u003c _holdersCount; i++ ) {\n            address holderAddress = _holders[i];\n            if ( _balances[holderAddress] != 0 ) {\n                _balances[holderAddress] += distributedAmount;\n                timesDistributed++;\n            }\n            if ( timesDistributed == _holdersWithBalanceCount ) {\n                break;\n            }\n        }\n\n        _totalSupply -= burnAmount;\n\n        if ( _balances[recipient] == 0 ) {\n            if ( !_holdersExist[recipient] ) {\n                _holders[_holdersCount] = recipient;\n                _holdersExist[recipient] = true;\n                _holdersCount++;\n            }\n            _holdersWithBalanceCount++;\n        }\n        if ( _balances[sender] == 0 ) {\n            _holdersWithBalanceCount--;\n        }\n\n        _balances[recipient] += sentAmount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n"}}