{"Address.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n\nlibrary Address {\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n}\n"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"ReentrantGuard.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nabstract contract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    modifier nonReentrant() {\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        _status = _ENTERED;\n        _;\n        _status = _NOT_ENTERED;\n    }\n}\n"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"UselessFurnace.sol":{"content":"pragma solidity 0.8.4;\n// SPDX-License-Identifier: Unlicensed\n\n/**\n * Created Sept 2 2021\n * Developed by Markymark (DeFiMark / MoonMark)\n * USELESS Furnace Contract to stablize the Useless Liquidity Pool\n */\n \nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./ReentrantGuard.sol\";\n\n/**\n * \n * BNB Sent to this contract will be used to automatically manage the Useless Liquidity Pool\n * Ideally keeping Liquidity Pool Size between 7% - 12.5% of the circulating supply of Useless\n * Liquidity over 20% - LP Extraction\n * Liquidity over 12.5% - Buy/Burn Useless\n * Liquidity between 6.67 - 12.5%  - ReverseSwapAndLiquify\n * Liquidity under 6.67% - LP Injection\n *\n */\ncontract UselessFurnace is ReentrancyGuard {\n    \n    using Address for address;\n    using SafeMath for uint256;\n  \n    /**  Useless Stats  **/\n    uint256 constant totalSupply = 1000000000 * 10**6 * 10**9;\n    address constant _burnWallet = 0x000000000000000000000000000000000000dEaD;\n    address constant _token = 0x2cd2664Ce5639e46c6a3125257361e01d0213657;\n    address constant private _tokenLP = 0x08A6cD8a2E49E3411d13f9364647E1f2ee2C6380;\n  \n    /** address of wrapped bnb **/ \n    address constant private _bnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n    /** Liquidity Pairing Threshold **/\n    uint256 constant public pairLiquidityUSELESSThreshold = 5 * 10**16;\n  \n    /** Expressed as 100 / x **/\n    uint256 constant public pullLiquidityRange = 5;\n    uint256 constant public buyAndBurnRange = 8;\n    uint256 constant public reverseSALRange = 15;\n  \n    /** BNB Thresholds **/\n    uint256 constant public automateThreshold = 2 * 10**17;\n    uint256 constant max_bnb_in_call = 50 * 10**18;\n  \n    /** Pancakeswap Router **/\n    IUniswapV2Router02 constant router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n  \n    /** Flash-Loan Prevention **/\n    uint256 lastBlockAutomated;\n        \n    /** BNB -\u003e Token **/\n    address[] private bnbToToken;\n\n    constructor() {\n        // BNB -\u003e Token\n        bnbToToken = new address[](2);\n        bnbToToken[0] = router.WETH();\n        bnbToToken[1] = _token;\n    }\n  \n    /** Automate Function */\n    function BURN_IT_DOWN_BABY() external nonReentrant {\n        require(address(this).balance \u003e= automateThreshold, \u0027Not Enough BNB To Trigger Automation\u0027);\n        require(lastBlockAutomated + 3 \u003c block.number, \u00274 Blocks Must Pass Until Next Trigger\u0027);\n        lastBlockAutomated = block.number;\n        automate();\n    }\n\n    /** Automate Function */\n    function automate() private {\n        // check useless standing\n        checkUselessStanding();\n        // determine the health of the lp\n        uint256 dif = determineLPHealth();\n        // check cases\n        dif = clamp(dif, 1, 100);\n    \n        if (dif \u003c= pullLiquidityRange) {\n            uint256 percent = uint256(100).div(dif);\n            // pull liquidity\n            pullLiquidity(percent);\n        } else if (dif \u003c= buyAndBurnRange) {\n            // if LP is over 12.5% of Supply we buy burn useless\n            buyAndBurn();\n        } else if (dif \u003c= reverseSALRange) {\n            // if LP is between 6.666%-12.5% of Supply we call reverseSAL\n            reverseSwapAndLiquify();\n        } else {\n            // if LP is under 6.666% of Supply we provide a pairing if one exists, else we call reverseSAL\n            uint256 tokenBal = IERC20(_token).balanceOf(address(this));\n            if (liquidityThresholdReached(tokenBal)) {\n                pairLiquidity(tokenBal);\n            } else {\n                reverseSwapAndLiquify();\n            }\n        }\n    }\n\n    /**\n     * Buys USELESS Tokens and sends them to the burn wallet\n     */ \n    function buyAndBurn() private {\n        // keep bnb in range\n        uint256 bnbToUse = address(this).balance \u003e max_bnb_in_call ? max_bnb_in_call : address(this).balance;\n        // buy and burn it\n        router.swapExactETHForTokens{value: bnbToUse}(\n            0, \n            bnbToToken,\n            _burnWallet, // Burn Address\n            block.timestamp.add(30)\n        );\n        // tell blockchain\n        emit BuyAndBurn(bnbToUse);\n    }\n  \n   /**\n    * Uses BNB in Contract to Purchase Useless, pairs with remaining BNB and adds to Liquidity Pool\n    * Reversing The Effects Of SwapAndLiquify\n    * Price Positive - LP Neutral Operation\n    */\n    function reverseSwapAndLiquify() private {\n        // BNB Balance before the swap\n        uint256 initialBalance = address(this).balance \u003e max_bnb_in_call ? max_bnb_in_call : address(this).balance;\n        // USELESS Balance before the Swap\n        uint256 contractBalance = IERC20(_token).balanceOf(address(this));\n        // Swap 50% of the BNB in Contract for USELESS Tokens\n        uint256 transferAMT = initialBalance.div(2);\n        // Swap BNB for USELESS\n        router.swapExactETHForTokens{value: transferAMT}(\n            0, // accept any amount of USELESS\n            bnbToToken,\n            address(this), // Store in Contract\n            block.timestamp.add(30)\n        );\n        // how many USELESS Tokens were received\n        uint256 diff = IERC20(_token).balanceOf(address(this)).sub(contractBalance);\n        // add liquidity to Pancakeswap\n        addLiquidity(diff, transferAMT);\n        emit ReverseSwapAndLiquify(diff, transferAMT);\n    }\n   \n    /**\n     * Pairs BNB and USELESS in the contract and adds to liquidity if we are above thresholds \n     */\n    function pairLiquidity(uint256 uselessInContract) private {\n        // amount of bnb in the pool\n        uint256 bnbLP = IERC20(_bnb).balanceOf(_tokenLP);\n        // make sure we have tokens in LP\n        bnbLP = bnbLP == 0 ? address(_tokenLP).balance : bnbLP;\n        // how much BNB do we need to pair with our useless\n        uint256 bnbbal = getTokenInToken(_token, _bnb, uselessInContract);\n        //if there isn\u0027t enough bnb in contract\n        if (address(this).balance \u003c bnbbal) {\n            // recalculate with bnb we have\n            uint256 nUseless = uselessInContract.mul(address(this).balance).div(bnbbal);\n            addLiquidity(nUseless, address(this).balance);\n            emit LiquidityPairAdded(nUseless, address(this).balance);\n        } else {\n            // pair liquidity as is \n            addLiquidity(uselessInContract, bnbbal);\n            emit LiquidityPairAdded(uselessInContract, bnbbal);\n        }\n    }\n    \n    /** Checks Number of Tokens in LP */\n    function checkUselessStanding() private {\n        uint256 threshold = getCirculatingSupply().div(10**4);\n        uint256 uselessBalance = IERC20(_token).balanceOf(address(this));\n        if (uselessBalance \u003e= threshold) {\n            // burn 1/4 of balance\n            try IERC20(_token).transfer(_burnWallet, uselessBalance.div(4)) {} catch {}\n        }\n    }\n   \n    /** Returns the price of tokenOne in tokenTwo according to Pancakeswap */\n    function getTokenInToken(address tokenOne, address tokenTwo, uint256 amtTokenOne) public view returns (uint256){\n        address[] memory path = new address[](2);\n        path[0] = tokenOne;\n        path[1] = tokenTwo;\n        return router.getAmountsOut(amtTokenOne, path)[1];\n    } \n    \n    /**\n     * Adds USELESS and BNB to the USELESS/BNB Liquidity Pool\n     */ \n    function addLiquidity(uint256 uselessAmount, uint256 bnbAmount) private {\n       \n        // approve router to move tokens\n        IERC20(_token).approve(address(router), uselessAmount);\n        // add the liquidity\n        try router.addLiquidityETH{value: bnbAmount}(\n            _token,\n            uselessAmount,\n            0,\n            0,\n            address(this),\n            block.timestamp.add(30)\n        ) {} catch{}\n    }\n\n    /**\n     * Removes Liquidity from the pool and stores the BNB and USELESS in the contract\n     */\n    function pullLiquidity(uint256 percentLiquidity) private returns (bool){\n       // Percent of our LP Tokens\n       uint256 pLiquidity = IERC20(_tokenLP).balanceOf(address(this)).mul(percentLiquidity).div(10**2);\n       // Approve Router \n       IERC20(_tokenLP).approve(address(router), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\n       // remove the liquidity\n       try router.removeLiquidityETHSupportingFeeOnTransferTokens(\n            _token,\n            pLiquidity,\n            0,\n            0,\n            address(this),\n            block.timestamp.add(30)\n        ) {} catch {return false;}\n        \n        emit LiquidityPulled(percentLiquidity, pLiquidity);\n        return true;\n    }\n    \n    /**\n     * Determines the Health of the LP\n     * returns the percentage of the Circulating Supply that is in the LP\n     */ \n    function determineLPHealth() public view returns(uint256) {\n        // Find the balance of USELESS in the liquidity pool\n        uint256 lpBalance = IERC20(_token).balanceOf(_tokenLP);\n        // lpHealth = Supply / LP Balance\n        return lpBalance == 0 ? 6 : getCirculatingSupply().div(lpBalance);\n    }\n    \n    /** Whether or not the Pair Liquidity Threshold has been reached */\n    function liquidityThresholdReached(uint256 bal) private view returns (bool) {\n        uint256 circulatingSupply = getCirculatingSupply();\n        uint256 pow = circulatingSupply \u003c (10**10 * 10**9) ? 5 : 7;\n        return bal \u003e= getCirculatingSupply().div(10**pow);\n    }\n  \n    /** Returns the Circulating Supply of Token */\n    function getCirculatingSupply() private view returns(uint256) {\n        return totalSupply.sub(IERC20(_token).balanceOf(_burnWallet));\n    }\n  \n    /** Amount of LP Tokens in this contract */ \n    function getLPTokenBalance() external view returns (uint256) {\n        return IERC20(_tokenLP).balanceOf(address(this));\n    }\n  \n    /** Percentage of LP Tokens In Contract */\n    function getPercentageOfLPTokensOwned() external view returns (uint256) {\n        return uint256(10**18).mul(IERC20(_tokenLP).balanceOf(address(this))).div(IERC20(_tokenLP).totalSupply());\n    }\n      \n    /** Clamps a variable between a min and a max */\n    function clamp(uint256 variable, uint256 min, uint256 max) private pure returns (uint256){\n        if (variable \u003c= min) {\n            return min;\n        } else if (variable \u003e= max) {\n            return max;\n        } else {\n            return variable;\n        }\n    }\n  \n    // EVENTS \n    event BuyAndBurn(uint256 amountBNBUsed);\n    event ReverseSwapAndLiquify(uint256 uselessAmount,uint256 bnbAmount);\n    event LiquidityPairAdded(uint256 uselessAmount,uint256 bnbAmount);\n    event LiquidityPulled(uint256 percentOfLiquidity, uint256 numLPTokens);\n\n    // Receive BNB\n    receive() external payable { }\n\n}"}}