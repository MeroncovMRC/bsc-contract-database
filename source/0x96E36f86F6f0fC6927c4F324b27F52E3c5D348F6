{"FOXICOIN .sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// 引入OpenZeppelin库中的ERC20接口和安全数学运算\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n// 定义一个合约，实现了IERC20接口\r\ncontract MyToken is IERC20 {\r\n    // 使用SafeMath库来避免溢出错误\r\n    using SafeMath for uint256;\r\n\r\n    // 定义代币的名称、符号和小数位数\r\n    string public constant name = \"FOXICOIN\";\r\n    string public constant symbol = \"FXC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // 定义代币的总供应量和每个地址的余额映射\r\n    uint256 private _totalSupply;\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    // 定义每个地址对另一个地址的授权额度映射\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    // 定义构造函数，在部署合约时指定初始总供应量，并分配给部署者\r\n    constructor(uint256 initialSupply) {\r\n        _totalSupply = initialSupply;\r\n        _balances[msg.sender] = initialSupply;\r\n        emit Transfer(address(0), msg.sender, initialSupply); // 触发转账事件\r\n    }\r\n\r\n    // 实现IERC20接口中的totalSupply函数，返回代币的总供应量\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // 实现IERC20接口中的balanceOf函数，返回指定地址的代币余额\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // 实现IERC20接口中的transfer函数，从调用者转移指定数量的代币到另一个地址，并返回是否成功\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(recipient != address(0), \"Transfer to the zero address\"); // 检查接收者不是零地址\r\n        require(_balances[msg.sender] \u003e= amount, \"Insufficient balance\"); // 检查调用者有足够的余额\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount); // 从调用者扣除代币数量\r\n        _balances[recipient] = _balances[recipient].add(amount); // 给接收者增加代币数量\r\n\r\n        emit Transfer(msg.sender, recipient, amount); // 触发转账事件\r\n\r\n        return true; // 返回成功标志\r\n    }\r\n\r\n        // 实现IERC20接口中的allowance函数，返回指定地址对另一个地址的授权额度\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // 实现IERC20接口中的approve函数，让调用者授权指定数量的代币给另一个地址，并返回是否成功\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(spender != address(0), \"Approve to the zero address\");  // 检查被授权者不是零地址\r\n\r\n        _allowances[msg.sender][spender] = amount;  // 设置授权额度\r\n\r\n        emit Approval(msg.sender, spender, amount);  // 触发授权事件\r\n\r\n        return true;  // 返回成功标志\r\n    }\r\n\r\n    // 实现IERC20接口中的transferFrom函数，从一个地址转移指定数量的代币到另一个地址，并返回是否成功\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(sender != address(0), \"Transfer from the zero address\"); // 检查发送者不是零地址\r\n        require(recipient != address(0), \"Transfer to the zero address\"); // 检查接收者不是零地址\r\n        require(_balances[sender] \u003e= amount, \"Insufficient balance\"); // 检查发送者有足够的余额\r\n        require(_allowances[sender][msg.sender] \u003e= amount, \"Insufficient allowance\"); // 检查调用者有足够的授权额度\r\n\r\n        _balances[sender] = _balances[sender].sub(amount); // 从发送者扣除代币数量\r\n        _balances[recipient] = _balances[recipient].add(amount); // 给接收者增加代币数量\r\n\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount); // 从调用者的授权额度中扣除代币数量\r\n\r\n        emit Transfer(sender, recipient, amount); // 触发转账事件\r\n\r\n        return true; // 返回成功标志\r\n    }\r\n\r\n    // 定义一个内部函数，用于创建新的代币，并增加总供应量和指定地址的余额（可选）\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"Mint to the zero address\");  // 检查创建代币的地址不是零地址\r\n\r\n        _totalSupply = _totalSupply.add(amount);  // 增加总供应量\r\n        _balances[account] = _balances[account].add(amount);  // 增加指定地址的余额\r\n\r\n        emit Transfer(address(0), account, amount);  // 触发转账事件，表示从零地址创建了新的代币\r\n    }\r\n\r\n    // 定义一个内部函数，用于销毁指定数量的代币，并减少总供应量和指定地址的余额（可选）\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"Burn from the zero address\");  // 检查销毁代币的地址不是零地址\r\n        require(_balances[account] \u003e= amount, \"Insufficient balance\");  // 检查指定地址有足够的余额\r\n\r\n        _totalSupply = _totalSupply.sub(amount);  // 减少总供应量\r\n        _balances[account] = _balances[account].sub(amount);  // 减少指定地址的余额\r\n\r\n        emit Transfer(account, address(0), amount);  // 触发转账事件，表示向零地址销毁了代币\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}