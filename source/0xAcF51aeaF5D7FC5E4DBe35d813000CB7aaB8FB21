
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/ContributionLevels.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract ContributionLevels {

    // Define the token amounts for each contribution level
    mapping(uint256 => uint256) public tokenAmounts;

    constructor() {
        // Initialize the token amounts for each contribution level
        tokenAmounts[0.1 ether] = 528000000 ether;
        tokenAmounts[0.2 ether] = 1056000000 ether;
        tokenAmounts[0.3 ether] = 1584000000 ether;
        tokenAmounts[0.4 ether] = 2112000000 ether;
        tokenAmounts[0.5 ether] = 2640000000 ether;
        tokenAmounts[1 ether] = 5280000000 ether;
        tokenAmounts[1.5 ether] = 9270000000 ether;
        tokenAmounts[2 ether] = 12360000000 ether;
        tokenAmounts[2.5 ether] = 15450000000 ether;
    }

    /// @notice Function to check if a given contribution is valid
    /// @param bnbAmount The amount of BNB sent in the transaction.
    /// @return A boolean indicating if the contribution is valid.
    function isValidContribution(uint256 bnbAmount) internal view returns (bool) {
        return tokenAmounts[bnbAmount] > 0;
    }

    /// @notice Function to get the token amount for a given contribution.
    /// @param bnbAmount The amount of BNB sent in the transaction.
    /// @return The amount of tokens the user will receive.
    function getTokenAmount(uint256 bnbAmount) public view returns (uint256) {
        return tokenAmounts[bnbAmount];
    }
}

// File: contracts/PreSale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;


import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./ContributionLevels.sol";


contract Presale is ContributionLevels , Ownable {

    /// @notice The amount of tokens allocated for the presale.
    uint256 public constant PRESALE_SUPPLY = 500000000000 ether;
    string internal constant IS_NOT_COMPLETED = "Presale is not completed!";
    string internal constant PRESALE_NOT_STARTED = "Presale is not started!";
    string internal constant TIMESTAMP_ALREADY_SET = "Timestamp is set!";
    string internal constant NO_TOKENS_TO_CLAIM = "No tokens to claim!";
    string internal constant NOT_ENOUGH_TOKENS_ALLOCATED = "Not enough tokens";
    string internal constant NO_CALLS_FROM_CONTRACTS = "Calls from contracts are not allowed!";
    string internal constant NOTHING_TO_WITHDRAW = "Nothing to withdraw";

    /// @notice The amount of BNB raised.   
    uint256 public BNBRaised;

    /// @notice The token that will be sold.
    IERC20 public token;

    /// @notice The amount of contributors.
    uint256 public contributorsCount;

    /// @notice A timestamp indicating if the presale has started.
    uint256 public presaleStartTime;

    /// @notice A boolean indicating if the presale is completed.
    bool public presaleCompleted = false;
    
    // Mapping to store the amount of tokens each user is supposed to receive
    mapping(address => uint256) public tokensToClaim;

    // Mapping to store the amount of tokens each user has contributed with
    mapping(address => uint256) private contributed;
    mapping(address => uint256) private received;

    /// @notice Tokens locked for Presale.
    /// @param allocatedPreSale The amount of tokens allocated for the presale.
    /// @param allocationRemaining The amount of tokens remaining for the presale.
    struct PresaleAmount {
        bool isInitialized;
        uint256 allocatedPreSale;
        uint256 allocationRemaining;
    }

    /// @notice Error message for an invalid contribution.
    /// @param message The error message.
    error Message(string message);

    /// @notice Error message for an invalid contribution.
    error InvalidContribution();

    /// @notice Error message for an invalid transfer.
    error TransferFailed();  

    /// @notice Error message for an invalid amount.
    error TryLowerAmount();

    /// @notice Error message for a completed presale.
    error PresaleCompleted();

    /// @notice Error message for an initialized contract.
    /// @param initialized A boolean indicating if the contract is initialized.
    error Initialized(
        bool initialized
    );

    /// @notice Event emitted when the presale is completed.
    event PresaleUpdated();

    /// @notice Event emmited when other tokens is withdrawn by the owner.
    /// @param token The token address.
    event TokensWithdrawn(
        IERC20 token
    );

    /// @notice Event emitted when the remaining tokens are withdrawn.
    /// @param amount The amount of withdrawn tokens.
    event RemainingTokensWithdrawn(
        uint256 amount
    );

    /// @notice Event emitted when the BNB is withdrawn.
    event BNBWithdrawnToLP();

    /// @notice Event emitted when the presale is initialized.
    /// @param token The token that was deposited.
    /// @param amount The amount of tokens that were deposited.
    event PresaleInitialized(
        address token, 
        uint256 amount
    );

    /// @notice Event emitted when a contribution is made.
    /// @param contributor The contributor.
    /// @param bnbAmount The amount of BNB contributed.
    /// @param tokenAmount The amount of tokens the contributor received.
    event Contribution(
        address indexed contributor, 
        uint256 bnbAmount, 
        uint256 tokenAmount
    );

    /// @notice Event emitted when tokens are claimed.
    /// @param contributor The contributor.
    /// @param tokenAmount The amount of tokens the contributor received.
    event ClaimedTokens(
        address indexed contributor, 
        uint256 tokenAmount
    );



    /// @notice Modifier to check that the msg.value is an approved BNB amount.
    modifier validContribution() {
        if(!isValidContribution(msg.value)) revert InvalidContribution();
        _;
    }

    /// @notice Modifier to check that the contract is initialized.
    modifier notInitialized() {
        if (_presaleAmount.isInitialized) revert Initialized(true);
        _;
    }

    /// @notice Modifier to check that the contract is initialized.
    modifier isInitialized() {
        if (!_presaleAmount.isInitialized) revert Initialized(false);
        _;
    }

    /// @notice Modifier to check that the user has tokens to claim.
    modifier canClaimTokens() {
        if (tokensToClaim[msg.sender] <= 0) revert Message(NO_TOKENS_TO_CLAIM); 
        _;
    }

    // Struct to store the amount of tokens allocated for the presale
    PresaleAmount private _presaleAmount;

    receive() external payable {
        emit Contribution(msg.sender, msg.value, 0);
    }

    constructor() {

    }

    /// @notice Function to deposit the required tokens into the contract.
    /// @dev Only the owner can call this function.
    /// @param _token The token to deposit.
    function depositTokens(address _token) external onlyOwner notInitialized {
        token = IERC20(_token);
        if (PRESALE_SUPPLY > token.balanceOf(msg.sender)) revert Message(NOT_ENOUGH_TOKENS_ALLOCATED);
        
        _presaleAmount.allocatedPreSale = 0;
        _presaleAmount.allocationRemaining = PRESALE_SUPPLY;
        _presaleAmount.isInitialized = true;

        if (!token.transferFrom(msg.sender, address(this), PRESALE_SUPPLY)) revert TransferFailed();

        emit PresaleInitialized(address(token), PRESALE_SUPPLY);
    }


    /// @notice Function to contribute to the presale.
    /// @dev Will only accept contributions that are valid.
    /// @dev The contributor will receive the tokens after the presale has ended.
    function contribute() public payable isInitialized validContribution {
        if (presaleStartTime > block.timestamp) revert Message(PRESALE_NOT_STARTED);
        if (presaleCompleted) revert PresaleCompleted();
        uint256 _tokenAmount = getTokenAmount(msg.value);
        if (_tokenAmount > _presaleAmount.allocationRemaining) revert TryLowerAmount();
        
        _presaleAmount.allocationRemaining -= _tokenAmount;
        
        if (_presaleAmount.allocationRemaining < (528000000 ether)) {
            _tokenAmount += _presaleAmount.allocationRemaining;
            _presaleAmount.allocationRemaining = 0;
            presaleCompleted = true;
        }
        
        _presaleAmount.allocatedPreSale += _tokenAmount;
        
        contributorsCount++;

        BNBRaised += msg.value;
        contributed[msg.sender] += msg.value;

        // Store the amount of tokens the user is supposed to receive
        tokensToClaim[msg.sender] += _tokenAmount;

        emit Contribution(msg.sender, msg.value, _tokenAmount);
    }

    /// @notice Function to allow users to claim their tokens after the presale has ended.
    function claimTokens() public canClaimTokens {
        if(msg.sender == address(this)) revert Message(NO_CALLS_FROM_CONTRACTS); 
        if(!presaleCompleted) revert Message(IS_NOT_COMPLETED);
        
        uint256 _amount = tokensToClaim[msg.sender];
        if(_amount <= 0) revert Message(NO_TOKENS_TO_CLAIM);

        tokensToClaim[msg.sender] = 0;
        received[msg.sender] += _amount;

        if (!token.transfer(msg.sender, _amount)) revert TransferFailed();

        emit ClaimedTokens(msg.sender, _amount);
    }

    /// @notice Function to get the amount of BNB a contributor has contributed with.
    /// @param _contributor The contributor.
    /// @return The amount of BNB the contributor has contributed with.
    function getContributedAmount(address _contributor) public view returns (uint256) {
        return contributed[_contributor];
    }

    /// @notice Function to get the amount of tokens a contributor has received.
    /// @param _contributor The contributor.
    /// @return The amount of tokens the contributor has received.
    function getReceivedTokens(address _contributor) public view returns (uint256) {
        return received[_contributor];
    }

    /// @notice Function to withdraw the BNB from the contract.
    /// @dev Only the owner can call this function.
    function withdrawBNB() external onlyOwner {
        if (BNBRaised == 0) revert Message(NOTHING_TO_WITHDRAW);
        if (!presaleCompleted) revert Message(IS_NOT_COMPLETED);
        
        BNBRaised = 0;
        payable(msg.sender).transfer(address(this).balance);

        emit BNBWithdrawnToLP();
    }

    function withdrawTokens(IERC20 _token) external onlyOwner {
        if (!presaleCompleted) revert Message(IS_NOT_COMPLETED);

        if(_token != token) {
            if (!_token.transfer(msg.sender, _token.balanceOf(address(this)))) revert TransferFailed();
            emit TokensWithdrawn(_token);
            return;
        }

        uint256 _nonReservedAmount = _presaleAmount.allocationRemaining;
        _presaleAmount.allocationRemaining = 0;
        if (!_token.transfer(msg.sender, _nonReservedAmount)) revert TransferFailed();
        if (_nonReservedAmount + _presaleAmount.allocatedPreSale != PRESALE_SUPPLY) revert Message(NOT_ENOUGH_TOKENS_ALLOCATED);
        emit RemainingTokensWithdrawn(_nonReservedAmount);
    }

    /// @notice Function to get the remaining amount of tokens allocated for the presale.
    /// @return The remaining amount of tokens allocated for the presale.
    function getPresaleRemainingAmount() public view returns (uint256) {
        return _presaleAmount.allocationRemaining;
    }

    /// @notice Function to get the reserved amount of tokens allocated for the presale.
    /// @return The amount of tokens reserved for claiming.
    function getPresaleReservedAmount() public view returns (uint256) {
        return _presaleAmount.allocatedPreSale;
    }

    /// @notice Function to set the presale as completed.
    /// @dev Only the owner can call this function.
    /// @param _presaleCompleted A boolean indicating if the presale is completed.
    function setPresaleCompleted(bool _presaleCompleted) external onlyOwner {
        presaleCompleted = _presaleCompleted;
        emit PresaleUpdated();
    }

    function setPresaleStartTime(uint256 _presaleStartTime) external onlyOwner {
        if (presaleStartTime == _presaleStartTime) revert Message(TIMESTAMP_ALREADY_SET);
        if (_presaleStartTime < block.timestamp) revert Message(TIMESTAMP_ALREADY_SET);
        presaleStartTime = _presaleStartTime;
        emit PresaleUpdated(); 
    }

}
