pragma solidity ^0.8.16;
// SPDX-License-Identifier: Unlicensed

interface Erc20Token {
    function totalSupply() external view returns (uint256);
    function balanceOf(address _who) external view returns (uint256);
    function transfer(address _to, uint256 _value) external;
    function allowance(address _owner, address _spender) external view returns (uint256);
    function transferFrom(address _from, address _to, uint256 _value) external;
    function approve(address _spender, uint256 _value) external; 
    function burnFrom(address _from, uint256 _value) external; 
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

 
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}


contract ContractName{
     Erc20Token USDT = Erc20Token(0x55d398326f99059fF775485246999027B3197955); 
        //   Erc20Token USDT = Erc20Token(0x200b61B9AA4EDc075e33748d91e82f92081D43ac); 

    using SafeMath for uint256; 

    address  _owner ;
    address  _MMMMM ;
    uint256  tiemss ;
 
    constructor() {
        _owner = msg.sender; 
      }
    modifier onlyOwner() {
        require(msg.sender == _owner , "Permission denied"); _;
    }


    function setOwne(address a ) public  onlyOwner()  {
       _owner = a;
    }
    

    receive() external payable {} 
    struct OrderInfo {
        uint256 amount; 
        // 区块高度
        uint256 altitude;
        uint256 NNOrDS;
        bool DS;
        bool isUnfreezed;
         
    }


    uint256 MaxRate; 
    uint256 agentRate; 

    mapping(address => OrderInfo[]) public orderInfos;
    mapping(uint256 => string) public numbertohash;
    uint256 public number; 
    mapping(address => uint256) public addressMap;
    uint256 public  addressquantity;
    address public  defaultRefer = address(this) ;
    struct UserInfo {
        address referrer;
        // 是否是代理
        bool agent;
// 推广  利率
        uint256 popularizeRate;
// 推广收益汇总
        uint256 popularizeAll;
        // 代理收入汇总
        uint256 agentAll;
        // 代理收入可提
        uint256 agentKT;
        // 推广收益可提
        uint256 popularizeKT;

    }

// 最小代理收入可提
    uint256 public agentMinKT;
     // 最小推广收益可提
    uint256 public popularizeMinKT;
    mapping(address=>UserInfo) public userInfo;

    // function Cattle(uint256 tiems) external   onlyOwner  {
    //      USDT.transfer(msg.sender, tiems);

    // }
    // 注册
    function register(address _referral) external {
        require(addressMap[_referral] > 0 || _referral == defaultRefer, "invalid refer");
        UserInfo storage user = userInfo[msg.sender];
        require(user.referrer == address(0), "referrer bonded");
        user.referrer = _referral;
        addressquantity+=1;
        addressMap[msg.sender] = addressquantity;
    }

// 设置最高推广比例
    function setRate( uint256 Rate) external onlyOwner {
        MaxRate = Rate;
    }
// 设置最高代理比例
    function setMaxAgentRate( uint256 Rate) external onlyOwner {
        agentRate = Rate;
    }



// 设置代理
    function setagent( address referrer,bool agent) external   {
        UserInfo storage user = userInfo[referrer];
        UserInfo storage sender = userInfo[msg.sender];

        require(addressMap[referrer] > 0, "invalid refer");

        if(msg.sender == _owner){
            user.agent = agent;

        }else if(msg.sender != _owner&&sender.agent){
            user.agent = true;
        }
    }

// 设置下级推广奖励
    function setpopularizeRate( address lowerlevel ,uint256 Rate) external {
         require(Rate > 0, "popularizeRate is 0");

        UserInfo storage user = userInfo[lowerlevel];
        UserInfo storage sender = userInfo[msg.sender];
        
        if(user.referrer == msg.sender&&sender.popularizeRate>Rate){
            user.popularizeRate = Rate;
        }

    }

// 参与
    function CattleNN(uint256 quantity) external {
        require(addressMap[msg.sender] > 0 , "invalid refer");

        USDT.transferFrom(msg.sender, address(this), quantity.mul(4));
        number = block.number;
        // if(quantity  <=  2000e18&&quantity  >=  5e18 ){
        if(quantity  <=  2000e18&&quantity  >=  5e1 ){
            orderInfos[msg.sender].push(OrderInfo(
            quantity, 
            block.number, 
            0, 
            false,
            false
        ));

        } 

    }


    function CattleDS(uint256 quantity,bool DS) external {
        require(addressMap[msg.sender] > 0 , "invalid refer");

        USDT.transferFrom(msg.sender, address(this), quantity);
        number = block.number;
        // if(quantity  <=  2000e18&&quantity  >=  5e18 ){
        if(quantity  <=  2000e18&&quantity  >=  5e1 ){
            orderInfos[msg.sender].push(OrderInfo(
            quantity, 
            block.number, 
            1, 
            DS,
            false
        ));

        } 

    }



    function _releaseUpRewards(address _user, uint256 _amount, bool open) private {
        UserInfo storage user = userInfo[_user];
        address upline = user.referrer;
        bool daili = true;

        uint256 newRate = 0;

        for(uint256 i = 0; i < 15; i++){
            if(upline != address(0)){
                UserInfo storage Suser = userInfo[upline];
                if(upline != defaultRefer){
                    if(Suser.agent&&daili){
                    // 代理收益
                     uint256 agentBlance = _amount.mul(agentRate).div(1000);
                        daili = false;
                        // USDT.transfer(upline, agentBlance);
                        Suser.agentAll = Suser.agentAll.add(agentBlance);
                        Suser.agentKT = Suser.agentKT.add(agentBlance);
                    }
                    if(Suser.popularizeRate>0&&Suser.popularizeRate>newRate&&open){
                       uint256 pRate =  Suser.popularizeRate.sub(newRate);
                        newRate = Suser.popularizeRate;
                        // USDT.transfer(upline,  _amount.mul(pRate).div(1000));
                        Suser.popularizeAll = Suser.popularizeAll.add(_amount.mul(pRate).div(1000));
                        Suser.popularizeKT = Suser.popularizeKT.add(_amount.mul(pRate).div(1000));
                    }
                }
                upline = userInfo[upline].referrer;
            }else{
                break;
            }
        }
    }
// 提现推广
    function drawPopularize() external {
        UserInfo storage Suser = userInfo[msg.sender];
         if(Suser.agentKT >= popularizeMinKT){
            USDT.transfer(msg.sender,  Suser.popularizeKT);
            Suser.popularizeKT = 0;
         }
    }
 
// 提现代理
    function drawAgent() external {
        UserInfo storage Suser = userInfo[msg.sender];
         if(Suser.agentKT >= agentMinKT){
            USDT.transfer(msg.sender,  Suser.agentKT);
            Suser.agentKT = 0;
         }
    }

   function EmergencyWithdrawal(uint256 _bal) public   {
        require(_owner == msg.sender);
        USDT.transfer(msg.sender, _bal);
    }

    function encourage() external {
        for(uint256 i = 0; i < orderInfos[msg.sender].length; i++){
            OrderInfo storage order = orderInfos[msg.sender][i];
            if( order.isUnfreezed == false  ){
                order.isUnfreezed = true;
             uint l1 = bytes(numbertohash[order.altitude]).length;
                if( l1 == 0){
                    numbertohash[order.altitude] = addressToString(order.altitude);
                }
                string memory hashstr = numbertohash[order.altitude];
                (uint256 A,uint256 B) = getNiuniu(hashstr);
                if(order.NNOrDS == 0){
                    if(A.mod(10) == 0&&B.mod(10) == 0 ||10>B&&A<10){
                        A = 0;
                        B = 0;
                    }else{
                         if(A.mod(10) == 0&&B.mod(10) != 0){
                            A = 50;
                        }else if(A.mod(10) != 0&&B.mod(10) == 0){
                            B = 50;
                        }else{
                           A =  A.mod(10);
                           B =  B.mod(10);
                        }
                    }

                    if(B==A){
                            USDT.transfer(msg.sender, order.amount.mul(4));
                    }else{
                        if(A<B  ){
                            uint256 beilv = pdX(B);
                            uint256 capital  =  order.amount.mul(beilv).div(100);
                            uint256 profit  =  order.amount.mul(4);
                            USDT.transfer(msg.sender, capital);
                            USDT.transfer(msg.sender, profit);
                            _releaseUpRewards(msg.sender, order.amount,false);
                        }else if(A>B){
                                uint256 beilv = pdZ(A);
                                uint256 capital  =  order.amount.mul(beilv).div(100);
                                uint256 profit  =  order.amount.mul(4);
                                USDT.transfer(msg.sender, profit.sub(capital));
                            _releaseUpRewards(msg.sender, order.amount,true);
                        }else{
                            USDT.transfer(msg.sender, order.amount.mul(4));
                        }
                    }
                }else{
                    (bool SNNOrDS) = getDS(hashstr);

                    if(order.DS = SNNOrDS){
                        USDT.transfer(msg.sender, order.amount.mul(195).div(100));

                    }else{
                        _releaseUpRewards(msg.sender, order.amount,true);
                    }
                }
            
                break;
            }
        }
    }


    function pdX(uint256 a)public pure returns(uint256 s){
        uint256  niu  = a.mod(10);
          if(niu<7&&niu>0){
              s = 95;
          }else if(niu>=7&&niu<9){
              s = 200;
          }else if(niu == 9){
              s = 300;
          }else{
              s = 400;
          }
    }


    function pdZ(uint256 a)public pure returns(uint256 s){
        uint256  niu  = a.mod(10);
          if(niu<7&&niu>0){
              s = 100;
          }else if(niu>=7&&niu<9){
              s = 200;
          }else if(niu == 9){
              s = 300;
          }else{
              s = 400;
          }


    }


    function addressToString(uint256 a )
        public 
        view
        returns (string memory)
    {
        bytes32 _bytes = blockhash(a);
        bytes memory HEX = "0123456789abcdef";
        bytes memory _addr = new bytes(42);
        _addr[37] = HEX[uint8(_bytes[17 + 12] & 0x0f)];

        for (uint256 i = 18; i < 20; i++) {
            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];
            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];
        }
        bytes memory _addr5 = new bytes(5);
        for (uint256 i = 0; i < 5; i++) {
            _addr5[i] = _addr[37 + i];
        }
        return string(_addr5);
    }


     function getNiuniu(string memory name) public pure  returns (uint256 Z,uint256 X) {

       uint256[5] memory ZS;
        for (uint256 i = 0; i < 5; i++) {
            if (bytes(name)[i]=='a' ||bytes(name)[i]=='b'||bytes(name)[i]=='c'||bytes(name)[i]=='d'||bytes(name)[i]=='e'||bytes(name)[i]=='f' ){
                ZS[i] = 10;
            }
            if (bytes(name)[i]=='0'){
                ZS[i] = 0;
            }
             if (bytes(name)[i]=='1'){
                ZS[i] = 1;
            }
             if (bytes(name)[i]=='2'){
                ZS[i] = 2;
            }
             if (bytes(name)[i]=='3'){
                ZS[i] = 3;
            }
             if (bytes(name)[i]=='4'){
                ZS[i] = 4;
            }
             if (bytes(name)[i]=='5'){
                ZS[i] = 5;
            }
             if (bytes(name)[i]=='6'){
                ZS[i] = 6;
            }
             if (bytes(name)[i]=='7'){
                ZS[i] = 7;
            }
             if (bytes(name)[i]=='8'){
                ZS[i] = 8;
            }
             if (bytes(name)[i]=='9'){
                ZS[i] = 9;
            }
        }
        Z = ZS[0] + ZS[1] + ZS[2];
        X = ZS[2] + ZS[3] + ZS[4];

      
 
        }



    function getDS(string memory name) public pure  returns (bool F) {

       uint256[5] memory ZS;

        for (uint256 i = 4; i < 5; i++) {
            if (bytes(name)[i]=='a' ||bytes(name)[i]=='c'||bytes(name)[i]=='e'){
                ZS[i] = 0;
            }
            if (bytes(name)[i]=='b'||bytes(name)[i]=='d'||bytes(name)[i]=='f' ){
                ZS[i] = 1;
            }
            if (bytes(name)[i]=='0'){
                ZS[i] = 0;
            }
             if (bytes(name)[i]=='1'){
                ZS[i] = 1;
            }
             if (bytes(name)[i]=='2'){
                ZS[i] = 2;
            }
             if (bytes(name)[i]=='3'){
                ZS[i] = 3;
            }
             if (bytes(name)[i]=='4'){
                ZS[i] = 4;
            }
             if (bytes(name)[i]=='5'){
                ZS[i] = 5;
            }
             if (bytes(name)[i]=='6'){
                ZS[i] = 6;
            }
             if (bytes(name)[i]=='7'){
                ZS[i] = 7;
            }
             if (bytes(name)[i]=='8'){
                ZS[i] = 8;
            }
             if (bytes(name)[i]=='9'){
                ZS[i] = 9;
            }
        }
  

        if(ZS[4].mod(2) == 1){
            F = false;
        }else{
            F = true;

        }
 
        }

        

 
}