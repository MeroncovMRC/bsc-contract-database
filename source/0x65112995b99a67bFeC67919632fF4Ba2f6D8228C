{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set \u0026 change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}"},"ReentrantGuard.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"XUSDEARN.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./ReentrantGuard.sol\";\r\n\r\ncontract XUSDEARN is Ownable, ReentrancyGuard, IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // lock time in blocks\r\n    uint256 public lockTime;\r\n\r\n    // fee for leaving staking early\r\n    uint256 public leaveEarlyFee;\r\n\r\n    // recipient of fee\r\n    address public feeRecipient;\r\n\r\n    // XUSD Token\r\n    address public constant token = 0x324E8E649A6A3dF817F97CdDBED2b746b62553dD;\r\n\r\n    // User Info\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 unlockBlock;\r\n        uint256 totalExcluded;\r\n        uint256 totalRewardsEarned;\r\n        address rewardToken;\r\n        address rewardTokenDEX;\r\n    }\r\n    // Address =\u003e UserInfo\r\n    mapping ( address =\u003e UserInfo ) public userInfo;\r\n\r\n    // Tracks Dividends\r\n    uint256 private totalShares;\r\n    uint256 private dividendsPerShare;\r\n    uint256 public totalRewards;\r\n    uint256 private constant precision = 10**18;\r\n\r\n    // Default Values\r\n    address private constant PCS  = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private constant WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    // Events\r\n    event SetLockTime(uint LockTime);\r\n    event SetEarlyFee(uint earlyFee);\r\n    event SetFeeRecipient(address FeeRecipient);\r\n\r\n    constructor(address feeRecipient_, uint256 lockTime_, uint256 leaveEarlyFee_){\r\n        require(\r\n            feeRecipient_ != address(0),\r\n            \u0027Zero Address\u0027\r\n        );\r\n        require(\r\n            lockTime_ \u003c= 10**7,\r\n            \u0027Lock Time Too Long\u0027\r\n        );\r\n        require(\r\n            leaveEarlyFee_ \u003c= 10,\r\n            \u0027Fee Too High\u0027\r\n        );\r\n        feeRecipient = feeRecipient_;\r\n        lockTime = lockTime_;\r\n        leaveEarlyFee = leaveEarlyFee_;\r\n        emit Transfer(address(0), msg.sender, 0);\r\n    }\r\n\r\n    /** Returns the total number of tokens in existence */\r\n    function totalSupply() external view override returns (uint256) { \r\n        return totalShares; \r\n    }\r\n\r\n    /** Returns the number of tokens owned by `account` */\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return userInfo[account].amount;\r\n    }\r\n\r\n    /** Returns the number of tokens `spender` can transfer from `holder` */\r\n    function allowance(address holder, address spender) external pure override returns (uint256) { \r\n        holder; spender;\r\n        return 0; \r\n    }\r\n    \r\n    /** Token Name */\r\n    function name() public pure override returns (string memory) {\r\n        return \"XUSD EARN\";\r\n    }\r\n\r\n    /** Token Ticker Symbol */\r\n    function symbol() public pure override returns (string memory) {\r\n        return \"XUSDE\";\r\n    }\r\n\r\n    /** Tokens decimals */\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /** Approves `spender` to transfer `amount` tokens from caller */\r\n    function approve(address spender, uint256) public override returns (bool) {\r\n        emit Approval(msg.sender, spender, 0);\r\n        return true;\r\n    }\r\n  \r\n    /** Transfer Function */\r\n    function transfer(address recipient, uint256) external override nonReentrant returns (bool) {\r\n        _claimReward(msg.sender);\r\n        emit Transfer(msg.sender, recipient, 0);\r\n        return true;\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transferFrom(address, address recipient, uint256) external override nonReentrant returns (bool) {\r\n        _claimReward(msg.sender);\r\n        emit Transfer(msg.sender, recipient, 0);\r\n        return true;\r\n    }\r\n\r\n    /** Sets The Lock Time For The Pool, If Withdrawn Before A LeaveEarlyFee Is Applied */\r\n    function setLockTime(uint256 newLockTime) external onlyOwner {\r\n        require(\r\n            newLockTime \u003c= 10**7,\r\n            \u0027Lock Time Too Long\u0027\r\n        );\r\n        lockTime = newLockTime;\r\n        emit SetLockTime(newLockTime);\r\n    }\r\n\r\n    /** Updates The Leave Early Fee For Unstaking Before LockTime Expires */\r\n    function setLeaveEarlyFee(uint256 newEarlyFee) external onlyOwner {\r\n        require(\r\n            newEarlyFee \u003c= 10,\r\n            \u0027Fee Too High\u0027\r\n        );\r\n        leaveEarlyFee = newEarlyFee;\r\n        emit SetEarlyFee(newEarlyFee);\r\n    }\r\n\r\n    /** Sets The Recipient Of The Fees Taken From Early Withdrawers */\r\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\r\n        require(\r\n            newFeeRecipient != address(0),\r\n            \u0027Zero Address\u0027\r\n        );\r\n        feeRecipient = newFeeRecipient;\r\n        emit SetFeeRecipient(newFeeRecipient);\r\n    }\r\n\r\n    /** Withdraws Incorrectly Sent Tokens To The Sender */\r\n    function withdraw(IERC20 token_, address to_) external onlyOwner {\r\n        require(\r\n            token != address(token_),\r\n            \u0027Cannot Withdraw Staked Token\u0027\r\n        );\r\n        require(\r\n            token_.transfer(\r\n                to_,\r\n                token_.balanceOf(address(this))\r\n            ),\r\n            \u0027Failure On Token Withdraw\u0027\r\n        );\r\n    }\r\n\r\n    /** Donates BNB To The Pool To be Given As Rewards */\r\n    function donate() external payable nonReentrant {\r\n        require(msg.value \u003e 0, \u0027Zero Value\u0027);\r\n        _donate(msg.value);\r\n    }\r\n\r\n    /** Sets The Reward Token And DEX For A Holder */\r\n    function setRewardToken(IERC20 token_, IUniswapV2Router02 DEX_) external nonReentrant {\r\n        require(\r\n            userInfo[msg.sender].amount \u003e 0,\r\n            \u0027Zero Amount\u0027\r\n        );\r\n        require(\r\n            address(token_) != address(0) \u0026\u0026\r\n            address(DEX_) != address(0),\r\n            \u0027Zero Address\u0027\r\n        );\r\n        userInfo[msg.sender].rewardToken = address(token_);\r\n        userInfo[msg.sender].rewardTokenDEX = address(DEX_);\r\n    }\r\n\r\n    /** Claims Pending Rewards In Specified Token For Sender */\r\n    function claimRewards() external nonReentrant {\r\n        _claimReward(msg.sender);\r\n    }\r\n\r\n    /** Withdraws `amount` of XUSD For Sender */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            amount \u003c= userInfo[msg.sender].amount,\r\n            \u0027Insufficient Amount\u0027\r\n        );\r\n        require(\r\n            amount \u003e 0,\r\n            \u0027Zero Amount\u0027\r\n        );\r\n        if (userInfo[msg.sender].amount \u003e 0) {\r\n            _claimReward(msg.sender);\r\n        }\r\n\r\n        totalShares = totalShares.sub(amount);\r\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount.sub(amount);\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n\r\n        uint fee = timeUntilUnlock(msg.sender) == 0 ? 0 : ( amount * leaveEarlyFee ) / 100;\r\n        if (fee \u003e 0) {\r\n            require(\r\n                IERC20(token).transfer(feeRecipient, fee),\r\n                \u0027Failure On Token Transfer\u0027\r\n            );\r\n        }\r\n\r\n        uint sendAmount = amount - fee;\r\n        require(\r\n            IERC20(token).transfer(msg.sender, sendAmount),\r\n            \u0027Failure On Token Transfer To Sender\u0027\r\n        );\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    /** \r\n        Stakes `amount` of XUSD into pool for sender\r\n        Pool must have allowance of at least `amount` of XUSD Before stake() is called\r\n    */\r\n    function stake(uint256 amount) external nonReentrant {\r\n        if (userInfo[msg.sender].amount \u003e 0) {\r\n            _claimReward(msg.sender);\r\n        }\r\n\r\n        // transfer in tokens\r\n        uint received = _transferIn(token, amount);\r\n        \r\n        // update data\r\n        totalShares += received;\r\n        userInfo[msg.sender].amount += received;\r\n        userInfo[msg.sender].unlockBlock = block.number + lockTime;\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n        emit Transfer(address(0), msg.sender, received);\r\n    }\r\n\r\n    /** Internal Function To Claim `user`s Rewards */\r\n    function _claimReward(address user) internal {\r\n\r\n        // exit if zero value locked\r\n        if (userInfo[user].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // fetch pending rewards\r\n        uint256 amount = pendingRewards(user);\r\n        \r\n        // exit if zero rewards\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // update total excluded\r\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\r\n\r\n        // transfer reward to user\r\n        _giveRewardTo(user, amount);\r\n    }\r\n\r\n    /** Instantiates User Reward DEX And Buys Reward Token With Pending BNB */\r\n    function _giveRewardTo(address user, uint256 amount) internal {\r\n\r\n        // fetch reward information\r\n        address rToken = getRewardToken(user);\r\n        address dex = getRewardTokenDEX(user);\r\n\r\n        // increment total reward earned for user\r\n        userInfo[user].totalRewardsEarned += amount;\r\n\r\n        if (rToken == WETH) {\r\n            payable(user).transfer(amount);\r\n        } else {\r\n            // instantiate DEX\r\n            IUniswapV2Router02 router = IUniswapV2Router02(dex);\r\n\r\n            // create swap path\r\n            address[] memory path = new address[](2);\r\n            path[0] = WETH;\r\n            path[1] = rToken;\r\n\r\n            // make swap\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0, path, user, block.timestamp + 300);\r\n            delete path;\r\n        }\r\n    }\r\n    \r\n    /** Transfers In `amount` of `_token` from msg.sender */\r\n    function _transferIn(address _token, uint256 amount) internal returns (uint256) {\r\n        uint before = IERC20(_token).balanceOf(address(this));\r\n        bool s = IERC20(_token).transferFrom(msg.sender, address(this), amount);\r\n        uint received = IERC20(_token).balanceOf(address(this)) - before;\r\n        require(\r\n            s \u0026\u0026 received \u003e 0 \u0026\u0026 received \u003c= amount,\r\n            \u0027Error On Transfer From\u0027\r\n        );\r\n        return received;\r\n    }\r\n\r\n    /** Registers Increase In Global Rewards */\r\n    function _donate(uint256 amount) internal {\r\n        // Add To Rewards Tracking\r\n        dividendsPerShare = dividendsPerShare.add(precision.mul(amount).div(totalShares));\r\n        totalRewards += amount;\r\n    }\r\n\r\n    /** Time in blocks until User May withdraw tokens tax free */\r\n    function timeUntilUnlock(address user) public view returns (uint256) {\r\n        return userInfo[user].unlockBlock \u003c block.number ? 0 : userInfo[user].unlockBlock - block.number;\r\n    }\r\n\r\n    /** Pending Rewards In BNB For `shareholder` */\r\n    function pendingRewards(address shareholder) public view returns (uint256) {\r\n        if(userInfo[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(userInfo[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = userInfo[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends \u003c= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    /** Returns The Reward Token For `user` */\r\n    function getRewardToken(address user) public view returns (address) {\r\n        return userInfo[user].rewardToken == address(0) ? token : userInfo[user].rewardToken;\r\n    }\r\n\r\n    /** Returns The DEX To Buy The Reward Token For `user` */\r\n    function getRewardTokenDEX(address user) public view returns (address) {\r\n        return userInfo[user].rewardTokenDEX == address(0) ? PCS : userInfo[user].rewardTokenDEX;\r\n    }\r\n\r\n    /** Returns The Total Reward Variable For A User, This Is Subtracted From Their totalExcluded Value */\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(precision);\r\n    }\r\n\r\n    /** BNB Sent To Contract Is Registered As A Donation */\r\n    receive() external payable {\r\n        require(msg.value \u003e 0, \u0027Zero Value\u0027);\r\n        _donate(msg.value);\r\n    }\r\n}"}}