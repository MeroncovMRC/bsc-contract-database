// File: @openzeppelin/contracts@4.7.3/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts@4.7.3/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: BalancesChecker.sol


pragma solidity ^0.8.0;


interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function decimals() external view returns (uint8);
}

interface IRouter {
    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
    function WETH() external view returns (address);
}

contract BalanceChecker is Ownable {
    struct TokenInfo {
        string symbol;
        string name;
        uint8 decimals;
        uint256 balance;
        uint256 nativeTokenPricePerToken;
    }

    address[] public routerAddresses;
    address public priceTokenAddress;
    
    constructor(address[] memory _routerAddresses, address _priceTokenAddress) {
        routerAddresses = _routerAddresses;
        priceTokenAddress = _priceTokenAddress;
    }

    function getTokenInfo(address tokenAddress, address owner) internal view returns (TokenInfo memory) {
        TokenInfo memory tokenInfo = TokenInfo({
            symbol: "",
            name: "",
            decimals: 18,
            balance: 0,
            nativeTokenPricePerToken: 0
        });
        IERC20 token = IERC20(tokenAddress);
        for (uint256 i = 0; i < routerAddresses.length; i++) {
            IRouter router = IRouter(routerAddresses[i]);
            try token.balanceOf(owner) returns (uint256 balance) {
                address[] memory path = getPath(router, tokenAddress);
                uint256[] memory amounts = router.getAmountsOut(10 ** token.decimals(), path);
                tokenInfo = TokenInfo({
                    symbol: token.symbol(),
                    name: token.name(),
                    decimals: token.decimals(),
                    balance: balance,
                    nativeTokenPricePerToken: amounts[amounts.length - 1]
                });
                break;
            } catch {}
        }
        return tokenInfo;
    }

    function getBalances(address owner, address[] calldata addresses) external view returns (TokenInfo[] memory) {
        TokenInfo[] memory tokenInfos = new TokenInfo[](addresses.length);
        for (uint256 index = 0; index < addresses.length; index++) {
            tokenInfos[index] = getTokenInfo(addresses[index], owner);
        }
        return tokenInfos;
    }

    function getPath(IRouter router, address tokenAddress) internal view returns (address[] memory) {
        address[] memory path = new address[](2);
        path[0] = tokenAddress;
        path[1] = priceTokenAddress;
        try router.getAmountsOut(1, path) {
            return path;
        } catch {
            path[1] = address(0);
            return path;
        }
    }

    function setRouterAddresses(address[] memory _routerAddresses) external onlyOwner {
        routerAddresses = _routerAddresses;
    }

    function setPriceTokenAddress(address _priceTokenAddress) external onlyOwner {
        priceTokenAddress = _priceTokenAddress;
    }
}