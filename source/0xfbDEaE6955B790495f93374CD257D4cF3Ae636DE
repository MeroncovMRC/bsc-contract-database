// SPDX-License-Identifier: MIT
pragma solidity 0.8.1;




interface IPancakeRouter {

    function factory() external pure returns (address);
    function WETH() external pure returns (address);

     function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

         function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
        
        }



interface ChiToken {
    function freeFromUpTo(address from, uint256 value) external;
}






contract PancakeSwapExample {

    IPancakeRouter public pancakeRouter =IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    ChiToken constant public chi = ChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);
    address payable public  owner  = payable (0xe4105981D6807291421B25032D1Ac9F140994E81);
    address constant public multiDaiKovan = 0xC7a838C73B019edb0000401c1e9398A76910f0F5;
        


  modifier discountCHI {
    uint256 gasStart = gasleft();

    _;

    uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;
    chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);
  }
  
  function convertEthToDai() external payable {
    _convertEthToMeme();
  }

  function convertEthToMemeWithGasRefund() external payable discountCHI {
    _convertEthToMeme();
  }
  
  function getEstimatedETHforMeme(uint memeAmount) external view returns (uint256[] memory) {
    return pancakeRouter.getAmountsIn(memeAmount, _getPathForETHtoMeme());
  }

  function _getPathForETHtoMeme() private view returns (address[] memory) {
    address[] memory path = new address[](2);
    path[0] = pancakeRouter.WETH();
    path[1] = multiDaiKovan;
    
    return path;
  }
  
  function _convertEthToMeme() private {
    // using 'now' for convenience in Remix, for mainnet pass deadline from frontend!
    uint deadline = block.timestamp + 15;

    pancakeRouter.swapExactTokensForTokens (0.001 ether,0,_getPathForETHtoMeme(),address(this),deadline );
    
    // refund leftover ETH to user
    (bool success,) = msg.sender.call{ value: address(this).balance }("");
    require(success, "refund failed");
  }
  
  
    function withDraw() external   {

        require(msg.sender==owner,"not owner");
        owner.transfer(address(this).balance);

    }

  // important to receive ETH
  receive() payable external {}


}