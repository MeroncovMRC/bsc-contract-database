
// File: LockedEPX.sol
pragma solidity 0.8.12;

import "Ownable.sol";
import "IERC20.sol";
import "IBondedFeeDistributor.sol";
import "IEpsProxy.sol";
import "ITokenLocker.sol";


contract LockedEPX is IERC20, Ownable {

    string public constant symbol = "dEPX";
    string public constant name = "DotDot Tokenized EPX Lock";
    uint8 public constant decimals = 18;
    uint256 public override totalSupply;

    mapping(address => uint256) public override balanceOf;
    mapping(address => mapping(address => uint256)) public override allowance;
    mapping(address => bool) public blockThirdPartyActions;

    IERC20 public immutable EPX;
    ITokenLocker public immutable epsLocker;

    IBondedFeeDistributor public bondedDistributor;
    IEllipsisProxy public proxy;

    uint256 constant WEEK = 604800;
    uint256 immutable MAX_LOCK_WEEKS;
    uint256 lastLockWeek;

    event Deposit(address indexed caller, address indexed receiver, uint256 amount, bool bond);
    event ExtendLocks(uint256 lastLockWeek);

    constructor(
        IERC20 _EPX,
        ITokenLocker _epsLocker
    ) {
        EPX = _EPX;

        epsLocker = _epsLocker;
        MAX_LOCK_WEEKS = _epsLocker.MAX_LOCK_WEEKS();
        lastLockWeek = block.timestamp / WEEK;
        emit Transfer(address(0), msg.sender, 0);
    }

    function setAddresses(
        IBondedFeeDistributor _bondedDistributor,
        IEllipsisProxy _proxy
    ) external onlyOwner {
        bondedDistributor = _bondedDistributor;
        proxy = _proxy;

        renounceOwnership();
    }

    function setBlockThirdPartyActions(bool _block) external {
        blockThirdPartyActions[msg.sender] = _block;
    }

    function approve(address _spender, uint256 _value) external override returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    /** shared logic for transfer and transferFrom */
    function _transfer(address _from, address _to, uint256 _value) internal {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
    }

    /**
        @notice Transfer tokens to a specified address
        @param _to The address to transfer to
        @param _value The amount to be transferred
        @return bool Success
     */
    function transfer(address _to, uint256 _value) public override returns (bool) {
        _transfer(msg.sender, _to, _value);
        return true;
    }

    /**
        @notice Transfer tokens from one address to another
        @param _from The address which you want to send tokens from
        @param _to The address which you want to transfer to
        @param _value The amount of tokens to be transferred
        @return bool Success
     */
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    )
        public
        override
        returns (bool)
    {
        uint256 allowed = allowance[_from][msg.sender];
        require(allowed >= _value, "Insufficient allowance");
        if (allowed != type(uint256).max) {
            allowance[_from][msg.sender] = allowed - _value;
        }
        _transfer(_from, _to, _value);
        return true;
    }

    /**
        @notice Lock EPX and receive dEPX
        @param _receiver Address to receive the minted dEPX
        @param _amount Amount of EPX to lock. The balance is transferred from the caller.
        @param _bond If true, minted dEPX is immediately deposited in `BondedFeeDistributor`
        @return bool Success
     */
    function deposit(address _receiver, uint256 _amount, bool _bond) external returns (bool) {
        if (msg.sender != _receiver) {
            require(!blockThirdPartyActions[_receiver], "Cannot deposit on behalf of this account");
        }
        extendLock();
        EPX.transferFrom(msg.sender, address(proxy), _amount);
        proxy.lock(_amount);
        totalSupply += _amount;
        if (_bond) {
            balanceOf[address(bondedDistributor)] += _amount;
            emit Transfer(address(0), address(bondedDistributor), _amount);
            bondedDistributor.deposit(_receiver, _amount);
        } else {
            balanceOf[_receiver] += _amount;
            emit Transfer(address(0), _receiver, _amount);
        }
        emit Deposit(msg.sender, _receiver, _amount, _bond);
        return true;
    }

    /**
        @notice Extend all dEPX locks to the maximum lock weeks
        @dev This function is called once per week by `deposit`, which in turn is called
             daily by `LpDepositor`. With normal protocol usage there should never be a
             requirement to manually extend locks.
     */
    function extendLock() public returns (bool) {
        if (lastLockWeek < block.timestamp / WEEK) {
            uint256[2][] memory locks = epsLocker.getActiveUserLocks(address(proxy));
            for (uint i = 0; i < locks.length; i++) {
                (uint256 week, uint256 amount) = (locks[i][0], locks[i][1]);
                if (week < MAX_LOCK_WEEKS) proxy.extendLock(amount, week);
            }
            lastLockWeek = block.timestamp / WEEK;
            emit ExtendLocks(block.timestamp / WEEK);
        }
        return true;
    }

}


// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(msg.sender);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.12;

/**
 * Based on the OpenZeppelin IER20 interface:
 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol
 *
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: IBondedFeeDistributor.sol
pragma solidity 0.8.12;

interface IBondedFeeDistributor {
    function notifyFeeAmounts(uint256 _epxAmount, uint256 _dddAmount) external returns (bool);
    function deposit(address _user, uint256 _amount) external returns (bool);
}

// File: IEpsProxy.sol
pragma solidity 0.8.12;

interface IEllipsisProxy {
    function lock(uint256 _amount) external returns (bool);
    function extendLock(uint256 _amount, uint256 _weeks) external returns (bool);
    function deposit(address _token, uint256 _amount) external returns (uint256);
    function withdraw(address _receiver, address _token, uint256 _amount) external returns (uint256);
    function claimEmissions(address _token) external returns (uint256);
    function claimFees(address[] calldata _tokens) external returns (bool);
    function vote(address[] calldata _tokens, uint256[] calldata _votes) external returns (bool);
    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);
    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external returns (bool);
    function getReward(address _lpToken, address[] calldata _rewards) external returns (bool);
}

// File: ITokenLocker.sol
pragma solidity 0.8.12;


interface ITokenLocker {

    function MAX_LOCK_WEEKS() external view returns (uint256);
    function getWeek() external view returns (uint256);
    function userWeight(address _user) external view returns (uint256);
    function totalWeight() external view returns (uint256);
    function weeklyWeight(address _user, uint256 _week) external view returns (uint256, uint256);
    function startTime() external view returns (uint256);
    function weeklyTotalWeight(uint256 week) external view returns (uint256);
    function weeklyWeightOf(address user, uint256 week) external view returns (uint256);

    /**
        @notice Get data on a user's active token locks
        @param _user Address to query data for
        @return lockData dynamic array of [weeks until expiration, balance of lock]
     */
    function getActiveUserLocks(address _user) external view returns (uint256[2][] memory lockData);

    /**
        @notice Allow or block third-party calls to deposit, withdraw
                or claim rewards on behalf of the caller
     */
    function setBlockThirdPartyActions(bool _block) external;

    /**
        @notice Deposit tokens into the contract to create a new lock.
        @param _user Address to create a new lock for (does not have to be the caller)
        @param _amount Amount of tokens to lock. This balance transfered from the caller.
        @param _weeks The number of weeks for the lock.
     */
    function lock(
        address _user,
        uint256 _amount,
        uint256 _weeks
    ) external returns (bool);

    /**
        @notice Extend the length of an existing lock.
        @param _amount Amount of tokens to extend the lock for.
        @param _weeks The number of weeks for the lock that is being extended.
        @param _newWeeks The number of weeks to extend the lock until.
     */
    function extendLock(
        uint256 _amount,
        uint256 _weeks,
        uint256 _newWeeks
    ) external returns (bool);

}

