pragma solidity ^0.5.8;

interface IOracle {
    function factory() external view returns (address);
    function anchorToken() external view returns (address);
    function getCurrentPrice(address token) external view returns (uint256 price);
}

pragma solidity >=0.5.0;

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}


pragma solidity ^0.5.8;
interface IERC20p {
    function decimals() external view returns (uint8);
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
    external
    returns (bool);

    function allowance(address owner, address spender)
    external
    view
    returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Context {
    constructor() internal {}

    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint public maxSupply = 9999 * 1e18;

    mapping(address => bool) public _isAirdrop;
    mapping(address => uint256) public _airdropList;

    mapping(address => address) public _inviters;

    address constant public REWARD_WALLET = address(0xE7FEEa61020deB92De3b75FeaDdA8ea928225fAD);
    address constant public MARKETING_WALLET = address(0x60bAbA0Cd7d7bc1335D60fda27dCC24A592D7613);
    address constant public BLACK_HOLE = address(0x000000000000000000000000000000000000dEaD);
    IOracle public _oracle;
    address public USDT;

    uint256 constant public MAX_HOLD = 9 * 1e18;
    uint256 constant public MAX_EXCHANGE = 3 * 1e18;
    uint256 public TAX = 0;
    uint256 public ONE_THOUSAND_DOLLARS = 0;

    mapping(address => bool) public _whiteList;

    bool public _stopSelling;
    bool public _isStartExchange;
    uint256 public _tickerOpen;
    uint256 public _lastUpdateTime;

    constructor() public {
        _stopSelling = false;
    }

    function _updateStopSelling(bool _bool) internal {
        _stopSelling = _bool;
    }

    function _updateTickerOpen() internal {
        if (block.timestamp.sub(_lastUpdateTime) >= 24 hours) {
            _isStartExchange = true;
            _tickerOpen = tokenUsdtCurPrice();
            _lastUpdateTime = block.timestamp;
        }
    }

    function tokenUsdtCurPrice() public view returns (uint256) {
        return _oracle.getCurrentPrice(address(this));
    }

    function _setOracle(address _o, address _u) internal {
        _oracle = IOracle(_o);
        USDT = _u;
        ONE_THOUSAND_DOLLARS = 1000 * (10 ** uint256(IERC20p(USDT).decimals()));
    }

    function getPair() public view returns (address) {
        return IPancakeFactory(_oracle.factory()).getPair(address(this), USDT);
    }

    function _updateWhiteList(address _addr, bool _bool) internal {
        _whiteList[_addr] = _bool;
    }

    function _airdrop(address _from, address _to, uint256 _amount) internal returns (bool){
        require(!_isAirdrop[_to], "already airdrop");
        _airdropList[_to] = _amount;

        if (_inviters[_to] == address(0)) {
            _inviters[_to] = _from;
        }
        _isAirdrop[_to] = true;
        return true;
    }

    function _setTAX(uint256 _tax) internal {
        TAX = _tax;
    }

    function _resetTAX() internal {
        TAX = 0;
    }

    function _getTAXAmount(uint256 _amount) internal view returns (uint256) {
        return _amount.mul(TAX).div(100);
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
    public
    view
    returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
    public
    returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
    public
    returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );

        if (!_whiteList[sender] && !_whiteList[recipient]) {
            require(_isStartExchange, "ERC20: exchange not start");

            //max hold 9 AR
            if (recipient != getPair()) {
                require(
                    _balances[recipient].add(amount) <= MAX_HOLD,
                    "ERC20: balance must less or equal than 9 VR"
                );
            }

            //swap or add liquidity
            if (sender == getPair() || recipient == getPair()) {
                require(
                    amount <= MAX_EXCHANGE,
                    "ERC20: transfer amount must less or equal than 3 VR"
                );


                uint256 subAmount = 0;

                //inviter 5
                _setTAX(5);
                uint256 toInviter = _getTAXAmount(amount);
                subAmount = subAmount.add(toInviter);
                address inviter = address(0);

                //sell
                if (recipient == getPair()) {
                    inviter = _inviters[sender];

                    if ((tokenUsdtCurPrice() >= _tickerOpen && _stopSelling)
                        || tokenUsdtCurPrice() >= ONE_THOUSAND_DOLLARS) {
                        _updateStopSelling(false);
                    }
                    if (tokenUsdtCurPrice() < ONE_THOUSAND_DOLLARS) {
                        require(!_stopSelling, "price has fallen by 50%");
                        if (tokenUsdtCurPrice().div(_tickerOpen).mul(100) <= 50) {
                            _updateStopSelling(true);
                        }
                    }
                }

                //buy
                if (sender == getPair()) {
                    inviter = _inviters[recipient];

                    //unfreeze airdrop
                    if (_airdropList[recipient] > 0) {
                        uint256 unfreezeAmount = amount.mul(3).div(100);
                        if (_airdropList[recipient] >= unfreezeAmount) {
                            _airdropList[recipient] = _airdropList[recipient].sub(unfreezeAmount);
                        } else {
                            unfreezeAmount = _airdropList[recipient];
                            _airdropList[recipient] = 0;
                        }
                        _mint(recipient, unfreezeAmount);
                    }
                }

                //refferr
                uint256 inviterBurnAmount = _getTAXAmount(amount);
                if (inviter != address(0)) {
                    uint256 toLevelOne = toInviter.mul(60).div(100);
                    _balances[inviter] = _balances[inviter].add(toLevelOne);
                    inviterBurnAmount = inviterBurnAmount.sub(toLevelOne);

                    inviter = _inviters[inviter];
                    if (inviter != address(0)) {
                        uint256 toLevelTwo = toInviter.mul(40).div(100);
                        _balances[inviter] = _balances[inviter].add(toLevelTwo);
                        inviterBurnAmount = inviterBurnAmount.sub(toLevelTwo);
                    }
                }
                if (inviterBurnAmount > 0) {
//                    _burn(sender, inviterBurnAmount);
                    _balances[BLACK_HOLE] = _balances[BLACK_HOLE].add(inviterBurnAmount);
                }


                //burn
                _setTAX(1);
                subAmount = subAmount.add(_getTAXAmount(amount));
//                _burn(sender, _getTAXAmount(amount));
                _balances[BLACK_HOLE] = _balances[BLACK_HOLE].add(_getTAXAmount(amount));

                //to pair
                _setTAX(2);
                subAmount = subAmount.add(_getTAXAmount(amount));
                _balances[getPair()] = _balances[getPair()].add(_getTAXAmount(amount));

                //to reward wallet
                _setTAX(1);
                subAmount = subAmount.add(_getTAXAmount(amount));
                _balances[REWARD_WALLET] = _balances[REWARD_WALLET].add(_getTAXAmount(amount));

                //to marketing wallet
                _setTAX(2);
                subAmount = subAmount.add(_getTAXAmount(amount));
                _balances[MARKETING_WALLET] = _balances[MARKETING_WALLET].add(_getTAXAmount(amount));


                _resetTAX();
                _balances[recipient] = _balances[recipient].add(amount.sub(subAmount));
                emit Transfer(sender, recipient, amount);
                return;
            }

            // direct transfer
            if (_inviters[recipient] == address(0) && !sender.isContract()) {
                _inviters[recipient] = sender;
            }
            if (getPair() != address(0)) {
                uint256 toPair = amount.mul(5).div(100);
                amount = amount.sub(toPair);
                _balances[getPair()] = _balances[getPair()].add(toPair);
            }

        }

        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        require(_totalSupply.add(amount) <= maxSupply, "ERC20: cannot mint over max supply");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals
    ) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;

        bytes32 accountHash
        = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(
                abi.decode(returndata, (bool)),
                "SafeERC20: ERC20 operation did not succeed"
            );
        }
    }
}

contract VRToken is ERC20, ERC20Detailed {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    address public governance;
    address public _airdropOwner;

    uint256 public _restSupply = 9999 * 1e18;

    constructor(
        address _owner, address _oracle, address _usdt
    ) public ERC20Detailed("VR", "VR", 18) {
        governance = msg.sender;
        _airdropOwner = _owner;

        uint256 forGov = _restSupply.mul(80).div(100);
        _mint(msg.sender, forGov);
        _restSupply = _restSupply.sub(forGov);

        _setOracle(_oracle, _usdt);

        _updateWhiteList(_owner, true);
        _updateWhiteList(msg.sender, true);
    }

    function updateTicker() public {
        require(msg.sender == governance, "access denied");
        _updateTickerOpen();
    }

    function updateStopSelling(bool _bool) public {
        require(msg.sender == governance, "access denied");
        _updateStopSelling(_bool);
    }

    function airdrop(address _to, uint256 _amount) public {
        require(msg.sender == _airdropOwner, "access denied");
        _airdrop(_airdropOwner, _to, _amount);

        _restSupply = _restSupply.sub(_amount);
    }

    function setOracle(address _o, address _u) public {
        require(msg.sender == governance, "access denied");
        _setOracle(_o, _u);
    }

    function setWhiteList(address _addr, bool _bool) public {
        require(msg.sender == governance, "access denied");
        _updateWhiteList(_addr, _bool);
    }

    function setGovernance(address _governance) public {
        require(msg.sender == governance, "!governance");
        governance = _governance;
    }
}