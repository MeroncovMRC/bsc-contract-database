// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// File: contracts/Lottery.sol


pragma solidity ^0.8.0;


// Made with ❤ by the RobotGPT Team

contract Lottery is Ownable{
    
    uint256 public ticketPrice = 100;
    uint256 public constant firstPlacePercent = 50;
    uint256 public constant secondPlacePercent = 20;
    uint256 public constant thirdPlacePercent = 10;
    uint256 public constant rgptHoldersPercent = 10;
    uint256 public constant liquidityPercent = 5;
    uint256 public constant autoBurnPercent = 5;
    uint256 public constant minParticipants = 3;
    
    address[] public participants;
    uint256 public poolBalance = 0;
    address public rgptTokenAddress =  0xE7916aCC470b5C4EF4Ba7944e79f9651CACf22B1; // Replace with actual RGPT token contract address
    address public liquidityPoolAddress = 0x8Fb70237C296F9204e0325d81FA4fdEFCB7499e7; // Replace with actual liquidity pool address
    
    IERC20 public token;
    uint256 public lotteryEndTime; // Timestamp when the current lottery ends
    
    mapping(address => uint256) public ticketBalances; // Track the number of tickets each participant holds
    
    

    constructor() {
        token =IERC20(rgptTokenAddress);
    }
    
    function startLottery() external onlyOwner {
        require(participants.length == 0, "Lottery is already running");
        
        lotteryEndTime = getEndOfDayTimestamp() + 14 hours; // Set lottery end time to next day at 14:00 UTC
    }
    
    function buyTickets(uint256 numTickets) external {
        require(lotteryEndTime > 0, "Lottery has not started yet");
        require(block.timestamp < lotteryEndTime, "Lottery has ended");
        require(numTickets > 0, "Number of tickets must be greater than zero");
        require(token.balanceOf(msg.sender) >= ticketPrice * numTickets, "Insufficient RGPT token balance");

        for (uint256 i = 0; i < numTickets; i++) {
            participants.push(msg.sender);
        }

        uint256 totalPrice = ticketPrice * numTickets;
        require(token.transferFrom(msg.sender, address(this), totalPrice), "Failed to transfer RGPT tokens");

        poolBalance += totalPrice;
        ticketBalances[msg.sender] += numTickets;
    }
    
    function selectWinner() external onlyOwner {
        require(participants.length >= minParticipants, "Not enough participants in the lottery");
        require(block.timestamp >= lotteryEndTime, "Lottery has not ended yet");
        //calculate the Values for all variables
        uint256 firstPlaceAmount = (poolBalance * firstPlacePercent) / 100;
        uint256 secondPlaceAmount = (poolBalance * secondPlacePercent) / 100;
        uint256 thirdPlaceAmount = (poolBalance * thirdPlacePercent) / 100;
        uint256 rgptHoldersAmount = (poolBalance * rgptHoldersPercent) / 100;
        uint256 liquidityAmount = (poolBalance * liquidityPercent) / 100;
        uint256 autoBurnAmount = (poolBalance * autoBurnPercent) / 100;

        //Select the first second third places 
        address firstPlace = participants[random() % participants.length];
        address secondPlace = participants[random() % participants.length];
        address thirdPlace = participants[random() % participants.length];

        // Transfer winnings to the winners
        require(token.transfer(firstPlace, firstPlaceAmount), "Failed to transfer winnings to the first place winner");
        require(token.transfer(secondPlace, secondPlaceAmount), "Failed to transfer winnings to the second place winner");
        require(token.transfer(thirdPlace, thirdPlaceAmount), "Failed to transfer winnings to the third place winner");

        // Distribute rewards to RGPT holders
        uint256 rgptHolderReward = (rgptHoldersAmount) / participants.length;

        for (uint256 i = 0; i < participants.length; i++) {
            address participant = participants[i];
            require(token.transfer(participant, rgptHolderReward), "Failed to distribute rewards to RGPT holders");
        }

        // Transfer liquidity amount to the liquidity pool
        require(token.transfer(liquidityPoolAddress, liquidityAmount), "Failed to transfer liquidity amount to the liquidity pool");

        // Auto-burn the specified amount of RGPT tokens
        require(token.transfer(address(0), autoBurnAmount), "Failed to burn RGPT tokens");

        resetLottery();
    }

    function resetLottery() private {
        for (uint256 i = 0; i < participants.length; i++) {
            delete ticketBalances[participants[i]];
        }
        delete participants;
        poolBalance = 0;
        lotteryEndTime = 0;
    }

    function getEndOfDayTimestamp() private view returns (uint256) {
        // Get the current UTC timestamp
        uint256 currentTime = block.timestamp;

        // Calculate the timestamp for the end of the current day
        uint256 secondsInDay = 24 hours;
        uint256 endOfDayTimestamp = currentTime - (currentTime % secondsInDay) + secondsInDay;

        return endOfDayTimestamp;
    }

    function random() private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, participants.length)));
    }
}