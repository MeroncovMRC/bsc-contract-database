
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: contracts/HACRelease.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract HACRelease {
    mapping(string => mapping(uint => uint)) public releaseTimelines;
    mapping(string => address) public releaseRecipients;
    mapping(string => mapping(uint => bool)) public released;

    address public tokenAddress;
    address recipient;

    event InitRelease(string timelineName, uint timestamp, uint amount);

    event Release(
        string timelineName,
        address recipient,
        uint timestamp,
        uint amount
    );

    constructor(
        address _tokenAddress,
        string[] memory _timelineNames,
        address[] memory _recipients,
        uint[][] memory _timestamps,
        uint[][] memory _amounts
    ) {
        for (uint i; i < _timelineNames.length; i++) {
            string memory timelineName = _timelineNames[i];
            releaseRecipients[timelineName] = _recipients[i];

            for (uint j; j < _timestamps[i].length; j++) {
                uint timestamp = _timestamps[i][j];
                uint amount = _amounts[i][j];

                releaseTimelines[timelineName][timestamp] = amount;
                emit InitRelease(
                    timelineName,
                    _timestamps[i][j],
                    _amounts[i][j]
                );
            }
        }
        tokenAddress = _tokenAddress;
    }

    function release(uint _timestamp, string[] memory _timelineNames) public {
        for (uint i; i < _timelineNames.length; i++) {
            string memory _timelineName = _timelineNames[i];
            require(
                released[_timelineName][_timestamp] == false,
                "This has been released."
            );
            require(
                releaseTimelines[_timelineName][_timestamp] > 0,
                "Invalid timestamp."
            );
            require(
                _timestamp < block.timestamp,
                "The timestamp has not yet expired."
            );

            IERC20 token = IERC20(tokenAddress);
            token.transfer(
                releaseRecipients[_timelineName],
                releaseTimelines[_timelineName][_timestamp] * 10 ** 18
            );

            released[_timelineName][_timestamp] = true;

            emit Release(
                _timelineName,
                releaseRecipients[_timelineName],
                _timestamp,
                releaseTimelines[_timelineName][_timestamp]
            );
        }
    }
}

