pragma solidity ^0.8.7;

contract MyToken {
    string public name = "Tatty Token";
    string public symbol = "TT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 712000000 * 10**uint256(decimals); // 1,000,000 tokens with 18 decimal places

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    bool public isPaused;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed burner, uint256 value);
    event Pause();
    event Unpause();

    constructor() {
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
        isPaused = false;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    modifier whenNotPaused() {
        require(!isPaused, "Token is paused");
        _;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {
        require(_value <= balances[msg.sender], "Insufficient balance");
        require(_to != address(0), "Invalid address");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {
        require(_value <= balances[_from], "Insufficient balance");
        require(_value <= allowed[_from][msg.sender], "Insufficient allowance");
        require(_to != address(0), "Invalid address");

        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {
        allowed[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function burn(uint256 _value) public onlyOwner whenNotPaused {
        require(_value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= _value;
        totalSupply -= _value;

        emit Burn(msg.sender, _value);
    }

    function pause() public onlyOwner {
        require(!isPaused, "Token is already paused");

        isPaused = true;
        emit Pause();
    }

    function unpause() public onlyOwner {
        require(isPaused, "Token is not paused");

        isPaused = false;
        emit Unpause();
    }
}