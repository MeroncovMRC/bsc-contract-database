pragma solidity ^0.6.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}
contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

contract DDA is IERC20,Ownable{

    event TransferPledge(address indexed from, uint256 value,uint256 usdAmount, uint256 ddaAmount,uint256 rate);
    event ActiveAccount(address indexed account,address indexed refer);
    event Book(address indexed owner,address indexed bookAddr,uint256 ddaAmount,uint256 price,uint256 base);
    event Destory(address indexed account,uint256 ddaAmount,uint256 amount,uint256 price,uint256 base);

    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping (address => address) private _refers;
    address[] private _actives;

    uint8 private _usdDecimals=18;
    uint256 private _price = 20000000;
    uint256 private _priceBase = 10 ** 8;

    IERC20 USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    address private _master = address(0x2c3fFe5a0dAEA1a9B9b77541BBdaD0D92CA42A8b);

    constructor () public{
        _name = "DDA Token";
        _symbol = "DDA";
        _decimals = 6;
        _refers[msg.sender]=msg.sender;
        _mint(msg.sender, 150000000 * (10 ** uint256(decimals())));
    }

    function pledge(uint256 amount,uint256 rate) public{
        require(amount > 0,"error"); 
        require(rate > 0 && rate <= 100 ,"error");

        uint256 usdRate=uint256(100).sub(rate);
        uint256 usdAmount = amount.mul(usdRate).div(100);

        //dda usdt amount
        uint256 ddaUsdAmount = amount.mul(rate).div(100);
        uint256 ddaAmount = ddaUsdAmount
            .mul(_priceBase)
            .mul(10 ** uint256(_decimals))
            .div(10 ** uint256(_usdDecimals))
            .div(_price);

        require(_balances[msg.sender] >= ddaAmount,"DDA balance not enough");
        if(usdRate>0){
            require(USDT.transferFrom(msg.sender,_master,usdAmount),"USDT transfer error");
        }
        _transfer(msg.sender,_master,ddaAmount);
        emit TransferPledge(msg.sender,amount,usdAmount,ddaAmount,rate);
    }

    function active(address refer) public returns(uint code){
        if(_refers[refer] == address(0)){
            return 1;
        }
        if(msg.sender == refer){
            return 2;
        }
        if(_refers[msg.sender]!=address(0)){
            return 3;
        }
        _refers[msg.sender]=refer;
        _actives.push(msg.sender);
        emit ActiveAccount(msg.sender,refer);
        return 0;
    }

    function isActive() view public returns(bool status){
        return _refers[msg.sender] != address(0);
    }

    function activeAllList() public view returns(address[] memory keys,address[] memory values){
        address[] memory list=new address[](_actives.length);
        for(uint i=0;i<_actives.length;i++){
            address key=_actives[i];
            address addr=_refers[key];
            list[i]=addr;
        }
        return(_actives,list);
    }

    function activeRefer(address addr) public view returns(address refer){
        return _refers[addr];
    }

    function book(address bookAddr,uint256 amount) public {
        require(_refers[msg.sender] != address(0),"not active");
        require(bookAddr != address(0),"book address is empty");
        require(_refers[bookAddr] != address(0),"book address not active");
        require(msg.sender != bookAddr,"Cannot be the same");

        uint256 ddaAmount = amount
            .mul(_priceBase)
            .mul(10 ** uint256(_decimals))
            .div(10 ** uint256(_usdDecimals))
            .div(_price);

        _transfer(msg.sender,_master,ddaAmount);
        emit Book(msg.sender,bookAddr,ddaAmount,_price,_priceBase);
    }

    function destroy(uint256 amount) public {
        uint256 ddaAmount = amount
            .mul(_priceBase)
            .mul(10 ** uint256(_decimals))
            .div(10 ** uint256(_usdDecimals))
            .div(_price);
        _transfer(msg.sender,_master,ddaAmount);
        emit Destory(msg.sender,ddaAmount,amount,_price,_priceBase);
    }



    function updateActive(address addr,address refer) external onlyOwner{
        _refers[addr] = refer;
    }

    function getMaster() public view returns (address){
        return _master;
    }

    function setMaster(address addr) external onlyOwner{
        _master=addr;
    }
    
    function setPrice(uint256 price) external onlyOwner{
        require(price>0,"Rate must more than 0");
        _price=price;
    }

    function getPrice() public view returns (uint256){
        return _price;
    }

    function setPriceBase(uint256 base) external onlyOwner{
        require(base>0,"base must more than 0");
        _priceBase = base;
    }

    function getPriceBase() public view returns (uint256){
        return _priceBase;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() override public view returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) override public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) override public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) override public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value) override public returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) override public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 value) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _totalSupply = _totalSupply.sub(value);
        _balances[account] = _balances[account].sub(value);
        emit Transfer(account, address(0), value);
    }

    function _approve(address owner, address spender, uint256 value) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
    }
}