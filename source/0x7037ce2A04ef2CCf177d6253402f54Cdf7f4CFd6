pragma solidity ^0.8.19;
// SPDX-License-Identifier: MIT
contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event OwnershipRenounced(address indexed previousOwner);

    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        emit OwnershipRenounced(_owner);
        _owner = address(0);
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract LaughTokenOfficialToken is Ownable {
    string private constant _name = "LaughToken";
    string private constant _symbol = "LaughToken";
    uint8 private constant _decimals = 5;
    uint256 private constant _totalSupply = 1000000000000 * 10**_decimals;
    string private constant LaughTokenwebsite = "LaughToken.io";

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private constant _marketingAddress = 0xdb777E83eB84dE8097f1FccC959E8d62a1815FaE;
    address private constant _devAddress = 0x89AA1D400Ed52b52AaDfeF6C476D1bB80650b949;
    address private constant _deadAddress = 0x000000000000000000000000000000000000dEaD;

    uint256 private constant _maxWalletAmount = (_totalSupply * 2) / 100;
    uint256 private constant _maxTransactionAmount = (_totalSupply * 2) / 100;

    uint256 private _totalFees;

    constructor() {
        _balances[msg.sender] = _totalSupply;

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() external pure returns (string memory) {
        return _name;
    }

    function symbol() external pure returns (string memory) {
        return _symbol;
    }

    function decimals() external pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() external pure returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "BEP20: transfer amount must be greater than zero");

        if (sender != owner() && recipient != owner()) {
            require(amount <= _maxTransactionAmount, "BEP20: transfer amount exceeds the max transaction limit");

            if (recipient != address(this)) {
                require(_balances[recipient] + amount <= _maxWalletAmount, "BEP20: wallet balance exceeds the max wallet limit");
            }
        }

        uint256 feeAmount;

        if (sender == address(this) || recipient == address(this)) {
            feeAmount = 0;
        } else if (recipient == _deadAddress) {
            feeAmount = amount;
        } else if (sender == _marketingAddress || recipient == _marketingAddress || sender == _devAddress || recipient == _devAddress) {
            feeAmount = amount / 100;
        } else {
            feeAmount = (amount * 2) / 100;
        }

        uint256 transferAmount = amount - feeAmount;

        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[_marketingAddress] += feeAmount / 2;
        _balances[_devAddress] += feeAmount - (feeAmount / 2);

        _totalFees += feeAmount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, _marketingAddress, feeAmount / 2);
        emit Transfer(sender, _devAddress, feeAmount - (feeAmount / 2));
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}