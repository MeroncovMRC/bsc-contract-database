// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SubscriptionContract {
    address private _owner;
    uint256 private _totalCollectedFees;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event SubscriptionPaid(address indexed user, uint256 amount);

    constructor() {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Caller is not the owner");
        _;
    }

    function paySubscription() public payable {
        _totalCollectedFees += msg.value;
        emit SubscriptionPaid(msg.sender, msg.value);
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function withdrawFees() public onlyOwner {
        uint256 amount = _totalCollectedFees;
        _totalCollectedFees = 0;

        payable(_owner).transfer(amount);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function totalCollectedFees() public view returns (uint256) {
        return _totalCollectedFees;
    }
}