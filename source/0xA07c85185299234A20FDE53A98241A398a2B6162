{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Ownable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function pause() public whenNotPaused onlyOwner {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function unpause() public whenPaused onlyOwner {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"},"STUDStake.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// Studyum Labs Contracts\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Pausable.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev STUDStake contract which enables depositing and claiming\r\n * of STUD tokens for staking purposes.\r\n */\r\ncontract STUDStake is Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Stake {\r\n        uint256 stakeStart;\r\n        uint256 stakeEnd;\r\n        bool active; //not claimed\r\n        uint256 months;\r\n        uint256 percentage;\r\n        uint256 baseAmount;\r\n        uint256 totalAmount;\r\n    }\r\n\r\n    struct Option {\r\n        uint256 months;\r\n        uint256 percentage;\r\n    }\r\n\r\n    mapping(address =\u003e Stake) private _stakes;\r\n\r\n    Option[] public stakingOptions;\r\n\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n\r\n    uint256 public totalClaimableAmount;\r\n\r\n    IBEP20 public token;\r\n\r\n    /**\r\n     * @dev Emitted when the claim is executed by `account`.\r\n     */\r\n    event Claim(address account, uint256 totalAmount);\r\n\r\n    /**\r\n     * @dev Emitted when the deposit is executed by `account`.\r\n     */\r\n    event Deposit(address account, uint256 baseAmount, uint256 totalAmount, uint256 months, uint256 percentage);\r\n\r\n    /**\r\n     * @dev Emitted when the mistakenly sent tokens are extracted.\r\n     */\r\n    event ExtractedTokens(address _token, address _owner, uint256 _amount);\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract\r\n     */\r\n    constructor(address _token, Option[] memory _stakingOptions, uint256 _minAmount, uint256 _maxAmount) {\r\n        require(_token != address(0), \"STUDStake: Token address can\u0027t be zero address\");\r\n        token = IBEP20(_token);\r\n        _updateStakingOptions(_stakingOptions);\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n        totalClaimableAmount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Claims staked STUD tokens along with interest.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     * - Staking period should be expired.\r\n     */\r\n    function claim() external whenNotPaused returns (bool) {\r\n        Stake storage stake = _stakes[_msgSender()];\r\n        require(stake.active, \"STUDStake: No active stake\");\r\n        require(block.timestamp \u003e stake.stakeEnd, \"STUDStake: Stake not yet claimable\");\r\n\r\n        stake.active = false;\r\n\r\n        totalClaimableAmount = SafeMath.sub(totalClaimableAmount, stake.totalAmount);\r\n\r\n        require(token.transfer(_msgSender(), stake.totalAmount));\r\n\r\n        emit Claim(_msgSender(), stake.totalAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits arbitrary amount of STUD tokens to contract using preferred staking option.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     * - Sender should not have an active stake.\r\n     * - Amount should be between the bounds and allowed by sender.\r\n     */\r\n    function deposit(uint256 amount, uint256 stakingOptionIndex) external whenNotPaused returns (bool) {\r\n        Stake storage stake = _stakes[_msgSender()];\r\n        require(!stake.active, \"STUDStake: There is an active stake\");\r\n\r\n        require(stakingOptionIndex \u003c stakingOptions.length, \"STUDStake: Index out of bounds\");\r\n\r\n        require(amount \u003e= minAmount, \"STUDStake: Amount lower than minimum amount\");\r\n        require(amount \u003c= maxAmount, \"STUDStake: Amount higher than maximum amount\");\r\n\r\n        uint256 allowanceBalance = token.allowance(_msgSender(), address(this));\r\n        require(allowanceBalance \u003e= amount, \"STUDStake: Insufficient allowance balance\");\r\n\r\n        Option memory option = stakingOptions[stakingOptionIndex];\r\n        uint256 stakeEnd = getStakeEnd(option.months);\r\n        uint256 totalAmount = getTotalAmount(amount, option.percentage);\r\n        _stakes[_msgSender()] = Stake(block.timestamp, stakeEnd, true, option.months, option.percentage, amount, totalAmount);\r\n\r\n        totalClaimableAmount = SafeMath.add(totalClaimableAmount, totalAmount);\r\n\r\n        require(token.transferFrom(_msgSender(), address(this), amount));\r\n\r\n        emit Deposit(_msgSender(), amount, totalAmount, option.months, option.percentage);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns information about stake per account.\r\n     */\r\n    function getStake(address _account) external view returns (Stake memory) {\r\n        return _stakes[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns count of staking options.\r\n     */\r\n    function getStakingOptionCount() external view returns (uint256) {\r\n        return stakingOptions.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can change minimum and maximum deposit amount.\r\n     */\r\n    function changeMinMaxAmount(uint256 _minAmount, uint256 _maxAmount) external onlyOwner {\r\n        require(_minAmount \u003c _maxAmount, \"STUDStake: Minimum should be lower than maximum\");\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can change staking options.\r\n     */\r\n    function changeStakingOptions(Option[] memory _stakingOptions) external onlyOwner {\r\n        _updateStakingOptions(_stakingOptions);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates timestamp of the end of staking period.\r\n     */\r\n    function getStakeEnd(uint256 _months) internal view returns (uint256) {\r\n        uint256 temp = SafeMath.mul(_months, 30 days);\r\n        return SafeMath.add(block.timestamp, temp);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates staking options.\r\n     */\r\n    function _updateStakingOptions(Option[] memory _stakingOptions) internal {\r\n        delete stakingOptions;\r\n        uint256 length = _stakingOptions.length;\r\n        for (uint256 i=0; i \u003c length; i++) {\r\n            Option memory option = _stakingOptions[i];\r\n            stakingOptions.push(Option(option.months, option.percentage));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total amount based on base amount and yield percentage.\r\n     */\r\n    function getTotalAmount(uint256 baseAmount, uint256 _percentage) internal pure returns (uint256) {\r\n        uint256 temp = SafeMath.mul(baseAmount, _percentage);\r\n        uint256 interest = SafeMath.div(temp, 10000);\r\n        return SafeMath.add(baseAmount, interest);\r\n    }\r\n\r\n    /**\r\n     * @dev Extract mistakenly sent tokens to the contract.\r\n     */\r\n    function extractMistakenlySentTokens(address _tokenAddress) external onlyOwner {\r\n        if (_tokenAddress == address(0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IBEP20 bep20Token = IBEP20(_tokenAddress);\r\n        uint256 balance = bep20Token.balanceOf(address(this));\r\n        require(token.transfer(owner(), balance));\r\n        emit ExtractedTokens(_tokenAddress, owner(), balance);\r\n    }\r\n\r\n}\r\n\r\n\r\n"}}