{"Administration.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ncontract Administration is Ownable {\n\n    event TokensWithdrawn(uint256 amount);\n\n    constructor(address ownerAddr) {\n        transferOwnership(ownerAddr);\n    }\n\n    function withdrawERC20(address tokenAddr) external onlyOwner {\n        IERC20 TempToken = IERC20(tokenAddr);\n        uint256 currentBalance = TempToken.balanceOf(address(this));\n        require(currentBalance \u003e 0, \"No tokens to withdraw: balance is zero\");\n\n        TempToken.transfer(owner(), currentBalance);\n        emit TokensWithdrawn(currentBalance);\n    }\n\n    function withdrawWETH() external onlyOwner {\n        uint256 currentBalance = address(this).balance;\n        require(currentBalance \u003e 0, \"No WETH to withdraw: balance is zero\");\n\n        payable(owner()).transfer(currentBalance);\n        emit TokensWithdrawn(currentBalance);\n    }\n\n    fallback() payable external {}\n    receive() payable external {}\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"CYTEER.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./IPancakeFactory.sol\";\r\nimport \"./IPancakeRouter.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\nimport \"./Administration.sol\";\r\nimport \"./Liquidity.sol\";\r\nimport \"./Stake.sol\";\r\n\r\ncontract Cyteer is ERC20, Ownable {\r\n    IPancakeRouter02 public PancakeRouter;\r\n    IPancakeFactory  public PancakeFactory;\r\n\r\n    Administration public DevelopmentContract;\r\n    Administration public DevelopmentManagerContract;\r\n    Liquidity      public LiquidityContract;\r\n    Stake          public StakeContract;\r\n    Administration public StakeManagerContract;\r\n\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap BNB Smart Chain Mainnet\r\n    address public  pancakePairAddress;\r\n\r\n    mapping(address =\u003e bool) private lpTransactionFee;\r\n    mapping(address =\u003e bool) private whitelist;\r\n\r\n   // Only applies to buying or selling.\r\n    uint256 public maxFee  = 1100; // 11%\r\n    uint256 public buyFee  = 1100; // 11%\r\n    uint256 public sellFee = 1100; // 11%\r\n\r\n    // Only applies to buying or selling.\r\n    uint256 private developmentAllocation = 6;\r\n    uint256 private liquidityAllocation = 3;\r\n    uint256 private stakeAllocation = 2;\r\n    uint256 private totalFeeDistribution = (developmentAllocation + liquidityAllocation + stakeAllocation);\r\n\r\n    // Perform swap\r\n    uint256 private maxSwapImpact = 2500; // 25%\r\n    bool    private inSwap;\r\n\r\n    uint256 private basePercentage = 10000; // 100%\r\n    bool public contractLocked = true;\r\n\r\n    event contractUnlock();\r\n    event whitelistUpdate(address addr, bool status);\r\n    event liquidityPoolStatusUpdate(address addr, bool status);\r\n    event buyFeeUpdate(uint256 amount);\r\n    event sellFeeUpdate(uint256 amount);\r\n\r\n    constructor() ERC20(\"Cyteer\",\"CTV\"){\r\n        uint256 tokenSupply = 1000000000 ether;\r\n\r\n        _mint(_msgSender(), tokenSupply);\r\n\r\n        DevelopmentContract        = new Administration(_msgSender());\r\n        DevelopmentManagerContract = new Administration(_msgSender());\r\n        LiquidityContract          = new Liquidity(_msgSender(),address(this));\r\n        StakeContract              = new Stake(_msgSender());\r\n        StakeManagerContract       = new Administration(_msgSender());\r\n\r\n        PancakeRouter      = IPancakeRouter02(pancakeRouterAddress);\r\n        PancakeFactory     = IPancakeFactory(PancakeRouter.factory());\r\n        pancakePairAddress = PancakeFactory.createPair(address(this),PancakeRouter.WETH());\r\n        lpTransactionFee[pancakePairAddress] = true;\r\n\r\n        whitelist[address(this)] = true;\r\n        whitelist[_msgSender()]  = true;\r\n        whitelist[deadAddress]   = true;\r\n        whitelist[address(LiquidityContract)] = true;\r\n    }\r\n\r\n    function swapFee(uint256 amount) internal lockSwap {\r\n        uint256[] memory TotalSwap;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeRouter.WETH();\r\n\r\n        _approve(address(this), pancakeRouterAddress, amount);\r\n        TotalSwap = PancakeRouter.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        if (TotalSwap[1]\u003e0){\r\n            uint256 developmentSwap = ((TotalSwap[1]*developmentAllocation)/totalFeeDistribution);\r\n            uint256 developmentManagerSwap = ((developmentSwap*10)/100);\r\n            developmentSwap = developmentSwap - developmentManagerSwap;\r\n\r\n            uint256 liquiditySwap = ((TotalSwap[1]*liquidityAllocation)/totalFeeDistribution);\r\n\r\n            uint256 stakeSwap = ((TotalSwap[1]*stakeAllocation)/totalFeeDistribution);\r\n            uint256 stakeManagerSwap = ((stakeSwap*20)/100);\r\n            stakeSwap = stakeSwap - stakeManagerSwap;\r\n\r\n            payable(address(DevelopmentContract)).transfer(developmentSwap);\r\n            payable(address(DevelopmentManagerContract)).transfer(developmentManagerSwap);\r\n\r\n            payable(address(LiquidityContract)).transfer(liquiditySwap);\r\n\r\n            payable(address(StakeContract)).transfer(stakeSwap);\r\n            payable(address(StakeManagerContract)).transfer(stakeManagerSwap);\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        uint256 amountTax;\r\n        if (whitelist[sender] || whitelist[recipient]){\r\n            amountTax = 0;\r\n        } else {\r\n            require(!contractLocked, \"Transfer not allowed: Contract is currently locked\");\r\n            if (recipient == pancakePairAddress) {\r\n                uint256 amountSwap = balanceOf(address(this));\r\n                if (!inSwap \u0026\u0026 amountSwap \u003e 0){\r\n                    uint256 maxCurrentSwap = ((amount*maxSwapImpact)/basePercentage);\r\n                    if (amountSwap\u003e=maxCurrentSwap) {\r\n                        amountSwap = maxCurrentSwap;\r\n                    }\r\n                    swapFee(amountSwap);\r\n                }\r\n            }\r\n            if (lpTransactionFee[sender] \u0026\u0026 buyFee\u003e0) {\r\n                amountTax = ((amount*buyFee)/basePercentage);\r\n            } else if (lpTransactionFee[recipient] \u0026\u0026 sellFee\u003e0) {\r\n                amountTax = ((amount*sellFee)/basePercentage);\r\n            }\r\n            if (amountTax \u003e 0) {\r\n                super._transfer(sender, address(this), amountTax);\r\n            }\r\n        }\r\n        super._transfer(sender, recipient, (amount-amountTax));\r\n    }\r\n\r\n    function unlockContract() external onlyOwner {\r\n        require(contractLocked, \"Cannot unlock: Contract is already unlocked\");\r\n        contractLocked = false;\r\n        emit contractUnlock();\r\n    }\r\n\r\n    function updateWhiteList(address addr, bool status) external onlyOwner {\r\n        require(addr != address(0), \"Cannot whitelist zero address\");\r\n        require(whitelist[addr] != status, \"Whitelist status already set for this address\");\r\n        whitelist[addr] = status;\r\n        emit whitelistUpdate(addr, status);\r\n    }\r\n\r\n    function updateLiquidityPoolStatus(address addr, bool status) external onlyOwner {\r\n        require(addr != address(0), \"Cannot whitelist zero address\");\r\n        require(lpTransactionFee[addr] != status, \"LiquidityPool status already set for this address\");\r\n        lpTransactionFee[addr] = status;\r\n        emit liquidityPoolStatusUpdate(addr, status);\r\n    }\r\n\r\n    function updateBuyFee(uint256 amount) external onlyOwner {\r\n        require(amount \u003c= maxFee, \"Fee exceeds maximum allowed value\");\r\n        require(amount != buyFee, \"New fee matches existing buy fee\");\r\n        buyFee = amount;\r\n        emit buyFeeUpdate(amount);\r\n    }\r\n\r\n    function updateSellFee(uint256 amount) external onlyOwner {\r\n        require(amount \u003c= maxFee, \"Fee exceeds maximum allowed value\");\r\n        require(amount != sellFee, \"New fee matches existing sell fee\");\r\n        sellFee = amount;\r\n        emit sellFeeUpdate(amount);\r\n    }\r\n\r\n    modifier lockSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    fallback() payable external {}\r\n    receive() payable external {}\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IPancakeFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.5.16;\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IPancakeRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\IPancakeRouter02.sol\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Liquidity.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./IPancakeFactory.sol\";\nimport \"./IPancakeRouter.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ncontract Liquidity is Ownable {\n\n    IPancakeRouter02 public PancakeRouter;\n    IPancakeFactory public PancakeFactory;\n    IERC20 public ERC20;\n\n    bool private inSwap;\n\n    address private pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap BNB Smart Chain Mainnet\n\n    address public managerAddr;\n\n    event BuyBackExecuted(uint256 amount);\n    event AddLiquidityExecuted(uint256 amountA, uint256 amountB);\n    event managerUpdate(address addr);\n\n    constructor(address ownerAddr, address tokenAddr) {\n        PancakeRouter  = IPancakeRouter02(pancakeRouterAddress);\n        PancakeFactory = IPancakeFactory(PancakeRouter.factory());\n        ERC20 = IERC20(tokenAddr);\n\n        transferOwnership(ownerAddr);\n        managerAddr = ownerAddr;\n    }\n\n    function swapETHForToken(address recipient, uint256 amount) internal lockSwap {\n        address[] memory path = new address[](2);\n\n        path[0] = PancakeRouter.WETH();\n        path[1] = address(ERC20);\n\n        PancakeRouter.swapExactETHForTokens{ value: amount }(\n            0,\n            path,\n            recipient,\n            block.timestamp\n        );\n    }\n\n    function addLiquidityForToken(address recipient, uint256 amountA, uint256 amountB) internal lockSwap {\n        address[] memory path = new address[](2);\n\n        path[0] = address(ERC20);\n        path[1] = PancakeRouter.WETH();\n\n        ERC20.approve(pancakeRouterAddress, amountA);\n        PancakeRouter.addLiquidityETH{ value: amountB }(\n            address(ERC20),\n            amountA,\n            0,\n            0,\n            recipient,\n            block.timestamp\n        );\n    }\n\n    function buyBack(uint256 amount) external onlyManager {\n        uint256 currentBalance = address(this).balance;\n        require(currentBalance \u003e 0, \"No funds available for buyback\");\n        require(amount \u003c= currentBalance, \"Buyback amount exceeds available balance\");\n        require(!inSwap, \"Cannot execute buyback while in swap\");\n        if (amount == 0) {\n            amount = currentBalance;\n        }\n        swapETHForToken(address(this), amount);\n        emit BuyBackExecuted(amount);\n    }\n\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyManager {\n        uint256 currentBalanceA = ERC20.balanceOf(address(this));\n        uint256 currentBalanceB = address(this).balance;\n        require(currentBalanceA \u003e 0, \"No funds available for token A\");\n        require(currentBalanceB \u003e 0, \"No funds available for token B\");\n        require(amountA \u003c= currentBalanceA, \"Amount A exceeds available balance of token A\");\n        require(amountB \u003c= currentBalanceB, \"Amount B exceeds available balance of token B\");\n        require(!inSwap, \"Cannot add liquidity while in swap\");\n        if (amountA == 0) {\n            amountA = currentBalanceA;\n        } \n        if (amountB == 0) {\n            amountB = currentBalanceB;\n        }\n        addLiquidityForToken(owner(), amountA, amountB);\n        emit AddLiquidityExecuted(amountA, amountB);\n    }\n\n    function updateManager(address addr) external onlyOwner {\n        require(addr != address(0), \"Zero address provided. Please provide a valid address\");\n        require(managerAddr != addr, \"Provided address is already set as manager. Please provide a new address\");\n        managerAddr = addr;\n        emit managerUpdate(managerAddr);\n    }\n\n    modifier onlyManager {\n        require(_msgSender() == owner() || _msgSender() == managerAddr, \"Only the owner or manager can execute this operation\");\n        _;\n    }\n\n    modifier lockSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    fallback() payable external {}\n    receive() payable external {}\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"Stake.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ncontract Stake is Ownable {\n\n    address public managerAddr;\n    address public stakeAddr;\n\n    event tokensWithdrawn(uint256 amount);\n    event rewardSent(uint256 amount);\n    event managerUpdate(address addr);\n    event stakeUpdate(address addr);\n\n    constructor(address ownerAddr) {\n        transferOwnership(ownerAddr);\n        managerAddr = ownerAddr;\n        stakeAddr = ownerAddr;\n    }\n\n    function withdrawERC20(address tokenAddr) external onlyOwner {\n        IERC20 TempToken = IERC20(tokenAddr);\n        uint256 currentBalance = TempToken.balanceOf(address(this));\n        require(currentBalance \u003e 0, \"No tokens to withdraw: balance is zero\");\n\n        TempToken.transfer(owner(), currentBalance);\n        emit tokensWithdrawn(currentBalance);\n    }\n\n    function withdrawWETH() external onlyOwner {\n        uint256 currentBalance = address(this).balance;\n        require(currentBalance \u003e 0, \"No WETH to withdraw: balance is zero\");\n\n        payable(owner()).transfer(currentBalance);\n        emit tokensWithdrawn(currentBalance);\n    }\n\n    function sendReward(uint256 amount) external onlyManager {\n        uint256 currentBalance = address(this).balance;\n        require(currentBalance \u003e 0, \"No funds available\");\n        require(amount \u003c= currentBalance, \"Reward amount exceeds available balance\");\n        if (amount == 0) {\n            amount = currentBalance;\n        }\n        payable(stakeAddr).transfer(amount);\n        emit rewardSent(amount);\n    }\n\n    function updateManager(address addr) external onlyOwner {\n        require(addr != address(0), \"Zero address provided. Please provide a valid address\");\n        require(managerAddr != addr, \"Provided address is already set as manager. Please provide a new address\");\n        managerAddr = addr;\n        emit managerUpdate(managerAddr);\n    }\n\n    function updateStake(address addr) external onlyOwner {\n        require(addr != address(0), \"Zero address provided. Please provide a valid address\");\n        require(stakeAddr != addr, \"Provided address is already set as stake. Please provide a new address\");\n        stakeAddr = addr;\n        emit stakeUpdate(stakeAddr);\n    }\n\n    modifier onlyManager {\n        require(_msgSender() == owner() || _msgSender() == managerAddr, \"Only the owner or manager can execute this operation\");\n        _;\n    }\n\n    fallback() payable external {}\n    receive() payable external {}\n}\n"}}