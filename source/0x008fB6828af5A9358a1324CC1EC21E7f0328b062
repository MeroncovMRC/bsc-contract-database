pragma solidity ^0.8.0;
abstract contract Keeper {
    address public keeper;
    
    constructor() {
        keeper = msg.sender;
    }
    
    modifier onlyOwner() {
        require(keeper == msg.sender, "onlyKeeper");
        _;
    }
    
    function setKeeper(address _keeper) public onlyOwner {
        keeper = _keeper;
    }
}

interface IERC20{
    function transfer(address, uint256) external;
}

contract Distributor is Keeper{
    address[] private accounts;
    uint256[] private rates;
    address public operator;
    
    constructor(){
        operator = msg.sender;
    }
    
    function setRates(address[] memory _accounts, uint256[] memory _rates) public onlyOwner{
        require(_accounts.length == _rates.length, "array not match");
        accounts = _accounts;
        rates = _rates;
        uint256 sum = 0;
        for(uint256 i = 0; i < rates.length; i++){
            sum += rates[i];
        }
        require(sum == 1000, "sum 1000");
    }
    
    function getRates() external view returns(address[] memory, uint256[] memory){
        return (accounts, rates);
    }
    
    function setOperator(address _operator) external onlyOwner{
        operator = _operator;
    }
    
    function distribute(IERC20 token, uint256 amount) external {
        require(msg.sender == operator, "onlyOperator");
        uint256 len = rates.length;
        uint256 left = amount;
        for(uint256 i = 0; i < len; i++){
            if(i == len - 1){
                token.transfer(accounts[i], left);
            }else{
                uint256 fee = amount * rates[i] / 1000;
                left -= fee;
                token.transfer(accounts[i], fee);
            }
        }
    }
}