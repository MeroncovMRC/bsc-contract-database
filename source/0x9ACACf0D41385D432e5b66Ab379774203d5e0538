{"DDC33.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\n// DuckTech Contracts (Default Duck Coin) 1.1\n\n\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ncontract DDC33 is IERC20{\n\n    //GENERIC VARIABLES\n    bool internal locked;\n    bool public isIssuing;\n    bool public isFarmingEnabled;\n    bool public firstFarmingWinMore;\n    address public COINAdminAddress;\n    address public investmentcurrencyaddress;\n    address public treasuryOwner;\n    address public projectOwner;\n    address public defaultInviterAddress;\n    uint256 public lastResetedLetFarm;\n    uint256 public percentageToUnlockToFarm;\n    uint256 public treasuryOnLastAnnounce;\n    uint256 public issuancePrice;\n    uint256 public sponsoredPricePercentage;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    string private _onlyadmin = \"Only the admin\";\n    mapping(address =\u003e uint256) public lastFarmed;\n    mapping(address =\u003e address) public inviteSponsor;\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e uint256) public receivedThisTurn;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n    //TARIFF VARIABLES\n    uint256 public investSponsorTax;\n    uint256 public transactionSponsorTax;\n    uint256 public farmSponsorTax;\n    TaxCollector[] public investTaxCollectors;\n    TaxCollector[] public transactionTaxCollectors;\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        bool isFarmingEnabled_,\n        bool firstFarmingWinMore_,\n        uint256 percentageToUnlockToFarm_,\n        uint256 issuancePrice_,\n        uint256 sponsoredPricePercentage_\n        ) {\n        _name = name_;\n        _symbol = symbol_;\n        COINAdminAddress = msg.sender;\n        treasuryOwner =  address(this);\n        projectOwner =  msg.sender;\n        isFarmingEnabled = isFarmingEnabled_;\n        firstFarmingWinMore = firstFarmingWinMore_;\n        defaultInviterAddress = address(this);\n        percentageToUnlockToFarm = percentageToUnlockToFarm_;\n        issuancePrice = issuancePrice_;\n        sponsoredPricePercentage = sponsoredPricePercentage_;\n    }    \n    fallback() external payable{}\n    receive() external payable{}\n    //STRUCTS\n    struct TaxCollector{\n        address collectorAddres;\n        uint256 taxPercentage;\n    }\n    //MODIFIERS\n    modifier noReentrant{\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n    //EVENTS\n    event Farm(address indexed investor);\n    //INTERNAL FUNCTIONS\n    function _sendIssuedCoins(uint256 amount) internal returns(bool){\n        _mint(msg.sender, (amount / issuancePrice)*(10**decimals()));\n        return true;\n    }\n    function _receiveInvestment(uint256 amount) internal returns(bool){\n        uint256 remaining_amount = amount;\n        for (uint256 i = 0; i \u003c investTaxCollectors.length; i++) {\n            uint256 tax = amount*investTaxCollectors[i].taxPercentage/1000;\n            remaining_amount -= tax;\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, investTaxCollectors[i].collectorAddres, tax));\n        }\n        if(inviteSponsor[msg.sender] == address(0)){\n            uint256 tax = amount*investSponsorTax/1000;\n            remaining_amount -= tax;\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, defaultInviterAddress, tax));\n        }else{\n            uint256 tax = amount*investSponsorTax/1000;\n            remaining_amount -= tax;\n            require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, inviteSponsor[msg.sender], tax));\n        }\n        require(IERC20(investmentcurrencyaddress).transferFrom(msg.sender, treasuryOwner, remaining_amount));\n        return true;\n    }\n    \n    //ADMIN FUNCTIONS\n    function adm_addInvestTaxCollectors(address _collectorAddres, uint256 _taxPercentage) external returns(bool)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        investTaxCollectors.push(TaxCollector(_collectorAddres, _taxPercentage));\n        return true;\n    }\n    function adm_addTransactionTaxCollectors(address _collectorAddres, uint256 _taxPercentage) external returns(bool)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        transactionTaxCollectors.push(TaxCollector(_collectorAddres, _taxPercentage));\n        return true;\n    }\n    function adm_editInvestTaxCollectors(uint256 ID, address _collectorAddres, uint256 _taxPercentage) external returns(bool){\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        investTaxCollectors[ID].collectorAddres = _collectorAddres;\n        investTaxCollectors[ID].taxPercentage = _taxPercentage;\n        return true;\n    }\n    function adm_editTransactionTaxCollectors(uint256 ID, address _collectorAddres, uint256 _taxPercentage) external returns(bool){\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        transactionTaxCollectors[ID].collectorAddres = _collectorAddres;\n        transactionTaxCollectors[ID].taxPercentage = _taxPercentage;\n        return true;\n    }\n    function adm_mint(address account, uint256 amount) external{\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        _mint(account, amount);\n    }\n    function adm_burn(address account, uint256 amount) external{\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        _burn(account, amount);\n    }\n    function adm_changeAdmin(address newAdmin) external returns(address)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        COINAdminAddress = newAdmin;\n        return COINAdminAddress;\n    }\n    function adm_changeprojectOwner(address newOwner) external returns(address)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        projectOwner = newOwner;\n        return projectOwner;\n    }\n    function adm_changeTreasuryOwner(address newtreasuryOwner) external returns(address)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        treasuryOwner = newtreasuryOwner;\n        return treasuryOwner;\n    }\n    function adm_changedefaultInviterAddress(address newdefaultInviterAddress) external returns(address)\n    {\n        require(msg.sender == COINAdminAddress, _onlyadmin);\n        defaultInviterAddress = newdefaultInviterAddress;\n        return defaultInviterAddress;\n    }\n    // ADMIN TREASURY FUNCTIONS\n    function adm_changesponsoredPricePercentage(uint256 newsponsoredPricePercentage) external returns(uint256)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        sponsoredPricePercentage = newsponsoredPricePercentage;\n        return sponsoredPricePercentage;\n    }\n    function adm_changeinvestSponsorTax(uint256 newinvestSponsorTax) external returns(uint256)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        investSponsorTax = newinvestSponsorTax;\n        return investSponsorTax;\n    }\n    function adm_changefarmingSponsorTax(uint256 newfarmSponsorTax) external returns(uint256)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        farmSponsorTax = newfarmSponsorTax;\n        return investSponsorTax;\n    }\n    function adm_changetransactionSponsorTax(uint256 newtransactionSponsorTax) external returns(uint256)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        transactionSponsorTax = newtransactionSponsorTax;\n        return transactionSponsorTax;\n    }\n    function adm_announceCoinDividends(uint256 amount) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        _transfer(msg.sender, treasuryOwner, amount);\n        treasuryOnLastAnnounce = getAmountInTreasury();\n        require(adm_letAllGoFarm());\n        return true;\n    }\n    function adm_changeisIssuing(bool newIsIssuing) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        isIssuing = newIsIssuing;\n        return isIssuing;\n    }\n    function adm_changeInvestmentcurrencyaddress(address newinvestmentcurrencyaddress) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        investmentcurrencyaddress = newinvestmentcurrencyaddress;\n        return true;\n    }\n    function adm_changeIssuancePrice(uint256 newIssuancePrice) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        issuancePrice = newIssuancePrice;\n        return true;\n    }\n    function adm_changeisFarmingEnabled(bool newisFarmingEnabled) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        isFarmingEnabled = newisFarmingEnabled;\n        return true;\n    }\n    function adm_changefirstFarmingWinMore(bool newfirstFarmingWinMore) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        firstFarmingWinMore = newfirstFarmingWinMore;\n        return true;\n    }\n    function adm_changePercentageToUnlockToFarm(uint256 newPercentageToUnlockToFarm) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        percentageToUnlockToFarm = newPercentageToUnlockToFarm;\n        return true;\n    }\n    function adm_withdraw(uint256 amount) external returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        require(IERC20(investmentcurrencyaddress).transfer(msg.sender, amount), \"Error on payment\");\n        return true;\n    }\n    function adm_letAllGoFarm() public returns(bool)\n    {\n        require(msg.sender == projectOwner || msg.sender == COINAdminAddress, _onlyadmin);\n        lastResetedLetFarm = block.number;\n        return true;\n    }\n    //INVESTORS FUNCTION\n    function createAccountWithSponsor(address sponsorAddress)external returns(bool){\n        require(inviteSponsor[msg.sender] == address(0), \"You already have an account\");\n        require(inviteSponsor[msg.sender] != msg.sender);\n        inviteSponsor[msg.sender] = sponsorAddress;\n        return true;\n    }\n    function createAccountWithoutSponsor()external returns(bool){\n        require(inviteSponsor[msg.sender] == address(0), \"You already have an account\");\n        inviteSponsor[msg.sender] = defaultInviterAddress;\n        return true;\n    }\n    function invest(uint256 amount) external noReentrant returns(bool) \n    {\n        require(isIssuing, \"Now we are NOT issuing new coins!\");\n        require(_receiveInvestment(amount), \"ERROR TO RECEIVE\");\n        if(inviteSponsor[msg.sender] == address(0)){\n            require(_sendIssuedCoins(amount), \"ERROR TO SEND\");\n        }else{\n            require(_sendIssuedCoins(amount/sponsoredPricePercentage*1000), \"ERROR TO SEND\");\n        }\n        return true;\n    }\n    function farm() external noReentrant returns(bool) {\n        require(isFarmingEnabled, \"Farming is Disabled\");\n        require(lastFarmed[msg.sender] \u003c lastResetedLetFarm, \"Already Farmed\");\n        lastFarmed[msg.sender] = block.number;\n        uint256 amountFarm;\n        uint256 originBalance;\n        if(receivedThisTurn[msg.sender]\u003c=balanceOf(msg.sender)){\n            originBalance = (balanceOf(msg.sender)-receivedThisTurn[msg.sender]);\n            if(firstFarmingWinMore){\n                amountFarm = ((((originBalance*(10**decimals())) / totalSupply()) * percentageToUnlockToFarm)/1000) * getAmountInTreasury() /(10**decimals());\n            }else{\n                amountFarm = ((((originBalance*(10**decimals())) / totalSupply()) * percentageToUnlockToFarm)/1000) * treasuryOnLastAnnounce /(10**decimals());\n            }\n            uint256 sponsorTax = amountFarm*farmSponsorTax/1000;\n            uint256 remainingFarm = amountFarm - sponsorTax;\n            _transfer(treasuryOwner,inviteSponsor[msg.sender], sponsorTax);\n            _transfer(treasuryOwner,msg.sender, remainingFarm);\n        }\n        receivedThisTurn[msg.sender] = 0;\n        emit Farm(msg.sender);\n        return true;\n    }\n    //GENERIC FUNCTIONS\n    function getAmountInTreasury() public view returns(uint256){\n        return balanceOf(treasuryOwner);\n    }\n    function transfer(address to, uint256 amount) public returns (bool) {\n\n        address owner = _msgSender();\n        uint256 remaining_amount = amount;\n        for (uint256 i = 0; i \u003c transactionTaxCollectors.length; i++) {\n            uint256 tax = amount*transactionTaxCollectors[i].taxPercentage/1000;\n            remaining_amount -= tax;\n            _transfer(owner, transactionTaxCollectors[i].collectorAddres, tax);\n        }\n        address validSponsor;\n        if(inviteSponsor[msg.sender] == address(0)){\n            validSponsor = defaultInviterAddress;\n        }else{\n            validSponsor = inviteSponsor[msg.sender];\n        }\n        uint256 sponsorTax = amount*transactionSponsorTax/1000;\n        remaining_amount -= sponsorTax;\n        _transfer(owner, validSponsor, sponsorTax);\n\n        _transfer(owner, to, remaining_amount);\n        return true;\n    }\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n\n        uint256 remaining_amount = amount;\n        for (uint256 i = 0; i \u003c transactionTaxCollectors.length; i++) {\n            uint256 tax = amount*transactionTaxCollectors[i].taxPercentage/1000;\n            remaining_amount -= tax;\n            _transfer(from, transactionTaxCollectors[i].collectorAddres, tax);\n        }\n        \n        address validSponsor;\n        if(inviteSponsor[from] == address(0)){\n            validSponsor = defaultInviterAddress;\n        }else{\n            validSponsor = inviteSponsor[from];\n        }\n        uint256 sponsorTax = amount*transactionSponsorTax/1000;\n        remaining_amount -= sponsorTax;\n        _transfer(from, validSponsor, sponsorTax);\n        _transfer(from, to, remaining_amount);\n        return true;\n    }\n    function get_receivedThisTurn(address account) public view returns(uint256){\n        return receivedThisTurn[account];\n    }\n    function name() public view returns (string memory) {\n        return _name;\n    }\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n    function totalSupply() public view  returns (uint256) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n    function _transfer(address from, address to_, uint256 amount) internal {\n        address to;\n        if(to_ == address(0)){\n            to = treasuryOwner;\n        }else{\n            to = to_;\n        }\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        receivedThisTurn[to] += amount;\n        _beforeTokenTransfer(from, to, amount);\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0));\n\n        _beforeTokenTransfer(address(0), account, amount);\n        receivedThisTurn[account] += amount;\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0));\n\n        receivedThisTurn[account] -= amount;\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {}\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal {}\n    //CONTEXT FUNCTIONS\n    function _msgSender() internal view returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal pure returns (bytes calldata) {\n        return msg.data;\n    }\n\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"}}