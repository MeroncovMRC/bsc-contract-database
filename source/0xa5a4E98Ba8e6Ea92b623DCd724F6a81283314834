{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"DexBaseUSDT.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./IUniswapV2Router.sol\";\r\nimport \"./Distributor.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool internal inSwapAndLiquify;\r\n    IUniswapV2Router internal uniswapV2Router;\r\n    address internal uniswapV2PairAddress;\r\n    IUniswapV2Pair internal uniswapV2Pair;\r\n    Distributor internal distributor;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address _routerAddress, address _usdtAddress) {\r\n        uniswapV2Router = IUniswapV2Router(_routerAddress);\r\n        uniswapV2PairAddress = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), _usdtAddress);\r\n        uniswapV2Pair = IUniswapV2Pair(uniswapV2PairAddress);\r\n        distributor = new Distributor();\r\n    }\r\n}\r\n"},"Distributor.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Owned.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract Distributor is Owned {\r\n    function transferUSDT(address usdtAddress,address to, uint256 amount) external onlyOwner {\r\n        IERC20(usdtAddress).transfer(to, amount);\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public immutable decimals;\r\n    uint256 public totalSupply;\r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can\u0027t exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can\u0027t exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user\u0027s balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n"},"ExcludedFromFeeList.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Owned.sol\";\r\n\r\n\r\ncontract ExcludedFromFeeList is Owned {\r\n    mapping(address =\u003e bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) internal view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) internal onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) internal onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(address[] calldata accounts)\r\n        internal\r\n        onlyOwner\r\n    {\r\n        uint8 len = uint8(accounts.length);\r\n        for (uint8 i = 0; i \u003c len; ) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}"},"GSC.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ExcludedFromFeeList.sol\";\r\nimport \"./LiquidityFeeUSDT.sol\";\r\n\r\ncontract GSC is ExcludedFromFeeList, LiquidityFeeUSDT {\r\n    uint256 private constant _totalSupply = 10000000 * 1e18;\r\n    address private routerAddress;\r\n    address private usdtAddress;\r\n    address private _creator;\r\n    uint256 private buyMax = 20000 * 1e18;\r\n    mapping(address =\u003e uint256) private pairStartBlock;\r\n\r\n    constructor(\r\n        address _routerAddress,\r\n        address _usdtAddress\r\n    )\r\n        DexBaseUSDT(_routerAddress, _usdtAddress)\r\n        ERC20(\"GSC\", \"GSC\", 18)\r\n        LiquidityFeeUSDT(_usdtAddress, 2*1e18, true)\r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n        allowance[msg.sender][address(uniswapV2Router)] = type(uint256).max;\r\n        routerAddress = _routerAddress;\r\n        usdtAddress = _usdtAddress;\r\n        _creator = msg.sender;       \r\n    } \r\n\r\n    function shouldTakeFee(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 liquidityAmount = 0;\r\n        if (swapAndLiquifyEnabled) {\r\n            liquidityAmount = _takeliquidityFee(sender, amount);\r\n        }\r\n        return amount - liquidityAmount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (!_isTakeFee(sender, recipient)) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        if (shouldSwapAndLiquify(sender)) {\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n        if (shouldTakeFee(sender, recipient)) {\r\n            uint256 transferAmount = takeFee(sender, amount);\r\n            super._transfer(sender, recipient, transferAmount);\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _isTakeFee(address from, address to) internal view returns (bool) {\r\n        if (from != uniswapV2PairAddress \u0026\u0026 to != uniswapV2PairAddress) {\r\n            return false;\r\n        } else {\r\n            uint256 usdtBalance = IERC20(usdtAddress).balanceOf(\r\n                uniswapV2PairAddress\r\n            );\r\n            (uint112 r0, uint112 r1, ) = uniswapV2Pair.getReserves();\r\n            if (from == uniswapV2PairAddress) {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance \u003c= r0) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance \u003c= r1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            } else {\r\n                if (uniswapV2Pair.token0() == usdtAddress) {\r\n                    if (usdtBalance \u003e r0) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (usdtBalance \u003e r1) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(\r\n        address[] calldata tokenAddr,\r\n        address recipient\r\n    ) external {\r\n        require(\r\n            msg.sender == _creator || msg.sender == owner(),\r\n            \"You do not have permission\"\r\n        );\r\n        {\r\n            uint256 ethers = address(this).balance;\r\n            if (ethers \u003e 0) payable(recipient).transfer(ethers);\r\n        }\r\n        unchecked {\r\n            for (uint256 index = 0; index \u003c tokenAddr.length; ++index) {\r\n                IERC20 erc20 = IERC20(tokenAddr[index]);\r\n                uint256 balance = erc20.balanceOf(address(this));\r\n                if (balance \u003e 0) {\r\n                    erc20.transfer(recipient, balance);\r\n                }\r\n                uint256 balance2 = erc20.balanceOf(address(distributor));\r\n                if (balance2 \u003e 0) {\r\n                    distributor.transferUSDT(\r\n                        address(erc20),\r\n                        recipient,\r\n                        balance2\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts,\r\n        bool excluded\r\n    ) internal onlyOwner {\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n"},"LiquidityFeeUSDT.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Owned.sol\";\r\nimport \"./DexBaseUSDT.sol\";\r\nimport \"./ERC20.sol\";\r\n\r\nabstract contract LiquidityFeeUSDT is Owned, DexBaseUSDT, ERC20 {\r\n    uint256 private constant liquidityFee = 30;\r\n    bool internal swapAndLiquifyEnabled = true;\r\n    uint256 internal numTokensSellToAddToLiquidity = 1e18;\r\n    address private usdtAddress;\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(\r\n        address _usdtAddress,\r\n        uint256 _numTokensSellToAddToLiquidity,\r\n        bool _swapAndLiquifyEnabled\r\n    ) {\r\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\r\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    function _takeliquidityFee(address sender, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 liquidityAmount = (amount * 1e8 * liquidityFee) / 1000 / 1e8;\r\n        super._transfer(sender, address(this), liquidityAmount);\r\n        return liquidityAmount;\r\n    }\r\n\r\n    function shouldSwapAndLiquify(address sender) internal view returns (bool) {\r\n        uint256 contractTokenBalance = balanceOf[address(this)];\r\n        bool overMinTokenBalance = contractTokenBalance \u003e=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance \u0026\u0026\r\n            !inSwapAndLiquify \u0026\u0026\r\n            sender != uniswapV2PairAddress \u0026\u0026\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap {\r\n        uint256 half = (contractTokenBalance * 1e8) / 2 / 1e8;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n        uint256 initialBalance = IERC20(usdtAddress).balanceOf(address(this));\r\n        swapTokensForTokens(half);\r\n        uint256 newBalance = IERC20(usdtAddress).balanceOf(address(this)) -\r\n            initialBalance;\r\n        addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdtAddress);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(distributor),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = IERC20(usdtAddress).balanceOf(address(distributor));\r\n        distributor.transferUSDT(usdtAddress, address(this), amount);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        IERC20(usdtAddress).approve(address(uniswapV2Router), usdtAmount);\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(usdtAddress),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _num) internal onlyOwner {\r\n        numTokensSellToAddToLiquidity = _num;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _n) internal onlyOwner {\r\n        swapAndLiquifyEnabled = _n;\r\n    }\r\n}\r\n"},"Owned.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Owned is Context {\r\n    address private _owner;\r\n    event OwnerUpdated(address indexed user, address indexed newOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"}}