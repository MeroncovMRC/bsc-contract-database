{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"BNBPriceFeeds.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\ncontract PriceConsumerV3 {\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: BSC Mainnet\n     * Aggregator: BNB/USD\n     * Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\n     */\n    constructor() {\n        priceFeed = AggregatorV3Interface(\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\n        );\n    }\n\n    /**\n     * Returns the latest price.\n     */\n    function getLatestPrice() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"PresaleDual.sol":{"content":"/**\n    Presale contract for OpiPets Token with CA: 0x4C906B99A2f45A47C8570b7A41ffe940F71676AF\n    Author: Arrnaya (TG: @arrnaya)\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./Context.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./BNBPriceFeeds.sol\";\n\ncontract OpiPetsPresale is Ownable, ReentrancyGuard, PriceConsumerV3 {\n    using Address for address payable;\n\n    event Swap(\n        address indexed user,\n        uint256 inAmount,\n        uint256 owedToInvestorAmount\n    );\n    event Claimed(address indexed user, uint256 amount);\n    event PayeeTransferred(\n        address indexed previousPayee,\n        address indexed newPayee\n    );\n    event BNBCollected(address user, uint256 amount);\n    event IERC20TokenWithdrawn(address user, uint256 amount);\n    event BUSDWithdrawn(address user, uint256 amount);\n\n    IERC20 public opiPetsToken;\n    IERC20 public BUSD;\n    uint256 public BNBPriceInUSD;\n    address public fundCollectorWallet;\n\n    bool public isSwapStarted;\n    bool public isVested;\n    bool public canClaim;\n\n    uint256 public swapRate = 833333; // 8.33333 OpiPets Tokens per BUSD\n    uint256 public totalTokensSold;\n    uint256 public maxTokensToSell = 50_000_000 * 1e18; // Max 50M Opi Pets tokens to be sold\n\n    uint256 public totalFundsRaised;\n    uint256 public minBuyPerWallet = 10 * 1e18; // $10\n    uint256 public maxBuyPerWallet = 9999 * 1e18; // $9999\n\n    uint256 public daysPerVest;\n    uint256 public percentPerVest;\n    uint256 public initialClaimPercentage;\n    uint256 public vestingStartDate;\n\n    mapping(address =\u003e uint256) public spentByInvestor;\n    mapping(address =\u003e uint256) public owedToInvestor;\n    mapping(address =\u003e uint256) public claimedByInvestor;\n\n    constructor(\n        address _paymentCollectionWallet,\n        IERC20 _opiPetsToken,\n        IERC20 _BUSD,\n        bool _vestingStatus\n    ) {\n        require(\n            address(_opiPetsToken) != address(0) \u0026\u0026\n                _paymentCollectionWallet != address(0) \u0026\u0026\n                address(_BUSD) != address(0),\n            \"OpiPetsPresale: Can\u0027t set token to zero address\"\n        );\n\n        // setVestingParameters (_daysPerVest, _percentPerVest, _initialClaimPercentage);\n        opiPetsToken = _opiPetsToken;\n        BUSD = _BUSD;\n        fundCollectorWallet = _paymentCollectionWallet;\n        isVested = _vestingStatus;\n    }\n\n    // Function to receive Ether. msg.data must be empty\n    receive() external payable {}\n\n    function _swap() external payable nonReentrant {\n        getBNBPrice();\n\n        uint256 investmentAmnt = (msg.value * BNBPriceInUSD) / 1e8;\n\n        require(isSwapStarted == true, \"OpiPetsPresale: Swap not started\");\n        require(\n            totalTokensSold + ((investmentAmnt * swapRate)/ 1e5) \u003c= maxTokensToSell,\n            \"OpiPetsPresale: Exceeding total fund raise limit\"\n        );\n        require(\n            spentByInvestor[msg.sender] + investmentAmnt \u003c= maxBuyPerWallet \u0026\u0026\n                spentByInvestor[msg.sender] + investmentAmnt \u003e= minBuyPerWallet,\n            \"OpiPetsPresale: Try an amount above min but below max allowed per wallet!\"\n        );\n\n        uint256 quota = opiPetsToken.balanceOf(address(this));\n        uint256 outAmount = (investmentAmnt * swapRate)/ 1e5;\n        require(\n            totalTokensSold + outAmount \u003c= quota,\n            \"OpiPetsPresale: Not enough tokens remaining\"\n        );\n\n        totalTokensSold += outAmount;\n        totalFundsRaised += investmentAmnt;\n        payable(address(this)).sendValue(msg.value);\n        spentByInvestor[msg.sender] += investmentAmnt;\n        owedToInvestor[msg.sender] += outAmount;\n\n        emit Swap(msg.sender, investmentAmnt, outAmount);\n    }\n\n    function _swapWithBUSD(uint256 weiAmount) external nonReentrant {\n        require(isSwapStarted == true, \"OpiPetsPresale: Swap not started\");\n        require(\n            totalTokensSold + ((weiAmount * swapRate)/1e5) \u003c= maxTokensToSell,\n            \"OpiPetsPresale: Exceeding total fund raise limit\"\n        );\n        require(\n            spentByInvestor[msg.sender] + weiAmount \u003c= maxBuyPerWallet \u0026\u0026\n                spentByInvestor[msg.sender] + weiAmount \u003e= minBuyPerWallet,\n            \"OpiPetsPresale: Try an amount above min but below max allowed per wallet!\"\n        );\n\n        uint256 quota = opiPetsToken.balanceOf(address(this));\n        uint256 outAmount = (weiAmount * swapRate)/1e5;\n        require(\n            totalTokensSold + outAmount \u003c= quota,\n            \"OpiPetsPresale: Not enough tokens remaining\"\n        );\n\n        totalTokensSold += outAmount;\n        totalFundsRaised += weiAmount;\n        IERC20(BUSD).transferFrom(msg.sender, address(this), weiAmount);\n        spentByInvestor[msg.sender] += weiAmount;\n        owedToInvestor[msg.sender] += outAmount;\n\n        emit Swap(msg.sender, weiAmount, outAmount);\n    }\n\n    function getBNBPrice() internal returns (int256) {\n        (\n            ,\n            /* uint80 roundID */\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n        BNBPriceInUSD = uint256(price);\n\n        return price;\n    }\n\n    function claim() external nonReentrant {\n        require(canClaim == true, \"OpiPetsPresale: Can\u0027t claim yet\");\n\n        uint256 quota = opiPetsToken.balanceOf(address(this));\n\n        if (isVested) {\n            uint256 numberOfVests = (block.timestamp - vestingStartDate) /\n                daysPerVest; // rounds down\n            uint256 owedToInvestorNow = (owedToInvestor[msg.sender] *\n                initialClaimPercentage) /\n                100 +\n                (owedToInvestor[msg.sender] * numberOfVests * percentPerVest) /\n                100;\n\n            if (owedToInvestorNow \u003e owedToInvestor[msg.sender])\n                owedToInvestorNow = owedToInvestor[msg.sender];\n\n            require(\n                owedToInvestorNow - claimedByInvestor[msg.sender] \u003c= quota,\n                \"OpiPetsPresale: Not enough tokens remaining\"\n            );\n            require(\n                owedToInvestorNow - claimedByInvestor[msg.sender] \u003e 0,\n                \"OpiPetsPresale: No tokens left to claim\"\n            );\n\n            uint256 amount = owedToInvestorNow - claimedByInvestor[msg.sender];\n            claimedByInvestor[msg.sender] += owedToInvestorNow;\n            opiPetsToken.transfer(msg.sender, amount);\n\n            emit Claimed(msg.sender, amount);\n        } else {\n            uint256 owedToInvestorNow = owedToInvestor[msg.sender];\n            require(\n                owedToInvestorNow - claimedByInvestor[msg.sender] \u003c= quota,\n                \"OpiPetsPresale: Not enough tokens remaining\"\n            );\n            require(\n                owedToInvestorNow - claimedByInvestor[msg.sender] \u003e 0,\n                \"OpiPetsPresale: No tokens left to claim\"\n            );\n\n            uint256 amount = owedToInvestorNow;\n            claimedByInvestor[msg.sender] += owedToInvestorNow;\n            opiPetsToken.transfer(msg.sender, amount);\n\n            emit Claimed(msg.sender, amount);\n        }\n    }\n\n    function setVestingParameters(\n        uint256 _daysPerVest,\n        uint256 _percentPerVest,\n        uint256 _initialClaimPercentage\n    ) external onlyOwner {\n        require(isVested, \"This is not a vested presale!\");\n        require(\n            _initialClaimPercentage \u003c= 100,\n            \"OpiPetsPresale: Initial claim % must be \u003c= 100\"\n        );\n        require(\n            _percentPerVest \u003c= 100,\n            \"OpiPetsPresale: % per vest must be \u003c= 100\"\n        );\n\n        daysPerVest = _daysPerVest * 1 days;\n        percentPerVest = _percentPerVest;\n        initialClaimPercentage = _initialClaimPercentage;\n    }\n\n    function setVestingStartDate(uint256 _vestingStartDate) external onlyOwner {\n        require(isVested, \"This is not a vested presale!\");\n        require(\n            _vestingStartDate \u003e block.timestamp,\n            \"OpiPetsPresale: Vesting must start in the future\"\n        );\n\n        vestingStartDate = _vestingStartDate;\n    }\n\n    function toggleSwap(bool enableSwap) external onlyOwner {\n        isSwapStarted = enableSwap;\n    }\n\n    function setClaim(bool _canClaim) external onlyOwner {\n        canClaim = _canClaim;\n\n        if (_canClaim \u0026\u0026 isVested \u0026\u0026 vestingStartDate == 0)\n            vestingStartDate = block.timestamp;\n    }\n\n    function _changeFundCollectorWalletAddress(address newPayee)\n        external\n        onlyOwner\n    {\n        require(\n            newPayee != address(0),\n            \"OpiPetsPresale: Can\u0027t set payee to zero address\"\n        );\n        fundCollectorWallet = newPayee;\n\n        emit PayeeTransferred(fundCollectorWallet, newPayee);\n    }\n\n    function collectBNBs() external onlyOwner {\n\n        uint256 fundsToSend = address(this).balance;\n        bool sent = payable(fundCollectorWallet).send(fundsToSend);\n        require(sent, \"Failed to send Ether\");\n\n        emit BNBCollected(fundCollectorWallet, fundsToSend);\n    }\n\n    function withdrawOtherTokens(address _token) external onlyOwner {\n        require(_token != address(0), \"can\u0027t withdraw zero token\");\n        uint256 fundsToSend;\n        if (IERC20(_token) == opiPetsToken) {\n            fundsToSend =\n                opiPetsToken.balanceOf(address(this)) -\n                totalTokensSold;\n        } else {\n            fundsToSend = IERC20(_token).balanceOf(address(this));\n        }\n        IERC20(_token).transfer(msg.sender, fundsToSend);\n\n        emit IERC20TokenWithdrawn(msg.sender, fundsToSend);\n    }\n\n    function collectBUSD() external onlyOwner {\n        uint256 fundsToSend = BUSD.balanceOf(address(this));\n        IERC20(BUSD).transfer(fundCollectorWallet, fundsToSend);\n\n        emit BUSDWithdrawn(fundCollectorWallet, fundsToSend);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"}}