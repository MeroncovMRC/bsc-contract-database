{"Auth.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.8.0 \u003c0.9.0;\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping(address =\u003e bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address\u0027 authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address\u0027 authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IDexFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\ninterface IDexFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"},"IDexRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"},"Main.sol":{"content":"/*                                                                                                    \r\n                                       `..--:://///////::--..`             .:///////+-              \r\n                                   .-://://///::::::::::::::://:-.`       //:----://.`              \r\n                                .://::-:/::---------:::::/::::-::///:..  :+----://.                 \r\n                             .://:---:/:-------------------:::/:::--:///:s---:/+-``                 \r\n                          `-//:-----//-------------------------:://::--::/:::oo/////:.`             \r\n                        `://::::::-::----------------------:::::::://:::::::/::::::::///            \r\n                      `:+/:///::::::::::::-::::::::::::::::::::::::::::::::::::::::::://            \r\n                     :+/://::::::::::::::::::::::::::::::::::::::::::::-/::::::o/----.              \r\n                   .o/.`.--:::::://:::::::::::::::::+::::::://:::::----.`-/-````-/                  \r\n                 `/+````````.-`../.```....:....-....+:-``````./.``````````./-``..-+.                \r\n               `:/-:-.`````.-``../```````-````.````:+::```````./.````````..-/:::::-+-               \r\n              :+::::::::---:``-`:-``````-.```..```.o/::-```````-:...---:::::-/::::::o.              \r\n            `+::::::::::::/:-::-+--....-:....-...-/:/:::-..-----/::::::::::::-:::::::o              \r\n           `o:-::::::::::/:-::://:-----/:::-::-:/:.`.-::--------:/:::::::::::-/:::::://             \r\n           //--------::::/-://-..:-----+----:::-...```.----------+::::::::-----/------s             \r\n           //-----------+--:-.`.+s+//--/---+ooooo+.`````.--------+:------------/------o.            \r\n           .o----------:+-...-...:oso-./-..+so+/-`......``..-----+/-----:-----:/------o.            \r\n            +/:/-:/:--/ssoyyhhhyo/:--..:``````-/osyyhhyyso+/////++/---:://:---/:--:---s             \r\n            `o/::+++::+hdddhyyyyyhyo/:--.``-/ohddhhhhhddmmmmms-/+++:-:/++++:-:+---//://             \r\n        `-:///::++s+o+yddo-+:++++oyy.`..-```/ysy/oo++oosyodddy-.+++o++++o+++/+/----+os              \r\n         -:://+o+o:+++sho..o/////++:```````.:./o//////+os--yddh:`+++++oo+o++os:-----/+.             \r\n             :s+o:--++:o/``+/:::/:.```````````:++::::/++- ./dy/.`-o++o/:-:/o+o+:------//-           \r\n           :+::/+/--::-/.``-....-:````````````./---.---/:`.+:````:::/:-----:ooo:--------/+`         \r\n        `:+::--:o:-----/.`.`......`````````````..````.--````````.:----------+o:----------:+:        \r\n       -+::----/:------/``......````````````````.........``````.:-----------/o:-----------://       \r\n      -+:::---/:-------/........`````````````````...........``.::-----------:++:--:------::-//      \r\n      o:/y:--/::/------/........``````-oo-```````...........`-::-------------:o/--+:-----:/--+-     \r\n     -+//o---//os------/.`....````````ss++:``````...........::--------------:-oo::o+:-----++::o     \r\n     -++ +:--/oos/-----:/.````````````o++++-`````````.....::::://----------/+-oo+/oo:-----o/+:o.    \r\n     `h. .o--:/ooo:-----:o:```````````+++++/````````````.::---oo:--------:/oo:oooooo/----:o :++-    \r\n      -   //--:+/s+:-----oo+-.``....``:++++:``````..`````````/o/-------::+oos+ooosso+---:o`  os`    \r\n           //:-:-oo+:----osoo+/-.`...-.----.``...:..-````..:+so:-----::+oosooooso-ho/--:+`   -s     \r\n            .//::+.-+::--+y/ooo...`.``--.``.--....-.`::+syhysy/---::/+ooosyooso:  yo::+/            \r\n              `-://  :+::/o  `+.```````.:-.:..```.```-hdhyhmdy:--:+oso/-.yos/.    y++/`             \r\n                       -:++    +```````/ss::/-```````odyyhds..:::o/-`   /:.       +-                \r\n                              /o-``````sdo./y/``````.hhyhds```-:``o                                 \r\n                             -+`-::...-ydo`/yy+.``.-/:hyhh````````o`                                \r\n                            :-.-.``----yds`:ss+:::-.`--+dy````-``:/                                 \r\n                            `+```.....-ydh`+sss-::...```s+`````:/:                                  \r\n                            -+.````````+dd:osss````````.-:.`````+.                                  \r\n                            o.:````````yddhosss/``````````.-.`..+.                                  \r\n                           -:..-``````:ddmmdhhhhs-``````````-``+-                                   \r\n                           -:``-`````.-hddmmmhhhhd/``````````-`::                                   \r\n                            +````````-.sdddmmmhhdmh:.........--o`                                   \r\n                            ./``````..-hyyyyhdddddhs:.........hs                                    \r\n                             .:-```..:yyyyyyyyhddhyyyo:.....-odd/                                   \r\n                               .-----`yyyyyyyyyhhyyyyyy+--/ohhyyh/                                  \r\n                                      yyyyyyyyyyyyyyyyyyyyyyyyyyyh-                                     \r\nCustomized Hibiki Fork\r\n\r\n      +dddddddddddddddddhhyyhdmdddddmddddhhdddddddddddddhyso++++++syddddddddddddddddddddddddd+      \r\n      +ddddddddddddddddhhhyyhdmdddddmmdddhhddddddddddyo:------------/sddddddddddddddddddddddd+      \r\n      +ddddddddddddddddhhhyhhdmddddddddddhhdddddddds/-----------------:yddddddddddddddddddddd+      \r\n      +ddddddddddddddddhhhyssyyyhddddddddhhddddddh/---------------------odmmmmmmmmmmmmmmmmmmm+      \r\n      +ddddddddddddddddho/::----::/+sydddhhdddddy:-----------------------smmmmmmmmmmmmmmmmmmm+      \r\n      +mmmmmmmmmmmmmddo:--------------/ohhhdmmmy:------------------------:ddddddddddddddddddd+      \r\n      +dddddddddddddh/------------------:sdmmdy:-------:::---------------:ddddddddddddddddddd+      \r\n      +ddddddddddddd/--------------::/+ooshhhhysoosssssyyo//:------------/ddddddddddddddddddd+      \r\n      +mmmmmmmmmmmmh---------:/ooooossssssssssss/-syyssssyyysso+/::-----:hddddddddddddddddddd+      \r\n      +dddddddddddmh-------:/osso/+sssssssssssss::syhysssssyyssssyss+:/ohdddddddddddddddddddd+      \r\n      +mmmmmmmmmmmmm+----:osys+/+ssssssssssssss+-/s/.oyysssssssssssshysdddddddddddddddddddddd+      \r\n      +dddddddddddddd+-/syss+:+sssssssssssssss+-:ss`  +yyssssssssssssyy++hmdddddddddddddddddd+      \r\n      +dhhhhhhhhhhhdddhhsss:/osssssssssssssss+-:ss.    oysssssysssssssyyo-+hddddddddddddddddd+      \r\n      +ddddddddddddddyysso:+ssssssssssssssss/-/ys.     .hssssshssssysssyys:-sdddddddddddddddd+      \r\n      +mmmmmmmmmmmmhsysso:osssssssssssssss+::/so`       sssssysyssssysssyss--yddddddddddddddd+      \r\n      +mmmmmmmmmmdyssyss/ssssssyysssssss+::::+-         +sssss`+ssssysssssso-/hhddddddddddddd+      \r\n      +mmmmmmmmmdyssyss+ssssyyhyysssso+:::.--`      `.--ossss- `ssssyssssyss/-ysydddddddddddd+      \r\n      +mdddddddmysssysossyyyyysssso+//:-````        ``..yyyy/.` -sssyssssysss-sssyddddddddddd+      \r\n      +dddddddddsyssyssyyysssoo+/::-.``                -yso.``.-.sssyssssysss:ssssydddddddddd+      \r\n      +ddddddhhhsyyyyyyyss+//:-..``                 ```os/`     `osyyssssysso/yssssyddddddddd+      \r\n      +ddddddsyyyhsyhssoo+`   `                  ```..:/.        /syysssysss++yssssshdmdddddd+      \r\n      +dddddysyysyshdss.-```.-//++/`            .+ssyyyys+/-`    /s:ysssssss+sysssssyhdmmmmmm+      \r\n      +ddddhsysysyydd+s`-+yhddddh//-            -:-:sdddddddhs/` o..yssyssss/ysssssssyhmmmmmm+      \r\n      +dddhyhyssyyhdo`oyyhddddhyys                 /ysyhhhhddohho- -ysysssss:ysssssssyydddddd+      \r\n      +dddydmysssydd/oh+ sysshy/:s.                s:--yss/+h.`oys.:shssssso:yssssssssyyddddd+      \r\n      +ddhdmhysssshd::s  .o..--.:s                 -o`..-..++  `s+./+ysssss+/sssssssssyshhhhh+      \r\n      +dddddoosssssd- `    `:::/-                    .////+-   `-  -yssssss:ossssssssssyydddd+      \r\n      +ddmmd/syysssso.                  `                      `  /sssssss+-yssssssssssyshmmm+      \r\n      +dmmdd/sssyyssss+-.                              `````   ./sssssssss:oyssssssssssshyddd+      \r\n      +ddddh:sssyhy+////:.```          `....`       `` ````.-/ossssssssyy+/dssssssssssssdyhdd+      \r\n      +ddddh:ssshsy    ```````       `:.````.::`   ````./+ossssssyyyyyyso:+sssssssssssssddhdd+      \r\n      +mmddh:ssshso     `````       `+:::::::-:/.   ````.--::::-/yssssss/+`-yssssssssssshdddd+      \r\n      +ddddh:ssyyss                 ::----------+     ```````  `ossssss//. /sssssssssssshdddd+      \r\n      +ddhhh:ssyssy:                ./----------+              :ssssss//-`/sosssssssssssdmmmm+      \r\n      +dhhhs/osysssy/`               `-:::::::-:.             -ysssss/+//ohy+sssssssssssdmmmm+      \r\n      +dddh:++syssysys:`                     `-:`            .ssssso:oyyssyy:sssssssssssddmmm+      \r\n      +hddy-o/syshysssys+:``                               `:ysssso:ossssssh-ossssssssssdddmm+      \r\n      +hddo:s/syydhssssssyys+:.`                        `-+yhssss//ssssssssh-+ssssssssssddddd+      \r\n      +dhh:+sooydhhssssssyssssyysoo+:            .:/+osyyyyyssso:+sysssssssy:/ssssssssssddddd+      \r\n      +dyy-ssy/smddsssssshsssssyyo-+d`           oh-.oysshssso/+yssysssssssso:sssssssssshddhd+      \r\n      +mh//ssssodddssssssdsssyo:` +++            -++  .yhsso//ssssshsssssssss-ossssssssshddhd+      \r\n      +dd+osssyshddysssssdyo:`   `/               ./ `osso+/sysssssdysssssssy:/ssssssssshmhdd+      \r\n      /hh+ssssddydmysssys/.      -`               /-/sso+/:`./oysssdhsssssssso-ssssssssshhhdd+      \r\n      +dd+ssshddddmhssy--        /               `ysso/:.`   `-.+hsddssssssssy:+ssssssssyyddd+      \r\n      +dy+ssshddddddsss ..       o```.````     `:so/-``     `.` -hymmhssssssss+:sssssssssdmdd+      \r\n      +doossyydddddmhyo- .`      s----..--::-.:+y-`        ..` .+/ymmdsssssssss:osssssssydddd+      \r\n      +h+sshdsdddmmmh. :-`.`     o.......````.:o.        ... `::` .hmmhssssssss+/sssssssshddd+      \r\n      +h+syddhhddmmd-   .-``.`   :-   ``````.:/`      ``.` `.:.    -dmmyssssssss/ossssssyshdd+      \r\n      +hosddddhdddd+     `+-``..``+`  .`   `:-    ``..````--.       sdddyssssssss/ssssssdysdd+      \r\n      +yoyhhddhdddh`     -..--``..-+  .  `:-````..``` .--o`         /ddhhssssssssoosssssddshm+      \r\n      +yshddddddddo      /    .-:-`-/.`.//-.`````.---..  -.         .ddddhsssssssyosssssdmysd+      \r\n      +ssddddddddd/     `-  `+ossssyyssyooooooo-.`        /          ymdddhssssssshossssddhsh+     \r\n      \r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.8.0 \u003c0.9.0;\r\n\r\nimport \"./Auth.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./IDexRouter.sol\";\r\nimport \"./IDexFactory.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract VTube is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"VTube\";\r\n    string constant _symbol = \"VTUBE\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 _totalSupply = 36_000_000 * (10**_decimals);\r\n\r\n    mapping(address =\u003e uint256) _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) _allowances;\r\n    mapping(address =\u003e bool) isFeeExempt;\r\n\r\n    // Fees. Some may be completely inactive at all times.\r\n    uint256 liquidityFee = 30;\r\n    uint256 burnFee = 0;\r\n    uint256 stakingFee = 20;\r\n\r\n    uint256 feeDenominator = 1000;\r\n    bool public feeOnNonTrade = false;\r\n\r\n    //Percentage of regular fee to be applied on selling\r\n    uint256 sellFactor = 100;\r\n\r\n    uint256 public stakingPrizePool = 0;\r\n    bool public stakingRewardsActive = false;\r\n    address public stakingRewardsContract;\r\n\r\n    address public autoLiquidityReceiver;\r\n\r\n    IDexRouter public router;\r\n    address pcs2BNBPair;\r\n    address[] public pairs;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 20000;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    uint256 public launchedAt = 0;\r\n\r\n    event AutoLiquifyEnabled(bool enabledOrNot);\r\n    event AutoLiquify(uint256 amountBNB, uint256 autoBuybackAmount);\r\n    event StakingRewards(bool activate);\r\n\r\n    constructor() Auth(msg.sender) {\r\n        router = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pcs2BNBPair = IDexFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        pairs.push(pcs2BNBPair);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(\r\n                _allowances[sender][msg.sender] \u003e= amount,\r\n                \"Insufficient Allowance\"\r\n            );\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _isStakingReward(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            sender == stakingRewardsContract ||\r\n            recipient == stakingRewardsContract;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(amount \u003e 0);\r\n        if (inSwap || _isStakingReward(sender, recipient)) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            liquify();\r\n        }\r\n\r\n        if (!launched() \u0026\u0026 recipient == pcs2BNBPair) {\r\n            require(_balances[sender] \u003e 0);\r\n            require(\r\n                sender == owner,\r\n                \"Only the owner can be the first to add liquidity.\"\r\n            );\r\n            launch();\r\n        }\r\n\r\n        require(amount \u003c= _balances[sender], \"Insufficient Balance\");\r\n        _balances[sender] -= amount;\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\r\n            ? heSold(recipient)\r\n                ? takeFee(sender, amount, sellFactor)\r\n                : takeFee(sender, amount, 100)\r\n            : amount;\r\n        _balances[recipient] += amountReceived;\r\n\r\n        // Update staking pool, if active.\r\n        // Update of the pool can be deactivated for launch and staking contract migration.\r\n        if (stakingRewardsActive) {\r\n            sendToStakingPool();\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(amount \u003c= _balances[sender], \"Insufficient Balance\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Decides whether this trade should take a fee.\r\n    // Trades with pairs are always taxed, unless sender or receiver is exempted.\r\n    // Non trades, like wallet to wallet, are configured, untaxed by default.\r\n    function shouldTakeFee(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient] || !launched()) {\r\n            return false;\r\n        }\r\n\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i \u003c liqPairs.length; i++) {\r\n            if (sender == liqPairs[i] || recipient == liqPairs[i]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return feeOnNonTrade;\r\n    }\r\n\r\n    function heSold(address recipient) internal view returns (bool) {\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i \u003c liqPairs.length; i++) {\r\n            if (recipient == liqPairs[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 factor\r\n    ) internal returns (uint256) {\r\n        if (!launched()) {\r\n            return amount;\r\n        }\r\n        uint256 liqFee = 0;\r\n        uint256 bf = 0;\r\n        uint256 steak = 0;\r\n\r\n        // If there is a liquidity tax active for autoliq, the contract keeps it.\r\n        if (liquidityFee \u003e 0) {\r\n            liqFee = (amount * liquidityFee) / feeDenominator;\r\n            liqFee = withPercent(liqFee, factor);\r\n            _balances[address(this)] += liqFee;\r\n            emit Transfer(sender, address(this), liqFee);\r\n        }\r\n        // If there is an active burn fee, burn a percentage and give it to dead address.\r\n        if (burnFee \u003e 0) {\r\n            bf = (amount * burnFee) / feeDenominator;\r\n            bf = withPercent(bf, factor);\r\n            _balances[DEAD] += bf;\r\n            emit Transfer(sender, DEAD, bf);\r\n        }\r\n        // If staking tax is active, it is stored on ZERO address.\r\n        // If staking payout itself is active, it is later moved from ZERO to the appropriate staking address.\r\n        if (stakingFee \u003e 0) {\r\n            steak = (amount * stakingFee) / feeDenominator;\r\n            steak = withPercent(steak, factor);\r\n            _balances[ZERO] += steak;\r\n            stakingPrizePool += steak;\r\n            emit Transfer(sender, ZERO, steak);\r\n        }\r\n\r\n        return amount - liqFee - bf - steak;\r\n    }\r\n\r\n    function sendToStakingPool() internal {\r\n        _balances[ZERO] -= stakingPrizePool;\r\n        _balances[stakingRewardsContract] += stakingPrizePool;\r\n        emit Transfer(ZERO, stakingRewardsContract, stakingPrizePool);\r\n        stakingPrizePool = 0;\r\n    }\r\n\r\n    function setStakingRewardsAddress(address addy) external authorized {\r\n        stakingRewardsContract = addy;\r\n        isFeeExempt[addy] = true;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            launched() \u0026\u0026\r\n            msg.sender != pcs2BNBPair \u0026\u0026\r\n            !inSwap \u0026\u0026\r\n            swapEnabled \u0026\u0026\r\n            _balances[address(this)] \u003e= swapThreshold;\r\n    }\r\n\r\n    function setSwapEnabled(bool set) external authorized {\r\n        swapEnabled = set;\r\n        emit AutoLiquifyEnabled(set);\r\n    }\r\n\r\n    function liquify() internal swapping {\r\n        uint256 amountToLiquify = swapThreshold / 2;\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToLiquify,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance - balanceBefore;\r\n        uint256 amountBNBLiquidity = amountBNB / 2;\r\n\r\n        router.addLiquidityETH{value: amountBNBLiquidity}(\r\n            address(this),\r\n            amountToLiquify,\r\n            0,\r\n            0,\r\n            autoLiquidityReceiver,\r\n            block.timestamp\r\n        );\r\n        emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _burnFee,\r\n        uint256 _stakingFee,\r\n        uint256 _feeDenominator\r\n    ) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n        burnFee = _burnFee;\r\n        stakingFee = _stakingFee;\r\n\r\n        feeDenominator = _feeDenominator;\r\n        uint256 totalFee = _liquidityFee + _burnFee + _stakingFee;\r\n        require(\r\n            totalFee \u003c feeDenominator / 5,\r\n            \"Maximum allowed taxation on this contract is 20%.\"\r\n        );\r\n    }\r\n\r\n    function setSellFactor(uint256 _sellFactor) external authorized {\r\n        require(\r\n            _sellFactor \u003e= 100 \u0026\u0026 _sellFactor \u003c= 300,\r\n            \"Selling factor can never be less than 100% and never greater than 300%\"\r\n        );\r\n        sellFactor = _sellFactor;\r\n    }\r\n\r\n    function withPercent(uint256 _total, uint256 _percentage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _total.mul(_percentage).div(100);\r\n    }\r\n\r\n    function setLiquidityReceiver(address _autoLiquidityReceiver)\r\n        external\r\n        authorized\r\n    {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            _totalSupply - balanceOf(DEAD) - balanceOf(ZERO) + stakingPrizePool;\r\n    }\r\n\r\n    // Recover any BNB sent to the contract by mistake.\r\n    function rescue() external {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function setStakingRewardsActive(bool active) external authorized {\r\n        stakingRewardsActive = active;\r\n        emit StakingRewards(active);\r\n    }\r\n\r\n    function addPair(address pair) external authorized {\r\n        pairs.push(pair);\r\n    }\r\n\r\n    function removeLastPair() external authorized {\r\n        pairs.pop();\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}