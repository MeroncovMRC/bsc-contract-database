{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.5.16;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n  // Empty internal constructor, to prevent people from mistakenly deploying\n  // an instance of this contract, which should be used via inheritance.\n  constructor () internal { }\n\n  function _msgSender() internal view returns (address payable) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.5.16;\n\ninterface IBEP20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.5.16;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}"},"PURPLEX.sol":{"content":" // SPDX-License-Identifier: MIT\n /**\n ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄▄▄▄▄▄▄▄▄▄▄  ▄       ▄ \n▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌▐░▌     ▐░▌\n▐░█▀▀▀▀▀▀▀█░▌▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀  ▐░▌   ▐░▌ \n▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌            ▐░▌ ▐░▌  \n▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌          ▐░█▄▄▄▄▄▄▄▄▄    ▐░▐░▌   \n▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌    ▐░▌    \n▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌          ▐░█▀▀▀▀▀▀▀▀▀    ▐░▌░▌   \n▐░▌          ▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌          ▐░▌          ▐░▌            ▐░▌ ▐░▌  \n▐░▌          ▐░█▄▄▄▄▄▄▄█░▌▐░▌      ▐░▌ ▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄  ▐░▌   ▐░▌ \n▐░▌          ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌     ▐░▌\n ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀  ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀       ▀ \n**/\n\n        pragma solidity ^0.5.16;\n        import \"./Context.sol\";\n        import \"./IBEP20.sol\";\n        import \"./Ownable.sol\";\n        import \"./reentrancyguard.sol\";\n\n        library SafeMath {\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\n            uint256 c = a + b;\n            require(c \u003e= a, \"SafeMath: addition overflow\");\n\n            return c;\n        }\n  \n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n            return sub(a, b, \"SafeMath: subtraction overflow\");\n        }\n\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b \u003c= a, errorMessage);\n            uint256 c = a - b;\n\n            return c;\n        }\n\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n            if (a == 0) {\n            return 0;\n            }\n            uint256 c = a * b;\n            require(c / a == b, \"SafeMath: multiplication overflow\");\n\n            return c;\n        }\n\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n            return div(a, b, \"SafeMath: division by zero\");\n        }\n\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b \u003e 0, errorMessage);\n            uint256 c = a / b;\n\n            return c;\n        }\n\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n            return mod(a, b, \"SafeMath: modulo by zero\");\n        }\n\n\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b != 0, errorMessage);\n            return a % b;\n        }\n        }\n\n        contract PURPLEX is Context, IBEP20, ReentrancyGuard,Ownable {\n        using SafeMath for uint256;\n        mapping (address =\u003e uint256) private _balances;\n        mapping(address =\u003e bool) public _isBlackListedBot;\n        mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n        uint256 private _totalSupply;\n        uint8 private _decimals;\n        string private _symbol;\n        string private _name;\n        event botAddedToBlacklist(address account);\n        event botRemovedFromBlacklist(address account);\n\n        constructor() public {\n            _name = \"PURPLEX\";\n            _symbol = \"PRPL\";\n            _decimals = 8;\n            _totalSupply = 1000000000 * (10 ** 8);\n            _balances[msg.sender] = _totalSupply;\n            emit Transfer(address(0), msg.sender, _totalSupply);\n        }\n\n        function getOwner() external view returns (address) {\n            return owner();\n        }\n    \n        function decimals() external view returns (uint8) {\n            return _decimals;\n        }\n\n        function symbol() external view returns (string memory) {\n            return _symbol;\n        }\n    \n        function name() external view returns (string memory) {\n            return _name;\n        }\n\n        function totalSupply() external view returns (uint256) {\n            return _totalSupply;\n        }\n\n        function balanceOf(address account) external view returns (uint256) {\n            return _balances[account];\n        }\n\n        function transfer(address recipient, uint256 amount) external returns (bool) {\n            _transfer(_msgSender(), recipient, amount);\n            return true;\n        }\n    \n        function allowance(address owner, address spender) external view returns (uint256) {\n            return _allowances[owner][spender];\n        }\n\n        function approve(address spender, uint256 amount) external returns (bool) {\n            _approve(_msgSender(), spender, amount);\n            return true;\n        }\n\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n            require(!_isBlackListedBot[sender], \"Account is blacklisted\");\n            _transfer(sender, recipient, amount);\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"PURPLEX: transfer amount exceeds allowance\"));\n            return true;\n        }\n    \n        function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n            return true;\n        }\n\n        function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"PURPLEX: decreased allowance below zero\"));\n            return true;\n        }\n    \n        function mint(uint256 amount) public onlyOwner returns (bool) {\n            _mint(_msgSender(), amount);\n            return true;\n        }\n    \n        function _transfer(address sender, address recipient, uint256 amount) internal {\n            require(!_isBlackListedBot[sender], \"Account is blacklisted\");\n            require(sender != address(0), \"PURPLEX: transfer from the zero address\");\n            require(recipient != address(0), \"PURPLEX: transfer to the zero address\");\n\n            _balances[sender] = _balances[sender].sub(amount, \"PURPLEX: transfer amount exceeds balance\");\n            _balances[recipient] = _balances[recipient].add(amount);\n            emit Transfer(sender, recipient, amount);\n        }\n\n        function _mint(address account, uint256 amount) internal {\n            require(account != address(0), \"PURPLEX: mint to the zero address\");\n            require(!_isBlackListedBot[account], \"Account is blacklisted\");\n\n            _totalSupply = _totalSupply.add(amount);\n            _balances[account] = _balances[account].add(amount);\n            emit Transfer(address(0), account, amount);\n        }\n\n        function _burn(address account, uint256 amount) internal {\n            require(account != address(0), \"PURPLEX: burn from the zero address\");\n            require(!_isBlackListedBot[account], \"Account is blacklisted\");\n            _balances[account] = _balances[account].sub(amount, \"PURPLEX: burn amount exceeds balance\");\n            _totalSupply = _totalSupply.sub(amount);\n            emit Transfer(account, address(0), amount);\n        }\n    \n        function _approve(address owner, address spender, uint256 amount) internal {\n            require(owner != address(0), \"PURPLEX: approve from the zero address\");\n            require(spender != address(0), \"PURPLEX: approve to the zero address\");\n            _allowances[owner][spender] = amount;\n            emit Approval(owner, spender, amount);\n        }\n\n        \n        function _burnFrom(address account, uint256 amount) internal {\n            _burn(account, amount);\n            _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"PURPLEX: burn amount exceeds allowance\"));\n        }\n\n        function burn(uint256 amount) public {\n                _burn(_msgSender(), amount);\n            }\n            //admin functions\n            function addBotToBlacklist(address account) external onlyOwner {\n                require(!_isBlackListedBot[account], \"Account is already blacklisted\");\n                _isBlackListedBot[account] = true;\n\n                emit botAddedToBlacklist(account);\n            }\n\n            function removeBotFromBlacklist(address account) external onlyOwner {\n                require(_isBlackListedBot[account], \"Account is not blacklisted\");\n                _isBlackListedBot[account] = false;\n                emit botRemovedFromBlacklist(account);\n            }\n            // Recovery functions\n            function rescueTokens(address _stuckToken, uint256 _amount)\n                external\n                onlyOwner\n            {\n                IBEP20(_stuckToken).transfer(msg.sender, _amount);\n            }\n\n            function rescueBurn(uint256 _amount) external onlyOwner {\n                _transfer(address(this), msg.sender, _amount);\n            }\n        }\n\n"},"reentrancyguard.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.5.16;\ncontract ReentrancyGuard {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n    uint256 private _status;\n    constructor() internal {\n        _status = _NOT_ENTERED;\n    }\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n    function _nonReentrantBefore() private {\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n        _status = _ENTERED;\n    }\n    function _nonReentrantAfter() private {\n        _status = _NOT_ENTERED;\n    }\n}"}}