// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Token {
    string public name = "HUSKY";
    string public symbol = "HUSKY";
    uint256 public totalSupply = 1000000000000000000000000000000000; // maximum token supply
    uint8 public decimals = 18;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    uint256 public maxBalance = 10000000000000000000000000000000; // maximum balance per address
    uint256 public transactionFee = 3; // transaction fee in percentage
    address public marketingAddress;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    constructor(address _marketing) {
        balanceOf[msg.sender] = totalSupply;
        marketingAddress = _marketing;
    }
    function _transfer(address _from, address _to, uint256 _value) internal {
        require(_from != address(0), "Transfer from the zero address");
        require(_to != address(0), "Transfer to the zero address");
        require(balanceOf[_from] >= _value, "Not enough balance");
        require(balanceOf[_to] + _value <= maxBalance, "Maximum balance exceeded");
        uint256 fee = _value * transactionFee / 100;
        uint256 netValue = _value - fee;
        balanceOf[_from] -= _value;
        balanceOf[_to] += netValue;
        balanceOf[marketingAddress] += fee;
        emit Transfer(_from, _to, netValue);
    }
    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to, _value);
        return true;
    }
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender], "Not approved amount");
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function setMaxBalance(uint256 _value) public {
        require(msg.sender == marketingAddress, "Only the marketing address can set max balance");
        maxBalance = _value;
    }
}