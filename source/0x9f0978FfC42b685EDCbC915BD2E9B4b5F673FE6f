{"Context.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"EnumerableSet.sol":{"content":"pragma solidity ^0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 =\u003e uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue\u0027s index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"},"JoyCoin_Stake.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./Token.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./EnumerableSet.sol\";\r\n\r\ncontract JoyCoin_Stake is Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    event RewardsTransferred(address holder, uint256 amount);\r\n    \r\n    // JoyCoin token contract address\r\n    address public joyCoin;\r\n    address public joyCoinICO;\r\n    \r\n    // reward rate 2.5 per month\r\n    uint256 public rewardRateForJoy = 250;\r\n    uint256 public rewardRateForBnb = 250;\r\n    uint256 public joyCoinPrice = 100;\r\n    uint256 public rewardInterval = 30 days;\r\n    \r\n    uint256 public totalJoyClaimed;\r\n    uint256 public totalBNBClaimed;\r\n    uint256 public totalJoyCoinStakeYet;\r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    \r\n    mapping (address =\u003e uint256) private stakedTokens;\r\n    mapping (address =\u003e uint256) public stakingTime;\r\n    mapping (address =\u003e uint256) public lastClaimedTime;\r\n    mapping (address =\u003e uint256) private totalEarnedBnb;\r\n    mapping (address =\u003e uint256) private totalEarnedJoy;\r\n    mapping (address =\u003e uint256) private unclaimedReward;\r\n\r\n    constructor(address joyToken, address joyICO) {\r\n        joyCoin = joyToken;\r\n        joyCoinICO = joyICO;\r\n    }\r\n\r\n    function getStakedTokens(address user) public view returns (uint256) {\r\n        return stakedTokens[user];\r\n    }\r\n\r\n    function totalBnbEarned(address user) public view returns (uint256) {\r\n        return totalEarnedBnb[user];\r\n    }\r\n\r\n    function totalUnclaimedReward(address user) public view returns (uint256) {\r\n        return unclaimedReward[user];\r\n    }\r\n\r\n    function totalJoyEarned(address user) public view returns (uint256) {\r\n        return totalEarnedJoy[user];\r\n    }\r\n\r\n    function totalTokenStakedYet() public view returns (uint256) {\r\n        return totalJoyCoinStakeYet;\r\n    }\r\n    \r\n    function updateAccount(address account) private {\r\n        uint256 pendingJoyReward = getPendingJoyReward(account);\r\n        uint256 pendingBNBReward = getPendingBNBReward(account);\r\n\r\n        if (pendingJoyReward \u003e 0) {\r\n            require(Token(joyCoin).transfer(account, pendingJoyReward), \"JoyCoin_Stake: Could not transfer tokens.\");\r\n            totalEarnedJoy[account] = totalEarnedJoy[account].add(pendingJoyReward);\r\n            totalJoyClaimed = totalJoyClaimed.add(pendingJoyReward);\r\n            emit RewardsTransferred(account, pendingJoyReward);\r\n        }\r\n        if (pendingBNBReward \u003e 0) {\r\n            payable(msg.sender).transfer(pendingBNBReward);\r\n            totalEarnedBnb[account] = totalEarnedBnb[account].add(pendingBNBReward);\r\n            totalBNBClaimed = totalBNBClaimed.add(pendingBNBReward);\r\n            emit RewardsTransferred(account, pendingBNBReward);\r\n        }\r\n        lastClaimedTime[account] = block.timestamp;\r\n    }\r\n    \r\n    function getPendingJoyReward(address _holder) public view returns (uint256) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (stakedTokens[_holder] == 0) return 0;\r\n\r\n        uint256 timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\r\n        uint256 stakedAmount = stakedTokens[_holder];\r\n        \r\n        uint256 pendingReward = stakedAmount\r\n                            .mul(rewardRateForJoy)\r\n                            .mul(timeDiff)\r\n                            .div(rewardInterval)\r\n                            .div(1e4);\r\n            \r\n        return pendingReward;\r\n    }\r\n    \r\n    function getPendingBNBReward(address _holder) public view returns (uint256) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (stakedTokens[_holder] == 0) return 0;\r\n\r\n        uint256 timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\r\n        uint256 stakedAmount = stakedTokens[_holder];\r\n        \r\n        uint256 pendingReward = stakedAmount\r\n                            .mul(rewardRateForBnb)\r\n                            .mul(timeDiff)\r\n                            .div(rewardInterval)\r\n                            .div(1e4)\r\n                            .div(joyCoinPrice);\r\n            \r\n        return pendingReward;\r\n    }\r\n    \r\n    function getNumberOfHolders() public view returns (uint256) {\r\n        return holders.length();\r\n    }\r\n    \r\n    function stake(uint256 amountToStake) public {\r\n        require(stakedTokens[msg.sender].add(amountToStake) \u003c= Token(joyCoinICO)._totalBoughtAmount(msg.sender), \"JoyCoin_Stake: Airdrop token are not allowed or use the same address..\");\r\n        require(amountToStake \u003e 0, \"JoyCoin_Stake: Cannot deposit 0 Tokens\");\r\n        require(Token(joyCoin).transferFrom(msg.sender, address(this), amountToStake), \"JoyCoin_Stake: Insufficient Token Allowance\");\r\n        \r\n        updateAccount(msg.sender);\r\n        stakedTokens[msg.sender] = stakedTokens[msg.sender].add(amountToStake);\r\n        totalJoyCoinStakeYet = totalJoyCoinStakeYet.add(amountToStake);\r\n        \r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n            stakingTime[msg.sender] = block.timestamp;\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint256 amountToWithdraw) public {\r\n        require(stakedTokens[msg.sender] \u003e= amountToWithdraw, \"JoyCoin_Stake: Invalid amount to withdraw\");\r\n        \r\n        updateAccount(msg.sender);\r\n        \r\n        require(Token(joyCoin).transfer(msg.sender, amountToWithdraw), \"JoyCoin_Stake: Could not transfer tokens.\");\r\n        \r\n        stakedTokens[msg.sender] = stakedTokens[msg.sender].sub(amountToWithdraw);\r\n        totalJoyCoinStakeYet = totalJoyCoinStakeYet.sub(amountToWithdraw);\r\n        \r\n        if (holders.contains(msg.sender) \u0026\u0026 stakedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() public {\r\n        require(Token(joyCoin).transfer(msg.sender, stakedTokens[msg.sender]), \"JoyCoin_Stake: Could not transfer tokens.\");\r\n        unclaimedReward[msg.sender] = unclaimedReward[msg.sender].add(getPendingJoyReward(msg.sender));\r\n        stakedTokens[msg.sender] = 0;\r\n        holders.remove(msg.sender);\r\n        totalJoyCoinStakeYet = totalJoyCoinStakeYet.sub(stakedTokens[msg.sender]);\r\n    }\r\n    \r\n    function claimReward() public {\r\n        updateAccount(msg.sender);\r\n    }\r\n    \r\n    function updateRewardPercent(uint256 bnb, uint256 joy) public onlyOwner {\r\n        rewardRateForBnb = bnb;\r\n        rewardRateForJoy = joy;\r\n    }\r\n    \r\n    function updateJoyCoinPrice(uint256 price) public onlyOwner {\r\n        joyCoinPrice = price;\r\n    }\r\n\r\n    function updateJoyCoinAndIcoContract(address ico) public onlyOwner {\r\n        joyCoinICO = ico;\r\n    }\r\n    \r\n    function transferAnyBEP20Tokens(address token, address to, uint256 amount) public onlyOwner {\r\n        if (token == joyCoin) {\r\n            require(Token(joyCoin).balanceOf(address(this)).sub(totalJoyCoinStakeYet) \u003c= amount, \"JoyCoin_Stake: You can\u0027t withdraw users staked token..\");\r\n        }\r\n        Token(token).transfer(to, amount);\r\n    }\r\n    \r\n    function transferBNB(uint256 amount, address payable recipient) public onlyOwner {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    receive () external payable {\r\n        \r\n    }\r\n}"},"Ownable.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/OpenZeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"Token.sol":{"content":"pragma solidity 0.8.19;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface Token {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function _totalBoughtAmount(address) external returns (uint256);\r\n    function balanceOf(address) external returns (uint256);\r\n}"}}