
// File: contracts/CqToken.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;
pragma experimental ABIEncoderV2;


interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}
 
library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }


    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

  
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

 
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }


    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

   
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }


    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert xxreason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
     function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );
}

library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}

library EnumerableSet {
   
    struct Set {
        bytes32[] _values;
        mapping (bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { // Equivalent to contains(set, value)
            
            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

    
            bytes32 lastvalue = set._values[lastIndex];

            set._values[toDeleteIndex] = lastvalue;
            // Update the index for the moved value
            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based

            set._values.pop();

            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    struct Bytes32Set {
        Set _inner;
    }

    
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }


    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

   
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }


    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}

interface IUniswapV2Pair {
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function sync() external;
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}

contract CqToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
   
    string private _name = "CqToken";
    string private _symbol = "CQ";
    uint8 private _decimals = 8;
    uint256 private _totalSupply = 10000 * 10 ** uint256(_decimals);

    uint256 public _totalTaxIfBuying = 10;
    uint256 public _totalTaxIfSelling = 10;
    uint256 public _transferFee=0;

    uint256 public _lpBonusFee = 50;
    uint256 public _teamBonusFee = 50;

    
    uint256 public _marketFee = 50;
    uint256 public _fundFee = 50;

    address public  marketingAddress = 0x015a14750512f82EaECf6902fE556Af82c6E891a;
    address public  fundAddress = 0x17beE262C809Bd95e106e6ac514Ee45c6c4886BF;
    

    uint256 private minimumTokensBeforeSwap = 10 * 10**uint256(_decimals); 
    uint public shareCondition = 100 * 10 ** 18;
    uint public reserveAmount = 1 * 10 ** 4;

    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;
    address public  usdt=0xB12E8Eb6b1F24e14381514d2f3B75e7c61487016;
    mapping (address => bool) public isExcludedFee;
    mapping (address => bool) public isMarketPair;
    IUniswapV2Router02 public uniswapV2Router;
    address public  uniswapV2Pair;
    

    EnumerableSet.AddressSet private _lpHolders;
    bool inSwapAndLiquify;
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    event SwapTokensForTokens(
        uint256 amountIn,
        address[] path
    );
    mapping(address => bool) public isDividendOnHoldLPExempt;
    TokenDistributor public _tokenDistributor;
    uint256 public currentIndex;
    uint256 distributorGas = 200000;
    uint256 public minPeriod = 21600;
    bool public bonusStatus=true;
    uint256 public lastTimeDividend;

    bool swapSellStatus=true;
    bool swapBuyStatus=true;
    
    constructor ()  {
        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); 
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), usdt);
        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;
        isMarketPair[uniswapV2Pair] = true;

        isExcludedFee[_msgSender()] = true;
        isExcludedFee[address(this)] = true;

        isDividendOnHoldLPExempt[address(0)] = true;
        isDividendOnHoldLPExempt[deadAddress] = true;
        isDividendOnHoldLPExempt[uniswapV2Pair] = true;
        
        _tokenDistributor = new TokenDistributor(usdt);

        lastTimeDividend = block.timestamp;
        _balances[address(0x6A73C2A2Ef8abBcd3b158f900F99936C5373c428)] = _totalSupply;
        emit Transfer(address(0), address(0x6A73C2A2Ef8abBcd3b158f900F99936C5373c428), _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function setTokenAmount(uint rc,uint sc,uint min)external onlyOwner{
        reserveAmount = rc;
        shareCondition = sc;
        minimumTokensBeforeSwap = min;
    }

    function setMarketPairStatus(address account, bool newValue) public onlyOwner {
        isMarketPair[account] = newValue;
    }
    
    function setExcludedFee(address addr) external onlyOwner returns (bool){
        isExcludedFee[addr] = true;
        return true;
    }
   
    function unExcludedFee(address addr) external onlyOwner returns (bool){
        isExcludedFee[addr] = false;
        return true;
    }

    function setExcludeFromDividends(address account, bool b) external onlyOwner {
        isDividendOnHoldLPExempt[account]=b;
    }

    function setLpBonus(uint256 _minPeriod, bool _bonusStatus,uint256 _gas) external onlyOwner {
        minPeriod=_minPeriod;
        bonusStatus=_bonusStatus;
        distributorGas=_gas;
    }

    function setSwapStatus(bool _swapBuyStatus,bool _swapSellStatus) external onlyOwner {
        swapBuyStatus=_swapBuyStatus;
        swapSellStatus=_swapSellStatus;
    }


    receive() external payable {}

    function _take(uint256 tValue,address from,address to) private {
        _balances[to] = _balances[to].add(tValue);
        emit Transfer(from, to, tValue);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address sender,address recipient,uint256 amount) private   returns (bool){
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;
        if (overMinimumTokenBalance&&!inSwapAndLiquify && !isMarketPair[sender]){
            swap(contractTokenBalance);
        }
        uint256 realAmount= amount;
        if(!_isContract(sender)&&_balances[sender].sub(amount)==0){
            realAmount= amount.sub(reserveAmount);
        }
        _balances[sender] = _balances[sender].sub(realAmount, "Insufficient Balance");
        uint256 finalAmount = (isExcludedFee[sender] || isExcludedFee[recipient]) ? realAmount : takeFee(sender, recipient, realAmount);
        _balances[recipient] = _balances[recipient].add(finalAmount);
        emit Transfer(sender, recipient, finalAmount);
        if(bonusStatus) _processLPHolders(sender,recipient);
        return true;
    }

    function _processLPHolders(address from, address to) internal {
        if (!isDividendOnHoldLPExempt[from]) _processAddrToArray(from);
        if (!isDividendOnHoldLPExempt[to]) _processAddrToArray(to);

        uint256 nowBanance = IERC20(usdt).balanceOf(address(this));
        if (nowBanance >= shareCondition && lastTimeDividend+minPeriod <= block.timestamp) {
            process(distributorGas, nowBanance);
            lastTimeDividend = block.timestamp;
        }
    }

    function _processAddrToArray(address addr) private {
        uint256 holdLPAmount = IERC20(uniswapV2Pair).balanceOf(addr);
        if(_lpHolders.contains(addr)) {
            if(holdLPAmount == 0) _lpHolders.remove(addr);
            return;
        }
        if (holdLPAmount == 0) return;
        if(!_isContract(addr))
        _lpHolders.add(addr);
    }

    function process(uint256 gas,uint256 nowBanance) public {
        uint256 shareholderCount = _lpHolders.length();
        if (shareholderCount == 0) return;
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();
        uint256 iterations = 0;
        uint256 lpTotalSupply = IERC20(uniswapV2Pair).totalSupply();
        uint256 ci = currentIndex;
        while (gasUsed < gas && iterations < shareholderCount) {
            if(ci >= shareholderCount) {
                ci = 0;
            }
            address account = _lpHolders.at(ci);
            uint256 amount = nowBanance.mul(IERC20(uniswapV2Pair).balanceOf(account)).div(lpTotalSupply);
            if (amount > 0) {
                IERC20(usdt).transfer(account, amount);
            }
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            ++ci;
            ++iterations;
        }
        currentIndex = ci;
    }

    function getLpHolders(address addr) public view returns (uint256,uint256,uint256,uint256){
        uint256 nowBanance = IERC20(usdt).balanceOf(address(this));
        uint256 lpTotalSupply = IERC20(uniswapV2Pair).totalSupply();
        uint256 meLpTotalSupply= IERC20(uniswapV2Pair).balanceOf(addr);
        uint256 amount = nowBanance.mul(IERC20(uniswapV2Pair).balanceOf(addr)).div(lpTotalSupply);
        return (_lpHolders.length(),lpTotalSupply,meLpTotalSupply,amount);
    }

    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
        uint256 feeAmount = 0;
        if(isMarketPair[sender]) {
            require(swapBuyStatus, "Swap: Buy Not yet enabled");
            feeAmount = amount.mul(_totalTaxIfBuying).div(1000);
        }else if(isMarketPair[recipient]) {
            require(swapSellStatus, "Swap: Sell Not yet enabled");
            feeAmount = amount.mul(_totalTaxIfSelling).div(1000);
        }
        if(feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }
        return amount.sub(feeAmount);
    }

    function swap(uint256 tokenAmount) private lockTheSwap {
        swapTokensForExactTokens(tokenAmount,address(_tokenDistributor));
        IERC20 usdtErc20 = IERC20(usdt);
        uint256 totalAmount = usdtErc20.balanceOf(address(_tokenDistributor));

        uint256 _lpAmount = totalAmount.mul(_lpBonusFee).div(100);
        if(_lpAmount > 0){
            usdtErc20.transferFrom(address(_tokenDistributor), address(this), _lpAmount);
        }
        uint256 _teamAmount = totalAmount.sub(_lpAmount);
        uint256 _marketingAmount = _teamAmount.mul(_marketFee).div(100);
        if(_marketingAmount > 0){
            usdtErc20.transferFrom(address(_tokenDistributor), marketingAddress, _marketingAmount);
        }
         uint256 _fundAmount = _teamAmount.sub(_marketingAmount);
        if(_fundAmount > 0){
            usdtErc20.transferFrom(address(_tokenDistributor), fundAddress, _fundAmount);
        }
    }

    function swapTokensForExactTokens(uint tokenAmount,address to) private lockTheSwap{
        if(tokenAmount>0){
            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = address(usdt);
            _approve(address(this), address(uniswapV2Router), tokenAmount);
            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0, 
                path,
                to,
                block.timestamp
            );
            emit SwapTokensForTokens(tokenAmount, path);
        }
    }
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function donateDust(address addr, uint256 amount) external onlyOwner {
        IERC20(usdt).transfer(addr, amount);
    }

    function donateEthDust(uint256 amount) external payable onlyOwner {
        TransferHelper.safeTransferETH(_msgSender(), amount);
    }

    function _isContract(address a) public view returns(bool){
        uint256 size;
        assembly {size := extcodesize(a)}
        return size > 0;
    }


}
