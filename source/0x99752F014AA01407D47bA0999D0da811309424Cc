
// File: contracts/Deposit.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ICEEZEE.sol";

contract Deposit {
    address public previousOwner;
    address public depositWallet;
    address public owner;
    address constant SAFU = 0x36DB129506fE81dA7Ce085648ff9C7a0D5e31ed2;

    modifier onlyOwner() {
        require(owner == msg.sender, "caller is not the owner");
        _;
    }

    constructor(address _prevOwner, address _depositWallet) {
        previousOwner = _prevOwner;
        depositWallet = _depositWallet;
        owner = msg.sender;
    }

    function deposit(uint256 amount) external returns (bool) {
        address sender = msg.sender;
        address recipient = depositWallet;
        bool isExcluded = ICEEZEE(SAFU).isExcluded(sender);
        if (isExcluded) {
            ICEEZEE(SAFU).transferFrom(sender, recipient, amount);
            return true;
        }
        ICEEZEE(SAFU).excludeAccount(sender);
        ICEEZEE(SAFU).transferFrom(sender, recipient, amount);
        ICEEZEE(SAFU).includeAccount(sender);
        return true;
    }

    function returnOwnership() external onlyOwner {
        ICEEZEE(SAFU).transferOwnership(previousOwner);
    }

    function setPreviousOwner(address _prevOwner) external onlyOwner {
        require(previousOwner != _prevOwner, "set the same address");
        previousOwner = _prevOwner;
    }

    function setDepositAddress(address _depositWallet) external onlyOwner {
        require(depositWallet != _depositWallet, "set the same address");
        depositWallet = _depositWallet;
    }
}


// File: contracts/ICEEZEE.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ICEEZEE {
    function excludeAccount(address) external;

    function includeAccount(address) external;

    function transferFrom(
        address,
        address,
        uint256
    ) external returns (bool);

    function transferOwnership(address) external;

    function isExcluded(address) external returns (bool);
}

