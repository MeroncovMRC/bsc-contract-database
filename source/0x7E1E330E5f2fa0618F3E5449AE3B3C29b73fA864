// SPDX-License-Identifier: GPL-3.0-only

// File: @openzeppelin/contracts/GSN/Context.sol


pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/math/SafeMath.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/utils/Address.sol


pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol


pragma solidity >=0.6.0 <0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: contracts/IExchange.sol

pragma solidity ^0.6.0;

interface IExchange
{
	function calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);
	function calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external payable returns (uint256 _outputAmount);
	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external payable returns (uint256 _inputAmount);
}

// File: contracts/ConversionVault.sol

pragma solidity ^0.6.0;






contract ConversionVault is Ownable
{
	using SafeERC20 for IERC20;
	using SafeMath for uint256;

	address payable public manager;
	address payable public vault;
	address public exchange;

	mapping (address => uint256) public dailyConversionLimit;
	mapping (address => uint256[2]) private dailyConversionConsumption;

	modifier onlyManager()
	{
		require(msg.sender == manager, "access denied");
		_;
	}

	constructor () public
	{
		manager = msg.sender;
		vault = msg.sender;
	}

	function withdrawFunds(address _token, uint256 _amount) external onlyManager
	{
		address payable _to = vault;
		if (_token == address(0)) {
			_to.transfer(_amount);
		} else {
			IERC20(_token).safeTransfer(_to, _amount);
		}
	}

	function withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyManager
	{
		require(_tokens.length == _amounts.length, "length mismatch");
		address payable _to = vault;
		uint256 _length = _tokens.length;
		for (uint256 _i = 0; _i < _length; _i++) {
			address _token = _tokens[_i];
			uint256 _amount = _amounts[_i];
			if (_token == address(0)) {
				_to.transfer(_amount);
			} else {
				IERC20(_token).safeTransfer(_to, _amount);
			}
		}
	}

	function calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)
	{
		uint256 _today = (block.timestamp / 1 days) * 1 days;
		uint256 _limit = dailyConversionLimit[_token];
		uint256[2] storage _array = dailyConversionConsumption[_token];
		uint256 _date = _array[0];
		uint256 _consumed = _array[1];
		if (_date != _today) {
			_consumed = 0;
		}
		if (_limit <= _consumed) {
			return 0;
		}
		return _limit - _consumed;
	}

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyManager returns (uint256 _outputAmount)
	{
		require(exchange != address(0), "exchange not set");
		uint256 _balanceFromBefore = _getBalance(_from);
		uint256 _balanceToBefore = _getBalance(_to);
		if (_from == address(0)) {
			_outputAmount = IExchange(exchange).convertFundsFromInput{value: _inputAmount}(_from, _to, _inputAmount, _minOutputAmount);
		} else {
			IERC20(_from).safeApprove(exchange, _inputAmount);
			_outputAmount = IExchange(exchange).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);
			IERC20(_from).safeApprove(exchange, 0);
		}
		require(_outputAmount >= _minOutputAmount, "insufficient output");
		uint256 _balanceFromAfter = _getBalance(_from);
		uint256 _balanceToAfter = _getBalance(_to);
		require(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), "input mismatch");
		require(_balanceToAfter == _balanceToBefore.add(_outputAmount), "output mismatch");
		_updateDailyConversionConsumption(_from, _inputAmount);
		_updateDailyConversionConsumption(_to, _outputAmount);
		return _outputAmount;
	}

	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyManager returns (uint256 _inputAmount)
	{
		require(exchange != address(0), "exchange not set");
		uint256 _balanceFromBefore = _getBalance(_from);
		uint256 _balanceToBefore = _getBalance(_to);
		if (_from == address(0)) {
			_inputAmount = IExchange(exchange).convertFundsFromOutput{value: _maxInputAmount}(_from, _to, _outputAmount, _maxInputAmount);
		} else {
			IERC20(_from).safeApprove(exchange, _maxInputAmount);
			_inputAmount = IExchange(exchange).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);
			IERC20(_from).safeApprove(exchange, 0);
		}
		require(_inputAmount <= _maxInputAmount, "excessive input");
		uint256 _balanceFromAfter = _getBalance(_from);
		uint256 _balanceToAfter = _getBalance(_to);
		require(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), "input mismatch");
		require(_balanceToAfter == _balanceToBefore.add(_outputAmount), "output mismatch");
		_updateDailyConversionConsumption(_from, _inputAmount);
		_updateDailyConversionConsumption(_to, _outputAmount);
		return _inputAmount;
	}

	function setManager(address payable _newManager) external onlyOwner
	{
		address payable _oldManager = manager;
		manager = _newManager;
		emit ChangeManager(_oldManager, _newManager);
	}

	function setVault(address payable _newVault) external onlyOwner
	{
		address payable _oldVault = vault;
		vault = _newVault;
		emit ChangeVault(_oldVault, _newVault);
	}

	function setExchange(address _newExchange) external onlyOwner
	{
		address _oldExchange = exchange;
		exchange = _newExchange;
		emit ChangeExchange(_oldExchange, _newExchange);
	}

	function setDailyConversionLimit(address _token, uint256 _newDailyConversionLimit) external onlyOwner
	{
		uint256 _oldDailyConversionLimit = dailyConversionLimit[_token];
		dailyConversionLimit[_token] = _newDailyConversionLimit;
		emit ChangeDailyConversionLimit(_token, _oldDailyConversionLimit, _newDailyConversionLimit);
	}

	function _updateDailyConversionConsumption(address _token, uint256 _amount) internal
	{
		uint256 _today = (block.timestamp / 1 days) * 1 days;
		uint256 _limit = dailyConversionLimit[_token];
		uint256[2] storage _array = dailyConversionConsumption[_token];
		uint256 _date = _array[0];
		uint256 _consumed = _array[1];
		if (_date != _today) {
			_consumed = 0;
		}
		_consumed = _consumed.add(_amount);
		require(_consumed <= _limit, "limit exhausted");
		_array[0] = _today;
		_array[1] = _consumed;
	}

	function _getBalance(address _token) internal view returns (uint256 _balance)
	{
		if (_token == address(0)) {
			return address(this).balance;
		} else {
			return IERC20(_token).balanceOf(address(this));
		}
	}

	receive() external payable
	{
	}

	event ChangeManager(address payable indexed _oldManager, address payable indexed _newManager);
	event ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);
	event ChangeExchange(address indexed _oldExchange, address indexed _newExchange);
	event ChangeDailyConversionLimit(address indexed _token, uint256 _oldDailyConversionLimit, uint256 _newDailyConversionLimit);
}

// File: @openzeppelin/contracts/utils/Create2.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.
 * `CREATE2` can be used to compute in advance the address where a smart
 * contract will be deployed, which allows for interesting new mechanisms known
 * as 'counterfactual interactions'.
 *
 * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more
 * information.
 */
library Create2 {
    /**
     * @dev Deploys a contract using `CREATE2`. The address where the contract
     * will be deployed can be known in advance via {computeAddress}.
     *
     * The bytecode for a contract can be obtained from Solidity with
     * `type(contractName).creationCode`.
     *
     * Requirements:
     *
     * - `bytecode` must not be empty.
     * - `salt` must have not been used for `bytecode` already.
     * - the factory must have a balance of at least `amount`.
     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.
     */
    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {
        address addr;
        require(address(this).balance >= amount, "Create2: insufficient balance");
        require(bytecode.length != 0, "Create2: bytecode length is zero");
        // solhint-disable-next-line no-inline-assembly
        assembly {
            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(addr != address(0), "Create2: Failed on deploy");
        return addr;
    }

    /**
     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the
     * `bytecodeHash` or `salt` will result in a new destination address.
     */
    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {
        return computeAddress(salt, bytecodeHash, address(this));
    }

    /**
     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at
     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.
     */
    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {
        bytes32 _data = keccak256(
            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)
        );
        return address(uint256(_data));
    }
}

// File: contracts/Wallet.sol

pragma solidity ^0.6.0;



contract Wallet
{
	using SafeERC20 for IERC20;

	address payable private immutable manager;

	modifier onlyManager()
	{
		require(msg.sender == manager, "access denied");
		_;
	}

	constructor () public
	{
		manager = msg.sender;
	}

	function _forwardFunds(address _token, address payable _to) external onlyManager
	{
		if (_token == address(0)) {
			_to.transfer(address(this).balance);
		} else {
			IERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));
		}
	}

	receive() external payable
	{
	}
}

// File: contracts/WalletManager.sol

pragma solidity ^0.6.0;







contract WalletManager is Ownable
{
	using Address for address payable;
	using SafeERC20 for IERC20;

	uint256 constant GAS_OVERHEAD = 30000;

	address payable public processor;
	address payable public vault;

	bytes private bytecode;
	bytes32 private immutable bytecodeHash;

	modifier onlyProcessor()
	{
		uint256 _gas = gasleft();
		require(msg.sender == processor, "access denied");
		_;
		processor.transfer((GAS_OVERHEAD + _gas - gasleft()) * tx.gasprice);
	}

	constructor () public
	{
		processor = msg.sender;
		vault = msg.sender;
		bytecode = abi.encodePacked(type(Wallet).creationCode);
		bytecodeHash = keccak256(bytecode);
	}

	function wallets(string memory _userId) external view returns (address payable _wallet, bool _exists)
	{
		bytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));
		_wallet = payable(Create2.computeAddress(_salt, bytecodeHash));
		_exists = _wallet.isContract();
		return (_wallet, _exists);
	}

	function createWallet(string memory _userId) external onlyProcessor
	{
		bytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));
		address payable _wallet = payable(Create2.deploy(0, _salt, bytecode));
		emit CreateWallet(_userId, _wallet);
	}

	function forwardFunds(address payable _wallet, address _token) external onlyProcessor
	{
		Wallet(_wallet)._forwardFunds(_token, vault);
	}

	function forwardFundsBatch(address payable[] memory _wallets, address _token) external onlyProcessor
	{
		uint256 _length = _wallets.length;
		for (uint256 _i = 0; _i < _length; _i++) {
			address payable _wallet = _wallets[_i];
			Wallet(_wallet)._forwardFunds(_token, vault);
		}
	}

	function recoverFunds(address _token) external onlyOwner
	{
		address payable _to = vault;
		if (_token == address(0)) {
			_to.transfer(address(this).balance);
		} else {
			IERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));
		}
	}

	function setProcessor(address payable _newProcessor) external onlyOwner
	{
		address payable _oldProcessor = processor;
		processor = _newProcessor;
		emit ChangeProcessor(_oldProcessor, _newProcessor);
	}

	function setVault(address payable _newVault) external onlyOwner
	{
		address payable _oldVault = vault;
		vault = _newVault;
		emit ChangeVault(_oldVault, _newVault);
	}

	receive() external payable
	{
	}

	event CreateWallet(string indexed _userId, address payable indexed _wallet);
	event ChangeProcessor(address payable indexed _oldProcessor, address payable indexed _newProcessor);
	event ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);
}

// File: contracts/ConversionWalletManager.sol

pragma solidity ^0.6.0;




contract ConversionWalletManager is WalletManager
{
	function calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)
	{
		return ConversionVault(vault).calcConversionLimitAvailable(_token);
	}

	function calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount)
	{
		return IExchange(ConversionVault(vault).exchange()).calcConversionFromInput(_from, _to, _inputAmount);
	}

	function calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount)
	{
		return IExchange(ConversionVault(vault).exchange()).calcConversionFromOutput(_from, _to, _outputAmount);
	}

	function convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyProcessor returns (uint256 _outputAmount)
	{
		return ConversionVault(vault).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);
	}

	function convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyProcessor returns (uint256 _inputAmount)
	{
		return ConversionVault(vault).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);
	}

	function withdrawFunds(address _token, uint256 _amount) external onlyProcessor
	{
		ConversionVault(vault).withdrawFunds(_token, _amount);
	}

	function withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyProcessor
	{
		ConversionVault(vault).withdrawFundsBatch(_tokens, _amounts);
	}
}

// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol


pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: contracts/UniswapV2CompatibleExchange.sol

pragma solidity ^0.6.0;








interface IWTOKEN is IERC20
{
	function deposit() external payable;
	function withdraw(uint256 _amount) external;
}

interface IUniswapV2CompatiblePair is IERC20
{
	function factory() external view returns (address _factory);
	function token0() external view returns (address _token0);
	function token1() external view returns (address _token1);
	function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
	function swapFee() external view returns (uint32); // Biswap only

	function mint(address _to) external returns (uint256 _liquidity);
	function burn(address _to) external returns (uint256 _amount0, uint256 _amount1);
	function swap(uint256 _amount0Out, uint256 _amount1Out, address _to, bytes calldata _data) external;
}

interface IUniswapV2CompatibleFactory
{
	function allPairs(uint256 _index) external view returns (address _pair);
	function getPair(address _tokenA, address _tokenB) external view returns (address _pair);
}

interface IUniswapV2CompatibleRouter
{
	function WETH() external pure returns (address _token);
	function factory() external pure returns (address _factory);
	function getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);
	function getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);

	function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);
	function swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);
}

contract UniswapV2CompatibleExchange is IExchange, Ownable, ReentrancyGuard
{
	using Address for address payable;
	using SafeERC20 for IERC20;
	using SafeMath for uint256;

	struct PoolInfo {
		address pool;
		uint256 ts;
	}

	address public immutable WTOKEN;

	address payable public vault;

	mapping (address => mapping (address => address[])) public customPath;

	mapping (address => address) public bond;

	address[] public factories;
	mapping (bytes32 => uint256[2]) public fees;

	mapping (address => mapping (address => PoolInfo)) public pools;
	uint256 ts = block.timestamp;

	constructor (address _WTOKEN) public
	{
		WTOKEN = _WTOKEN;
		vault = msg.sender;
	}

	function setVault(address payable _vault) external onlyOwner
	{
		vault = _vault;
	}

	function setCustomPath(address[] calldata _path) external onlyOwner
	{
		uint256 _length = _path.length;
		require(_length > 0, "invalid path");
		for (uint256 _i = 0; _i < _length; _i++) {
			require(_path[_i] != address(0), "invalid path");
		}
		address _tokenIn = _path[0];
		address _tokenOut = _path[_length - 1];
		customPath[_tokenIn][_tokenOut] = _path;
	}

	function setBond(address _pair, address _token) external onlyOwner
	{
		address _token0 = IUniswapV2CompatiblePair(_pair).token0();
		address _token1 = IUniswapV2CompatiblePair(_pair).token1();
		require(_token == _token0 || _token == _token1, "invalid token");
		bond[_pair] = _token;
	}

	// PancakeSwap	0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73	9975/10000
	// ApeSwap	0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6	998/1000
	// Biswap	0x858E3312ed3A876947EA49d572A7C42DE08af7EE	0/1000
	function addFactory(address _factory, uint256[2] calldata _fee) external onlyOwner
	{
		require(_fee[1] > 0 && _fee[0] <= _fee[1], "invalid fee");
		bytes32 _codeHash = _extcodehash(IUniswapV2CompatibleFactory(_factory).allPairs(0));
		require(fees[_codeHash][1] == 0, "duplicate address");
		factories.push(_factory);
		fees[_codeHash] = _fee;
	}

	function removeFactory(uint256 _index) external onlyOwner
	{
		uint256 _length = factories.length;
		require(_index < _length, "invalid index");
		address _factory = factories[_index];
		bytes32 _codeHash = _extcodehash(IUniswapV2CompatibleFactory(_factory).allPairs(0));
		fees[_codeHash][0] = 0;
		fees[_codeHash][1] = 0;
		uint256 _lastIndex = _length - 1;
		if (_index < _lastIndex) {
			factories[_index] = factories[_lastIndex];
		}
		factories.pop();
	}

	function invalidateAll() external onlyOwner
	{
		ts = block.timestamp;
	}

	function invalidate(address _tokenIn, address _tokenOut) external onlyOwner
	{
		pools[_tokenIn][_tokenOut].ts = 0;
	}

	function recoverLostFunds(address _token) external onlyOwner
	{
		address payable _to = vault;
		if (_token == address(0)) {
			_to.sendValue(address(this).balance);
		} else {
			IERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));
		}
	}

	function getPoolConfig(address _token) public view returns (address _pool, address _tokenBond, address _tokenOther)
	{
		if (fees[_extcodehash(_token)][1] == 0) {
			return (address(0), address(0), address(0));
		}
		_pool = _token;
		address _token0 = IUniswapV2CompatiblePair(_pool).token0();
		address _token1 = IUniswapV2CompatiblePair(_pool).token1();
		if (_token0 == bond[_pool]) return (_pool, _token0, _token1);
		if (_token1 == bond[_pool]) return (_pool, _token1, _token0);
		if (_token0 == WTOKEN) return (_pool, _token0, _token1);
		if (_token1 == WTOKEN) return (_pool, _token1, _token0);
		return (_pool, _token0, _token1);
	}

	function getPoolFee(address _pool) public view returns (uint256[2] memory _fee)
	{
		_fee = fees[_extcodehash(_pool)];
		require(_fee[1] > 0, "unknown factory");
		if (_fee[0] == 0) {
			_fee[0] = _fee[1] - IUniswapV2CompatiblePair(_pool).swapFee();
		}
		return _fee;
	}

	function getPool(address _tokenIn, address _tokenOut) public view returns (address _pool)
	{
		PoolInfo storage _poolInfo = pools[_tokenIn][_tokenOut];
		if (_poolInfo.ts >= ts && fees[_extcodehash(_poolInfo.pool)][1] > 0) return _poolInfo.pool;
		return _getPool(_tokenIn, _tokenOut);
	}

	function getPoolAndUpdate(address _tokenIn, address _tokenOut) public returns (address _pool)
	{
		PoolInfo storage _poolInfo = pools[_tokenIn][_tokenOut];
		if (_poolInfo.ts >= ts && fees[_extcodehash(_poolInfo.pool)][1] > 0) return _poolInfo.pool;
		_pool = _getPool(_tokenIn, _tokenOut);
		if (_pool != address(0)) {
			_poolInfo.pool = _pool;
			_poolInfo.ts = block.timestamp;
		}
		return _pool;
	}

	function calcConversionFromInput(address _tokenIn, address _tokenOut, uint256 _amountIn) external view override returns (uint256 _amountOut)
	{
		if (_tokenIn == address(0)) {
			_tokenIn = WTOKEN;
		}
		if (_tokenOut == address(0)) {
			_tokenOut = WTOKEN;
		}
		(address _poolIn, address _bondIn, address _otherIn) = getPoolConfig(_tokenIn);
		(address _poolOut, address _bondOut, address _otherOut) = getPoolConfig(_tokenOut);
		if (_poolIn != address(0)) {
			if (_otherIn == _tokenOut) {
				(_bondIn, _otherIn) = (_otherIn, _bondIn);
			}
			_tokenIn = _bondIn;
		}
		if (_poolOut != address(0)) {
			if (_otherOut == _tokenIn) {
				(_bondOut, _otherOut) = (_otherOut, _bondOut);
			}
			_tokenOut = _bondOut;
		}
		if (_poolIn != address(0)) {
			_amountIn = _calcZapoutAmountOut(_amountIn, _poolIn, _otherIn, _tokenIn);
		}
		_amountOut = _calcConversionFromInput(_tokenIn, _tokenOut, _amountIn);
		if (_poolOut != address(0)) {
			_amountOut = _calcZapinAmountOut(_amountOut, _poolOut, _tokenOut, _otherOut);
		}
		return _amountOut;
	}

	function calcConversionFromOutput(address _tokenIn, address _tokenOut, uint256 _amountOut) external view override returns (uint256 _amountIn)
	{
		if (_tokenIn == address(0)) {
			_tokenIn = WTOKEN;
		}
		if (_tokenOut == address(0)) {
			_tokenOut = WTOKEN;
		}
		(address _poolIn, address _bondIn, address _otherIn) = getPoolConfig(_tokenIn);
		(address _poolOut, address _bondOut, address _otherOut) = getPoolConfig(_tokenOut);
		if (_poolIn != address(0)) {
			if (_otherIn == _tokenOut) {
				(_bondIn, _otherIn) = (_otherIn, _bondIn);
			}
			_tokenIn = _bondIn;
		}
		if (_poolOut != address(0)) {
			if (_otherOut == _tokenIn) {
				(_bondOut, _otherOut) = (_otherOut, _bondOut);
			}
			_tokenOut = _bondOut;
		}
		if (_poolIn != address(0)) {
			require(false, "unimplemented");
			_otherIn;
		}
		_amountIn = _calcConversionFromOutput(_tokenIn, _tokenOut, _amountOut);
		if (_poolOut != address(0)) {
			require(false, "unimplemented");
			_otherOut;
		}
		return _amountIn;
	}

	function convertFundsFromInput(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin) external payable override nonReentrant returns (uint256 _amountOut)
	{
		bool _nativeIn = _tokenIn == address(0);
		bool _nativeOut = _tokenOut == address(0);
		if (_nativeIn) {
			_tokenIn = WTOKEN;
		}
		if (_nativeOut) {
			_tokenOut = WTOKEN;
		}
		address _poolIn;
		address _otherIn;
		address _poolOut;
		address _otherOut;
		{
			address _bondIn;
			address _bondOut;
			(_poolIn, _bondIn, _otherIn) = getPoolConfig(_tokenIn);
			(_poolOut, _bondOut, _otherOut) = getPoolConfig(_tokenOut);
			if (_poolIn != address(0)) {
				if (_otherIn == _tokenOut) {
					(_bondIn, _otherIn) = (_otherIn, _bondIn);
				}
				_tokenIn = _bondIn;
			}
			if (_poolOut != address(0)) {
				if (_otherOut == _tokenIn) {
					(_bondOut, _otherOut) = (_otherOut, _bondOut);
				}
				_tokenOut = _bondOut;
			}
		}
		if (_nativeIn) {
			require(msg.value == _amountIn, "invalid value");
			IWTOKEN(_tokenIn).deposit{value: _amountIn}();
		}
		else
		if (_poolIn != address(0)) {
			_amountIn = _zapoutExactTokensForTokens(msg.sender, _amountIn, _poolIn, _otherIn, _tokenIn, address(this));
		}
		{
			address _from = !_nativeIn && _poolIn == address(0) ? msg.sender : address(this);
			address _to = !_nativeOut && _poolOut == address(0) ? msg.sender : address(this);
			_amountOut = _convertFundsFromInput(_from, _tokenIn, _tokenOut, _amountIn, _to);
		}
		if (_nativeOut) {
			IWTOKEN(_tokenOut).withdraw(_amountOut);
			msg.sender.sendValue(_amountOut);
		}
		else
		if (_poolOut != address(0)) {
			_amountOut = _zapinExactTokensForTokens(address(this), _amountOut, _poolOut, _tokenOut, _otherOut, msg.sender);
		}
		require(_amountOut >= _amountOutMin, "insufficient amount");
		return _amountOut;
	}

	function convertFundsFromOutput(address _tokenIn, address _tokenOut, uint256 _amountOut, uint256 _amountInMax) external payable override nonReentrant returns (uint256 _amountIn)
	{
		bool _nativeIn = _tokenIn == address(0);
		bool _nativeOut = _tokenOut == address(0);
		if (_nativeIn) {
			_tokenIn = WTOKEN;
		}
		if (_nativeOut) {
			_tokenOut = WTOKEN;
		}
		address _poolIn;
		address _otherIn;
		address _poolOut;
		address _otherOut;
		{
			address _bondIn;
			address _bondOut;
			(_poolIn, _bondIn, _otherIn) = getPoolConfig(_tokenIn);
			(_poolOut, _bondOut, _otherOut) = getPoolConfig(_tokenOut);
			if (_poolIn != address(0)) {
				if (_otherIn == _tokenOut) {
					(_bondIn, _otherIn) = (_otherIn, _bondIn);
				}
				_tokenIn = _bondIn;
			}
			if (_poolOut != address(0)) {
				if (_otherOut == _tokenIn) {
					(_bondOut, _otherOut) = (_otherOut, _bondOut);
				}
				_tokenOut = _bondOut;
			}
		}
		if (_nativeIn) {
			require(msg.value == _amountInMax, "invalid value");
			IWTOKEN(_tokenIn).deposit{value: _amountInMax}();
		}
		else
		if (_poolIn != address(0)) {
			require(false, "unimplemented");
			_otherIn;
		}
		{
			address _from = !_nativeIn && _poolIn == address(0) ? msg.sender : address(this);
			address _to = !_nativeOut && _poolOut == address(0) ? msg.sender : address(this);
			_amountIn = _convertFundsFromOutput(_from, _tokenIn, _tokenOut, _amountOut, _to);
		}
		if (_nativeIn) {
			uint256 _amountInRet = _amountInMax - _amountIn;
			if (_amountInRet > 0) {
				IWTOKEN(_tokenIn).withdraw(_amountInRet);
				msg.sender.sendValue(_amountInRet);
			}
		}
		if (_nativeOut) {
			IWTOKEN(_tokenOut).withdraw(_amountOut);
			msg.sender.sendValue(_amountOut);
		}
		else
		if (_poolOut != address(0)) {
			require(false, "unimplemented");
			_otherOut;
		}
		require(_amountIn <= _amountInMax, "excessive amount");
		return _amountIn;
	}

	function _calcConversionFromInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal view returns (uint256 _amountOut)
	{
		address[] memory _path = _buildPath(_tokenIn, _tokenOut);
		return _calcSwapAmountsOut(_amountIn, _path)[_path.length - 1];
	}

	function _calcConversionFromOutput(address _tokenIn, address _tokenOut, uint256 _amountOut) internal view returns (uint256 _amountIn)
	{
		address[] memory _path = _buildPath(_tokenIn, _tokenOut);
		return _calcSwapAmountsIn(_amountOut, _path)[0];
	}

	function _convertFundsFromInput(address _from, address _tokenIn, address _tokenOut, uint256 _amountIn, address _to) internal returns (uint256 _amountOut)
	{
		address[] memory _path = _buildPath(_tokenIn, _tokenOut);
		return _swapExactTokensForTokens(_from, _amountIn, _path, _to);
	}

	function _convertFundsFromOutput(address _from, address _tokenIn, address _tokenOut, uint256 _amountOut, address _to) internal returns (uint256 _amountIn)
	{
		address[] memory _path = _buildPath(_tokenIn, _tokenOut);
		return _swapTokensForExactTokens(_from, _amountOut, _path, _to);
	}

	function _buildPath(address _tokenIn, address _tokenOut) internal view returns (address[] memory _path)
	{
		_path = customPath[_tokenIn][_tokenOut];
		if (_path.length > 0) {
			return _path;
		}
		if (_tokenIn == _tokenOut) {
			_path = new address[](1);
			_path[0] = _tokenIn;
			return _path;
		}
		if (_tokenIn == WTOKEN || _tokenOut == WTOKEN) {
			_path = new address[](2);
			_path[0] = _tokenIn;
			_path[1] = _tokenOut;
			return _path;
		}
		_path = new address[](3);
		_path[0] = _tokenIn;
		_path[1] = WTOKEN;
		_path[2] = _tokenOut;
		return _path;
	}

	function _getPool(address _tokenIn, address _tokenOut) internal view returns (address _pool)
	{
		_pool = address(0);
		uint256 _liquidityIn = 0;
		uint256 _liquidityOut = 0;
		uint256 _length = factories.length;
		for (uint256 _i = 0; _i < _length; _i++) {
			address _pair = IUniswapV2CompatibleFactory(factories[_i]).getPair(_tokenIn, _tokenOut);
			if (_pair == address(0)) continue;
			(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
			if (_reserveOut > _liquidityOut || _reserveOut == _liquidityOut && _reserveIn < _liquidityIn) {
				_pool = _pair;
				_liquidityIn = _reserveIn;
				_liquidityOut = _reserveOut;
			}
		}
		return _pool;
	}

	function _calcZapinAmountOut(uint256 _amountIn, address _pair, address _tokenIn, address _tokenOut) internal view returns (uint256 _amountLp)
	{
		uint256[2] memory _fee = getPoolFee(_pair);
		uint256 _totalSupplyLp = IUniswapV2CompatiblePair(_pair).totalSupply();
		(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
		uint256 _amountSwapIn = _calcZapin(_fee, _reserveIn, _amountIn);
		uint256 _amountJoinOut = _calcSwapOut(_fee, _reserveIn, _reserveOut, _amountSwapIn);
		uint256 _amountJoinIn = _amountIn - _amountSwapIn;
		return _calcMint(_totalSupplyLp, _reserveIn + _amountSwapIn, _reserveOut - _amountJoinOut, _amountJoinIn, _amountJoinOut);
	}

	function _calcZapoutAmountOut(uint256 _amountLp, address _pair, address _tokenIn, address _tokenOut) internal view returns (uint256 _amountOut)
	{
		uint256[2] memory _fee = getPoolFee(_pair);
		uint256 _totalSupplyLp = IUniswapV2CompatiblePair(_pair).totalSupply();
		(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
		(uint256 _amountExitIn, uint256 _amountExitOut) = _calcBurn(_totalSupplyLp, _reserveIn, _reserveOut, _amountLp);
		uint256 _amountSwapOut = _calcSwapOut(_fee, _reserveIn - _amountExitIn, _reserveOut - _amountExitOut, _amountExitIn);
		return _amountSwapOut + _amountExitOut;
	}

	function _zapinExactTokensForTokens(address _from, uint256 _amountIn, address _pair, address _tokenIn, address _tokenOut, address _to) internal returns (uint256 _amountLp)
	{
		uint256[2] memory _fee = getPoolFee(_pair);
		(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
		uint256 _amountSwapIn = _calcZapin(_fee, _reserveIn, _amountIn);
		uint256 _amountJoinIn = _amountIn - _amountSwapIn;
		uint256 _amountJoinOut = _calcSwapOut(_fee, _reserveIn, _reserveOut, _amountSwapIn);
		_safeTransfer(_tokenIn, _from, _pair, _amountSwapIn);
		_swap(_pair, _tokenIn, _tokenOut, _amountJoinOut, address(this));
		_safeTransfer(_tokenIn, _from, _pair, _amountJoinIn);
		IERC20(_tokenOut).safeTransfer(_pair, _amountJoinOut);
		return _mint(_pair, _to);
	}

	function _zapoutExactTokensForTokens(address _from, uint256 _amountLp, address _pair, address _tokenIn, address _tokenOut, address _to) internal returns (uint256 _amountOut)
	{
		uint256[2] memory _fee = getPoolFee(_pair);
		_safeTransfer(_pair, _from, _pair, _amountLp);
		(uint256 _amountExitIn, uint256 _amountExitOut) = _burn(_pair, _tokenIn, _tokenOut, address(this));
		(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
		uint256 _amountSwapOut = _calcSwapOut(_fee, _reserveIn, _reserveOut, _amountExitIn);
		IERC20(_tokenIn).safeTransfer(_pair, _amountExitIn);
		_swap(_pair, _tokenIn, _tokenOut, _amountSwapOut, _to);
		IERC20(_tokenOut).safeTransfer(_to, _amountExitOut);
		return _amountSwapOut + _amountExitOut;
	}

	function _calcSwapAmountsOut(uint256 _amountIn, address[] memory _path) internal view returns (uint256[] memory _amounts)
	{
		uint256 _length = _path.length;
		require(_length > 0, "invalid path");
		_amounts = new uint256[](_length);
		uint256 _index = 0;
		_amounts[_index] = _amountIn;
		address _tokenIn = _path[_index];
		while (++_index < _length) {
			address _tokenOut = _path[_index];
			address _pair = getPool(_tokenIn, _tokenOut);
			uint256[2] memory _fee = getPoolFee(_pair);
			(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
			_amountIn = _calcSwapOut(_fee, _reserveIn, _reserveOut, _amountIn);
			_amounts[_index] = _amountIn;
			_tokenIn = _tokenOut;
		}
		return _amounts;
	}

	function _calcSwapAmountsIn(uint256 _amountOut, address[] memory _path) internal view returns (uint256[] memory _amounts)
	{
		uint256 _length = _path.length;
		require(_length > 0, "invalid path");
		_amounts = new uint256[](_length);
		uint256 _index = _length - 1;
		_amounts[_index] = _amountOut;
		address _tokenOut = _path[_index];
		while (_index-- > 0) {
			address _tokenIn = _path[_index];
			address _pair = getPool(_tokenIn, _tokenOut);
			uint256[2] memory _fee = getPoolFee(_pair);
			(uint256 _reserveIn, uint256 _reserveOut) = _getReserves(_pair, _tokenIn, _tokenOut);
			_amountOut = _calcSwapIn(_fee, _reserveIn, _reserveOut, _amountOut);
			_amounts[_index] = _amountOut;
			_tokenOut = _tokenIn;
		}
		return _amounts;
	}

	function _swapExactTokensForTokens(address _from, uint256 _amountIn, address[] memory _path, address _to) internal returns (uint256 _amountOut)
	{
		uint256[] memory _amounts = _calcSwapAmountsOut(_amountIn, _path);
		_amountOut = _amounts[_amounts.length - 1];
		_swaps(_from, _path, _amounts, _to);
		return _amountOut;
	}

	function _swapTokensForExactTokens(address _from, uint256 _amountOut, address[] memory _path, address _to) internal returns (uint256 _amountIn)
	{
		uint256[] memory _amounts = _calcSwapAmountsIn(_amountOut, _path);
		_amountIn = _amounts[0];
		_swaps(_from, _path, _amounts, _to);
		return _amountIn;
	}

	function _swaps(address _from, address[] memory _path, uint256[] memory _amounts, address _to) internal
	{
		uint256 _length = _path.length;
		if (_length == 1) {
			if (_from != _to) {
				address _tokenIn = _path[0];
				uint256 _amountIn = _amounts[0];
				_safeTransfer(_tokenIn, _from, _to, _amountIn);
			}
		} else {
			address _tokenIn = _path[0];
			address _tokenOut = _path[1];
			address _pair = getPoolAndUpdate(_tokenIn, _tokenOut);
			uint256 _amountIn = _amounts[0];
			uint256 _amountOut = _amounts[1];
			_safeTransfer(_tokenIn, _from, _pair, _amountIn);
			for (uint256 _i = 2; _i < _length; _i++) {
				address _nextToken = _path[_i];
				address _nextPair = getPoolAndUpdate(_tokenOut, _nextToken);
				_swap(_pair, _tokenIn, _tokenOut, _amountOut, _nextPair);
				_tokenIn = _tokenOut;
				_tokenOut = _nextToken;
				_pair = _nextPair;
				_amountOut = _amounts[_i];
			}
			_swap(_pair, _tokenIn, _tokenOut, _amountOut, _to);
		}
	}

	function _calcZapin(uint256[2] memory _fee, uint256 _reserveIn, uint256 _amountIn) internal pure returns (uint256 _amountSwapIn)
	{
		return (_sqrt(_reserveIn * (_amountIn * 4 * _fee[0] * _fee[1] + _reserveIn * (_fee[0] * _fee[0] + _fee[1] * (_fee[1] + 2 * _fee[0])))) - _reserveIn * (_fee[1] + _fee[0])) / (2 * _fee[1]);
	}

	function _calcMint(uint256 _totalSupplyLp, uint256 _reserveIn, uint256 _reserveOut, uint256 _amountIn, uint256 _amountOut) internal pure returns (uint256 _amountLp)
	{
		return _min(_totalSupplyLp * _amountIn / _reserveIn, _totalSupplyLp * _amountOut / _reserveOut);
	}

	function _calcBurn(uint256 _totalSupplyLp, uint256 _reserveIn, uint256 _reserveOut, uint256 _amountLp) internal pure returns (uint256 _amountIn, uint256 _amountOut)
	{
		return (_reserveIn * _amountLp / _totalSupplyLp, _reserveOut * _amountLp / _totalSupplyLp);
	}

	function _calcSwapOut(uint256[2] memory _fee, uint256 _reserveIn, uint256 _reserveOut, uint256 _amountIn) internal pure returns (uint256 _amountOut)
	{
		uint256 _amountInWithFee = _amountIn * _fee[0];
		return (_reserveOut * _amountInWithFee) / (_reserveIn * _fee[1] + _amountInWithFee);
	}

	function _calcSwapIn(uint256[2] memory _fee, uint256 _reserveIn, uint256 _reserveOut, uint256 _amountOut) internal pure returns (uint256 _amountIn)
	{
		return (_reserveIn * _amountOut * _fee[1]) / ((_reserveOut - _amountOut) * _fee[0]) + 1;
	}

	function _getReserves(address _pair, address _tokenIn, address _tokenOut) internal view returns (uint256 _reserveIn, uint256 _reserveOut)
	{
		(uint256 _reserve0, uint256 _reserve1,) = IUniswapV2CompatiblePair(_pair).getReserves();
		return _tokenIn < _tokenOut ? (_reserve0, _reserve1) : (_reserve1, _reserve0);
	}

	function _mint(address _pair, address _to) internal returns (uint256 _amountLp)
	{
		return IUniswapV2CompatiblePair(_pair).mint(_to);
	}

	function _burn(address _pair, address _tokenIn, address _tokenOut, address _to) internal returns (uint256 _amountIn, uint256 _amountOut)
	{
		(uint256 _amount0, uint256 _amount1) = IUniswapV2CompatiblePair(_pair).burn(_to);
		return _tokenIn < _tokenOut ? (_amount0, _amount1) : (_amount1, _amount0);
	}

	function _swap(address _pair, address _tokenIn, address _tokenOut, uint256 _amountOut, address _to) internal
	{
		(uint256 _amount0Out, uint256 _amount1Out) = _tokenIn < _tokenOut ? (uint256(0), _amountOut) : (_amountOut, uint256(0));
		IUniswapV2CompatiblePair(_pair).swap(_amount0Out, _amount1Out, _to, new bytes(0));
	}

	function _safeTransfer(address _token, address _from, address _to, uint256 _amount) internal
	{
		if (_from == address(this)) {
			IERC20(_token).safeTransfer(_to, _amount);
		} else {
			IERC20(_token).safeTransferFrom(_from, _to, _amount);
		}
	}

	function _min(uint256 _x, uint256 _y) internal pure returns (uint256 _z)
	{
		return _x <= _y ? _x : _y;
	}

	function _sqrt(uint256 _x) internal pure returns (uint256 _y)
	{
		_y = _x;
		uint256 _z = (_x + 1) / 2;
		while (_z < _y) {
			_y = _z;
			_z = (_x / _z + _z) / 2;
		}
		return _y;
	}

	function _extcodehash(address _address) internal view returns (bytes32 _value)
	{
		assembly { _value := extcodehash(_address) }
		return _value;
	}
}

// File: contracts/Migrations.sol

pragma solidity ^0.6.0;

contract Migrations
{
	address public owner;
	uint256 public last_completed_migration;

	modifier restricted()
	{
		if (msg.sender == owner) _;
	}

	constructor() public
	{
		owner = msg.sender;
	}

	function setCompleted(uint256 _completed) public restricted
	{
		last_completed_migration = _completed;
	}
}