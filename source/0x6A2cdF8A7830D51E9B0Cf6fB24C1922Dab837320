// File: OPcoin.sol

pragma solidity >=0.6.0 <0.9.0;

contract OPcoin {
    string public name;
    string public symbol;
    uint256 public totalSupply;

    mapping(address => uint256) public balances;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() {
        name = "OPcoin";
        symbol = "OPC";
        
        totalSupply = 30000000;
        balances[msg.sender] = totalSupply;
        owner = 0xc6f7c6BD126D8E4Da04724E093CE19e68BBcC1Fa;
    }

    function balanceOf(address user) public view returns (uint256) {
        return balances[user];
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(to != address(0), "Transfer to zero address");
        require(balances[msg.sender] >= value, "Insufficient balance");
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function buyTokens() public payable {
        require(msg.value > 0, "Amount of BNB sent must be greater than 0.");
        uint256 weiAmount = msg.value;
        uint256 tokenAmount = weiAmount;
        require(tokenAmount > 0, "Amount of tokens purchased must be greater than 0.");
        require(balances[owner] >= tokenAmount, "Insufficient tokens for purchase");
        balances[owner] -= tokenAmount;
        balances[msg.sender] += tokenAmount;
        emit Transfer(owner, msg.sender, tokenAmount);
    }

    function sellTokens(uint256 tokenAmount) public {
        require(tokenAmount > 0, "Amount of tokens sold must be greater than 0.");
        require(balances[msg.sender] >= tokenAmount, "Insufficient tokens to sell");
        uint256 weiAmount = tokenAmount;
        balances[msg.sender] -= tokenAmount;
        balances[owner] += tokenAmount;
        emit Transfer(msg.sender, owner, tokenAmount);
        payable(msg.sender).transfer(weiAmount);
    }

    function burn(uint256 value) public returns (bool) {
        require(value > 0, "Amount of tokens burned must be greater than 0.");
        require(balances[msg.sender] >= value, "Insufficient balance to burn");
        balances[msg.sender] -= value;
        totalSupply -= value;
        emit Transfer(msg.sender, address(0), value);
        return true;
    }

    function mint(uint256 value) public {
        require(msg.sender == owner, "Only owner can mint tokens");
        require(value > 0, "Amount of tokens minted must be greater than 0.");
        totalSupply += value;
        balances[owner] += value;
        emit Transfer(address(0), owner, value);
    }
}