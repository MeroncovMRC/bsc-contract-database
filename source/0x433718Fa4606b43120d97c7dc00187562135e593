{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n"},"raw.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/* \n * \\file    rawToken.sol\n * \\brief   RAW is an ERC20 token.\n            But it is above all the kernel of an ecosystem of web3 applications.\n *\n * \\brief   Release note\n * \\version 1.0\n * \\date    2022/09/20\n * \\details The beginning\n *\n * \\todo    Develop the raw ecosystem and his community.\n */\n\npragma solidity ^0.8.17;\n\nimport \"../IERC20.sol\";\nimport \"../IERC20Metadata.sol\";\nimport \"../Context.sol\";\nimport \"../SafeMath.sol\";\n\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n//import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n//import \"@openzeppelin/contracts/utils/Context.sol\";\n//import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/// https://docs.pancakeswap.finance/code/smart-contracts/pancakeswap-exchange/router-v2\ninterface IUniswapV2Router {\n    function WETH() external pure returns (address);\n    function factory() external pure returns (address);\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ncontract raw is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    uint8 private constant TRANSFER = 0;\n    uint8 private constant BUY \t    = 1;\n    uint8 private constant SELL     = 2;\n\n    address public admin;\n\n    uint256 public MAX_TOKENS_PER_WALLET;\n    uint8\tpublic PURCHASE_TAX;\n    uint8\tpublic SALES_TAX;\n\n    mapping(address =\u003e bool) public automaticPairs;\n    mapping(address =\u003e bool) public dutyFree;\n\n    struct taxWallet {\n\t\taddress wallet;\n\t\tuint16 share;\n\t\tuint8 opType;\n    }\n    \n    taxWallet[20] public _taxWallet;\n\n    /// Variables related to uniswap :\n    address private ROUTER_ADD;\n    IUniswapV2Router public uniswapRouter;\n    address public uniswapPair;\n\n    mapping(address =\u003e uint256) public _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    event Paused();\n    event Unpaused();\n    bool public paused = false;\n\n    constructor() {\n        _totalSupply = 23000000 * (10 ** 18);\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n        admin = msg.sender;\n        \n        MAX_TOKENS_PER_WALLET = 1000000 * (10 ** 18);\n        PURCHASE_TAX = 2;\n        SALES_TAX = 8;\n\t   \n\t   /*\n         * Purchase tax : 2% -\u003e 2% Development \u0026 Marketing\n         */\n        _taxWallet[0] = taxWallet(0xDb42a92000d07F3B3C28B76d205ea24CC155B17F, 2, BUY);\t\t/// 2% BT - Dev \u0026 Marketing\n\t   \n\t   /*\n         * Sales tax : 8% -\u003e 4% Development \u0026 Marketing ; 4% Affiliate System\n         */\n\t   _taxWallet[1] = taxWallet(0xDb42a92000d07F3B3C28B76d205ea24CC155B17F, 4, SELL);\t\t/// 4% ST - Dev \u0026 Marketing\n\t   _taxWallet[2] = taxWallet(0xa29fcB48A76d9638C4D7bd42074A550E60d1e45D, 4, SELL);\t\t/// 4% ST - Affiliate System\n\t   \n        ROUTER_ADD = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n        uniswapRouter = IUniswapV2Router(ROUTER_ADD);\n        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());       /// Create a uniswap pair for this new token\n\n        automaticPairs[uniswapPair] = true;\n    }\n    \n    function version() public pure returns (string memory) {\n    \t   return \"1.0\";\n    }\n    \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(paused == false, \"[raw] _approve : the contract is paused\");\n        require(owner != address(0), \"[raw] _approve : approve FROM the zero address\");\n        require(spender != address(0), \"[raw] _approve : approve TO the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(paused == false, \"[raw] _transfer : the contract is paused\");\n        require(from != address(0), \"[raw] _transfer : transfer FROM the zero address\");\n        require(to != address(0), \"[raw] _transfer : transfer TO the zero address\");\n        require(amount \u003e 0, \"[raw] _transfer : transfer amount must be greater than zero\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"[raw] _transfer : transfer amount exceeds balance\");\n\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n\n        uint256 fee;\n        uint256 feeDeducted;\n        uint8 opType;\n        if ((from != admin) \u0026\u0026 (to != admin) \u0026\u0026 (dutyFree[from] != true) \u0026\u0026 (dutyFree[to] != true)) {\n            if (automaticPairs[from]) {\n                opType = BUY;\n                fee = amount.mul(PURCHASE_TAX).div(100);\n            } else if (automaticPairs[to]) {\n                opType = SELL;\n                fee = amount.mul(SALES_TAX).div(100);\n            } else {\n                opType = TRANSFER;\n                fee = 0;        /// Without fee\n            }\n        }\n\n        feeDeducted = (amount.sub(fee));\n        \n        if ((automaticPairs[to] == false) \u0026\u0026 (to != admin) \u0026\u0026 (dutyFree[to] != true)) {\n        \trequire(_balances[to]+feeDeducted \u003c= MAX_TOKENS_PER_WALLET, \"[raw] _transfer : the wallet exceeds the maximum number of tokens\");\n        }\n        \n        unchecked {\n            _balances[to] += feeDeducted;\n        }\n        \n        if (fee \u003e 0) {\n        \t  uint256 totalNbOfShares;\n            uint256 totalAmountPaid = fee;\n\t  \t  for (uint8 i=0 ; i\u003c_taxWallet.length ; i++) {\n\t  \t  \tif (_taxWallet[i].opType == opType) {\n\t  \t\t\ttotalNbOfShares += _taxWallet[i].share;\n\t  \t\t}\n\t  \t  }\n\t  \t  uint256 nbOfShares;\n\t  \t  for (uint8 i=0 ; i\u003c_taxWallet.length ; i++) {\n\t  \t  \tif (_taxWallet[i].opType == opType) {\n\t\t\t  \tuint256 amountPaid;\n\t\t\t  \tnbOfShares += _taxWallet[i].share; \n\t\t  \t\tif ((totalNbOfShares-nbOfShares) \u003e 0) {\n\t\t  \t\t\tamountPaid = _taxWallet[i].share*(10**6);\n\t\t  \t\t\tamountPaid = amountPaid.div(totalNbOfShares).mul(fee).div(10**6);\n\t\t  \t\t} else {\n\t\t  \t\t\tamountPaid = totalAmountPaid;\t\t/// For security and to be sure to redistribute all tokens\n\t\t  \t\t}\n\t\t  \t\ttotalAmountPaid -= amountPaid; \n\t\t  \t\t_balances[_taxWallet[i].wallet] += amountPaid;\n\t\t  \t\temit Transfer(from, _taxWallet[i].wallet, amountPaid);\n\t  \t\t}\n\t  \t  }\n        }\n\n        emit Transfer(from, to, feeDeducted);\n\n        _afterTokenTransfer(from, to, feeDeducted);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"[raw] _spendAllowance : insufficient allowance\");\n\t\t    unchecked {\n\t\t       _approve(owner, spender, currentAllowance - amount);\n\t\t    }\n        }\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n    \n    function pause() public {\n        require(paused == false, \"[raw] pause : the contract is already paused\");\n        require(msg.sender == admin, \"[raw] pause : only admin\");\n        paused = true;\n        emit Paused();\n    }\n\n    function unpause() public {\n        require(paused == true, \"[raw] unpause : the contract is not paused\");\n        require(msg.sender == admin, \"[raw] unpause : only admin\");\n        paused = false;\n        emit Unpaused();\n    }\n\n    function name() public view virtual returns (string memory) {\n        return \"raw\";\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return \"RAW\";\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        address owner = msg.sender;\n        _transfer(owner, to, amount);\n\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = msg.sender;\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"[raw] decreaseAllowance : decreased allowance below zero\");\n        unchecked {\n        \t_approve(owner, spender, currentAllowance - subtractedValue);\n    \t}\n\n        return true;\n    }\n\n\tfunction setMaxTokensPerWallet(uint256 newMaxTokensPerWallet) public {\n\t\trequire(paused == true, \"[raw] setMaxTokensPerWallet : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] setMaxTokensPerWallet : only admin\");\n\t\trequire (MAX_TOKENS_PER_WALLET != newMaxTokensPerWallet, \"[raw] setMaxTokensPerWallet : MAX_TOKENS_PER_WALLET already has this value\");\n\t\tMAX_TOKENS_PER_WALLET = newMaxTokensPerWallet;\n\t}\n\n\tfunction setAutomaticPair(address pair, bool value) public {\n\t\trequire(paused == true, \"[raw] setAutomaticPair : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] setAutomaticPair : only admin\");\n\t\trequire (automaticPairs[pair] != value, \"[raw] setAutomaticPair : this pair already has this value\");\n\t\tautomaticPairs[pair] = value;\n\t}\n\n\tfunction setDutyFree(address elektron, bool value) public {\n\t\trequire(paused == true, \"[raw] setDutyFree : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] setDutyFree : only admin\");\n\t\trequire (dutyFree[elektron] != value, \"[raw] setDutyFree : this elektron already has this value\");\n\t\tdutyFree[elektron] = value;\n\t}\n\n\tfunction setPurchaseTax(uint8 percent) public {\n\t\trequire(paused == true, \"[raw] setPurchaseTax : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] setPurchaseTax : only admin\");\n\t\trequire (PURCHASE_TAX != percent, \"[raw] setPurchaseTax : the purchase tax already has this value\");\n\t\tPURCHASE_TAX = percent;\n\t}\n\n\tfunction setSalesTax(uint8 percent) public {\n\t\trequire(paused == true, \"[raw] setSalesTax : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] setSalesTax : only admin\");\n\t\trequire (SALES_TAX != percent, \"[raw] setSalesTax : the sales tax already has this value\");\n\t\tSALES_TAX = percent;\n\t}\n    \n\tfunction newTaxWallet(address _wallet, uint16 _share, uint8 _opType) public {\n\t\trequire(paused == true, \"[raw] newTaxWallet : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] newTaxWallet : only admin\");\n\t\tfor (uint8 i=0 ; i\u003c_taxWallet.length ; i++) {\n\t\t\tif (_taxWallet[i].share == 0) {\n\t\t\t\t_taxWallet[i] = taxWallet(_wallet, _share, _opType);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n    \n\tfunction deleteTaxWallet(address _wallet, uint16 _share, uint8 _opType) public {\n\t\trequire(paused == true, \"[raw] deleteTaxWallet : the contract must be paused\");\n\t\trequire(msg.sender == admin, \"[raw] deleteTaxWallet : only admin\");\n\t\tuint lengthMemo = _taxWallet.length;\n\t\tfor (uint8 i=0 ; i\u003clengthMemo ; i++) {\n\t\t\t/// Only if the three fields are identical\n\t\t\tif ((_taxWallet[i].wallet == _wallet) \u0026\u0026 (_taxWallet[i].share == _share) \u0026\u0026 (_taxWallet[i].opType == _opType)) {\n\t\t\t\tdelete _taxWallet[i];\t\t/// Will create an empty location\n\n\t\t\t\t/// We move to fill the gap\n\t\t\t\tfor (uint8 j=i ; j\u003clengthMemo-1 ; j++) {\n\t\t\t\t\t_taxWallet[j] = _taxWallet[j+1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\trequire(lengthMemo != _taxWallet.length, \"[raw] deleteTaxWallet : no items to be deleted\");\n\t}\n    \n    function updateTaxWallet(address _wallet, uint16 _newShare, uint8 _newOpType) public {\n        require(paused == true, \"[raw] updateTaxWallet : the contract must be paused\");\n    \trequire(msg.sender == admin, \"[raw] updateTaxWallet : only admin\");\n    \tfor (uint8 i=0 ; i\u003c_taxWallet.length ; i++) {\n\t   \t    if (_taxWallet[i].wallet == _wallet) {\n\t   \t\t    require ((_taxWallet[i].share != _newShare) || (_taxWallet[i].opType != _newOpType), \"[raw] updateTaxWallet : share and operation type already have these values\");\n\t\t\t    _taxWallet[i].share = _newShare;\n\t\t\t    _taxWallet[i].opType = _newOpType;\n\t\t    }\n\t   }\n    }\n    \n    function setRouter(address newRouter) public {\n\t    require(paused == true, \"[raw] setRouter : the contract must be paused\");\n    \trequire(msg.sender == admin, \"[raw] setRouter : only admin\");\n        require (ROUTER_ADD != newRouter, \"[raw] setRouter : the router address already has this value\");\n    \tROUTER_ADD = newRouter;\n        IUniswapV2Router newUniswapRouter = IUniswapV2Router(ROUTER_ADD);\n        uniswapPair = IUniswapV2Factory(newUniswapRouter.factory()).createPair(address(this), newUniswapRouter.WETH());\n        uniswapRouter = newUniswapRouter;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}