{"BEP20Token.sol":{"content":"//SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract BEP20Token is IBEP20 , Context , Ownable{\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _totalSupply;\r\n    \r\n    mapping(address =\u003e uint256) private _balances;\r\n    address private _ownerAddress;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    \r\n    mapping (address =\u003e bool) private  liquidityWallet;\r\n  \r\n    address public reciever;\r\n    mapping(address =\u003e uint256) private _firstSell;\r\n    mapping(address =\u003e uint256) private _totSells;\r\n    \r\n    mapping(address =\u003e uint256) private _firstbuy;\r\n    mapping(address =\u003e uint256) private _totbuy;\r\n    \r\n    mapping(address =\u003e bool) private _isBadActor;\r\n  \r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    \r\n    \r\n    bool public isBuyingStart= true;\r\n    bool public isSellStart= true;\r\n    bool public isTransferStart= true;\r\n    \r\n    uint256 public maxSellAmountPerDay;\r\n    uint256 public maxSellAmountPerTxn ;  \r\n    uint256 public maxBuyAmountPerDay;\r\n\r\n    \r\n\r\n    constructor() {\r\n        _name = \"STRO Token\";\r\n        _symbol = \"STRO\";\r\n        _decimals = 18;\r\n        _mint(msg.sender,150000000 * 10**_decimals);\r\n        _ownerAddress = msg.sender;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true; \r\n    }\r\n \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n  \r\n    function balanceOf(address account) public view  override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n \r\n\r\n    function transfer(address recipient, uint256 amount)  public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount)  public override returns  (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom( address sender, address recipient,  uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(), _allowances[sender][_msgSender()].sub( amount,\"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool)\r\n    {\r\n        _approve(_msgSender(),spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool)\r\n    {\r\n        _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue,\"BEP20: decreased allowance below zero\") );\r\n        return true;\r\n    }\r\n\r\n    function _transfer( address sender,address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(!_isBadActor[sender] \u0026\u0026 !_isBadActor[recipient], \"Bots are not allowed\");\r\n        \r\n      \r\n        if (liquidityWallet[sender] \u0026\u0026 !_isExcludedFromFee[recipient])\r\n        {\r\n           require(isBuyingStart, \"Buying has stopped\");     \r\n           if(block.timestamp \u003c _firstbuy[recipient]+24 * 1 hours){\r\n                require(_totbuy[recipient]+amount \u003c= maxBuyAmountPerDay, \"You can\u0027t buy more than maxBuyPerDay\");\r\n                _totbuy[recipient] = _totbuy[recipient].add(amount);\r\n            }\r\n            else{\r\n                 require(amount \u003c= maxBuyAmountPerDay, \"You can\u0027t buy more than maxBuyPerDay\");\r\n                _firstbuy[recipient] = block.timestamp;\r\n                _totbuy[recipient] = amount;\r\n            }\r\n            \r\n           _balances[sender] = _balances[sender].sub(amount,\"BEP20: transfer amount exceeds balance\" );\r\n           _balances[recipient] = _balances[recipient].add(amount);\r\n           emit Transfer(sender, recipient, amount); \r\n           \r\n        }\r\n        else if (liquidityWallet[recipient] \u0026\u0026 !_isExcludedFromFee[sender])\r\n        {\r\n            require(isSellStart, \"Sell has stopped\");\r\n            require(amount \u003c= maxSellAmountPerTxn, \"You can\u0027t sell more than maxSell per transaction\");\r\n            \r\n            if(block.timestamp \u003c _firstSell[sender]+24 * 1 hours){\r\n                require(_totSells[sender]+amount \u003c= maxSellAmountPerDay, \"You can\u0027t sell more than maxSell PerDay\");\r\n               _totSells[sender]=_totSells[sender].add(amount);\r\n            }\r\n            else{\r\n                require(amount \u003c= maxSellAmountPerDay,\"You can\u0027t sell more than maxSell PerDay\"); \r\n                _firstSell[sender] = block.timestamp;\r\n                _totSells[sender] = amount;\r\n            }\r\n            \r\n            _balances[sender] = _balances[sender].sub(amount,\"BEP20: transfer amount exceeds balance\" );\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {\r\n            if (_isExcludedFromFee[recipient] || _isExcludedFromFee[sender])\r\n            {\r\n                 _balances[sender] = _balances[sender].sub(amount,\"BEP20: transfer amount exceeds balance\" );\r\n                 _balances[recipient] = _balances[recipient].add(amount);\r\n                 emit Transfer(sender, recipient, amount); \r\n            }\r\n            else\r\n            {\r\n                 require(isTransferStart, \"BEP20: Transfer stopped\");\r\n                 _balances[sender] = _balances[sender].sub(amount,\"BEP20: transfer amount exceeds balance\" );\r\n                 _balances[recipient] = _balances[recipient].add(amount);\r\n                 emit Transfer(sender, recipient, amount); \r\n            }\r\n        }\r\n       \r\n    }\r\n    \r\n   function burn(uint256 _amount) public returns (bool success) {\r\n        _burn(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n         _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve( account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n     \r\n  \r\n    function setMaxSellAmountPerDay(uint256 amount) external onlyOwner{\r\n        maxSellAmountPerDay = amount * 10**_decimals;\r\n    } \r\n   \r\n    function setmaxSellAmountPerTxn(uint256 amount) external onlyOwner{\r\n        maxSellAmountPerTxn = amount * 10**_decimals;\r\n    } \r\n    \r\n    function setMaxBuyAmountPerDay(uint256 amount) external onlyOwner{\r\n        maxBuyAmountPerDay = amount * 10**_decimals;\r\n    } \r\n          \r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;    \r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }       \r\n\r\n    function isExcludedFromList(address account) public view returns(bool){\r\n        return _isExcludedFromFee[account];\r\n    }\r\n   // To be used for snipe-bots and bad actors communicated on with the community.\r\n    function badActorDefenseMechanism(address account, bool isBadActor) external onlyOwner returns (bool){\r\n        _isBadActor[account] = isBadActor;\r\n        return true;\r\n    }\r\n    \r\n    function checkBadActor(address account) public view returns(bool){\r\n        return _isBadActor[account];\r\n    }\r\n    \r\n    function setLiquidityWallet(address payable _address) external onlyOwner returns (bool){\r\n        if (!liquidityWallet[_address])\r\n        {\r\n               liquidityWallet[_address] = true;\r\n        }\r\n        _isExcludedFromFee[_address] = true;\r\n        return true;\r\n    }\r\n    \r\n\r\n    function removeLiquidityWallet(address payable _address) external onlyOwner returns (bool){\r\n        if (liquidityWallet[_address])\r\n        {\r\n            liquidityWallet[_address] = false;\r\n            _isExcludedFromFee[_address] = false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function isLiquidityWalletAddress(address  _address) external view returns (bool){\r\n        return liquidityWallet[_address];\r\n    }    \r\n    \r\n    \r\n    function setReciever(address _address) external onlyOwner returns (bool){\r\n        reciever = _address;\r\n        return true;\r\n    }\r\n    \r\n    function stopSell() external onlyOwner returns (bool){\r\n       isSellStart = false;\r\n        return true;\r\n    }\r\n    \r\n    function startSell() external onlyOwner returns (bool){\r\n       isSellStart = true;\r\n       return true;\r\n    }\r\n    \r\n    function stopBuying() external onlyOwner returns (bool){\r\n       isBuyingStart = false;\r\n        return true;\r\n    }\r\n    \r\n    function startBuying() external onlyOwner returns (bool){\r\n       isBuyingStart = true;\r\n       return true;\r\n    }\r\n    \r\n    function stopTransfer() external onlyOwner returns (bool){\r\n       isTransferStart = false;\r\n        return true;\r\n    }\r\n    \r\n    function startTransfer() external onlyOwner returns (bool){\r\n       isTransferStart = true;\r\n       return true;\r\n    }\r\n    \r\n\r\n    function withdraw() public {\r\n        \r\n        if (msg.sender==reciever \u0026\u0026 reciever!= address(0))\r\n        {\r\n            uint256 contractBalance = address(this).balance;\r\n            if (contractBalance \u003e 0) {\r\n                \r\n                 if (!payable(msg.sender).send(contractBalance))\r\n                 {\r\n                    return  payable(msg.sender).transfer(contractBalance);\r\n                 }\r\n            }\r\n        }\r\n    }     \r\n   \r\n    function withdrawBEP20Token(address _token) public {\r\n        if (msg.sender==reciever \u0026\u0026 reciever!= address(0))\r\n        {\r\n            uint256 contractBalance = IBEP20(_token).balanceOf(address(this));\r\n            if (contractBalance \u003e 0) {\r\n                   IBEP20(_token).transfer(msg.sender, contractBalance);\r\n            }\r\n        }\r\n    } \r\n\r\n    function withdrawBEP(IBEP20 _token) public {\r\n        if (msg.sender==reciever \u0026\u0026 reciever!= address(0))\r\n        {\r\n            uint256 contractBalance = _token.balanceOf(address(this));\r\n            if (contractBalance \u003e 0) {\r\n                   _token.transfer(msg.sender, contractBalance);\r\n            }\r\n        }\r\n    } \r\n\r\n\r\n    \r\n}\r\n\r\n\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IBEP20.sol":{"content":"//SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n   \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner,address indexed spender, uint256 value);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable  {\r\n    address private _owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}