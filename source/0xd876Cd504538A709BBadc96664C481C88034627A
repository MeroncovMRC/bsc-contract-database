// SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;

   

    interface IERC20 {
        /**
        * @dev Returns the amount of tokens in existence.
        */
        function totalSupply() external view returns (uint256);
        /**
        * @dev Returns the amount of tokens owned by `account`.
        */
        function balanceOf(address account) external view returns (uint256);
        /**
        * @dev Moves `amount` tokens from the caller's account to `recipient`.
        *
        * Returns a boolean value indicating whether the operation succeeded.
        *
        * Emits a {Transfer} event.
        */
        function transfer(address recipient, uint256 amount) external returns (bool);
        /**
        * @dev Returns the remaining number of tokens that `spender` will be
        * allowed to spend on behalf of `owner` through {transferFrom}. This is
        * zero by default.
        *
        * This value changes when {approve} or {transferFrom} are called.
        */
        function allowance(address owner, address spender)
        external
        view
        returns (uint256);

        /**
        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
        *
        * Returns a boolean value indicating whether the operation succeeded.
        *
        * IMPORTANT: Beware that changing an allowance with this method brings the risk
        * that someone may use both the old and the new allowance by unfortunate
        * transaction ordering. One possible solution to mitigate this race
        * condition is to first reduce the spender's allowance to 0 and set the
        * desired value afterwards:
        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
        *
        * Emits an {Approval} event.
        */
        function approve(address spender, uint256 amount) external returns (bool);

        /**
        * @dev Moves `amount` tokens from `sender` to `recipient` using the
        * allowance mechanism. `amount` is then deducted from the caller's
        * allowance.
        *
        * Returns a boolean value indicating whether the operation succeeded.
        *
        * Emits a {Transfer} event.
        */
        function transferFrom(
            address sender,
            address recipient,
            uint256 amount
        ) external returns (bool);

        /**
        * @dev Emitted when `value` tokens are moved from one account (`from`) to
        * another (`to`).
        *
        * Note that `value` may be zero.
        */
        event Transfer(address indexed from, address indexed to, uint256 value);

        /**
        * @dev Emitted when the allowance of a `spender` for an `owner` is set by
        * a call to {approve}. `value` is the new allowance.
        */
        event Approval(
            address indexed owner,
            address indexed spender,
            uint256 value
        );
    }


    contract Ownable {
        address internal _owner;

        event OwnershipTransferred(
            address indexed previousOwner,
            address indexed newOwner
        );

        /**
        * @dev Initializes the contract setting the deployer as the initial owner.
        */
        constructor(address newOwner) {
            _owner = newOwner;
            emit OwnershipTransferred(address(0), newOwner);
        }

        function _msgSender() internal view returns(address) {
            return msg.sender;
        }
        /**
        * @dev Returns the address of the current owner.
        */
        function owner() public view returns (address) {
            return _owner;
        }

        /**
        * @dev Throws if called by any account other than the owner.
        */
        modifier onlyOwner() {
            require(_owner == _msgSender(), "Ownable: caller is not the owner");
            _;
        }

        /**
        * @dev Leaves the contract without owner. It will not be possible to call
        * `onlyOwner` functions anymore. Can only be called by the current owner.
        *
        * NOTE: Renouncing ownership will leave the contract without an owner,
        * thereby removing any functionality that is only available to the owner.
        */
        function renounceOwnership() public virtual onlyOwner {
            emit OwnershipTransferred(_owner, address(0));
            _owner = address(0);
        }

        /**
        * @dev Transfers ownership of the contract to a new account (`newOwner`).
        * Can only be called by the current owner.
        */
        function transferOwnership(address newOwner) public virtual onlyOwner {
            require(
                newOwner != address(0),
                "Ownable: new owner is the zero address"
            );
            emit OwnershipTransferred(_owner, newOwner);
            _owner = newOwner;
        }
    }


    library SafeMath {
        /**
        * @dev Returns the addition of two unsigned integers, reverting on
        * overflow.
        *
        * Counterpart to Solidity's `+` operator.
        *
        * Requirements:
        *
        * - Addition cannot overflow.
        */
        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            require(c >= a, "SafeMath: addition overflow");

            return c;
        }

        /**
        * @dev Returns the subtraction of two unsigned integers, reverting on
        * overflow (when the result is negative).
        *
        * Counterpart to Solidity's `-` operator.
        *
        * Requirements:
        *
        * - Subtraction cannot overflow.
        */
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            return sub(a, b, "SafeMath: subtraction overflow");
        }

        /**
        * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
        * overflow (when the result is negative).
        *
        * Counterpart to Solidity's `-` operator.
        *
        * Requirements:
        *
        * - Subtraction cannot overflow.
        */
        function sub(
            uint256 a,
            uint256 b,
            string memory errorMessage
        ) internal pure returns (uint256) {
            require(b <= a, errorMessage);
            uint256 c = a - b;

            return c;
        }

        /**
        * @dev Returns the multiplication of two unsigned integers, reverting on
        * overflow.
        *
        * Counterpart to Solidity's `*` operator.
        *
        * Requirements:
        *
        * - Multiplication cannot overflow.
        */
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) {
                return 0;
            }

            uint256 c = a * b;
            require(c / a == b, "SafeMath: multiplication overflow");

            return c;
        }

        /**
        * @dev Returns the integer division of two unsigned integers. Reverts on
        * division by zero. The result is rounded towards zero.
        *
        * Counterpart to Solidity's `/` operator. Note: this function uses a
        * `revert` opcode (which leaves remaining gas untouched) while Solidity
        * uses an invalid opcode to revert (consuming all remaining gas).
        *
        * Requirements:
        *
        * - The divisor cannot be zero.
        */
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
            return div(a, b, "SafeMath: division by zero");
        }

        /**
        * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
        * division by zero. The result is rounded towards zero.
        *
        * Counterpart to Solidity's `/` operator. Note: this function uses a
        * `revert` opcode (which leaves remaining gas untouched) while Solidity
        * uses an invalid opcode to revert (consuming all remaining gas).
        *
        * Requirements:
        *
        * - The divisor cannot be zero.
        */
        function div(
            uint256 a,
            uint256 b,
            string memory errorMessage
        ) internal pure returns (uint256) {
            require(b > 0, errorMessage);
            uint256 c = a / b;
            // assert(a == b * c + a % b); // There is no case in which this doesn't hold

            return c;
        }
    }

    contract Node is Ownable {
        using SafeMath for uint256;
        mapping(uint256 => Stage) public stageInfo;
        uint256 public thisStage = 2;
        uint256 public immutable maxStage = 10;
        mapping(address => uint256) public nodeJoin;
        uint256 public nodeCount;
        address public lpWallet;
        mapping(address => address) public bindInvite;
        address public immutable uniswapV2Pair;
        struct Stage {
            uint256 thisNode;
            uint256 usdtToken;
            uint256 maxNode;
        }
        event BindInvite(address indexed oldWallet,address indexed newWallet);
        event ActiveNode(uint256 stage, address indexed  wallet, uint256 lpAmount);
        event StageEnd(uint256 stage);

        constructor(address[] memory _wallets) Ownable(_wallets[0]) {
            _owner = _wallets[0];
            lpWallet = _wallets[0];
            initStage();
            joinNodeCore(uint256(1),_wallets[0],uint256(0));
            uniswapV2Pair = _wallets[1];
        }

        function initStage() internal {
            Stage memory _stage = Stage({thisNode:0,usdtToken:0,maxNode:1000});
            stageInfo[1] = _stage;
        }
        
        receive() external payable {
        }

        function bind(address _oldWallet) public {
            require(!isBind(_msgSender()),"The invitation address has been bound");
            require(isNodeWallet(_oldWallet),"Invitation wallet is not activated");
            require(isBind(_oldWallet),"old user is not found");
            bindInvite[_msgSender()] = _oldWallet;
            emit BindInvite(_oldWallet, _msgSender());
        }

        function isBind(address _account) public view returns(bool) {
            return bindInvite[_account] != address(0) || _account == owner();
        }

        function setStageLp(uint256 _stageId,uint256 _usdtToken,uint256 _maxNode) public onlyOwner {
            require(_stageId > 0 && _stageId <= maxStage,"Cannot set this stage");
            Stage memory _stage = stageInfo[_stageId];
            _stage.usdtToken = _usdtToken;
            _stage.maxNode = _maxNode;
            stageInfo[_stageId] = _stage;
        }

        function activeNode() public {
            require(thisStage > uint256(0));
            require(isBind(_msgSender()),"is not bind parent");
            require(!isNodeWallet(_msgSender()),"Is already a node");
            Stage memory _stage = stageInfo[thisStage];
            require(_stage.thisNode < _stage.maxNode,"node is full");
            IERC20 _LPContract = IERC20(uniswapV2Pair);
            uint256 _lpAmount = _LPContract.balanceOf(_msgSender());
            require(uint256(0) < _lpAmount,"LP Token Insufficient");
            joinNodeCore(thisStage,_msgSender(),_lpAmount);
            _LPContract.transferFrom(_msgSender(),lpWallet,_lpAmount);
        }

        function addNode(uint256 _stageId,address _account,address _oldWallet) public onlyOwner {
            Stage memory _stage = stageInfo[_stageId];
            require(_stage.thisNode < _stage.maxNode,"node is full");
            if(!isBind(_account)) {
                bindInvite[_account] = _oldWallet;
                emit BindInvite(_oldWallet, _account);
            }
            if(!isNodeWallet(_account)) {
                joinNodeCore(_stageId,_account,uint256(0));
            }
        }

        function joinNodeCore(uint256 _thisStage,address _account,uint256 _lpAmount) internal {
            Stage memory _stage = stageInfo[_thisStage];
            nodeJoin[_account] = _thisStage;
            _stage.thisNode = _stage.thisNode + 1;
            stageInfo[_thisStage] = _stage;
            nodeCount ++;
            emit ActiveNode(_thisStage, _account,_lpAmount);
            if(_stage.thisNode >= _stage.maxNode) {
                thisStage = ++thisStage >= maxStage ? maxStage : thisStage;
                emit StageEnd(_thisStage);
            }
        }

        function testStageEndEvent(uint256 _stage) public onlyOwner { 
            emit StageEnd(_stage);
        }

        function setStage(uint256 _stageId) public onlyOwner {
            require(_stageId > 0 && _stageId <= maxStage,"Cannot set this stage");
            thisStage = _stageId;
        }

        function setLPWallet(address _account) public onlyOwner {
            lpWallet = _account;
        }
        
        function isNodeWallet(address _account) public view returns(bool) {
            return nodeJoin[_account] != uint256(0); 
        }

        function calculateFee(uint256 _amount,uint256 _fee) internal pure returns(uint256){
            return _amount.mul(_fee).div(10**3);
        }
}