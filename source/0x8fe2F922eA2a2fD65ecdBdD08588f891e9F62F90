{"CaesarShiba.sol":{"content":"/**\n ______    ______   ________   ______    ______   _______          ______   __    __  ______  _______    ______\n /      \\  /      \\ |        \\ /      \\  /      \\ |       \\        /      \\ |  \\  |  \\|      \\|       \\  /      \\\n|  $$$$$$\\|  $$$$$$\\| $$$$$$$$|  $$$$$$\\|  $$$$$$\\| $$$$$$$\\      |  $$$$$$\\| $$  | $$ \\$$$$$$| $$$$$$$\\|  $$$$$$\\\n| $$   \\$$| $$__| $$| $$__    | $$___\\$$| $$__| $$| $$__| $$      | $$___\\$$| $$__| $$  | $$  | $$__/ $$| $$__| $$\n| $$      | $$    $$| $$  \\    \\$$    \\ | $$    $$| $$    $$       \\$$    \\ | $$    $$  | $$  | $$    $$| $$    $$\n| $$   __ | $$$$$$$$| $$$$$    _\\$$$$$$\\| $$$$$$$$| $$$$$$$\\       _\\$$$$$$\\| $$$$$$$$  | $$  | $$$$$$$\\| $$$$$$$$\n| $$__/  \\| $$  | $$| $$_____ |  \\__| $$| $$  | $$| $$  | $$      |  \\__| $$| $$  | $$ _| $$_ | $$__/ $$| $$  | $$\n \\$$    $$| $$  | $$| $$     \\ \\$$    $$| $$  | $$| $$  | $$       \\$$    $$| $$  | $$|   $$ \\| $$    $$| $$  | $$\n  \\$$$$$$  \\$$   \\$$ \\$$$$$$$$  \\$$$$$$  \\$$   \\$$ \\$$   \\$$        \\$$$$$$  \\$$   \\$$ \\$$$$$$ \\$$$$$$$  \\$$   \\$$\n\n\nWebsite: http://wwww.caesarshiba.com\nTelegram: https://t.me/caesarshiba\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \u0027./ERC20.sol\u0027;\nimport \u0027./PancakeSwap.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\n\ncontract CaesarShiba is ERC20 {\n    using SafeMath for uint256;\n\n    // DEX router\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    address public chestAddress = 0x819F0A2A5e18EF8e5264D0d535495009eB62f5C8;\n    address payable public marketingAddress = payable(0x1d2Ee56d3bfEd7Fec484a0316820E9D19259D5f6);\n    mapping (address =\u003e bool) public _isExcludedFromFee;\n    address payable public _owner;\n    bool public _manualSwap = true;\n    uint public _feesLiquidity = 5;\n    uint public _feesMarketing = 5;\n    uint public _feesChest = 5;\n    uint toMint = 10 ** (18 + 8);\n    uint public _minAmountToParticipate = toMint / 10000;\n    uint minSwapAmount = toMint / 1000;\n    uint maxSwapAmount = toMint / 100;\n    uint public _maxWallet;\n    // Chest infos\n    uint public _maxChest;\n    uint public _startTimeChest;\n    uint public _minTimeHoldingChest = 300;\n    address public _chestWonBy;\n    address public _lastParticipantAddress;\n    mapping (address =\u003e bool) private _isExcludedFromGame;\n    // Presale\n    bool public _presaleRunning = true;\n    mapping (address =\u003e bool) _presale;\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Call authorized only for owner\");\n        _;\n    }\n\n    struct WinHistory {\n        uint time;\n        uint amount;\n        address account;\n    }\n\n    WinHistory[] public _winningHistory;\n\n    bool inSwapAndLiquify;\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() ERC20(\"CAESAR SHIBA\", \"CSR\") {\n        _owner = payable(msg.sender);\n\n        address uniswapV2RouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n        uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddress);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n\n        _isExcludedFromFee[_owner] = true;\n        _isExcludedFromFee[marketingAddress] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[chestAddress] = true;\n        _isExcludedFromFee[address(0)] = true;\n        _isExcludedFromFee[uniswapV2RouterAddress] = true;\n\n        _isExcludedFromGame[chestAddress] = true;\n        _isExcludedFromGame[address(this)] = true;\n        _isExcludedFromGame[_owner] = true;\n        _isExcludedFromGame[marketingAddress] = true;\n        _isExcludedFromGame[address(0)] = true;\n        _isExcludedFromGame[uniswapV2Pair] = true;\n        _isExcludedFromGame[uniswapV2RouterAddress] = true;\n\n        _presale[chestAddress] = true;\n        _presale[address(this)] = true;\n        _presale[_owner] = true;\n        _presale[marketingAddress] = true;\n        _presale[address(0)] = true;\n        _presale[uniswapV2Pair] = true;\n        _presale[uniswapV2RouterAddress] = true;\n\n        _mint(msg.sender, toMint);\n        _maxWallet = _totalSupply / 100;\n        _maxChest = (_totalSupply / 100) * 3;\n    }\n\n    function _addLiquidity(uint amountTokenDesired, uint amountETH) private\n    {\n        _approve(address(this), address(uniswapV2Router), amountTokenDesired);\n        uniswapV2Router.addLiquidityETH{value: amountETH}(address(this), amountTokenDesired, 0, 0, _owner, block.timestamp);\n    }\n\n    function swapTokensForETH(uint amountToken) private\n    {\n        // Step 1 : approve\n        _approve(address(this), address(uniswapV2Router), amountToken);\n\n        // Step 2 : swapExactTokensForETH\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToken, 0, path, address(this), block.timestamp + 1 minutes);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 /*amount*/\n    ) internal override\n    {\n        bool isBuying = from == uniswapV2Pair;\n        if (_presaleRunning \u0026\u0026 isBuying) {\n            require(_presale[to], \"Buys are reserved to whitelisted addresses during presale\");\n        }\n\n        bool isSelling = to == uniswapV2Pair;\n        if (isSelling \u0026\u0026 !_manualSwap \u0026\u0026 !inSwapAndLiquify \u0026\u0026 balanceOf(uniswapV2Pair) \u003e 0)\n        {\n            _swapAndLiquify();\n        }\n    }\n\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override\n    {\n        if (!_presaleRunning) {\n            manageChest(from, to, amount);\n        }\n\n        bool isBuying = from == uniswapV2Pair;\n        if (!_presaleRunning \u0026\u0026 !_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to] \u0026\u0026 balanceOf(uniswapV2Pair) \u003e 0)\n        {\n            if ((_feesLiquidity + _feesMarketing + _feesChest) \u003e 0) {\n                // bool isSelling = to == uniswapV2Pair;\n                uint feesPercentage = _feesLiquidity.add(_feesMarketing);\n                // use isSelling ? condition if sell taxes != buy taxes\n                uint256 contractFeesAmount = amount.mul(feesPercentage).div(100);\n                uint chestFeeAmount = amount.mul(_feesChest).div(100);\n                _balances[to] = _balances[to].sub(contractFeesAmount.add(chestFeeAmount));\n                _balances[address(this)] = _balances[address(this)].add(contractFeesAmount);\n                _balances[chestAddress] = _balances[chestAddress].add(chestFeeAmount);\n                if (_balances[chestAddress] \u003e _maxChest) {\n                    uint overflow = _balances[chestAddress].sub(_maxChest);\n                    _balances[address(this)] = _balances[address(this)].add(overflow);\n                    _balances[chestAddress] = _balances[chestAddress].sub(overflow);\n                }\n            }\n        }\n        // Anti whale\n        if (isBuying \u0026\u0026 !_isExcludedFromFee[to]) {\n            require(_balances[to] \u003c= _maxWallet, \"Impossible to hold more than max wallet\");\n        }\n    }\n\n    function _swapAndLiquify() internal lockTheSwap\n    {\n        uint contractBalance = _balances[address(this)];\n        if (contractBalance \u003e minSwapAmount || _manualSwap)\n        {\n            if (contractBalance \u003e maxSwapAmount \u0026\u0026 !_manualSwap)\n            {\n                contractBalance = maxSwapAmount;\n            }\n\n            uint totalFees = _feesMarketing.add(_feesLiquidity);\n            uint marketingTokens = contractBalance.mul(_feesMarketing).div(totalFees == 0 ? 1 : totalFees);\n            uint liquidityTokens = contractBalance.sub(marketingTokens);\n            uint liquidityTokensHalf = liquidityTokens.div(2);\n            uint liquidityTokensOtherHalf = liquidityTokens.sub(liquidityTokensHalf);\n\n            swapTokensForETH(marketingTokens.add(liquidityTokensHalf));\n            uint amountETHToLiquefy = address(this).balance.mul(liquidityTokensHalf).div(marketingTokens.add(liquidityTokensHalf));\n            _addLiquidity(liquidityTokensOtherHalf, amountETHToLiquefy);\n            (bool sent,) = marketingAddress.call{value : address(this).balance}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n    }\n\n    function swapAndLiquify() public onlyOwner\n    {\n        _swapAndLiquify();\n    }\n\n    function checkReward() public {\n        if (!inSwapAndLiquify \u0026\u0026 _startTimeChest \u003e 0 \u0026\u0026 block.timestamp \u003e _startTimeChest + _minTimeHoldingChest * 1 minutes) {\n            // We have a winner\n            _startTimeChest = 0;\n            uint amountWon = _balances[chestAddress];\n            _balances[_lastParticipantAddress] = _balances[_lastParticipantAddress].add(amountWon);\n            _balances[chestAddress] = 0;\n            _chestWonBy = _lastParticipantAddress;\n            _lastParticipantAddress = 0x000000000000000000000000000000000000dEaD;\n            // Store all victories\n            WinHistory memory winHistory;\n            winHistory.time = block.timestamp;\n            winHistory.amount = amountWon;\n            winHistory.account = _chestWonBy;\n            _winningHistory.push(winHistory);\n        }\n    }\n\n    function manageChest(address from, address to, uint amount) private {\n        checkReward();\n\n        bool isBuying = from == uniswapV2Pair;\n        if (isBuying \u0026\u0026 amount \u003e= _minAmountToParticipate \u0026\u0026 !_isExcludedFromGame[to] \u0026\u0026 _lastParticipantAddress != to) {\n            // Buyer is now owner of the chest\n            _startTimeChest = block.timestamp;\n            _lastParticipantAddress = to;\n        }\n    }\n\n    receive() external payable {}\n\n    function chestAmount() public view returns (uint) { return _balances[chestAddress]; }\n    function historySize() public view returns (uint) { return _winningHistory.length; }\n\n    function setMinAmountToParticipate(uint value) public onlyOwner {\n        _minAmountToParticipate = value;\n    }\n    function setMinSwapAmount(uint value) public onlyOwner {\n        minSwapAmount = value;\n    }\n    function setMaxSwapAmount(uint value) public onlyOwner {\n        maxSwapAmount = value;\n    }\n    function setMaxWalletAmount(uint value) public onlyOwner {\n        _maxWallet = value;\n    }\n    function setMaxChestAmount(uint value) public onlyOwner {\n        _maxChest = value;\n    }\n\n    function setFeeLiquidity(uint value) public onlyOwner {\n        _feesLiquidity = value;\n    }\n    function setFeeMarketing(uint value) public onlyOwner {\n        _feesMarketing = value;\n    }\n    function setFeeChest(uint value) public onlyOwner {\n        _feesChest = value;\n    }\n\n    function setMinTimeHoldingChest(uint value) public onlyOwner {\n        _minTimeHoldingChest = value;\n    }\n\n    function setManualSwap(bool value) public onlyOwner {\n        _manualSwap = value;\n    }\n    function setGameParticipation(bool value, address add) public onlyOwner {\n        _isExcludedFromGame[add] = value;\n    }\n    function setTaxContribution(bool value, address add) public onlyOwner {\n        _isExcludedFromFee[add] = value;\n    }\n    function setPresaleActivation(bool value) public onlyOwner {\n        _presaleRunning = value;\n    }\n    function addToPresale(address account) public onlyOwner {\n        _presale[account] = true;\n    }\n\n    /**\n     * HELPER FUNCTIONS\n     */\n    function changeOwner(address newOwner) public onlyOwner {\n        _owner = payable(newOwner);\n    }\n\n    function addLiquidityInit(uint amountTokenDesired) public payable onlyOwner\n    {\n        _balances[address(this)] += amountTokenDesired;\n        _balances[msg.sender] -= amountTokenDesired;\n        _approve(address(this), address(uniswapV2Router), amountTokenDesired);\n        uniswapV2Router.addLiquidityETH{value: msg.value}(address(this), amountTokenDesired, 0, 0, msg.sender, block.timestamp);\n    }\n\n    function retrieveETHFromContract() public onlyOwner {\n        (bool sent,) = _owner.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function getETHBalance(address account) public view onlyOwner returns (uint) {\n        return account.balance;\n    }\n\n    function burn(uint256 amount) public onlyOwner {\n        _burn(address(this), amount);\n    }\n\n    struct LockBoxStruct {\n        uint balance;\n        uint releaseTime;\n    }\n\n    LockBoxStruct[] public lockBoxStructs; // This could be a mapping by address, but these numbered lockBoxes support possibility of multiple tranches per address\n\n    event LogLockBoxDeposit(address sender, uint amount, uint releaseTime);\n    event LogLockBoxWithdrawal(address receiver, uint amount);\n\n    // This function is used to lock LP tokens\n    function lockLiquidityPool(uint amount, uint numSecondsToLock) public onlyOwner returns(bool success) {\n        require(IERC20(uniswapV2Pair).transferFrom(msg.sender, address(this), amount));\n        LockBoxStruct memory l;\n        l.balance = amount;\n        uint releaseTime = block.timestamp + numSecondsToLock;\n        l.releaseTime = releaseTime;\n        lockBoxStructs.push(l);\n        emit LogLockBoxDeposit(msg.sender, amount, releaseTime);\n        return true;\n    }\n\n    // This function is used to recover LP tokens after the lock delay is over\n    function withdrawExpiredLock(uint lockBoxNumber) public onlyOwner returns(bool) {\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n        require(l.releaseTime \u003c= block.timestamp); // This garranties the liquidity pool locking feature, it\u0027s impossible to recover your LP token if the release time is not reached.\n        uint amount = l.balance;\n        l.balance = 0;\n        emit LogLockBoxWithdrawal(msg.sender, amount);\n        require(IERC20(uniswapV2Pair).transfer(msg.sender, amount));\n        return true;\n    }\n\n    function extendLockTime(uint lockBoxNumber, uint numSecondsToLock) public onlyOwner returns(bool) {\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n        require(block.timestamp + numSecondsToLock \u003e l.releaseTime);\n        l.releaseTime = block.timestamp + numSecondsToLock;\n        return true;\n    }\n\n    function getRemainingLockTime(uint lockBoxNumber) public view returns(uint)\n    {\n        return lockBoxStructs[lockBoxNumber].releaseTime - block.timestamp;\n    }\n\n    function isChestWon() public view returns(bool)\n    {\n        return !inSwapAndLiquify \u0026\u0026 _startTimeChest \u003e 0 \u0026\u0026 block.timestamp \u003e _startTimeChest + _minTimeHoldingChest * 1 minutes;\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) internal _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"PancakeSwap.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    \n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"}}