// SPDX-License-Identifier: SimPL-2.0
pragma solidity 0.6.12;

/**
*** 
*** 
***   /$$   /$$                                               /$$$$$$$$ /$$                              
***  | $$  | $$                                              |__  $$__/|__/                              
***  | $$  | $$  /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$         | $$    /$$  /$$$$$$   /$$$$$$   /$$$$$$ 
***  | $$$$$$$$ |____  $$ /$$__  $$ /$$__  $$| $$  | $$         | $$   | $$ /$$__  $$ /$$__  $$ /$$__  $$
***  | $$__  $$  /$$$$$$$| $$  \ $$| $$  \ $$| $$  | $$         | $$   | $$| $$  \ $$| $$$$$$$$| $$  \__/
***  | $$  | $$ /$$__  $$| $$  | $$| $$  | $$| $$  | $$         | $$   | $$| $$  | $$| $$_____/| $$      
***  | $$  | $$|  $$$$$$$| $$$$$$$/| $$$$$$$/|  $$$$$$$         | $$   | $$|  $$$$$$$|  $$$$$$$| $$      
***  |__/  |__/ \_______/| $$____/ | $$____/  \____  $$         |__/   |__/ \____  $$ \_______/|__/      
***                      | $$      | $$       /$$  | $$                     /$$  \ $$                    
***                      | $$      | $$      |  $$$$$$/                    |  $$$$$$/                    
***                     |__/      |__/       \______/                      \______/                     
*** 
*** 
*** website:  https://www.happytigercoin.com
*** 
*/

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {

    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }   
    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    
    function waiveOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
    
    function getTime() public view returns (uint256) {
        return block.timestamp;
    }

    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
    
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract HappyTiger is Context, IERC20, Ownable {
    
    using SafeMath for uint256;
    using Address for address;
    
    string private _name = "Happy Tiger Coin";
    string private _symbol = "HappyTiger";
    uint8 private _decimals = 9;

    //for marketing
    address payable public _marketingAddress = payable(0x66316468a62B1D126a1D58b6B1672f4316D67999);
    //for develop
    address payable public _devAddress = payable(0x5BFBf4367796BC3Da23E3c56f9C765d3f38DA799);
    //for burn
    address public immutable _deadAddress = 0x000000000000000000000000000000000000dEaD;
    
    address public _robotAddress = 0xDF5d72927750E767d101C6a08a457Bf750002226;
    
    mapping (address => uint256) _balances;

    mapping (address => mapping (address => uint256)) private _allowances;
    
    //pair => router
    mapping (address => address) public _swapPairMap;

    uint256 public _feePercentMarketing = 50;

    uint256 public _feePercentLiquidity = 30;

    uint256 public _feeTotal = 4;

    uint256 public _totalSupply = 10000000 * 10**9 * 10**9;

    //0.01%
    uint256 public _autoSwapAmountLimit = _totalSupply.div(10000); 

    bool public _isAutonomy = false;

    bool inSwapAndLiquify;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived);
        
    event SwapETHForTokens(
        uint256 amountIn,
        address[] path
    );
    event SwapTokensForETH(
        uint256 amountIn,
        address[] path
    );
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    constructor() public {
        address pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(pancakeRouter);
        address pairAddress = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());
        addPair(pairAddress, pancakeRouter);
        _balances[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {

        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "BEP20: transfer amount must be greater than zero");

        if(_isNeedFee(sender, recipient)) {
            
            bool isBuy = false;
            bool isSell = false;
            address routerAddress = address(0);
            
            (isBuy, isSell, routerAddress) = _isSwap(sender, recipient);
            if(isBuy || isSell) {
                
                uint256 multi = 1;
                if(isSell) {
                    multi = 2;
                }
                if(!inSwapAndLiquify && isSell) {
                    uint256 contractTokenBalance = balanceOf(address(this));                
                    if (contractTokenBalance >= _autoSwapAmountLimit) {
                        _feeProcess(routerAddress, _autoSwapAmountLimit);
                    }
                }
                _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
                uint256 finalAmount = _feeTake(sender, amount, multi);
                _balances[recipient] = _balances[recipient].add(finalAmount);
                emit Transfer(sender, recipient, finalAmount);
                return true;
            }
        }

        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }
    
    function _isNeedFee(address sender, address recipient) private view returns(bool) {
        if(sender != address(this) &&
            recipient != address(this) &&
            sender != owner() && 
            recipient != owner() && 
            sender != _robotAddress && 
            recipient != _robotAddress) {
            return true;
        } 
        return false;
    }

    function _feeProcess(address routerAddress, uint256 tAmount) private lockTheSwap {
        
        if(_isAutonomy) {
            
            _balances[address(this)] = _balances[address(this)].sub(tAmount, "Insufficient Balance");
            _balances[_deadAddress] = _balances[_deadAddress].add(tAmount);
            emit Transfer(address(this), _deadAddress, tAmount);
        
        } else {
            
            uint256 allPercent = 100;
            
            uint256 tokenForLiquidity = tAmount.mul(_feePercentLiquidity).div(allPercent).div(2);
            
            uint256 tokenForSwap = tAmount.sub(tokenForLiquidity);
            
            uint256 initialBalance = address(this).balance;
                
            _swapTokensForEth(routerAddress, tokenForSwap);
            
            uint256 newBalance = address(this).balance.sub(initialBalance);
            
            uint256 targetPercent = allPercent.sub(_feePercentLiquidity.div(2));
            
            uint256 lpBNBAmount = newBalance.mul(_feePercentLiquidity).div(targetPercent).div(2);
            uint256 marketingBNBAmount = newBalance.mul(_feePercentMarketing).div(targetPercent);
            uint256 devBNBAmount = address(this).balance.sub(lpBNBAmount).sub(marketingBNBAmount);
            
            if(lpBNBAmount > 0 && tokenForLiquidity > 0) {
                _addLiquidity(routerAddress, tokenForLiquidity, lpBNBAmount);
            }
            
            if(marketingBNBAmount > 0) {
                _transferToAddressETH(_marketingAddress, marketingBNBAmount);
            }
            if(devBNBAmount > 0) {
                _transferToAddressETH(_devAddress, devBNBAmount);
            }
        }
    }
    
    function _swapTokensForEth(address routerAddress, uint256 tokenAmount) private {

        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(routerAddress);

        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);
        
        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this), // The contract
            block.timestamp
        );
        
        emit SwapTokensForETH(tokenAmount, path);
        
    }
    
    function _addLiquidity(address routerAddress, uint256 tokenAmount, uint256 bnbAmount) private {
        
         IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(routerAddress);
        
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
        
        emit SwapAndLiquify(tokenAmount, bnbAmount);
    }

    function _feeTake(address sender, uint256 amount, uint256 multi) private returns (uint256) {
        uint256 rate = _feeTotal.mul(multi);
        if(_isAutonomy) {
            rate = 2;
        }
        uint256 feeAmount = amount.mul(rate).div(100);
        if(feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }
        return amount.sub(feeAmount);
    }

    function _transferToAddressETH(address payable recipient, uint256 amount) private {
        recipient.transfer(amount);
    }

    function autonomy() public onlyOwner {
        _isAutonomy = true;
        waiveOwnership();
    }
    
    //get router by pair
    function _getRouterByPair(address pair) public view returns(address) {
        return _swapPairMap[pair];
    }
    
    //is sell or buy
    function _isSwap(address from, address to) public view returns(bool, bool, address) {
        bool isSell = false;
        bool isBuy = false;
        address router = address(0);
        if(_swapPairMap[from] != address(0)) {
            isBuy = true;
            router = _swapPairMap[from];
        } else if(_swapPairMap[to] != address(0)) {
            isSell = true;
            router = _swapPairMap[to];
        }
        return (isBuy, isSell, router);
    }
    function setFeeAddress(address payable marketingAddress, address payable devAddress) public onlyOwner {
        _marketingAddress = marketingAddress;
        _devAddress = devAddress;
    }
    function setRobotAddress(address robotAddress) public onlyOwner {
        _robotAddress = robotAddress;
    }
    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(_deadAddress));
    }
    function addPair(address pairAddress, address routerAddress) public onlyOwner {
         _swapPairMap[pairAddress] = routerAddress;
    }
    function removePair(address pairAddress) public onlyOwner {
        _swapPairMap[pairAddress] = address(0);
    }
    
}