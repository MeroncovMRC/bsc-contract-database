pragma solidity ^0.5.0;

contract Whitelist{

address public owner;
uint public allusers;
struct project{
    uint status;
}

struct user{
   uint status;
}
mapping (address => project) public projects;
mapping (address => user) public users;

constructor () public{
    owner = msg.sender;
}

    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }

        modifier onlyProject() {
    require(projects[msg.sender].status == 1);
    _;
    }

function addprojects(address projectadd) public onlyOwner{
     project memory newProject;
     newProject.status = 1;
     projects[projectadd] = newProject;
}

function addWhitelist(address useraddress) public onlyProject{
     user memory newuser;
     newuser.status = 1;
     users[useraddress] = newuser;
}

        function getWhitelist(address useraddress) public view returns (uint status) {
        return users[useraddress].status;
    }

}