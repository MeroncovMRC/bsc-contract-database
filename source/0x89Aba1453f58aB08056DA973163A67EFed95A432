// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

interface IERC20Metadata {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract ERC20 is Context, IERC20, IERC20Metadata {
    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);

        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");

        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);

        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");

        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;

        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");

        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountToken, uint256 amountETH);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _owner = address(0);

        emit OwnershipTransferred(_owner, address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _owner = newOwner;

        emit OwnershipTransferred(_owner, newOwner);
    }
}

abstract contract Manageable is Ownable {
    mapping (address => bool) private _managers;

    event ManagerAdded(address indexed account);
    event ManagerRemoved(address indexed account);

    modifier onlyManager() {
        require(isManager(_msgSender()), "Manageable: caller is not the manager");
        _;
    }

    function isManager(address account) public view returns (bool) {
        return _managers[account] || account == owner();
    }

    function addManager(address account) public onlyOwner {
        _addManager(account);
    }

    function removeManager(address account) public onlyOwner {
        _removeManager(account);
    }

    function _addManager(address account) internal {
        require(account != address(0), "Manageable: new manager is the zero address");
        _managers[account] = true;
        emit ManagerAdded(account);
    }

    function _removeManager(address account) internal {
        delete _managers[account];
        emit ManagerRemoved(account);
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}

abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () {
        _status = _NOT_ENTERED;
    }

    modifier nonReentrant() {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        _status = _ENTERED;
        _;
        _status = _NOT_ENTERED;
    }
}

contract PokerToken is Manageable, ERC20 {
    using Address for address;

    uint256 public constant MAX_SUPPLY = 21_000_000e18;

    IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    address public uniswapV2Pair;

    struct FeeRate {
        uint8 burn;
        uint8 liquidity;
        uint8 reward;
    }

    FeeRate public feeRate;

    uint256 public totalLiquidityFee;

    uint256 public totalShares;
    uint256 public totalReleased;

    mapping(address => uint256) public shares;
    mapping(address => uint256) public released;

    event Released(address indexed account, uint256 amount);

    constructor() ERC20("Poker Token", "PK") {
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());

        feeRate.burn = 3;
        feeRate.liquidity = 3;
        feeRate.reward = 4;
    }

    receive() external payable {
    }

    function setFeeRate(uint8 burnRate, uint8 liquidityRate, uint8 rewardRate) external onlyOwner {
        require(burnRate + liquidityRate + rewardRate <= 100, "Invalid fee rate");

        feeRate.burn = burnRate;
        feeRate.liquidity = liquidityRate;
        feeRate.reward = rewardRate;
    }

    function releasable(address account) public view returns (uint256) {
        uint256 totalReceived = (balanceOf(address(this)) + totalReleased - totalLiquidityFee);
        if (totalReceived > 0 && totalShares > 0) {
            return totalReceived * shares[account] / totalShares - released[account];
        }
        return 0;
    }

    function release() external {
        address account = _msgSender();

        uint256 amount = releasable(account);
        if (amount > 0) {
            released[account] += amount;
            totalReleased += amount;

            _transfer(address(this), account, amount);

            emit Released(account, amount);
        }
    }

    function mint(address account, uint256 amount) external onlyManager {
        require(totalSupply() + amount <= MAX_SUPPLY, "Max supply exceeded");

        _mint(account, amount);
    }

    function burn(uint256 amount) external {
        _burn(_msgSender(), amount);
    }

    function burnFrom(address account, uint256 amount) external {
        uint256 currentAllowance = allowance(account, _msgSender());
        require(currentAllowance >= amount, "Burn amount exceeds allowance");
        _approve(account, _msgSender(), currentAllowance - amount);
        _burn(account, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal override {
        if (feeRate.burn > 0 || feeRate.liquidity > 0 || feeRate.reward > 0) {
            if ((sender == address(uniswapV2Router) || sender == uniswapV2Pair) && !isManager(recipient) && !recipient.isContract()) {
                shares[recipient] += amount;
                totalShares += amount;
            }
            if (!isManager(sender) && !sender.isContract() && (recipient == address(uniswapV2Router) || recipient == uniswapV2Pair)) {
                (uint256 burnFee, uint256 liquidityFee, uint256 rewardFee) = _calculateFee(amount);

                uint256 totalFee = burnFee + liquidityFee + rewardFee;
                super._transfer(sender, address(this), totalFee);

                _burn(address(this), burnFee);
                _addLiquidity(liquidityFee);
            }
        }
        super._transfer(sender, recipient, amount);
    }

    function _addLiquidity(uint256 amount) private {
        totalLiquidityFee += amount;
        if (totalLiquidityFee >= 1e18) {
            _approve(address(this), address(uniswapV2Router), totalLiquidityFee);

            uint256 liquidityAmount = totalLiquidityFee / 2;
            totalLiquidityFee = 0;

            uint256 initialBalance = address(this).balance;

            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = uniswapV2Router.WETH();

            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(liquidityAmount, 0, path, address(this), block.timestamp);

            uint256 ethAmount = address(this).balance - initialBalance;
            uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this), liquidityAmount, 0, 0, owner(), block.timestamp);
        }
    }

    function _calculateFee(uint256 amount) private view returns (uint256 burnFee, uint256 liquidityFee, uint256 rewardFee) {
        return (amount * feeRate.burn / 100, amount * feeRate.liquidity / 100, amount * feeRate.reward / 100);
    }
}