
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/IBeinGiveTake.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

interface IBeinGiveTake {
    function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);
    function MINT_ROLE() external pure returns (bytes32);
    function mintTo(address account, uint256 amount) external;
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
}


// File: contracts/interfaces/IBICRight.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

interface IBICRight {
    function balanceOf(address account) external view returns (uint256);
    function burnFrom(address account, uint256 amount) external;
}


// File: contracts/interfaces/IWhitelist.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IWhitelist {
    function UPDATE_WHITELIST_ROLE() external pure returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);
    function getUserInfo(address _addrUser, bytes32 _role) external view returns (address, bool, address[] memory);
    function updateMultiUserInfo(
        address[] memory _listAddrUser,
        bytes32[] memory _listRole,
        bool[] memory _listValueRole,
        address[] memory _listAddrRef,
        address[][] memory _listListExtra) external;
}


// File: contracts/libraries/Events.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

/**
 * @title Library containing events related to the smart contract.
 */
library Events {
    /**
     * @notice Emitted when a purchase is made.
     * @param buyer The address of the buyer.
     * @param value The amount of BNB spent.
     * @param birBurn The amount of BIR burned.
     * @param rateBnbUsd The rate of BNB to USD.
     * @param bicForBnbSpending The amount of BIC received for BNB spending.
     * @param bicForBirBurning The amount of BIC received for BIR burning.
     * @param bgtReceive The amount of BGT received.
     * @param bgtReferral The amount of BGT received for referral.
     * @param bnbReferral The amount of BNB received for referral.
     * @param bicForBnbThreshold The amount of BIC received for passing BNB threshold.
     * @param bicForCoreTeam The amount of BIC received for the core team.
     * @param timestamp The timestamp of the purchase.
     */
    event Purchased(
        address indexed buyer,
        uint256 value,
        uint256 birBurn,
        uint256 rateBnbUsd,
        uint256 bicForBnbSpending,
        uint256 bicForBirBurning,
        uint256 bgtReceive,
        uint256 bgtReferral,
        uint256 bnbReferral,
        uint256 bicForBnbThreshold,
        uint256 bicForCoreTeam,
        uint256 timestamp
    );

    /**
     * @notice Emitted when payment information is set.
     * @param variableName The name of the variable.
     * @param newValue The new value of the variable.
     * @param timestamp The timestamp of the transaction.
     */
    event PaymentInfoSet(
        bytes32 variableName,
        uint256 newValue,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a new management contract is set.
     * @param managementAddress The address of the new management contract.
     * @param timestamp The timestamp of the transaction.
     */
    event ManagementSet(
        address managementAddress,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a new payment contract is set.
     * @param paymentAddress The address of the new payment contract.
     * @param timestamp The timestamp of the transaction.
     */
    event PaymentContractSet(
        address paymentAddress,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a new beneficiary is set.
     * @param beneficiary The address of the beneficiary.
     * @param timestamp The timestamp of the transaction.
     */
    event BeneficiarySet(
        address beneficiary,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a new whitelist contract is set.
     * @param whitelistAddress The address of the new whitelist contract.
     * @param timestamp The timestamp of the transaction.
     */
    event WhitelistContractSet(
        address whitelistAddress,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a token withdrawal is made.
     * @param tokenAddress The address of the token.
     * @param amount The amount of tokens withdrawn.
     * @param timestamp The timestamp of the transaction.
     */
    event TokenWithdrawn(
        address tokenAddress,
        uint256 amount,
        uint256 timestamp
    );

    /**
     * @notice Emitted when BNB is withdrawn.
     * @param amount The amount of BNB withdrawn.
     * @param timestamp The timestamp of the transaction.
     */
    event BnbWithdrawn(
        uint256 amount,
        uint256 timestamp
    );

    /**
     * @notice Emitted when a new core team pool is set.
     * @param coreTeamPool The address of the core team pool.
     * @param timestamp The timestamp of the transaction.
     */
    event CoreTeamPoolSet(
        address coreTeamPool,
        uint256 timestamp
    );

    /**
     * @notice Emitted when active time is set.
     * @param startTime The start time of the sale session.
     * @param endTime The end time of the sale session.
     * @param timestamp The timestamp of the transaction.
     */
    event ActiveTimeSet(
        uint256 startTime,
        uint256 endTime,
        uint256 timestamp
    );
}


// File: contracts/modules/management/IManagement.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

/**
 * @title Interface for the Management contract.
 */
interface IManagement {
    /**
     * @notice Returns the constant value of the MODERATOR_ROLE.
     * @return A bytes32 representing the MODERATOR_ROLE.
     */
    function MODERATOR_ROLE() external pure returns (bytes32);

/**
     * @notice Returns the constant value of the WHITELIST_SUPPORTER_ROLE.
     * @return A bytes32 representing the WHITELIST_SUPPORTER_ROLE.
     */
    function WHITELIST_SUPPORTER_ROLE() external pure returns (bytes32);


    /**
     * @notice Returns the address of beneficiary who receives the BNB.
     * @return The address of the beneficiary.
     */
    function beneficiary() external view returns (address);

    /**
     * @notice Returns the address of the core team pool.
     * @return The address of the core team pool.
     */
    function coreTeamPool() external view returns (address);

    /**
     * @notice Returns the start time of the sale.
     * @return The start time of the sale.
     */
    function startTime() external view returns (uint256);

    /**
     * @notice Returns the end time of the sale.
     * @return The end time of the sale.
     */
    function endTime() external view returns (uint256);

    /**
     * @notice Sets a new payment contract.
     * @param paymentAddress The address of the new payment contract.
     */
    function setPaymentContract(address paymentAddress) external;

    /**
     * @notice Sets a new whitelist contract.
     * @param whitelistAddress The address of the new whitelist contract.
     */
    function setWhitelistContract(address whitelistAddress) external;

    /**
     * @notice Sets a new beneficiary address.
     * @param _beneficiary The address of the new beneficiary.
     */
    function setBeneficiary(address _beneficiary) external;

    /**
     * @notice Sets a new core team pool address.
     * @param _coreTeamPool The address of the new core team pool.
     */
    function setCoreTeamPool(address _coreTeamPool) external;

    /**
     * @notice Sets payment information.
     * @param variableName The name of the variable to set.
     * @param newValue The new value for the variable.
     */
    function setPaymentInfo(string memory variableName, uint256 newValue) external;

    /**
     * @notice Sets the active time for the sale.
     * @param _startTime The start time of the sale.
     * @param _endTime The end time of the sale.
     */
    function setActiveTime(uint256 _startTime, uint256 _endTime) external;

    /**
     * @notice Sets the whitelist information required MODERATOR_ROLE.
     * @param listAddrUser The list of addresses of the users.
     * @param listRole The list of roles to set.
     * @param listValueRole The list of values for the roles.
     * @param listAddrRef The list of addresses of the referrers.
     * @param listListExtra The list of lists of extra addresses.
     */
    function updateWhitelistInfo(
        address[] memory listAddrUser,
        bytes32[] memory listRole,
        bool[] memory listValueRole,
        address[] memory listAddrRef,
        address[][] memory listListExtra) external;

    /**
     * @notice Adds the whitelist information required WHITELIST_SUPPORTER_ROLE.
     * @param listAddrUser The list of addresses of the users.
     * @param listRole The list of roles to set.
     * @param listValueRole The list of values for the roles.
     * @param listAddrRef The list of addresses of the referrers.
     * @param listListExtra The list of lists of extra addresses.
     */
    function addWhitelistInfo(
        address[] memory listAddrUser,
        bytes32[] memory listRole,
        bool[] memory listValueRole,
        address[] memory listAddrRef,
        address[][] memory listListExtra) external;

    /**
     * @notice Checks if the contract is active.
     * @return A boolean value indicating if the contract is active or not.
     */
    function isActive() external view returns (bool);
}


// File: contracts/modules/payment/IPayment.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

/**
 * @title IPayment
 * @dev Interface for the Payment contract.
 */
interface IPayment {
    /**
     * @notice Returns the numerator for the BNB/BIC exchange rate.
     * @return The numerator for the BNB/BIC exchange rate.
     */
    function rateBnbBicNumerator() external view returns (uint256);

    /**
     * @notice Returns the denominator for the BNB/BIC exchange rate.
     * @return The denominator for the BNB/BIC exchange rate.
     */
    function rateBnbBicDenominator() external view returns (uint256);

    /**
     * @notice Returns the number of decimals used for calculations.
     * @return The number of decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @notice Returns the address of the management contract.
     * @return The address of the management contract.
     */
    function managementAddress() external view returns (address);

    /**
     * @notice Returns the BIR burning rate.
     * @return The current BIR burning rate.
     */
    function birBurningRate() external view returns (uint256);

    /**
     * @notice Returns the BNB referral rate.
     * @return The current BNB referral rate.
     */
    function bnbReferralRate() external view returns (uint256);

    /**
     * @notice Returns the BGT referral rate.
     * @return The current BGT referral rate.
     */
    function bgtReferralRate() external view returns (uint256);

    /**
     * @notice Returns the BNB threshold for bonus calculation.
     * @return The current BNB threshold for bonus calculation.
     */
    function bnbThreshold() external view returns (uint256);

    /**
     * @notice Returns the BNB threshold bonus rate.
     * @return The current BNB threshold bonus rate.
     */
    function bnbThresholdBonusRate() external view returns (uint256);

    /**
     * @notice Returns the BIC rate for the core team.
     * @return The current BIC rate for the core team.
     */
    function bicRateForCoreTeam() external view returns (uint256);

    /**
     * @notice Updates the values of variables in the contract.
     * @dev Can only be called by the management contract.
     * @param variableName The name of the variable to be updated.
     * @param newValue The new value for the variable.
     */
    function set(bytes32 variableName, uint256 newValue) external;

    /**
     * @dev Returns the detailed payment information for a transaction involving BNB, BIR, BIC, and BGT.
     * @param bnbSpent The amount of BNB spent in the transaction.
     * @param birBurn The amount of BIR tokens burned in the transaction.
     * @return The payment result.
     */
    function getPaymentInfo(uint256 bnbSpent, uint256 birBurn) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);
}


// File: contracts/PrivateSale.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "./interfaces/IWhitelist.sol";
import "./interfaces/IBeinGiveTake.sol";
import "./interfaces/IBICRight.sol";
import "./modules/payment/IPayment.sol";
import "./modules/management/IManagement.sol";
import "./libraries/Events.sol";

/**
 * @title PrivateSale
 * @dev Contract for managing the private sale of BIC tokens.
 */
contract PrivateSale is Ownable, Pausable {
    bytes32 public constant WHITELIST_PRIVATE_SALE = keccak256("WHITELIST_PRIVATE_SALE");
    bytes32 public constant WHITELIST_CORE_TEAM = keccak256("WHITELIST_CORE_TEAM");

    IERC20 public bicToken;
    IBICRight public birToken;
    IWhitelist public whitelist;
    IBeinGiveTake public beinGiveTake;
    IPayment public payment;
    IManagement public management;

    /**
     * @notice Initializes the contract with necessary dependencies.
     * @param _bicToken Address of the BIC token contract.
     * @param _birToken Address of the BIR token contract.
     * @param _whitelist Address of the whitelist contract.
     * @param _beinGiveTake Address of the BeinGiveTake contract.
     * @param _payment Address of the Payment contract.
     * @param _management Address of the Management contract.
     */
    constructor(
        address _bicToken,
        address _birToken,
        address _whitelist,
        address _beinGiveTake,
        address _payment,
        address _management
    ) {
        bicToken = IERC20(_bicToken);
        birToken = IBICRight(_birToken);
        whitelist = IWhitelist(_whitelist);
        beinGiveTake = IBeinGiveTake(_beinGiveTake);
        payment = IPayment(_payment);
        management = IManagement(_management);
    }

    /**
     * @notice Allows users to purchase BIC tokens in the private sale by using BNB and BIR tokens.
     * @dev The function can only be called when the sale is active by management and not paused by owner.
     * @param birBurn The amount of BIR tokens to burn.
     */
    function purchase(uint256 birBurn) external payable whenNotPaused {
        require(management.isActive(), "PrivateSale: Private sale is not active");

        (address refAddress, bool isWhitelist,) = whitelist.getUserInfo(msg.sender, WHITELIST_PRIVATE_SALE);

        require(isWhitelist, "PrivateSale: You are not whitelisted");
        require(birBurn <= birToken.balanceOf(msg.sender), "PrivateSale: You don't have enough BIR");

        (uint256 rateBnbUsd, uint256 bicForBnbSpending, uint256 bicForBirBurning, uint256 bgtReceive, uint256 bgtReferral, uint256 bnbReferral, uint256 bicForBnbThreshold, uint256 bicForCoreTeam) = payment.getPaymentInfo(msg.value, birBurn);

        require(birBurn <= bicForBnbSpending, "PrivateSale: You cannot burn more BIR than you gain BIC");

        require(bicToken.balanceOf(address(this)) >= bicForBnbSpending + bicForBirBurning + bicForBnbThreshold, "PrivateSale: Not enough BIC in contract");

        payable(management.beneficiary()).transfer(msg.value - bnbReferral);
        payable(refAddress).transfer(bnbReferral);
        bicToken.transfer(msg.sender, bicForBnbSpending + bicForBirBurning + bicForBnbThreshold);
        if (birBurn > 0) {
            birToken.burnFrom(msg.sender, birBurn);
        }
        beinGiveTake.mintTo(msg.sender, bgtReceive);
        beinGiveTake.mintTo(refAddress, bgtReferral);

        (, bool isCoreTeam,) = whitelist.getUserInfo(msg.sender, WHITELIST_CORE_TEAM);
        if(isCoreTeam) {
            bicToken.transferFrom(management.coreTeamPool(), msg.sender, bicForCoreTeam);
        }

        emit Events.Purchased(
            msg.sender,
            msg.value,
            birBurn,
            rateBnbUsd,
            bicForBnbSpending,
            bicForBirBurning,
            bgtReceive,
            bgtReferral,
            bnbReferral,
            bicForBnbThreshold,
            isCoreTeam ? bicForCoreTeam : 0,
            block.timestamp
        );
    }

    /**
     * @notice Sets a new payment contract.
     * @param _paymentContract The address of the new payment contract.
     */
    function setPaymentContract(address _paymentContract) external onlyOwner {
        payment = IPayment(_paymentContract);
        emit Events.PaymentContractSet(_paymentContract, block.timestamp);
    }

    /**
     * @notice Sets a new management contract.
     * @param _managementContract The address of the new management contract.
     */

    function setManagementContract(address _managementContract) external onlyOwner {
        management = IManagement(_managementContract);
        emit Events.ManagementSet(_managementContract, block.timestamp);
    }

    /**
     * @notice Sets a new whitelist contract.
     *  @param whitelistAddress The address of the new whitelist contract.
     */
    function setWhitelistContract(address whitelistAddress) external onlyOwner {
        whitelist = IWhitelist(whitelistAddress);
        emit Events.WhitelistContractSet(whitelistAddress, block.timestamp);
    }

    /**
     * @notice Withdraws the specified amount of tokens.
     * @param _token The address of the token to withdraw.
     * @param _amount The amount of tokens to withdraw.
     */
    function withdrawToken(address _token, uint256 _amount) external onlyOwner {
        IERC20(_token).transfer(management.beneficiary(), _amount);
        emit Events.TokenWithdrawn(_token, _amount, block.timestamp);
    }

    /**
     * @notice Withdraws the specified amount of BNB.
     * @param _amount The amount of BNB to withdraw.
     */

    function withdrawBnb(uint256 _amount) external onlyOwner {
        payable(management.beneficiary()).transfer(_amount);
        emit Events.BnbWithdrawn(_amount, block.timestamp);
    }

    /**
     * @notice Pauses the contract.
     */
    function pause() external onlyOwner {
        _pause();
    }

    /**
     * @notice Unpauses the contract.
     */
    function unpause() external onlyOwner {
        _unpause();
    }
}

