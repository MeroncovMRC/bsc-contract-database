// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name = "My Token";
    string public symbol = "MTK";
    uint256 public totalSupply = 1000000000000000000000000; // 1 billion tokens with 18 decimal places
    uint8 public decimals = 18;
    
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    address public marketingWallet = 0xdCaB9d81f64994043949D2Fc322Fd453dA0c0B76; // Replace with the actual wallet address
    
    uint256 public taxFee = 5; // 5% tax fee
    
    address public owner;
    address public newOwner;
    
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        uint256 taxAmount = _value * taxFee / 100;
        uint256 transferAmount = _value - taxAmount;
        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += transferAmount;
        balanceOf[marketingWallet] += taxAmount;
        
        emit Transfer(msg.sender, _to, transferAmount);
        emit Transfer(msg.sender, marketingWallet, taxAmount);
        
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 taxAmount = _value * taxFee / 100;
        uint256 transferAmount = _value - taxAmount;
        
        balanceOf[_from] -= _value;
        balanceOf[_to] += transferAmount;
        balanceOf[marketingWallet] += taxAmount;
        allowance[_from][msg.sender] -= _value;
        
        emit Transfer(_from, _to, transferAmount);
        emit Transfer(_from, marketingWallet, taxAmount);
        
        return true;
    }
    
    function transferOwnership(address _newOwner) public {
        require(msg.sender == owner, "Only the current owner can transfer ownership");
        newOwner = _newOwner;
    }
    
    function acceptOwnership() public {
        require(msg.sender == newOwner, "Only the new owner can accept ownership");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
    
    function renounceOwnership() public {
        require(msg.sender == owner, "Only the current owner can renounce ownership");
        emit OwnershipTransferred(owner, address(0));
        owner = address(0);
    }
}