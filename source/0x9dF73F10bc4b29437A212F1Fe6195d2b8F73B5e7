// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol

// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Context.sol

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol

// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: sevning.sol

pragma solidity ^0.8.19;

interface pancake {
    function getAmountsOut(
        uint256 amountIn,
        address[] memory path
    ) external view returns (uint256[] memory amounts);
}

contract sevningnetwork is Ownable, Pausable, ReentrancyGuard {
    event StartMinig(address user, uint256 value, uint timestamp);
    event ReStartMinig(address user, uint256 value, uint timestamp);
    struct Packages {
        uint256 number;
        uint256 max;
        uint256 min;
        uint256 fee;
        uint256 miningReward;
    }

    struct Minerstaking {
        uint256 package;
        address miner;
        uint256 amount;
        uint256 miningreward;
        uint256 rewardper;
        uint256 startdatetime;
        uint256 enddatetime;
        uint256 fee;
        // uint256 stakingNumber;
    }

    struct Users {
        address refferal;
        address user;
        uint256 value;
        uint256 starttime;
        uint256 endtime;
        uint256 package;
        uint256 srfreeze; //daily
        uint256 sfreeze; //staking
        uint256 rfreeze; // refferal reward
    }
    struct Statistics {
        uint256 miningreward; // total += srfreeze
        uint256 refferalreward;
        uint256 totalstake; // ++sfreeze
        // uint256 stakingNumber;
        uint256 totalwithdrawal;
    }

    struct RefferalRewardTxn {
        address from;
        address to;
        uint256 amount;
        uint256 reward;
        uint256 percentage;
        uint256 time;
    }

    struct Minerswithdrawal {
        address user;
        uint256 amount;
        uint256 withdrawalfee;
        uint256 percentage;
        uint256 time;
        uint256 received;
    }

    Minerswithdrawal[] public minerswithdrawal;
    Minerstaking[] public minerstaking;
    Packages[] public packages;
    mapping(address => Users) public users;
    address[] public miners;
    uint256 public refferalRewardPercentage = 2e18; //
    uint256 public DAYS = 7; //
    RefferalRewardTxn[] public reffrealrewardtxn;
    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    IERC20 public busdToken = IERC20(BUSD);
    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    uint256 public withdrawlFee = 2e18; //
    uint256 public totalStakingNumber;
    uint256 public totalRefferalRewardTxn;
    mapping(address => bool) public blocked;
    address public defaultaddress = 0xF8C43EC47b3a2D9Bcd9690B1d4d27db96A80FE83;
    mapping(address => Statistics) public statistics;
    uint256 public totalStaking;
    uint256 public totalWithdrawl;

    function blockMiner(address miner) public onlyOwner {
        blocked[miner] = true;
    }

    function unBlockMiner(address miner) public onlyOwner {
        blocked[miner] = false;
    }

    function changeRefferalRewardPercentage(uint256 value) public onlyOwner {
        refferalRewardPercentage = value;
    }

    function changeDays(uint256 value) public onlyOwner {
        DAYS = value;
    }

    function changeWithdrawlFee(uint256 value) public onlyOwner {
        withdrawlFee = value;
    }

    modifier isBlocked() {
        require(blocked[msg.sender] == false, "miner is blocked !");
        _;
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    receive() external payable {}

    constructor() {
        packages.push(
            Packages({
                number: 1,
                min: 10e18,
                max: 100e18,
                fee: 1e18,
                miningReward: 1e18
            })
        );
        packages.push(
            Packages({
                number: 2,
                min: 101e18,
                max: 250e18,
                fee: 2e18,
                miningReward: 1e18
            })
        );
        packages.push(
            Packages({
                number: 3,
                min: 251e18,
                max: 500e18,
                fee: 3e18,
                miningReward: 1e18
            })
        );
        packages.push(
            Packages({
                number: 4,
                min: 501e18,
                max: 1000e18,
                fee: 5e18,
                miningReward: 1e18
            })
        );
        packages.push(
            Packages({
                number: 5,
                min: 1001e18,
                max: 2500e18,
                fee: 10e18,
                miningReward: 1e18
            })
        );
        packages.push(
            Packages({
                number: 6,
                min: 2501e18,
                max: 5000e18,
                fee: 25e18,
                miningReward: 1e18
            })
        );
    }

    function convertBUSDtoBNB(uint256 value) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = BUSD;
        path[1] = wbnb;
        uint256[] memory price = pancake(routerAddress).getAmountsOut(
            value,
            path
        );
        return price[1];
    }

    function findpackage(uint256 _amt) public view returns (uint256) {
        require(_amt > 0, "Amount is not ZERO.");
        uint256 pkg = 0;
        for (uint256 i = 0; i < packages.length; i++) {
            if (_amt >= packages[i].min && _amt <= packages[i].max) {
                pkg = i;
            }
        }
        return pkg;
    }

    function checkuserstatus(address _address) public view returns (uint256) {
        if (_address != defaultaddress) {
            if ((users[_address].endtime > block.timestamp)) {
                return (1);
            } else {
                return (0);
            }
        } else {
            return (1);
        }
    }

    function startmining(
        uint256 value,
        address refferal
    ) external payable whenNotPaused nonReentrant isBlocked {
        address user = msg.sender;
        require(user != refferal, "user and refferal cannot same !");
        require(checkuserstatus(refferal) == 1, "Referral is not active");
        require(users[user].user == address(0), "Staking already running !");
        miners.push(user);
        uint256 package = findpackage(value);
        uint256 fee = convertBUSDtoBNB(packages[package].fee);
        require(msg.value > fee, "fee is not valid");
        (bool sent, ) = (address(this)).call{value: msg.value}("");
        require(sent, "Failed to send BNB");
        busdToken.transferFrom(user, address(this), value);
        users[user].package = package;
        users[user].user = user;
        users[user].value = value;
        users[user].refferal = refferal;
        users[user].starttime = block.timestamp;
        users[user].endtime = block.timestamp + (86400 * DAYS);
        // users[user].endtime = block.timestamp + 300;
        users[user].sfreeze = value;
        users[user].srfreeze = (((value * packages[package].miningReward) /
            100e18) * DAYS);
        // users[user].isStaked = true;
        statistics[user].totalstake = statistics[user].totalstake + value;
        // users[user].stakingNumber += 1;
        // if (users[refferal].user == address(0)) {
            totalRefferalRewardTxn++;
            users[refferal].rfreeze += ((value * refferalRewardPercentage) /
                100e18);
            reffrealrewardtxn.push(
                RefferalRewardTxn({
                    from: user,
                    to: refferal,
                    amount: value,
                    reward: ((value * refferalRewardPercentage) / 100e18),
                    percentage: refferalRewardPercentage,
                    time: block.timestamp + (86400 * DAYS)
                })
            );
        // }
        totalStakingNumber++;
        totalStaking += value;
        minerstaking.push(
            Minerstaking({
                package: package,
                miner: user,
                amount: value,
                miningreward: users[user].srfreeze,
                rewardper: packages[package].miningReward,
                startdatetime: users[user].starttime,
                enddatetime: users[user].endtime,
                fee: msg.value
            })
        );
        emit StartMinig(user, value, block.timestamp);
    }

    function restartmining(
        uint256 value
    ) external payable whenNotPaused isBlocked nonReentrant {
        address user = msg.sender;
        require(checkuserstatus(user) == 0, "Staking already running !");
        require(users[user].user != address(0), "you have not staked yet !");
        require(
            users[user].endtime < block.timestamp,
            "unstake time remaining !"
        );
        require(
            users[user].value <= value,
            "you cannot stake less amount than your previous stake !"
        );
        //claim reward = sfreeze + srfreeze + rfreeze
        uint256 reward = users[user].sfreeze +
            users[user].srfreeze +
            users[user].rfreeze;
        uint256 withdrawalfee = ((reward * withdrawlFee) / 100e18);
        uint256 package = findpackage(value);
        uint256 fee = convertBUSDtoBNB(packages[package].fee);
        require(msg.value > fee, "fee is not valid");
        (bool sent, ) = (address(this)).call{value: fee}("");
        require(sent, "Failed to send BNB");
        busdToken.transferFrom(user, address(this), value);
        busdToken.transfer(user, (reward - withdrawalfee));
        minerswithdrawal.push(
            Minerswithdrawal({
                user: user,
                amount: reward,
                withdrawalfee: withdrawalfee,
                percentage: withdrawlFee,
                time: block.timestamp,
                received: (reward - withdrawalfee)
            })
        );
        statistics[user].totalwithdrawal =
            statistics[user].totalwithdrawal +
            (reward - withdrawalfee);
        users[user].package = package;
        statistics[user].miningreward += users[user].srfreeze;
        statistics[user].refferalreward += users[user].rfreeze;
        statistics[user].totalstake += users[user].sfreeze;
        users[user].value = value;
        users[user].starttime = block.timestamp;
        users[user].endtime = block.timestamp + (86400 * DAYS);
        // users[user].endtime = block.timestamp + 300;
        users[user].srfreeze = (((value * packages[package].miningReward) /
            100e18) * DAYS);
        users[user].sfreeze = value;
        users[user].rfreeze = 0;
        // users[user].stakingNumber += 1;
        totalStakingNumber++;
        totalStaking += value;
        totalWithdrawl += reward;
        minerstaking.push(
            Minerstaking({
                package: package,
                miner: user,
                amount: value,
                miningreward: users[user].srfreeze,
                rewardper: packages[package].miningReward,
                startdatetime: users[user].starttime,
                enddatetime: users[user].endtime,
                fee: msg.value
            })
        );
        emit ReStartMinig(user, value, block.timestamp);
    }

    function getminerswithdrawal(
        address _address
    ) public view returns (Minerswithdrawal[] memory) {
        Minerswithdrawal[] memory id = new Minerswithdrawal[](
            minerswithdrawal.length
        );
        for (uint256 i = 0; i < minerswithdrawal.length; i++) {
            Minerswithdrawal storage with = minerswithdrawal[i];
            if (with.user == _address) {
                id[i] = with;
            }
        }
        return id;
    }

    function getAllMinerswithdrawal(
    ) public view returns (Minerswithdrawal[] memory) {
        Minerswithdrawal[] memory id = new Minerswithdrawal[](
            minerswithdrawal.length
        );
        for (uint256 i = 0; i < minerswithdrawal.length; i++) {
            Minerswithdrawal storage with = minerswithdrawal[i];
            // if (with.user == _address) {
                id[i] = with;
            // }
        }
        return id;
    }

    function withdrawlToken(address _address, uint256 value) public onlyOwner {
        IERC20 token = IERC20(_address);
        token.transfer(msg.sender, value);
    }

    function withdrawlCoin(uint256 value) public onlyOwner {
        (bool sent, ) = (msg.sender).call{value: value}("");
        require(sent, "Failed to send BNB");
    }

    function getMinerStakings(
        address _address
    ) public view returns (Minerstaking[] memory) {
        Minerstaking[] memory id = new Minerstaking[](minerstaking.length);
        for (uint256 i = 0; i < minerstaking.length; i++) {
            Minerstaking storage miner = minerstaking[i];
            if (miner.miner == _address) {
                id[i] = miner;
            }
        }
        return id;
    }

    function getAllMinersStaking() public view returns (Minerstaking[] memory) {
        Minerstaking[] memory id = new Minerstaking[](minerstaking.length);
        for (uint256 i = 0; i < minerstaking.length; i++) {
            Minerstaking storage miner = minerstaking[i];
            id[i] = miner;
        }
        return id;
    }

    function getRefferalRewardTxn(
        address _address
    ) public view returns (RefferalRewardTxn[] memory) {
        RefferalRewardTxn[] memory id = new RefferalRewardTxn[](
            totalRefferalRewardTxn
        );
        for (uint256 i = 0; i < totalRefferalRewardTxn; i++) {
            RefferalRewardTxn storage txn = reffrealrewardtxn[i];
            if (txn.to == _address) {
                id[i] = txn;
            }
        }
        return id;
    }

    function getAllRefferalRewardTxn(
    ) public view returns (RefferalRewardTxn[] memory) {
        RefferalRewardTxn[] memory id = new RefferalRewardTxn[](
            totalRefferalRewardTxn
        );
        for (uint256 i = 0; i < totalRefferalRewardTxn; i++) {
            RefferalRewardTxn storage txn = reffrealrewardtxn[i];
                id[i] = txn;
        }
        return id;
    }

    function balanceBUSD() public view returns (uint256 balance){
        balance = busdToken.balanceOf(address(this));
    }
    function balanceBNB() public view returns (uint256 balance){
        balance = address(this).balance;
    }
}