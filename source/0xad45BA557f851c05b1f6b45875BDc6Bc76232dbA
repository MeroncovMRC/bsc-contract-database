
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/RewardSettlement.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

interface INFT {
    struct TokenAddr {
        address addr;
        uint256 tokenBalance;
    }

    function getAll() external view returns (TokenAddr[] memory);

    function MAX_SUPPLY() external view returns (uint256);
}

interface IERC20 {
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);
}

interface IRouter {
    function getAmountsOut(
        uint256 amountIn,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function WETH() external view returns (address);
}

contract RewardSettlement is Ownable {
    address public nftAddr = 0x06A869f678251384F279751b228E8F44980a34F2;
    address public filCatAddr = 0xdBb14714405bB54828cACb1293C73a88Cb999999;

    address public usdtAddr = 0x55d398326f99059fF775485246999027B3197955;
    address public routerAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    address public weth = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

    uint256 public usdtAmount = 500e18;

    uint256 public feesPercent = 15;

    address public receiveAddr = 0x5C59a0dbdd354d8b558FeF5FB1B7C87B7DCACC0A;

    constructor(address owner) {
        if (owner == address(0)) {
            owner = 0x5C59a0dbdd354d8b558FeF5FB1B7C87B7DCACC0A;
        }
        _transferOwnership(owner);
    }

    function setUSDTAmount(uint256 amount) external onlyOwner {
        usdtAmount = amount;
    }

    function setFeesPercent(uint256 feesP) external onlyOwner {
        feesPercent = feesP;
    }

    function setReceiveAddr(address addr) external onlyOwner {
        receiveAddr = addr;
    }

    function set(
        address nftAdr,
        address filCatAdr,
        address usdtAdr,
        address routerAdr
    ) external onlyOwner {
        if (nftAdr != address(0)) {
            nftAddr = nftAdr;
        }
        if (filCatAdr != address(0)) {
            filCatAddr = filCatAdr;
        }
        if (usdtAdr != address(0)) {
            usdtAddr = usdtAdr;
        }
        if (routerAdr != address(0)) {
            routerAddr = routerAdr;
            weth = IRouter(routerAddr).WETH();
        }
    }

    function withdraw(address to) external onlyOwner {
        IERC20(filCatAddr).transfer(to, IERC20(filCatAddr).balanceOf(address(this)));
    }

    function pendingSettlement() public view returns (bool) {
        uint256 balanceCat = IERC20(filCatAddr).balanceOf(address(this));
        return filCatoUSDTAmount(balanceCat) >= usdtAmount;
    }

    function settlement() public {
        require(pendingSettlement(), "filCat balance is not enough");

        uint256 balanceCat = IERC20(filCatAddr).balanceOf(address(this));

        uint256 balanceNew = (balanceCat * (100 - feesPercent)) / 100 - 2e18;
        INFT.TokenAddr[] memory addrsUser = INFT(nftAddr).getAll();
        require(addrsUser.length > 0, "nft owner is empty");

        uint256 amountAvg = balanceNew / INFT(nftAddr).MAX_SUPPLY();

        for (uint256 i = 0; i < addrsUser.length; i++) {
            IERC20(filCatAddr).transfer(
                addrsUser[i].addr,
                amountAvg * addrsUser[i].tokenBalance
            );
        }

        uint256 balanceCatAfter = IERC20(filCatAddr).balanceOf(address(this));
        if (
            IERC20(filCatAddr).allowance(address(this), routerAddr) <
            balanceCatAfter
        ) {
            IERC20(filCatAddr).approve(routerAddr, type(uint256).max);
        }

        require(receiveAddr != address(0), "receiveAddr is empty");

        IRouter(routerAddr).swapExactTokensForETHSupportingFeeOnTransferTokens(
            balanceCatAfter,
            0,
            filCatUSDTBNBPATH(),
            receiveAddr,
            block.timestamp + 1000000
        );
    }

    function filCatoUSDTAmount(uint256 _amount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = filCatAddr;
        path[1] = usdtAddr;
        return IRouter(routerAddr).getAmountsOut(_amount, path)[1];
    }

    function filCatUSDTBNBPATH() public view returns (address[] memory) {
        address[] memory path = new address[](3);
        path[0] = filCatAddr;
        path[1] = usdtAddr;
        path[2] = weth;
        return path;
    }
}

