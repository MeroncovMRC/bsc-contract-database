// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: MarsAirDropFree.sol


pragma solidity ^0.8.2;




interface IMC {
    function airdrop_polygon(address _address, uint _x, uint _y) external;
    function airdrop_property(uint _property_type_id, uint _polygon_id, uint _level) external;
    function airdrop_fill_tank(address _address, uint _amount) external;
    function update_power_Ex(address account) external;
}

interface IMO {
    struct Polygoninfo {
        address account;
        uint256 x; 
        uint256 y;
        uint256 propertys_count;
    }
    function Polygon(uint key) view external returns (Polygoninfo memory);
    function polygon_count() view external returns (uint256);
    function get_MapSize() external view returns (uint[2] memory);
    function ownerPolygonCount(address _address) view external returns (uint256);
}

contract MarsAirDrop is Ownable, ReentrancyGuard {

    constructor(IMO _MarsObject, IMC _MarsControl) {
        MarsObject = _MarsObject;
        MarsControl = _MarsControl;
    }

    function get_airdrop(uint256 _x, uint256 _y) external notContract nonReentrant {
        require (MarsObject.ownerPolygonCount(msg.sender) == 0);
        if (_x == 0 && _y == 0) {
            uint256[2] memory _MapSize = MarsObject.get_MapSize();
            MarsControl.airdrop_polygon(msg.sender, random(_MapSize[0]), random(_MapSize[1]));
        } else {
            MarsControl.airdrop_polygon(msg.sender, _x, _y);
        }
        uint256 _polygon_id = MarsObject.polygon_count()-1;
        MarsControl.airdrop_property(0, _polygon_id, 1);
        MarsControl.update_power_Ex(msg.sender);
    }

    uint256 private nonce;
    function random(uint256 _max) internal returns (uint) {
        uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % _max;
        nonce++;
        return randomnumber;
    }

    function airdrop_solar(address _address, uint _Solar) external notContract nonReentrant onlyOwner {
        MarsControl.airdrop_fill_tank(_address, _Solar);
        MarsControl.update_power_Ex(_address);
    }

    //airdrop полигона по координатам xy
    function airdrop_polygon(address _address, uint _x, uint _y) external notContract nonReentrant onlyOwner {
        MarsControl.airdrop_polygon(_address, _x, _y);
    }
    //airdrop предмета к полигону
    function airdrop_property(uint _property_type_id, uint _polygon_id, uint _level) external notContract nonReentrant onlyOwner {
        MarsControl.airdrop_property(_property_type_id, _polygon_id, _level);
        MarsControl.update_power_Ex(MarsObject.Polygon(_polygon_id).account);
    }
    //airdrop полигона и предмета на нём
    function airdrop_full(address _address, uint _x, uint _y, uint _property_type_id, uint _level) external notContract nonReentrant onlyOwner {
        MarsControl.airdrop_polygon(_address, _x, _y);
        uint256 _polygon_id = MarsObject.polygon_count()-1;
        MarsControl.airdrop_property(_property_type_id, _polygon_id, _level);
        MarsControl.update_power_Ex(MarsObject.Polygon(_polygon_id).account);
    }
    //airdrop массива полигонов и предмета на нём нескольким аккаунтам
    function airdrop_full_array(address[] memory _address, uint[] memory _x, uint[] memory _y, uint[] memory _property_type_id, uint[] memory _level) external notContract nonReentrant onlyOwner {
        for (uint i = 0; i < _address.length; i++) {
            MarsControl.airdrop_polygon(address(_address[i]), _x[i], _y[i]);
            uint256 _polygon_id = MarsObject.polygon_count()-1;
            MarsControl.airdrop_property(_property_type_id[i], _polygon_id, _level[i]);
            MarsControl.update_power_Ex(MarsObject.Polygon(_polygon_id).account);
        }
    } 

    function WithdrawalFromTheContract() external onlyOwner {
        payable(address(msg.sender)).transfer(address(this).balance);
    }

    IMC public MarsControl;
    function setAddressMarsControl(IMC _MarsControl) external onlyOwner {
        MarsControl = _MarsControl;
    }
    modifier onlyMarsControl() {
        require(msg.sender == address(MarsControl), "Not MarsControl");
        _;
    }
    ///
    IMO public MarsObject;
    function setAddressMarsObject(IMO _MarsObject) external onlyOwner {
        MarsObject = _MarsObject;
    }
    //
    modifier notContract() {
        require(!_isContract(msg.sender), "Contract not allowed");
        require(msg.sender == tx.origin, "Proxy contract not allowed");
        _;
    }
    function _isContract(address _addr) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(_addr)
        }
        return size > 0;
    }
}