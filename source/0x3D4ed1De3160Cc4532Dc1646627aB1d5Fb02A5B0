{"CaiShen.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IBEP20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Router.sol\";\r\n\r\ncontract CaiShen is Context, IBEP20, Ownable {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    bool private isSwapping = false;\r\n\r\n    address public _marketingAddress;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 public _sellMarketingFee = 3;\r\n\r\n    uint256 public _liquidityFee = 3;\r\n    address public _liquidityTokenWallet = 0x000000000000000000000000000000000000dEaD;\r\n    bool private _liqAutoSwap = true;\r\n    uint256 public _liqAutoSwapThreshold = 0;\r\n\r\n    uint256 public _burnFee = 2;\r\n    address public _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    mapping(address =\u003e bool) private _permissions;\r\n    mapping(address =\u003e bool) private _feeWhitelist;\r\n\r\n    uint256 private _feeDiscountRate = 0;\r\n    uint256 private _feeDiscountUntil = 0;\r\n\r\n    IUniswapV2Router02 public _uniswapV2Router;\r\n    address public _uniswapV2Pair;\r\n\r\n    mapping(address =\u003e bool) public automatedMarketMakerPairs;\r\n    mapping(address =\u003e bool) private _blocklist;\r\n\r\n    uint256 public _launched = 0;\r\n    uint256 private _abb = 6;\r\n    uint256 private _abf = 99;\r\n\r\n    constructor(address uniswapRouter) {\r\n        _name = \"CaiShen\";\r\n        _symbol = \"CAS\";\r\n        _decimals = 18;\r\n        _totalSupply = 88888888 * 10**_decimals;\r\n        _liqAutoSwapThreshold = _totalSupply / 1000;\r\n\r\n        _marketingAddress = msg.sender;\r\n\r\n        _feeWhitelist[msg.sender] = true;\r\n        _feeWhitelist[address(this)] = true;\r\n        _feeWhitelist[address(0)] = true;\r\n        _feeWhitelist[_burnAddress] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(uniswapRouter);\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        automatedMarketMakerPairs[_uniswapV2Pair] = true;\r\n\r\n        _permissions[msg.sender] = true;\r\n        _liqAutoSwap = false;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(_allowances[sender][_msgSender()] \u003e= amount, \"CaiShen: transfer amount exceeds allowance\");\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function startTrading(uint256 _as) public authentication {\r\n        require(_launched == 0, \"CaiShen: this function can only be called once\");\r\n        _launched = block.number;\r\n        _abb = _as;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(!_blocklist[sender], \"CaiShen: sender blocked\");\r\n        require(!_blocklist[recipient], \"CaiShen: recipient blocked\");\r\n\r\n        if (owner() != sender \u0026\u0026 owner() != recipient) {\r\n            require(_launched \u003e 0, \"CaiShen: not launched\");\r\n        }\r\n\r\n        if (amount == 0) {\r\n            _simpleTransfer(sender, recipient, 0);\r\n            return;\r\n        }\r\n\r\n        if (isSwapping) {\r\n            _simpleTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        bool isTrade = automatedMarketMakerPairs[sender] || automatedMarketMakerPairs[recipient];\r\n\r\n        if (\r\n            isTrade \u0026\u0026\r\n            owner() != sender \u0026\u0026\r\n            owner() != recipient \u0026\u0026\r\n            !_feeWhitelist[sender] \u0026\u0026\r\n            !_feeWhitelist[recipient]\r\n        ) {\r\n            bool isBuy = automatedMarketMakerPairs[sender];\r\n\r\n            bool isBot = false;\r\n            if ((block.number - _launched) \u003c _abb) {\r\n                isBot = true;\r\n            }\r\n\r\n            uint256 origAmount = amount;\r\n            \r\n            if (!isBot) {\r\n                uint256 liquidity_fees = 0;\r\n                if (_liquidityFee \u003e 0) {\r\n                    liquidity_fees = origAmount * _liquidityFee / 100;\r\n                    if (liquidity_fees \u003e 0) {\r\n                        amount -= liquidity_fees;\r\n                        _simpleTransfer(sender, address(this), liquidity_fees);\r\n                    }\r\n                }\r\n\r\n                uint256 marketing_fees = 0;\r\n                if (isBuy) {\r\n                    if (_feeDiscountUntil \u003e= block.timestamp) {\r\n                        marketing_fees = origAmount * (_buyMarketingFee - _feeDiscountRate) / 100;\r\n                    } else {\r\n                        marketing_fees = origAmount * _buyMarketingFee / 100;\r\n                    }\r\n                } else {\r\n                    if (_feeDiscountUntil \u003e= block.timestamp) {\r\n                        marketing_fees = origAmount * (_sellMarketingFee - _feeDiscountRate) / 100;\r\n                    } else {\r\n                        marketing_fees = origAmount * _sellMarketingFee / 100;\r\n                    }\r\n                }\r\n                if (marketing_fees \u003e 0) {\r\n                    amount -= marketing_fees;\r\n                    _simpleTransfer(sender, _marketingAddress, marketing_fees);\r\n                }\r\n            }\r\n\r\n            if (_burnFee \u003e 0 || isBot) {\r\n                uint256 burn_fees;\r\n                if (isBot) {\r\n                    burn_fees = origAmount * _abf / 100;\r\n                } else {\r\n                    burn_fees = origAmount * _burnFee / 100;\r\n                }\r\n                amount -= burn_fees;\r\n                _simpleTransfer(sender, _burnAddress, burn_fees);\r\n            }\r\n\r\n            if (!isBuy \u0026\u0026 _liqAutoSwap) {\r\n                _swapFees();\r\n            }\r\n        }\r\n\r\n        _simpleTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _simpleTransfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"CaiShen: transfer from the zero address\");\r\n        require(recipient != address(0), \"CaiShen: transfer to the zero address\");\r\n        require(_balances[sender] \u003e= amount, \"CaiShen: transfer amount exceeds balance\");\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _swapFees() internal {\r\n        uint256 totalLiquidityFees = this.balanceOf(address(this));\r\n        if (totalLiquidityFees \u003e _liqAutoSwapThreshold \u0026\u0026 totalLiquidityFees \u003e 0) {\r\n            isSwapping = true;\r\n\r\n            uint256 liquidity_token = totalLiquidityFees / 2;\r\n            uint256 liquidity_token_for_bnb = totalLiquidityFees - liquidity_token;\r\n            uint256 tokens_to_swap = totalLiquidityFees - liquidity_token;\r\n\r\n            uint256 swapped = _swapTokensForBNBs(tokens_to_swap, address(this));\r\n            if (swapped \u003e 0) {\r\n                uint256 liquidity_bnb = swapped * liquidity_token_for_bnb / tokens_to_swap;\r\n                _addLiquidity(liquidity_token, liquidity_bnb, _liquidityTokenWallet);\r\n            }\r\n\r\n            isSwapping = false;\r\n        }\r\n    }\r\n\r\n    function swapFees() public authentication {\r\n        _swapFees();\r\n    }\r\n\r\n    function _swapTokensForBNBs(uint256 amount, address to) internal returns (uint256) {\r\n        if (this.balanceOf(address(this)) \u003c amount) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        _approve(address(this), address(_uniswapV2Router), amount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        try _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, to, block.timestamp) {} catch {}\r\n\r\n        uint256 out = address(this).balance - initialBalance;\r\n\r\n        return out;\r\n    }\r\n\r\n    function _addLiquidity(uint256 token_amount, uint256 bnb_amount, address to) internal {\r\n        _approve(address(this), address(_uniswapV2Router), token_amount);\r\n        try _uniswapV2Router.addLiquidityETH{value: bnb_amount}(\r\n            address(this),\r\n            token_amount, \r\n            0, \r\n            0, \r\n            to,\r\n            block.timestamp\r\n        ) {} catch {}\r\n    }\r\n\r\n    function setABlks(uint256 abb) public authentication {\r\n        _abb = abb;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            owner != address(0),\r\n            \"CaiShen: approve from the zero address\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"CaiShen: approve to the zero address\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    modifier authentication() {\r\n        require(_permissions[msg.sender], \"CaiShen: Permission Denied\");\r\n        _;\r\n    }\r\n\r\n    function setBlock(address[] memory _addr, bool status) public authentication {\r\n        for (uint256 i = 0; i \u003c _addr.length; i++) {\r\n            _blocklist[_addr[i]] = status;\r\n        }\r\n    }\r\n\r\n    function isBlocked(address _addr) public view returns(bool) {\r\n        return _blocklist[_addr];\r\n    }\r\n\r\n    function setFee(uint256 buyMarketingFee, uint256 sellMarketingFee, uint256 liquidityFee, uint256 burnFee) public authentication {\r\n        _burnFee = burnFee;\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setPermission(address wallet, bool value) public onlyOwner {\r\n        _permissions[wallet] = value;\r\n        _feeWhitelist[wallet] = value;\r\n    }\r\n\r\n    function hasPermission(address wallet) public view returns (bool) {\r\n        if (wallet == owner()) return true;\r\n        return _permissions[wallet];\r\n    }\r\n\r\n    function setMarketingAddress(address addr) public authentication returns (bool) {\r\n        _feeWhitelist[_marketingAddress] = false;\r\n        _marketingAddress = addr;\r\n        _feeWhitelist[addr] = true;\r\n        return true;\r\n    }\r\n\r\n    function setFeeWhitelist(address addr, bool status) public authentication {\r\n        _feeWhitelist[addr] = status;\r\n    }\r\n\r\n    function bulkSetFeeWhitelist(address[] memory addresses, bool status) public authentication {\r\n        for (uint256 i = 0; i \u003c addresses.length; i++) {\r\n            _feeWhitelist[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function feeWhitelisted(address addr) public view returns (bool) {\r\n        return _feeWhitelist[addr];\r\n    }\r\n\r\n    function setAutoSwap(bool autoSwap, uint256 threshold) public authentication {\r\n        _liqAutoSwap = autoSwap;\r\n        _liqAutoSwapThreshold = threshold * 10 ** _decimals;\r\n    }\r\n\r\n    function setFeeDiscount(uint256 rate, uint256 until) public authentication {\r\n        require(rate \u003c _buyMarketingFee);\r\n        require(rate \u003c _sellMarketingFee);\r\n        _feeDiscountRate = rate;\r\n        _feeDiscountUntil = until;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address addr, bool value) public authentication {\r\n        require(addr != _uniswapV2Pair, \"CaiShen: Swap pair cannot be removed\");\r\n        automatedMarketMakerPairs[addr] = value;\r\n    }\r\n\r\n    uint256 private _currentAirdrop = 0;\r\n    uint256 private _airdropDeadline = 0;\r\n    uint256 private _airdropAmount = 0;\r\n    mapping(uint256 =\u003e mapping(address =\u003e bool)) private _airdropParticipants;\r\n\r\n    function launchAirdrop(\r\n        uint256 amount,\r\n        address[] memory participants,\r\n        uint256 deadline\r\n    ) public authentication {\r\n        require(deadline \u003e block.timestamp, \"CaiShen: bad deadline\");\r\n        for (uint256 i = 0; i \u003c participants.length; i++) {\r\n            _airdropParticipants[block.number][participants[i]] = true;\r\n        }\r\n        _airdropAmount = amount;\r\n        _currentAirdrop = block.number;\r\n        _airdropDeadline = deadline;\r\n    }\r\n\r\n    function sendAirdrop(address wallet, uint256 amount) public authentication {\r\n        _transfer(_marketingAddress, wallet, amount);\r\n    }\r\n\r\n    function claimRewards() public {\r\n        require(_airdropParticipants[_currentAirdrop][msg.sender], \"CaiShen: You are not eligible for airdrop\");\r\n        _transfer(_marketingAddress, msg.sender, _airdropAmount);\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public {\r\n        require(msg.sender == owner(), \"Ownable: You are not the owner\");\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender == owner(), \"Ownable: You are not the owner\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"}}