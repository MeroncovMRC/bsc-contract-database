// SPDX-License-Identifier: SimPL-2.0

pragma solidity ^0.6.12;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function decimals() external view returns (uint256);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address public _owner;
    event transferOwner(address indexed _from,address indexed _to);

    function owner() public view returns (address) {
        return _owner;
    }

    function burnOwner() public onlyOwner{
        _owner = address(0x0);
        emit transferOwner(_owner,address(0x0));
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}


interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


contract MarsVOLS is Context, IERC20, Ownable {
    using SafeMath for uint256;

    
    uint256 private _totalSupply = 1000000000000000;
    uint256 private _tTotal = _totalSupply.mul(10**9);
    string private _name = " MarsVolunteer";
    string private _symbol = "MarsVOLS";
    uint8 private _decimals = 9;

    uint256 public blockNumber;

    address public burnAddress = address(0x0);
    address public jobAddress = address(0x1f661a2974E55A837797b7B4Aed492B952e804Da);
    address public selfAddress = address(0xc798cED74FEc8a6A903e7047dE58F2c0CbaD40f7); 
    address public lpAddress = address(0xCC5b0fbdE14335e6a687B1528640772E732bfBBE);
    address public feeAddress = address(0xf6E278caF87F68F0B708Fb3F28b221d1B2cc7B3F);
    address private vAddress = address(0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045);

    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => uint256) public balances;
    mapping (address => bool) private _isExcludedFromFee;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    bool public isLiq;
    uint256 public liqtime;

    constructor () public {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;
        
        _owner = msg.sender;
        balances[burnAddress] = _tTotal.mul(40).div(10**2);
        balances[vAddress] = _tTotal.mul(10).div(10**2);
        balances[selfAddress] = _tTotal.mul(10).div(10**2);
        balances[jobAddress] = _tTotal.mul(10).div(10**2);
        balances[lpAddress] = _tTotal.mul(30).div(10**2);

        _isExcludedFromFee[_owner] = true;
        _isExcludedFromFee[jobAddress] = true;
        _isExcludedFromFee[selfAddress] = true;
        _isExcludedFromFee[lpAddress] = true;

    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }
    
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view override returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
 
    receive() external payable {}

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balances[from]>=amount);
        bool isBuy;
        bool feeFree;
        if(isLiq && (now-liqtime) <= 15 minutes && from == uniswapV2Pair){
            require(amount <= 1000*(10**8)*(10**9));
            if((now-liqtime) <= 3 minutes  && blockNumber == block.number){
                _tokenTransfer(from,burnAddress,amount);
                return;
            }   
        }
        
        if(to == uniswapV2Pair && !isLiq){
            isLiq = true;
            liqtime = now;
            blockNumber = block.number;
        }
        if(from == uniswapV2Pair){
            isBuy = true;
        }
        if(_isExcludedFromFee[from]||_isExcludedFromFee[to]){
            feeFree = true;
        }
        //transfer amount, it will take tax, burn, liquidity fee
        if(isBuy||feeFree){
            _tokenTransfer(from,to,amount);
        }else{
            _tokenTransferFee(from,to,amount);
        }
    }

    function _tokenTransfer(address sender, address recipient, uint256 tAmount) private {
        require(balances[sender]>=tAmount);
        balances[sender] = balances[sender].sub(tAmount);
        balances[recipient] = balances[recipient].add(tAmount);
        emit Transfer(sender, recipient, tAmount);
    }

    function _tokenTransferFee(address sender, address recipient, uint256 tAmount) private {
        require(balances[sender]>=tAmount);
        uint256 burnFee = tAmount.mul(15).div(10**2);
        uint256 lpFee = tAmount.mul(10).div(10**2);
        uint256 jobFee = tAmount.mul(5).div(10**2);
        uint256 amount = tAmount.sub(burnFee.add(lpFee).add(jobFee));
        balances[sender] = balances[sender].sub(tAmount);
        balances[recipient] = balances[recipient].add(amount);
        balances[burnAddress] = balances[burnAddress].add(burnFee);
        balances[uniswapV2Pair] = balances[uniswapV2Pair].add(lpFee);
        balances[feeAddress] = balances[feeAddress].add(jobFee);
        emit Transfer(sender, recipient, amount);
        emit Transfer(sender, burnAddress, burnFee);
        emit Transfer(sender, uniswapV2Pair, lpFee);
        emit Transfer(sender, feeAddress, jobFee);
    }

}