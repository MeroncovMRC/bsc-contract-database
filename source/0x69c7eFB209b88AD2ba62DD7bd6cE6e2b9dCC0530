// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.6;

interface IBEP20 {
   /**
    * @dev Returns the amount of tokens in existence.
    */
   function totalSupply() external view returns (uint256);

   /**
    * @dev Returns the amount of tokens owned by `account`.
    */
   function balanceOf(address account) external view returns (uint256);

   /**
    * @dev Moves `amount` tokens from the caller's account to `recipient`.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
    * Emits a {Transfer} event.
    */
   function transfer(address recipient, uint256 amount) external returns (bool);

   /**
    * @dev Returns the remaining number of tokens that `spender` will be
    * allowed to spend on behalf of `owner` through {transferFrom}. This is
    * zero by default.
    *
    * This value changes when {approve} or {transferFrom} are called.
    */
   function allowance(address owner, address spender) external view returns (uint256);

   /**
    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
    * IMPORTANT: Beware that changing an allowance with this method brings the risk
    * that someone may use both the old and the new allowance by unfortunate
    * transaction ordering. One possible solution to mitigate this race
    * condition is to first reduce the spender's allowance to 0 and set the
    * desired value afterwards:
    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    *
    * Emits an {Approval} event.
    */
   function approve(address spender, uint256 amount) external returns (bool);

   /**
    * @dev Moves `amount` tokens from `sender` to `recipient` using the
    * allowance mechanism. `amount` is then deducted from the caller's
    * allowance.
    *
    * Returns a boolean value indicating whether the operation succeeded.
    *
    * Emits a {Transfer} event.
    */
   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

   /**
    * @dev Emitted when `value` tokens are moved from one account (`from`) to
    * another (`to`).
    *
    * Note that `value` may be zero.
    */
   event Transfer(address indexed from, address indexed to, uint256 value);

   /**
    * @dev Emitted when the allowance of a `spender` for an `owner` is set by
    * a call to {approve}. `value` is the new allowance.
    */
   event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ILosslessController {
   function beforeTransfer(address sender, address recipient, uint256 amount) external;

   function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;

   function beforeApprove(address sender, address spender, uint256 amount) external;

   function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;

   function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;

   function afterApprove(address sender, address spender, uint256 amount) external;

   function afterTransfer(address sender, address recipient, uint256 amount) external;

   function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;

   function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;

   function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;
}

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
* @dev Wrappers over Solidity's arithmetic operations.
*
* NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
* now has built in overflow checking.
*/
library SafeMath {
   /**
    * @dev Returns the addition of two unsigned integers, with an overflow flag.
    *
    * _Available since v3.4._
    */
   function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
       unchecked {
           uint256 c = a + b;
           if (c < a) return (false, 0);
           return (true, c);
       }
   }

   /**
    * @dev Returns the substraction of two unsigned integers, with an overflow flag.
    *
    * _Available since v3.4._
    */
   function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
       unchecked {
           if (b > a) return (false, 0);
           return (true, a - b);
       }
   }

   /**
    * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
    *
    * _Available since v3.4._
    */
   function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
       unchecked {
           // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
           // benefit is lost if 'b' is also tested.
           // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
           if (a == 0) return (true, 0);
           uint256 c = a * b;
           if (c / a != b) return (false, 0);
           return (true, c);
       }
   }

   /**
    * @dev Returns the division of two unsigned integers, with a division by zero flag.
    *
    * _Available since v3.4._
    */
   function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
       unchecked {
           if (b == 0) return (false, 0);
           return (true, a / b);
       }
   }

   /**
    * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
    *
    * _Available since v3.4._
    */
   function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
       unchecked {
           if (b == 0) return (false, 0);
           return (true, a % b);
       }
   }

   /**
    * @dev Returns the addition of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `+` operator.
    *
    * Requirements:
    *
    * - Addition cannot overflow.
    */
   function add(uint256 a, uint256 b) internal pure returns (uint256) {
       return a + b;
   }

   /**
    * @dev Returns the subtraction of two unsigned integers, reverting on
    * overflow (when the result is negative).
    *
    * Counterpart to Solidity's `-` operator.
    *
    * Requirements:
    *
    * - Subtraction cannot overflow.
    */
   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
       return a - b;
   }

   /**
    * @dev Returns the multiplication of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `*` operator.
    *
    * Requirements:
    *
    * - Multiplication cannot overflow.
    */
   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
       return a * b;
   }

   /**
    * @dev Returns the integer division of two unsigned integers, reverting on
    * division by zero. The result is rounded towards zero.
    *
    * Counterpart to Solidity's `/` operator.
    *
    * Requirements:
    *
    * - The divisor cannot be zero.
    */
   function div(uint256 a, uint256 b) internal pure returns (uint256) {
       return a / b;
   }

   /**
    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
    * reverting when dividing by zero.
    *
    * Counterpart to Solidity's `%` operator. This function uses a `revert`
    * opcode (which leaves remaining gas untouched) while Solidity uses an
    * invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    *
    * - The divisor cannot be zero.
    */
   function mod(uint256 a, uint256 b) internal pure returns (uint256) {
       return a % b;
   }

   /**
    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
    * overflow (when the result is negative).
    *
    * CAUTION: This function is deprecated because it requires allocating memory for the error
    * message unnecessarily. For custom revert reasons use {trySub}.
    *
    * Counterpart to Solidity's `-` operator.
    *
    * Requirements:
    *
    * - Subtraction cannot overflow.
    */
   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
       unchecked {
           require(b <= a, errorMessage);
           return a - b;
       }
   }

   /**
    * @dev Returns the integer division of two unsigned integers, reverting with custom message on
    * division by zero. The result is rounded towards zero.
    *
    * Counterpart to Solidity's `%` operator. This function uses a `revert`
    * opcode (which leaves remaining gas untouched) while Solidity uses an
    * invalid opcode to revert (consuming all remaining gas).
    *
    * Counterpart to Solidity's `/` operator. Note: this function uses a
    * `revert` opcode (which leaves remaining gas untouched) while Solidity
    * uses an invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    *
    * - The divisor cannot be zero.
    */
   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
       unchecked {
           require(b > 0, errorMessage);
           return a / b;
       }
   }

   /**
    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
    * reverting with custom message when dividing by zero.
    *
    * CAUTION: This function is deprecated because it requires allocating memory for the error
    * message unnecessarily. For custom revert reasons use {tryMod}.
    *
    * Counterpart to Solidity's `%` operator. This function uses a `revert`
    * opcode (which leaves remaining gas untouched) while Solidity uses an
    * invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    *
    * - The divisor cannot be zero.
    */
   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
       unchecked {
           require(b > 0, errorMessage);
           return a % b;
       }
   }
}

/*
* @dev Provides information about the current execution context, including the
* sender of the transaction and its data. While these are generally available
* via msg.sender and msg.data, they should not be accessed in such a direct
* manner, since when dealing with meta-transactions the account sending and
* paying for execution may not be the actual sender (as far as an application
* is concerned).
*
* This contract is only required for intermediate, library-like contracts.
*/
abstract contract Context {
   function _msgSender() internal view virtual returns (address) {
       return msg.sender;
   }

   function _msgData() internal view virtual returns (bytes calldata) {
       this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
       return msg.data;
   }
}

/**
* @dev Collection of functions related to the address type
*/
library Address {
   /**
    * @dev Returns true if `account` is a contract.
    *
    * [IMPORTANT]
    * ====
    * It is unsafe to assume that an address for which this function returns
    * false is an externally-owned account (EOA) and not a contract.
    *
    * Among others, `isContract` will return false for the following
    * types of addresses:
    *
    *  - an externally-owned account
    *  - a contract in construction
    *  - an address where a contract will be created
    *  - an address where a contract lived, but was destroyed
    * ====
    */
   function isContract(address account) internal view returns (bool) {
       // This method relies on extcodesize, which returns 0 for contracts in
       // construction, since the code is only stored at the end of the
       // constructor execution.

       uint256 size;
       // solhint-disable-next-line no-inline-assembly
       assembly { size := extcodesize(account) }
       return size > 0;
   }

   /**
    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
    * `recipient`, forwarding all available gas and reverting on errors.
    *
    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
    * of certain opcodes, possibly making contracts go over the 2300 gas limit
    * imposed by `transfer`, making them unable to receive funds via
    * `transfer`. {sendValue} removes this limitation.
    *
    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
    *
    * IMPORTANT: because control is transferred to `recipient`, care must be
    * taken to not create reentrancy vulnerabilities. Consider using
    * {ReentrancyGuard} or the
    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
    */
   function sendValue(address payable recipient, uint256 amount) internal {
       require(address(this).balance >= amount, "Address: insufficient balance");

       // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
       (bool success, ) = recipient.call{ value: amount }("");
       require(success, "Address: unable to send value, recipient may have reverted");
   }

   /**
    * @dev Performs a Solidity function call using a low level `call`. A
    * plain`call` is an unsafe replacement for a function call: use this
    * function instead.
    *
    * If `target` reverts with a revert reason, it is bubbled up by this
    * function (like regular Solidity function calls).
    *
    * Returns the raw returned data. To convert to the expected return value,
    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
    *
    * Requirements:
    *
    * - `target` must be a contract.
    * - calling `target` with `data` must not revert.
    *
    * _Available since v3.1._
    */
   function functionCall(address target, bytes memory data) internal returns (bytes memory) {
     return functionCall(target, data, "Address: low-level call failed");
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
    * `errorMessage` as a fallback revert reason when `target` reverts.
    *
    * _Available since v3.1._
    */
   function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
       return functionCallWithValue(target, data, 0, errorMessage);
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    * but also transferring `value` wei to `target`.
    *
    * Requirements:
    *
    * - the calling contract must have an BNB balance of at least `value`.
    * - the called Solidity function must be `payable`.
    *
    * _Available since v3.1._
    */
   function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
       return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
   }

   /**
    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
    * with `errorMessage` as a fallback revert reason when `target` reverts.
    *
    * _Available since v3.1._
    */
   function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
       require(address(this).balance >= value, "Address: insufficient balance for call");
       require(isContract(target), "Address: call to non-contract");

       // solhint-disable-next-line avoid-low-level-calls
       (bool success, bytes memory returndata) = target.call{ value: value }(data);
       return _verifyCallResult(success, returndata, errorMessage);
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    * but performing a static call.
    *
    * _Available since v3.3._
    */
   function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
       return functionStaticCall(target, data, "Address: low-level static call failed");
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
    * but performing a static call.
    *
    * _Available since v3.3._
    */
   function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
       require(isContract(target), "Address: static call to non-contract");

       // solhint-disable-next-line avoid-low-level-calls
       (bool success, bytes memory returndata) = target.staticcall(data);
       return _verifyCallResult(success, returndata, errorMessage);
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
    * but performing a delegate call.
    *
    * _Available since v3.4._
    */
   function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
       return functionDelegateCall(target, data, "Address: low-level delegate call failed");
   }

   /**
    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
    * but performing a delegate call.
    *
    * _Available since v3.4._
    */
   function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
       require(isContract(target), "Address: delegate call to non-contract");

       // solhint-disable-next-line avoid-low-level-calls
       (bool success, bytes memory returndata) = target.delegatecall(data);
       return _verifyCallResult(success, returndata, errorMessage);
   }

   function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
       if (success) {
           return returndata;
       } else {
           // Look for revert reason and bubble it up if present
           if (returndata.length > 0) {
               // The easiest way to bubble the revert reason is using memory via assembly

               // solhint-disable-next-line no-inline-assembly
               assembly {
                   let returndata_size := mload(returndata)
                   revert(add(32, returndata), returndata_size)
               }
           } else {
               revert(errorMessage);
           }
       }
   }
}

/**
* @dev Contract module which provides a basic access control mechanism, where
* there is an account (an owner) that can be granted exclusive access to
* specific functions.
*
* By default, the owner account will be the one that deploys the contract. This
* can later be changed with {transferOwnership}.
*
* This module is used through inheritance. It will make available the modifier
* `onlyOwner`, which can be applied to your functions to restrict their use to
* the owner.
*/
abstract contract Ownable is Context {
   address private _owner;

   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

   /**
    * @dev Initializes the contract setting the deployer as the initial owner.
    */
   constructor () {
       address msgSender = _msgSender();
       _owner = msgSender;
       emit OwnershipTransferred(address(0), msgSender);
   }

   /**
    * @dev Returns the address of the current owner.
    */
   function owner() public view virtual returns (address) {
       return _owner;
   }

   /**
    * @dev Throws if called by any account other than the owner.
    */
   modifier onlyOwner() {
       require(owner() == _msgSender(), "Ownable: caller is not the owner");
       _;
   }

   /**
    * @dev Leaves the contract without owner. It will not be possible to call
    * `onlyOwner` functions anymore. Can only be called by the current owner.
    *
    * NOTE: Renouncing ownership will leave the contract without an owner,
    * thereby removing any functionality that is only available to the owner.
    */
   function renounceOwnership() public virtual onlyOwner {
       emit OwnershipTransferred(_owner, address(0));
       _owner = address(0);
   }

   /**
    * @dev Transfers ownership of the contract to a new account (`newOwner`).
    * Can only be called by the current owner.
    */
   function transferOwnership(address newOwner) public virtual onlyOwner {
       require(newOwner != address(0), "Ownable: new owner is the zero address");
       emit OwnershipTransferred(_owner, newOwner);
       _owner = newOwner;
   }
}

interface IPancakeV2Factory {
   event PairCreated(address indexed token0, address indexed token1, address pair, uint);

   function feeTo() external view returns (address);
   function feeToSetter() external view returns (address);

   function getPair(address tokenA, address tokenB) external view returns (address pair);
   function allPairs(uint) external view returns (address pair);
   function allPairsLength() external view returns (uint);

   function createPair(address tokenA, address tokenB) external returns (address pair);

   function setFeeTo(address) external;
   function setFeeToSetter(address) external;
}

interface IPancakeV2Pair {
   event Approval(address indexed owner, address indexed spender, uint value);
   event Transfer(address indexed from, address indexed to, uint value);

   function name() external pure returns (string memory);
   function symbol() external pure returns (string memory);
   function decimals() external pure returns (uint8);
   function totalSupply() external view returns (uint);
   function balanceOf(address owner) external view returns (uint);
   function allowance(address owner, address spender) external view returns (uint);

   function approve(address spender, uint value) external returns (bool);
   function transfer(address to, uint value) external returns (bool);
   function transferFrom(address from, address to, uint value) external returns (bool);

   function DOMAIN_SEPARATOR() external view returns (bytes32);
   function PERMIT_TYPEHASH() external pure returns (bytes32);
   function nonces(address owner) external view returns (uint);

   function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

   event Mint(address indexed sender, uint amount0, uint amount1);
   event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
   event Swap(
       address indexed sender,
       uint amount0In,
       uint amount1In,
       uint amount0Out,
       uint amount1Out,
       address indexed to
   );
   event Sync(uint112 reserve0, uint112 reserve1);

   function MINIMUM_LIQUIDITY() external pure returns (uint);
   function factory() external view returns (address);
   function token0() external view returns (address);
   function token1() external view returns (address);
   function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
   function price0CumulativeLast() external view returns (uint);
   function price1CumulativeLast() external view returns (uint);
   function kLast() external view returns (uint);

   function mint(address to) external returns (uint liquidity);
   function burn(address to) external returns (uint amount0, uint amount1);
   function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
   function skim(address to) external;
   function sync() external;

   function initialize(address, address) external;
}

interface IPancakeV2Router01 {
   function factory() external pure returns (address);
   function WETH() external pure returns (address);

   function addLiquidity(
       address tokenA,
       address tokenB,
       uint amountADesired,
       uint amountBDesired,
       uint amountAMin,
       uint amountBMin,
       address to,
       uint deadline
   ) external returns (uint amountA, uint amountB, uint liquidity);
   function addLiquidityBNB(
       address token,
       uint amountTokenDesired,
       uint amountTokenMin,
       uint amountBNBMin,
       address to,
       uint deadline
   ) external payable returns (uint amountToken, uint amountBNB, uint liquidity);
   function removeLiquidity(
       address tokenA,
       address tokenB,
       uint liquidity,
       uint amountAMin,
       uint amountBMin,
       address to,
       uint deadline
   ) external returns (uint amountA, uint amountB);
   function removeLiquidityBNB(
       address token,
       uint liquidity,
       uint amountTokenMin,
       uint amountBNBMin,
       address to,
       uint deadline
   ) external returns (uint amountToken, uint amountBNB);
   function removeLiquidityWithPermit(
       address tokenA,
       address tokenB,
       uint liquidity,
       uint amountAMin,
       uint amountBMin,
       address to,
       uint deadline,
       bool approveMax, uint8 v, bytes32 r, bytes32 s
   ) external returns (uint amountA, uint amountB);
   function removeLiquidityBNBWithPermit(
       address token,
       uint liquidity,
       uint amountTokenMin,
       uint amountBNBMin,
       address to,
       uint deadline,
       bool approveMax, uint8 v, bytes32 r, bytes32 s
   ) external returns (uint amountToken, uint amountBNB);
   function swapExactTokensForTokens(
       uint amountIn,
       uint amountOutMin,
       address[] calldata path,
       address to,
       uint deadline
   ) external returns (uint[] memory amounts);
   function swapTokensForExactTokens(
       uint amountOut,
       uint amountInMax,
       address[] calldata path,
       address to,
       uint deadline
   ) external returns (uint[] memory amounts);
   function swapExactBNBForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
       external
       payable
       returns (uint[] memory amounts);
   function swapTokensForExactBNB(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
       external
       returns (uint[] memory amounts);
   function swapExactTokensForBNB(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
       external
       returns (uint[] memory amounts);
   function swapBNBForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
       external
       payable
       returns (uint[] memory amounts);

   function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
   function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
   function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
   function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
   function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeV2Router02 is IPancakeV2Router01 {
   function removeLiquidityBNBSupportingFeeOnTransferTokens(
       address token,
       uint liquidity,
       uint amountTokenMin,
       uint amountBNBMin,
       address to,
       uint deadline
   ) external returns (uint amountBNB);
   function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(
       address token,
       uint liquidity,
       uint amountTokenMin,
       uint amountBNBMin,
       address to,
       uint deadline,
       bool approveMax, uint8 v, bytes32 r, bytes32 s
   ) external returns (uint amountBNB);
   function swapExactTokensForTokensSupportingFeeOnTransferTokens(
       uint amountIn,
       uint amountOutMin,
       address[] calldata path,
       address to,
       uint deadline
   ) external;
   function swapExactBNBForTokensSupportingFeeOnTransferTokens(
       uint amountOutMin,
       address[] calldata path,
       address to,
       uint deadline
   ) external payable;
   function swapExactTokensForBNBSupportingFeeOnTransferTokens(
       uint amountIn,
       uint amountOutMin,
       address[] calldata path,
       address to,
       uint deadline
   ) external;
}

contract RugMuncher is Context, IBEP20, Ownable {
   using SafeMath for uint256;
   using Address for address;

   mapping (address => uint256) private _rOwned;
   mapping (address => uint256) private _tOwned;
   mapping (address => mapping (address => uint256)) private _allowances;

   mapping (address => bool) private _isExcludedFromFee;

   mapping (address => bool) private _isExcluded; // Is excluded from reward
   mapping(address => bool) private _blacklist;
   address[] private _excluded;

   address private _charityWalletAddress = 0xd25BA9703615A5c2c3f7B1e59F953611e2D1D0Fc;

   uint256 private constant MAX = ~uint256(0);
   uint256 private _tTotal = 1000000000 * 10**6 * 10**9;
   uint256 private _rTotal = (MAX - (MAX % _tTotal));
   uint256 private _tFeeTotal;

   string private _name = "Rug Muncher";
   string private _symbol = "RUGMUNCHER";
   uint8 private _decimals = 9;
   bool public frozen = true;

   uint256 public _taxFee = 5;
   uint256 private _previousTaxFee = _taxFee;

   uint256 public _liquidityFee = 2;
   uint256 private _previousLiquidityFee = _liquidityFee;

   uint256 public _charityFee = 2;
   uint256 private _previousCharityFee = _charityFee;

   uint256 public _burnFee = 1;
   uint256 private _previousBurnFee = _burnFee;

   IPancakeV2Router02 public immutable pancakeV2Router;
   address public immutable pancakeV2Pair;

   bool inSwapAndLiquify;
   bool public swapAndLiquifyEnabled = true;

   uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;
   uint256 private numTokensSellToAddToLiquidity = 500000 * 10**6 * 10**9;

   address public admin = 0xaee6d0890d8709eea41FB7fc6Af81135c10378dB;
   address public recoveryAdmin = 0x44eCBb36E3135b69d1dA0EEf7249CfbE46ca55Df;
   address private recoveryAdminCanditate;
   bytes32 private recoveryAdminKeyHash;
   uint256 public timelockPeriod = 86400;
   uint256 public losslessTurnOffTimestamp;
   bool public isLosslessTurnOffProposed;
   bool public isLosslessOn = true;
   ILosslessController private lossless; // BSC 0xDBB5125CEEaf7233768c84A5dF570AeECF0b4634

   event AdminChanged(address indexed previousAdmin, address indexed newAdmin);
   event RecoveryAdminChangeProposed(address indexed candidate);
   event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);
   event LosslessTurnOffProposed(uint256 turnOffDate);
   event LosslessTurnedOff();
   event LosslessTurnedOn();

   event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
   event SwapAndLiquifyEnabledUpdated(bool enabled);
   event SwapAndLiquify(
       uint256 tokensSwapped,
       uint256 bnbReceived,
       uint256 tokensIntoLiquidity
   );

   modifier lockTheSwap {
       inSwapAndLiquify = true;
       _;
       inSwapAndLiquify = false;
   }

   modifier isBlackedListed(address sender, address recipient) {
       require(_blacklist[sender] == false && _blacklist[recipient] == false,'BEP20: Account is blacklisted from transferring');
       _;
   }

   constructor (address lossless_) {
       _rOwned[owner()] = _rTotal;

       IPancakeV2Router02 _pancakeV2Router = IPancakeV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
       // Create a pancake pair for this new token
       pancakeV2Pair = IPancakeV2Factory(_pancakeV2Router.factory())
           .createPair(address(this), _pancakeV2Router.WETH());

       // Set the rest of the contract variables
       pancakeV2Router = _pancakeV2Router;

       // Exclude owner and this contract from fee
       _isExcludedFromFee[owner()] = true;
       _isExcludedFromFee[address(this)] = true;

       lossless = ILosslessController(lossless_);

       emit Transfer(address(0), owner(), _tTotal);
   }

   modifier notFrozen() {
       require(!frozen, "Frozen");
       _;
   }

   function freeze() public onlyOwner notFrozen {
       frozen = true;
   }

   function unfreeze() public onlyOwner {
       frozen = false;
   }

   modifier lssApprove(address spender, uint256 amount) {
       if (isLosslessOn) {
           lossless.beforeApprove(_msgSender(), spender, amount);
           _;
           lossless.afterApprove(_msgSender(), spender, amount);
       } else {
           _;
       }
   }

   modifier lssTransfer(address recipient, uint256 amount) {
       if (isLosslessOn) {
           lossless.beforeTransfer(_msgSender(), recipient, amount);
           _;
           lossless.afterTransfer(_msgSender(), recipient, amount);
       } else {
           _;
       }
   }

   modifier lssTransferFrom(address sender, address recipient, uint256 amount) {
       if (isLosslessOn) {
           lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);
           _;
           lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);
       } else {
           _;
       }
   }

   modifier lssIncreaseAllowance(address spender, uint256 addedValue) {
       if (isLosslessOn) {
           lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);
           _;
           lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);
       } else {
           _;
       }
   }

   modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {
       if (isLosslessOn) {
           lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);
           _;
           lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);
       } else {
           _;
       }
   }

   modifier onlyRecoveryAdmin() {
       require(_msgSender() == recoveryAdmin, "LERC20: Must be recovery admin");
       _;
   }

   function getAdmin() external view returns (address) {
       return admin;
   }

   function transferOutBlacklistedFunds(address[] calldata from) external {
       require(_msgSender() == address(lossless), "LERC20: Only lossless contract");
       for (uint i = 0; i < from.length; i++) {
           _transfer(from[i], address(lossless), balanceOf(from[i]));
       }
   }

   function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {
       emit AdminChanged(admin, newAdmin);
       admin = newAdmin;
   }

   function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {
       recoveryAdminCanditate = candidate;
       recoveryAdminKeyHash = keyHash;
       emit RecoveryAdminChangeProposed(candidate);
   }

   function acceptRecoveryAdminOwnership(bytes memory key) external {
       require(_msgSender() == recoveryAdminCanditate, "LERC20: Must be canditate");
       require(keccak256(key) == recoveryAdminKeyHash, "LERC20: Invalid key");
       emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);
       recoveryAdmin = recoveryAdminCanditate;
   }

   function proposeLosslessTurnOff() public onlyRecoveryAdmin {
       losslessTurnOffTimestamp = block.timestamp + timelockPeriod;
       isLosslessTurnOffProposed = true;
       emit LosslessTurnOffProposed(losslessTurnOffTimestamp);
   }

   function executeLosslessTurnOff() public onlyRecoveryAdmin {
       require(isLosslessTurnOffProposed, "LERC20: TurnOff not proposed");
       require(losslessTurnOffTimestamp <= block.timestamp, "LERC20: Time lock in progress");
       isLosslessOn = false;
       isLosslessTurnOffProposed = false;
       emit LosslessTurnedOff();
   }

   function executeLosslessTurnOn() public onlyRecoveryAdmin {
       isLosslessTurnOffProposed = false;
       isLosslessOn = true;
       emit LosslessTurnedOn();
   }

   function getBNBBalance() public view returns(uint) {
       return address(this).balance;
   }

   function withdrawOverFlowBNB() public onlyOwner {
       address payable to = payable(msg.sender);
       to.transfer(getBNBBalance());
   }

   function name() public view returns (string memory) {
       return _name;
   }

   function symbol() public view returns (string memory) {
       return _symbol;
   }

   function decimals() public view returns (uint8) {
       return _decimals;
   }

   function totalSupply() public view override returns (uint256) {
       return _tTotal;
   }

   function balanceOf(address account) public view override returns (uint256) {
       if (_isExcluded[account]) return _tOwned[account];
       return tokenFromReflection(_rOwned[account]);
   }

   function transfer(address recipient, uint256 amount) public override notFrozen lssTransfer(recipient, amount) returns (bool) {
       _transfer(_msgSender(), recipient, amount);
       return true;
   }

   function allowance(address owner, address spender) public view override returns (uint256) {
       return _allowances[owner][spender];
   }

   function approve(address spender, uint256 amount) public override lssApprove(spender, amount) returns (bool) {
       _approve(_msgSender(), spender, amount);
       return true;
   }

   function transferFrom(address sender, address recipient, uint256 amount) public override notFrozen lssTransferFrom(sender, recipient, amount) returns (bool) {
       _transfer(sender, recipient, amount);
       _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
       return true;
   }

   function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {
       _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
       return true;
   }

   function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {
       _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
       return true;
   }

   function isExcludedFromReward(address account) public view returns (bool) {
       return _isExcluded[account];
   }

   function totalFees() public view returns (uint256) {
       return _tFeeTotal;
   }

   function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
       require(tAmount <= _tTotal, "Amount must be less than supply");
       if (!deductTransferFee) {
           (uint256 rAmount,,,,) = _getValues(tAmount);
           return rAmount;
       } else {
           (,uint256 rTransferAmount,,,) = _getValues(tAmount);
           return rTransferAmount;
       }
   }

   function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
       require(rAmount <= _rTotal, "Amount must be less than total reflections");
       uint256 currentRate =  _getRate();
       return rAmount.div(currentRate);
   }

   function excludeFromReward(address account) public onlyOwner() {
       // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Pancake router.');
       require(!_isExcluded[account], "Account is not excluded");
       if(_rOwned[account] > 0) {
           _tOwned[account] = tokenFromReflection(_rOwned[account]);
       }
       _isExcluded[account] = true;
       _excluded.push(account);
   }

   function includeInReward(address account) external onlyOwner() {
       require(_isExcluded[account], "Account is already included");
       for (uint256 i = 0; i < _excluded.length; i++) {
           if (_excluded[i] == account) {
               _excluded[i] = _excluded[_excluded.length - 1];
               _tOwned[account] = 0;
               _isExcluded[account] = false;
               _excluded.pop();
               break;
           }
       }
   }

   function excludeFromFee(address account) public onlyOwner {
       _isExcludedFromFee[account] = true;
   }

   function includeInFee(address account) public onlyOwner {
       _isExcludedFromFee[account] = false;
   }

   function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
       _taxFee = taxFee;
   }

   function setCharityFeePercent(uint256 charityFee) external onlyOwner() {
       _charityFee = charityFee;
   }

   function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
       _liquidityFee = liquidityFee;
   }

   function setBurnFeePercent(uint256 burnFee) external onlyOwner() {
       _burnFee = burnFee;
   }

   function changeCharityWallet(address payable newAddress) public onlyOwner{
       _charityWalletAddress = newAddress;
   }

   function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
       _maxTxAmount = _tTotal.mul(maxTxPercent).div(
           10**2
       );
   }

   function _setBlackListedAddress(address account, bool blacklisted) external onlyOwner() {
       _blacklist[account] = blacklisted;
   }

   function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
       swapAndLiquifyEnabled = _enabled;
       emit SwapAndLiquifyEnabledUpdated(_enabled);
   }

   //to receive BNB from pancakeV2Router when swapping
   receive() external payable {}

   function _reflectFee(uint256 rFee, uint256 tFee) private {
       _rTotal = _rTotal.sub(rFee);
       _tFeeTotal = _tFeeTotal.add(tFee);
   }

   struct FeeValues {
       uint256 taxFee;
       uint256 liquidityFee;
       uint256 burnFee;
       uint256 charityFee;
   }

   function _getValues(uint256 tAmount) private view returns (uint256, uint256, FeeValues memory, uint256, FeeValues memory) {
       // Calculate "T" values
       FeeValues memory tFees = FeeValues(calculateTaxFee(tAmount), calculateLiquidityFee(tAmount), calculateBurnFee(tAmount), calculateCharityFee(tAmount));
       uint256 tTransferAmount = tAmount.sub(tFees.taxFee).sub(tFees.liquidityFee).sub(tFees.burnFee).sub(tFees.charityFee);

       // Calculate "R" values
       uint256 currentRate = _getRate();
       uint256 rAmount = tAmount.mul(currentRate);
       FeeValues memory rFees = FeeValues(
           tFees.taxFee.mul(currentRate),
           tFees.liquidityFee.mul(currentRate),
           tFees.burnFee.mul(currentRate),
           tFees.charityFee.mul(currentRate)
       );
       uint256 rTransferAmount = rAmount.sub(rFees.taxFee).sub(rFees.liquidityFee).sub(rFees.burnFee).sub(rFees.charityFee);
       return (rAmount, rTransferAmount, rFees, tTransferAmount, tFees);
   }

   function _getRate() private view returns(uint256) {
       (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
       return rSupply.div(tSupply);
   }

   function _getCurrentSupply() private view returns(uint256, uint256) {
       uint256 rSupply = _rTotal;
       uint256 tSupply = _tTotal;
       for (uint256 i = 0; i < _excluded.length; i++) {
           if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
           rSupply = rSupply.sub(_rOwned[_excluded[i]]);
           tSupply = tSupply.sub(_tOwned[_excluded[i]]);
       }
       if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
       return (rSupply, tSupply);
   }

   function _takeLiquidity(uint256 tLiquidity) private {
       uint256 currentRate =  _getRate();
       uint256 rLiquidity = tLiquidity.mul(currentRate);
       _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
       if(_isExcluded[address(this)])
           _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
   }

   function _takeBurn(uint256 tBurn) private {
       uint256 currentRate =  _getRate();
       uint256 rBurn = tBurn.mul(currentRate);
       _rOwned[address(0)] = _rOwned[address(0)].add(rBurn);
       if(_isExcluded[address(0)])
           _tOwned[address(0)] = _tOwned[address(0)].add(tBurn);
   }

   function _takeCharity(uint256 tCharity) private {
       uint256 currentRate =  _getRate();
       uint256 rCharity = tCharity.mul(currentRate);
       _rOwned[address(_charityWalletAddress)] = _rOwned[address(_charityWalletAddress)].add(rCharity);
       if(_isExcluded[address(_charityWalletAddress)])
           _tOwned[address(_charityWalletAddress)] = _tOwned[address(_charityWalletAddress)].add(tCharity);
   }

   function calculateTaxFee(uint256 _amount) private view returns (uint256) {
       return _amount.mul(_taxFee).div(
           10**2
       );
   }

   function calculateCharityFee(uint256 _amount) private view returns (uint256) {
       return _amount.mul(_charityFee).div(
           10**2
       );
   }

   function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
       return _amount.mul(_liquidityFee).div(
           10**2
       );
   }

   function calculateBurnFee(uint256 _amount) private view returns (uint256) {
       return _amount.mul(_burnFee).div(
           10**2
       );
   }

   function removeAllFee() private {
       if(_taxFee == 0 && _liquidityFee == 0) return;

       _previousTaxFee = _taxFee;
       _previousCharityFee = _charityFee;
       _previousLiquidityFee = _liquidityFee;
       _previousBurnFee = _burnFee;

       _taxFee = 0;
       _charityFee = 0;
       _liquidityFee = 0;
       _burnFee = 0;
   }

   function restoreAllFee() private {
       _taxFee = _previousTaxFee;
       _charityFee = _previousCharityFee;
       _liquidityFee = _previousLiquidityFee;
       _burnFee = _previousBurnFee;
   }

   function isExcludedFromFee(address account) public view returns(bool) {
       return _isExcludedFromFee[account];
   }

   function _approve(address owner, address spender, uint256 amount) private {
       require(owner != address(0), "BEP20: approve from the zero address");
       require(spender != address(0), "BEP20: approve to the zero address");

       _allowances[owner][spender] = amount;
       emit Approval(owner, spender, amount);
   }

   function _transfer(
       address from,
       address to,
       uint256 amount
   ) private isBlackedListed(from, to) {
       require(from != address(0), "BEP20: transfer from the zero address");
       require(to != address(0), "BEP20: transfer to the zero address");
       require(amount > 0, "Transfer amount must be greater than zero");
       if(from != owner() && to != owner())
           require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");

       // is the token balance of this contract address over the min number of
       // tokens that we need to initiate a swap + liquidity lock?
       // also, don't get caught in a circular liquidity event.
       // also, don't swap & liquify if sender is pancake pair.
       uint256 contractTokenBalance = balanceOf(address(this));

       if(contractTokenBalance >= _maxTxAmount)
       {
           contractTokenBalance = _maxTxAmount;
       }

       bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
       if (
           overMinTokenBalance &&
           !inSwapAndLiquify &&
           from != pancakeV2Pair &&
           swapAndLiquifyEnabled
       ) {
           contractTokenBalance = numTokensSellToAddToLiquidity;
           //add liquidity
           swapAndLiquify(contractTokenBalance);
       }

       //transfer amount, it will take tax, burn, liquidity fee
       _tokenTransfer(from,to,amount);
   }

   function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
       // split the contract balance into halves
       uint256 half = contractTokenBalance.div(2);
       uint256 otherHalf = contractTokenBalance.sub(half);

       // capture the contract's current BNB balance.
       // this is so that we can capture exactly the amount of BNB that the
       // swap creates, and not make the liquidity event include any BNB that
       // has been manually sent to the contract
       uint256 initialBalance = address(this).balance;

       // swap tokens for BNB
       swapTokensForBnb(half); // <- this breaks the BNB -> TOKEN swap when swap+liquify is triggered

       // how much BNB did we just swap into?
       uint256 newBalance = address(this).balance.sub(initialBalance);

       // add liquidity to pancake
       addLiquidity(otherHalf, newBalance);

       emit SwapAndLiquify(half, newBalance, otherHalf);
   }

   function swapTokensForBnb(uint256 tokenAmount) private {
       // generate the pancake pair path of token -> bnb
       address[] memory path = new address[](2);
       path[0] = address(this);
       path[1] = pancakeV2Router.WETH();

       _approve(address(this), address(pancakeV2Router), tokenAmount);

       // make the swap
       pancakeV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(
           tokenAmount,
           0, // accept any amount of BNB
           path,
           address(this),
           block.timestamp
       );
   }

   function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {
       // approve token transfer to cover all possible scenarios
       _approve(address(this), address(pancakeV2Router), tokenAmount);

       // add the liquidity
       pancakeV2Router.addLiquidityBNB{value: bnbAmount}(
           address(this),
           tokenAmount,
           0, // slippage is unavoidable
           0, // slippage is unavoidable
           address(this),
           block.timestamp
       );
   }

   //this method is responsible for taking all fee, if takeFee is true
   function _tokenTransfer(address sender, address recipient, uint256 amount) private {
       if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
           removeAllFee();
       }
       else{
           require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
       }

       if (_isExcluded[sender] && !_isExcluded[recipient]) {
           _transferFromExcluded(sender, recipient, amount);
       } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
           _transferToExcluded(sender, recipient, amount);
       } else if (_isExcluded[sender] && _isExcluded[recipient]) {
           _transferBothExcluded(sender, recipient, amount);
       } else {
           _transferStandard(sender, recipient, amount);
       }

       if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient])
           restoreAllFee();
   }

   function _takeFees(FeeValues memory tFees, FeeValues memory rFees) private {
       _takeLiquidity(tFees.liquidityFee);
       _takeBurn(tFees.burnFee);
       _takeCharity(tFees.charityFee);
       _reflectFee(rFees.taxFee, tFees.taxFee);
   }

   function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
       (uint256 rAmount, uint256 rTransferAmount, FeeValues memory rFees, uint256 tTransferAmount, FeeValues memory tFees) = _getValues(tAmount);
       _tOwned[sender] = _tOwned[sender].sub(tAmount);
       _rOwned[sender] = _rOwned[sender].sub(rAmount);
       _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
       _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
       _takeFees(tFees, rFees);
       emit Transfer(sender, recipient, tTransferAmount);
   }


   function _transferStandard(address sender, address recipient, uint256 tAmount) private {
       (uint256 rAmount, uint256 rTransferAmount, FeeValues memory rFees, uint256 tTransferAmount, FeeValues memory tFees) = _getValues(tAmount);
       _rOwned[sender] = _rOwned[sender].sub(rAmount);
       _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
       _takeFees(tFees, rFees);
       emit Transfer(sender, recipient, tTransferAmount);
   }

   function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
       (uint256 rAmount, uint256 rTransferAmount, FeeValues memory rFees, uint256 tTransferAmount, FeeValues memory tFees) = _getValues(tAmount);
       _rOwned[sender] = _rOwned[sender].sub(rAmount);
       _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
       _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
       _takeFees(tFees, rFees);
       emit Transfer(sender, recipient, tTransferAmount);
   }

   function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
       (uint256 rAmount, uint256 rTransferAmount, FeeValues memory rFees, uint256 tTransferAmount, FeeValues memory tFees) = _getValues(tAmount);
       _tOwned[sender] = _tOwned[sender].sub(tAmount);
       _rOwned[sender] = _rOwned[sender].sub(rAmount);
       _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
       _takeFees(tFees, rFees);
       emit Transfer(sender, recipient, tTransferAmount);
   }

}