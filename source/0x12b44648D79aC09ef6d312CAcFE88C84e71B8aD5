
// File: contracts/Lock.sol
// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";

contract MetaKeeperLock is Ownable {
    struct Lock {
        uint256 initialAmount;
        uint256 lockedAmount;
        uint256 unlockPeriod;
        uint256 unlockedAmountPerPeriod;
        uint256 withdrawed;
    }

    IERC20 public mkpTokenContract;
    IERC20 public cakeTokenContract;
    uint256 public initialTime;
    address public privateEquity;
    address public developer;
    address public marketing;

    bool public mkpLocked;
    bool public cakeLocked;

    mapping(address => Lock) public lockedMkp;
    mapping(address => Lock) public lockedCake;

    event Withdraw(address _address, uint256 amount);

    function lockMkp(
        address _privateEquity,
        address _developer,
        address _marketing
    ) public onlyOwner {
        require(!mkpLocked, "Locked");
        mkpLocked = true;

        initialTime = block.timestamp;

        privateEquity = _privateEquity;
        developer = _developer;
        marketing = _marketing;

        // privateEquity
        lockedMkp[privateEquity].lockedAmount = 2_500_000 ether;
        lockedMkp[privateEquity].initialAmount = 625_000 ether;
        lockedMkp[privateEquity].unlockPeriod = 30 days;
        lockedMkp[privateEquity].unlockedAmountPerPeriod = 625_000 ether;

        // marketing
        lockedMkp[marketing].lockedAmount = 6_000_000 ether;
        lockedMkp[marketing].initialAmount = 1_200_000 ether;
        lockedMkp[marketing].unlockPeriod = 30 days;
        lockedMkp[marketing].unlockedAmountPerPeriod = 1_200_000 ether;

        // developer
        lockedMkp[developer].lockedAmount = 5_000_000 ether;
        lockedMkp[developer].unlockPeriod = 365 days;
        lockedMkp[developer].unlockedAmountPerPeriod = 5_000_000 ether;

        // 2_500_000 + 6_000_000 + 5_000_000 = 13_500_000
        mkpTokenContract.transferFrom(msg.sender, address(this), 13_500_000 ether);
    }

    function lockCake() public onlyOwner {
        require(!cakeLocked, "Locked");
        cakeLocked = true;

        // cake
        uint256 allCakeToken = cakeTokenContract.balanceOf(msg.sender);
        lockedCake[msg.sender].lockedAmount = allCakeToken;
        lockedCake[msg.sender].unlockPeriod = 365 days;
        lockedCake[msg.sender].unlockedAmountPerPeriod = allCakeToken;

        // lock all Cake-LP
        cakeTokenContract.transferFrom(msg.sender, address(this), allCakeToken);
    }

    function setMkpTokenContract(address _address) public onlyOwner {
        mkpTokenContract = IERC20(_address);
    }

    function setCakeTokenContract(address _address) public onlyOwner {
        cakeTokenContract = IERC20(_address);
    }

    function withdrawCake(address account) public {
        uint256 balance = unlockedAmount(lockedCake[account]) - lockedCake[account].withdrawed;
        require(balance > 0, "No amount to withdraw");

        lockedCake[account].withdrawed += balance;
        cakeTokenContract.transfer(account, balance);

        emit Withdraw(account, balance);
    }

    function withdrawMkp(address account) public {
        uint256 balance = unlockedAmount(lockedMkp[account]) - lockedMkp[account].withdrawed;
        require(balance > 0, "No amount to withdraw");

        lockedMkp[account].withdrawed += balance;
        mkpTokenContract.transfer(account, balance);

        emit Withdraw(account, balance);
    }

    function unlockedAmount(Lock memory lock) public view returns (uint256) {
        if (lock.unlockPeriod == 0) {
            return 0;
        }

        uint256 timePassed = block.timestamp - initialTime;
        uint256 multiplier = (timePassed / lock.unlockPeriod);
        return Math.min(multiplier * lock.unlockedAmountPerPeriod + lock.initialAmount, lock.lockedAmount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

