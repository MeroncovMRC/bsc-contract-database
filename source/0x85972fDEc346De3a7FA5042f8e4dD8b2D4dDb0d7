
// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)

pragma solidity ^0.8.0;

import "../ERC20.sol";
import "../../../utils/Context.sol";

/**
 * @dev Extension of {ERC20} that allows token holders to destroy both their own
 * tokens and those that they have an allowance for, in a way that can be
 * recognized off-chain (via event analysis).
 */
abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/YieldBONDS.sol
//SPDX-License-Identifier: MIT


/*

 /$$     /$$ /$$           /$$       /$$       /$$$$$$$   /$$$$$$  /$$   /$$ /$$$$$$$   /$$$$$$ 
|  $$   /$$/|__/          | $$      | $$      | $$__  $$ /$$__  $$| $$$ | $$| $$__  $$ /$$__  $$
 \  $$ /$$/  /$$  /$$$$$$ | $$  /$$$$$$$      | $$  \ $$| $$  \ $$| $$$$| $$| $$  \ $$| $$  \__/
  \  $$$$/  | $$ /$$__  $$| $$ /$$__  $$      | $$$$$$$ | $$  | $$| $$ $$ $$| $$  | $$|  $$$$$$ 
   \  $$/   | $$| $$$$$$$$| $$| $$  | $$      | $$__  $$| $$  | $$| $$  $$$$| $$  | $$ \____  $$
    | $$    | $$| $$_____/| $$| $$  | $$      | $$  \ $$| $$  | $$| $$\  $$$| $$  | $$ /$$  \ $$
    | $$    | $$|  $$$$$$$| $$|  $$$$$$$      | $$$$$$$/|  $$$$$$/| $$ \  $$| $$$$$$$/|  $$$$$$/
    |__/    |__/ \_______/|__/ \_______/      |_______/  \______/ |__/  \__/|_______/  \______/ 
                                                                                                
  Is a programmable yield ecosystem built on BSC. 
  Yield BONDS is market driven and allows members 
  to get BNB in a completely transparent and secure way. 

  https:/yieldbonds.io                                                                                                
                                                                                                
*/

pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract YieldBONDS is ERC20{


  uint256 constant private _poolDistributionPeriod = 86400; // 1 day for distribute top3 bonus
  uint256 constant private _unlockPeriod = 86400; // 1 day for unlock 1% tokens
  uint256 constant private _priceIncreasePeriod = 3600; // 1 hour for price increase
  uint256 constant private _dividendDistributionPeriod = 3600; // 1 hour for price increase
  uint256 constant private _priceGrowth = 1; // 1/1000=0.1%

  struct Leader{
    address wallet;
    uint256 value;
  }

  struct User{
    uint256 lockedBalance;
    uint256 unlockedBalance;
    uint256 income;
    uint256 withdrawn;
    uint256 referralBonus;
    uint256 lockedDate;
    address referrer;
    uint256 referrals;
    uint256 share;
    uint256 cycle;
    uint256 dividends;
  }
  
  mapping(address=>uint256[7]) _stats;
  mapping(address=>User) private _users;
  mapping(uint256=>uint256) _shares;
  uint256 _dividendCycle=1;
  uint256 _lastDividendDistribution;
  address private _defaultReferrer;
  uint256 private _leaderPool=0;
  uint256 private _lastPriceUpdate=0;
  uint256 private _price=0.001 ether;
  address[6] _owners = [
    0xC8D83cc167aeb66E090201248BaD4a553Eff03d3,
    0xda16D13Eb0f8bD0a99E6279e8970689d7d8b805c,
    0xDaB82C5aA79DBb49319a4d62e488Ee5104a03787,
    0xCf6142895574340d4cD91a6FFfdd55cef46622A0,
    0x33688a8A07e981A564FcFEB3295940A7696B1F79,
    0x25B27E736b6498AfA816d065BA686dE6Fd788f14
  ];

  uint256[7] _x2referralLevelBonuses=[
    6, 4, 2, 2, 2, 1, 1 
  ];

  address[3] private _top3Users;
  mapping(uint256 => mapping(address => uint256)) private _top3UsersBonuses;
  uint256 private _cycle=0;
  uint256 private _cycleUpdate=0;
  event Bought(address indexed user, address indexed referrer, uint256 amount, uint256 value);
  event Sold(address indexed user, uint256 amount, uint256 value);
  event Claimed(address indexed user, uint256 amount);
  event Withdrawn(address indexed user, uint256 value);
  event ReferralPayment(address indexed user, address indexed referrer, uint256 value);

  constructor() ERC20("Yield BONDS","BONDS") {
    _lastPriceUpdate=block.timestamp;
    _cycleUpdate=block.timestamp;
    _lastDividendDistribution=block.timestamp;
    _defaultReferrer=msg.sender;
    _mint(0xCf6142895574340d4cD91a6FFfdd55cef46622A0, 400000 ether);
  }


  function buy(address referrer) external payable {
    _updatePrice();
    uint256 amount = msg.value * (1 ether) / _price;
    require( msg.sender != _defaultReferrer, "Owner not allowed to buy");
    if (_users[msg.sender].referrer==address(0)){
      if (referrer == address(0) || referrer == msg.sender){
        _users[msg.sender].referrer=_defaultReferrer;
        _users[_defaultReferrer].referrals+=1;
      }else
      if (_users[msg.sender].referrer != referrer){
        _users[msg.sender].referrer=referrer;
        for(uint i;i<7;){
          _users[referrer].referrals+=1;
          referrer=_users[referrer].referrer;
          if (referrer == address(0)) break;
          unchecked{
            i++;
          }
        }
      }
    }
    _updateDividends(msg.sender, block.timestamp);
    _buy(amount, msg.value);
  }

  function _updateDividends(address user, uint256 timestamp) internal{
    if (_dividendCycle > _users[user].cycle){
      _users[user].dividends+=getDividends(user);
      _users[user].cycle=_dividendCycle;
    }
    if (timestamp - _lastDividendDistribution > _dividendDistributionPeriod){
      _lastDividendDistribution=timestamp;
      _dividendCycle+=1;
    }
  }
  
  function getDividends(address user) public view returns(uint256 dividends){
    if (_users[user].cycle==0 || _dividendCycle<=_users[user].cycle) return 0;
    for(uint256 i=_users[user].cycle;i<_dividendCycle;){
      if (_shares[i]>0){
        dividends+=_shares[i] * balanceOf(user) / totalSupply();
      }
      unchecked{
        i++;
      }
    }
  }

  function _buy(uint256 amount, uint256 value) internal{
    _users[msg.sender].income+=value;
    _leaderPool+= value * 5 / 100;
    _shares[_dividendCycle]+= value / 10;
    _users[msg.sender].share+=value / 10;
    _distributeBonusesForOwners( value);
    _distributeBonusesForReferrers( _users[msg.sender].referrer, value );
    if (_users[msg.sender].lockedDate==0){
      _users[msg.sender].lockedDate = block.timestamp; 
    }else{
      _claim();
    }
    _setPoolTop3(msg.sender,value);
    _users[msg.sender].lockedBalance += amount;
    emit Bought(msg.sender, _users[msg.sender].referrer, amount, value);
  }

  function sell(uint256 amount) external{
    require( balanceOf(msg.sender) >= amount && amount > 0, "Not enough tokens");
    _updateDividends(msg.sender, block.timestamp);
    _updatePrice();
    uint256 value=amount * _price / (1 ether);
    _distributeBonusesForOwners( value );
    _burn(msg.sender,amount);
    Address.sendValue(payable(msg.sender),value);
    emit Sold(msg.sender, amount, value);

  }

  function _updatePrice() internal{
    uint256 _hours = (block.timestamp - _lastPriceUpdate) / _priceIncreasePeriod;
    if (_hours > 0){
      _price=getCurrentPrice(block.timestamp);
      _lastPriceUpdate+=_hours * _priceIncreasePeriod;
    }
  }

  function getCurrentPrice(uint256 timestamp) public view returns(uint256 price){
      uint256 _hours = (timestamp - _lastPriceUpdate) / _priceIncreasePeriod;
      price=_price;
      for(uint256 i;i<_hours;){
        price+=price * _priceGrowth / 1000;
        unchecked{
          i++;
        }
      }
  }

  function totalBalanceOf(address user) public view returns(uint256 amount){
    amount=balanceOf(user) + lockedBalanceOf(user);
  }

  function lockedBalanceOf(address user) public view returns(uint256 amount){
    if (_users[user].lockedBalance > _users[user].unlockedBalance){
      amount=_users[user].lockedBalance  - _users[user].unlockedBalance;
    }else{
      amount=0;
    }

  }

  function unlockedBalanceOf(address user, uint256 timestamp) public view returns(uint256 amount){
    uint256 _days=(timestamp - _users[user].lockedDate) / _unlockPeriod;
    if (_days ==0) return 0;
    uint256 balance=_users[user].lockedBalance - _users[user].unlockedBalance;
    amount=0;
      for(uint256 i=0;i<_days;){
        uint256 delta=balance / 100;
        if (delta == 0)
          break;
        amount += delta; 
        balance -= delta;
        unchecked{
          i++;
        }
      }
    if (balance >= _users[user].unlockedBalance ){
      balance=balance - _users[user].unlockedBalance;
    }else{
      balance = 0;
    }
  }

  function claim() external {
    uint256 unlockAmount=unlockedBalanceOf(msg.sender, block.timestamp);
    require(unlockAmount > 0, "No unlocked tokens");
    _updateDividends(msg.sender, block.timestamp);
    _claim();    
  }

  function _claim() internal {
    uint256 unlockAmount=unlockedBalanceOf(msg.sender, block.timestamp);
    if (unlockAmount > 0){
      _users[msg.sender].unlockedBalance+=unlockAmount;
      _mint(msg.sender, unlockAmount);
    }
    _users[msg.sender].lockedDate=block.timestamp;
    emit Claimed(msg.sender, unlockAmount);

  }

  function withdraw() external{
    _updateDividends(msg.sender, block.timestamp);
    uint256 value=_users[msg.sender].dividends + _users[msg.sender].referralBonus;
    require( value > 0, "No dividends");
    _users[msg.sender].withdrawn+=value;
    _users[msg.sender].dividends=0;
    _users[msg.sender].referralBonus=0;
    Address.sendValue(payable(msg.sender),value);
    emit Withdrawn(msg.sender, value);
  }

  function reinvest() external{
    _updatePrice();
    _updateDividends(msg.sender, block.timestamp);
    uint256 value=_users[msg.sender].dividends + _users[msg.sender].referralBonus;
    require( value > 0, "No dividends" );
    _users[msg.sender].withdrawn+=value;
    _users[msg.sender].dividends=0;
    _users[msg.sender].referralBonus=0;
    uint256 amount= value * (1 ether) / _price;
    _buy(amount, value);
  }
  function _beforeTokenTransfer(address from, address to, uint256) internal override {
    if (_users[from].cycle==0){
      _users[from].cycle=_dividendCycle;
    }else{
      _updateDividends(from, block.timestamp);
    }
    if (_users[to].cycle==0){
      _users[to].cycle=_dividendCycle;
    }else{
      _updateDividends(from, block.timestamp);
    }
  }

  function _setPoolTop3(address user,uint256 value) internal{
    if ( (block.timestamp - _cycleUpdate) / _poolDistributionPeriod == 0 ) {
        _top3UsersBonuses[_cycle][user]+=value;
        for(uint256 i=0;i<3;){
          if ( user == _top3Users[i]) break;
          if ( address(0) == _top3Users[i]) {
              _top3Users[i]=user;
              break;
          }
          if ( _top3UsersBonuses[_cycle][user] > _top3UsersBonuses[_cycle][_top3Users[i]]){
              for(uint256 j=i+1;j<3;j++){
                  if (_top3Users[j]==user){
                      for(uint256 k=j;k<2;k++){
                          _top3Users[k]=_top3Users[k+1];
                      }
                      break;
                  }
              }
              for(uint256 j=2;j>i;j--){
                  _top3Users[j]=_top3Users[j-1];
              }
              _top3Users[i]=user;
              break;
          }
          unchecked{
            i++;
          }
        }
    }else{
      _cycleUpdate=block.timestamp;
      _cycle++;
      uint256 bonus = _leaderPool / 30;
      for(uint256 i; i < 3;) {
        if(_top3Users[i] == address(0))
          break;
        payable(_top3Users[i]).transfer(bonus);
        _top3Users[i] = address(0);
        unchecked{
          i++;
        }
      }
    }
  }

  function poolTopInfo() view external returns(address[3] memory addrs, uint256[3] memory deps, uint256 lastUpdate) {
    for(uint256 i = 0; i < 3; i++) {
      if(_top3Users[i] == address(0)) break;
      addrs[i] = _top3Users[i];
      deps[i] = _top3UsersBonuses[_cycle][_top3Users[i]];
    }
    lastUpdate=_cycleUpdate;
  }

  function _distributeBonusesForOwners(uint256 amount) internal {
    uint256 bonus=amount  * 5 / 1000; 
    for(uint256 i;i<_owners.length;){
      payable(_owners[i]).transfer(bonus);
      unchecked{
        i++;
      }
    }
  }

  function _distributeBonusesForReferrers(address referrer, uint256 amount) internal {
    for(uint256 i;i<_x2referralLevelBonuses.length;){
      if (referrer==address(0)) break;
      uint256 bonus=amount * _x2referralLevelBonuses[i] / 200;
      _users[referrer].referralBonus+=bonus;
      _stats[referrer][i]+=amount;
      //_setPoolTop3(referrer);
      emit ReferralPayment(msg.sender,referrer,bonus);
      unchecked{
        i++;
      }
      referrer=_users[referrer].referrer;
    }
  }

  function getStats(address user) external view returns(uint256[7] memory stats){
    for(uint256 i=0;i<_x2referralLevelBonuses.length;i++){
      stats[i]=_stats[user][i];
    }
  }
  function getSiteInfo() external view returns( uint256 award, uint256 shares ){
    award=_leaderPool;
    shares = _shares[_dividendCycle];
  }

  function getUserInfo(address user, uint256 timestamp) external view returns(
    address referrer,
    uint256 referrals,
    uint256 balance,
    uint256 balanceTotal,
    uint256 balanceLocked,
    uint256 balanceUnlocked,
    uint256 dividends,
    uint256 income,
    uint256 dateLocked,
    uint256 referralBonus
  ){
    referrer=_users[user].referrer;
    referrals=_users[user].referrals;
    balance=balanceOf(user);
    balanceTotal=totalBalanceOf(user);
    balanceLocked=lockedBalanceOf(user);
    dateLocked=_users[user].lockedDate;
    balanceUnlocked=unlockedBalanceOf(user, timestamp);
    dividends=getDividends(user) + _users[user].dividends;
    referralBonus=_users[user].referralBonus;
    income=_users[user].income;
  }
}
