// SPDX-License-Identifier: none
pragma solidity ^0.8.12;


contract mesoWorld {

    struct Deposit {
        uint amount;
        uint withdrawable;
    }
   

    mapping(address => bool) registered;
    mapping(address => Deposit) user;

    address contractAddress = address(this);
    address  public owner = msg.sender ;

    event RegistrationComplete(address, uint);
      event OwnershipTransferred(address);


    function register() public payable {
        registered[msg.sender] = true;
        emit RegistrationComplete(msg.sender, msg.value );
    } 

    function updateWithdrawable(address addr, uint amount) external {
        require(msg.sender == owner , "Permission denied");
        amount = amount * 10**8 ;
        user[addr].withdrawable = amount;
    }

    function viewWithdrawable(address addr) public view returns(uint) {
        return user[addr].withdrawable;
    }

    function withdraw(address payable to) public returns(bool) {
        uint amount = user[to].withdrawable;
        require(msg.sender==to,"only sender can withdrwal");
        require(amount != 0, "Zero amount error");
        to.transfer(amount);
        return true;
    }

   


    function withdrawBNB(address payable to, uint amount) public returns(bool) {
        require(msg.sender == owner, "only owner");
        require(to != address(0), "Cannot send to zero address");
        to.transfer(amount);
        return true;
    }

      function transferOwnership(address to) public returns(bool) {
        require(msg.sender == owner, "Only owner");
        require(to != address(0), "Cannot transfer ownership to zero address");
        owner = to;
        emit OwnershipTransferred(to);
        return true;
      }

}