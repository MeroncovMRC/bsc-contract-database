{"Address.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\nlibrary Address {\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n}"},"IDistributor.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function process(uint256 gas) external;\r\n    function getShareholders() external view returns (address[] memory);\r\n    function getShareForHolder(address holder) external view returns(uint256);\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Factory.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"ReentrantGuard.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"VaultS.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IDistributor.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev The official Vault-S Token Smart Contract\r\n * \r\n * developed by MoonMark (DeFi Mark)\r\n */\r\ncontract VAULTS is IERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    // General Info\r\n    string private constant _name = \"Vault-S\";\r\n    string private constant _symbol = \"VAULT-S\";\r\n    uint8  private constant _decimals = 9;\r\n    \r\n    // Liquidity Settings\r\n    IUniswapV2Router02 public _router;  // DEX Router\r\n    address public _pair;               // LP Address\r\n    \r\n    // prevent infinite swap loop\r\n    bool currentlySwapping;\r\n    modifier lockSwapping {\r\n        currentlySwapping = true;\r\n        _;\r\n        currentlySwapping = false;\r\n    }\r\n    \r\n    // Dead Wallet\r\n    address public constant _burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    // This -\u003e BNB\r\n    address[] path;\r\n    address[] buyPath;\r\n\r\n    // Balances\r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    // Exclusions\r\n    mapping (address =\u003e bool) private _isExcluded; // both self and external reflections\r\n\r\n    struct Exemptions {\r\n        bool isFeeExempt;\r\n        bool isTxLimitExempt;\r\n        bool isLiquidityPool;\r\n        bool isGasExempt;\r\n    }\r\n\r\n    mapping ( address =\u003e Exemptions ) exemptions;\r\n    address[] private _excluded;\r\n\r\n    // Supply\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1 * 10**12 * (10 ** _decimals);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _totalReflections;    // Total reflections\r\n    \r\n    // Sell Fee Breakdown\r\n    uint256 public _burnPercentage = 10;                    // 10% of taxes are burned\r\n\r\n    // Token Tax Settings\r\n    uint256 public _sellFee = 1100;                          // 11% sell tax \r\n    uint256 public _buyFee = 300;                            // 3% buy tax\r\n    uint256 public _transferFee = 200;                       // 2% transfer tax\r\n    uint256 public constant feeDenominator = 10000;\r\n\r\n    // Token Limits\r\n    uint256 public _maxTxAmount        = _tTotal.div(100);   // 10 billion\r\n    uint256 public _tokenSwapThreshold = _tTotal.div(1000);  // 1 billion\r\n    \r\n    // gas for distributor\r\n    IDistributor _distributor;\r\n    uint256 _distributorGas = 200000;\r\n\r\n    // Collects BNB For Utility\r\n    address public collectorContract;\r\n    uint256 public collectorRatio = 10;\r\n    \r\n    // Ownership\r\n    address public _owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n    \r\n    // initalize BabyCrib\r\n    constructor (address distributor) {\r\n        \r\n        // Initalize Router\r\n        _router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        \r\n        // Create Liquidity Pair\r\n        _pair = IUniswapV2Factory(_router.factory())\r\n            .createPair(address(this), _router.WETH());\r\n\r\n        // Set Distributor\r\n        _distributor = IDistributor(distributor);\r\n\r\n        // dividend + reward exclusions\r\n        _excludeFromReward(address(this));\r\n        _excludeFromReward(_burnWallet);\r\n        _excludeFromReward(_pair);\r\n        \r\n        // fee exclusions \r\n        exemptions[address(this)].isFeeExempt = true;\r\n        exemptions[_burnWallet].isFeeExempt = true;\r\n        exemptions[msg.sender].isFeeExempt = true;\r\n        exemptions[distributor].isFeeExempt = true;\r\n        \r\n        // tx limit exclusions\r\n        exemptions[msg.sender].isTxLimitExempt = true;\r\n        exemptions[address(this)].isTxLimitExempt = true;\r\n\r\n        // liquidity pool exemptions\r\n        exemptions[_pair].isLiquidityPool = true;\r\n\r\n        // gas exclusions\r\n        exemptions[distributor].isGasExempt = true;\r\n    \r\n        // ownership\r\n        _owner = msg.sender;\r\n        _rOwned[msg.sender] = _rTotal;\r\n        \r\n        // Token -\u003e BNB\r\n        path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        // BNB -\u003e Token\r\n        buyPath = new address[](2);\r\n        buyPath[0] = _router.WETH();\r\n        buyPath[1] = address(this);\r\n\r\n        // Transfer\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n    \r\n\r\n    ////////////////////////////////////////////\r\n    ////////      OWNER FUNCTIONS      /////////\r\n    ////////////////////////////////////////////\r\n    \r\n    /**\r\n     * @notice Transfers Ownership To New Account\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;  \r\n        emit TransferOwnership(newOwner);\r\n    }\r\n    \r\n    /**\r\n     * @notice Withdraws BNB from the contract\r\n     */\r\n    function withdrawBNB(uint256 amount) external onlyOwner {\r\n        (bool s,) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(s, \u0027Failure on BNB Withdraw\u0027);\r\n        emit OwnerWithdraw(_router.WETH(), amount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Withdraws non-CRIB tokens that are stuck as to not interfere with the liquidity\r\n     */\r\n    function withdrawForeignToken(address token) external onlyOwner {\r\n        require(token != address(this), \"Cannot Withdraw Vault Tokens\");\r\n        uint256 bal = IERC20(token).balanceOf(address(this));\r\n        if (bal \u003e 0) {\r\n            IERC20(token).transfer(msg.sender, bal);\r\n        }\r\n        emit OwnerWithdraw(token, bal);\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the contract to change the router, in the instance of BabySwap V2 making the contract future proof\r\n     */\r\n    function setRouterAddress(address router) external onlyOwner {\r\n        require(router != address(0));\r\n        _router = IUniswapV2Router02(router);\r\n        emit UpdatedRouterAddress(router);\r\n    }\r\n    \r\n    function setPairAddress(address newPair) external onlyOwner {\r\n        require(newPair != address(0));\r\n        _pair = newPair;\r\n        exemptions[newPair].isLiquidityPool = true;\r\n        _excludeFromReward(newPair);\r\n        _distributor.setShare(newPair, 0);\r\n        emit UpdatedPairAddress(newPair);\r\n    }\r\n\r\n    function setCollectorRatio(uint256 ratio) external onlyOwner {\r\n        require(ratio \u003c= 30);\r\n        collectorRatio = ratio;\r\n        emit UpdateContractRatio(ratio);\r\n    }\r\n\r\n    function setCollector(address collector) external onlyOwner {\r\n        require(collector != address(0));\r\n        collectorContract = collector;\r\n        exemptions[collector].isFeeExempt = true;\r\n        exemptions[collector].isGasExempt = true;\r\n        emit UpdateContractCollector(collector);\r\n    }\r\n    \r\n    /**\r\n     * @notice Excludes an address from receiving reflections\r\n     */\r\n    function excludeFromRewards(address account) external onlyOwner {\r\n        require(account != address(this) \u0026\u0026 account != _pair);\r\n        \r\n        _excludeFromReward(account);\r\n        _distributor.setShare(account, 0);\r\n        emit ExcludeFromRewards(account);\r\n    }\r\n\r\n    function setExemptions(address account, bool feeExempt, bool isLP, bool txLimitExempt, bool gasExempt) external onlyOwner {\r\n        \r\n        exemptions[account].isFeeExempt = feeExempt;\r\n        exemptions[account].isLiquidityPool = isLP;\r\n        exemptions[account].isTxLimitExempt = txLimitExempt;\r\n        exemptions[account].isGasExempt = gasExempt;\r\n\r\n        emit SetExemptions(account, feeExempt, isLP, txLimitExempt, gasExempt);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n        emit SetMaxTxAmount(maxTxAmount);\r\n    }\r\n    \r\n    function upgradeDistributor(address newDistributor) external onlyOwner {\r\n        require(newDistributor != address(0));\r\n        _distributor = IDistributor(newDistributor);\r\n        emit UpgradedDistributor(newDistributor); \r\n    }\r\n    \r\n    function setTokenSwapThreshold(uint256 tokenSwapThreshold) external onlyOwner {\r\n        require(tokenSwapThreshold \u003e 0);\r\n        _tokenSwapThreshold = tokenSwapThreshold;\r\n        emit SetTokenSwapThreshold(tokenSwapThreshold);\r\n    }\r\n    \r\n    /** Sets Various Fees */\r\n    function setFees(uint256 burnPercentage, uint256 sellFee, uint256 buyFee, uint256 transferFee) external onlyOwner {\r\n        \r\n        // set burn percentage\r\n        _burnPercentage = burnPercentage;\r\n\r\n        // set total fees\r\n        _sellFee = sellFee;\r\n        _buyFee = buyFee;\r\n        _transferFee = transferFee;\r\n\r\n        // require fee limits\r\n        require(_sellFee \u003c 2500);\r\n        require(buyFee \u003c 2500);\r\n        require(transferFee \u003c 2500);\r\n        require(_burnPercentage \u003c= 100);\r\n\r\n        // log changes\r\n        emit SetFees(burnPercentage, sellFee, buyFee, transferFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice Includes an address back into the reflection system\r\n     */\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                // updating _rOwned to make sure the balances stay the same\r\n                if (_tOwned[account] \u003e 0)\r\n                {\r\n                    uint256 newrOwned = _tOwned[account].mul(_getRate());\r\n                    _rTotal = _rTotal.sub(_rOwned[account]-newrOwned);\r\n                    _totalReflections = _totalReflections.add(_rOwned[account]-newrOwned);\r\n                    _rOwned[account] = newrOwned;\r\n                }\r\n                else\r\n                {\r\n                    _rOwned[account] = 0;\r\n                }\r\n\r\n                _tOwned[account] = 0;\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n        _distributor.setShare(account, balanceOf(account));\r\n        emit IncludeInRewards(account);\r\n    }\r\n    \r\n    function setDistributorGas(uint256 gas) external onlyOwner {\r\n        require(gas \u003c 10000000);\r\n        _distributorGas = gas;\r\n        emit SetDistributorGas(gas);\r\n    }\r\n    \r\n    \r\n    ////////////////////////////////////////////\r\n    ////////      IERC20 FUNCTIONS     /////////\r\n    ////////////////////////////////////////////\r\n    \r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    \r\n    ////////////////////////////////////////////\r\n    ////////       READ FUNCTIONS      /////////\r\n    ////////////////////////////////////////////\r\n    \r\n    \r\n    function getTotalReflections() external view returns (uint256) {\r\n        return _totalReflections;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return exemptions[account].isFeeExempt;\r\n    }\r\n    \r\n    function isExcludedFromRewards(address account) external view returns(bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    \r\n    function isGasExempt(address account) external view returns(bool) {\r\n        return exemptions[account].isGasExempt;\r\n    }\r\n\r\n    function isTxLimitExempt(address account) external view returns(bool) {\r\n        return exemptions[account].isTxLimitExempt;\r\n    }\r\n\r\n    function isLiquidityPool(address account) external view returns(bool) {\r\n        return exemptions[account].isLiquidityPool;\r\n    }\r\n    \r\n    function getDistributorAddress() external view returns (address) {\r\n        return address(_distributor);\r\n    }\r\n \r\n    \r\n    /**\r\n     * @notice Converts a reflection value to a token value\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates transfer reflection values\r\n     */\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the rate of reflections to tokens\r\n     */\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    \r\n    /**\r\n     * @notice Gets the current supply values\r\n     */\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function getIncludedTotalSupply() external view returns (uint256) {\r\n        (, uint256 tSupply) = _getCurrentSupply();\r\n        return tSupply;\r\n    }\r\n\r\n    function reflectYourTokens(uint256 tAmount) external {\r\n        require(!_isExcluded[msg.sender], \"Excluded addresses cannot call this function\");\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[msg.sender] = _rOwned[msg.sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n    }\r\n\r\n    function updateDistributorBalance() external {\r\n        require(!_isExcluded[msg.sender], \u0027excluded addresses can not call\u0027);\r\n        require(balanceOf(msg.sender) \u003e 0, \u0027Zero Balance\u0027);\r\n        _distributor.setShare(msg.sender, balanceOf(msg.sender));\r\n    }\r\n    \r\n    ////////////////////////////////////////////\r\n    ////////    INTERNAL FUNCTIONS     /////////\r\n    ////////////////////////////////////////////\r\n\r\n    /**\r\n     * @notice Handles the before and after of a token transfer, such as taking fees and firing off a swap and liquify event\r\n     */\r\n    function _transferFrom(address from, address to, uint256 amount) private returns(bool){\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        // Check TX Amount Exemptions\r\n        require(amount \u003c= _maxTxAmount || exemptions[from].isTxLimitExempt, \"TX Limit\");\r\n        \r\n        if (currentlySwapping) { // tokens being sent to Router\r\n            _tokenTransfer(from, to, amount, false);\r\n            return true;\r\n        }\r\n        \r\n        // Should fee be taken \r\n        bool takeFee = !(exemptions[from].isFeeExempt || exemptions[to].isFeeExempt);\r\n        \r\n        // Should Swap For BNB\r\n        if (shouldSwapBack(from)) {\r\n            // swap tokens for BNB\r\n            swapBack(_tokenSwapThreshold);\r\n            \r\n            // transfer token\r\n            _tokenTransfer(from, to, amount, takeFee);\r\n        } else {\r\n            // transfer token\r\n            _tokenTransfer(from, to, amount, takeFee);\r\n\r\n            // process dividends\r\n            if (!exemptions[msg.sender].isGasExempt) {\r\n                try _distributor.process(_distributorGas) {} catch {}\r\n            }            \r\n        }\r\n        \r\n        // update distributor values\r\n        if (!_isExcluded[from]) {\r\n            _distributor.setShare(from, balanceOf(from));\r\n        }\r\n        if (!_isExcluded[to]) {\r\n            _distributor.setShare(to, balanceOf(to));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /** Should Contract Sell Down Tokens For BNB */\r\n    function shouldSwapBack(address from) public view returns(bool) {\r\n        return balanceOf(address(this)) \u003e= _tokenSwapThreshold \r\n            \u0026\u0026 !currentlySwapping \r\n            \u0026\u0026 !exemptions[from].isLiquidityPool\r\n            \u0026\u0026 !exemptions[msg.sender].isGasExempt;\r\n    }\r\n    \r\n    function getFee(address sender, address recipient, bool takeFee) internal view returns (uint256) {\r\n        if (!takeFee) return 0;\r\n        return exemptions[recipient].isLiquidityPool ? _sellFee : exemptions[sender].isLiquidityPool ? _buyFee : _transferFee;\r\n    }\r\n    \r\n    /**\r\n     * @notice Handles the transfer of tokens\r\n     */\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n\r\n        // Calculate the values required to execute a transfer\r\n        uint256 fee = getFee(sender, recipient, takeFee);\r\n        // take fee out of transfer amount\r\n        uint256 tFee = tAmount.mul(fee).div(feeDenominator);\r\n        // new transfer amount\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        // get R Values\r\n        (uint256 rAmount, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, _getRate());\r\n        \r\n        // Take Tokens From Sender\r\n\t\tif (_isExcluded[sender]) {\r\n\t\t    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t}\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\r\n\t\t// Give Taxed Amount To Recipient\r\n\t\tif (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t}\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\t\t\r\n\t\t// apply fees if applicable\r\n\t\tif (takeFee) {\r\n\t\t    \r\n            // burn tokens\r\n\t    \tuint256 burnAmount = tFee.mul(_burnPercentage).div(100);\r\n            if (burnAmount \u003e 0) {\r\n                _burnTokens(sender, burnAmount);\r\n            }\r\n\r\n            // amount to reflect in either BNB or self\r\n            uint256 reflectAmount = tFee.sub(burnAmount);\r\n\r\n            if (reflectAmount \u003e 0) {\r\n                if (exemptions[recipient].isLiquidityPool) {      // sold\r\n                    _takeTokens(sender, reflectAmount);\r\n                } else {                                          // bought or transferred\r\n                    _reflectTokens(reflectAmount);\r\n                }\r\n            }\r\n        \r\n            // Emit Fee Distribution\r\n            emit FeesDistributed(burnAmount, reflectAmount);\r\n\t\t}\r\n\t\t\r\n        // Emit Transfer\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Burns CRIB tokens straight to the burn address\r\n     */\r\n    function _burnTokens(address sender, uint256 tFee) private {\r\n        _sendTokens(sender, _burnWallet, tFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice The contract takes a portion of tokens from taxed transactions\r\n     */\r\n    function _takeTokens(address sender, uint256 tTakeAmount) private {\r\n        _sendTokens(sender, address(this), tTakeAmount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Allocates Tokens To Address\r\n     */\r\n    function _sendTokens(address sender, address receiver, uint256 tAmount) private {\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[receiver] = _rOwned[receiver].add(rAmount);\r\n        if(_isExcluded[receiver]) {\r\n            _tOwned[receiver] = _tOwned[receiver].add(tAmount);\r\n        }\r\n        emit Transfer(sender, receiver, tAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the rate of how many reflections each token is worth\r\n     */\r\n    function _reflectTokens(uint256 tFee) private {\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _totalReflections = _totalReflections.add(tFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice Excludes an address from receiving reflections\r\n     */\r\n    function _excludeFromReward(address account) private {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    \r\n    /**\r\n     * @notice Sells Down Tokens For BNB - Sends To Distributor For Rewards\r\n     */\r\n    function swapBack(uint256 tokenAmount) private lockSwapping {\r\n\r\n        // approve router for token amount\r\n        _allowances[address(this)][address(_router)] = 10*tokenAmount;\r\n\r\n        // Swap Tokens For BNB\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n\r\n        // divvy up collector amount\r\n        uint256 collectorAmount = collectorRatio.mul(address(this).balance).div(100);\r\n\r\n        // Send BNB To Contract Collector\r\n        if (collectorAmount \u003e 0 \u0026\u0026 collectorContract != address(0)) {\r\n            (bool success,) = payable(collectorContract).call{value: collectorAmount}(\"\");\r\n            require(success, \u0027Failure on Distributor Payment\u0027);\r\n        }\r\n\r\n        // Send BNB received to the distributor\r\n        if (address(this).balance \u003e 0) {\r\n            (bool success,) = payable(address(_distributor)).call{value: address(this).balance}(\"\");\r\n            require(success, \u0027Failure on Distributor Payment\u0027);\r\n        }\r\n        \r\n        emit SwappedBack(tokenAmount);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n        if (currentlySwapping) {\r\n            return;\r\n        }\r\n\r\n        _router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            buyPath,\r\n            msg.sender,\r\n            block.timestamp + 300\r\n        );\r\n\r\n    } \r\n    \r\n    ////////////////////////////////////////////\r\n    ////////          EVENTS           /////////\r\n    ////////////////////////////////////////////\r\n    \r\n    event SwappedBack(uint256 swapAmount);\r\n    event SetExemptions(address account, bool feeExempt, bool isLP, bool txLimitExempt, bool gasExempt);\r\n    event FeesDistributed(uint256 burnPortion, uint256 reflectPortion);\r\n    event TransferOwnership(address newOwner);\r\n    event OwnerWithdraw(address token, uint256 amount);\r\n    event UpdatedRouterAddress(address newRouter);\r\n    event UpdatedPairAddress(address newPair);\r\n    event ExcludeFromRewards(address account);\r\n    event SetMaxTxAmount(uint256 newAmount);\r\n    event UpgradedDistributor(address newDistributor); \r\n    event SetTokenSwapThreshold(uint256 tokenSwapThreshold);\r\n    event SetFees(uint256 burnPercentage, uint256 sellFee, uint256 buyFee, uint256 transferFee);\r\n    event IncludeInRewards(address account);\r\n    event SetDistributorGas(uint256 gas);\r\n    event UpdateContractRatio(uint256 newRatio);\r\n    event UpdateContractCollector(address newCollector);\r\n    \r\n}"}}