pragma solidity ^0.8.0;

contract HAM {

    string public name = "Hamster Coin";
    string public symbol = "HAM";
    uint256 public decimals = 6;
    uint256 public totalSupply = 0;
    uint256 public capForPeriod = 42000000000000;
    uint256 public mintingAmount = 1000000;
    address private constant VB_ADDRESS = 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) internal allowed;

    address private lastTransferFrom;
    uint256 private lastTransferTime;

    constructor() {
        _mint(VB_ADDRESS, 14000000000000);
        _mint(msg.sender, 14000000000000);
    }
 
    function _mint(address _to, uint256 _amount) private returns (bool) {
        balances[_to] = balances[_to] + _amount;
        totalSupply = totalSupply + _amount;
        emit Transfer(address(0), _to, _amount);
        return true;
    }
 
    function _mate(address _sender, address _receiver) private returns (bool) {
        if(block.timestamp <= lastTransferTime + 60 seconds
           && lastTransferFrom != address(0) 
           && lastTransferFrom != _sender
           && lastTransferFrom != _receiver
        ) {
            _mint(lastTransferFrom, mintingAmount);
            _mint(_sender, mintingAmount);
            lastTransferFrom = address(0);
            _halve();
        }else{
            lastTransferTime = block.timestamp;
            lastTransferFrom = msg.sender;
        }
        return true;
    }
  
    function _halve() private returns (bool) {
        if(totalSupply > capForPeriod) {
            mintingAmount = mintingAmount / 2;
            capForPeriod = capForPeriod / 2  + 28000000000000;
        }
        return true;
    }

    function transfer(address _to, uint256 _amount) public returns (bool) {
        require(_amount <= balances[msg.sender], 'insufficient balance');

        balances[msg.sender] = balances[msg.sender] - _amount;
        balances[_to] = balances[_to] + _amount;

        _mate(msg.sender, _to);

        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {
        require(_amount <= balances[_from], 'insufficient balance');
        require(_amount <= allowed[_from][msg.sender], 'insufficient allowance');

        balances[_from] = balances[_from] - _amount;
        balances[_to] = balances[_to] + _amount;
        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount;

        _mate(_from, _to);

        emit Transfer(_from, _to, _amount);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}