// SPDX-License-Identifier: MIT
pragma solidity >= 0.6.6 < 0.7.0;



// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}


interface IrabbitsRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    
    function swapExactTokensForTokens(
        address kolAddr,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        address kolAddr,
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(address kolAddr, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(address kolAddr, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(address kolAddr, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(address kolAddr, uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



interface IrabbitsRouter02 is IrabbitsRouter01 {
    

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


//IrabbitsRouter02
interface IrabbitsRouterFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;

    function INIT_CODE_PAIR_HASH() external view returns (bytes32);
}


// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)

library SafeMath {
    function add(uint x, uint y) internal pure returns (uint z) {
        require((z = x + y) >= x, 'ds-math-add-overflow');
    }

    function sub(uint x, uint y) internal pure returns (uint z) {
        require((z = x - y) <= x, 'ds-math-sub-underflow');
    }

    function mul(uint x, uint y) internal pure returns (uint z) {
        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
    }
}




interface IrabbitsPair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}





library RabbitsLibrary {
    using SafeMath for uint;

    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, 'RabbitsLibrary: IDENTICAL_ADDRESSES');
        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), 'RabbitsLibrary: ZERO_ADDRESS');
    }

    // calculates the CREATE2 address for a pair without making any external calls
    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(uint(keccak256(abi.encodePacked(
                hex'ff',
                factory,
                keccak256(abi.encodePacked(token0, token1)),
                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash
            ))));
    }

    // fetches and sorts the reserves for a pair
    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
        (address token0,) = sortTokens(tokenA, tokenB);
        pairFor(factory, tokenA, tokenB);
        (uint reserve0, uint reserve1,) = IrabbitsPair(pairFor(factory, tokenA, tokenB)).getReserves();
        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
    }

    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
        require(amountA > 0, 'RabbitsLibrary: INSUFFICIENT_AMOUNT');
        require(reserveA > 0 && reserveB > 0, 'RabbitsLibrary: INSUFFICIENT_LIQUIDITY');
        amountB = amountA.mul(reserveB) / reserveA;
    }

    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
        require(amountIn > 0, 'RabbitsLibrary: INSUFFICIENT_INPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'RabbitsLibrary: INSUFFICIENT_LIQUIDITY');
        uint amountInWithFee = amountIn.mul(9975);
        uint numerator = amountInWithFee.mul(reserveOut);
        uint denominator = reserveIn.mul(10000).add(amountInWithFee);
        amountOut = numerator / denominator;
    }

    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
        require(amountOut > 0, 'RabbitsLibrary: INSUFFICIENT_OUTPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'RabbitsLibrary: INSUFFICIENT_LIQUIDITY');
        uint numerator = reserveIn.mul(amountOut).mul(10000);
        uint denominator = reserveOut.sub(amountOut).mul(9975);
        amountIn = (numerator / denominator).add(1);
    }

    // performs chained getAmountOut calculations on any number of pairs
    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
        require(path.length >= 2, 'RabbitsLibrary: INVALID_PATH');
        amounts = new uint[](path.length);
        amounts[0] = amountIn;
        for (uint i; i < path.length - 1; i++) {
            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
        }
    }

    // performs chained getAmountIn calculations on any number of pairs
    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
        require(path.length >= 2, 'RabbitsLibrary: INVALID_PATH');
        amounts = new uint[](path.length);
        amounts[amounts.length - 1] = amountOut;
        for (uint i = path.length - 1; i > 0; i--) {
            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
        }
    }
}



interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}



interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}




contract rabbitsRouter is IrabbitsRouter02 {
    using SafeMath for uint;

    uint tax_rate;
    uint preachingRate;
    address feeAddr;
    address owner;

    
    mapping (address => address) public kol;
    mapping (address => uint) public influence;

    address public immutable override factory;
    address public immutable override WETH;

    event Withdrawal(address token, address send, uint amount);
    event Swap(address send, address tokenA, address tokenB, uint amount);
    event RemoveLiquidity(address send, address tokenA, address tokenB, uint liquidity);
    event Rate(address send, uint fee, uint preacher);
    event Destination(address send, address Router, address Factory);
    event OwnershipTransferred(address _owner, address newOwner);
    event FeeReceivingChange(address sender, address feeAddress);

    modifier ensure(uint deadline) {
        require(deadline >= block.timestamp, 'RabbitsRouter: EXPIRED');
        _;
    }

    constructor() public {
        factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
        WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        tax_rate = 990;
        preachingRate = 500;
        feeAddr = msg.sender;
        owner = msg.sender;
    }

    receive() external payable {
        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }

    function rootWithdrawal(address token, uint amount) external onlyOwner returns(bool) {
        emit Withdrawal(token, msg.sender, amount);
        if (token == WETH) {
            msg.sender.transfer(amount);
            return true;
        }
        IERC20(token).transfer(msg.sender, amount);
        return true;
    }

    function getInfluence(address sponsor) public view returns(uint) {
        return influence[sponsor];
    }

    
    function getReferrer(address sponsor) public view returns(address) {
        return kol[sponsor];
    }


    function getfee() public view returns(uint fee, uint PreachingRate) {
        return (tax_rate, preachingRate);
    }

    
    function getfactory() public view returns(address) {
        return factory;
    }

    
    function getOwner() public view returns (address) {
        return owner;
    }

    function changeRate(uint fee, uint preacher) external onlyOwner {
        require(fee > 880 && fee <= 999, "Set rates over a fixed area");
        tax_rate = fee; 
        preachingRate = preacher; 
        emit Rate(msg.sender, fee, preacher);
    }

    

    function _transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function feeReceivingChange(address feeAddress) external onlyOwner {
        require(feeAddress != address(0), "Ownable: new owner is the zero address");
        feeAddr = feeAddress;
        emit FeeReceivingChange(msg.sender, feeAddress);
    }

    
    function fee(address kolAddr, address inputToken, address initiator, uint amount) internal returns(uint) {
        uint after_tax = amount.mul(tax_rate) / 1000; 
        uint tax = amount.sub(after_tax); 
        uint kolFee = tax.mul(preachingRate) / 1000; 
        uint operatorFee = tax.sub(kolFee); 

        if (kol[initiator] == address(0))  kol[initiator]=kolAddr;
        influence[kolAddr].add(1);
       
        if (inputToken == WETH) {
            TransferHelper.safeTransferETH(kol[initiator], kolFee);
            TransferHelper.safeTransferETH(feeAddr, operatorFee);
            return after_tax;
        } 

        TransferHelper.safeTransferFrom(inputToken, initiator, kol[initiator], kolFee);
        TransferHelper.safeTransferFrom(inputToken, initiator, feeAddr, operatorFee);
        return after_tax;
        
    }

    

    // **** SWAP ****
    // requires the initial amount to have already been sent to the first pair
    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = RabbitsLibrary.sortTokens(input, output);
            uint amountOut = amounts[i + 1];
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
            address to = i < path.length - 2 ? RabbitsLibrary.pairFor(factory, output, path[i + 2]) : _to;
            IrabbitsPair(RabbitsLibrary.pairFor(factory, input, output)).swap(
                amount0Out, amount1Out, to, new bytes(0)
            );
        }
    }

    
    function swapExactTokensForTokens(address kolAddr, uint amountIn, uint amountOutMin, address[] calldata path, address to,uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
        uint _amountIn = fee(kolAddr, path[0], msg.sender, amountIn); 
        amounts = RabbitsLibrary.getAmountsOut(factory, _amountIn, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, to);
    }

    
    function swapTokensForExactTokens(address kolAddr, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
        amounts = RabbitsLibrary.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= amountInMax, 'RabbitsRouter: EXCESSIVE_INPUT_AMOUNT'); 
        uint _amountIn = fee(kolAddr, path[0], msg.sender, amounts[0]);
        uint[] memory ammountFee = RabbitsLibrary.getAmountsOut(factory, _amountIn, path);

        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), ammountFee[0]
        );
        _swap(amounts, path, to);
    }

    
    function swapExactETHForTokens(address kolAddr, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        payable
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[0] == WETH, 'RabbitsRouter: INVALID_PATH');
        uint _value = fee(kolAddr, WETH, msg.sender, msg.value);
        amounts = RabbitsLibrary.getAmountsOut(factory, _value, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).deposit{value: amounts[0]}();
        assert(IWETH(WETH).transfer(RabbitsLibrary.pairFor(factory, path[0], path[1]), amounts[0]));
        _swap(amounts, path, to);
    }

    
    function swapTokensForExactETH(address kolAddr, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[path.length - 1] == WETH, 'RabbitsRouter: INVALID_PATH');
        amounts = RabbitsLibrary.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= amountInMax, 'RabbitsRouter: EXCESSIVE_INPUT_AMOUNT');
        uint _amounts = fee(kolAddr, path[0], msg.sender, amounts[0]);

        uint[] memory amountFee = RabbitsLibrary.getAmountsOut(factory, _amounts, path);
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), amountFee[0]
        );
        _swap(amountFee, path, address(this));
        IWETH(WETH).withdraw(amountFee[amountFee.length - 1]);
        TransferHelper.safeTransferETH(to, amountFee[amountFee.length - 1]);
    }

    function swapExactTokensForETH(address kolAddr, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[path.length - 1] == WETH, 'RabbitsRouter: INVALID_PATH');
        uint _amountIn = fee(kolAddr, path[0], msg.sender, amountIn);
        amounts = RabbitsLibrary.getAmountsOut(factory, _amountIn, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, address(this));
        IWETH(WETH).withdraw(amounts[amounts.length - 1]);
        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
    }


    function swapETHForExactTokens(address kolAddr, uint amountOut, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        payable
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[0] == WETH, 'RabbitsRouter: INVALID_PATH');
        amounts = RabbitsLibrary.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= msg.value, 'RabbitsRouter: EXCESSIVE_INPUT_AMOUNT');
        uint _amounts = fee(kolAddr, WETH, msg.sender, amounts[0]);
        uint[] memory amountFee = RabbitsLibrary.getAmountsOut(factory, _amounts, path);
        IWETH(WETH).deposit{value: amounts[0]}();
        assert(IWETH(WETH).transfer(RabbitsLibrary.pairFor(factory, path[0], path[1]), amountFee[0]));
        _swap(amountFee, path, to);
        // refund dust eth, if any
        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
    }

    // **** SWAP (supporting fee-on-transfer tokens) ****
    // requires the initial amount to have already been sent to the first pair
    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = RabbitsLibrary.sortTokens(input, output);
            IrabbitsPair pair = IrabbitsPair(RabbitsLibrary.pairFor(factory, input, output));
            uint amountInput;
            uint amountOutput;
            { // scope to avoid stack too deep errors
            (uint reserve0, uint reserve1,) = pair.getReserves();
            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);
            amountOutput = RabbitsLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);
            }
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));
            address to = i < path.length - 2 ? RabbitsLibrary.pairFor(factory, output, path[i + 2]) : _to;
            pair.swap(amount0Out, amount1Out, to, new bytes(0));
        }
    }

   
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) {
      
      uint _amountIn = fee(kolAddr, path[0], msg.sender, amountIn);
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), _amountIn
        );
        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    )
        external
        virtual
        override
        payable
        ensure(deadline)
    {
        require(path[0] == WETH, 'RabbitsRouter: INVALID_PATH');
        uint amountIn = msg.value;
        IWETH(WETH).deposit{value: amountIn}();
        uint _value = fee(kolAddr, WETH, msg.sender, msg.value);
        
        assert(IWETH(WETH).transfer(RabbitsLibrary.pairFor(factory, path[0], path[1]), _value));
        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        address kolAddr,
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    )
        external
        virtual
        override
        ensure(deadline)
    {
        require(path[path.length - 1] == WETH, 'RabbitsRouter: INVALID_PATH');
        uint _value = fee(kolAddr, path[0], msg.sender,  amountIn); 
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, RabbitsLibrary.pairFor(factory, path[0], path[1]), _value
        );
        _swapSupportingFeeOnTransferTokens(path, address(this));
        uint amountOut = IERC20(WETH).balanceOf(address(this));
        require(amountOut >= amountOutMin, 'RabbitsRouter: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).withdraw(amountOut);
        TransferHelper.safeTransferETH(to, amountOut);
    }

    // **** LIBRARY FUNCTIONS ****
    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {
        return RabbitsLibrary.quote(amountA, reserveA, reserveB);
    }

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)
        public
        pure
        virtual
        override
        returns (uint amountOut)
    {
        return RabbitsLibrary.getAmountOut(amountIn, reserveIn, reserveOut);
    }

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)
        public
        pure
        virtual
        override
        returns (uint amountIn)
    {
        return RabbitsLibrary.getAmountIn(amountOut, reserveIn, reserveOut);
    }

    function getAmountsOut(uint amountIn, address[] memory path)
        public
        view
        virtual
        override
        returns (uint[] memory amounts)
    {
        return RabbitsLibrary.getAmountsOut(factory, amountIn, path);
    }

    function getAmountsIn(uint amountOut, address[] memory path)
        public
        view
        virtual
        override
        returns (uint[] memory amounts)
    {
        return RabbitsLibrary.getAmountsIn(factory, amountOut, path);
    }
}