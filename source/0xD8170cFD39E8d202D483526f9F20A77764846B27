
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: contracts/data/StructData.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

library StructData {
    // struct to store staked NFT information
    struct StakingData {
        uint256 stakeIndex;
        uint256 firstStakedTime;
        uint256 lastStakedTime;
        uint256 totalTokenAmountStaked;
        uint256 timeUnlockStake;
        bool isClaimed;
        bool isUnstaked;
    }
}


// File: contracts/stake/Staking.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "../data/StructData.sol";

contract Staking is Ownable {
    address private stakeToken;
    address private rewardToken;

    bool private reentrancyGuardForStake = false;
    bool private reentrancyGuardForUnstake = false;
    bool private reentrancyGuardForClaim = false;
    
    uint256 private beginStakeProgram = 1679097600; //18/03/2023 00h:00
    uint256 private lockPeriod = 30 days;    
    uint256 private stakedAmountRequireForReward = 100000;
    uint256 private rewardPerAccountFixed = 20;

    uint256 private totalStakedAmountAccumulate = 0;
    uint256 private totalStakedAmountRemaining = 0;
    // counter for stake
    using Counters for Counters.Counter;
    Counters.Counter private totalStakesCounter;
    uint256 private totalClaimableCounter = 0;
    mapping(address => bool) uniqueClaimer;
    mapping(address => bool) userUnstaked;

    // mapping to store staked information
    mapping(address => StructData.StakingData) private stakesData;

    event Stake(address indexed _staker, uint256 _amount, uint256 _timeStake);
    event Unstake(address indexed _staker, uint256 _amount, uint256 _timeUnstake);
    event Claim(address indexed _staker, uint256 _amount, uint256 _timeClaim);
    event ErrorLog(bytes message);

    modifier validStakeTime() {
        require(block.timestamp >= beginStakeProgram, "STAKING: THE PROGRAM NOT YET STARTED.");
        _;
    }

    modifier validUnstakeTime() {
        StructData.StakingData memory stakeInfo = stakesData[msg.sender];
        require(
            block.timestamp > stakeInfo.timeUnlockStake,
            "STAKING: IT IS NOT YET YOUR UNSTAKE TIME."
        );
        _;
    }

    constructor(address _stakeToken, address _rewardToken) {
        stakeToken = _stakeToken;
        rewardToken = _rewardToken;
    }

    /**
     * @dev function to get total token staked amount for an wallet
     */
    function setBeginStakePrograme(uint256 _newTimeBegin) public onlyOwner {
        require(_newTimeBegin >= beginStakeProgram, "STAKING: INVALID TIME.");
        beginStakeProgram = _newTimeBegin;
    }

    /**
     * @dev function to get total token staked amount for an wallet
     */
    function getAccumulateAmountStaked() public view returns (uint256) {
        return totalStakedAmountAccumulate;
    }

    /**
     * @dev function to get total token staked amount for an wallet
     */
    function getRemainingAmountStaked() public view returns (uint256) {
        return totalStakedAmountRemaining;
    }

    /**
     * @dev function to get fist time stake for an wallet
     * @param _userWallet user wallet
     */
    function getFirstTimeStake(address _userWallet) public view returns (uint256) {
        return stakesData[_userWallet].firstStakedTime;
    }

    /**
     * @dev function to get last time stake for an wallet
     * @param _userWallet user wallet
     */
    function getLastTimeStake(address _userWallet) public view returns (uint256) {
        return stakesData[_userWallet].lastStakedTime;
    }

    /**
     * @dev function to get total token staked amount for an wallet
     * @param _userWallet user wallet
     */
    function getUserTotalTokenAmountStaked(address _userWallet) public view returns (uint256) {
        if (!userUnstaked[_userWallet]) return stakesData[_userWallet].totalTokenAmountStaked;
        else return 0;
    }

    /**
     * @dev function to get claim status for an wallet
     * @param _userWallet user wallet
     */
    function isClaimedReward(address _userWallet) public view returns (bool) {
        return stakesData[_userWallet].isClaimed;
    }

    /**
     * @dev function to get unstake status for an wallet
     * @param _userWallet user wallet
     */
    function isUnstaked(address _userWallet) public view returns (bool) {
        return stakesData[_userWallet].isUnstaked;
    }

    /**
     * @dev get reward for an wallet
     */
    function getRewardForWallet(address _userWallet) public view returns (uint256) {
        StructData.StakingData memory stakeInfo = stakesData[_userWallet];
        require(!stakeInfo.isClaimed, "STAKING: ALREADY CLAIM.");
        uint256 rewardAvailable = 0;
        uint256 amountRequired = stakedAmountRequireForReward *
            (10 ** ERC20(stakeToken).decimals());
        if (stakeInfo.totalTokenAmountStaked >= amountRequired) {
            rewardAvailable = rewardPerAccountFixed * (10 ** ERC20(rewardToken).decimals());
        }
        return rewardAvailable;
    }

    /**
     * @dev get & set unstake time
     */
    function getUnlockTimeForStake(address _userWallet) public view returns (uint256) {
        return stakesData[_userWallet].timeUnlockStake;
    }

    /**
     * @dev function to get total reward token amount for all
     *
     */
    function getTotalRewardTokenAmount() public view returns (uint256) {
        return ERC20(rewardToken).balanceOf(address(this));
    }

    /**
     * @dev get stake counter
     */
    function getStakeCounter() public view returns (uint256) {
        return totalStakesCounter.current();
    }

    /**
     * @dev get stake claimable counter
     */
    function getClaimableStakeCounter() public view returns (uint256) {
        return totalClaimableCounter;
    }

    /**
     * @dev set stake counter
     */
    function nextStakeCounter() internal returns (uint256) {
        totalStakesCounter.increment();
        return totalStakesCounter.current();
    }

    /**
     * @dev stake function
     * @param _amount amount token want to stake
     */
    function stake(uint256 _amount) public validStakeTime {
        require(!reentrancyGuardForStake, "STAKING: REENTRANCY DETECTED.");
        reentrancyGuardForStake = true;
        require(getClaimableStakeCounter() < 500, "STAKING: MAXIMUM NUMBER OF PARTICIPANTS REACHED.");
        require(_amount > 0, "STAKING: INVALID AMOUNT STAKE.");
        require(
            ERC20(stakeToken).balanceOf(msg.sender) >= _amount,
            "STAKING: INSSUFFICIENT FUNDS TO STAKE."
        );
        require(
            ERC20(stakeToken).allowance(msg.sender, address(this)) >= _amount,
            "STAKING: NEED APPROVE FIRST."
        );
        require(!userUnstaked[msg.sender], "STAKING: YOU CAN PARTICIPATE ONCE TIME.");
        try ERC20(stakeToken).transferFrom(msg.sender, address(this), _amount) {
            // Update total stake amount for all user
            totalStakedAmountAccumulate += _amount;
            totalStakedAmountRemaining += _amount;
            // Update stakes data for user
            StructData.StakingData memory stakeInfo = stakesData[msg.sender];
            if (stakeInfo.stakeIndex > 0) {
                uint256 currentUserStakeAmount = stakeInfo.totalTokenAmountStaked;
                stakesData[msg.sender].lastStakedTime = block.timestamp;
                stakesData[msg.sender].totalTokenAmountStaked = currentUserStakeAmount + _amount;
                stakesData[msg.sender].timeUnlockStake = block.timestamp + lockPeriod;
            } else {
                //create new
                stakesData[msg.sender].stakeIndex = nextStakeCounter();
                stakesData[msg.sender].firstStakedTime = block.timestamp;
                stakesData[msg.sender].lastStakedTime = block.timestamp;
                stakesData[msg.sender].totalTokenAmountStaked = _amount;
                stakesData[msg.sender].timeUnlockStake = block.timestamp + lockPeriod;
                stakesData[msg.sender].isClaimed = false;
                stakesData[msg.sender].isUnstaked = false;
            }
            // Update claimable reward counter
            uint256 amountRequired = stakedAmountRequireForReward *
                (10 ** ERC20(stakeToken).decimals());
            if (stakesData[msg.sender].totalTokenAmountStaked >= amountRequired) {
                if (!uniqueClaimer[msg.sender]) {
                    totalClaimableCounter += 1;
                    uniqueClaimer[msg.sender] = true;
                }
            }
            // Emit event
            emit Stake(msg.sender, _amount, block.timestamp);
        } catch (bytes memory _error) {
            reentrancyGuardForStake = false;
            emit ErrorLog(_error);
            revert("STAKING: STAKE FAILED.");
        }
        // rollback for prevent re-entrancy
        reentrancyGuardForStake = false;
    }

    /**
     * @dev unstake function
     */
    function unstake() public validUnstakeTime {
        // Prevent re-entrancy
        require(!reentrancyGuardForUnstake, "STAKING: REENTRANCY DETECTED.");
        reentrancyGuardForUnstake = true;
        require(!isUnstaked(msg.sender), "STAKING: ALREADY UNSTAKE.");
        StructData.StakingData memory stakeInfo = stakesData[msg.sender];        
        uint256 stakeAmount = stakeInfo.totalTokenAmountStaked;
        require(stakeAmount > 0, "STAKING: ONLY YOUR OWN STAKE.");        
        require(
            ERC20(stakeToken).balanceOf(address(this)) >= stakeAmount,
            "STAKING: INSSUFFICIENT FUNDS TO REFUND STAKE."
        );
        stakesData[msg.sender].isUnstaked = true;
        userUnstaked[msg.sender] = true;
        try ERC20(stakeToken).transfer(msg.sender, stakeAmount) {           
            totalStakedAmountRemaining -= stakeAmount;
            emit Unstake(msg.sender, stakeAmount, block.timestamp);
        } catch (bytes memory _error) {
            reentrancyGuardForUnstake = false;
            emit ErrorLog(_error);
            revert("STAKING: UNSTAKE FAILED.");
        }
        // Rollback for next action
        reentrancyGuardForUnstake = false;
    }

    /**
     * @dev claim reward function
     */
    function claim() public {
        // Prevent re-entrancy
        require(!reentrancyGuardForClaim, "STAKING: REENTRANCY DETECTED.");
        reentrancyGuardForClaim = true;
        uint256 rewardAmount = getRewardForWallet(msg.sender);
        require(rewardAmount > 0, "STAKING: YOU ARE NOT ELIGIBLE FOR REWARD.");
        require(
            ERC20(rewardToken).balanceOf(address(this)) >= rewardAmount,
            "STAKING: INSSUFFICIENT FUNDS TO PAY REWARD."
        );
        stakesData[msg.sender].isClaimed = true;
        try ERC20(rewardToken).transfer(msg.sender, rewardAmount) {
            // Emit event
            emit Claim(msg.sender, rewardAmount, block.timestamp);
        } catch (bytes memory _error) {
            reentrancyGuardForClaim = false;
            emit ErrorLog(_error);
            revert("STAKING: CLAIM FAILED.");
        }
        // Rollback for next action
        reentrancyGuardForClaim = false;
    }

    /**
     * @dev function to withdraw all stake tokens in emergency case
     */
    function withdrawTokenEmergency(uint256 _amount) public onlyOwner {
        require(_amount > 0, "STAKING: INVALID AMOUNT.");
        require(
            ERC20(stakeToken).balanceOf(address(this)) >= _amount,
            "STAKING: TOKEN BALANCE NOT ENOUGH."
        );
        require(ERC20(stakeToken).transfer(msg.sender, _amount), "STAKING: CANNOT WITHDRAW TOKEN.");
    }

    /**
     * @dev withdraw currency balance from contract in emergency case
     */
    function withdrawCurrencyEmergency(address _currency, uint256 _amount) public onlyOwner {
        require(_amount > 0, "STAKING: INVALID AMOUNT.");
        require(
            ERC20(_currency).balanceOf(address(this)) >= _amount,
            "STAKING: CURRENCY BALANCE NOT ENOUGH."
        );
        require(
            ERC20(_currency).transfer(msg.sender, _amount),
            "STAKING: CANNOT WITHDRAW CURRENCY."
        );
    }

    /**
     * @dev withdraw native balance from contract in emergency case
     */
    function withdrawNativeEmergency() public onlyOwner {
        (bool sent, ) = (msg.sender).call{value: address(this).balance}("");
        require(sent, "STAKING: WITHDRAW NATIVE FAILED.");
    }

    /**
     * @dev possible to receive any ERC20 tokens
     */
    receive() external payable {}
}

