/**
 *Submitted for verification at BscScan.com on 2023-05-30
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract Pausable is Context {

    event Paused(address account);

    event Unpaused(address account);

    bool private _paused;

    constructor() {
        _paused = false;
    }

    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    modifier whenPaused() {
        _requirePaused();
        _;
    }

    function paused() public view virtual returns (bool) {
        return _paused;
    }

    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

contract Toknify is Ownable, Pausable {
    mapping(bytes32 => secretInfo) private secrets;

    struct secretInfo {
        string ownerInfo;
        bool exists;
    }

    event SecretAdded(bytes32 indexed secretHash, string ownerInfo);

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function addSecrets(bytes32[] memory _hashedSecrets, string[] memory _ownerInfos) external onlyOwner whenNotPaused {
        require(_hashedSecrets.length == _ownerInfos.length, "Mismatched arrays");
        for (uint256 i = 0; i < _hashedSecrets.length; i++) {
            secrets[_hashedSecrets[i]] = secretInfo(_ownerInfos[i], true);
            emit SecretAdded(_hashedSecrets[i], _ownerInfos[i]);
        }
    }

    function getOwnerInfo(string memory _secret) public view returns (string memory) {
        bytes32 secretHash = keccak256(abi.encodePacked(_secret));
        require(secrets[secretHash].exists, "Secret does not exist");
        return secrets[secretHash].ownerInfo;
    }
}