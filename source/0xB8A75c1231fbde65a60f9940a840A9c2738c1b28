// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

//import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     *
     * Furthermore, `isContract` will also return true if the target contract within
     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,
     * which only has an effect at the end of a transaction.
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionCallWithValue(
                target,
                data,
                0,
                "Address: low-level call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage)
        private
        pure
    {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                oldAllowance + value
            )
        );
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(
                oldAllowance >= value,
                "SafeERC20: decreased allowance below zero"
            );
            _callOptionalReturn(
                token,
                abi.encodeWithSelector(
                    token.approve.selector,
                    spender,
                    oldAllowance - value
                )
            );
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to
     * 0 before setting it to a non-zero value.
     */
    function forceApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        bytes memory approvalCall = abi.encodeWithSelector(
            token.approve.selector,
            spender,
            value
        );

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(
                token,
                abi.encodeWithSelector(token.approve.selector, spender, 0)
            );
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.
     * Revert on invalid signature.
     */
    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(
            nonceAfter == nonceBefore + 1,
            "SafeERC20: permit did not succeed"
        );
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(
            data,
            "SafeERC20: low-level call failed"
        );
        require(
            returndata.length == 0 || abi.decode(returndata, (bool)),
            "SafeERC20: ERC20 operation did not succeed"
        );
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data)
        private
        returns (bool)
    {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return
            success &&
            (returndata.length == 0 || abi.decode(returndata, (bool))) &&
            Address.isContract(address(token));
    }
}

contract Ownable {
    // Variable that maintains
    // owner address
    address private _owner;

    // Sets the original owner of
    // contract when it is deployed
    constructor() {
        _owner = msg.sender;
    }

    // Publicly exposes who is the
    // owner of this contract
    function owner() public view returns (address) {
        return _owner;
    }

    // onlyOwner modifier that validates only
    // if caller of function is contract owner,
    // otherwise not
    modifier onlyOwner() {
        require(isOwner(), "Function accessible only by the owner !!");
        _;
    }

    // function for owners to verify their ownership.
    // Returns true for owners otherwise false
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }
}

contract IPancakeRouter02 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external {}

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable {}

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external {}

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts)
    {}

    address public factory;
}

contract PairDetector {
    mapping(address => mapping(address => address)) public getPair;
}

contract LiquadityDetector {
    function getReserves()
        public
        view
        returns (
            uint112 _reserve0,
            uint112 _reserve1,
            uint32 _blockTimestampLast
        )
    {}

    address public token0;
    address public token1;
}

contract DexFactory is Ownable {
    uint256 public INITIAL_ROI = 2;
    uint256 public SEC_PER_DAY = 86400;
    uint256 public TOTAL_INVESTMENT = 0;
    uint256 public TOTAL_WITHDRAWN = 0;
    uint256 public DEPOSIT_FEE = 6; // 4% Marketing 1% Development , 1% Team
    uint256 public WITHDRAW_FEE = 2; // 1% Marketing 1% Development
    uint256 public REFERRAL_FEE = 4; // DIRECT TO INVITER
    address public wallet = 0xf08Da222A1617d6665D4e117c3E6A726e9794C92;
    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address public PANCAKESWAP_FACTORY =
        0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
    address public APESWAP_FACTORY = 0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6;
    address public BISWAP_FACTORY = 0x858E3312ed3A876947EA49d572A7C42DE08af7EE;
    address public SUSHISWAP_FACTORY =
        0xc35DADB65012eC5796536bD9864eD8773aBc74C4;
    address public BABYSWAP_FACTORY =
        0x86407bEa2078ea5f5EB5A52B2caA963bC1F889Da;
    uint256 public ON_TRADE = 0;

    uint256 public TotalTrades = 0;
    bool public LAUNCH = false;

    struct Investment {
        uint256 _initial_investment;
        uint256 _investment;
        uint256 available_withdraw;
        uint256 total_withdrawn;
        uint256 User_TIME;
        uint256 start_time;
        uint256 deadline;
        bool init;
    }

    struct DecentralizedTrades {
        uint256 amount;
        uint256 price;
        string market;
        string status;
    }

    struct RefRecord {
        address _address;
        uint256 total_earned;
    }

    mapping(address => Investment) public investment;
    mapping(uint256 => DecentralizedTrades) public Trades;
    mapping(address => RefRecord) public ReferralRecord;

    function LAUNCH_PROJECT() public onlyOwner {
        require(!LAUNCH, "project is launched");
        LAUNCH = true;
    }

    function DEPOSIT(address addr) public payable {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        Investment storage User = investment[msg.sender];
        RefRecord storage RefRec = ReferralRecord[addr];
        require(
            msg.value >= 0.05 ether,
            "You cannot investment less than 0.05"
        );
        require(
            msg.sender != addr && addr != address(0),
            "you cannot referral zero address or your address"
        );
        uint256 fee = fee_calculation(msg.value);
        uint256 refFee = Referral_fee_calculation(msg.value);
        uint256 total_fee = fee + refFee;
        uint256 totalUserInvestment = msg.value - total_fee;

        User._investment += totalUserInvestment;
        User._initial_investment += totalUserInvestment;
        if (User.start_time == 0) {
            User.User_TIME = block.timestamp;
            User.start_time = block.timestamp;
            User.deadline = block.timestamp + 1 days;
        }

        payable(wallet).transfer(fee);
        payable(addr).transfer(refFee);

        RefRec._address = addr;
        RefRec.total_earned += refFee;

        TOTAL_INVESTMENT += totalUserInvestment;
        User.init = true;
    }

    function ReInvest() public {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        Investment storage User = investment[msg.sender];
        require(User.init == true, "You didn't invest in the platform");
        uint256 value = ROI(msg.sender);
        User._investment += value;
        User.start_time = block.timestamp;
    }

    function Collect() public {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        Investment storage User = investment[msg.sender];
        require(User.init == true, "You didn't invest in the platform");
        uint256 value = ROI(msg.sender);
        User.available_withdraw += value;
        User.start_time = block.timestamp;
    }

    function withdraw(uint256 amount) public {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        Investment storage User = investment[msg.sender];
        require(User.init == true, "You didn't invest in the platform");
        require(User.available_withdraw >= amount, "Not available");

        require(block.timestamp >= User.deadline, "Wait for the next 24 hours");
        User.available_withdraw -= amount;
        User.total_withdrawn += amount;
        uint256 fee = withdraw_fee_calculation(amount);
        uint256 value = amount - fee;
        User.deadline = block.timestamp + 1 days;

        if (User.total_withdrawn >= User._investment) {
            User._initial_investment = 0;
            User._investment = 0;
            User.start_time = 0;
            User.total_withdrawn = 0;
            User.deadline = 0;
            User.available_withdraw = 0;
            User.User_TIME = 0;
        } else {
            TOTAL_WITHDRAWN += amount;
        }
        payable(msg.sender).transfer(value);
        payable(wallet).transfer(fee);
    }

    function EXIT_PROTOCOL() public {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        Investment storage User = investment[msg.sender];
        require(User.init == true, "You didn't invest in the platform");
        uint256 getter = UserPeriodROI(msg.sender);
        if (getter > 45) {
            uint256 deposit = User._initial_investment;
            uint256 withdrawC = User.total_withdrawn;
            uint256 total = SafeMath.sub(deposit, withdrawC);
            uint256 value = exit_protocol_calculation(total, 5);
            uint256 unstakeValue = SafeMath.sub(total, value);

            User._initial_investment = 0;
            User._investment = 0;
            User.start_time = 0;
            User.total_withdrawn = 0;
            User.deadline = 0;
            User.available_withdraw = 0;
            User.User_TIME = 0;
            payable(msg.sender).transfer(unstakeValue);
        } else if (getter > 30) {
            uint256 deposit = User._initial_investment;
            uint256 withdrawC = User.total_withdrawn;
            uint256 total = SafeMath.sub(deposit, withdrawC);
            uint256 value = exit_protocol_calculation(total, 4);
            uint256 unstakeValue = SafeMath.sub(total, value);

            User._initial_investment = 0;
            User._investment = 0;
            User.start_time = 0;
            User.total_withdrawn = 0;
            User.deadline = 0;
            User.available_withdraw = 0;
            User.User_TIME = 0;
            payable(msg.sender).transfer(unstakeValue);
        } else if (getter > 15) {
            uint256 deposit = User._initial_investment;
            uint256 withdrawC = User.total_withdrawn;
            uint256 total = SafeMath.sub(deposit, withdrawC);
            uint256 value = exit_protocol_calculation(total, 3);
            uint256 unstakeValue = SafeMath.sub(total, value);

            User._initial_investment = 0;
            User._investment = 0;
            User.start_time = 0;
            User.total_withdrawn = 0;
            User.deadline = 0;
            User.available_withdraw = 0;
            User.User_TIME = 0;
            payable(msg.sender).transfer(unstakeValue);
        } else {
            uint256 deposit = User._initial_investment;
            uint256 withdrawC = User.total_withdrawn;
            uint256 total = SafeMath.sub(deposit, withdrawC);
            uint256 value = exit_protocol_calculation(total, 2);
            uint256 unstakeValue = SafeMath.sub(total, value);

            User._initial_investment = 0;
            User._investment = 0;
            User.start_time = 0;
            User.total_withdrawn = 0;
            User.deadline = 0;
            User.available_withdraw = 0;
            User.User_TIME = 0;
            payable(msg.sender).transfer(unstakeValue);
        }
    }

    function BUYBNBTOKEN(
        address router,
        uint256 amountIn,
        uint256 amountOutMin,
        address[] memory path
    ) external onlyOwner {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        address _factory = IPancakeRouter02(router).factory();
        require(
            _factory == PANCAKESWAP_FACTORY ||
                _factory == APESWAP_FACTORY ||
                _factory == BABYSWAP_FACTORY ||
                _factory == SUSHISWAP_FACTORY ||
                _factory == BISWAP_FACTORY,
            "Invalid Trade"
        );

        uint256 lengthPath = path.length;
        require(lengthPath == 2, "Invalid Trade");

        (uint256 _resever0, uint256 _reserve1) = RelayerCheck(_factory, path);

        address Token0 = BNBPairDetectRight(_factory, path);
        address Token1 = BNBPairDetectLeft(_factory, path);

        if (Token0 == path[0]) {
            require(_resever0 >= 1500 ether);
        } else if (Token1 == path[0]) {
            require(_reserve1 >= 1500 ether);
        } else {
            revert("Error");
        }

        IERC20 fromToken = IERC20(path[0]);
        _approve(fromToken, router, amountIn);
        IPancakeRouter02(router)
            .swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: amountIn
        }(amountOutMin, path, address(this), block.timestamp + 200);

        IERC20Metadata TokenData = IERC20Metadata(path[0]);
        string memory tokenName = TokenData.name();
        DecentralizedTrades storage list = Trades[TotalTrades];
        list.amount = amountIn;
        list.price = amountOutMin;
        list.market = tokenName;
        list.status = "BUY";
        TotalTrades += 1;
        ON_TRADE += amountIn;
    }

    function SELLTOKENBNB(
        address router,
        address[] memory path,
        uint256 amountOutMin
    ) external onlyOwner {
        require(LAUNCH, "PROJECT IS NOT LIVE");
        require(path[1] == WBNB, "Invalid Trade");

        IERC20 fromToken = IERC20(path[0]);
        uint256 amountIn = fromToken.balanceOf(address(this));

        require(amountIn > 0, "Balance is Zero");

        _approve(fromToken, router, amountIn);

        IPancakeRouter02(router)
            .swapExactTokensForETHSupportingFeeOnTransferTokens(
                amountIn,
                amountOutMin,
                path,
                address(this),
                block.timestamp + 200
            );

        IERC20Metadata TokenData = IERC20Metadata(path[0]);
        string memory tokenName = TokenData.name();
        DecentralizedTrades storage list = Trades[TotalTrades];
        list.amount = amountIn;
        list.price = amountOutMin;
        list.market = tokenName;
        list.status = "SELL";
        TotalTrades += 1;
        ON_TRADE = 0;
    }

    function _approve(
        IERC20 token,
        address router,
        uint256 amountIn
    ) internal {
        if (token.allowance(address(this), router) < amountIn) {
            SafeERC20.safeApprove(token, router, amountIn);
        }
    }

    function getAmountsOut(
        address router,
        uint256 amountIn,
        address[] memory path
    ) internal view returns (uint256) {
        uint256[] memory amounts = IPancakeRouter02(router).getAmountsOut(
            amountIn,
            path
        );
        return amounts[amounts.length - 1];
    }

    function CONTRACT_BALANCE() public view returns (uint256) {
        return address(this).balance;
    }

    function UserPeriodROI(address _addr) public view returns (uint256) {
        Investment storage time = investment[_addr];

        uint256 timegetter = block.timestamp;
        uint256 usertimeperiod = time.User_TIME;

        uint256 dayCounter = timegetter - usertimeperiod;

        uint256 daygetter = dayCounter / SEC_PER_DAY;

        if (daygetter > 45) {
            return 5;
        } else if (daygetter > 30) {
            return 4;
        } else if (daygetter > 15) {
            return 3;
        } else {
            return 2;
        }
    }

    function ROI(address _addr) public view returns (uint256) {
        Investment storage time = investment[_addr];
        uint256 ROI_CALCULATE = UserPeriodROI(_addr);
        uint256 userInvestment = (time._investment / 100) * ROI_CALCULATE;
        uint256 totalPerSec = userInvestment / SEC_PER_DAY;
        uint256 totalTime = block.timestamp - time.start_time;
        return totalTime * totalPerSec;
    }

    function exit_protocol_calculation(uint256 _investment, uint256 _position)
        public
        pure
        returns (uint256)
    {
        if (_position == 5) {
            return (_investment / 100) * 50;
        } else if (_position == 4) {
            return (_investment / 100) * 60;
        } else if (_position == 3) {
            return (_investment / 100) * 70;
        } else {
            return (_investment / 100) * 90;
        }
    }

    function fee_calculation(uint256 amount) public view returns (uint256) {
        return (amount / 100) * DEPOSIT_FEE;
    }

    function withdraw_fee_calculation(uint256 amount)
        public
        view
        returns (uint256)
    {
        return (amount / 100) * WITHDRAW_FEE;
    }

    function Referral_fee_calculation(uint256 amount)
        public
        view
        returns (uint256)
    {
        return (amount / 100) * REFERRAL_FEE;
    }

    function RelayerCheck(address factory, address[] memory path)
        public
        view
        returns (uint256, uint256)
    {
        address Pair = PairDetector(factory).getPair(path[0], path[1]);
        (uint256 reserve0, uint256 reserve1, ) = LiquadityDetector(Pair)
            .getReserves();
        return (reserve0, reserve1);
    }

    function BNBPairDetectRight(address _factory, address[] memory path)
        public
        view
        returns (address)
    {
        address Pair = PairDetector(_factory).getPair(path[0], path[1]);
        return LiquadityDetector(Pair).token0();
    }

    function BNBPairDetectLeft(address _factory, address[] memory path)
        public
        view
        returns (address)
    {
        address Pair = PairDetector(_factory).getPair(path[0], path[1]);
        return LiquadityDetector(Pair).token1();
    }

    function factoryCheck(address _router) public view returns (address) {
        return IPancakeRouter02(_router).factory();
    }

    /**
     * Lets the contract receive native tokens
     */

    receive() external payable {}
}