// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract SpreadyEcosystemToken {
    string public name = "Spready Ecosystem Token";
    string public symbol = "SET";
    uint256 public totalSupply = 5000000 * 10 ** 18; // 5 million tokens with 18 decimal places
    uint8 public decimals = 18;
    
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => bool) public lockedAddresses;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event LockWallet(address indexed wallet, bool locked);
    
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }
    
    function transfer(address _to, uint256 _value) external returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        require(!lockedAddresses[msg.sender], "Your account is locked");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        success = true;
    }
    
    function lockAddress(address _wallet, bool _locked) external onlyOwner {
        require(_wallet != owner, "Cannot lock the owner's address");
        lockedAddresses[_wallet] = _locked;
        emit LockWallet(_wallet, _locked);
    }
}