// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}
// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b > a) return (false, 0);
        return (true, a - b);
    }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
    unchecked {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    unchecked {
        require(b <= a, errorMessage);
        return a - b;
    }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a / b;
    }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    unchecked {
        require(b > 0, errorMessage);
        return a % b;
    }
    }
}
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

//      .:                                                           .:: ::    .::            .::
//     .: ::                                                       .::    .::  .::            .::      .:
//    .:  .::    .::     .::.: .:::   .::    .: .:::   .::          .::      .:.: .:   .::    .::  .::   .:: .::     .::
//   .::   .::    .::   .::  .::    .::  .::  .::    .::  .::         .::      .::   .::  .:: .:: .:: .:: .::  .:: .::  .::
//  .:::::: .::    .:: .::   .::   .::    .:: .::   .::   .::            .::   .::  .::   .:: .:.::   .:: .::  .::.::   .::
// .::       .::    .:.::    .::    .::  .::  .::   .::   .::      .::    .::  .::  .::   .:: .:: .:: .:: .::  .:: .::  .::
//.::         .::    .::    .:::      .::    .:::     .:: .:::       .:: ::     .::   .:: .:::.::  .::.::.:::  .::     .::
//                                                                                                                  .::


pragma solidity ^0.8.9;

    error NeedsMoreThanZero();
    error TransferFailed();

contract AvroraStaking270days is ReentrancyGuard {

    using SafeMath for uint256;

    IERC20 public immutable stakingToken;

    address public owner;

    uint256 public constant REWARD_TIME = 23328000;

    uint256 public totalSupply;

    uint256 public stakerCount;

    mapping(address => uint256) public finishAt;

    mapping(address => uint256) public updatedAt;

    mapping(address => uint256) public balanceOf;

    event stakeAVR(address payee, uint256 amount);

    event restakeAVR(address payee, uint256 amount);

    event unstakeAVR(address payee, uint256 amount);

    event claimRewards(address payee, uint256 amount);

    constructor(address _stakingToken) {
        owner = msg.sender;
        stakingToken = IERC20(_stakingToken);
    }

    modifier moreThanZero(uint256 amount) {
        if (amount == 0) {
            revert NeedsMoreThanZero();
        }
        _;
    }

    function stake(uint256 _amount) external  nonReentrant moreThanZero(_amount) {

        require(balanceOf[msg.sender] == 0, "You already staked AVR");

        bool success = stakingToken.transferFrom(msg.sender, address(this), _amount);

        if (!success) {
            revert TransferFailed();
        }

        balanceOf[msg.sender] = _amount;
        finishAt[msg.sender] = block.timestamp + 270 days;
        updatedAt[msg.sender] = block.timestamp;
        totalSupply += _amount;
        stakerCount += 1;
        emit stakeAVR(msg.sender, _amount);
    }

    function restake(uint256 _amount) external nonReentrant moreThanZero(_amount) {

        require(balanceOf[msg.sender] > 0, "You dot't have staked AVR for restake");

        uint256 _rewardAmount = checkReward(msg.sender) + _amount;

        bool success = stakingToken.transferFrom(msg.sender, address(this), _amount);

        if (!success) {
            revert TransferFailed();
        }

        balanceOf[msg.sender] += _rewardAmount;
        finishAt[msg.sender] = block.timestamp + 270 days;
        updatedAt[msg.sender] = block.timestamp;
        totalSupply += _rewardAmount;
        emit restakeAVR(msg.sender, _rewardAmount);
    }

    function restakeReward() external nonReentrant {

        require(balanceOf[msg.sender] > 0, "You dot't have staked AVR for restake");

        uint256 _amount = checkReward(msg.sender);

        require(_amount > 0, "amount = 0");

        balanceOf[msg.sender] += _amount;
        finishAt[msg.sender] = block.timestamp + 270 days;
        updatedAt[msg.sender] = block.timestamp;
        totalSupply += _amount;

        emit restakeAVR(msg.sender, _amount);
    }

    function unstake() external nonReentrant {

        require(balanceOf[msg.sender] > 0, "You don't staked AVR");

        uint256 withdrawAmount = balanceOf[msg.sender];
        balanceOf[msg.sender] = 0;

        if (block.timestamp >= finishAt[msg.sender]) {
            bool success = stakingToken.transfer(msg.sender, withdrawAmount);

            if (!success) {
                revert TransferFailed();
            }

        } else {

            bool success = stakingToken.transfer(msg.sender, withdrawAmount.div(100).mul(25));

            if (!success) {
                revert TransferFailed();
            }
        }

        finishAt[msg.sender] = 0;
        updatedAt[msg.sender] = 0;
        totalSupply -= withdrawAmount;
        stakerCount -= 1;

        emit unstakeAVR(msg.sender, withdrawAmount);
    }

    function checkReward(address _account) public view returns (uint256) {

        require(balanceOf[_account] > 0, "You don't staked AVR");

        if (block.timestamp >= finishAt[_account]) {

            return (balanceOf[_account].mul(81).mul(finishAt[_account].sub(updatedAt[_account])).div(REWARD_TIME)).div(100);

        } else {

            return (balanceOf[_account].mul(81).mul(block.timestamp.sub(updatedAt[_account])).div(REWARD_TIME)).div(100);

        }
    }

    function claim() external nonReentrant {

        require(balanceOf[msg.sender] > 0, "You don't staked AVR");

        uint256 reward = checkReward(msg.sender);

        require(reward > 0, "You don't have reward");

        if (block.timestamp >= finishAt[msg.sender]) {

            updatedAt[msg.sender] = finishAt[msg.sender];

        } else {

            updatedAt[msg.sender] = block.timestamp;

        }

        bool success = stakingToken.transfer(msg.sender, reward);

        if (!success) {
            revert TransferFailed();
        }

        emit claimRewards(msg.sender, reward);

    }
}