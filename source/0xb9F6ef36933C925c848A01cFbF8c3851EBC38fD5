
// File: /contracts/ido/ReferralIDO.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import '../sale/BaseIDO.sol';
import '../interfaces/IReferralSale.sol';

// TODO: some sales will have no upper limit per wallet
/**
 * This sale supports:
 * - Whitelist, or if it's of the "Open" type - special allocation per user
 * - Referrals: if used referral code (affiliate's address), affiliate gets X% of the value contributed by the user
 * - Hard Cap mode: when hard cap is reached (saleState.tokensForSale), sale is closed
 * - Soft Cap mode: when soft cap is reached, users get proportionally less tokens for what they contributed
 */
contract ReferralIDO is IReferralSale, BaseIDO {
    using SafeERC20 for IERC20;
    
    RefState internal refState;
    
    constructor(
        string memory _id,
        uint64 _rate,
        uint256 _tokensForSale,
        address _fundToken,
        address _fundsReceiver,
        uint256 _max,
        uint32[5] memory _timeline,
        address[] memory _admins
    ) BaseIDO(_id, _rate, _tokensForSale, _fundToken, _fundsReceiver, _max, _timeline, _admins) {
        refState.percent = 50;
        saleState.saleType = SaleType.SoftCap;
    }

    function refAddCommission(address account, uint256 totalValue) internal {
        require(account != address(0), 'Zero address');
        require(account != msg.sender, 'Self ref');
        require(refState.percent > 0, 'Zero percent');
        require(totalValue > 0, 'Zero value');

        uint256 amount = (totalValue * refState.percent) / 1000;

        refState.totalCommission += amount;
        if (refState.affiliateCommission[account] == 0) refState.totalAffiliatesN += 1;
        refState.affiliateCommission[account] += amount;
        refState.affiliatePurchasesN[account] += 1;
    }

    function setRefCommissionPercent(uint16 percent) external onlyOwnerOrAdmin {
        refState.percent = percent;
        emit RefCommissionPercentChanged(percent);
    }
    
    function setAffiliatePercent(address account, uint16 percent) external override onlyOwnerOrAdmin {
        require(account != address(0), 'Zero address');
        require(percent > 0, 'Zero percent');
        require(percent <= 1000, 'Percent too high');
        refState.affiliatePercent[account] = percent;
        emit AffiliatePercentChanged(account, percent);
    }
    
    function isSoftCapReached() internal view returns (bool) {
        return saleState.isSoftCap && calculatePurchaseAmount(saleState.raised) >= saleState.tokensForSale;
    }

    function getDynamicBalance(address account) internal view returns (uint256) {
        return (contributed[account] * getRate()) / 1e6;
    }
    
    function getRate() internal view override returns (uint64) {
        return isSoftCapReached() ? uint64(saleState.tokensForSale * 1e6 / saleState.raised) : saleState.rate;
    }

    function getReferralState(address account) external view override returns (RefStateView memory) {
        return
            RefStateView(
                refState.percent,
                refState.totalCommission,
                refState.totalWithdrawn,
                refState.totalAffiliatesN,
                refState.totalWithdrawnN,
                refState.affiliatePurchasesN[account],
                refState.affiliateCommission[account],
                refState.affiliateWithdrawn[account]
            );
    }

    function withdrawReferralCommission() external override  {
        require(getSaleTimelineStatus() != TimelineStatus.Ended, 'Sale: Not ended');
        require(refState.affiliateCommission[msg.sender] > 0, 'No commission');
        uint256 commission = refState.affiliateCommission[msg.sender];
        refState.affiliateCommission[msg.sender] = 0;
        refState.affiliateWithdrawn[msg.sender] += commission;
        refState.totalWithdrawn += commission;
        refState.totalWithdrawnN += 1;
        if (fundingState.fundByTokens) {
            IERC20(fundingState.fundToken).transfer(msg.sender, commission);
        } else {
            payable(msg.sender).transfer(commission);
        }
    }

    function getUserState(address account) public view override returns (UserState memory) {
        UserState memory state;

        state.contributed = contributed[account];
        state.balance = getDynamicBalance(account);
        state.isWhitelisted = wlState.isWhitelisted[account];

        // User can have a special allocation without being whitelisted
        uint256 alloc = wlState.userAlloc[account] > 0 ? wlState.userAlloc[account] : saleState.maxSell;
        if (saleState.saleType == SaleType.Open || saleState.saleType == SaleType.SoftCap) {
            state.totalAlloc = alloc;
        } else if (saleState.saleType == SaleType.WhitelistOnly) {
            if (state.isWhitelisted) {
                state.totalAlloc = state.wlAlloc = alloc;
            }
        }

        return state;
    }

    function buyTokens(address affiliateAddress) public payable override  ongoingSale nonReentrant {
        require(!fundingState.fundByTokens, 'Sale: presale is funded by tokens but value is missing');
        
        if (affiliateAddress != address(0)) {
            refAddCommission(affiliateAddress, msg.value);
        }

        internalBuyTokens(msg.value);
    }

    /**
     * The fund token must be first approved to be transferred by presale contract for the given "value".
     */
    function buyTokens(uint256 value, address affiliateAddress) public override  ongoingSale nonReentrant {
        require(fundingState.fundByTokens, 'Sale: funding by tokens is not allowed');
        require(fundingState.fundToken.allowance(msg.sender, address(this)) >= value, 'Sale: fund token not approved');
        
        fundingState.fundToken.safeTransferFrom(msg.sender, address(this), value);
        if (affiliateAddress != address(0)) {
            refAddCommission(affiliateAddress, value);
        }

        if (fundingState.currencyDecimals < 18) {
            value = value * (10**(18 - fundingState.currencyDecimals));
        }
        internalBuyTokens(value);
    }

    function internalBuyTokens(uint256 value) private {
        address account = _msgSender();
        UserState memory userState = getUserState(account);
        require(userState.totalAlloc > 0, 'Sale: zero allocation');

        require(value > 0, 'Sale: value is 0');

        if (contributed[account] == 0) saleState.participants += 1;
        saleState.raised += value;
        if (!isSoftCapReached()) {
            uint256 amount = calculatePurchaseAmount(value);
            require(amount > 0, 'Sale: amount is 0');
            saleState.tokensSold += amount;
            emit TokensPurchased(account, value, amount);
        } else {
            emit TokensPurchased(account, value, 0);
        }

        contributed[account] += value;

        require(value >= saleState.minSell, 'Sale: amount is too small');
        require(saleState.maxSell == 0 || contributed[account] <= saleState.maxSell, 'Sale: limit per wallet reached');
        require(
            userState.totalAlloc == 0 || contributed[account] <= userState.totalAlloc,
            'Sale: amount exceeds max allocation'
        );
        require(saleState.tokensSold <= saleState.tokensForSale, 'Sale: cap reached');

        // Store the first and last block numbers to simplify data collection later
        if (saleState.firstPurchaseBlockN == 0) {
            saleState.firstPurchaseBlockN = block.number;
        }
        saleState.lastPurchaseBlockN = block.number;
    }
}


// File: /contracts/sale/BaseIDO.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import '../interfaces/ISale.sol';
import '../Adminable.sol';
import '@openzeppelin/contracts/security/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';

abstract contract BaseIDO is ISale, Adminable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    
    string public id;
    SaleState internal saleState;
    FundingState internal fundingState;
    SaleTimeline internal timeline;
    WhitelistState internal wlState;
    mapping(address => uint256) internal contributed;

    event FundsReceiverChanged(address account);

    modifier ongoingSale() {
        require(getSaleTimelineStatus() == TimelineStatus.Live, 'Sale: Not live');
        _;
    }

    constructor(
        string memory _id,
        uint64 _rate,
        uint256 _tokensForSale,
        address _fundToken,
        address _fundsReceiver,
        uint256 _max,
        uint32[5] memory _timeline,
        address[] memory _admins
    ) {
        id = _id;
        setSaleState(_rate, _tokensForSale, _max);
        setFundingState(_fundsReceiver, _fundToken);
        setSaleTimeline(_timeline);

        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        for (uint256 i = 0; i < _admins.length; i++) {
            _grantRole(DEFAULT_ADMIN_ROLE, _admins[i]);
        }
    }

    function getFundingState() external view override returns (FundingState memory) {
        return fundingState;
    }

    function getSaleState() external view virtual override returns (SaleState memory) {
        SaleState memory state = saleState;
        state.status = getSaleTimelineStatus();
        state.rate = getRate();
        state.totalWhitelistAllocation =
            calculatePurchaseAmount(saleState.maxSell) *
            wlState.count +
            calculatePurchaseAmount(wlState.totalSpecialAlloc);
        state.whitelistedCount = wlState.count;
        state.isSoftCap = saleState.saleType == SaleType.SoftCap;

        return state;
    }

    function getSaleTimeline() external view override returns (SaleTimeline memory) {
        return timeline;
    }

    function getSaleTimelineStatus() public view override returns (TimelineStatus) {
        uint256 n = block.timestamp;
        if (n < timeline.registerTime) return TimelineStatus.PreRegister;
        if (n < timeline.registerTime + timeline.registerDuration) return TimelineStatus.Register;
        if (n < timeline.startTime) return TimelineStatus.Prepare;
        if (n < timeline.startTime + timeline.duration - timeline.fcfsDuration) return TimelineStatus.Live;
        if (timeline.fcfsDuration > 0 && n < timeline.startTime + timeline.duration) return TimelineStatus.Fcfs;
        return TimelineStatus.Ended;
    }
    
    function getRate() internal view virtual returns (uint64) {
        return saleState.rate;
    }

    function calculatePurchaseAmount(uint256 purchaseAmountWei) public view returns (uint256) {
        return (purchaseAmountWei * getRate()) / 1e6;
    }

    function max(uint256 a, uint256 b) private pure returns (uint256) {
        return a > b ? a : b;
    }

    //// Admin setters ////

    function setSaleState(
        uint64 rate,
        uint256 tokensForSale,
        uint256 _max
    ) public onlyOwnerOrAdmin {
        saleState.rate = rate;

        require(
            getSaleTimelineStatus() != TimelineStatus.Live || tokensForSale > saleState.tokensForSale,
            'Sale: Sale is live, cap change only allowed to a higher value'
        );
        saleState.tokensForSale = tokensForSale;

        saleState.maxSell = _max;
    }

    function setFundingState(address receiver, address fundToken) public onlyOwnerOrAdmin {
        require(receiver != address(0), 'Funds receiver must be valid address');
        if (fundingState.fundsReceiver != receiver) {
            fundingState.fundsReceiver = receiver;
            emit FundsReceiverChanged(receiver);
        }

        fundingState.fundByTokens = fundToken != address(0);
        if (fundingState.fundByTokens) {
            fundingState.fundToken = IERC20(fundToken);
            fundingState.currencyDecimals = IERC20Metadata(fundToken).decimals();
        }
    }

    function batchAddBalance(address[] calldata accounts, uint256[] calldata values)
        external
        override
        onlyOwnerOrAdmin
    {
        for (uint256 i = 0; i < accounts.length; i++) {
            address account = accounts[i];
            uint256 value = values[i];
            uint256 amount = calculatePurchaseAmount(value);

            saleState.tokensSold += amount;
            contributed[account] += value;

            saleState.raised += value;
            saleState.participants = saleState.participants + 1;

            emit TokensPurchased(account, value, amount);
        }

        if (saleState.firstPurchaseBlockN == 0) {
            saleState.firstPurchaseBlockN = block.number;
        }
        saleState.lastPurchaseBlockN = block.number;
    }

    //// Time module ////

    // [startTime, duration, registerTime, registerDuration, FCFSDuration]
    function setSaleTimeline(uint32[5] memory _timeline) public override onlyOwnerOrAdmin {
        uint32 start = _timeline[0];
        uint32 duration = _timeline[1];
        uint32 regStart = _timeline[2];
        uint32 regDuration = _timeline[3];
        uint32 fcfsDuration = _timeline[4];

        require(start > regStart, 'Sale: start time must be after the register time');
        timeline.startTime = start;
        timeline.duration = duration;
        timeline.endTime = timeline.startTime + timeline.duration;

        require(regStart < timeline.startTime, 'Sale: register time must be before the start time');
        timeline.registerTime = regStart;

        require(
            timeline.registerTime + regDuration < timeline.startTime,
            'Sale: register end must be before the start time'
        );
        timeline.registerDuration = regDuration;

        timeline.fcfsDuration = fcfsDuration;
    }

    //// Withdrawable module ////

    /**
     * Withdraw ALL both BNB and the currency token if specified
     */
    function withdrawAll() external override onlyOwnerOrAdmin {
        require(fundingState.fundsReceiver != address(0), 'Funds receiver is not set');
        uint256 balance = address(this).balance;
        if (balance > 0) {
            payable(fundingState.fundsReceiver).transfer(balance);
        }

        if (fundingState.fundByTokens && fundingState.fundToken.balanceOf(address(this)) > 0) {
            fundingState.fundToken.transfer(
                fundingState.fundsReceiver,
                fundingState.fundToken.balanceOf(address(this))
            );
        }
    }

    /**
     * When tokens are sent to the sale by mistake: withdraw the specified token.
     */
    function withdrawToken(address token, uint256 amount) external override onlyOwnerOrAdmin {
        require(amount > 0, 'Withdrawable: amount should be greater than zero');
        IERC20(token).transfer(fundingState.fundsReceiver, amount);
    }

    //// Whitelist module ////

    function getWhitelistedAddresses() public view override returns (address[] memory) {
        return wlState.addresses;
    }

    function batchSetWLAllocation(uint256 amount, address[] calldata addresses) public override onlyOwnerOrAdmin {
        for (uint256 i = 0; i < addresses.length; i++) {
            whitelistAccount(addresses[i]);
            wlState.userAlloc[addresses[i]] = amount;
            wlState.totalSpecialAlloc += amount;
        }
    }

    function batchAddWL(address[] calldata addresses) external override onlyOwnerOrAdmin {
        for (uint256 i = 0; i < addresses.length; i++) {
            whitelistAccount(addresses[i]);
        }
    }

    function batchRemoveWL(address[] calldata addresses) external override onlyOwnerOrAdmin {
        for (uint256 i = 0; i < addresses.length; i++) {
            if (wlState.isWhitelisted[addresses[i]]) {
                wlState.isWhitelisted[addresses[i]] = false;
                wlState.count -= 1;
                wlState.totalSpecialAlloc -= wlState.userAlloc[addresses[i]];
            }
        }
    }

    function whitelistAccount(address account) internal {
        if (!wlState.isWhitelisted[account]) {
            wlState.isWhitelisted[account] = true;
            wlState.addresses.push(account);
            wlState.count += 1;
        }
    }
}


// File: /contracts/interfaces/ISale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

interface ISale {
    enum TimelineStatus {
        PreRegister,
        Register,
        Prepare,
        Live,
        Fcfs,
        Ended
    }

    enum SaleType {
        Open,
        SoftCap,
        WhitelistOnly,
        LevelsOnly,
        LevelsWL
    }

    struct SaleTimeline {
        uint32 startTime;
        uint32 endTime;
        uint32 duration;
        uint32 registerTime;
        uint32 registerDuration;
        // FCFS starts from: end - fcfsDuration
        uint32 fcfsDuration;
    }

    struct UserState {
        uint256 contributed;
        uint256 balance;
        bool isWhitelisted;
        bool isRegistered;
        bool isLottery;
        bool isLotteryWinner;
        // wlAlloc + fcfsAlloc + levelAlloc
        uint256 totalAlloc;
        uint256 wlAlloc;
        uint256 fcfsAlloc;
        uint256 levelAlloc;
        string tierId;
        uint256 weight;
    }

    struct SaleState {
        TimelineStatus status;
        SaleType saleType;
        // Actual rate is: rate / 1e6
        // 6.123456 actual rate = 6123456 specified rate
        uint64 rate;
        bool isSoftCap;
        uint256 tokensForSale;
        uint256 tokensSold;
        uint256 raised;
        uint16 participants;
        uint256 firstPurchaseBlockN;
        uint256 lastPurchaseBlockN;
        // Max sell per user in currency
        uint256 minSell;
        // Min contribution per TX in currency
        uint256 maxSell;
        // If 0 – whitelist disabled
        uint16 whitelistedCount;
        // Calculated dynamically
        uint256 totalWhitelistAllocation;
    }

    struct FundingState {
        address fundsReceiver;
        bool fundByTokens;
        IERC20 fundToken;
        // 18 by default
        uint8 currencyDecimals;
    }

    struct WhitelistState {
        mapping(address => bool) isWhitelisted;
        // Special allocations per address
        mapping(address => uint256) userAlloc;
        address[] addresses;
        // How many whitelisted
        uint16 count;
        // Sum of all active special WL allocs
        uint256 totalSpecialAlloc;
    }

    event TokensPurchased(address indexed beneficiary, uint256 value, uint256 amount);
    event UserRefunded(address indexed beneficiary, uint256 value, uint256 amount);

    function getUserState(address account) external view returns (UserState memory);

    function getSaleState() external view returns (SaleState memory);

    function getSaleTimeline() external view returns (SaleTimeline memory);

    function getSaleTimelineStatus() external view returns (TimelineStatus);

    function getFundingState() external view returns (FundingState memory);

    function getWhitelistedAddresses() external view returns (address[] memory);

    // When buying via network native token
    function buyTokens(address affiliateAddress) external payable;

    // When buying via a fundToken
    function buyTokens(uint256 value, address affiliateAddress) external;

    // MUST be protected
    function batchAddBalance(address[] calldata accounts, uint256[] calldata values) external;

    // MUST be protected
    function batchSetWLAllocation(uint256 amount, address[] calldata addresses) external;

    // MUST be protected
    function batchAddWL(address[] calldata addresses) external;

    // MUST be protected
    function batchRemoveWL(address[] calldata addresses) external;

    // MUST be protected
    // [startTime, duration, registerTime, registerDuration, FCFSDuration]
    // Registration time, duration can be 0, then there's no registration at all.
    function setSaleTimeline(uint32[5] calldata _timeline) external;

    // MUST be protected
    function withdrawAll() external;

    // MUST be protected
    function withdrawToken(address token, uint256 amount) external;
}


// File: /contracts/interfaces/IReferralSale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import './ISale.sol';

interface IReferralSale is ISale {
    struct RefState {
        // One decimal, so 2.5% = 25
        uint16 percent;
        uint256 totalCommission;
        uint256 totalWithdrawn;
        uint16 totalAffiliatesN;
        uint16 totalWithdrawnN;
        mapping(address => uint16) affiliatePurchasesN;
        mapping(address => uint256) affiliateCommission;
        mapping(address => uint256) affiliateWithdrawn;
        // Can set different affiliate percent per account
        mapping(address => uint16) affiliatePercent;
    }

    struct RefStateView {
        uint256 percent;
        uint256 totalCommission;
        uint256 totalWithdrawn;
        uint256 totalAffiliatesN;
        uint256 totalWithdrawnN;
        uint256 affiliateReferralsN;
        uint256 affiliateCommission;
        uint256 affiliateWithdrawn;
    }
    
    event RefCommissionPercentChanged(uint16 percent);
    event RefCommissionWithdrawn(address indexed account, uint256 amount);
    event AffiliatePercentChanged(address indexed account, uint16 percent);

    function getReferralState(address account) external view returns (RefStateView memory);

    function withdrawReferralCommission() external;
    
    function setAffiliatePercent(address account, uint16 percent) external;
}


// File: /contracts/Adminable.sol
// SPDX-License-Identifier: MIT

pragma solidity =0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

abstract contract Adminable is Ownable, AccessControl {
    constructor() {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
    }

    modifier onlyOwnerOrAdmin() {
        require(
            owner() == _msgSender() ||
                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "Adminable: caller is not the owner or admin"
        );
        _;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

