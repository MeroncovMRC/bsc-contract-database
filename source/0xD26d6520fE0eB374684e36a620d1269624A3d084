{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IOrePool.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\ninterface IOrePool{\n    \n    function totalPower() external view returns (uint256);\n    \n    function totalBalance() external view returns (uint256);\n    \n    function balanceOf(address account) external view returns (uint256);\n    \n    function powerOf(address account) external view returns (uint256);\n    \n    function stake(uint256 amount) external returns (bool);\n    \n    function claim() external returns (bool);\n    \n    function redeem(uint256 amount) external returns (bool);\n    \n    event Stake(address indexed from, uint256 value);\n    \n    event Claim(address indexed to, uint256 value);\n    \n    event Redeem(address indexed to, uint256 value);\n\n}"},"NFTOrePool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"./IERC20.sol\";\nimport \"./Context.sol\";\nimport \"./IOrePool.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\n\ncontract NFTOrePool is Context,IOrePool,Ownable {\n     using SafeMath for uint256;\n     \n    //income balance\n    mapping (address =\u003e uint256) private _balance;\n    \n    //ore pool self power\n    mapping (address =\u003e uint256) private _power;\n    \n    //ore pool total power\n    uint256 private _totalPower;\n    \n    //income total balance\n    uint256 private _totalBalance;\n\n    uint256 public rewardAmount = 6 * 10**18;\n    \n    IERC20 public nftToken;\n\n    mapping(address =\u003e bool) public isOrePoolHolder;\n\taddress[] private _orePoolHolderArray;\n\tmapping (address =\u003e uint256) private _orePoolHolderIndex;\n\n    function shareholderChange(address shareholder) internal {\n        if(isOrePoolHolder[shareholder]){      \n            if(powerOf(shareholder) == 0){\n                removeShareholder(shareholder);      \n            }\n            return;\n        }\n\n        if(powerOf(shareholder) == 0) return;\n\n        _orePoolHolderIndex[shareholder] = _orePoolHolderArray.length;\n        _orePoolHolderArray.push(shareholder);\n        isOrePoolHolder[shareholder] = true;\n    }\n\n    function orePoolHolderCount() public view returns(uint256){\n       return _orePoolHolderArray.length;\n    }\n\n    uint256 public currentIndex;\n    uint256 public batchCount = 1000;\n\n    function reward() onlyOwner public returns(bool) {\n        uint256 shareholderCount = _orePoolHolderArray.length;\n        if(shareholderCount == 0)return false;\n\n        uint256 counter = 0;\n        while(counter \u003c batchCount \u0026\u0026 currentIndex \u003c shareholderCount){\n            address thisAddress = _orePoolHolderArray[currentIndex];\n            uint256 thisPower = _power[thisAddress];\n            //\n            uint256 amount = thisPower.mul(rewardAmount).div(_totalPower);\n            _balance[thisAddress] = _balance[thisAddress].add(amount);\n            _totalBalance = _totalBalance.add(amount);\n            counter++;\n            currentIndex++;\n        }\n\n        if(currentIndex \u003e= shareholderCount){\n            currentIndex = 0;\n        }\n\n        return true;\n    }\n\n    function removeShareholder(address shareholder) internal {\n        _orePoolHolderArray[_orePoolHolderIndex[shareholder]] = _orePoolHolderArray[_orePoolHolderArray.length-1];\n        _orePoolHolderIndex[_orePoolHolderArray[_orePoolHolderArray.length-1]] = _orePoolHolderIndex[shareholder];\n        _orePoolHolderArray.pop();\n        isOrePoolHolder[shareholder] = false;\n    }\n    \n    function setNftToken(IERC20 nftToken_) onlyOwner public returns (bool){\n        nftToken = nftToken_;\n        return true;\n    }\n\n    function setRewardAmount(uint256 rewardAmount_) onlyOwner public returns (bool){\n        rewardAmount = rewardAmount_;\n        return true;\n    }\n    \n    function totalPower() public view override returns (uint256) {\n        return _totalPower;\n    }\n    \n    function totalBalance() public view override returns (uint256) {\n        return _totalBalance;\n    }\n    \n    function balanceOf(address account) public view override returns (uint256) {\n        return _balance[account];\n    }\n    \n    function powerOf(address account) public view override returns (uint256) {\n        return _power[account];\n    }\n    \n    function stake(uint256 amount) public override returns (bool){\n        _stake(_msgSender(),amount);\n        shareholderChange(_msgSender());\n        return true;\n    }\n    \n    function _stake(address sender,uint256 amount) internal virtual{\n        require(sender != address(0), \"OrePool: transfer from the zero address\");\n        require(nftToken.transferFrom(msg.sender, address(this), amount), \"No approval or insufficient balance\");\n        \n        _power[sender] = _power[sender].add(amount);\n        _totalPower = _totalPower.add(amount);\n        \n        emit Stake(sender,amount);\n    }\n\n    function stakeAdd(address account,uint256 amount) onlyOwner public virtual returns(bool){\n        require(account != address(0), \"OrePool: transfer from the zero address\");\n\n        _power[account] = _power[account].add(amount);\n        _totalPower = _totalPower.add(amount);\n\n        shareholderChange(account);\n        return true;\n    }\n\n    function stakeSub(address account,uint256 amount) onlyOwner public virtual returns(bool){\n        require(account != address(0), \"OrePool: transfer from the zero address\");\n\n        _power[account] = _power[account].sub(amount);\n        _totalPower = _totalPower.sub(amount);\n\n        shareholderChange(account);\n        return true;\n    }\n\n    function balanceSub(address account,uint256 amount) onlyOwner public virtual returns(bool){\n        require(account != address(0), \"OrePool: transfer from the zero address\");\n\n        _balance[account] = _balance[account].sub(amount);\n        _totalBalance = _totalBalance.sub(amount);\n\n        return true;\n    }\n\n    function balanceAdd(address account,uint256 amount) onlyOwner public virtual returns(bool){\n        require(account != address(0), \"OrePool: transfer from the zero address\");\n\n        _balance[account] = _balance[account].add(amount);\n        _totalBalance = _totalBalance.add(amount);\n\n        return true;\n    }\n    \n    function claim() public override returns (bool){\n        _claim(_msgSender());\n        return true;\n    }\n    \n    function _claim(address sender) internal virtual{\n       require(sender != address(0), \"OrePool: transfer from the zero address\");\n      \n       uint256 thisBalance = nftToken.balanceOf(address(this));\n       uint256 claimBalance = _balance[sender];\n       \n       require(claimBalance \u003e0 , \"OrePool: balance must be greater than 0 \");\n       require(thisBalance \u003e=claimBalance , \"OrePool: contract balance must be greater than claim balance\");\n       \n       _balance[sender] = _balance[sender].sub(claimBalance,\"Balance sub error\");\n       _totalBalance = _totalBalance.sub(claimBalance);\n\n       nftToken.transfer(sender,claimBalance);\n       \n       emit Claim(sender,claimBalance);\n    }\n    \n    function redeem(uint256 amount) public override returns (bool){\n        _redeem(_msgSender(),amount);\n        shareholderChange(_msgSender());\n        return true;\n    }\n    \n    function _redeem(address sender,uint256 amount) internal virtual{\n        require(sender != address(0), \"OrePool: transfer from the zero address\");\n        require(amount \u003e0, \"OrePool: transfer from the zero amount\");\n        require(_power[sender] \u003e=amount, \"OrePool: transfer amount exceeds balance\");\n\n       uint256 thisBalance = nftToken.balanceOf(address(this));\n       require(thisBalance \u003e= amount , \"OrePool: contract balance must be greater than redeem amount\");\n       \n        _power[sender] = _power[sender].sub(amount, \"OrePool: transfer amount exceeds balance\");\n        _totalPower = _totalPower.sub(amount, \"OrePool: transfer amount exceeds balance\");\n        \n       // transfer\n       nftToken.transfer(sender,amount);\n       emit Redeem(sender,amount);\n    }\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}"}}