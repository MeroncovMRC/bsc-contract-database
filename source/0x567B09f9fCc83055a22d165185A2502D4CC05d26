{"Context.sol":{"content":"/**\r\n * @title Context\r\n * @dev Context contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/utils/Context.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"/**\n * @title ERC20\n * @dev ERC20 contract\n *\n * @author - \u003cUSDFI TRUST\u003e\n * for the USDFI Trust\n *\n * SPDX-License-Identifier: GNU GPLv2\n *\n * File @openzeppelin/contracts/token/ERC20/ERC20.sol\n *\n **/\n\npragma solidity 0.6.12;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Manager.sol\";\n\ncontract ERC20 is Context, IERC20, Manager, MinterRole {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * These three values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes:\n     * it does not affect any of the arithmetic in the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default of 18.\n     *\n     * WARNING: This function should only be called by the developer.\n     * Most applications which interact with token contracts do not expect\n     * {decimals} to change and may work incorrectly if changed.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     * Send amount sub fee or without fee.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        whenNotPaused\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        whenNotPaused\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        whenNotPaused\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     * Send amount - with fee or without fee.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override whenNotPaused returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Automatically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} which can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        whenNotPaused\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Automatically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} which can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient` and `feeReceiver`.\n     *\n     * This is internal function is equivalent to {transfer}, and used also for automatic token fees.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address\n     * - `sender` must have a balance of at least `amount`\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual whenNotPaused {\n        require(\n            whitelist.isWhitelisted(sender) == true ||\n                whitelist.isWhitelisted(recipient) == true,\n            \"not whitelisted\"\n        );\n\n        require(\n            blacklist.isBlacklisted(sender) == false \u0026\u0026\n                blacklist.isBlacklisted(recipient) == false,\n            \"Blacklisted\"\n        );\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Emits a {burn} event and sets the BlackFund address to 0.\n     *\n     * Requirements:\n     *\n     * - only `onlyMinter` can trigger the destroyBlackFunds\n     * - `_blackListedUser` is on the blacklist\n     *\n     */\n    function destroyBlackFunds(address _blackListedUser) public onlyMinter {\n        require(\n            blacklist.isBlacklisted(_blackListedUser) == true,\n            \"is not Blacklisted\"\n        );\n\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\n\n        _burn(_blackListedUser, dirtyFunds);\n    }\n\n    /** @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * Emits an Admin {Transfer} event on the amount of Black Funds.\n     *\n     * Requirements:\n     *\n     * - only `onlyMinter` can trigger the redeemBlackFunds\n     * - `sender` must be on the blacklist.\n     *\n     */\n    function redeemBlackFunds(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public onlyMinter {\n        require(blacklist.isBlacklisted(sender) == true, \"is not Blacklisted\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `freeSupply` must be larger than the amount to be created.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        freeMintSupply = freeMintSupply.sub(\n            amount,\n            \"ERC20: no more free supply (total)\"\n        );\n        freeMintSupplyMinter[msg.sender] = freeMintSupplyMinter[msg.sender].sub(\n            amount,\n            \"ERC20: no more free supply (minter)\"\n        );\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * Purpose:\n     * onlyMinter mints tokens on the _to address\n     *\n     * @param _amount - amount of newly issued tokens\n     * @param _to - address for the new issued tokens\n     */\n    function mint(address _to, uint256 _amount) public onlyMinter {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address\n     * - `account` must have at least `amount` tokens\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` tokens.\n     *\n     * This internal function is the equivalent to `approve`, and can be used to\n     * set automatic allowances for certain subsystems etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address\n     * - `spender` cannot be the zero address\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual whenNotPaused {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n"},"IBlacklist.sol":{"content":"/**\r\n * @title Interface Blacklist\r\n * @dev IBlacklist contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IBlacklist {\r\n    function isBlacklisted(address _address) external view returns (bool);\r\n}\r\n"},"IERC20.sol":{"content":"/**\r\n * @title Interface ERC20\r\n * @dev IERC20 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both: the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IWhitelist.sol":{"content":"/**\r\n * @title Interface whitelist\r\n * @dev IWhitelist contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWhitelist {\r\n    function isWhitelisted(address _address) external view returns (bool);\r\n}\r\n"},"Manager.sol":{"content":"/**\n * @title Manager\n * @dev Manager contract\n *\n * @author - \u003cUSDFI TRUST\u003e\n * for the USDFI Trust\n *\n * SPDX-License-Identifier: GNU GPLv2\n *\n **/\n\npragma solidity 0.6.12;\n\nimport \"./MinterRole.sol\";\nimport \"./IWhitelist.sol\";\nimport \"./IBlacklist.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Pausable.sol\";\n\ncontract Manager is Pausable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Outputs the external contracts.\n     */\n    IWhitelist public whitelist;\n    IBlacklist public blacklist;\n\n    /**\n     * @dev Outputs the `freeMintSupply` variable.\n     */\n    uint256 public freeMintSupply;\n    mapping(address =\u003e uint256) public freeMintSupplyMinter;\n\n    /**\n     * @dev Sets the {freeMintSupply} up so that the minter can create new coins.\n     *\n     * The manager decides how many new coins may be created by the minter.\n     * The function can only increase the amount of new free coins.\n     *\n     * Requirements:\n     *\n     * - only `manager` can update the `setFreeMintSupplyCom`\n     */\n    function setFreeMintSupplyCom(address _address, uint256 _supply)\n        public\n        onlyManager\n    {\n        freeMintSupply = freeMintSupply.add(_supply);\n        freeMintSupplyMinter[_address] = freeMintSupplyMinter[_address].add(\n            _supply\n        );\n    }\n\n    /**\n     * @dev Sets the {freeMintSupply} down so that the minter can create fewer new coins.\n     *\n     * The manager decides how many new coins may be created by the minter.\n     * The function can only downgrade the amount of new free coins.\n     *\n     * Requirements:\n     *\n     * - only `manager` can update the `setFreeMintSupplySub`\n     */\n    function setFreeMintSupplySub(address _address, uint256 _supply)\n        public\n        onlyManager\n    {\n        freeMintSupply = freeMintSupply.sub(_supply);\n        freeMintSupplyMinter[_address] = freeMintSupplyMinter[_address].sub(\n            _supply\n        );\n    }\n\n    /**\n     * @dev Sets `external smart contracts`.\n     *\n     * These functions have the purpose to be flexible and to connect further automated systems\n     * which will require an update in the longer term.\n     *\n     * Requirements:\n     *\n     * - only `owner` can update the external smart contracts\n     * - `external smart contracts` must be correct and work\n     */\n\n    function updateWhitelistContract(address _whitelistContract)\n        public\n        onlyOwner\n    {\n        whitelist = IWhitelist(_whitelistContract);\n    }\n\n    /**\n     * @dev Sets `external smart contracts`.\n     *\n     * These functions have the purpose to be flexible and to connect further automated systems\n     * which will require an update in the longer term.\n     *\n     * Requirements:\n     *\n     * - only `owner` can update the external smart contracts\n     * - `external smart contracts` must be correct and work\n     */\n\n    function updateBlacklistContract(address _blacklistContract)\n        public\n        onlyOwner\n    {\n        blacklist = IBlacklist(_blacklistContract);\n    }\n}\n"},"ManagerRole.sol":{"content":"/**\r\n * @title Manager Role\r\n * @dev ManagerRole contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Roles.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract ManagerRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private _managers;\r\n\r\n    constructor() internal {\r\n        _addManager(msg.sender);\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(\r\n            isManager(msg.sender),\r\n            \"ManagerRole: caller does not have the Manager role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns account address is Manager true or false.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function isManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address to the Manager role.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function addManager(address account) public onlyOwner {\r\n        _addManager(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes address from the Manager role.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function renounceManager(address account) public onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address to the Manager role (internally).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function _addManager(address account) internal {\r\n        _managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes address from the Manager role (internally).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function _removeManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n"},"MinterRole.sol":{"content":"/**\r\n * @title Minter Role\r\n * @dev MinterRole contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Roles.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract MinterRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor() internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(\r\n            isMinter(msg.sender),\r\n            \"MinterRole: caller does not have the Minter role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns account address is Minter true or false.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address to the Minter role.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function addMinter(address account) public onlyOwner {\r\n        _addMinter(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes address from the Minter role.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function renounceMinter(address account) public onlyOwner {\r\n        _removeMinter(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds address to the Minter role (internally).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes address from the Minter role (internally).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - address `account` cannot be the zero address.\r\n     */\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"/**\r\n * @title Ownable\r\n * @dev Ownable contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/access/Ownable.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any other account than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"Pausable.sol":{"content":"/**\r\n * @title Pausable\r\n * @dev Pausable contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/security/Pausable.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./ManagerRole.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism which can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It makes the modifiers\r\n * `whenNotPaused` and `whenPaused` available, which can be applied to\r\n * the functions of your contract. Note that modifiers will not be pausable by\r\n * the inclusion of the module only. Modifiers need to be triggered.\r\n */\r\ncontract Pausable is ManagerRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause triggers stopped state.\r\n     */\r\n    function pause() public onlyManager whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause - returns to normal state.\r\n     */\r\n    function unpause() public onlyManager whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n"},"receiptSTABLE.sol":{"content":"/**\r\n * @title receipt STABLE\r\n * @dev receiptSTABLE contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\ncontract receiptSTABLE is ERC20 {\r\n    constructor() public ERC20(\"receiptSTABLE\", \"reSTABLE\") {}\r\n}\r\n"},"Roles.sol":{"content":"/**\r\n * @title Roles\r\n * @dev Roles contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/access/Roles.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address =\u003e bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Gives an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an account has the role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"/**\r\n * @title Safe Math\r\n * @dev SafeMath contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/utils/math/SafeMath.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (if the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (if the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers (unsigned integer module).\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}