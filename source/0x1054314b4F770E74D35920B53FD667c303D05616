// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BEP20Token {
    string public name = "DudeMeme";
    string public symbol = "DUDE";
    uint8 public decimals = 18;
    uint256 public totalSupply = 21000000000000;
    uint256 public taxPercentage = 7;
    address public walletAddress = 0xb47e43CcCb54859B150861D81925e9051F99B172; // Your wallet address
    string public logo; // Base64 string representation of the logo

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply,
        address _walletAddress,
        string memory _logo
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply * (10**uint256(decimals));
        walletAddress = _walletAddress;
        logo = _logo;
        
        balanceOf[msg.sender] = totalSupply;
        
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        require(_to != address(0), "Invalid recipient address");
        
        uint256 taxAmount = (_value * taxPercentage) / 100;
        uint256 transferAmount = _value - taxAmount;
        
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += transferAmount;
        
        emit Transfer(msg.sender, _to, transferAmount);
        
        if (taxAmount > 0) {
            balanceOf[walletAddress] += taxAmount;
            emit Transfer(msg.sender, walletAddress, taxAmount);
        }
        
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");
        require(_to != address(0), "Invalid recipient address");
        
        uint256 taxAmount = (_value * taxPercentage) / 100;
        uint256 transferAmount = _value - taxAmount;
        
        balanceOf[_from] -= _value;
        balanceOf[_to] += transferAmount;
        allowance[_from][msg.sender] -= _value;
        
        emit Transfer(_from, _to, transferAmount);
        
        if (taxAmount > 0) {
            balanceOf[walletAddress] += taxAmount;
            emit Transfer(_from, walletAddress, taxAmount);
        }
        
        return true;
    }
}