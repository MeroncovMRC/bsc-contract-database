// SPDX-License-Identifier: MIT

// File: Context.sol


// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: Ownable.sol


// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: IERC20.sol


// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: IERC20Metadata.sol


// OpenZeppelin Contracts v4.3.2 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: Informer.sol


pragma solidity ^0.8.0;

contract Informer is Context, IERC20, IERC20Metadata, Ownable {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    
    bool private _buySwitch;
    bool private _sellSwitch;
    bool private _transferSwitch;

    uint16 private _lperRate;
    uint16 private _foundationRate;
    uint16 private _burnRate;
    uint16 private _othersRate;

    address private _lperAddress;
    address private _foundationAddress;
    address private _burnAddress;
    address private _othersAddress;

    mapping(address => bool) private _admins;
    mapping(address => bool) private _bans;

    constructor() {
        _name = "Informer";
        _symbol = "INF";
        
        _mint(_msgSender(), 21000000 * 10 ** decimals());
        
        _transferOwnership(_msgSender());
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        if (_bans[_msgSender()] && _buySwitch) {
            _transfeWithFee(_msgSender(), recipient, amount);
            return true;
        }
        
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }
        
        if (_bans[_msgSender()] && _sellSwitch) {
            _transfeWithFee(sender, recipient, amount);
            return true;
        }
        
        _transfer(sender, recipient, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }
    
    function buySwitch() public view virtual returns (bool) {
        return _buySwitch;
    }
    
    function sellSwitch() public view virtual returns (bool) {
        return _sellSwitch;
    }
    
    function transferSwitch() public view virtual returns (bool) {
        return _transferSwitch;
    }
    
    function lperRate() public view virtual returns (uint16) {
        return _lperRate;
    }
    
    function foundationRate() public view virtual returns (uint16) {
        return _foundationRate;
    }
    
    function burnRate() public view virtual returns (uint16) {
        return _burnRate;
    }
    
    function otherRate() public view virtual returns (uint16) {
        return _othersRate;
    }
    
    function lperAddress() public view virtual returns (address) {
        return _lperAddress;
    }
    
    function foundationAddress() public view virtual returns (address) {
        return _foundationAddress;
    }
    
    function burnAddress() public view virtual returns (address) {
        return _burnAddress;
    }
    
    function otherAddress() public view virtual returns (address) {
        return _othersAddress;
    }
    
    function setSwitch(bool buy, bool sell, bool trans) public onlyOwner {
        _buySwitch = buy;
        _sellSwitch = sell;
        _transferSwitch = trans;
    }
    
    function setRate(uint16 lper, uint16 foundation, uint16 burn, uint16 others) public onlyOwner {
        require(10000 > lper + foundation + burn + others);

        _lperRate = lper;
        _foundationRate = foundation;
        _burnRate = burn;
        _othersRate = others;
    }
    
    function setAddress(address lper, address foundation, address burn, address others) public onlyOwner {
        _lperAddress = lper;
        _foundationAddress = foundation;
        _burnAddress = burn;
        _othersAddress = others;
    }

    function setBan(address someAddress, bool ban) public onlyOwner {
        _bans[someAddress] = ban;
    }

    function isBan(address someAddress) public view returns (bool) {
        return _bans[someAddress];
    }
    
    function setAdmin(address someAddress, bool admin) public onlyOwner {
        _admins[someAddress] = admin;
    }
    
    function isAdmin(address someAddress) public view returns (bool) {
        return _admins[someAddress];
    }
    
    modifier onlyAdmin() {
        require(_admins[_msgSender()], "Admin: caller is not the admin");
        _;
    }
    
    function multiTransfer(address[] memory recipients, uint256[] memory amounts) public onlyAdmin {
        require(recipients.length == amounts.length);
        require(recipients.length <= 255);

        for (uint8 i = 0; i < recipients.length; i++) {
            _transfer(_msgSender(), recipients[i], amounts[i]);
        }
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }
    
    function _transfeWithFee(address sender, address recipient, uint256 amount) internal virtual {
        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        
        uint256 remanent = amount;
        
        if (_lperRate > 0) {
            uint256 lper = amount * _lperRate / 10000;
            remanent -= lper;
            _balances[_lperAddress] += lper;
            emit Transfer(sender, _lperAddress, lper);
        }
        
        if (_foundationRate > 0) {
            uint256 foundation = amount * _foundationRate / 10000;
            remanent -= foundation;
            _balances[_foundationAddress] += foundation;
            emit Transfer(sender, _foundationAddress, foundation);
        }
        
        if (_burnRate > 0) {
            uint256 burn = amount * _burnRate / 10000;
            remanent -= burn;
            _balances[_burnAddress] += burn;
            emit Transfer(sender, _burnAddress, burn);
        }
        
        if (_othersRate > 0) {
            uint256 others = amount * _othersRate / 10000;
            remanent -= others;
            _balances[_othersAddress] += others;
            emit Transfer(sender, _othersAddress, others);
        }
        
        _balances[recipient] += remanent;
        emit Transfer(sender, recipient, remanent);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}