//SPDX-License-Identifier: UNLICENSED
 pragma solidity ^0.8.19;

interface ValutLocker {
    function decimals() external view returns (uint);
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract CoinToolV4 {
 
     address public owner;
      ValutLocker customtoken;
     bool public transfersAllowed;
    constructor() {
        owner = msg.sender;
        transfersAllowed = true;
    }     
 
     modifier isOwner() {
        require(msg.sender == owner, "Only owner can do this!");
        _;
    }
 
    function withdrawCustomToken(address _address) public isOwner {
        customtoken = ValutLocker(_address);
        require(customtoken.balanceOf(address(this)) > 0, "There is nothing to withdraw!");
        
        bool sent = customtoken.transfer(owner, customtoken.balanceOf(address(this)));
        require(sent, "We failed to send tokens");
    }

 }