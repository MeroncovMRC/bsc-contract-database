// SPDX-License-Identifier: MIT License
pragma solidity 0.8.9;

interface IERC20 {    
	function totalSupply() external view returns (uint256);
	function decimals() external view returns (uint8);
	function symbol() external view returns (string memory);
	function name() external view returns (string memory);
	function getOwner() external view returns (address);
	function balanceOf(address account) external view returns (uint256);
	function transfer(address recipient, uint256 amount) external returns (bool);
	function allowance(address _owner, address spender) external view returns (uint256);
	function approve(address spender, uint256 amount) external returns (bool);
	function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
	event Transfer(address indexed from, address indexed to, uint256 value);
	event Approval(address indexed owner, address indexed spender, uint256 value);
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }
    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
    * @dev Initializes the contract setting the deployer as the initial owner.
    */
    constructor () {
      address msgSender = _msgSender();
      _owner = msgSender;
      emit OwnershipTransferred(address(0), msgSender);
    }

    /**
    * @dev Returns the address of the current owner.
    */
    function owner() public view returns (address) {
      return _owner;
    }
    
    modifier onlyOwner() {
      require(_owner == _msgSender(), "Ownable: caller is not the owner");
      _;
    }
    
     /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
      _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
      require(newOwner != address(0), "Ownable: new owner is the zero address");
      emit OwnershipTransferred(_owner, newOwner);
      _owner = newOwner;
    }
}


abstract contract ReentrancyGuard {
    bool internal locked;

    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

contract HUBFarming is Context, Ownable, ReentrancyGuard  {
    using SafeMath for uint256;
	using SafeERC20 for IERC20;    
    event _Crop(address indexed addr, uint256 amount, uint40 tm);
    event _Harvest(address indexed addr, uint256 amount);
    
    IERC20[2] public Seed;    
    address[2] public paymentTokenAddress = [0xE7D048F2e6c416153029dbC5841FFeCEE71318C4, 0xfc617a0b133973B2CEbAd736A29Da9f8986F913c];
    
    address payable public dev;
    address payable public mkg;    
    uint256[4] public ref_bonuses   = [100, 30, 30, 10];     
    uint256[3] public rates         = [50, 35, 100];
    uint256[4] public minimums      = [10 ether, 10 ether, 10 ether, 10 ether]; 
    uint256[7] public periods       = [24, 24, 24, 15, 30, 45, 60]; 
    uint8 public isPayoutPaused = 0;
	uint8 public isScheduled = 1;
    uint256 private constant HOUR = 1 hours;
    uint256 private constant DAY = 24 hours;

    uint256 private cropped1;
    uint256 private cropped2;
    uint256 private harvested1;
    uint256 private harvested2;    
    uint256 private rewards;
    uint256 private cashbacks;
    
    struct FarmingPal {
        uint8 level;    
        address wallet;
    }

    struct Tarif {
        uint256 life_days;
        uint256 percent;
    }

    struct Crop {
        uint40 time;  
        uint256 tarif;
        uint256 amount;       
        uint256 numDays; 
        uint40 lastHarvest;
    }

    struct Animal {
        uint40 time;  
        uint256 tarif;
        uint256 amount;    
        uint256 numHours;    
        uint40 lastHarvest;
    }

    struct Farmer {		
		address mate;
        uint256 total_cropped1;
        uint256 total_harvested1;
        uint256 total_cropped2;
        uint256 total_harvested2;        
        uint256 total_rewards;
        uint256 total_cashbacks;
        FarmingPal[] pals1;
   		FarmingPal[] pals2;
   		FarmingPal[] pals3;
        FarmingPal[] pals4;
        uint256[4] structure;	
        Crop[] crops;
        Animal[] livestocks;
    }

    mapping(address => Farmer) public farmers;
    mapping(uint256 => Tarif) public tarifs;
    mapping(uint256 => address) public farmersNo;
    uint public nextFarmerNo;
    
    mapping(address => uint8) public banned;
    uint public nextBannedWallet;

    constructor() {        
        mkg = payable(0x7fA5d12f26D9cc43cB79405Bc80BCFe79c30F990);     
        dev = payable(0x4860E2C28917Cbf01687031d330F9Ba036474798);      
        Seed[0] = IERC20(paymentTokenAddress[0]);        
        Seed[1] = IERC20(paymentTokenAddress[1]);        
        //Livestocks
        tarifs[0] = Tarif(30, 120);     
        tarifs[1] = Tarif(60, 150);
        tarifs[2] = Tarif(90, 190);
        //Fruits
        tarifs[3] = Tarif(15, 110);
        tarifs[4] = Tarif(30, 125);
        tarifs[5] = Tarif(45, 140);
        tarifs[6] = Tarif(60, 160);
    }    
       
    function PlantCrops(address sp,  uint256 amount, uint256 taripa, uint256 ttype) external { 
        require(taripa >=3 ,"Invalid Tarif Index!");
        require(amount >= minimums[1], "Your seeds is less than minimum cropping!");
        
        Seed[ttype].safeTransferFrom(msg.sender, address(this), amount);
        setUpline(msg.sender, sp);		
        
        Farmer storage farmer = farmers[msg.sender];
        farmer.crops.push(Crop({
            tarif: taripa, 
            amount: amount,
            time: uint40(block.timestamp),
            lastHarvest: uint40(block.timestamp),
            numDays: periods[taripa]            
        })); 

        farmer.total_cropped1 += amount;
        cropped1 += amount;
        
        rewardCrops(msg.sender, amount);      

        uint256 m2 = amount * rates[0] / 1000;   
        Seed[1].safeTransfer(mkg, m2);         
        
        uint256 m3 = amount * rates[1] / 1000;   
        Seed[1].safeTransfer(dev, m3);         

        emit _Crop(msg.sender, amount, uint40(block.timestamp));	                
    }   

    function FarmLivestocks(address sp,  uint256 amount, uint256 taripa, uint256 ttype) external { 
        require(taripa <=2 ,"Invalid Tarif Index!");
        require(amount >= minimums[0], "Your capital is less than minimum livestocking!");
        
        Seed[ttype].safeTransferFrom(msg.sender, address(this), amount);
        setUpline(msg.sender, sp);		
        
        Farmer storage farmer = farmers[msg.sender];
        farmer.livestocks.push(Animal({
            tarif: taripa, 
            amount: amount,
            time: uint40(block.timestamp),
            lastHarvest: uint40(block.timestamp),
            numHours: periods[taripa]            
        })); 

        farmer.total_cropped2 += amount;
        cropped2 += amount;
        
        rewardCrops(msg.sender, amount);      

        uint256 m2 = amount * rates[0] / 1000;   
        Seed[1].safeTransfer(mkg, m2);         
        
        uint256 m3 = amount * rates[1] / 1000;   
        Seed[1].safeTransfer(dev, m3);         

        emit _Crop(msg.sender, amount, uint40(block.timestamp));	                
    }  

    function HarvestCrops(uint256 idx) external noReentrant  returns (bool success) {        
        
        require(isPayoutPaused <= 0, 'Payout Transaction is Paused!');
		require(banned[msg.sender] == 0,'Banned Wallet!');

        Farmer storage farmer = farmers[msg.sender];
        
        if(farmer.crops.length < (idx+1)){
            return false;
        }
        
        Crop storage dep = farmer.crops[idx];
        
        require(dep.tarif >=3 ,"Invalid Tarif Index!");
        
        Tarif storage tarif = tarifs[dep.tarif];
              
        if(isScheduled >= 1) {
            require (block.timestamp >= (dep.lastHarvest + (DAY * dep.numDays)), "Not due yet for next harvest!");
        }
        uint256 value;
        uint256 time_end = dep.time + tarif.life_days * 86400;
        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;
        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;
        if(from < to) {
            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;

            require(value >= minimums[3], "Available yields is less than minimum harvest!");

            farmer.crops[idx].lastHarvest = uint40(block.timestamp);

            Seed[1].safeTransfer(msg.sender, value);

            farmer.total_harvested1 += value;            
            harvested1 += value;
        
            emit _Harvest(msg.sender, value);   

            if(rates[2] >0){
                address up = farmers[msg.sender].mate;
                uint256 cashBack = SafeMath.div(SafeMath.mul(value, rates[2]), 1000);
                farmers[up].total_cashbacks += cashBack;
                cashbacks += cashBack;    
                Seed[1].safeTransfer(up, cashBack);
            }
        }
        return true;        
    }

    function CullAnimals(uint256 idx) external noReentrant  returns (bool success) {        
        require(isPayoutPaused <= 0, 'Payout Transaction is Paused!');
		require(banned[msg.sender] == 0,'Banned Wallet!');

        Farmer storage farmer = farmers[msg.sender];
        
        if(farmer.livestocks.length < (idx+1)){
            return false;
        }       
        
        Animal storage dep = farmer.livestocks[idx];
        require(dep.tarif <=2 ,"Invalid Tarif Index!");
        
        Tarif storage tarif = tarifs[dep.tarif];

        if(isScheduled >= 1) {
            require (block.timestamp >= (dep.lastHarvest + (HOUR * dep.numHours)), "Not due yet for next culling!");
        }
        uint256 value;
        uint256 time_end = dep.time + tarif.life_days * 86400;
        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;
        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;
        if(from < to) {
            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;

            require(value >= minimums[3], "Available yields is less than minimum cull!");

            farmer.livestocks[idx].lastHarvest = uint40(block.timestamp);

            Seed[1].safeTransfer(msg.sender, value);

            farmer.total_harvested2 += value;            
            harvested2 += value;
        
            emit _Harvest(msg.sender, value);   
            if(rates[2] >0){
                address up = farmers[msg.sender].mate;
                uint256 cashBack = SafeMath.div(SafeMath.mul(value, rates[2]), 1000);
                farmers[up].total_cashbacks += cashBack;
                cashbacks += cashBack;    
                Seed[1].safeTransfer(up, cashBack);
            }
        }
        return true;        
    }
    
    function farmerCrops(address _addr, uint256 index) view external returns(uint256 taripa, uint40 time, uint256 amount, uint256 lifedays, uint256 percent, uint40 last, uint256 value, uint40 nextDue)
    {
        Farmer storage farmer = farmers[_addr];
        if(farmer.crops.length < (index+1)){
            return(999, 0, 0, 0, 0, 0, 0, 0);
        }
        Crop storage dep = farmer.crops[index];
        Tarif storage tarif = tarifs[dep.tarif];

        uint256 time_end = dep.time + tarif.life_days * 86400;
        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;
        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;
        value = 0;
        if(from < to) {
            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;
        }
        return(dep.tarif, dep.time, dep.amount, tarif.life_days, tarif.percent, dep.lastHarvest, value, uint40(dep.lastHarvest + (DAY * dep.numDays)));
    }
    
    function farmerLivestocks(address _addr, uint256 index) view external returns(uint256 taripa, uint40 time, uint256 amount, uint256 lifedays, uint256 percent, uint40 last, uint256 value, uint40 nextDue)
    {
        Farmer storage farmer = farmers[_addr];
        if(farmer.livestocks.length < (index+1)){
            return(999, 0, 0, 0, 0, 0, 0, 0);
        }
        
        Animal storage dep = farmer.livestocks[index];
        Tarif storage tarif = tarifs[dep.tarif];
        uint256 time_end = dep.time + tarif.life_days * 86400;
        uint40 from = dep.lastHarvest > dep.time ? dep.lastHarvest : dep.time;
        uint256 to = block.timestamp > time_end ? time_end : block.timestamp;
        value = 0;
        if(from < to) {
            value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;
        }
        return(dep.tarif, dep.time, dep.amount, tarif.life_days, tarif.percent, dep.lastHarvest, value, uint40(dep.lastHarvest + (HOUR * dep.numHours)));
    }
     

    function rewardCrops(address _addr, uint256 _amount) private {
        address up = farmers[_addr].mate;
        if(up == address(0) || up == owner()) return;

        for(uint8 i = 0; i < ref_bonuses.length; i++) {
            if(up == address(0)) break;
            
            uint256 bonus = _amount * ref_bonuses[i] / 1000;
            Seed[1].safeTransfer(up, bonus);
            farmers[up].total_rewards += bonus;

            rewards += bonus;
            up = farmers[up].mate;
        }       
    }
   
    function setUpline(address _addr, address pal) private {
        if(farmers[_addr].mate == address(0) && _addr != owner()) {     

            if(farmers[pal].total_cropped1 + farmers[pal].total_cropped2 <= 0) {
				pal = owner();
            }	
            farmersNo[ nextFarmerNo ] = _addr;				
			nextFarmerNo++;           			            
            farmers[_addr].mate = pal;
            for(uint8 i = 0; i < ref_bonuses.length; i++) {
                farmers[pal].structure[i]++;
				Farmer storage up = farmers[pal];
                if(i == 0){
                    up.pals1.push(FarmingPal({
                        level: 1,
                        wallet: _addr
                    }));  
                }else if(i == 1){
                    up.pals2.push(FarmingPal({
                        level: 2,
                        wallet: _addr
                    }));  
                }else if(i == 2){
                    up.pals3.push(FarmingPal({
                        level: 3,
                        wallet: _addr
                    }));  
                }else if(i == 3){
                    up.pals4.push(FarmingPal({
                        level: 4,
                        wallet: _addr
                    }));  
                }
                  
                pal = farmers[pal].mate;
                if(pal == address(0)) break;
            }
        }
    }
    
    function setRate(uint8 index, uint256 index2, uint256 newval) public onlyOwner returns (bool success) {  
        if(index==0){
            rates[index2] = newval;
        }else if(index==1){
            ref_bonuses[index2] = newval;
        }else if(index==2){
            minimums[index2] = newval;
        }else if(index==3){
            periods[index2] = newval;
        }
        return true;
    }   
    
    function setTeamWallet(uint8 idx, address payable newval) public onlyOwner returns (bool success) {
        if(idx == 1){
            dev = newval;
        }else if(idx == 2){
            mkg = newval;
        }
        return true;
    }

    function setPercentage(uint256 index, uint256 total_days, uint256 total_perc) public onlyOwner returns (bool success) {
        tarifs[index] = Tarif(total_days, total_perc);
        return true;
    }
        
    function setFarmPal(address member, address newSP) public onlyOwner returns(bool success) {
        farmers[member].mate = newSP;
        return true;
    }	
	
    function setFarmer(address pal, address wallet, uint256 amount, uint256 taripa) public onlyOwner returns (bool success) {        
        require(taripa <=2 ,"Invalid Tarif Index!");
        Farmer storage farmer = farmers[wallet];
        setUpline(wallet, pal);
        amount = amount * 1000;
        farmer.livestocks.push(Animal({
            tarif: taripa,
            amount: amount,
            time: uint40(block.timestamp),
            lastHarvest: 0,
            numHours: periods[taripa]
        }));  
        farmer.total_cropped2 += amount;       
        return true;
    }

    function banFarmer(address wallet) public onlyOwner returns (bool success) {
        banned[wallet] = 1;
        nextBannedWallet++;
        return true;
    }
	
	function unbanFarmer(address wallet) public onlyOwner returns (bool success) {
        banned[wallet] = 0;
        if(nextBannedWallet > 0){ nextBannedWallet--; }
        return true;
    }	

    function setScheduled(uint8 newval) public onlyOwner returns (bool success) {
        isScheduled = newval;
        return true;
    }   

    function setPaymentToken(uint8 index, address newval) public onlyOwner returns (bool success) {
        paymentTokenAddress[index] = newval;
        Seed[index] = IERC20(paymentTokenAddress[index]); 
        return true;
    }

    function farmerAddressByNo(uint256 idx) public view returns(address) {
         return farmersNo[idx];
    }
   
    function farmerInfo(address _addr) view external returns(uint256 numFarms, uint256 numLivestocks, uint256[4] memory structure) {        
        Farmer storage farmer = farmers[_addr];        
        for(uint8 i = 0; i < ref_bonuses.length; i++) {
            structure[i] = farmer.structure[i];
        }
        return (farmer.crops.length, farmer.livestocks.length, structure);
    } 
   
    function FarmingPals(address _addr, uint8 level, uint256 index) view external returns(address fishpal)
    {
        Farmer storage farmer = farmers[_addr];
        FarmingPal storage pal;
        if(level==1){
            pal  = farmer.pals1[index];
        }else if(level == 2)
        {
            pal  = farmer.pals2[index];
        }else if(level == 3)
        {
            pal  = farmer.pals3[index];
        }
        else{
            pal  = farmer.pals4[index];
        }        
        return(pal.wallet);
    }
    
    function getContractBalance(uint256 index) public view returns (uint256) {
        return IERC20(paymentTokenAddress[index]).balanceOf(address(this));
    }
    
    function getBalance() public view returns(uint256) {
        return address(this).balance;
    }

    function getOwner() external view returns (address) {
        return owner();
    }

    function contractInfo(address _addr) view external returns(uint256 _cropped1, uint256 _cropped2, uint256 _harvested1, uint256 _harvested2, uint256 _rewards, uint256 _cashbacks) {
        Farmer storage farmer = farmers[_addr];        
        if(farmer.total_cropped1 + farmer.total_cropped2 > 0){
            return (cropped1, cropped2, harvested1, harvested2, rewards, cashbacks);
        }
        return (0,0,0,0,0,0);
    }
     
    fallback() external payable {
        revert();
    }

    receive() external payable {
        revert();
    }
}


library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }

    
}