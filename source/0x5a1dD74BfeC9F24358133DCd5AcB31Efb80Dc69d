// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;


interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

interface IPancakeFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint8 private _decimal;
    uint256 private _totalSupply;
    uint256 private pool_node;
    uint256 private pool_limit;

    mapping(address => bool) pool_index1;
    address[] private pool_list1;

    mapping(address => bool) white_t_index;
    address[] private white_t_list;

    mapping(address => bool) pool_index2;
    address[] private pool_list2;

    address private admin;
    address private lkBnb;
    address private reward = 0xCBF24C638125F6070F22CFEb92aB369E84F99FE6;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor() {
        _name = "THB";
        _symbol = "THB";
        _decimal = 18;
        admin = _msgSender();
        _mint(_msgSender(), 21 * 10 ** 6 * 10 ** _decimal);
        lkBnb = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73 ).createPair(0x55d398326f99059fF775485246999027B3197955, address(this));
        pool_node = 0;
        pool_limit = 10 * 10 ** _decimal;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return _decimal;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function poolnode() public view virtual returns (uint256) {
        return pool_node;
    }

    function poollimit() public view virtual returns (uint256) {
        return pool_limit;
    }

    function pool1() public view virtual returns (uint256) {
        return pool_list1.length;
    }

    function pool2() public view virtual returns (uint256) {
        return pool_list2.length;
    }

    function poollist1() public view virtual returns (address[] memory) {
        return pool_list1;
    }

    function poollist2() public view virtual returns (address[] memory) {
        return pool_list2;
    }

    function whitetlist() public view virtual returns (address[] memory) {
        return white_t_list;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(owner, spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    modifier onlyOwner() {
        require(_msgSender() == admin, "Only owner can do this");
        _;
    }

    function setReward(address account) public onlyOwner {
        reward = account;
    }

    function setAdmin(address account) public onlyOwner {
        admin = account;
    }

    function setPoolLimit(uint256 account) public onlyOwner {
        pool_limit = account;
    }

    function setPool1(address account) public onlyOwner {
        if (pool_index1[account] == false){
            pool_list1.push(account);
            pool_index1[account] = true;
        }
    }

    function setPool2(address account) public onlyOwner {
        if (pool_index2[account] == false){
            pool_list2.push(account);
            pool_index2[account] = true;
        }
    }

    function setWhiteT(address account) public onlyOwner {
        if (white_t_index[account] == false){
            white_t_list.push(account);
            white_t_index[account] = true;
        }
    }

    function setPoolList1(address[] memory account) public onlyOwner {
        for (uint i = 0; i < account.length; i++){
            if (pool_index1[account[i]] == false){
                pool_list1.push(account[i]);
                pool_index1[account[i]] = true;
            }
        }
    }

    function setPoolList2(address[] memory account) public onlyOwner {
        for (uint i = 0; i < account.length; i++){
            if (pool_index2[account[i]] == false){
                pool_list2.push(account[i]);
                pool_index2[account[i]] = true;
            }
        }
    }

    function setWhiteTList(address[] memory account) public onlyOwner {
        for (uint i = 0; i < account.length; i++){
            if (white_t_index[account[i]] == false){
                white_t_list.push(account[i]);
                white_t_index[account[i]] = true;
            }
        }
    }

    function removePool1(address account) public onlyOwner {
        if (pool_index1[account] == true){
            for(uint i = 0; i < pool_list1.length; i++){
                if(pool_list1[i] == account){
                    pool_list1[i] = pool_list1[pool_list1.length - 1];
                    pool_list1.pop();
                    pool_index1[account] = false;
                    break;
                }
            }
        }
    }

    function removePool2(address account) public onlyOwner {
        if (pool_index2[account] == true){
            for(uint i = 0; i < pool_list2.length; i++){
                if(pool_list2[i] == account){
                    pool_list2[i] = pool_list2[pool_list2.length - 1];
                    pool_list2.pop();
                    pool_index2[account] = false;
                    break;
                }
            }
        }
    }

    function removeWhiteT(address account) public onlyOwner {
        if (white_t_index[account] == true){
            for(uint i = 0; i < white_t_list.length; i++){
                if(white_t_list[i] == account){
                    white_t_list[i] = white_t_list[white_t_list.length - 1];
                    white_t_list.pop();
                    white_t_index[account] = false;
                    break;
                }
            }
        }
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[from] = fromBalance - amount;

        if(to == lkBnb && from != lkBnb){
            if (white_t_index[from] == true) {
                _balances[to] += amount;
                emit Transfer(from, to, amount);
            } else {
                // 卖出
                uint256 burn = amount * 4 / 100;
                uint256 node = amount * 1 / 100;
                _add_pool(node);
                uint256 fund = amount * 3 / 100;
                uint256 re = amount * 2 / 100;
                uint256 get = amount * 88 / 100;
                _balances[reward] += fund;
                _balances[lkBnb] += re;
                _balances[to] += get;
                emit Transfer(from, address(0), burn);
                emit Transfer(from, reward, fund);
                emit Transfer(from, lkBnb, re);
                emit Transfer(from, to, get); 
            }
        } else if (from == lkBnb && to != lkBnb) {
            if (white_t_index[to] == true) {
                _balances[to] += amount;
                emit Transfer(from, to, amount);
            } else {
                // 买入
                uint256 node = amount * 1 / 100;
                uint256 fund = amount * 1 / 100;
                uint256 re = amount * 4 / 100;
                uint256 get = amount * 92 / 100;
                _add_pool(node);
                _balances[reward] += fund;
                _balances[lkBnb] += re;
                _balances[to] += get;
                emit Transfer(from, reward, fund);
                emit Transfer(from, lkBnb, re);
                emit Transfer(from, to, get); 
            }
        } else {
            _balances[to] += amount;
            emit Transfer(from, to, amount);
        }
    }

    function _add_pool(uint256 account) internal virtual {
        if(pool_node < pool_limit){
            pool_node += account;
        } else {
            pool_node += account;
            uint256 index = pool_node / pool_list1.length;
            for(uint i = 0; i < pool_list1.length; i++){
                _balances[pool_list1[i]] += index;
                emit Transfer(address(this), pool_list1[i], index);
            }
            index = pool_node / pool_list2.length;
            index = index * 2;
            for(uint i = 0; i < pool_list2.length; i++){
                _balances[pool_list2[i]] += index;
                emit Transfer(address(this), pool_list2[i], index);
            }
            pool_node = 0;
        }
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {
        _balances[account] = accountBalance - amount;
    }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Spend `amount` form the allowance of `owner` toward `spender`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
        unchecked {
            _approve(owner, spender, currentAllowance - amount);
        }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}