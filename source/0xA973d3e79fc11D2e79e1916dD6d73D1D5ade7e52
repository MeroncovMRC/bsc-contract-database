// SPDX-License-Identifier: UNLICENCED

pragma solidity ^0.8.7;

contract token {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address payable public owner;

    mapping (address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);

constructor () {
name = "Family";
symbol = "Love";
decimals = 18;
uint256 _initialSupply = 400;
owner = payable(msg.sender);
balanceOf[owner] = _initialSupply;
totalSupply = _initialSupply; 
emit Transfer(address(0), msg.sender, _initialSupply);
}

function transfer(address _to, uint256 _value) public returns (bool success) {
    uint256 senderBalance = balanceOf[msg.sender];
    uint256 recieverBalance = balanceOf[_to];

    require(_to != address(0), "Receiver address invalid");
    require(_value >= 0, "Value must be greater or equal to 0");
    require(senderBalance > _value, "Not enough balance");

    balanceOf[msg.sender] = senderBalance = _value;
    balanceOf[_to] = recieverBalance + _value;

    emit Transfer(msg.sender, _to, _value);
    return true;
}

function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool success) {
        uint256 senderBalance = balanceOf[msg.sender];
        uint256 recieverBalance = balanceOf[_to];

        require(_to != address(0), "Reciever address invalid");
        require(_value >= 0, "Value must be greater or equal to 0");
        require(senderBalance > _value, "Not enough balance");
        
        balanceOf[_from] = senderBalance - _value;
        balanceOf[_to] = recieverBalance + _value;

        emit Transfer(_from, _to, _value);
        return true;
    }
}