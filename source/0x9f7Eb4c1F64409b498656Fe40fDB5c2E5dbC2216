{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}"},"INFTContract.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\ninterface INFTContract {\r\n    // --------------- ERC1155 -----------------------------------------------------\r\n\r\n    // todo: the /** */ and /// comments trip me out. Use /** */ format everywhere\r\n\r\n    /**\r\n        @notice Get the balance of an account\u0027s tokens.\r\n        @param _owner  The address of the token holder\r\n        @param _id     ID of the token\r\n        @return        The _owner\u0027s balance of the token type requested\r\n     */\r\n    function balanceOf(address _owner, uint256 _id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller\u0027s tokens.\r\n        @dev MUST emit the ApprovalForAll event on success.\r\n        @param _operator  Address to add to the set of authorized operators\r\n        @param _approved  True if the operator is approved, false to revoke approval\r\n    */\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\r\n    /// @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n    /// MUST revert if `_to` is the zero address.\r\n    /// MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\r\n    /// MUST revert on any other error.\r\n    /// MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\r\n    /// After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size \u003e 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\r\n    /// @param _from    Source address\r\n    /// @param _to      Target address\r\n    /// @param _id      ID of the token type\r\n    /// @param _value   Transfer amount\r\n    /// @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    /**\r\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\r\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\r\n        MUST revert if `_to` is the zero address.\r\n        MUST revert if length of `_ids` is not the same as length of `_values`.\r\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\r\n        MUST revert on any other error.        \r\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\r\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\r\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size \u003e 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).                      \r\n        @param _from    Source address\r\n        @param _to      Target address\r\n        @param _ids     IDs of each token type (order and length must match _values array)\r\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\r\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\r\n    */\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    // ---------------------- ERC721 ------------------------------------------------\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param tokenId The identifier for an NFT\r\n    /// @return owner  The address of the owner of the NFT\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    // function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size \u003e 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external payable;\r\n\r\n    // -------------------------------------------------------------------------------\r\n    \r\n    function getRoyalityDetails (uint256 tokenid) external view returns(uint256 percentage , address creator);\r\n}\r\n\r\n/*\r\n * 88888888ba  88      a8P  88\r\n * 88      \"8b 88    ,88\u0027   88\r\n * 88      ,8P 88  ,88\"     88\r\n * 88aaaaaa8P\u0027 88,d88\u0027      88\r\n * 88\"\"\"\"88\u0027   8888\"88,     88\r\n * 88    `8b   88P   Y8b    88\r\n * 88     `8b  88     \"88,  88\r\n * 88      `8b 88       Y8b 88888888888\r\n *\r\n * Marketplace: interfaces/INFTContract.sol\r\n *\r\n * MIT License\r\n * ===========\r\n *\r\n * Copyright (c) 2022 Marketplace\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n */"},"NFTMarketplace.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.4;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./INFTContract.sol\";\r\n\r\n\r\ncontract NFTMarketplace is Ownable {\r\nusing SafeMath for uint256;\r\nusing Address for address;\r\n\r\nenum EOrderType{\r\n    None,\r\n    Fixed,\r\n    Auction\r\n}\r\n\r\nenum EOrderStatus{\r\n    None,\r\n    OpenForTheMarket,\r\n    MarketCancelled,\r\n    MarketClosed\r\n}\r\n\r\n\r\nstruct Market{\r\n    address contractAddress;\r\n    uint256 tokenId;\r\n    EOrderType orderType;\r\n    EOrderStatus orderStatus;\r\n    uint256 askAmount;\r\n    uint256 maxAskAmount;\r\n    address payable currentOwner;\r\n    address newOwner;\r\n    bool isUnderOrgnization;\r\n    address payable orgnizationAddress;\r\n    uint256 orgnizationPercentage;\r\n    uint256 platFormFeePercentage;\r\n} \r\n\r\n\r\nIERC20 public _wrapToken;\r\nuint256 public _feePercentage;\r\naddress  payable public _feeDestinationAddress;\r\nmapping (bytes32 =\u003e Market) public markets;\r\n\r\n\r\nconstructor(address wrapToken,\r\n            uint256 feePercentage,\r\n            address payable feeDestinationAddress){\r\n    _feePercentage = feePercentage;\r\n    _feeDestinationAddress = feeDestinationAddress;\r\n    _wrapToken = IERC20(wrapToken);\r\n}\r\n\r\nfunction setFeePercentage (uint256 value) external onlyOwner{\r\n    if(value \u003c 2 || value \u003e 25){\r\n        revert(\"value must be between 2 to 25!\");\r\n    }\r\n    _feePercentage = value; \r\n}\r\n\r\nfunction setFeeDestinationAddress (address payable value) external onlyOwner{\r\n    _feeDestinationAddress = value; \r\n}\r\n\r\nfunction getPrivateUniqueKey(address nftContractId, uint256 tokenId) private pure returns (bytes32){\r\n    return keccak256(abi.encodePacked(nftContractId, tokenId));\r\n}\r\n\r\nfunction openMarketForFixedType(address nftContractId, uint256 tokenId, uint256 price, bool isUnderOrgnization, address orgnizationAddress, uint256 orgnizationPercentage, uint256 platFormFeePercentage) external{\r\n   openMarket(nftContractId,tokenId,price,EOrderType.Fixed, 0, isUnderOrgnization, orgnizationAddress, orgnizationPercentage, platFormFeePercentage);\r\n}\r\n\r\nfunction openMarketForAuctionType(address nftContractId, uint256 tokenId, uint256 price, uint256 maxPrice, bool isUnderOrgnization, address orgnizationAddress, uint256 orgnizationPercentage, uint256 platFormFeePercentage) external{\r\n    openMarket(nftContractId,tokenId,price,EOrderType.Auction, maxPrice, isUnderOrgnization, orgnizationAddress, orgnizationPercentage, platFormFeePercentage);\r\n}\r\n\r\nfunction openMarket(address nftContractId, uint256 tokenId, uint256 price, EOrderType orderType, uint256 maxPrice, bool isUnderOrgnization, address orgnizationAddress, uint256 orgnizationPercentage, uint256 platFormFeePercentage) private{\r\n    bytes32 uniqueKey = getPrivateUniqueKey(nftContractId,tokenId);\r\n\r\n    if(markets[uniqueKey].orderStatus == EOrderStatus.OpenForTheMarket){\r\n        revert (\"Market order is already opened\");\r\n    }\r\n    if(price \u003c= 0){\r\n        revert (\"Price Should be greater then 0\");\r\n    }\r\n\r\n    if(orderType == EOrderType.Auction \u0026\u0026 price \u003e maxPrice){\r\n        revert (\"end Price Should be greater then price\");\r\n    }\r\n\r\n    markets[uniqueKey].orderStatus = EOrderStatus.OpenForTheMarket;\r\n    markets[uniqueKey].orderType = orderType;\r\n    markets[uniqueKey].askAmount = price;\r\n    markets[uniqueKey].maxAskAmount = maxPrice;\r\n    markets[uniqueKey].contractAddress = nftContractId;\r\n    markets[uniqueKey].tokenId = tokenId;\r\n    markets[uniqueKey].currentOwner = payable(msg.sender);\r\n    markets[uniqueKey].isUnderOrgnization = isUnderOrgnization;\r\n    markets[uniqueKey].orgnizationAddress = payable(orgnizationAddress);\r\n    markets[uniqueKey].orgnizationPercentage = orgnizationPercentage;\r\n    markets[uniqueKey].platFormFeePercentage = platFormFeePercentage;\r\n}\r\n\r\nfunction closeMarketForFixedType(address nftContractId, uint256 tokenId) external payable{ \r\n    bytes32 uniqueKey = getPrivateUniqueKey(nftContractId,tokenId);\r\n    \r\n    if(markets[uniqueKey].orderStatus == EOrderStatus.OpenForTheMarket){\r\n\r\n        if(markets[uniqueKey].orderType == EOrderType.None){\r\n            revert (\"nft not opened\");\r\n        }\r\n        else if(markets[uniqueKey].orderType == EOrderType.Fixed){\r\n            if(markets[uniqueKey].askAmount \u003c msg.value){\r\n                revert (\"Value not matched\");\r\n            }\r\n        }else if (markets[uniqueKey].orderType == EOrderType.Auction){\r\n           if(markets[uniqueKey].maxAskAmount \u003c msg.value){\r\n                revert (\"Value not matched\");\r\n            }\r\n        }\r\n\r\n\r\n        INFTContract nftContract = INFTContract(markets[uniqueKey].contractAddress);\r\n        (uint256 royality, address creator) = nftContract.getRoyalityDetails(tokenId);\r\n\r\n        //platform fee\r\n        uint256 restAmount = msg.value;\r\n\r\n        uint256 fee = 0;\r\n\r\n        if(markets[uniqueKey].platFormFeePercentage \u003e 0){\r\n            fee = getFeePercentage(restAmount, markets[uniqueKey].platFormFeePercentage);\r\n        }\r\n        else{\r\n            fee = getFeePercentage(restAmount, _feePercentage);\r\n        }\r\n        \r\n        _feeDestinationAddress.transfer(fee);\r\n\r\n        restAmount = restAmount.sub(fee);\r\n\r\n        //orgination profit\r\n        if(markets[uniqueKey].isUnderOrgnization){\r\n            uint256 orgnizationProfit = getFeePercentage(msg.value, markets[uniqueKey].orgnizationPercentage);\r\n            markets[uniqueKey].orgnizationAddress.transfer(orgnizationProfit);\r\n\r\n            restAmount = restAmount.sub(orgnizationProfit);\r\n        }\r\n\r\n        //Royality profit\r\n        if(msg.sender != creator){\r\n            uint256 royalityFee = getFeePercentage(msg.value, royality);\r\n            payable(creator).transfer(royalityFee);\r\n\r\n            restAmount = restAmount.sub(royalityFee);\r\n        }\r\n      \r\n\r\n        //seller amount trans \r\n        markets[uniqueKey].currentOwner.transfer(restAmount);\r\n\r\n        // transfer nft to new user \r\n        nftContract.safeTransferFrom(markets[uniqueKey].currentOwner, msg.sender, tokenId);\r\n\r\n        // nft market close\r\n        markets[uniqueKey].orderStatus = EOrderStatus.MarketClosed;\r\n        markets[uniqueKey].newOwner = msg.sender;\r\n\r\n    }else{\r\n        revert (\"Market order is not opened\");\r\n    }\r\n}\r\n\r\nfunction closeMarketForAuctionType(address nftContractId, uint256 tokenId, uint256 price, address buyerAccount ) external{\r\n    bytes32 uniqueKey = getPrivateUniqueKey(nftContractId,tokenId);\r\n\r\n    if(markets[uniqueKey].currentOwner != msg.sender){\r\n        revert (\"only for market operator\");\r\n    }    \r\n    if(markets[uniqueKey].orderStatus == EOrderStatus.OpenForTheMarket){\r\n\r\n        if(markets[uniqueKey].askAmount \u003c price){\r\n            INFTContract nftContract = INFTContract(markets[uniqueKey].contractAddress);\r\n            (uint256 royality, address creator) = nftContract.getRoyalityDetails(tokenId);\r\n\r\n            //platform fee\r\n            uint256 restAmount = price;\r\n\r\n            uint256 fee = 0;\r\n\r\n            if(markets[uniqueKey].platFormFeePercentage \u003e 0){\r\n                fee = getFeePercentage(restAmount, markets[uniqueKey].platFormFeePercentage);\r\n            }\r\n            else{\r\n                fee = getFeePercentage(restAmount, _feePercentage);\r\n            }\r\n\r\n            _wrapToken.transferFrom(buyerAccount,_feeDestinationAddress,fee);\r\n\r\n            restAmount = restAmount.sub(fee);\r\n\r\n            //orgination profit\r\n            if(markets[uniqueKey].isUnderOrgnization){\r\n                uint256 orgnizationProfit = getFeePercentage(price, markets[uniqueKey].orgnizationPercentage);\r\n                _wrapToken.transferFrom(buyerAccount,markets[uniqueKey].orgnizationAddress,orgnizationProfit);\r\n\r\n                restAmount = restAmount.sub(orgnizationProfit);\r\n            }\r\n\r\n            //Royality profit\r\n            if(msg.sender != creator){\r\n                uint256 royalityFee = getFeePercentage(price, royality);\r\n                _wrapToken.transferFrom(buyerAccount,creator,royalityFee);\r\n\r\n                restAmount = restAmount.sub(royalityFee);\r\n            }\r\n\r\n            //seller amount trans \r\n            _wrapToken.transferFrom(buyerAccount,markets[uniqueKey].currentOwner,restAmount);\r\n\r\n            // transfer nft to new user \r\n            nftContract.safeTransferFrom(markets[uniqueKey].currentOwner, buyerAccount, tokenId);\r\n\r\n            // nft market close\r\n            markets[uniqueKey].orderStatus = EOrderStatus.MarketClosed;\r\n            markets[uniqueKey].newOwner = buyerAccount;\r\n\r\n        }else{\r\n            revert (\"Value not matched\");\r\n        }\r\n    }else{\r\n        revert (\"Market order is not opened\");\r\n    }\r\n}\r\n\r\nfunction getFeePercentage(uint256 price, uint256 percent) private pure returns (uint256){\r\n    return price.mul(percent).div(100);\r\n}\r\n\r\nfunction cancel (address nftContractId,  uint256 tokenId) external{\r\n    bytes32 uniqueKey = getPrivateUniqueKey(nftContractId,tokenId);\r\n  \r\n    if(markets[uniqueKey].currentOwner != msg.sender){\r\n        revert (\"only for market operator\");\r\n    }  \r\n\r\n    if(markets[uniqueKey].orderStatus == EOrderStatus.OpenForTheMarket){\r\n        markets[uniqueKey].orderStatus =  EOrderStatus.MarketCancelled;\r\n    }else{\r\n        revert (\"Market order is not opened\");\r\n    }\r\n}\r\n\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @notice Contract is a inheritable smart contract that will add a\r\n * New modifier called onlyOwner available in the smart contract inherting it\r\n *\r\n * onlyOwner makes a function only callable from the Token owner\r\n *\r\n */\r\ncontract Ownable {\r\n    // _owner is the owner of the Token\r\n    address private _owner;\r\n\r\n    /**\r\n     * Event OwnershipTransferred is used to log that a ownership change of the token has occured\r\n     */\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * Modifier\r\n     * We create our own function modifier called onlyOwner, it will Require the current owner to be\r\n     * the same as msg.sender\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            _owner == msg.sender,\r\n            \"Ownable: only owner can call this function\"\r\n        );\r\n        // This _; is not a TYPO, It is important for the compiler;\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice owner() returns the currently assigned owner of the Token\r\n     *\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice renounceOwnership will set the owner to zero address\r\n     * This will make the contract owner less, It will make ALL functions with\r\n     * onlyOwner no longer callable.\r\n     * There is no way of restoring the owner\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice transferOwnership will assign the {newOwner} as owner\r\n     *\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice _transferOwnership will assign the {newOwner} as owner\r\n     *\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}