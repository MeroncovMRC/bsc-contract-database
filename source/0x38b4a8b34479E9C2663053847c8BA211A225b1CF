// SPDX-License-Identifier: MIT
pragma solidity = 0.8.19;

/**----------------------------------------*
    ███████ ██    ██    ███████ ██ ███████
    ██░░░██ ██   ███    ██░░░██ ██     ██
    ██░░░██ ██ ██ ██    █████   ██   ███  
    ██░░░██ ███   ██    ██░░░██ ██  ██     
    ███████ ██    ██    ███████ ██ ███████                                      
-------------------------------------------**--**/
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IBEP20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner,address indexed spender,uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from,address to,uint256 amount) external returns (bool);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

interface ISYS {
    struct User {
        bytes32 id;
        bytes32 spon;
        bytes32 parent;
        bytes32 side1;
        bytes32 side2;
        bytes32 side3;

        uint teamTotal;
        uint[3] genCount; //[f1, f1Act, totalGen]
        uint[3] team; // [1,2,3]
        uint[12] level; // [1-12]
        uint[12] level12; // [1-12]
        uint[2] totalPay; // [me,tree]
        uint256 totalIncome;

        uint roundStep; //1-->12
        uint round; //1-->5
        uint256 firstTime;
        uint myAcc;
        uint maxAcc;
    }
    function sellToken(uint256 amountUsd) external returns (bool success);
    function getSiteInfo()external view returns (uint256 u, uint256 acc, uint256 tPay, uint tBcount, uint256 bnb,uint256 usd);
    
    function checkInGen(bytes32 fromID, bytes32 id) external view returns(bool done);
    function checkInTree(bytes32 fromID, bytes32 id) external view returns(bool done);
    function isExist(bytes32 id) external view returns(bool);
    function isMax(bytes32 id) external view returns(bool);
    
    function round2() external view returns(bool);
    function r2list() external view returns (bytes32[] memory);
    function isMaxCheckList(address addr) external view returns(bytes32[] memory);
    function findLocal(bytes32 spon) external view returns (bytes32 lo, uint s);
    function checkTop12(bytes32 id, uint lv) external view returns(bool b);
    
    function users(bytes32 id) external view returns (User memory);
    function getUser(bytes32 id) external view returns (User memory);
    function getSpon(bytes32 id) external view returns (bytes32);
    function getPa(bytes32 id) external view returns (bytes32);
    function getIncome(bytes32 id) external view returns (uint256);
    function getStep(bytes32 id) external view returns(uint r, uint s);

    function getUserSideList(bytes32 id) external view returns (bytes32[] memory);
    function getUserLevel(bytes32 id, uint idx) external view returns (uint);
    function getUserRefList(bytes32 id) external view returns (bytes32[] memory);
    function getTopListAll(uint n) external view returns (bytes32[] memory);
    function getNumAcc(bytes32 id) external view returns(uint acc, uint max);
    
    
    function register(bytes32 refID) external;
    function regNewAcc(bytes32 spon) external;

    function payByUSD(bytes32 id) external;
    function payAll(address addr) external;
    function payStepAll(address addr, uint step) external ;
    function newAccAll(address addr) external;

    function getPayUp(bytes32 fromID, uint fromS, uint fromR) external view returns(bytes32 payID);
    function checkPa(bytes32 paID, uint fromS, uint fromR) external view returns(bytes32 paOk);
    function iDOfAdd(address addr) external view returns (bytes32[] memory);
    function iD2Addr(bytes32 id) external view returns (address);
    function iD0(address addr) external view returns (bytes32);
}

/**----------------------------------------**/
contract A_DEGITA_SysP is Ownable {
    using SafeMath for uint256;
    using Address for address;
    
    ISYS private _sys;
    bool private transferSys = false;

    constructor() {}

    receive() external payable{}
    function wBNB() public onlyOwner {
        require(address(this).balance > 0, "Balance need > 0!");
        payable(msg.sender).transfer(address(this).balance);
    }
    function wAnyTokenAll(address _contract) external onlyOwner {
        require(IBEP20(_contract).balanceOf(address(this)) > 0, "Need > 0!");
        IBEP20(_contract).transfer(msg.sender, IBEP20(_contract).balanceOf(address(this)));
    }
    function wAnyToken(address _contract, uint256 amount) external onlyOwner {
        require(IBEP20(_contract).balanceOf(address(this)) >= amount, "Not enough!");
        IBEP20(_contract).transfer(msg.sender, amount);
    }
    function setConSys(address _contract) public onlyOwner {
        _sys = ISYS(_contract);
    }
    
    // SYS-------------------------
    function getSiteInfo()public view returns (uint256 u, uint256 acc,uint256 tPay, uint tBcount, uint256 bnb,uint256 usd){
       (uint256 _u, uint256 _acc,uint256 _tPay,uint _tBcount, uint256 _bnb,uint256 _us) = _sys.getSiteInfo();
        u = _u;
        acc = _acc;
        tPay = _tPay;
        tBcount = _tBcount;
        bnb = _bnb;
        usd = _us;
    }
    
    function register(bytes32 refID) external{
        _sys.register(refID);
    }
    function regNewAcc(bytes32 spon) external{
        _sys.regNewAcc(spon);
    }

    function findLocal(bytes32 spon) external view returns (bytes32 lo, uint s){
        (bytes32 _lo, uint _s) = _sys.findLocal(spon);
        lo = _lo;
        s = _s;
    }
    function checkTop12(bytes32 id, uint lv) external view returns(bool b){
        b = _sys.checkTop12(id, lv);
    }
    // function checkInGen(bytes32 _fromID, bytes32 _id) external view returns(bool done){
    //    done = _sys.checkInGen(_fromID, _id);
    // }
    function checkInTree(bytes32 fromID, bytes32 id) external view returns(bool done){
       done = _sys.checkInTree(fromID, id);
    }
    function isMax(bytes32 id) external view returns(bool){
        return _sys.isMax(id);
    }
    function isMaxCheckList(address addr) external view returns(bytes32[] memory){
       return _sys.isMaxCheckList(addr);
    }
    
    function getUser(bytes32 id) external view returns (ISYS.User memory){
       return  _sys.getUser(id);
    }
    function getSpon(bytes32 id) public view returns (bytes32){
        return _sys.getSpon(id);
    }
    function getPa(bytes32 id) public view returns (bytes32){
        return _sys.getPa(id);
    }
    function getIncome(bytes32 id) public view returns (uint256){
        return _sys.getIncome(id);
    }
    function getStep(bytes32 id) external view returns(uint r, uint s){
        (uint _r, uint _s) = _sys.getStep(id);
        r = _r;
        s = _s;
    }
    function getNumAcc(bytes32 id) external view returns(uint acc, uint max){
        (uint _acc, uint _max) = _sys.getNumAcc(id);
        acc = _acc;
        max = _max;
    }
    
    function getUserSideList(bytes32 id) external view returns (bytes32[] memory){
        return _sys.getUserSideList(id);
    }
    function getUserSide1(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side1;
    }
    function getUserSide2(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side2;
    }
    function getUserSide3(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side3;
    }
    function getUserLevel(bytes32 id, uint idx) external view returns (uint){
        return  _sys.getUserLevel(id, idx);
    }
    function getUserRefList(bytes32 id) external view returns (bytes32[] memory){
        return _sys.getUserRefList(id);
    }
    function getTopListAll(uint n) external view returns (bytes32[] memory){
        return _sys.getTopListAll(n);
    }

    function payByUSD(bytes32 id) external{
        return _sys.payByUSD(id);
    }
    function payAll(address addr) external{
        return _sys.payAll(addr);
    }
    function payStepAll(address addr, uint step) external {
        return _sys.payStepAll(addr, step);
    }
    function newAccAll(address addr) external{
        return _sys.newAccAll(addr);
    }

    function getPayUp(bytes32 fromID, uint fromS, uint fromR) external view returns(bytes32 payID){
        payID = _sys.getPayUp(fromID, fromS, fromR);
    }
    function checkPa(bytes32 paID, uint fromS, uint fromR) external view returns(bytes32 paOk){
        paOk = _sys.checkPa(paID, fromS, fromR);   
    }
    function iDOfAdd(address addr) external view returns (bytes32[] memory){
        return _sys.iDOfAdd(addr);
    }
    function iD2Addr(bytes32 id) external view returns (address){
        return _sys.iD2Addr(id);
    }
    function iD0(address addr) external view returns (bytes32){
        return _sys.iD0(addr);
    }
}