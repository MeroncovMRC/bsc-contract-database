
// File: contracts/Staking.sol
//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

import "./IPoints.sol";

contract MCRTStaking is OwnableUpgradeable {
    using SafeERC20Upgradeable for IERC20Upgradeable;
    IERC20Upgradeable public stakingToken;

    event Stake(uint256 stakeId, address staker);
    event Unstake(uint256 stakeId, address unstaker);

    struct StakingInfo {
        uint256 id;
        address owner;
        uint256 timeToUnlock;
        uint256 stakingTime;
        uint256 tokensStaked;
        uint256 tokensStakedWithBonus;
        bool option; // false: Bonus, true: NFT Point
        bool withdrawnPoint;
    }
    mapping(address => uint256) public balances;
    mapping(address => uint256) public pBalances;
    mapping(address => uint256) public stakingNonce;

    mapping(address => uint256) public userRewardPerTokenPaid;
    mapping(address => mapping(uint256 => uint256)) public rewards;
    mapping(uint256 => uint256) public bonusTokenMultiplier;
    mapping(address => uint256) public tokensStakedByAddress;
    mapping(address => uint256) public tokensStakedWithBonusByAddress;
    mapping(address => mapping(uint256 => StakingInfo)) public stakingInfoForAddress;

    mapping(uint256 => uint256[3]) public pointRewards;
    mapping(uint256 => uint256) public minStakeTokensForPoint;

    bool public stakingEnabled;
    uint256 public rewardRate; // 1 tokens per sec = 86400 tokens per day
    uint256 private constant DIVISOR = 1e11;
    uint256 public lastUpdateTime;
    uint256 public rewardPerTokenStored;
    uint256 public uniqueAddressesStaked;
    uint256 public totalTokensStaked;
    uint256 public pTotalTokensStaked;
    uint256 public totalTokensStakedWithBonusTokens;
    uint256 public totalRewardsLeft;

    address public pointAddress;

    uint256[50] private __gap;

    /** Initializes the staking contract
    @param tokenAddress_ the token address that will be staked
    @param pointAddress_ the point address for giving NFT point
    @param rewardRate_ reward rate per second
     */
    function initialize(
        address tokenAddress_,
        address pointAddress_,
        uint256 rewardRate_
    ) external initializer {
        __Ownable_init();

        stakingToken = IERC20Upgradeable(tokenAddress_);
        pointAddress = pointAddress_;
        stakingEnabled = true;
        rewardRate = rewardRate_;
    }

    /** Computes the reward per token
     */
    function rewardPerToken() public view returns (uint256) {
        if (totalTokensStakedWithBonusTokens == 0) {
            return 0;
        }
        return
            rewardPerTokenStored +
            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) /
                totalTokensStakedWithBonusTokens);
    }

    /** Computes the earned amount thus far by the address
    @param account_ account to get the earned ammount for
    @param stakeId_ stake id for account
     */
    function earned(address account_, uint256 stakeId_) public view returns (uint256) {
        return
            ((stakingInfoForAddress[account_][stakeId_].tokensStakedWithBonus *
                (rewardPerToken() - userRewardPerTokenPaid[account_])) / 1e18) +
            rewards[account_][stakeId_];
    }

    /** modifier that updates and computes the correct internal variables
    @param account_ the account called for
     */
    modifier updateReward(address account_) {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = block.timestamp;

        for (uint256 i = 0; i < stakingNonce[account_]; i++) {
            if (stakingInfoForAddress[account_][i].tokensStakedWithBonus != 0)
                rewards[account_][i] = earned(account_, i);
        }
        userRewardPerTokenPaid[account_] = rewardPerTokenStored;

        _;
    }

    /** Staking function
    @param amount_ the amount to stake
    @param lockTime_ the lock time to lock the stake for
     */
    function stake(
        uint256 amount_,
        uint256 lockTime_,
        bool option_
    ) external updateReward(msg.sender) {
        require(stakingEnabled, "STAKING_DISABLED");
        require(amount_ != 0, "CANNOT_STAKE_0");
        require(bonusTokenMultiplier[lockTime_] != 0, "LOCK_TIME_ERROR");

        if (stakingNonce[msg.sender] == 0) {
            uniqueAddressesStaked++;
        }

        if (!option_) {
            uint256 tokensWithBonus = (amount_ * bonusTokenMultiplier[lockTime_]) / DIVISOR;

            totalTokensStaked += amount_;
            totalTokensStakedWithBonusTokens += tokensWithBonus;
            balances[msg.sender] += tokensWithBonus;
            tokensStakedByAddress[msg.sender] += amount_;
            tokensStakedWithBonusByAddress[msg.sender] += tokensWithBonus;

            StakingInfo storage data = stakingInfoForAddress[msg.sender][stakingNonce[msg.sender]];
            data.owner = msg.sender;
            data.stakingTime = block.timestamp;
            data.tokensStaked = amount_;
            data.timeToUnlock = block.timestamp + lockTime_;
            data.tokensStakedWithBonus = tokensWithBonus;
            data.id = stakingNonce[msg.sender];

            stakingNonce[msg.sender]++;
        } else {
            require(
                minStakeTokensForPoint[lockTime_] != 0 &&
                    amount_ >= minStakeTokensForPoint[lockTime_],
                "Not enough token to stake for Point"
            );
            pBalances[msg.sender] += amount_;
            pTotalTokensStaked += amount_;
            tokensStakedByAddress[msg.sender] += amount_;

            StakingInfo storage data = stakingInfoForAddress[msg.sender][stakingNonce[msg.sender]];
            data.owner = msg.sender;
            data.stakingTime = block.timestamp;
            data.tokensStaked = amount_;
            data.timeToUnlock = block.timestamp + lockTime_;
            data.tokensStakedWithBonus = 0;
            data.id = stakingNonce[msg.sender];
            data.option = true;

            stakingNonce[msg.sender]++;
        }

        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);
        emit Stake(stakingNonce[msg.sender], msg.sender);
    }

    /** Unstake function
    @param stakeId_ the stake id to unstake
     */
    function unstake(uint256 stakeId_) external updateReward(msg.sender) {
        StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeId_];
        require(info.timeToUnlock <= block.timestamp, "Not reached to timeToUnlock yet");
        require(info.owner != address(0), "Already unstaked");

        if (!info.option) {
            getRewardInternal(stakeId_);

            totalTokensStaked -= info.tokensStaked;
            totalTokensStakedWithBonusTokens -= info.tokensStakedWithBonus;
            balances[msg.sender] -= info.tokensStakedWithBonus;
            tokensStakedByAddress[msg.sender] -= info.tokensStaked;
            tokensStakedWithBonusByAddress[msg.sender] -= info.tokensStakedWithBonus;
        } else {
            pTotalTokensStaked -= info.tokensStaked;
            pBalances[msg.sender] -= info.tokensStaked;
            tokensStakedByAddress[msg.sender] -= info.tokensStaked;

            if (!info.withdrawnPoint) getPointInternal(info.id);
        }

        uint256 tokensTotal = info.tokensStaked;

        delete stakingInfoForAddress[msg.sender][stakeId_];

        emit Unstake(stakeId_, msg.sender);

        stakingToken.safeTransfer(msg.sender, tokensTotal);
    }

    /** batch Unstake function
    @param stakeIds_ the stake id to unstake
     */
    function batchUnstake(uint256[] memory stakeIds_) external updateReward(msg.sender) {
        require(stakeIds_.length != 0, "Invalid stake id array");

        for (uint256 i = 0; i < stakeIds_.length; i++) {
            StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeIds_[i]];
            require(info.timeToUnlock <= block.timestamp, "Not reached to timeToUnlock yet");
            require(info.owner != address(0), "Already unstaked");

            if (!info.option) {
                getRewardInternal(stakeIds_[i]);

                totalTokensStaked -= info.tokensStaked;
                totalTokensStakedWithBonusTokens -= info.tokensStakedWithBonus;
                balances[msg.sender] -= info.tokensStakedWithBonus;
                tokensStakedByAddress[msg.sender] -= info.tokensStaked;
                tokensStakedWithBonusByAddress[msg.sender] -= info.tokensStakedWithBonus;
            } else {
                pTotalTokensStaked -= info.tokensStaked;
                pBalances[msg.sender] -= info.tokensStaked;
                tokensStakedByAddress[msg.sender] -= info.tokensStaked;

                if (!info.withdrawnPoint) getPointInternal(info.id);
            }

            uint256 tokensTotal = info.tokensStaked;

            delete stakingInfoForAddress[msg.sender][stakeIds_[i]];

            emit Unstake(stakeIds_[i], msg.sender);

            stakingToken.safeTransfer(msg.sender, tokensTotal);
        }
    }

    /** The function called to get the reward for user's stake
    @param stakeId_ the stake id to unstake
     */
    function getPointReward(uint256 stakeId_) external {
        StakingInfo memory info = stakingInfoForAddress[msg.sender][stakeId_];
        require(info.option, "Invalid staking option");
        require(!info.withdrawnPoint, "Already withdrawn");

        getPointInternal(stakeId_);
    }

    /** The function called to get the reward for user's stake
    @param stakeIds_ the stake id to unstake
     */
    function batchGetPointReward(uint256[] memory stakeIds_) external {
        require(stakeIds_.length != 0, "Invalid stake id array");

        for (uint256 i = 0; i < stakeIds_.length; i++) {
            StakingInfo memory info = stakingInfoForAddress[msg.sender][stakeIds_[i]];
            require(info.option, "Invalid staking option");
            require(!info.withdrawnPoint, "Already withdrawn");

            getPointInternal(stakeIds_[i]);
        }
    }

    /** The function called to get the reward for user's stake
    @param stakeId_ the stake id to unstake
     */
    function getRewardInternal(uint256 stakeId_) internal {
        uint256 reward = rewards[msg.sender][stakeId_];
        require(reward <= totalRewardsLeft, "Not enough reward token remains");

        rewards[msg.sender][stakeId_] = 0;
        totalRewardsLeft -= reward;
        stakingToken.safeTransfer(msg.sender, reward);
    }

    /** The function called to get the point for user's stake
    @param stakeId_ the stake id to unstake
     */
    function getPointInternal(uint256 stakeId_) internal {
        StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeId_];
        info.withdrawnPoint = true;

        uint256 timelock = info.timeToUnlock - info.stakingTime;

        IPoints(pointAddress).mintPoints(
            msg.sender,
            pointRewards[timelock][0],
            pointRewards[timelock][1],
            pointRewards[timelock][2]
        );
    }

    /** 
    @dev Sets the bonus multipliers and the allowed locking durations
    @param durations_ an array of the allowed staking durations
    @param mutiplier_ the multiplier dor all staking durations
     */
    function setBonusMultiplier(uint256[] calldata durations_, uint256[] calldata mutiplier_)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < durations_.length; i++) {
            require(mutiplier_[i] >= DIVISOR, "Invalid multiplier");
            bonusTokenMultiplier[durations_[i]] = mutiplier_[i];
        }
    }

    /** 
    @dev Sets the point rewards and the allowed locking durations
    @param durations_ an array of the allowed staking durations
    @param rewardsPoints_ the multiplier dor all staking durations
     */
    function setPointReward(uint256 durations_, uint256[3] calldata rewardsPoints_)
        external
        onlyOwner
    {
        pointRewards[durations_] = [rewardsPoints_[0], rewardsPoints_[1], rewardsPoints_[2]];
    }

    /** 
    @dev Sets the min stake token for point and the allowed locking durations
    @param durations_ an array of the allowed staking durations
    @param amounts_ the multiplier dor all staking durations
     */
    function setMinStakeTokensForPoint(uint256[] calldata durations_, uint256[] calldata amounts_)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < durations_.length; i++) {
            minStakeTokensForPoint[durations_[i]] = amounts_[i];
        }
    }

    /** 
    @dev Sets the staking enabled flag
    @param stakingEnabled_ weather or not staking should be enabled
    */
    function setStakingEnabled(bool stakingEnabled_) external onlyOwner {
        stakingEnabled = stakingEnabled_;
    }

    /** 
    @dev Sets the new reward rate
    @param rewardRate_ the reward rate to set up
    */
    function setRewardRate(uint256 rewardRate_) external onlyOwner {
        require(rewardRate_ != 0, "Cannot have reward Rate 0");
        rewardRate = rewardRate_;
    }

    /** 
    @dev Transfer Point contract ownership
    @param newOwner_ new owner address
    */
    function transferPointOwnership(address newOwner_) external onlyOwner {
        require(newOwner_ != address(0), "Cannot be address(0)");
        IPoints(pointAddress).transferOwnership(newOwner_);
    }

    /** 
    @dev Add token rewards to contract
    @param amount_ the token amount for reward
    */
    function addTokenRewards(uint256 amount_) external {
        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);
        totalRewardsLeft += amount_;
    }

    /**
    @dev Returns all the user stakes
    @param userAddress_ returns all the user stakes
     */
    function getAllAddressStakes(address userAddress_) public view returns (StakingInfo[] memory) {
        StakingInfo[] memory stakings = new StakingInfo[](stakingNonce[userAddress_]);
        for (uint256 i = 0; i < stakingNonce[userAddress_]; i++) {
            StakingInfo memory staking = stakingInfoForAddress[userAddress_][i];
            if (staking.tokensStaked != 0) {
                stakings[i] = staking;
            }
        }
        return stakings;
    }
}


// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20Upgradeable.sol";
import "../../../utils/AddressUpgradeable.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20Upgradeable {
    using AddressUpgradeable for address;

    function safeTransfer(
        IERC20Upgradeable token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20Upgradeable token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20Upgradeable {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/ContextUpgradeable.sol";
import "../proxy/utils/Initializable.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
    uint256[49] private __gap;
}


// File: contracts/IPoints.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IPoints {
    function totalPoints() external view returns (uint256[3] memory);

    function pointsOf(address account) external view returns (uint256[3] memory);

    function transferPoints(
        address to,
        uint256 _itemPoints,
        uint256 _characterPoints,
        uint256 _landPoints
    ) external returns (bool);

    function allowancePoints(address owner, address spender)
        external
        view
        returns (uint256[3] memory);

    function approvePoints(
        address spender,
        uint256 _itemPoints,
        uint256 _characterPoints,
        uint256 _landPoints
    ) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 _itemPoints,
        uint256 _characterPoints,
        uint256 _landPoints
    ) external returns (bool);

    function mintPoints(
        address account,
        uint256 _itemPoints,
        uint256 _characterPoints,
        uint256 _landPoints
    ) external;

    function burnPoints(
        address account,
        uint256 _itemPoints,
        uint256 _characterPoints,
        uint256 _landPoints
    ) external;

    function transferOwnership(address newOwner) external;
}


// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "../proxy/utils/Initializable.sol";

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
    uint256[50] private __gap;
}


// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     */
    bool private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Modifier to protect an initializer function from being invoked twice.
     */
    modifier initializer() {
        require(_initializing || !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }
}

