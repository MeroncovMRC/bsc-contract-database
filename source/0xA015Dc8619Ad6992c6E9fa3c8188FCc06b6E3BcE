{"IBlacklist.sol":{"content":"/**\r\n * @title Interface Blacklist\r\n * @dev IBlacklist contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBlacklist {\r\n    function isBlacklisted(address _address) external view returns (bool);\r\n}\r\n"},"IERC165.sol":{"content":"/**\r\n * @title Interface ERC165\r\n * @dev IERC165 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"},"IERC20.sol":{"content":"/**\r\n * @title Interface ERC20\r\n * @dev IERC20 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IERC721.sol":{"content":"/**\r\n * @title Interface ERC721\r\n * @dev IERC721 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n *\r\n **/\r\n\r\nimport \"./IERC165.sol\";\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"},"IHelp.sol":{"content":"/**\r\n * @title Interface Help\r\n * @dev IHelp contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IHelp {\r\n    function Bytecode_0_0_2() external view returns (bool);\r\n}\r\n"},"Ownable.sol":{"content":"/**\r\n * @title Ownable\r\n * @dev Ownable contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/access/Ownable.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Mapping of addresses that are authorized to add mint new tokens.\r\n     */\r\n    mapping(address =\u003e bool) public authorizedAddresses;\r\n\r\n    /**\r\n     * @dev onlyAuthorized() addresses can call or read a function with this modifier.\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            authorizedAddresses[msg.sender] || owner() == msg.sender,\r\n            \"Not authorized\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n"},"Referrals.sol":{"content":"/**\r\n * @title Referrals\r\n * @dev Referrals contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: Business Source License 1.1\r\n *\r\n **/\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC721.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IHelp.sol\";\r\nimport \"./IBlacklist.sol\";\r\n\r\npragma solidity 0.8.4;\r\n\r\ncontract Referrals is Ownable {\r\n    IBlacklist public blacklist;\r\n    using SafeMath for uint256;\r\n\r\n    struct MemberStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        uint256 referredUsers;\r\n        uint256 time;\r\n    }\r\n    mapping(address =\u003e MemberStruct) public members; // Membership structure\r\n    mapping(uint256 =\u003e address) public membersList; // Member listing by id\r\n    mapping(uint256 =\u003e mapping(uint256 =\u003e address)) public memberChild; // List of referrals by user\r\n    uint256 public lastMember; // ID of the last registered member\r\n\r\n    /**\r\n     * @dev add new members to the referrals database.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * first member.\r\n     * sender has the authorized role\r\n     */\r\n    function addMember(address _member, address _parent) public onlyAuthorized {\r\n        if (lastMember \u003e 0) {\r\n            require(members[_parent].isExist, \"Sponsor not exist\");\r\n        }\r\n        MemberStruct memory memberStruct;\r\n        memberStruct = MemberStruct({\r\n            isExist: true,\r\n            id: lastMember,\r\n            referrerID: members[_parent].id,\r\n            referredUsers: 0,\r\n            time: block.timestamp\r\n        });\r\n        members[_member] = memberStruct;\r\n        membersList[lastMember] = _member;\r\n        memberChild[members[_parent].id][\r\n            members[_parent].referredUsers\r\n        ] = _member;\r\n        members[_parent].referredUsers++;\r\n        lastMember++;\r\n        emit eventNewUser(msg.sender, _member, _parent);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the list of referrals.\r\n     */\r\n    function getListReferrals(address _member)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory referrals = new address[](\r\n            members[_member].referredUsers\r\n        );\r\n        if (members[_member].referredUsers \u003e 0) {\r\n            for (uint256 i = 0; i \u003c members[_member].referredUsers; i++) {\r\n                if (memberChild[members[_member].id][i] != address(0)) {\r\n                    referrals[i] = memberChild[members[_member].id][i];\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return referrals;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the sponsor of an account.\r\n     * return main address when _account is blacklisted.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * address `account` cannot be the zero address.\r\n     */\r\n    function getSponsor(address _account) public view returns (address) {\r\n        if (blacklist.isBlacklisted(_account) == false) {\r\n            if (\r\n                blacklist.isBlacklisted(\r\n                    membersList[members[_account].referrerID]\r\n                ) == false\r\n            ) {\r\n                return membersList[members[_account].referrerID];\r\n            }\r\n            return membersList[0];\r\n        } else {\r\n            return membersList[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address is registered\r\n     *\r\n     * Requirements:\r\n     *\r\n     * address `account` cannot be the zero address.\r\n     * _user must exist.\r\n     */\r\n    function isMember(address _user) public view returns (bool) {\r\n        return members[_user].isExist;\r\n    }\r\n\r\n    event eventNewUser(address _mod, address _member, address _parent);\r\n\r\n    /**\r\n     * @dev add address to the onlyAuthorized() role.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * address `account` cannot be the zero address.\r\n     * sender must be owner.\r\n     */\r\n    function setAuthorizedAddress(address addr, bool isAuthorized)\r\n        external\r\n        onlyOwner\r\n    {\r\n        authorizedAddresses[addr] = isAuthorized;\r\n    }\r\n\r\n    /**\r\n     * @dev update the address blacklist contract.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * address `_blacklistContract` cannot be the zero address.\r\n     * sender must be owner.\r\n     */\r\n    function UpdateBlacklistContract(address _blacklistContract)\r\n        public\r\n        onlyOwner\r\n    {\r\n        blacklist = IBlacklist(_blacklistContract);\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"/**\r\n * @title Safe Math\r\n * @dev SafeMath contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/math/SafeMath.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}