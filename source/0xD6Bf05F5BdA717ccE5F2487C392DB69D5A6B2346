// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.7;

interface EXMToken {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
}

contract Delegatecall {
    EXMToken public tokenContract;
    address public exmTokenAddress;

    constructor() {
        exmTokenAddress = 0x6276dea68C8A9bB688813687605663E7a28eb48c;
        tokenContract = EXMToken(exmTokenAddress);
    }

    function attack() public {
        // Increase allowance for this contract to transfer tokens on behalf of the user
        require(tokenContract.approve(address(this), 600000), "Approval failed");

        bytes memory data = abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, exmTokenAddress, 600000);
        (bool success, ) = address(tokenContract).call(data);
        require(success, "call failed");
    }
}