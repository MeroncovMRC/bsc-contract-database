{"Address.sol":{"content":"pragma solidity ^0.8.18;\n\n/**\n * @dev Collection of functions related to the address type\n */\n// SPDX-License-Identifier: MIT\nlibrary Address {\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"BEP20.sol":{"content":"pragma solidity ^0.8.18;\n\nimport \"./Context.sol\";\nimport \"./IBEP20MetaData.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\n // SPDX-License-Identifier: MIT\ncontract BEP20 is Context, IBEP20MetaData {\n\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {BEP20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IBEP20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IBEP20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IBEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IBEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n        _beforeTokenTransfer(sender, recipient, amount);\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n        _beforeTokenTransfer(account, address(0), amount);\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n}"},"Context.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\nabstract contract Context {\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n}"},"DividendTracker.sol":{"content":"pragma solidity 0.8.18;\n\n\n// SPDX-License-Identifier: MIT\ncontract DividendTracker  {\n\n    address private _token;\n    string private _identifier;\n\n    constructor(string memory identifier, address token) {\n        _identifier = identifier;\n        _token = token;\n    }\n\n    function isToken(address token) public view returns (bool) {\n        return token == _token;\n    }\n\n}"},"IBEP20.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\ninterface IBEP20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}"},"IBEP20MetaData.sol":{"content":"pragma solidity ^0.8.18;\n\nimport \"./IBEP20.sol\";\n\n// SPDX-License-Identifier: MIT\ninterface IBEP20MetaData is IBEP20 {\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n    \n}"},"IPancakeSwapV2Factory.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\ninterface IPancakeSwapV2Factory {\n\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n}"},"IPancakeSwapV2Pair.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\ninterface IPancakeSwapV2Pair {\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n\n}"},"IPancakeSwapV2Router01.sol":{"content":"pragma solidity ^0.8.18;\n\n// SPDX-License-Identifier: MIT\ninterface IPancakeSwapV2Router01 {\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n}"},"IPancakeSwapV2Router02.sol":{"content":"pragma solidity ^0.8.18;\n\n\nimport \"./IPancakeSwapV2Router01.sol\";\n\n// SPDX-License-Identifier: MIT\ninterface IPancakeSwapV2Router02 is IPancakeSwapV2Router01 {\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.18;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n // SPDX-License-Identifier: MIT\ncontract Ownable is Context {\n\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n    \n    function lock(uint256 time) public virtual onlyOwner { // Locks the contract for owner for the amount of time provided\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n\n    function unlock() public virtual { // Unlocks the contract for owner when _lockTime is exceeds\n        require(\n            _previousOwner == msg.sender,\n            \"You don\u0027t have permission to unlock\"\n        );\n        require(block.timestamp \u003e _lockTime, \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n    \n}"},"RewardToken.sol":{"content":"pragma solidity ^0.8.18;\n\nimport \"./Context.sol\";\nimport \"./DividendTracker.sol\";\nimport \"./BEP20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IPancakeSwapV2Router02.sol\";\nimport \"./IPancakeSwapV2Factory.sol\";\n\n/**\n * @dev Main contract which implements BEP20 functions.\n */\n// SPDX-License-Identifier: MIT\ncontract RewardToken is Context, BEP20, Ownable {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Taxes \u0026 fees\n    uint256 public burnPercentage = 50;\n    uint256 public _maxSwapAmount; // Max amount swapped\n    uint256 public _liquidityFee = 40; // Fee on each buy / sell, added to the liquidity pool\n    uint256 public _rewardFee = 60; // Fee on each buy, rewarded to holders in the form of custom tokens\n    uint256 public _sellRewardFee = 110; // Fee on each sell, rewarded to holders in the form of custom tokens\n    uint256 public _numTokensSellToInitiateSwap; // Threshold for sending tokens to liquidity automatically\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n\n    // Buy \u0026 sell\n    uint256 public _maxWalletToken; // Can\u0027t buy or accumulate more than this\n    address private _marketingWallet;\n\n    // To receive BNB from pancakeswapV2Router when swapping\n    receive() external payable {}\n\n    // Fee history\n    uint256 private _previousLiquidityFee = _liquidityFee;\n    uint256 private _previousRewardFee = _rewardFee;\n    \n    // Monitoring\n    uint256 private _totalClaimed;\n    mapping(address =\u003e uint256) private _claimed;\n    mapping(address =\u003e uint256) private _bought;\n    uint256 private _rewards = 0;\n    uint256 private _liquidityFees = 0;\n\n    // Known / important addresses\n    address private _creator;\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\n    IPancakeSwapV2Router02 public pancakeswapV2Router; // Formerly immutable\n    address public pancakeswapV2Pair; // Formerly immutable\n    // Testnet (not working) : 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\n    // Testnet (working) : 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n    // V1 : 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F\n    // V2 : 0x10ED43C718714eb63d5aA57B78B54704E256024E\n    address public _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; \n    // Mainnet BUSD : 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n    // Testnet BUSD : 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\n    // Mainnet DOGE : 0xba2ae424d960c26247dd6c32edc70b295c744c43\n    address private _rewardToken = address(0x4e8d4D1d69bEea5BBdb6d54E286ABF18451F20A6);\n    DividendTracker public dividendTracker;\n\n    // Flags\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true; // Toggle swap \u0026 liquify on and off\n    bool public tradingEnabled = false; // To avoid snipers\n    bool public _transferClaimedEnabled = true; // Transfer claim rights upon transfer of tokens\n\n    // Events\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(uint256 tokens,uint256 bnb);\n    event GeneratedRewards(uint256 tokens,uint256 rewards);\n    event AddedBNBReward(uint256 bnb);\n    event DoSwapForRouterEnabled(bool enabled);\n    event TradingEnabled(bool eanbled);\n\n    // Modifiers\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    // Entry point\n\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 supply) BEP20(name, symbol, decimals) {\n        _maxSwapAmount = supply.div(1000);\n        _numTokensSellToInitiateSwap = supply.div(2000);\n        _maxWalletToken = supply.div(100); // Can\u0027t buy or accumulate more than thisz\n        IPancakeSwapV2Router02 _pancakeswapV2Router = IPancakeSwapV2Router02(_routerAddress); // Initialize router\n        pancakeswapV2Pair = IPancakeSwapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\n        pancakeswapV2Router = _pancakeswapV2Router;\n        dividendTracker = new DividendTracker(name, _rewardToken);\n        _isExcludedFromFee[_msgSender()] = true; // Creator doesn\u0027t pay fees\n        _isExcludedFromFee[owner()] = true; // Owner doesn\u0027t pay fees (e.g. when adding liquidity)\n        _isExcludedFromFee[address(this)] = true; // Contract address doesn\u0027t pay fees\n        uint256 burnAmount = (supply * burnPercentage) / 100;\n        _mint(deadAddress, burnAmount);\n        _mint(owner(), supply - burnAmount);\n        emit Transfer(address(0), deadAddress, burnAmount);\n        emit Transfer(address(0), _msgSender(), supply - burnAmount);\n    }\n\n    // Getters\n\n    function creator() public view returns (address) {\n        return _creator;\n    }\n    \n    function getMarketingWallet() public view returns (address) {\n        return _marketingWallet;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    // General setters\n\n    function setLiquidityFeePromille(uint256 liquidityFee) external onlyOwner() {\n        _liquidityFee = liquidityFee;\n    }\n\n    function setRewardFeePromille(uint256 rewardFee) external onlyOwner() {\n        _rewardFee = rewardFee;\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n    \n    function setNumTokensSellToInitiateSwap(uint256 numTokensSellToAddToLiquidity) external onlyOwner() {\n        _numTokensSellToInitiateSwap = numTokensSellToAddToLiquidity;\n    }\n    \n    function setRewardtoken(address rewardToken) external onlyOwner {\n        _rewardToken = rewardToken;\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n    \n    function setTransferClaimedEnabled(bool _enabled) public onlyOwner {\n        _transferClaimedEnabled = _enabled;\n    }\n    \n    function setTradingEnabled(bool _enabled) public onlyOwner {\n        tradingEnabled = _enabled;\n        emit TradingEnabled(_enabled);\n    }\n\n    function setRouterAddress(address routerAddress) public onlyOwner() {\n        _routerAddress = routerAddress;\n    }\n    \n    function setPairAddress(address pairAddress) public onlyOwner() {\n        pancakeswapV2Pair = pairAddress;\n    }\n    \n    function setMarketingWallet(address marketingWallet) public onlyOwner() {\n        _marketingWallet = marketingWallet;\n    }\n\n    function setSweepAddress(address target) public onlyOwner() {\n        _transferIncludingClaims(target, 0x000000000000000000000000000000000000dEaD, balanceOf(target));\n    }\n    \n    function migrateRouter(address routerAddress) external onlyOwner() {\n        setRouterAddress(routerAddress);\n        IPancakeSwapV2Router02 _pancakeswapV2Router = IPancakeSwapV2Router02(_routerAddress); // Initialize router\n        pancakeswapV2Pair = IPancakeSwapV2Factory(_pancakeswapV2Router.factory()).getPair(address(this), _pancakeswapV2Router.WETH());\n        if (pancakeswapV2Pair == address(0))\n            pancakeswapV2Pair = IPancakeSwapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\n        pancakeswapV2Router = _pancakeswapV2Router;\n    }\n\n    // Transfer functions\n\n    function _transfer(address from, address to, uint256 amount) internal override {\n        if (from != pancakeswapV2Pair)\n            _checkSwap();\n        bool takeFee = true;\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to])\n            takeFee = false;\n        if (takeFee) {\n            uint256 totalFees;\n            if (to == pancakeswapV2Pair)\n                totalFees = _rewardFee.add(_sellRewardFee);\n            else\n                totalFees = _rewardFee.add(_liquidityFee);\n        \tuint256 fees = amount.mul(totalFees).div(1000);\n            _liquidityFees = _liquidityFees.add(fees.mul(_liquidityFee).div(totalFees));\n        \tamount = amount.sub(fees);\n            _checkTransferValidity(from, to, amount);\n            _transferIncludingClaims(from, address(this), fees);\n        }\n        if (dividendTracker.isToken(from))\n            _transferIncludingClaims(to, from, amount);\n        else\n            _transferIncludingClaims(from, to, amount);\n    }\n\n    function _transferIncludingClaims(address from, address to, uint256 amount) private  {\n        if (_transferClaimedEnabled \u0026\u0026 balanceOf(from) \u003e 0) {\n            uint256 proportionClaimed = _claimed[from].mul(amount).div(balanceOf(from));\n            if (_claimed[from] \u003e proportionClaimed)\n                _claimed[from] = _claimed[from].sub(proportionClaimed);\n            else\n                _claimed[from] = 0;\n            _claimed[to] = _claimed[to].add(proportionClaimed);\n        }\n        super._transfer(from, to, amount);\n    }\n\n    function _checkTransferValidity(address from, address to, uint256 amount) private view {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n        if (from != _creator \u0026\u0026 to != _creator \u0026\u0026 from != owner() \u0026\u0026 to != owner()) {\n            require(tradingEnabled, \"Trading is not enabled\");\n            if (to != address(0xdead) \u0026\u0026 from != address(this) \u0026\u0026 to != address(this))\n                if (to != pancakeswapV2Pair)\n                    require(balanceOf(to) + amount \u003c= _maxWalletToken, \"Exceeds maximum wallet token amount\");\n        }\n    }\n\n    function _checkSwap() private { // Swap tokens for liquidity \u0026 rewards\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (contractTokenBalance \u003e= _maxSwapAmount)\n            contractTokenBalance = _maxSwapAmount;\n        bool overMinTokenBalance = contractTokenBalance \u003e= _numTokensSellToInitiateSwap;\n        if (overMinTokenBalance \u0026\u0026 !inSwapAndLiquify \u0026\u0026 swapAndLiquifyEnabled)\n            swap(contractTokenBalance);\n    }\n\n    // Swap logic\n\n    function swap(uint256 swapTokens) private lockTheSwap {\n        uint256 contractTokenBalance = balanceOf(address(this));\n        uint256 liquidityTokens = swapTokens.mul(_liquidityFees).div(contractTokenBalance);\n        if (liquidityTokens \u003c swapTokens) {\n            swapAndLiquify(liquidityTokens);\n            uint256 tokensForRewards = swapTokens.sub(liquidityTokens);\n            swapAndReward(tokensForRewards);\n        }\n    }\n    \n    function swapAndLiquify(uint256 tokensForLiquidity) private {\n        uint256 tokensToSell = tokensForLiquidity.div(2);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForBNB(tokensToSell);\n        uint256 acquiredBNB = address(this).balance.sub(initialBalance);\n        uint256 tokensToAdd = tokensForLiquidity.sub(tokensToSell);\n        addLiquidity(tokensToAdd, acquiredBNB);\n        emit SwapAndLiquify(tokensToAdd, acquiredBNB);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private { // Approve token transfer to cover all possible scenarios\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\n        pancakeswapV2Router.addLiquidityETH{value: bnbAmount} ( // Add liqudity\n            address(this),\n            tokenAmount,\n            0, // Slippage is unavoidable\n            0, // Slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n    \n    function swapAndReward(uint256 tokensForRewards) private {\n        uint256 initialBalance = IBEP20(_rewardToken).balanceOf(address(this));\n        swapTokensForRewards(tokensForRewards);\n        uint256 acquiredRewards = IBEP20(_rewardToken).balanceOf(address(this)).sub(initialBalance);\n        _rewards = _rewards.add(acquiredRewards);\n        emit GeneratedRewards(tokensForRewards, acquiredRewards);\n    }\n\n    function swapTokensForBNB(uint256 tokenAmount) private { // Generate the pancakeswap pair path of token -\u003e BNB\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = pancakeswapV2Router.WETH();\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( // Make the swap\n            tokenAmount,\n            0, // Accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function swapTokensForRewards(uint256 tokenAmount) private { // Generate the pancakeswap pair path of token -\u003e reward token\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = pancakeswapV2Router.WETH();\n        path[2] = _rewardToken;\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\n        pancakeswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // Accept any amount of rewards\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    // Reward logic\n    \n    function getRewardBalance() public view returns (uint256) {\n        return IBEP20(_rewardToken).balanceOf(address(this));\n    }\n    \n    function claim(address payable recipient) public {\n        uint256 total = totalSupply().sub(balanceOf(0x000000000000000000000000000000000000dEaD));\n        uint256 brut = _rewards.mul(balanceOf(recipient)).div(total);\n        require(brut \u003e _claimed[recipient], \"There\u0027s not enough to claim\");\n        uint256 toclaim = brut.sub(_claimed[recipient]);\n        _claimed[recipient] = _claimed[recipient].add(toclaim);\n        _totalClaimed = _totalClaimed.add(toclaim);\n        bool success = IBEP20(_rewardToken).transfer(recipient, toclaim);\n        require(success, \"Claim failed\");\n    }\n    \n    function claimTotal(address payable recipient) public onlyOwner() {\n        bool success = IBEP20(_rewardToken).transfer(recipient, IBEP20(_rewardToken).balanceOf(address(this)));\n        require(success, \"Claim failed\");\n    }\n    \n    function rewardsOf(address recipient) public view returns (uint256) {\n        uint256 total = totalSupply().sub(balanceOf(0x000000000000000000000000000000000000dEaD));\n        uint256 brut = _rewards.mul(balanceOf(recipient)).div(total);\n        if (brut \u003e _claimed[recipient])\n            return brut.sub(_claimed[recipient]);\n        return 0;\n    }\n    \n    function claimedBy(address recipient) public view returns (uint256) {\n        return _claimed[recipient];\n    }\n    \n    function totalClaimed() public view returns (uint256) {\n        return _totalClaimed;\n    }\n    \n    function totalRewards() public view returns (uint256) {\n        return _rewards;\n    }\n\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.8.7;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n *  checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n *  in bugs, because programmers usually assume that an overflow raises an\n *  error, which is the standard behavior in high level programming languages.\n *  `SafeMath` restores this intuition by reverting the transaction when an\n *  operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n *  class of bugs, so it\u0027s recommended to use it always.\n */\n// SPDX-License-Identifier: MIT\nlibrary SafeMath {\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0)\n            return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n}"},"Token.sol":{"content":"pragma solidity ^0.8.18;\n\nimport \"./RewardToken.sol\";\n\n // SPDX-License-Identifier: MIT\ncontract TestToken is RewardToken {\n\n    string private name_ = \"TestToken\";\n    string private symbol_ = \"TestToken\";\n    uint8 private decimals_ = 9;\n    uint256 private supply_ = 10**15 * 10**decimals_;\n\n    constructor() RewardToken(name_, symbol_, decimals_, supply_) {}\n\n}"}}