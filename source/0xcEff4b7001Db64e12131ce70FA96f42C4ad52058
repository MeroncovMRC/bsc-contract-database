{"Address.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n\nlibrary Address {\n\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n}\n"},"BabyCrib.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IDistributor.sol\";\nimport \"./IBabyCrib.sol\";\n\n\n/**\n * @dev The official BabyCribToken smart contract\n * \n * developed by MoonMark (DeFi Mark)\n */\ncontract BabyCrib is IBabyCrib {\n    \n    using SafeMath for uint256;\n    using Address for address;\n    \n    // General Info\n    string private constant _name = \"BabyCrib\";\n    string private constant _symbol = \"CRIB\";\n    uint8  private constant _decimals = 9;\n    \n    // Liquidity Settings\n    IUniswapV2Router02 public _router; // DEX Router\n    address public _pair;     // LP Address\n    \n    // lock swapping \n    bool currentlySwapping;\n    modifier lockSwapping {\n        currentlySwapping = true;\n        _;\n        currentlySwapping = false;\n    }\n    \n    // Addresses\n    address public constant _burnWallet = 0x000000000000000000000000000000000000dEaD;\n    address public _marketing = 0xE0A243eb9169256936C505a162478f5988A6fb85;\n    \n    // BNB -\u003e Main\n    address[] path;\n\n    // Balances\n    mapping (address =\u003e uint256) private _rOwned;\n    mapping (address =\u003e uint256) private _tOwned;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    // Exclusions\n    mapping (address =\u003e bool) private _isExcludedFromFees;\n    mapping (address =\u003e bool) private _isExcluded; // both self and external reflections\n    mapping (address =\u003e bool) private _isTxLimitExempt;\n    mapping (address =\u003e bool) public isLiquidityPool;\n    address[] private _excluded;\n\n    // Supply\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 1 * 10**9 * (10 ** _decimals);\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _totalReflections;    // Total reflections\n    \n    // Sell Fee Breakdown\n    uint256 public _burnFee = 3;          // 10% Burned\n    uint256 public _reflectFee = 7;       // 23% Reflected\n    uint256 public _reflectbabyFee = 20;  // 67% Baby Reflections\n\n    // Token Tax Settings\n    uint256 public _sellFee = 30;         // 30% sell tax \n    uint256 public _buyFee = 5;           // 5% buy tax\n    uint256 public _transferFee = 5;      // 5% transfer tax\n    uint256 public _marketingFee = 2;     // 2% Marketing Fee\n\n    // Token Limits\n    uint256 public _maxTxAmount        = _tTotal.div(100);  // 10 million\n    uint256 public _tokenSwapThreshold = _tTotal.div(200);  // 5 million\n    \n    // gas for distributor\n    IDistributor _distributor;\n    uint256 _distributorGas = 500000;\n    \n    // Ownership\n    address public _owner;\n    modifier onlyOwner() {\n        require(msg.sender == _owner); _;\n    }\n    \n    // initalize BabyCrib\n    constructor (address distributor) {\n        \n        // Initalize Router\n        _router = IUniswapV2Router02(0x325E343f1dE602396E256B67eFd1F61C3A6B38Bd);\n        \n        // Create Liquidity Pair\n        _pair = IUniswapV2Factory(_router.factory())\n            .createPair(address(this), _router.WETH());\n\n        // Set Distributor\n        _distributor = IDistributor(distributor);\n\n        // dividend + reward exclusions\n        _excludeFromReward(address(this));\n        _excludeFromReward(_burnWallet);\n        _excludeFromReward(_pair);\n        \n        // fee exclusions \n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[_burnWallet] = true;\n        _isExcludedFromFees[msg.sender] = true;\n        \n        // tx limit exclusions\n        _isTxLimitExempt[msg.sender] = true;\n        _isTxLimitExempt[address(this)] = true;\n        \n        // liquidity pools\n        isLiquidityPool[_pair] = true;\n        \n        // ownership\n        _owner = msg.sender;\n        _rOwned[msg.sender] = _rTotal;\n        \n        // Token -\u003e BNB\n        path = new address[](2);\n        path[0] = address(this);\n        path[1] = _router.WETH();\n\n        // Transfer\n        emit Transfer(address(0), msg.sender, _tTotal);\n    }\n    \n\n    ////////////////////////////////////////////\n    ////////      OWNER FUNCTIONS      /////////\n    ////////////////////////////////////////////\n    \n    /**\n     * @notice Transfers Ownership To New Account\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        _owner = newOwner;  \n        emit TransferOwnership(newOwner);\n    }\n    \n    /**\n     * @notice Withdraws BNB from the contract\n     */\n    function withdrawBNB(uint256 amount) external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value: amount}(\"\");\n        require(s, \u0027Failure on BNB Withdraw\u0027);\n        emit OwnerWithdraw(_router.WETH(), amount);\n    }\n    \n    /**\n     * @notice Withdraws non-CRIB tokens that are stuck as to not interfere with the liquidity\n     */\n    function withdrawForeignToken(address token) external onlyOwner {\n        require(token != address(this), \"Cannot Withdraw BabyCrib Tokens\");\n        uint256 bal = IERC20(token).balanceOf(address(this));\n        if (bal \u003e 0) {\n            IERC20(token).transfer(msg.sender, bal);\n        }\n        emit OwnerWithdraw(token, bal);\n    }\n    \n    /**\n     * @notice Allows the contract to change the router, in the instance of BabySwap V2 making the contract future proof\n     */\n    function setRouterAddress(address router) external onlyOwner {\n        require(router != address(0));\n        _router = IUniswapV2Router02(router);\n        emit UpdatedRouterAddress(router);\n    }\n    \n    function setPairAddress(address newPair) external onlyOwner {\n        require(newPair != address(0));\n        _pair = newPair;\n        isLiquidityPool[newPair] = true;\n        _excludeFromReward(newPair);\n        _distributor.setShare(newPair, 0);\n        emit UpdatedPairAddress(newPair);\n    }\n    \n    function setIsLiquidityPool(address pool, bool isPool) external onlyOwner {\n        isLiquidityPool[pool] = isPool;\n        emit SetIsLiquidityPool(pool, isPool);\n    }\n    \n     /**\n     * @notice Excludes an address from receiving reflections\n     */\n    function excludeFromRewards(address account) external onlyOwner {\n        require(account != address(this) \u0026\u0026 account != _pair);\n        \n        _excludeFromReward(account);\n        _distributor.setShare(account, 0);\n        emit ExcludeFromRewards(account);\n    }\n    \n    function setFeeExemption(address account, bool feeExempt) external onlyOwner {\n        _isExcludedFromFees[account] = feeExempt;\n        emit SetFeeExemption(account, feeExempt);\n    }\n    \n    function setTxLimitExempt(address account, bool isExempt) external onlyOwner {\n        _isTxLimitExempt[account] = isExempt;\n        emit SetTxLimitFeeExemption(account, isExempt);\n    }\n\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\n        _maxTxAmount = maxTxAmount;\n        emit SetMaxTxAmount(maxTxAmount);\n    }\n    \n    function upgradeDistributor(address newDistributor) external onlyOwner {\n        require(newDistributor != address(0));\n        _distributor = IDistributor(newDistributor);\n        emit UpgradedDistributor(newDistributor); \n    }\n    \n    function setTokenSwapThreshold(uint256 tokenSwapThreshold) external onlyOwner {\n        require(tokenSwapThreshold \u003e 0);\n        _tokenSwapThreshold = tokenSwapThreshold;\n        emit SetTokenSwapThreshold(tokenSwapThreshold);\n    }\n    \n    function setMarketingAddress(address marketingAddress) external onlyOwner {\n        require(marketingAddress != address(0));\n        _marketing = marketingAddress;\n        emit SetMarketingAddress(marketingAddress);\n    }\n    \n    /** Sets Various Fees */\n    function setFees(uint256 burnFee, uint256 reflectFee, uint256 reflectbabyFee, uint256 marketingFee, uint256 buyFee, uint256 transferFee) external onlyOwner {\n        _burnFee = burnFee;\n        _reflectFee = reflectFee;\n        _reflectbabyFee = reflectbabyFee;\n        _marketingFee = marketingFee;\n        _sellFee = burnFee.add(_reflectFee).add(_reflectbabyFee);\n        _buyFee = buyFee;\n        _transferFee = transferFee;\n        require(_sellFee \u003c 50);\n        require(buyFee \u003c 50);\n        require(transferFee \u003c 50);\n        require(marketingFee \u003c 5);\n        emit SetFees(burnFee, reflectFee, reflectbabyFee, marketingFee, buyFee, transferFee);\n    }\n    \n    /**\n     * @notice Includes an address back into the reflection system\n     */\n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                // updating _rOwned to make sure the balances stay the same\n                if (_tOwned[account] \u003e 0)\n                {\n                    uint256 newrOwned = _tOwned[account].mul(_getRate());\n                    _rTotal = _rTotal.sub(_rOwned[account]-newrOwned);\n                    _totalReflections = _totalReflections.add(_rOwned[account]-newrOwned);\n                    _rOwned[account] = newrOwned;\n                }\n                else\n                {\n                    _rOwned[account] = 0;\n                }\n\n                _tOwned[account] = 0;\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n        _distributor.setShare(account, balanceOf(account));\n        emit IncludeInRewards(account);\n    }\n    \n    function setDistributorGas(uint256 gas) external onlyOwner {\n        require(gas \u003c 10000000);\n        _distributorGas = gas;\n        emit SetDistributorGas(gas);\n    }\n    \n    \n    ////////////////////////////////////////////\n    ////////      IERC20 FUNCTIONS     /////////\n    ////////////////////////////////////////////\n    \n\n    function name() external pure override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transfer(msg.sender, recipient, amount);\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        return _transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    \n    ////////////////////////////////////////////\n    ////////       READ FUNCTIONS      /////////\n    ////////////////////////////////////////////\n    \n    \n    function getTotalReflections() external view returns (uint256) {\n        return _totalReflections;\n    }\n    \n    function isExcludedFromFee(address account) external view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n    \n    function isExcludedFromRewards(address account) external view override returns(bool) {\n        return _isExcluded[account];\n    }\n    \n    function isTxLimitExempt(address account) external view returns(bool) {\n        return _isTxLimitExempt[account];\n    }\n    \n    function getDistributorAddress() external view returns (address) {\n        return address(_distributor);\n    }\n \n    \n    /**\n     * @notice Converts a reflection value to a token value\n     */\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    /**\n     * @notice Calculates transfer reflection values\n     */\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    /**\n     * @notice Calculates the rate of reflections to tokens\n     */\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n    \n    /**\n     * @notice Gets the current supply values\n     */\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n    \n    function getIncludedTotalSupply() external view override returns (uint256) {\n        (, uint256 tSupply) = _getCurrentSupply();\n        return tSupply;\n    }\n    \n    \n    ////////////////////////////////////////////\n    ////////    INTERNAL FUNCTIONS     /////////\n    ////////////////////////////////////////////\n\n\n    /**\n     * @notice Handles the before and after of a token transfer, such as taking fees and firing off a swap and liquify event\n     */\n    function _transfer(address from, address to, uint256 amount) private returns(bool){\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n        \n        // Check TX Amount Exemptions\n        require(amount \u003c= _maxTxAmount || _isTxLimitExempt[from], \"TX Limit\");\n        \n        if (currentlySwapping) { // tokens being sent to Router or marketing\n            _tokenTransfer(from, to, amount, false);\n            return true;\n        }\n        \n        // Should fee be taken \n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\n        \n        // Should Swap For BNB\n        if (shouldSwapBack(from)) {\n            // Fuel distributors\n            swapBack(_tokenSwapThreshold);\n            // transfer token\n            _tokenTransfer(from, to, amount, takeFee);\n        } else {\n            // transfer token\n            _tokenTransfer(from, to, amount, takeFee);\n            // process dividends\n            try _distributor.process(_distributorGas) {} catch {}\n        }\n        \n        // update distributor values\n        if (!_isExcluded[from]) {\n            _distributor.setShare(from, balanceOf(from));\n        }\n        if (!_isExcluded[to]) {\n            _distributor.setShare(to, balanceOf(to));\n        }\n        return true;\n    }\n    \n    /** Should Contract Sell Down Tokens For BNB */\n    function shouldSwapBack(address from) public view returns(bool) {\n        return balanceOf(address(this)) \u003e= _tokenSwapThreshold \n            \u0026\u0026 !currentlySwapping \n            \u0026\u0026 from != _pair;\n    }\n    \n    function getFee(address sender, address recipient, bool takeFee) internal view returns (uint256) {\n        if (!takeFee) return 0;\n        return isLiquidityPool[recipient] ? _sellFee : isLiquidityPool[sender] ? _buyFee : _transferFee;\n    }\n    \n    /**\n     * @notice Handles the transfer of tokens\n     */\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\n        // Calculate the values required to execute a transfer\n        uint256 fee = getFee(sender, recipient, takeFee);\n        // take fee out of transfer amount\n        uint256 tFee = tAmount.mul(fee).div(100);\n        // new transfer amount\n        uint256 tTransferAmount = tAmount.sub(tFee);\n        // get R Values\n        (uint256 rAmount, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, _getRate());\n        \n        // Take Tokens From Sender\n\t\tif (_isExcluded[sender]) {\n\t\t    _tOwned[sender] = _tOwned[sender].sub(tAmount);\n\t\t}\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n\t\t\n\t\t// Give Taxed Amount To Recipient\n\t\tif (_isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n\t\t}\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \n\t\t\n\t\t// apply fees if applicable\n\t\tif (takeFee) {\n\t\t    \n\t\t    // burn and reflection allocation\n\t\t    uint256 burnPortion; uint256 reflectPortion; uint256 distributorPortion;\n\t\t\n\t        // handle fee logic\n\t\t    if (isLiquidityPool[recipient]) { // tokens are being sold\n\t\t    \n                // burn tokens\n\t    \t    burnPortion = tFee.mul(_burnFee).div(_sellFee);\n                _burnTokens(sender,burnPortion);\n\n                // Reflect tokens\n\t    \t    reflectPortion = tFee.mul(_reflectFee).div(_sellFee);\n    \t\t    _reflectTokens(reflectPortion);\n            \n                // Store tokens in contract for distributor\n                distributorPortion = tFee.sub(reflectPortion).sub(burnPortion);\n                _takeTokens(sender, distributorPortion);\n            \n\t\t    } else { // tokens are being bought or transferred\n\n\t\t        // burn 1/3 of tokens\n\t\t        burnPortion = tFee.div(3);\n\t\t        _burnTokens(sender, burnPortion);\n\t\t    \n\t\t        // reflect other 2/3\n\t\t        reflectPortion = tFee.sub(burnPortion);\n\t\t        _reflectTokens(reflectPortion);\n\t\t    \n\t\t    }\n        \n            // Emit Fee Distribution\n            emit FeesDistributed(burnPortion, reflectPortion, distributorPortion);\n\t\t    \n\t\t}\n\t\t\n        // Emit Transfer\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    \n    /**\n     * @notice Burns CRIB tokens straight to the burn address\n     */\n    function _burnTokens(address sender, uint256 tFee) private {\n        _sendTokens(sender, _burnWallet, tFee);\n    }\n    \n    /**\n     * @notice The contract takes a portion of tokens from taxed transactions\n     */\n    function _takeTokens(address sender, uint256 tTakeAmount) private {\n        _sendTokens(sender, address(this), tTakeAmount);\n    }\n    \n    /**\n     * @notice Allocates Tokens To Address\n     */\n    function _sendTokens(address sender, address receiver, uint256 tAmount) private {\n        uint256 rAmount = tAmount.mul(_getRate());\n        _rOwned[receiver] = _rOwned[receiver].add(rAmount);\n        if(_isExcluded[receiver]) {\n            _tOwned[receiver] = _tOwned[receiver].add(tAmount);\n        }\n        emit Transfer(sender, receiver, tAmount);\n    }\n\n    /**\n     * @notice Increases the rate of how many reflections each token is worth\n     */\n    function _reflectTokens(uint256 tFee) private {\n        uint256 rFee = tFee.mul(_getRate());\n        _rTotal = _rTotal.sub(rFee);\n        _totalReflections = _totalReflections.add(tFee);\n    }\n    \n    /**\n     * @notice Excludes an address from receiving reflections\n     */\n    function _excludeFromReward(address account) private {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] \u003e 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n    \n    /**\n     * @notice Generates BNB by selling tokens and pairs some of the received BNB with tokens to add and grow the liquidity pool\n     */\n    function swapBack(uint256 tokenAmount) private lockSwapping {\n        \n        // tokens for marketing\n        uint256 marketingAmount = tokenAmount.mul(_marketingFee).div(10**2);\n        \n        // transfer from this to marketing, ignoring fees\n        _tokenTransfer(address(this), _marketing, marketingAmount, false);\n        \n        // update distributor\n        if (!_isExcluded[_marketing]) {\n            _distributor.setShare(_marketing, balanceOf(_marketing));\n        }\n    \n        // update token amount to swap\n        uint256 swapAmount = tokenAmount.sub(marketingAmount);\n\n        // Swap CRIB tokens for BNB\n        swapTokensForBNB(swapAmount);\n\n        // Send BNB received to the distributor\n        if (address(this).balance \u003e 0) {\n            (bool success,) = payable(address(_distributor)).call{value: address(this).balance}(\"\");\n            require(success, \u0027Failure on Distributor Payment\u0027);\n        }\n        \n        emit SwappedBack(tokenAmount);\n    }\n\n    /**\n     * @notice Swap tokens for BNB storing the resulting BNB in the contract\n     */\n    function swapTokensForBNB(uint256 tokenAmount) private {\n        \n        // approve router for token amount\n        _allowances[address(this)][address(_router)] = 2*tokenAmount;\n\n        // Execute the swap\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // Accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp.add(300)\n        );\n    }\n    \n    receive() external payable {}  // to receive bnb\n    \n    \n    ////////////////////////////////////////////\n    ////////          EVENTS           /////////\n    ////////////////////////////////////////////\n    \n    event SwappedBack(uint256 swapAmount);\n    event FeesDistributed(uint256 burnPortion, uint256 reflectPortion, uint256 distributorPortion);\n    event TransferOwnership(address newOwner);\n    event OwnerWithdraw(address token, uint256 amount);\n    event UpdatedRouterAddress(address newRouter);\n    event UpdatedPairAddress(address newPair);\n    event SetIsLiquidityPool(address pool, bool isPool);\n    event ExcludeFromRewards(address account);\n    event SetFeeExemption(address account, bool feeExempt);\n    event SetTxLimitFeeExemption(address account, bool txLimitExempt);\n    event SetMaxTxAmount(uint256 newAmount);\n    event UpgradedDistributor(address newDistributor); \n    event SetTokenSwapThreshold(uint256 tokenSwapThreshold);\n    event SetMarketingAddress(address marketingAddress);\n    event SetFees(uint256 burnFee, uint256 reflectFee, uint256 reflectbabyFee, uint256 marketingFee, uint256 buyFee, uint256 transferFee);\n    event IncludeInRewards(address account);\n    event SetDistributorGas(uint256 gas);\n    \n}"},"IBabyCrib.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport \"./IERC20.sol\";\n\n/**\n * Exempt Surge Interface\n */\ninterface IBabyCrib is IERC20 {\n    function isExcludedFromRewards(address account) external view returns(bool);\n    function getIncludedTotalSupply() external view returns (uint256);\n}\n"},"IDistributor.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IDistributor {\n    function setShare(address shareholder, uint256 amount) external;\n    function process(uint256 gas) external;\n    function getShareholders() external view returns (address[] memory);\n    function getShareForHolder(address holder) external view returns(uint256);\n}\n"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}