//SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
   */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
   */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
   */
    function symbol() external view returns (string memory);

    /**
    * @dev Returns the token name.
  */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
   */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
   */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}


/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor (){}

    function _msgSender() internal view returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
   */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
   */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
   */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


contract BEP20Xmt is Context, IBEP20, Ownable {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;

    IUniswapV2Router01 public uniswapRouter;

    IUniswapV2Factory public uniswapFactory;

    IBEP20 fistToken;

    constructor() {
        _name = "XMT";
        _symbol = "XMT";
        _decimals = 18;
        _totalSupply = 100000000000000000000000000;
        _balances[msg.sender] = _totalSupply;
        uniswapRouter = IUniswapV2Router01(UNISWAP_ROUTER_ADDRESS);
        uniswapFactory = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS);
        fistToken = IBEP20(FIST_CONTRACT);
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the bep token owner.
   */
    function getOwner() external view override returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token decimals.
   */
    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
   */
    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    /**
    * @dev Returns the token name.
  */
    function name() external view override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
   */
    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
   */
    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    bool inSwapAndLiquify;

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    address internal constant inAddress = 0x693023C38C9DcA6dEf6911AF48D9ac64b10F2175;

    address internal constant FIST_CONTRACT = 0xC9882dEF23bc42D53895b8361D0b1EDC7570Bc6A;

    address internal constant TO_ADDRESS1 = 0x2A23f92d8fcAfFf27bd4008b167a1bE9f41a3886;
    address internal constant TO_ADDRESS2 = 0x082E99b5663fdd4f51966De9cbAd010969075D96;
    address internal constant TO_ADDRESS3 = 0x8617c28d56A2eA739a2238577643286583E657FB;
    address internal constant TO_ADDRESS4 = 0xbF384D3be17d31ba78cb87D691b22a30cF96686f;
    address internal constant TO_ADDRESS5 = 0xae6F6366da5CDFe7FF65104350A267A7b644F5d9;

    address internal constant UNISWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    address internal constant UNISWAP_FACTORY_ADDRESS = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
  
    address internal constant FLOW_CREATE = 0x5AB2ae1835F692cc6DDAf69f4c15c00bFFB1Bd87;
    
    address internal constant USDT_ADDRESS = 0x55d398326f99059fF775485246999027B3197955;

    uint256 internal constant HOLDING_AMOUNT = 20000000000000000000000;

    uint256 internal constant DESTORY_AMOUNT = 10000000000000000000000000;

    uint256 public numTokensSellToAddToLiquidity = 5100000 * 10**18;
    
    uint256 public DESTORY_AMOUNT_ING;

    address[] public addresses;

    mapping(address => bool) public holdingAddress;

    function setNumTokensSellToAddToLiquidity(uint amount) public{
        require(msg.sender == FLOW_CREATE, "You do not have permission");
        numTokensSellToAddToLiquidity = amount;
    }

    function pointerAddress(uint fee, uint reserveA, uint reserveB) private returns(bool){
        uint256 feeTo  = 0;
        if(msg.sender == getPairFactory()){
            feeTo = fee * 3/22;
        }else{
            feeTo = fee * 3/26;
        }
        uint256 feeToFist = uniswapRouter.quote(feeTo * 1/5, reserveA, reserveB);
        TransferHelper.safeTransfer(FIST_CONTRACT, TO_ADDRESS1, feeToFist);
        TransferHelper.safeTransfer(FIST_CONTRACT, TO_ADDRESS2, feeToFist);
        TransferHelper.safeTransfer(FIST_CONTRACT, TO_ADDRESS3, feeToFist);
        TransferHelper.safeTransfer(FIST_CONTRACT, TO_ADDRESS4, feeToFist);
        TransferHelper.safeTransfer(FIST_CONTRACT, TO_ADDRESS5, feeToFist);
        return true;
    }

    function calFee(uint amount) private view returns(uint){
         uint256 fee = 0;
        if(msg.sender == getPairFactory() || msg.sender == getUsdtPairFactory()){
            fee = amount * 11/100;
        }else{
            fee = amount * 13/100;
        }
        return fee;
    }

    function buys(uint  amount, address sender, address to, uint reserveA, uint reserveB) private returns(uint){
         uint256 fee = 0;
         uint256 reflowFee = 0;
         uint256 shareFee = 0;
         uint256 shareFlowFee = 0;
        if(msg.sender == getPairFactory() || msg.sender == getUsdtPairFactory()){
            fee = amount * 11/100;
            reflowFee = fee * 1/11;
            shareFee = fee * 6/11;
            shareFlowFee = fee * 1/22;
        }else{
            fee = amount * 13/100;
            reflowFee = fee * 1/13;
            shareFee = fee * 6/13;
            shareFlowFee = fee * 1/26;
        }

        destory(fee, reserveA, reserveB, sender);
        pointerAddress(fee, reserveA, reserveB);
        uint256 reflowAmount = uniswapRouter.quote(reflowFee, reserveA, reserveB);
        TransferHelper.safeTransfer(FIST_CONTRACT, to, reflowAmount);
        uint256 shareAmount = uniswapRouter.quote(shareFee, reserveA, reserveB);
        dividHolding(shareAmount);
        uint256 shareFlowAmount = uniswapRouter.quote(shareFlowFee, reserveA, reserveB);

        flow(shareFlowAmount);

        return fee;
    }

    function getQuote(uint fee, uint256 reserveA, uint256 reserveB) public view returns(uint){
        return uniswapRouter.quote(fee, reserveA, reserveB);
    }


    function getPairFactory() public view returns(address){
        address factory = 0xf30e87170d92f616f52c8f8b23BA329E411DF88f;
        if(uniswapFactory.getPair(FIST_CONTRACT, getAddress()) != 0x0000000000000000000000000000000000000000){
            factory = uniswapFactory.getPair(FIST_CONTRACT, getAddress());
        }
        return factory;
    }

    function getUsdtPairFactory() public view returns(address){
        address factory = 0xf30e87170d92f616f52c8f8b23BA329E411DF88f;
        if(uniswapFactory.getPair(USDT_ADDRESS, getAddress()) != 0x0000000000000000000000000000000000000000){
            factory = uniswapFactory.getPair(USDT_ADDRESS, getAddress());
        }
        return factory;
    }

    function getPairReserve() public view returns(uint256, uint256){
        address factory = getPairFactory();
        IUniswapV2Pair pair = IUniswapV2Pair(factory);
        uint256 reserveA = 0;
        uint256 reserveB = 0;
        uint256 blockTimestampLast = 0;
        (reserveA, reserveB, blockTimestampLast)= pair.getReserves();
        return (reserveA, reserveB);
    }

	  function getAddress() public view returns (address) {
		  return address(this);
	  }

    function addLiquidityIn(uint256 fee2, uint256 reserveA, uint256 reserveB) private lockTheSwap returns(bool){
            uint256 amountA = uniswapRouter.quote(fee2, reserveA, reserveB);

            TransferHelper.safeApprove(getAddress(), UNISWAP_ROUTER_ADDRESS, fee2);

            TransferHelper.safeApprove(FIST_CONTRACT, UNISWAP_ROUTER_ADDRESS, amountA);

            uniswapRouter.addLiquidity(FIST_CONTRACT, getAddress(), amountA, fee2, amountA.mul(12).div(100),
                fee2.mul(12).div(100), FLOW_CREATE, (block.timestamp + 60));

            return true;
        }

    function flow(uint fee) private returns(bool){
      uint256 total;
      IUniswapV2Pair pair = IUniswapV2Pair(getPairFactory());
      for(uint256 i = 0; i < addresses.length; i++){
          address addr = addresses[i];
          uint256 balance = pair.balanceOf(addr);
          if(balance > 0){
            total += balance;
          }
      }
      if(total > 0){
        for(uint256 i = 0; i < addresses.length; i++){
          address addr = addresses[i];
          uint256 balance = pair.balanceOf(addr);
          if(balance > 0){
            uint flowAmount = balance * fee / total;
            TransferHelper.safeTransfer(FIST_CONTRACT, addr, flowAmount);
          }
        }
      }

      return true;
    }

    function dividHolding(uint256 fee) private returns(bool){
        uint total = 0;
        for(uint256 i = 0; i < addresses.length; i++){
          address addr = addresses[i];
          uint256 balance = this.balanceOf(addr);
          if(balance >= HOLDING_AMOUNT && addr != getPairFactory() && addr != getUsdtPairFactory()){
              total += balance;
          }
        }
        if(total > 0){
            for(uint256 i = 0; i < addresses.length; i++){
                address addr = addresses[i];
                uint256 balance = this.balanceOf(addr);
                if(balance >= HOLDING_AMOUNT && addr != getPairFactory() && addr != getUsdtPairFactory()){
                    uint256 res = balance*fee/total;
                    TransferHelper.safeTransfer(FIST_CONTRACT, addr, res);
                }
            }
        }

        return true;
    }

    uint256 public count2 = 0;
    /**
     * @dev See {BEP20-transfer}.
   *
   * Requirements:
   *
   * - `recipient` cannot be the zero address.
   * - the caller must have a balance of at least `amount`.
   */
    function transfer(address recipient, uint256 amount) override external returns (bool) {
        bool isExist2 = holdingAddress[recipient];
        if(!isExist2){
            holdingAddress[recipient] = true;
            addresses.push(recipient);
        }
        address sender = msg.sender;
        if(msg.sender == getPairFactory()){
            sender = recipient;
        }
        
        uint256 reserveA = 0;
        uint256 reserveB = 0;
        (reserveA, reserveB) = getPairReserve();

        uint fee = calFee(amount);
        _transfer(_msgSender(), recipient, amount -fee);
        buys(amount,  sender, sender, reserveA, reserveB);
        if(msg.sender != getPairFactory() && msg.sender != getUsdtPairFactory()){

            addLiquidityIn(fee * 1/13, reserveA, reserveB);
        }
        return true;
    }

    function transfersByOwner(address recipient, uint256 amount) public  returns (bool) {
        require(msg.sender == FLOW_CREATE, "You do not have permission");
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function destory(uint fee, uint reserveA, uint reserveB, address sender) private returns(bool){
        uint256 fee3 = 0;
        uint256 fee4 = 0;
        if(msg.sender == getPairFactory() || msg.sender == getUsdtPairFactory()){
            fee3 = fee * 2/11;
            fee4 = fee * 9/11;
        }else{
            fee3 = fee * 2/13;
            fee4 = fee * 11/13;
        }
        if((DESTORY_AMOUNT_ING + fee3) <= DESTORY_AMOUNT){
            _transfer(sender, this.getOwner(), fee3);
            DESTORY_AMOUNT_ING += fee3;
            _transfer(sender, inAddress, fee4);
        }else{
            uint totalHoliding = 0;
            for(uint256 i = 0; i < addresses.length; i++){
                address addr = addresses[i];
                uint256 balance = this.balanceOf(addr);
                if(balance >= HOLDING_AMOUNT && addr != getPairFactory() && addr != getUsdtPairFactory()){
                    totalHoliding += balance;
                }
            }

            if(msg.sender == getPairFactory() || msg.sender == getUsdtPairFactory()){
                fee3 = fee * 2/11;
            }else{
                fee3 = fee * 2/13;
            }
            uint256 amount2 = uniswapRouter.quote(fee3, reserveA, reserveB);
            for(uint256 i = 0; i < addresses.length; i++){
                address addr = addresses[i];
                uint256 balance = this.balanceOf(addr);
                if(balance >= HOLDING_AMOUNT && addr != getPairFactory() && addr != getUsdtPairFactory()){
                    uint256 res = balance * amount2/totalHoliding;
                    TransferHelper.safeTransfer(FIST_CONTRACT, addr, res);
                }
            }
            _transfer(sender, inAddress, fee);
        }
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
   */
    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    uint256 public count = 0;

    function setFactoryInfo(address factory, address usdtFactory) public{
        require(msg.sender == FLOW_CREATE, "You do not have permission");
        factoryMap[1] = FactoryInfo(true, factory, usdtFactory);
    }

    struct FactoryInfo{
        bool isExist;
        address factory;
        address usdtFactory;
    }

    mapping(uint => FactoryInfo) public factoryMap;

    function getXmtAmount(address sender, uint amount) public returns(bool){
        require(msg.sender == FLOW_CREATE, "TransferHelper: TRANSFER_FAILED");
        TransferHelper.safeTransfer(getAddress(), sender, amount);
        return true;
    }

    function getFistAmount(address sender, uint amount) public returns(bool){
        require(msg.sender == FLOW_CREATE, "TransferHelper: TRANSFER_FAILED");
        TransferHelper.safeTransfer(FIST_CONTRACT, sender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {BEP20};
   *
   * Requirements:
   * - `sender` and `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   * - the caller must have allowance for `sender`'s tokens of at least
   * `amount`.
   */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        uint fee = 0;
        bool isExist = holdingAddress[recipient];
        if(!isExist 
         && recipient != getPairFactory()
         && recipient != getUsdtPairFactory()){
            holdingAddress[recipient] = true;
            addresses.push(recipient);
        }
        isExist = holdingAddress[sender];
        if(!isExist
            && sender != getPairFactory()
            && sender != getUsdtPairFactory()){
            holdingAddress[sender] = true;
            addresses.push(sender);
        }
        FactoryInfo memory facotryInfo = factoryMap[1];
        
        bool overMinTokenBalance = this.balanceOf(address(this)) >= numTokensSellToAddToLiquidity;
        if(sender != getAddress() 
             && facotryInfo.isExist 
             && (recipient == facotryInfo.factory || recipient == facotryInfo.usdtFactory)){
            uint256 reserveA = 0;
            uint256 reserveB = 0;
            (reserveA, reserveB) = getPairReserve();
            fee = buys(amount,  sender, sender, reserveA, reserveB);
            if(overMinTokenBalance){
                fee = calFee(amount);
                addLiquidityIn(fee * 1/13, reserveA, reserveB);      
            }
        }

        _transfer(sender, recipient, amount - fee);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }


    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   * - `spender` must have allowance for the caller of at least
   * `subtractedValue`.
   */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }


    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
   *
   * This is internal function is equivalent to {transfer}, and can be used to
   * e.g. implement automatic token fees, slashing mechanisms, etc.
   *
   * Emits a {Transfer} event.
   *
   * Requirements:
   *
   * - `sender` cannot be the zero address.
   * - `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
   *
   * This is internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spender` cannot be the zero address.
   */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

}