// SPDX-License-Identifier: MIT
pragma solidity ^0.5.17;

library SafeMath {

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20 is IERC20 {
    using SafeMath for uint256;
    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) public _allowed;
    uint256 public _totalSupply;


    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    function transfer(address to, uint256 value) public returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= _allowed[from][msg.sender]);
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        require(value <= _balances[from]);
        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }
}

contract token is ERC20 {

    string public name;
    string public symbol;
    uint8 public decimals = 18;
    address public owner;
    address public lpAddress;
    address public marketingAddress;
    address public fundAddress;
    address public backAddress;
    address public receiveAddress;

    uint256 public lockAmount;
    uint256 public releaseAmount;
    uint256 public startTime;
    uint16 backRate = 200;
    uint16 destroyRate = 400;
    uint16 fundRate = 100;
    uint16 rate = 9200;
    uint16 public marketingRate = 100;
    uint16 transferDestroyRate = 100;
    uint16 transferMarketingRate = 50;
    uint16 transferFundRate = 50;
    uint16 transferRate = 9800;

    uint16 maxRate = 10000;

    mapping(address => bool) public whiteMap;

    constructor() public {
        name = "MTS TOKEN";
        symbol = "MTS";
        _totalSupply = 30000000 * 1e18;
        owner = msg.sender;
        receiveAddress = 0xdAEb23B076eD42953178359EeE0eBD1dD50c0b56;
        lockAmount = 1800000 * 1e18;
        _balances[receiveAddress] = 28200000 * 1e18;
        startTime = block.timestamp; 

        lpAddress = 0x0000000000000000000000000000000000000000;
        marketingAddress = 0x8ed610286440484D4eEbFb05a86322d6E96c82A2;
        fundAddress = 0x7a3C9643412eD3857932964246Ae67DC63998DEd;
        backAddress = 0xF0cc179a95338D3c1f12662a9531011B96739006;
    }
          
    modifier onlyOwner{
        require(msg.sender == owner, "only owner operator");
        _;
    }

    function initAddress(address _lpAddress, address _marketingAddress, address _fundAddress, address _backAddress) onlyOwner public {
        lpAddress = _lpAddress;
        marketingAddress = _marketingAddress;
        fundAddress = _fundAddress;
        backAddress = _backAddress;
    }

    function addWhiteAddress(address user, bool _white) onlyOwner public {
        whiteMap[user] = _white;
    }

    function getDays() public  returns (uint256){
        return (block.timestamp - startTime) / 86400;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));
        require(value <= _balances[from]);

        if (getDays() >= 30 && releaseAmount < lockAmount) {
            startTime = startTime + 30 days;
            uint256 amount = lockAmount.div(6);
            releaseAmount += amount;
            _balances[receiveAddress] = _balances[receiveAddress].add(amount);
        }

        if (whiteMap[from]) {
            _balances[from] = _balances[from].sub(value);
            _balances[to] = _balances[to].add(value);
            emit Transfer(from, to, value);
        } else {

            uint256 realRate;
            uint256 realBackRate;
            uint256 realDestroyRate;
            uint256 realFundRate;
            uint256 realMarketingRate;
            if (from == lpAddress || to == lpAddress) {
                realRate = rate;
                realBackRate = backRate;
                realDestroyRate = destroyRate;
                realFundRate = fundRate;
                realMarketingRate = marketingRate;
            } else {
                realRate = transferRate;
                realBackRate = 0;
                realDestroyRate = transferDestroyRate;
                realFundRate = transferFundRate;
                realMarketingRate = transferMarketingRate;
            }

            uint256 transferAmount = value.mul(realRate).div(maxRate);
            _balances[from] = _balances[from].sub(value);
            _balances[to] = _balances[to].add(transferAmount);
            emit Transfer(from, to, transferAmount);

            uint256 backReward = value.mul(realBackRate).div(maxRate);
            if (backReward > 0) {
                _balances[backAddress] = _balances[backAddress].add(backReward);
                emit Transfer(to, backAddress, backReward);
            }

            uint256 destroyReward = value.mul(realDestroyRate).div(maxRate);
            _balances[address(0)] = _balances[address(0)].add(destroyReward);
            emit Transfer(to, address(0), destroyReward);

            uint256 marketingReward = value.mul(realMarketingRate).div(maxRate);
            _balances[marketingAddress] = _balances[marketingAddress].add(marketingReward);
            emit Transfer(to, marketingAddress, marketingReward);

            uint256 fundReward = value.mul(realFundRate).div(maxRate);
            _balances[fundAddress] = _balances[fundAddress].add(fundReward);
            emit Transfer(to, fundAddress, fundReward);
        }
    }
}