pragma solidity ^0.8.0;

contract tokenprueba  {
    string public name = "token prueba";
    string public symbol = "tp";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000000000 * 10**uint(decimals);
    uint256 public burnTarget = 500000000000 * 10**uint(decimals);
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        if (balanceOf[msg.sender] <= burnTarget) {
            uint256 burnAmount = _value / 100;
            if (balanceOf[msg.sender] <= burnTarget && balanceOf[msg.sender] + burnAmount > burnTarget) {
                burnAmount = burnTarget - balanceOf[msg.sender];
            }
            if (burnAmount > 0) {
                totalSupply -= burnAmount;
                balanceOf[address(0)] += burnAmount;
                emit Transfer(msg.sender, address(0), burnAmount);
            }
        }
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        if (balanceOf[_from] <= burnTarget) {
            uint256 burnAmount = _value / 100;
            if (balanceOf[_from] <= burnTarget && balanceOf[_from] + burnAmount > burnTarget) {
                burnAmount = burnTarget - balanceOf[_from];
            }
            if (burnAmount > 0) {
                totalSupply -= burnAmount;
                balanceOf[address(0)] += burnAmount;
                emit Transfer(_from, address(0), burnAmount);
            }
        }
        return true;
    }
}