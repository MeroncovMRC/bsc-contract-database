{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance \u003e= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}"},"FumaFinance.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./IFactory.sol\";\r\nimport \"./IRouter.sol\";\r\nimport \"./ERC20Burnable.sol\";\r\n\r\ncontract FumaFinance is Context, Ownable, IERC20 {\r\n    using Address for address;\r\n    using Address for address payable;\r\n    \r\n    mapping (address =\u003e uint256) private _rOwned;\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    \r\n    mapping(address =\u003e uint256) private _firstSell;\r\n    mapping(address =\u003e uint256) private _totSells;\r\n    \r\n    mapping(address =\u003e bool) private _isBadActor;\r\n\r\n\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n\r\n\r\n    mapping (address =\u003e bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 5000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n\r\n    string private _name = \"FumaFinance\";\r\n    string private _symbol = \"FUMA\";\r\n    uint8 private _decimals = 9;\r\n\r\n    struct feeRatesStruct {\r\n      uint256 taxFee;\r\n\t  uint256 burnFee;\r\n\t  uint256 airdropFee;\r\n      uint256 marketingFee;      \r\n      uint256 liquidityFee;\r\n      uint256 swapFee;\r\n      uint256 totFees;\r\n    }\r\n    \r\n    feeRatesStruct public buyFees = feeRatesStruct(\r\n     {taxFee: 0,\r\n\t  burnFee: 5000,\r\n      airdropFee: 2000,\r\n\t  liquidityFee: 2000,\r\n      marketingFee: 1000, \r\n      swapFee: 10000, // burnFee+airdropFee+liquidityFee+marketingFee\r\n      totFees: 2\r\n    });\r\n\r\n    feeRatesStruct public sellFees = feeRatesStruct(\r\n     {taxFee: 0,\r\n\t  burnFee: 5000,\r\n      airdropFee: 2000,\r\n\t  liquidityFee: 2000,\r\n      marketingFee: 1000, \r\n      swapFee: 10000, // burnFee+airdropFee+liquidityFee+marketingFee\r\n      totFees: 2\r\n    });\r\n\r\n    feeRatesStruct private appliedFees = buyFees; //default value\r\n    feeRatesStruct private previousFees;\r\n\r\n    struct antiwhale {\r\n      uint256 selling_threshold;//this is value/1000 %\r\n      uint256 extra_tax; //this is value %\r\n    }\r\n\r\n    antiwhale[3] public antiwhale_measures;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rFee;\r\n      uint256 rSwap;\r\n      uint256 tTransferAmount;\r\n      uint256 tFee;\r\n      uint256 tSwap;\r\n    }\r\n\r\n    \r\n    uint256 public maxSellPerDay = _tTotal/1000;\r\n    \r\n    address payable public burnWallet = payable(0x4F704Ff10Fb9609972Ed78186E20E3AA8BE9494D);\r\n    address payable public marketingWallet = payable(0x002c629EF43339f20A311E0D19d1D8F8cD7EF64b);\r\n    address payable public liquidityWallet = payable(0x3Fef1008BE0873467C33fb605310F8033aAEbB96);\r\n    address payable public airdropWallet = payable(0x9b553855CE38882d2cb9Ed00F191D163E43Aa76F);\r\n    \r\n\r\n    IRouter public pancakeRouter;\r\n    address public pancakePair;\r\n    IERC20 public ERC20Token;\r\n    \r\n    bool inSwap;\r\n    bool public swapEnabled = true;\r\n    uint256 private minTokensToSwap = 50000 * 10**9;\r\n    uint256 public maxTxAmount = _tTotal/100;\r\n\r\n\r\n    event swapEnabledUpdated(bool enabled);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        \r\n\r\n        IRouter _pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        pancakePair = IFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[liquidityWallet] = true;\r\n        _isExcludedFromFee[airdropWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        antiwhale_measures[0] = antiwhale({selling_threshold: _tTotal*25/100000, extra_tax: 1});//0.025% of initial supply\r\n        antiwhale_measures[1] = antiwhale({selling_threshold: _tTotal*50/100000, extra_tax: 2});//0.05% of initial supply\r\n        antiwhale_measures[2] = antiwhale({selling_threshold: _tTotal*75/100000, extra_tax: 3});//0.075% of initial supply\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n\r\n    function totalFeesCharged() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        valuesFromGetValues memory s = _getValues(tAmount, false);\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rTotal -= s.rAmount;\r\n        _tFeeTotal += tAmount;\r\n    }\r\n\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] \u003e 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function excludeFromReward(address[] memory accounts) public onlyOwner() {\r\n        uint256 length = accounts.length;\r\n        for(uint256 i=0;i\u003clength;i++)\r\n        {\r\n        require(!_isExcluded[accounts[i]], \"Account is already excluded\");\r\n        if(_rOwned[accounts[i]] \u003e 0) {\r\n            _tOwned[accounts[i]] = tokenFromReflection(_rOwned[accounts[i]]);\r\n        }\r\n        _isExcluded[accounts[i]] = true;\r\n        _excluded.push(accounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n     //to recieve ETH from pancakeRouter when swaping\r\n    receive() external payable {}\r\n\r\n\r\n     function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal     = _rTotal-rFee;\r\n        _tFeeTotal  = _tFeeTotal+tFee;\r\n    }\r\n\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rFee, to_return.rSwap) = _getRValues(to_return,tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tFee = tAmount*appliedFees.totFees*appliedFees.taxFee/1000000;\r\n        s.tSwap = tAmount*appliedFees.totFees*appliedFees.swapFee/1000000;\r\n        s.tTransferAmount = tAmount-s.tFee-s.tSwap;\r\n        return s;\r\n    }\r\n\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount*currentRate;\r\n        if(!takeFee)\r\n        {\r\n            return (rAmount,rAmount,0,0);\r\n        }\r\n        uint256 rFee = s.tFee*currentRate;\r\n        uint256 rSwap = s.tSwap*currentRate;\r\n        uint256 rTransferAmount = rAmount-rFee-rSwap;\r\n        return (rAmount, rTransferAmount, rFee, rSwap);\r\n    }\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        uint256 length = _excluded.length;    \r\n        for (uint256 i = 0; i \u003c length; i++) {\r\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\r\n            rSupply -=_rOwned[_excluded[i]];\r\n            tSupply -=_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply \u003c _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeSwapFees(uint256 rSwap, uint256 tSwap) private {\r\n\r\n        _rOwned[address(this)] +=rSwap;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] +=tSwap;\r\n    }\r\n    \r\n    \r\n            //////////////////////////\r\n           /// Setters functions  ///\r\n          //////////////////////////\r\n    function setBurnWallet(address payable _address) external onlyOwner returns (bool){\r\n        burnWallet = _address;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        return true;\r\n    }    \r\n   function setMarketingWallet(address payable _address) external onlyOwner returns (bool){\r\n        marketingWallet = _address;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        return true;\r\n    }\r\n    function setLiquidityWallet(address payable _address) external onlyOwner returns (bool){\r\n        liquidityWallet = _address;\r\n        _isExcludedFromFee[liquidityWallet] = true;\r\n        return true;\r\n    }\r\n    function setAirdropWallet(address payable _address) external onlyOwner returns (bool){\r\n        airdropWallet = _address;\r\n        _isExcludedFromFee[airdropWallet] = true;\r\n        return true;\r\n    }\r\n       \r\n    function setBuyFees(uint256 taxFee, uint256 burnFee, uint256 airdropFee, uint256 marketingFee, uint256 liquidityFee) external onlyOwner{\r\n        buyFees.taxFee = taxFee;\r\n\t\tbuyFees.burnFee = burnFee;\r\n\t\tbuyFees.airdropFee = airdropFee;\r\n        buyFees.marketingFee = marketingFee;      \r\n        buyFees.liquidityFee= liquidityFee;\r\n        buyFees.swapFee = marketingFee+airdropFee+burnFee+liquidityFee;\r\n        require(buyFees.swapFee+buyFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setSellFees(uint256 sellTaxFee, uint256 sellBurnFee, uint256 sellAirdropFee, uint256 sellMarketingFee, uint256 sellLiquidityFee) external onlyOwner{\r\n        sellFees.taxFee = sellTaxFee;\r\n\t\tsellFees.burnFee = sellBurnFee;\r\n\t\tsellFees.airdropFee = sellAirdropFee; \r\n        sellFees.marketingFee = sellMarketingFee;               \r\n        sellFees.liquidityFee = sellLiquidityFee;        \r\n        sellFees.swapFee = sellMarketingFee+sellAirdropFee+sellBurnFee+sellLiquidityFee;\r\n        require(sellFees.swapFee+sellFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setTotalBuyFees(uint256 _totFees) external onlyOwner{\r\n        buyFees.totFees = _totFees;\r\n    }\r\n    \r\n    function setTotalSellFees(uint256 _totSellFees) external onlyOwner{\r\n        sellFees.totFees = _totSellFees;\r\n    }\r\n    \r\n    function setMaxSellAmountPerDay(uint256 amount) external onlyOwner{\r\n        maxSellPerDay = amount * 10**9;\r\n    }\r\n    \r\n    function setAntiwhaleMeasure(uint256[3] memory selling_thresholds, uint256[3] memory extra_taxes ) external onlyOwner{\r\n        //values of selling_threshold (are values in input)/1000 % of total supply , extra taxes are expressed in %\r\n        antiwhale_measures[0] = antiwhale({selling_threshold: _tTotal*selling_thresholds[0]/100000 , extra_tax: extra_taxes[0]});\r\n        antiwhale_measures[1] = antiwhale({selling_threshold: _tTotal*selling_thresholds[1]/100000 , extra_tax: extra_taxes[1]});\r\n        antiwhale_measures[2] = antiwhale({selling_threshold: _tTotal*selling_thresholds[2]/100000 , extra_tax: extra_taxes[2]});\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit swapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setNumTokensTosSwap(uint256 amount) external onlyOwner{\r\n        minTokensToSwap = amount * 10**9;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 amount) external onlyOwner{\r\n        maxTxAmount = amount * 10**9;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n        function getAntiwhaleFee(uint256 amount) internal view returns(uint256 sell_tax) {\r\n    \r\n        if(amount \u003c antiwhale_measures[0].selling_threshold) {\r\n          sell_tax=0;\r\n        }\r\n        else if(amount \u003c antiwhale_measures[1].selling_threshold) {\r\n          sell_tax = antiwhale_measures[0].extra_tax;\r\n        }\r\n        else if(amount \u003c antiwhale_measures[2].selling_threshold) {\r\n          sell_tax = antiwhale_measures[1].extra_tax;\r\n        }\r\n        else { sell_tax = antiwhale_measures[2].extra_tax; }\r\n\r\n      return sell_tax;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBadActor[from] \u0026\u0026 !_isBadActor[to], \"Bots are not allowed\");\r\n        \r\n        if(!_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to]){\r\n            require(amount \u003c= maxTxAmount, \u0027you are exceeding maxTxAmount\u0027);\r\n        }\r\n        \r\n        if(!_isExcludedFromFee[from] \u0026\u0026 to == pancakePair){\r\n            if(block.timestamp \u003c _firstSell[from]+24 * 1 hours){\r\n                require(_totSells[from]+amount \u003c= maxSellPerDay, \"You can\u0027t sell more than maxSellPerDay\");\r\n                _totSells[from] += amount;\r\n            }\r\n            else{\r\n                require(amount \u003c= maxSellPerDay, \"You can\u0027t sell more than maxSellPerDay\");\r\n                _firstSell[from] = block.timestamp;\r\n                _totSells[from] = amount;\r\n            }\r\n                \r\n        }\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance \u003e= minTokensToSwap;\r\n        if (\r\n            overMinTokenBalance \u0026\u0026\r\n            !inSwap \u0026\u0026\r\n            from != pancakePair \u0026\u0026\r\n            swapEnabled\r\n        ) {\r\n            contractTokenBalance = minTokensToSwap;\r\n            swapAndSendToFees(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        bool isSale = false;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        } else\r\n        {\r\n            if(to == pancakePair){\r\n            isSale = true;\r\n            }\r\n        }\r\n             \r\n        // transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee, isSale);\r\n    }\r\n    \r\n    function swapAndSendToFees(uint256 tokens) private {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBNB(tokens);\r\n        uint256 transferBalance = address(this).balance-initialBalance;\r\n        liquidityWallet.sendValue(transferBalance*appliedFees.liquidityFee/appliedFees.swapFee);\r\n        airdropWallet.sendValue(transferBalance*appliedFees.airdropFee/appliedFees.swapFee);\r\n        burnWallet.sendValue(transferBalance*appliedFees.burnFee/appliedFees.swapFee);\r\n        marketingWallet.sendValue(address(this).balance);\r\n\r\n    }\r\n\t\r\n\tfunction airdrop( address[] calldata _contributors, uint256[] calldata _balances) external   {\r\n\t\tuint8 i = 0;\r\n\t\tfor (i; i \u003c _contributors.length; i++) {\r\n\t\t_transfer(msg.sender,_contributors[i], _balances[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction preSale( address[] calldata _contributors, uint256[] calldata _balances) external   {\r\n\t\tuint8 i = 0;\r\n\t\tfor (i; i \u003c _contributors.length; i++) {\r\n\t\t_transfer(msg.sender,_contributors[i], _balances[i]);\r\n\t\t}\r\n\t}\r\n\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        // generate the pancakeswap pair path of token -\u003e wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        if(allowance(address(this), address(pancakeRouter)) \u003c tokenAmount) {\r\n          _approve(address(this), address(pancakeRouter), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    // this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee, bool isSale) private {\r\n        if(takeFee){\r\n            if(isSale)\r\n            {\r\n            appliedFees = sellFees;\r\n            appliedFees.totFees += getAntiwhaleFee(_totSells[sender]);\r\n            }\r\n            else\r\n            {\r\n            appliedFees = buyFees;\r\n            }\r\n        }\r\n        \r\n        valuesFromGetValues memory s = _getValues(amount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] -=amount;\r\n        } \r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] +=s.rTransferAmount;\r\n        \r\n        if(takeFee)\r\n            {\r\n             _takeSwapFees(s.rSwap,s.tSwap);\r\n             _reflectFee(s.rFee, s.tFee);\r\n             emit Transfer(sender, address(this), s.tSwap);\r\n            }\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n    \r\n            //////////////////////////\r\n           /// Emergency functions //\r\n          //////////////////////////\r\n\r\n\r\n    function rescueBNBFromContract() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\tfunction rescueETHTokenFromContract() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\tfunction rescueERC20TokenFromContract() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n\t\tERC20Token.transfer(_owner,address(this).balance);\r\n    }\r\n\r\n    \r\n    function manualSwap() external onlyOwner{\r\n        uint256 tokensToSwap = balanceOf(address(this));\r\n        swapTokensForBNB(tokensToSwap);\r\n    }\r\n    \r\n    function manualSend() external onlyOwner{\r\n        swapAndSendToFees(balanceOf(address(this)));\r\n    }\r\n\r\n\r\n    // To be used for snipe-bots and bad actors communicated on with the community.\r\n    function badActorDefenseMechanism(address account, bool isBadActor) external onlyOwner{\r\n        _isBadActor[account] = isBadActor;\r\n    }\r\n    \r\n    function checkBadActor(address account) public view returns(bool){\r\n        return _isBadActor[account];\r\n    }\r\n    \r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        require(address(pancakeRouter) != newRouter, \u0027Router already set\u0027);\r\n        //give the option to change the router down the line \r\n        IRouter _newRouter = IRouter(newRouter);\r\n        address get_pair = IFactory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        //checks if pair already exists\r\n        if (get_pair == address(0)) {\r\n            pancakePair = IFactory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            pancakePair = get_pair;\r\n        }\r\n        pancakeRouter = _newRouter;\r\n    }\r\n    \r\n}\r\n"},"IBEP20.sol":{"content":"pragma solidity ^0.8.0;\r\ninterface IBEP20 {\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"IFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n"},"IRouter.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}