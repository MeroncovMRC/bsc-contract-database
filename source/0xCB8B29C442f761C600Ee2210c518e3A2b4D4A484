// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

contract BettingGame is ReentrancyGuard {
    using SafeMath for uint256;

    address public owner;
    uint256 public phase1Duration;
    uint256 public phase2Duration;
    uint256 public phase3Duration;
    uint256 public minimumBet;
    uint256 public maximumBet;

    enum Side {A, B}

    struct Bet {
        address user;
        Side side;
        uint256 amount;
        bool isPhase3Random;
    }

    Bet[] public bets;
    uint256 public phase1EndTime;
    uint256 public phase2EndTime;
    uint256 public phase3EndTime;
    bool public isPhase1Active;
    bool public isPhase2Active;
    bool public isPhase3Active;

    mapping(address => uint256) public sideABets;
    mapping(address => uint256) public sideBBets;
    mapping(address => uint256) public winnings;

    event BetPlaced(address indexed user, Side side, uint256 amount);
    event Phase3Random(address indexed user, Side side, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    modifier onlyAfterPhase1() {
        require(block.timestamp >= phase1EndTime, "Phase 1 is still active");
        _;
    }

    modifier onlyAfterPhase2() {
        require(block.timestamp >= phase2EndTime, "Phase 2 is still active");
        _;
    }

    modifier onlyAfterAllPhases() {
        require(block.timestamp >= phase3EndTime, "All phases are not over yet");
        _;
    }

    modifier onlyDuringPhase3() {
        require(isPhase3Active, "Phase 3 is not active");
        _;
    }

    constructor(
        uint256 _phase1DurationSeconds,
        uint256 _phase2Duration,
        uint256 _phase3Duration,
        uint256 _minimumBetWei,
        uint256 _maximumBetWei
    ) {
        owner = msg.sender;
        phase1Duration = _phase1DurationSeconds;
        phase2Duration = _phase2Duration * 1 minutes;
        phase3Duration = _phase3Duration * 1 minutes;
        minimumBet = _minimumBetWei;
        maximumBet = _maximumBetWei;
        isPhase1Active = false;
        isPhase2Active = false;
        isPhase3Active = false;
    }

    function startRound() external onlyOwner {
        require(!isPhase1Active && !isPhase2Active && !isPhase3Active, "A round is already active");
        phase1EndTime = block.timestamp.add(phase1Duration);
        phase2EndTime = phase1EndTime.add(phase2Duration);
        phase3EndTime = phase2EndTime.add(phase3Duration);
        isPhase1Active = true;
        isPhase2Active = true;
    }

    function placeBetA() external payable nonReentrant {
        require(isPhase1Active || isPhase3Active, "Betting is not allowed in the current phase");
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Bet amount is not within limits");
        
        bets.push(Bet(msg.sender, Side.A, msg.value, false));
        emit BetPlaced(msg.sender, Side.A, msg.value);
        
        if (isPhase3Active) {
            sideABets[address(this)] = sideABets[address(this)].add(msg.value);
        }
    }

    function placeBetB() external payable nonReentrant {
        require(isPhase1Active || isPhase3Active, "Betting is not allowed in the current phase");
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Bet amount is not within limits");
        
        bets.push(Bet(msg.sender, Side.B, msg.value, false));
        emit BetPlaced(msg.sender, Side.B, msg.value);
        
        if (isPhase3Active) {
            sideBBets[address(this)] = sideBBets[address(this)].add(msg.value);
        }
    }

    function placeBetOnPhase3(bool isPhase3Random) external payable nonReentrant {
        require(isPhase3Active, "Phase 3 is not active");
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Bet amount is not within limits");
        
        if (isPhase3Random) {
            bets.push(Bet(msg.sender, Side.A, msg.value, true));
            emit Phase3Random(msg.sender, Side.A, msg.value);
        } else {
            bets.push(Bet(msg.sender, Side.B, msg.value, false));
            emit Phase3Random(msg.sender, Side.B, msg.value);
        }
    }

    function startPhase3() external onlyDuringPhase3 {
        require(block.timestamp >= phase2EndTime, "Phase 3 cannot be started before Phase 2 ends");
        isPhase3Active = true;
    }

    function claimStuckEth() external onlyOwner {
    uint256 Balance = address(this).balance;
    require(Balance > 0, "No ETH to claim");
    payable(owner).transfer(Balance);
}

    function finishRound() external onlyAfterAllPhases {
        require(!isPhase3Active, "Cannot finish round during active Phase 3");

        uint256 totalSideA = sideABets[address(this)];
        uint256 totalSideB = sideBBets[address(this)];
        uint256 totalWinningBets;
        uint256 totalLosingBets;

        for (uint256 i = 0; i < bets.length; i++) {
            Bet memory bet = bets[i];
            if (bet.side == Side.A) {
                totalSideA = totalSideA.add(bet.amount);
            } else {
                totalSideB = totalSideB.add(bet.amount);
            }
        }

        if (totalSideA > totalSideB) {
            totalWinningBets = totalSideB;
            totalLosingBets = totalSideA;
        } else {
            totalWinningBets = totalSideA;
            totalLosingBets = totalSideB;
        }

        for (uint256 i = 0; i < bets.length; i++) {
            Bet memory bet = bets[i];
            if (bet.side == Side.A && totalSideA > totalSideB) {
                winnings[bet.user] = bet.amount.mul(totalLosingBets).div(totalWinningBets);
            } else if (bet.side == Side.B && totalSideB > totalSideA) {
                winnings[bet.user] = bet.amount.mul(totalLosingBets).div(totalWinningBets);
            }
        }
    }

    function withdrawWinnings() external nonReentrant {
        require(winnings[msg.sender] > 0, "No winnings to withdraw");
        uint256 amount = winnings[msg.sender];
        winnings[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }

    function contractBalance() external view returns (uint256) {
        return address(this).balance;
    }

    function setRoundSettings(
        uint256 _phase1Duration,
        uint256 _phase2Duration,
        uint256 _phase3Duration,
        uint256 _minimumBetWei,
        uint256 _maximumBetWei
    ) external onlyOwner {
        phase1Duration = _phase1Duration;
        phase2Duration = _phase2Duration;
        phase3Duration = _phase3Duration;
        minimumBet = _minimumBetWei;
        maximumBet = _maximumBetWei;
    }

    function roundSettings() external view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        return (
            phase1EndTime - block.timestamp,
            phase2EndTime - block.timestamp,
            phase3EndTime - block.timestamp,
            minimumBet,
            maximumBet,
            address(this).balance
        );
    }

    function getBetsCount() external view returns (uint256) {
        return bets.length;
    }
}