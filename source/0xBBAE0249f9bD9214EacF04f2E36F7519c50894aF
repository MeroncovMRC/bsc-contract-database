pragma solidity >=0.7.0 <0.8.0;

//Rickandmorty.io
//3% dev fee

contract RickAndMorty {
    
    uint256 public CEO_FEE = 3;
    
    uint256 public lastPrice = 2000000000000000000;
    uint public generatingSpeed = 200;
    
    uint256 public MORTYS_TO_GENERATE_1Rick=86400;

    uint256 PSN=10000;
    uint256 PSNH=5000;
    
    bool public activated=false;
    address payable public ceoAddress;
    uint public ceoEtherBalance;
    
    mapping (address => uint256) public doofusRicks;
    mapping (address => uint256) public rickC137s;
    mapping (address => uint256) public pickleRick;
    
    mapping (address => uint256) public userGenerateRate;
    
    mapping (address => bool) public cashedOut;
    
    mapping (address => uint256) public userReferralMortys;
    mapping (address => uint256) public lastGenerate;
    mapping (address => address) public referrals;
    
    uint256 public marketMortys;
    uint256 public contractStarted;
    
    constructor() public {
        ceoAddress = msg.sender;
    }
    
    
    function withdrawAdminMoney(uint percentage) public {
        require(msg.sender == ceoAddress);
        require(percentage <= 100);
        require(percentage > 0);
        require(ceoEtherBalance > 0);
        
        uint256 myBalance = calculatePercentage(ceoEtherBalance, percentage);
        ceoEtherBalance = ceoEtherBalance - myBalance;
        ceoAddress.transfer(myBalance);
    }
    
    
    
    function seedMarket() public payable {
        require(marketMortys == 0);
        activated = true;
        marketMortys = 8640000000;
        contractStarted = block.timestamp;
    }
    
    function getMyMortys() public view returns(uint256) {
        return SafeMath.add(userReferralMortys[msg.sender], getMortysSinceLastGenerate(msg.sender));
    }
    
    function getMortysSinceLastGenerate(address adr) public view returns(uint256){
        uint256 secondsPassed=min(MORTYS_TO_GENERATE_1Rick,SafeMath.sub(block.timestamp,lastGenerate[adr]));

        uint256 rickCount = SafeMath.mul(rickC137s[adr], 10);
        rickCount = SafeMath.add(SafeMath.mul(pickleRick[adr], 25), rickCount);
        rickCount = SafeMath.add(rickCount, doofusRicks[adr]);
        return SafeMath.mul(secondsPassed, rickCount);
    }
    
    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return a < b ? a : b;
    }
    
    function getBalance() public view returns(uint256){
        return address(this).balance;
    }
    
    function getMyDoofusRicks() public view returns(uint256) {
        return doofusRicks[msg.sender];
    }
    
    function getMyRickC137() public view returns(uint256) {
        return rickC137s[msg.sender];
    }
    
    function getMyPickleRick() public view returns(uint256) {
        return pickleRick[msg.sender];
    }
    
    // 10 mortys per hour
    function getMortysToGenerateRick() public view returns (uint) {
        uint256 timeSpent = SafeMath.sub(block.timestamp, contractStarted); 
        timeSpent = SafeMath.div(timeSpent, 3600);
        return SafeMath.mul(timeSpent, 10);
    }
    
    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256) {
        return SafeMath.div(SafeMath.mul(amount,percentage), 100);
    }
    
    function getRicksToBuy(uint256 eth, uint256 multiplier) internal returns(uint256) {
        require(activated);
        
        if (lastGenerate[msg.sender] == 0) {
            lastGenerate[msg.sender] = block.timestamp;
        }
        
        uint mortysBought = SafeMath.div(calculateMortyBuy(msg.value, SafeMath.sub(SafeMath.sub(address(this).balance, ceoEtherBalance), msg.value)), multiplier);
        mortysBought=SafeMath.sub(mortysBought,devFee(mortysBought));

        require(mortysBought > 0);
        
        ceoEtherBalance += calculatePercentage(msg.value, CEO_FEE);
        generateMortys(msg.sender);
        return mortysBought;
    }
    
    
    function devFee(uint256 amount) public view returns(uint256) {
        return SafeMath.div(SafeMath.mul(amount,CEO_FEE),100);
    }
    
    function buyDoofusRinck() public payable {
        uint ricks = getRicksToBuy(msg.value, 1);
        doofusRicks[msg.sender] += ricks;
    }
    
    function buyRinckC137() public payable {
        uint ricks = getRicksToBuy(msg.value, 8);
        rickC137s[msg.sender] += ricks;
    }
    
    function buyPickleRinck() public payable {
        require(activated);
        uint ricks = getRicksToBuy(msg.value, 20);
        pickleRick[msg.sender] += ricks;
    }
    
    function generateMortys(address ref) public {
        require(activated);
        
        if (ref != msg.sender ) {
            referrals[msg.sender] = ref;
        }
        
        uint256 mortysGenerated = getMyMortys();
        uint256 newRick = SafeMath.div(mortysGenerated, MORTYS_TO_GENERATE_1Rick);
        newRick = SafeMath.div(mortysGenerated, MORTYS_TO_GENERATE_1Rick);
        rickC137s[msg.sender] = SafeMath.add(rickC137s[msg.sender], newRick);
        lastGenerate[msg.sender]=block.timestamp;
        
        
         userReferralMortys[msg.sender] = 0; 
        
        //send referral Mortys
        userReferralMortys[referrals[msg.sender]]=SafeMath.add(userReferralMortys[referrals[msg.sender]],SafeMath.div(mortysGenerated,10));
        
        //boost market to nerf Rick hoarding
        marketMortys=SafeMath.add(marketMortys,SafeMath.div(newRick,10));
    }
    
    function sellMortys() public {
        require(activated);
        uint256 hasMortys = SafeMath.div(getMyMortys(), MORTYS_TO_GENERATE_1Rick);
        uint256 ethValue = calculateMortySell(hasMortys);
        uint256 fee = calculatePercentage(ethValue, CEO_FEE);
        userReferralMortys[msg.sender] = 0;
        lastGenerate[msg.sender]=block.timestamp;
        marketMortys=SafeMath.add(marketMortys, hasMortys);
        ceoEtherBalance += fee;
        require(address(this).balance > ceoEtherBalance);
        msg.sender.transfer(SafeMath.sub(ethValue,fee));
    }
    
    //magic trade balancing algorithm
    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){
        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));
    }
    
    function calculateMortySell(uint256 mortys) public view returns(uint256){
        return calculateMortySell(mortys, SafeMath.sub(address(this).balance, ceoEtherBalance));
    }
    
    function calculateMortySell(uint256 mortys, uint256 eth) public view returns(uint256){
        return calculateTrade(mortys, marketMortys, eth);
    }
    
    
    function calculateMortyBuy(uint256 eth, uint256 contractBalance) public view returns(uint256){
        return calculateTrade(eth, contractBalance, marketMortys);
    }
    
    function calculateMortyBuy(uint256 eth) public view returns(uint256) {
        return calculateMortyBuy(eth, SafeMath.sub(address(this).balance, ceoEtherBalance));
    }
}

library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}