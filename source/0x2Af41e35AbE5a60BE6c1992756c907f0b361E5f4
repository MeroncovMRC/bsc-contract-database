/**
 *Submitted for verification at BscScan.com on 2023-05-05
*/

/**
 *Submitted for verification at BscScan.com on 2023-05-05
*/

// SPDX-License-Identifier: MIT

// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

pragma solidity 0.8.19;

/** @notice Structure for encapsulating initial scheme data. */
struct InitialScheme {
    uint256 allocatedAmount;
    uint256 fistTimestamp;
    uint256 lastTimestamp;
}

/**
 * @notice Structure for encapsulating time scheme data.
 *
 * TimeScheme is the result of applying a realization of
 * IVestingEvaiV2TimeScheme to an InitialScheme
 */
struct TimeScheme {
    uint256[] dates;
    uint256[] amounts;
}

/**
 * @notice Description of the interfaces which should be implemented
 * for providing different schemes for VestingEvaiV2.
 *
 * TimeScheme is the result of applying a realization of
 * IVestingEvaiV2TimeScheme to an InitialScheme
 */
interface IVestingEvaiV2TimeScheme {
    /** @dev Should return the {TimeScheme} according to the {InitialScheme}. */
    function getScheme(InitialScheme calldata)
        external
        view
        returns(TimeScheme memory);

    /**
     * @dev Auxiliary method should provide realization if checking
     * of the {InitialScheme} to meet a particular requirement.
     */
    function checkScheme(InitialScheme calldata)
        external
        view
        returns(bool);
}

/** @title Auxiliary contract helps with estimation of remained gas. */
contract GasHelper {
    /** @notice Structure for encapsulating data about used gas. */
    struct Gas {
        uint256 gasLeftBefore;
        uint256 gasUsed;
    }

    // EVENTs definition section
    event NotGasEnough(bytes4 indexed selector, bytes data);

    /**
     * @dev Sets {gasLeftBefore} member of {Gas} structure.
     *
     * @return gas struct of {Gas} memory type.
     */
    function _getGas() internal view returns (Gas memory gas) {
        gas.gasLeftBefore = gasleft();
    }

    /**
     * @dev Sets {gasUsed} member of {Gas} structure.
     *
     * @param gas struct of {Gas} (memory type passed by reference).
     */
    function _getUsedGas(Gas memory gas) internal view {
        if(gas.gasUsed == 0) gas.gasUsed = gas.gasLeftBefore-gasleft();
    }

    /**
     * @dev Returns true if gasleft() > gas.gasUsed. If false also
     * emits event NotGasEnough(bytes4 indexed selector, bytes data)
     *
     * @param gas struct of {Gas} (memory type passed by reference).
     * @param selector selector to figuring out the method
     * which was running with not enough gas.
     * @param data user data.
     */
    function _isItEnoughGasLeft(
        Gas memory gas,
        bytes4 selector,
        bytes memory data
    ) internal returns(bool b) {
        b = gasleft() > gas.gasUsed;
        if(!b) emit NotGasEnough(selector, data);
    }
}

/**
 * @title Auxiliary contract helps revert accidentally transactions with
 * sending or transferring coins.
 */
contract Nonpayable {
    receive() external payable {
        revert("Nonpayable: it is not possible to receive money");
    }

    fallback() external payable {
        revert("Nonpayable: it is not possible to receive money");
    }
}

/**
 * @title Auxiliary contract helps with withdrawing accidentally coins
 * and/or accidentally received ERC20 tokens.
 */
contract Cleanable is GasHelper {
    using SafeERC20 for IERC20;

    /** @dev Helper method for withdraw accidentally received coins. */
    function cleanEth() public virtual {
        uint256 _ethB = address(this).balance;
        if(_ethB > 0) payable(msg.sender).transfer(_ethB);
    }

    /**
     * @dev Helper method for withdraw accidentally received ERC20 tokens.
     */
    function cleanTokens(address[] calldata tokens) public virtual {
        Gas memory _gas = _getGas();
        for(uint256 i; i < tokens.length; i++) {
            uint256 b = IERC20(tokens[i]).balanceOf(address(this));
            if(b > 0) IERC20(tokens[i]).safeTransfer(msg.sender, b);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    this.cleanTokens.selector,
                    abi.encodePacked(i)
                )
            ) break;
        }
    }
}

/** @title EVAI's VestingV2 linear vesting scheme creator. */
contract VestingEvaiV2TimeSchemeLinear is
    IVestingEvaiV2TimeScheme,
    Ownable,
    Cleanable,
    Nonpayable
{
    uint256 private immutable m_period; // period in seconds

    /**
     * @dev Sets the value for {m_period}.
     *
     * @param p period (in seconds).
     */
    constructor(uint256 p) { m_period = p; }

    /**
     * @dev Returns the {TimeScheme} according to the {InitialScheme}.
     *
     * @param iS the {InitialScheme} for a vesting.
     */
    function getScheme(InitialScheme calldata iS)
        external
        view
        returns(TimeScheme memory tS)
    {
        require(
            checkScheme(iS),
            "VestingEvaiV2TimeScheme: InitialScheme is not linear"
        );

        uint256 _p = m_period;
        uint256 _schemeLength = (iS.lastTimestamp-iS.fistTimestamp)/_p+1;
        tS.dates = new uint256[](_schemeLength);
        tS.amounts = new uint256[](_schemeLength);

        uint256 _regularPayment = iS.allocatedAmount/_schemeLength;
        for(uint256 i; i < _schemeLength; i++) {
            tS.dates[i] = iS.fistTimestamp+_p*i;
            tS.amounts[i] = _regularPayment;
        }
    }

    /**
     * @dev Auxiliary method for checking is the {InitialScheme} meets
     * requirements to be linear.
     *
     * @param iS the {InitialScheme} to be checked.
     */
    function checkScheme(InitialScheme memory iS)
        public
        view
        returns(bool)
    {
        uint256 _p = m_period;
        uint256 _interval;
        uint256 _schemeLength;
        return (_interval = iS.lastTimestamp-iS.fistTimestamp)%_p == 0 &&
                (_schemeLength = _interval/_p+1) >= 2 &&
                    iS.allocatedAmount%_schemeLength == 0;
    }

    /** @dev Helper method for withdraw accidentally received coins. */
    function cleanEth() public override onlyOwner { super.cleanEth(); }

    /**
     * @dev Helper method for withdraw accidentally received ERC20 tokens.
     *
     * @param tokens list of the tokens to be withdrawn.
     */
    function cleanTokens(address[] calldata tokens) public override onlyOwner {
        super.cleanTokens(tokens);
    }
}

/** @title EVAI's main VestingV2 smart-contract. */
contract VestingEvaiV2 is
    Ownable,
    Cleanable,
    Nonpayable
{
    using SafeERC20 for IERC20;

    /** @notice Auxiliary enum for ClaimSkipped event. */
    enum ClaimSkippingReason {
        NoReason,             // 0x0
        WrongID,              // 0x1
        AlreadyFullyWithdrawn // 0x2
    }

    /**
     * @notice Structure for encapsulating initial scheme data
     * with address of IVestingEvaiV2TimeScheme contract address.
     */
    struct Scheme {
        InitialScheme iS;
        IVestingEvaiV2TimeScheme tS;
    }

    /** @notice Structure for encapsulating main vesting's data. */
    struct VestingEntry {
        uint256 balance;
        uint256 beneficiaryIdx;   // index of beneficiary's receiving address
                                  // in m_beneficiaries array;
        uint256 claimTimestampID; // auxiliary variable for storing
                                  // last executed TimeScheme's time point;
        Scheme scheme;
    }

    /**
     * @notice Auxiliary structure for matching beneficiary's receiving
     * address with set of vestings' ID.
     */
    struct Vestings {
        uint256 beneficiaryIdx;
        uint256[] ids;
    }

    /**
     * @notice Auxiliary structure for "getter" methods which return
     * vesting status.
     */
    struct VestingStatus {
        uint256 id;
        uint256 balance;
        InitialScheme initialScheme;
        TimeScheme timeScheme;
    }

    /**
     * @notice Auxiliary structure for "getter" methods which return
     * vesting statuses.
     */
    struct VestingStatuses {
        address beneficiary;
        VestingStatus[] statuses;
    }

    uint256 private m_totalVested;        // total amount of currently
                                          // vested tokens;
    uint256 private m_IDCounter;          // vestings' ID counter;
    IERC20 private immutable m_EVAIToken; // address of the ERC20 token;
    address[] private m_beneficiaries;    // list of receiving addresses
                                          // beneficiaries;
    /**
     * @notice mapping for matching beneficiary's receiving address with
     * set of vestings' ID.
     */
    mapping(address => Vestings) private m_vestings;
    /** @notice main mapping of vestings' entries. */
    mapping(uint256 => VestingEntry) private m_vestingEntries;

    // EVENTs definition section
    event VestingCreated(uint256 indexed id, VestingEntry vestingEntry);
    event VestingFullyWithdrawn(uint256 indexed id);
    event Claim(uint256 indexed id, uint256 amount, uint256 timestamp);
    event ClaimSkipped(uint256 indexed id, ClaimSkippingReason reason);
    event WrongBeneficiary();

    // MODIFIERS definition section

    /**
     * @dev Sets the value for {m_EVAIToken}.
     *
     * @param erc20 address of the EVAI's Token ERC20 smart-contract.
     *
     * This value is immutable: it can only be set once during
     * construction. Also constructor sets first element of {m_beneficiaries}
     * as address(0): real beneficiary should have not zero index in
     * {m_beneficiaries} list
     */
    constructor(address erc20) {
        m_EVAIToken = IERC20(erc20);
        m_beneficiaries.push(address(0));
    }

    /** @dev Helper method for withdraw accidentally received coins. */
    function cleanEth() public override onlyOwner { super.cleanEth(); }

    /**
     * @dev Helper method for withdraw accidentally received ERC20 tokens.
     *
     * @param tokens list of the tokens to be withdrawn.
     *
     * However it is impossible to withdraw EVAI's ERC20 Token if there is not
     * enough balance to cover all allocated vestings' amounts.
     */
    function cleanTokens(address[] calldata tokens) public override onlyOwner {
        uint256 _sh;
        Gas memory _gas = _getGas();
        for(uint256 i; i < tokens.length; i++) {
            uint256 b = IERC20(tokens[i]).balanceOf(address(this));
            if(b > (_sh = tokens[i] == address(m_EVAIToken) ? m_totalVested : 0))
                IERC20(tokens[i]).safeTransfer(msg.sender, b-_sh);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    this.cleanTokens.selector,
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Changes receiving address for the beneficiary.
     *
     * @param newBeneficiary new address for receiving vested tokens after a claim.
     */
    function changeBeneficiary(address newBeneficiary) external {
        require(
            _isAddressOk(newBeneficiary),
            "VestingEvaiV2: wrong new address for the beneficiary"
        );
        require(
            m_vestings[msg.sender].ids.length > 0,
            "VestingEvaiV2: only the current beneficiary is "
                "allowed to change recipient address"
        );
        m_vestings[newBeneficiary] = m_vestings[msg.sender];
        m_beneficiaries[m_vestings[msg.sender].beneficiaryIdx] = newBeneficiary;
        delete m_vestings[msg.sender];
    }

    /**
     * @dev Creates sets of same vestings for different beneficiaries.
     *
     * @param payer the source address for transferring tokens for the vesting.
     * @param beneficiaries list of beneficiaries.
     * @param scheme vesting scheme.
     */
    function createVestings(
        address payer,
        address[] calldata beneficiaries,
        Scheme calldata scheme
    )
        public
    {
        Gas memory _gas = _getGas();
        for(uint256 i; i < beneficiaries.length; i++) {
            createVesting(payer, beneficiaries[i], scheme);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes(
                        "createVestings(address,address[],((uint256,uint256,uint256),address))"
                    ))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Creates sets of same vestings for different beneficiaries.
     *
     * @param beneficiaries list of beneficiaries.
     * @param scheme vesting scheme.
     */
    function createVestings(
        address[] calldata beneficiaries,
        Scheme calldata scheme
    )
        public
    {
        Gas memory _gas = _getGas();
        for(uint256 i; i < beneficiaries.length; i++) {
            createVesting(beneficiaries[i], scheme);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes(
                        "createVestings(address[],((uint256,uint256,uint256),address))"
                    ))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Creates one vesting for the beneficiary.
     *
     * @param beneficiary the beneficiary.
     * @param scheme vesting scheme.
     */
    function createVesting(address beneficiary, Scheme calldata scheme)
        public
    {
        createVesting(msg.sender, beneficiary, scheme);
    }

    /**
     * @dev Creates one vesting for the beneficiary.
     *
     * @param payer the source address for transferring tokens for the vesting.
     * @param beneficiary the beneficiary.
     * @param scheme vesting scheme.
     */
    function createVesting(
        address payer,
        address beneficiary,
        Scheme calldata scheme
    )
        public
        onlyOwner
    {
        if(!_isAddressOk(beneficiary)) return;
        require(
            scheme.tS.checkScheme(scheme.iS),
            "VestingEvaiV2: it is a wrong scheme"
        );

        uint256 _requiredBalance = m_totalVested+scheme.iS.allocatedAmount;
        if(m_EVAIToken.balanceOf(address(this)) < _requiredBalance) {
            uint256 _requiredAmount =
                _requiredBalance-m_EVAIToken.balanceOf(address(this));
            require(
                m_EVAIToken.allowance(payer, address(this)) >= _requiredAmount,
                "VestingEvaiV2: it is not enough of allowance of target token"
            );
            m_EVAIToken.safeTransferFrom(payer, address(this), _requiredAmount);
        }

        uint256 _beneficiaryIdx = m_vestings[beneficiary].beneficiaryIdx;
        if(_beneficiaryIdx == 0) {
            m_beneficiaries.push(beneficiary);
            m_vestings[beneficiary].beneficiaryIdx =
                _beneficiaryIdx =
                    m_beneficiaries.length-1;
        }

        uint256 id;
        m_vestings[beneficiary].ids.push() = id = ++m_IDCounter;
        m_vestingEntries[id].beneficiaryIdx = _beneficiaryIdx;
        m_vestingEntries[id].scheme = scheme;
        m_vestingEntries[id].balance = scheme.iS.allocatedAmount;

        m_totalVested += scheme.iS.allocatedAmount;

        emit VestingCreated(id, m_vestingEntries[id]);
    }

    /** @dev Makes claims for all vestings of the msg.sender. */
    function claim() external { claim(msg.sender); }

    /**
     * @dev Makes claims for all vestings of beneficiary.
     *
     * @param beneficiary the beneficiary.
     */
    function claim(address beneficiary) public {
        Gas memory _gas = _getGas();
        for(uint256 i; i < m_vestings[beneficiary].ids.length; i++) {
            claim(m_vestings[beneficiary].ids[i]);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes("claim(address)"))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Makes claim for the vesting with id.
     *
     * @param id the ID of a vesting.
     */
    function claim(uint256 id) public {
        if(id == 0 || id > m_IDCounter) {
            emit ClaimSkipped(id, ClaimSkippingReason.WrongID);
            return;
        }

        VestingEntry memory _e = m_vestingEntries[id];

        if(_e.balance == 0) {
            emit ClaimSkipped(id, ClaimSkippingReason.AlreadyFullyWithdrawn);
            return;
        }

        TimeScheme memory _t = _e.scheme.tS.getScheme(_e.scheme.iS);

        address _b = m_beneficiaries[_e.beneficiaryIdx];
        uint256 _a = _b == owner() ? _e.balance : 0;

        uint256 i;
        if(_a == 0)
            for(i = _e.claimTimestampID; i < _t.dates.length;)
                if(_t.dates[i] <= block.timestamp)
                    _a += _t.amounts[i++];
                else break;
        else i = _t.dates.length-1;

        if(_a > 0) {
            m_totalVested -= _a;
            m_vestingEntries[id].balance -= _a;
            m_vestingEntries[id].claimTimestampID = i;
            m_EVAIToken.safeTransfer(_b, _a);
            if(m_vestingEntries[id].balance == 0)
                emit VestingFullyWithdrawn(id);
            else emit Claim(id, _a, block.timestamp);
        }
    }

    /**
     * @dev Makes claims for all vestings of each beneficiary.
     *
     * @param beneficiaries the list of beneficiaries.
     */
    function claim(address[] calldata beneficiaries) external {
        Gas memory _gas = _getGas();
        for(uint256 i; i < beneficiaries.length; i++) {
            claim(beneficiaries[i]);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes("claims(address[])"))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Makes claims of each vestings by ID from list of IDs.
     *
     * @param ids the list of vestings.
     */
    function claim(uint256[] calldata ids) external {
        Gas memory _gas = _getGas();
        for(uint256 i; i < ids.length; i++) {
            claim(ids[i]);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes("claims(uint256[])"))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /**
     * @dev Makes claims of each vestings by ID from a slice of IDs.
     *
     * @param idStart the first ID from a set of vestings.
     * @param idEnd the last ID from a set of vestings.
     */
    function claim(uint256 idStart, uint256 idEnd) external {
        Gas memory _gas = _getGas();
        for(uint256 i = idStart; i <= idEnd; i++) {
            claim(i);
            _getUsedGas(_gas);
            if(
                !_isItEnoughGasLeft(
                    _gas,
                    bytes4(keccak256(bytes("claims(uint256,uint256)"))),
                    abi.encodePacked(i)
                )
            ) break;
        }
    }

    /** @dev Returns smart-contract address of target ERC20 token. */
    function getERC20Token() external view returns(address) {
        return address(m_EVAIToken);
    }

    /** @dev Returns the amount of all vested tokens. */
    function getTotalVestedAmount() external view returns(uint256) {
        return m_totalVested;
    }

     /** @dev Returns actual value of ID's counter. */
    function getIDCounter() external view returns(uint256) { return m_IDCounter; }

    /**
     * @dev Returns the list of all address which currently are registered
     * as beneficiaries' accounts for receiving vested tokens.
     */
    function getAllBeneficiaries() external view returns(address[] memory bs) {
        uint256 _l = m_beneficiaries.length;
        bs = new address[](_l-1);
        for(uint256 i = 1; i < _l; i++) bs[i-1] = m_beneficiaries[i];
    }

    /** @dev Returns statuses of all ever existed vestings. */
    function getAllVestingStatuses()
        external
        view
        returns(VestingStatuses[] memory allVestingStatuses)
    {
        uint256 _l = m_beneficiaries.length;
        allVestingStatuses = new VestingStatuses[](_l-1);
        for(uint256 i = 1; i < _l; i++)
            allVestingStatuses[i-1] = getVestingStatuses(m_beneficiaries[i]);
    }

    /** @dev Returns vestings' statuses of msg.sender. */
    function getVestingStatuses()
        external
        view
        returns(VestingStatuses memory vestingStatuses)
    {
        return getVestingStatuses(msg.sender);
    }

    /**
     * @dev Returns vesting status for vesting with id.
     *
     * @param id ID of the vesting.
     */
    function getVestingStatus(uint256 id)
        public
        view
        returns(uint256 beneficiaryIdx, VestingStatus memory vestingStatus)
    {
        if(id == 0 || id > m_IDCounter) return (beneficiaryIdx, vestingStatus);
        beneficiaryIdx = m_vestingEntries[id].beneficiaryIdx;
        vestingStatus.id = id;
        vestingStatus.balance = m_vestingEntries[id].balance;
        vestingStatus.initialScheme = m_vestingEntries[id].scheme.iS;
        vestingStatus.timeScheme =
            m_vestingEntries[id]
                .scheme
                .tS
                .getScheme(vestingStatus.initialScheme);
    }

    /**
     * @dev Returns all vesting statuses of a beneficiary.
     *
     * @param beneficiary the current recipient address.
     */
    function getVestingStatuses(address beneficiary)
        public
        view
        returns(VestingStatuses memory vestingStatuses)
    {
        uint256 _l = m_vestings[beneficiary].ids.length;
        if(_l == 0) return vestingStatuses;
        vestingStatuses.beneficiary = beneficiary;
        vestingStatuses.statuses = new VestingStatus[](_l);
        for(uint256 i; i < _l; i++)
            (, vestingStatuses.statuses[i]) =
                getVestingStatus(m_vestings[beneficiary].ids[i]);
    }

    /**
     * @dev Auxiliary method returns true if account meets to the requirements.
     *
     * @param account the address to be checked.
     */
    function _isAddressOk(address account) private returns(bool b) {
        b = (account != address(0) && account != address(this));
        if(!b) emit WrongBeneficiary();
    }
}