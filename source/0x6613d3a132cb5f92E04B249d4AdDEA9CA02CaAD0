// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Counters.sol


// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/utils/introspection/ERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;


/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)

pragma solidity ^0.8.0;


/**
 * @dev _Available since v3.1._
 */
interface IERC1155Receiver is IERC165 {
    /**
     * @dev Handles the receipt of a single ERC1155 token type. This function is
     * called at the end of a `safeTransferFrom` after the balance has been updated.
     *
     * NOTE: To accept the transfer, this must return
     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * (i.e. 0xf23a6e61, or its own function selector).
     *
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param value The amount of tokens being transferred
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
     */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
     * @dev Handles the receipt of a multiple ERC1155 token types. This function
     * is called at the end of a `safeBatchTransferFrom` after the balances have
     * been updated.
     *
     * NOTE: To accept the transfer(s), this must return
     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
     * (i.e. 0xbc197c81, or its own function selector).
     *
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
     */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}

// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)

pragma solidity ^0.8.0;



/**
 * @dev _Available since v3.1._
 */
abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }
}

// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol


// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)

pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC1155 compliant contract, as defined in the
 * https://eips.ethereum.org/EIPS/eip-1155[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155 is IERC165 {
    /**
     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.
     */
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);

    /**
     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all
     * transfers.
     */
    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    /**
     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to
     * `approved`.
     */
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);

    /**
     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.
     *
     * If an {URI} event was emitted for `id`, the standard
     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value
     * returned by {IERC1155MetadataURI-uri}.
     */
    event URI(string value, uint256 indexed id);

    /**
     * @dev Returns the amount of tokens of token type `id` owned by `account`.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) external view returns (uint256);

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)
        external
        view
        returns (uint256[] memory);

    /**
     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,
     *
     * Emits an {ApprovalForAll} event.
     *
     * Requirements:
     *
     * - `operator` cannot be the caller.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address account, address operator) external view returns (bool);

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes calldata data
    ) external;

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface of the optional ERC1155MetadataExtension interface, as defined
 * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155MetadataURI is IERC1155 {
    /**
     * @dev Returns the URI for token type `id`.
     *
     * If the `\{id\}` substring is present in the URI, it must be replaced by
     * clients with the actual token type ID.
     */
    function uri(uint256 id) external view returns (string memory);
}

// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)

pragma solidity ^0.8.0;







/**
 * @dev Implementation of the basic standard multi-token.
 * See https://eips.ethereum.org/EIPS/eip-1155
 * Originally based on code by Enjin: https://github.com/enjin/erc-1155
 *
 * _Available since v3.1._
 */
contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
    using Address for address;

    // Mapping from token ID to account balances
    mapping(uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {_setURI}.
     */
    constructor(string memory uri_) {
        _setURI(uri_);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC1155).interfaceId ||
            interfaceId == type(IERC1155MetadataURI).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC1155MetadataURI-uri}.
     *
     * This implementation returns the same URI for *all* token types. It relies
     * on the token type ID substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * Clients calling this function must replace the `\{id\}` substring with the
     * actual token type ID.
     */
    function uri(uint256) public view virtual override returns (string memory) {
        return _uri;
    }

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
        require(account != address(0), "ERC1155: address zero is not a valid owner");
        return _balances[id][account];
    }

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)
        public
        view
        virtual
        override
        returns (uint256[] memory)
    {
        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");

        uint256[] memory batchBalances = new uint256[](accounts.length);

        for (uint256 i = 0; i < accounts.length; ++i) {
            batchBalances[i] = balanceOf(accounts[i], ids[i]);
        }

        return batchBalances;
    }

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC1155-isApprovedForAll}.
     */
    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[account][operator];
    }

    /**
     * @dev See {IERC1155-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );
        _safeTransferFrom(from, to, id, amount, data);
    }

    /**
     * @dev See {IERC1155-safeBatchTransferFrom}.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );
        _safeBatchTransferFrom(from, to, ids, amounts, data);
    }

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, from, to, ids, amounts, data);

        uint256 fromBalance = _balances[id][from];
        require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
        unchecked {
            _balances[id][from] = fromBalance - amount;
        }
        _balances[id][to] += amount;

        emit TransferSingle(operator, from, to, id, amount);

        _afterTokenTransfer(operator, from, to, ids, amounts, data);

        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; ++i) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 fromBalance = _balances[id][from];
            require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
            unchecked {
                _balances[id][from] = fromBalance - amount;
            }
            _balances[id][to] += amount;
        }

        emit TransferBatch(operator, from, to, ids, amounts);

        _afterTokenTransfer(operator, from, to, ids, amounts, data);

        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
    }

    /**
     * @dev Sets a new URI for all token types, by relying on the token type ID
     * substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * By this mechanism, any occurrence of the `\{id\}` substring in either the
     * URI or any of the amounts in the JSON file at said URI will be replaced by
     * clients with the token type ID.
     *
     * For example, the `https://token-cdn-domain/\{id\}.json` URI would be
     * interpreted by clients as
     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`
     * for token type ID 0x4cce0.
     *
     * See {uri}.
     *
     * Because these URIs cannot be meaningfully represented by the {URI} event,
     * this function emits no events.
     */
    function _setURI(string memory newuri) internal virtual {
        _uri = newuri;
    }

    /**
     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _mint(
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: mint to the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);

        _balances[id][to] += amount;
        emit TransferSingle(operator, address(0), to, id, amount);

        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);

        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _mintBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: mint to the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; i++) {
            _balances[ids[i]][to] += amounts[i];
        }

        emit TransferBatch(operator, address(0), to, ids, amounts);

        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);

        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
    }

    /**
     * @dev Destroys `amount` tokens of token type `id` from `from`
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `from` must have at least `amount` tokens of token type `id`.
     */
    function _burn(
        address from,
        uint256 id,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC1155: burn from the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");

        uint256 fromBalance = _balances[id][from];
        require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
        unchecked {
            _balances[id][from] = fromBalance - amount;
        }

        emit TransferSingle(operator, from, address(0), id, amount);

        _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     */
    function _burnBatch(
        address from,
        uint256[] memory ids,
        uint256[] memory amounts
    ) internal virtual {
        require(from != address(0), "ERC1155: burn from the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");

        for (uint256 i = 0; i < ids.length; i++) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 fromBalance = _balances[id][from];
            require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
            unchecked {
                _balances[id][from] = fromBalance - amount;
            }
        }

        emit TransferBatch(operator, from, address(0), ids, amounts);

        _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC1155: setting approval status for self");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning, as well as batched variants.
     *
     * The same hook is called on both single and batched variants. For single
     * transfers, the length of the `ids` and `amounts` arrays will be 1.
     *
     * Calling conditions (for each `id` and `amount` pair):
     *
     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * of token type `id` will be  transferred to `to`.
     * - When `from` is zero, `amount` tokens of token type `id` will be minted
     * for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
     * will be burned.
     * - `from` and `to` are never both zero.
     * - `ids` and `amounts` have the same, non-zero length.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {}

    /**
     * @dev Hook that is called after any token transfer. This includes minting
     * and burning, as well as batched variants.
     *
     * The same hook is called on both single and batched variants. For single
     * transfers, the length of the `id` and `amount` arrays will be 1.
     *
     * Calling conditions (for each `id` and `amount` pair):
     *
     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * of token type `id` will be  transferred to `to`.
     * - When `from` is zero, `amount` tokens of token type `id` will be minted
     * for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
     * will be burned.
     * - `from` and `to` are never both zero.
     * - `ids` and `amounts` have the same, non-zero length.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {}

    function _doSafeTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
                if (response != IERC1155Receiver.onERC1155Received.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non-ERC1155Receiver implementer");
            }
        }
    }

    function _doSafeBatchTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (
                bytes4 response
            ) {
                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non-ERC1155Receiver implementer");
            }
        }
    }

    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
        uint256[] memory array = new uint256[](1);
        array[0] = element;

        return array;
    }
}

// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)

pragma solidity ^0.8.0;


/**
 * @dev Extension of ERC1155 that adds tracking of total supply per id.
 *
 * Useful for scenarios where Fungible and Non-fungible tokens have to be
 * clearly identified. Note: While a totalSupply of 1 might mean the
 * corresponding is an NFT, there is no guarantees that no other token with the
 * same id are not going to be minted.
 */
abstract contract ERC1155Supply is ERC1155 {
    mapping(uint256 => uint256) private _totalSupply;

    /**
     * @dev Total amount of tokens in with a given id.
     */
    function totalSupply(uint256 id) public view virtual returns (uint256) {
        return _totalSupply[id];
    }

    /**
     * @dev Indicates whether any token exist with a given id, or not.
     */
    function exists(uint256 id) public view virtual returns (bool) {
        return ERC1155Supply.totalSupply(id) > 0;
    }

    /**
     * @dev See {ERC1155-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual override {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);

        if (from == address(0)) {
            for (uint256 i = 0; i < ids.length; ++i) {
                _totalSupply[ids[i]] += amounts[i];
            }
        }

        if (to == address(0)) {
            for (uint256 i = 0; i < ids.length; ++i) {
                uint256 id = ids[i];
                uint256 amount = amounts[i];
                uint256 supply = _totalSupply[id];
                require(supply >= amount, "ERC1155: burn amount exceeds totalSupply");
                unchecked {
                    _totalSupply[id] = supply - amount;
                }
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Extension of {ERC1155} that allows token holders to destroy both their
 * own tokens and those that they have been approved to use.
 *
 * _Available since v3.1._
 */
abstract contract ERC1155Burnable is ERC1155 {
    function burn(
        address account,
        uint256 id,
        uint256 value
    ) public virtual {
        require(
            account == _msgSender() || isApprovedForAll(account, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );

        _burn(account, id, value);
    }

    function burnBatch(
        address account,
        uint256[] memory ids,
        uint256[] memory values
    ) public virtual {
        require(
            account == _msgSender() || isApprovedForAll(account, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );

        _burnBatch(account, ids, values);
    }
}

// File: ETF/etf.sol


pragma solidity ^0.8.9;











contract FundGoETFWrapped is ERC1155, Ownable, Pausable, ERC1155Burnable, ERC1155Supply, ERC1155Receiver {
    using SafeERC20 for IERC20;
    using Counters for Counters.Counter;
    Counters.Counter private _fcwId = Counters.Counter(1);
    Counters.Counter private _orderId = Counters.Counter(1);

    struct InterestRate {
        uint256 from;
        uint256 to;
        uint256 rate;
    }

    struct PriceSellNow {
        uint256 price;
        uint256 profit;
        uint256 rate;
        uint256 holdingTime;
        uint256 profitPublisher;
        uint256 actuallyPaidProfit;
    }

    struct Vest {
        uint256 amount;
        bool isVested;
        uint256 vestDate;
        uint256 intervestPayed;
    }

    struct NFTTradeP2P {
        uint256 orderId;
        address user; // isSelling == false: user => seller, isSelling == true: user => buyer
        bool isSelling; 
        uint256 tokenId;
        uint256 sellDate;
        uint256 amount;
        uint256 price;
    }

    struct ETFInformation {
        address publisher;
        string name;
        uint256 price;
        uint256 issueDate;
        uint256 expireDate;
        uint256 intervestTerm;
        uint256 totalSupply;
    }

    
    uint256 constant PUBLISHER_TOKEN_WRAPPED_ID = 0;
    uint256 unitTime = 1 days;
    address public paymentToken;
    address public marketplace;
    address public withdrawer = 0x0f21FA8A0019e6D0c49705c81B30430993364c4B;
    uint256 public baseRate = 1000;
    uint256 public numberTerm = 5;
    uint256 public intervestTermRate = 80; 
    uint256 public totalAdvanceIntervest;
    uint256 public totalIntervestPayed;
    uint256 public onceTermIntervest;
    uint256 public totalProfitPublisher;
    uint256 public decimals;
    uint256 public unit;

    InterestRate[] interestRate;
    ETFInformation public etfInfor;
    mapping(address => bool) whitelists;
    mapping(address => mapping(uint256 => uint256)) public holders;
    mapping(address => mapping(uint256 => Vest[])) public userVest;
    mapping(address => NFTTradeP2P[]) public orderP2P;
    mapping(address => uint256[]) public tokensOwned;
    mapping(address => mapping(uint256 => bool)) public intervestHistory;
    mapping(address => mapping(uint256 => bool)) public intervestTempHistory;
    mapping(uint256 => uint256) public profitOnceTerm;
    mapping(uint256 => uint256) public actualUserProfit;
    mapping(uint256 => uint256) public deviatedProfit;
    
    constructor( 
        address _publisher,
        string memory _name, 
        uint256 _issueDate, 
        uint256 _totalSupply, 
        uint256 _intervestTerm,
        uint256 _numberTerm, 
        uint256 _intervestTermRate,
        uint256 _price,
        address _paymentToken,
        uint256 _decimals,
        address _marketplace
    ) ERC1155("") {
        paymentToken = _paymentToken;
        decimals = _decimals;
        marketplace = _marketplace;
        numberTerm = _numberTerm;
        intervestTermRate = _intervestTermRate;

        if(_decimals == 0) {
            unit = 1 ether;
        } else {
            unit = 10**_decimals;
        }

        etfInfor.publisher = _publisher;
        etfInfor.name = _name;
        etfInfor.issueDate = _issueDate;
        etfInfor.expireDate = _issueDate + _numberTerm * _intervestTerm * unitTime;
        etfInfor.intervestTerm = _intervestTerm;
        etfInfor.price = _price * unit;
        etfInfor.totalSupply = _totalSupply;

        onceTermIntervest = _totalSupply*(((_price * unit * _intervestTermRate)/baseRate) * _intervestTerm)/365;

        interestRate.push(InterestRate(1, 14, 60));
        interestRate.push(InterestRate(15, 29, 70));
        interestRate.push(InterestRate(30, 92, 80));
        
        mint(_publisher, _issueDate, _intervestTerm, _price * unit, _totalSupply);
    }

    modifier validIssueDate(uint256 _issueDate){
        require(block.timestamp  <= _issueDate, "issue date must be greater than or equal to now");
        _;
    }

    modifier onlyExpireDate(){
        require(block.timestamp >= etfInfor.expireDate , "undue");
        _;
    }

    modifier whenNotExpired(){
        require(block.timestamp < etfInfor.expireDate , "ETF was expired");
        _;
    }

    modifier onlyPublisher(address _user){
        require(_user == etfInfor.publisher, "must be publisher");
        _;
    }

    modifier onlyUser(){
        require(msg.sender != etfInfor.publisher, "publisher can not use this feature");
        _;
    }

    event _eventListP2P(address _seller, address _buyer, uint256 _tokenId, uint256 _amount, uint256 _totalValue, uint256 _orderId);
    event _eventDeListP2P(address _seller, address _buyer, uint256 _tokenId, uint256 _amount, uint256 _totalValue, uint256 _orderId);
    event _eventBuyP2P(address _seller, address _buyer, uint256 _tokenId, uint256 _amount,uint256 _totalValue, uint256 _orderId, uint256 _holdingTime);
    event _eventSellNow(address _seller, address _buyer, uint256 _tokenId, uint256 _amount, uint256 _totalValue, uint256 _holdingTime);

    function mint(
        address _publisher,
        uint256 _issueDate,
        uint256 _intervestTerm,
        uint256 _price,
        uint256 _totalSupply
    )
        internal
    {   
        _mint(_publisher, PUBLISHER_TOKEN_WRAPPED_ID, _totalSupply, "");

        // update nft owner and holding time
        tokensOwned[_publisher].push(PUBLISHER_TOKEN_WRAPPED_ID);
        holders[_publisher][PUBLISHER_TOKEN_WRAPPED_ID] = _issueDate;
        // create vesting list
        uint256 vestingAmount = (((_price * intervestTermRate)/baseRate)*_intervestTerm)/365;
        uint256 vestingTime =_issueDate;

        for (uint256 index = 0; index < numberTerm; index++) {
            vestingTime += (_intervestTerm * (unitTime));
            userVest[_publisher][PUBLISHER_TOKEN_WRAPPED_ID].push(Vest(vestingAmount, false, vestingTime, 0));
        }

    }

    /* user sell nft for publisher */ 
    function sellNow(uint256[] memory tokenIds, uint256[] memory amounts)
        public
        onlyUser
        whenNotPaused
        whenNotExpired
    {       
        // validate
        uint256 timeNow = block.timestamp;
        for (uint i = 0; i < tokenIds.length; i++) {
            uint256 tokenId = tokenIds[i];
            uint256 amount = amounts[i];
            require(exists(tokenId), "NFT not exist");
            uint256 balance = balanceOf(msg.sender, tokenId);
            require(balance > 0, "not owner of this tokenId");
            require(amount <= balance, "number of nft must be less than or equal to balance");

            // burn current NFT of user
            ERC1155Burnable.burn(msg.sender, tokenId, amount);
            uint256 currentId = Counters.current(_fcwId);

            // mint new NFT with same amount NFT was burned for publisher
            _mint(etfInfor.publisher, currentId, amount, "");

            // transfer money and profit when sold NFT
            uint256 issueDate = etfInfor.issueDate;
            uint256 intervestTerm = etfInfor.intervestTerm;
            uint256 totalAmount = 0;
            PriceSellNow memory priceSellNow = getPriceWhenSellNow(msg.sender, tokenId);
            totalAmount = (priceSellNow.price + priceSellNow.profit) * amount;
            uint256 parsedValue = convertToOriginValueFromWei(totalAmount);

            IERC20(paymentToken).safeTransfer(msg.sender, parsedValue);

            // update harvest information
            holders[etfInfor.publisher][currentId] = timeNow;
            userVest[etfInfor.publisher][currentId] = userVest[msg.sender][tokenId];
            tokensOwned[etfInfor.publisher].push(currentId);

            // update nft owner
            if(balance == amount){
                removeByTokenId(msg.sender, tokenId);
                delete holders[msg.sender][tokenId];
                delete userVest[msg.sender][tokenId];
            }

            // update intervest paid for trader
            unchecked {
                uint256 duringETF = (block.timestamp - issueDate)/unitTime;
                uint256 currentTerm = duringETF/intervestTerm;
                uint256 remindNumber = duringETF%intervestTerm;

                if(remindNumber > 0){
                    currentTerm += 1;
                }

                if(currentTerm > numberTerm){
                    currentTerm = numberTerm;
                }
            
                if(currentTerm > 0 && priceSellNow.profit > 0){
                    userVest[etfInfor.publisher][currentId][currentTerm - 1].intervestPayed += priceSellNow.actuallyPaidProfit;
                    profitOnceTerm[currentTerm - 1] += (priceSellNow.profitPublisher * amount);
                    actualUserProfit[currentTerm - 1] += (priceSellNow.profit * amount);
                }
            }

            Counters.increment(_fcwId);
            emit _eventSellNow(msg.sender, etfInfor.publisher, tokenId, amount, parsedValue, priceSellNow.holdingTime);
        }
        
    }

    function getPriceWhenSellNow(address _user, uint256 _tokenId) public view returns(PriceSellNow memory) {
        uint256 holdDate = holders[_user][_tokenId];
        uint256 issueDate = etfInfor.issueDate;
        uint256 intervestTerm = etfInfor.intervestTerm;
        uint256 basePrice = etfInfor.price;
        uint256 profit = 0;
        uint256 actuallyAmount = 0;
        uint256 holdingTime;
        uint256 rate;
        uint256 profitPublisher;
        uint256 actuallyPaidProfit;
        unchecked {
            uint256 etfTimeFromNow = (block.timestamp - issueDate)/unitTime;
            // case user sell nft in in term 
            if((((holdDate - issueDate)/unitTime)/intervestTerm) == (etfTimeFromNow/intervestTerm)){
                uint256 price = getPriceAtTime(holdDate);
                holdingTime = (block.timestamp - holdDate)/(unitTime);
                rate = getIntervestRate(holdingTime);
                profit = (((basePrice * rate)/baseRate)*holdingTime)/365;
                actuallyAmount = price;
            } 
            // case user sell nft in difference term 
            else {
                uint256 startDate = issueDate + ((etfTimeFromNow/intervestTerm) * intervestTerm) * (unitTime);
                holdingTime = (block.timestamp - startDate)/(unitTime);
                rate = getIntervestRate(holdingTime);
                profit = (((basePrice * rate)/baseRate)*holdingTime)/365;
                actuallyAmount = basePrice;
            }
            actuallyPaidProfit = (((basePrice * intervestTermRate)/baseRate)*holdingTime)/365;
            profitPublisher = actuallyPaidProfit - profit;
        }
       
        PriceSellNow memory priceSellNow = PriceSellNow(actuallyAmount, profit, rate, holdingTime, profitPublisher, actuallyPaidProfit);

        return priceSellNow;
    }

    function getListingP2P(address _user) public view returns(NFTTradeP2P[] memory) {
        return orderP2P[_user];
    }

    function listP2P(address _buyer, uint256[] memory tokenIds, uint256[] memory amounts, uint256 price) public 
        whenNotPaused
        onlyUser
        whenNotExpired
    {
        uint256 actualPrice = price;
        if(decimals == 0) {
            actualPrice = price*unit;
        }
        address seller = msg.sender;
        uint256 totalAmount;
        for (uint i = 0; i < amounts.length; i++) {
            totalAmount += amounts[i];
        }

        require(totalAmount > 0, "Total token must bigger than 0");
        uint256 pricePerToken = actualPrice/totalAmount;

        for (uint i = 0; i < tokenIds.length; i++) {
            uint256 tokenId = tokenIds[i];
            uint256 amount = amounts[i];
            uint256 tokenPrice = pricePerToken * amount;
            address buyer = _buyer;
            uint256 sellerBalance = balanceOf(seller, tokenId);
            // validate amount
            require(sellerBalance >= amount, "amount must be less than or equal to balance");

            // burn oldToken
            ERC1155Burnable.burn(seller, tokenId, amount);
            uint256 currentId = Counters.current(_fcwId);

            // mint new NFT with same amount NFT was burned for this contract 
            _mint(address(this), currentId, amount, "");

            // update harvest information
            holders[address(this)][currentId] = holders[msg.sender][tokenId];
            userVest[address(this)][currentId] = userVest[msg.sender][tokenId];
            tokensOwned[address(this)].push(currentId);

            // update nft owner
            if(sellerBalance == amount){
                removeByTokenId(msg.sender, tokenId);
                delete holders[msg.sender][tokenId];
                delete userVest[msg.sender][tokenId];
            }

            // transfer nft to contract
            uint256 orderId = _orderId.current();
            //safeTransferFrom(seller, address(this), tokenId, amount, "");

            // update order
            orderP2P[seller].push(NFTTradeP2P(orderId, buyer, true, currentId, block.timestamp, amount, tokenPrice));
            orderP2P[buyer].push(NFTTradeP2P(orderId, seller, false, currentId, block.timestamp, amount, tokenPrice));

            _orderId.increment();
            Counters.increment(_fcwId);

            emit _eventListP2P(seller, buyer, tokenId, amount, amount * tokenPrice, orderId);
        }
        
    }

    function deListingP2P(uint256[] memory orderIds) public whenNotPaused{
        address user = msg.sender;
        for (uint i = 0; i < orderIds.length; i++) {
            uint256 orderId = orderIds[i];
            NFTTradeP2P memory currentUserItem = findItemP2PItem(user, orderId);
            require(currentUserItem.orderId > 0, "OrderId");
           
            address otherUser = currentUserItem.user;
            uint256 tokenId = currentUserItem.tokenId;
            uint256 amount = currentUserItem.amount;
            bool isSelling = currentUserItem.isSelling;
         
            // burn old token in contract 
            _burn(address(this), tokenId, amount);
            uint256 currentId = Counters.current(_fcwId);
            
            if(isSelling){
                // mint to seller
                _mint(user, currentId, amount, "");

                // update harvest information
                holders[user][currentId] = holders[address(this)][tokenId];
                userVest[user][currentId] = userVest[address(this)][tokenId];
                tokensOwned[user].push(currentId);
               
                emit _eventDeListP2P(user, currentUserItem.user, tokenId, amount, currentUserItem.price, orderId);
            } else {
                // mint to seller
                _mint(currentUserItem.user, currentId, amount, "");

                // update harvest information
                holders[currentUserItem.user][currentId] = holders[address(this)][tokenId];
                userVest[currentUserItem.user][currentId] = userVest[address(this)][tokenId];
                tokensOwned[currentUserItem.user].push(currentId);

                emit _eventDeListP2P(currentUserItem.user, user, tokenId, amount, currentUserItem.price, orderId);
            }

            Counters.increment(_fcwId);

            removeByTokenId(address(this), tokenId);
            delete holders[address(this)][tokenId];
            delete userVest[address(this)][tokenId];

            // remove order item
            removeItemP2PItem(user, orderId);
            removeItemP2PItem(otherUser, orderId);
        }
    }

    function findItemP2PItem(address _user, uint256 _id) public view returns(NFTTradeP2P memory){
        for(uint256 i = 0; i < orderP2P[_user].length; i++) { 
            if(orderP2P[_user][i].orderId == _id){
                NFTTradeP2P memory found = orderP2P[_user][i];
                return found;
            }
        }
        NFTTradeP2P memory nullOrder;
        return nullOrder;
    }

    function removeItemP2PItem(address _user, uint256 _id) internal {
        uint256 totalItem = orderP2P[_user].length;
        for(uint256 i = 0; i < totalItem; i++) { 
            if(orderP2P[_user][i].orderId == _id){
                orderP2P[_user][i] = orderP2P[_user][totalItem - 1];
                orderP2P[_user].pop();
                break;
            }
        }
    }

    function buyP2P(uint256[] memory orderIds) 
        public 
        onlyUser
        whenNotPaused
        whenNotExpired
    {
        address buyer = msg.sender;
        uint256 currentTime = block.timestamp;
        uint256 currentTerm = getTermByTime(currentTime);
        require(currentTerm <= numberTerm, "over time, nft was in time redeem");

        for (uint i = 0; i < orderIds.length; i++) {
            uint256 orderId = orderIds[i];
            NFTTradeP2P memory buyItem = findItemP2PItem(buyer, orderId);

            // validate
            require(buyItem.orderId > 0, "order not found");
            address seller = buyItem.user;
            uint256 holdDate = holders[address(this)][buyItem.tokenId];

            require(getTermByTime(buyItem.sellDate) == currentTerm, "Buy P2P must be in a same term");
            // payment
            uint256 priceParsed = convertToOriginValueFromWei(buyItem.price);
            IERC20(paymentToken).safeTransferFrom(buyer, seller, priceParsed);

            // transfer nft
            _burn(address(this), buyItem.tokenId, buyItem.amount);
            uint256 currentId = Counters.current(_fcwId);
            _mint(buyer, currentId, buyItem.amount, "");

            // update new id token information
            if(currentTime < etfInfor.issueDate) {
                currentTime = etfInfor.issueDate;
            }

            holders[buyer][currentId] = currentTime;
            userVest[buyer][currentId] = userVest[address(this)][buyItem.tokenId]; 
            tokensOwned[buyer].push(currentId);

            uint256 holdingTime;

            // update profit paid for user
            unchecked {
                uint256 _currentTerm = currentTerm;
                uint256 oldPrice = getPriceAtTime(holdDate);
                uint256 currentPrice = getPriceAtTime(currentTime);
                uint256 startTerm = userVest[address(this)][buyItem.tokenId][_currentTerm - 1].vestDate - (etfInfor.intervestTerm * unitTime);
                uint256 endTerm = userVest[address(this)][buyItem.tokenId][_currentTerm - 1].vestDate;
                uint256 userProfit = 0;
                if(holdDate > startTerm && holdDate <= endTerm && currentPrice > oldPrice){
                    userProfit = currentPrice - oldPrice;
                } else {
                    userProfit = currentPrice - etfInfor.price;
                }

                userVest[msg.sender][currentId][_currentTerm - 1].intervestPayed += userProfit;
            }

            // remove token infor
            removeByTokenId(address(this), buyItem.tokenId);
            delete holders[address(this)][buyItem.tokenId];
            delete userVest[address(this)][buyItem.tokenId];

            //remove order
            removeItemP2PItem(seller, orderId);
            removeItemP2PItem(buyer, orderId);

            Counters.increment(_fcwId);

            //push event buyed
            emit _eventBuyP2P(seller, buyer, currentId, buyItem.amount, buyItem.price, orderId, holdingTime);
        }
       
    }

    function getTermByTime(uint256 _time) public view returns(uint256) {
        uint256 duringETF = (_time - etfInfor.issueDate)/unitTime;
        uint256 currentTerm = duringETF/etfInfor.intervestTerm;
        uint256 remindNumber = duringETF%etfInfor.intervestTerm;

        if(remindNumber > 0){
            currentTerm += 1;
        }

        if(currentTerm == 0) {
            currentTerm = 1;
        }

        return currentTerm;
    }

    // get intervest when intervest term are due
    function harvest(uint256[] memory _tokenIds, uint256 _index)
        whenNotPaused
        onlyUser
        public
    {      
        address account = msg.sender;

        for (uint i = 0; i < _tokenIds.length; i++) {
            uint256 _tokenId = _tokenIds[i];
            Vest memory vestItem = userVest[account][_tokenId][_index];
            uint256 balance = balanceOf(account, _tokenId);

            require(
                block.timestamp >= vestItem.vestDate && 
                vestItem.isVested == false && 
                vestItem.amount > 0, 
                "token was vested or not in time vested"
            );

            uint256 etherValue = convertToOriginValueFromWei(balance * vestItem.amount);
            IERC20(paymentToken).safeTransfer(account, etherValue);
            userVest[account][_tokenId][_index].isVested = true;

            //update deviated profit
            uint256 holdingTime = holders[account][_tokenId];
            uint256 startTermDate = vestItem.vestDate - etfInfor.intervestTerm * (unitTime);

            if(holdingTime > startTermDate && holdingTime <= vestItem.vestDate){
                uint256 priceAtTime = getPriceAtTime(holdingTime);
                deviatedProfit[_index] += (((priceAtTime - etfInfor.price)*balance) - (vestItem.intervestPayed*balance));
            }
        }
    }

    function getMyAsset(address _user) public view returns(uint256[] memory) {
        return tokensOwned[_user];
    }

    function getMyVestList(address _user, uint256 _tokenId) public view returns(Vest[] memory){
        return userVest[_user][_tokenId];
    }

    function withdrawIntervest(uint256 _termIndex)
        onlyPublisher(msg.sender)
        public
    {   
        address account = msg.sender;
        uint256 totalProfitNft;
        for(uint256 index = 0; index < tokensOwned[msg.sender].length; index++) {
            uint256 tokenId = tokensOwned[msg.sender][index];
            uint256 balance = balanceOf(account, tokenId);
            if(balance > 0){
                Vest memory vestItem = userVest[account][tokenId][_termIndex];
                uint256 currentTime = block.timestamp;
                if(
                    currentTime >= vestItem.vestDate && vestItem.isVested == false
                ){
                    
                    uint256 intervest = (balance * vestItem.amount) - (vestItem.intervestPayed * balance);
                    totalProfitNft += intervest;
                    
                    if(_termIndex == numberTerm - 1) {
                        safeTransferFrom(account, address(this), tokenId, balance, "");
                    }

                    userVest[account][tokenId][_termIndex].isVested = true;
                }
            }
        }

        if(totalProfitNft > 0){
            uint256 etherValue = convertToOriginValueFromWei(totalProfitNft);
            IERC20(paymentToken).safeTransfer(account, etherValue);
        }

        uint256 profit = profitOnceTerm[_termIndex];
        if(profit > 0){
            uint256 profitParsed = convertToOriginValueFromWei(profit);
            IERC20(paymentToken).safeTransfer(account, profitParsed);
            delete profitOnceTerm[_termIndex];
            totalProfitPublisher += profit;
        }

        uint256 dProfit = deviatedProfit[_termIndex];
        if(dProfit > 0){
            uint256 profitParsed = convertToOriginValueFromWei(dProfit);
            IERC20(paymentToken).safeTransfer(account, profitParsed);
            delete deviatedProfit[_termIndex];
        }
    }

    function payIntervest(uint256 _paymentDate) public {
        uint256 etherValue = convertToOriginValueFromWei(onceTermIntervest);
        IERC20(paymentToken).safeTransferFrom(msg.sender, etfInfor.publisher, etherValue);
        totalIntervestPayed += onceTermIntervest;
        intervestHistory[msg.sender][_paymentDate] = true;
    }

    function payAdvanceIntervest(uint256 _paymentDate) public {
        uint256 etherValue = convertToOriginValueFromWei(onceTermIntervest);
        IERC20(paymentToken).safeTransferFrom(msg.sender, address(this), etherValue);
        totalAdvanceIntervest += onceTermIntervest;
        intervestTempHistory[msg.sender][_paymentDate] = true;
    }

    // return intervest after users trading
    function getIntervest(address _publisher, uint256 _termIndex)
        onlyPublisher(_publisher)
        public
        view
        returns(uint256)
    {   
        uint256 totalIntervest;
        address account = _publisher;
        for(uint256 index = 0; index < tokensOwned[account].length; index++) {
            uint256 tokenId = tokensOwned[account][index];
            uint256 balance = balanceOf(account, tokenId);
            if(balance > 0){
                Vest memory vestItem = userVest[account][tokenId][_termIndex];
                uint256 currentTime = block.timestamp;
                if(
                    currentTime >= vestItem.vestDate && vestItem.isVested == false
                ){
                    uint256 intervest = (balance * vestItem.amount) - (vestItem.intervestPayed * balance);
                    totalIntervest += intervest;
                }
            }
        }
        
        return profitOnceTerm[_termIndex] + totalIntervest + deviatedProfit[_termIndex];
    }

    function isIntervestPayed(address _user, uint256 _paymentDate) public view returns(bool) {
        return intervestHistory[_user][_paymentDate];
    }

    function isAdvanceIntervestPayed(address _user, uint256 _paymentDate) public view returns(bool) {
        return intervestTempHistory[_user][_paymentDate];
    }

    // return price and intervest depend on time in intervest term
    function getPriceAtTime(uint256 _time) public view returns(uint256) {
        uint256 currentTime = _time;
        uint256 basePrice = etfInfor.price;
        for (uint256 index = 1; index <= numberTerm; index++) {
            uint256 startDate = etfInfor.issueDate + (etfInfor.intervestTerm * (index - 1) * unitTime);
            uint256 endDate = etfInfor.issueDate + (etfInfor.intervestTerm * index * unitTime);

            if(currentTime > startDate && currentTime <= endDate){
                uint256 numberDays = (currentTime - startDate)/(unitTime);
                return basePrice + (((basePrice * intervestTermRate)/baseRate)*numberDays)/365;
            }
        }

        return basePrice;
    }

    function redeem(uint256[] memory tokenIds, uint256[] memory amounts) 
        public 
        whenNotPaused 
        onlyUser 
        onlyExpireDate
    {
        address account = msg.sender;

        for (uint i = 0; i < tokenIds.length; i++) {
            uint256 tokenId = tokenIds[i];
            uint256 amount = amounts[i];
            
            safeTransferFrom(account, address(this), tokenId, amount, "");
            removeByTokenId(account, tokenId); 
            delete holders[account][tokenId];
            delete userVest[account][tokenId];

            // refund to user
            uint256 totalValue = etfInfor.price * amount;
            uint256 parsedValue = convertToOriginValueFromWei(totalValue);
            IERC20(paymentToken).safeTransfer(account, parsedValue);
        }
        
    }

    function getCurrentId() public view returns(uint256) {
        return _fcwId.current();
    }

    function getIntervestRate(uint256 holdingTime) public view returns(uint256){
        uint256 rate = 0;
        for (uint256 index = 0; index < interestRate.length; index++) {
            if(holdingTime >= interestRate[index].from && holdingTime <= interestRate[index].to){
                rate = interestRate[index].rate;
                break;
            }
        }
        return rate;
    }

    function getHoldingDate(address _user, uint256 _id) public view returns(uint256) {
        return holders[_user][_id];
    }

    function removeByTokenId(address _user, uint256 _id) internal {
        uint256 totalItem = tokensOwned[_user].length;
        for (uint256 index = 0; index < totalItem; index++) {
            if(tokensOwned[_user][index] == _id){
                tokensOwned[_user][index] = tokensOwned[_user][totalItem - 1];
                tokensOwned[_user].pop();
                break;
            }
        }
    }

    function setMarketplace(address _marketplace) public onlyOwner {
        marketplace = _marketplace;
    }

    function convertToOriginValueFromWei(uint256 _weiValue) view internal returns(uint256) {
        if(decimals != 0){
            return _weiValue;
        }
        return _weiValue/(unit);
    }

    function isNotExpired() public view returns(bool) {
        bool notExpired = true;
        if(block.timestamp >= etfInfor.expireDate){
            notExpired = false;
        }
        return notExpired;
    }

    function customTransferFrom(address from, address to, uint256 id, uint256 amount) public whenNotPaused {
        require(msg.sender == marketplace, "caller must be from market");

        uint256 currentId = Counters.current(_fcwId);
        uint256 balanceFrom = balanceOf(from, id);

        require(balanceFrom >= amount, "ERC1155: insufficient balance for transfer");

        _burn(from, id, amount);

        _mint(to, currentId, amount, "");
        
        tokensOwned[to].push(currentId);

        if(block.timestamp < etfInfor.issueDate){
            holders[to][currentId] = etfInfor.issueDate;
        } else {
            holders[to][currentId] = block.timestamp;
        }

        userVest[to][currentId] = userVest[from][id];

        if(balanceFrom == amount){
            removeByTokenId(from, id); 
            delete holders[from][id];
            delete userVest[from][id];
        }

        Counters.increment(_fcwId);
    }

    function setWithdrawer(address _withdrawer) public onlyOwner {
        withdrawer = _withdrawer;
    }

    function emergencyWithdrawal() public {
        require(msg.sender == withdrawer, "Forbiden"); 
        uint256 amount = IERC20(paymentToken).balanceOf(address(this));
        IERC20(paymentToken).transfer(msg.sender, amount);
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    // this function to contract can recevie token ERC1155
    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes calldata
    ) public pure override returns (bytes4) {
        return this.onERC1155Received.selector;
    }

    // this function to contract can recevie token ERC1155
    function onERC1155BatchReceived(
        address,
        address,
        uint256[] calldata,
        uint256[] calldata,
        bytes calldata
    ) public pure override returns (bytes4) {
        revert("batch transfers not supported");
    }

    function supportsInterface(bytes4 interfaceId) 
        public 
        view 
        override(ERC1155, ERC1155Receiver) 
        returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        internal
        whenNotPaused
        override(ERC1155, ERC1155Supply)
    {
        require(from == address(0) || to == address(0) || to == address(this) || from == address(this), "this NFT only trade with this contract");
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }
}