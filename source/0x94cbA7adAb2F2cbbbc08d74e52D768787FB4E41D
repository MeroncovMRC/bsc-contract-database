// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
      * @dev Safely transfers `tokenId` token from `from` to `to`.
      *
      * Requirements:
      *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
      * - `tokenId` token must exist and be owned by `from`.
      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
      *
      * Emits a {Transfer} event.
      */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {

    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID owned by `owner` at a given its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwner(address owner) external view returns(uint256[] memory);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


interface IERC20 {
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

contract WorldTreePool is Ownable {

    address public tokenAddress = 0x31471E0791fCdbE82fbF4C44943255e923F1b794;
    address public normalNFTAddress = 0x13de43C1f2b1dedD575aC9f14cd2F8364C991a46;
    address public fusedNFTAddress = 0x75D6e8E0a7e1953edfFEC3145956D0C806F4c3F3;

    mapping(uint256 => uint256[]) public fridayNormalNFT;
    mapping(uint256 => uint256[]) public fridayFusedNFT;
    mapping(uint256 => uint256[]) public eventNormalNFT;
    mapping(uint256 => uint256[]) public eventFusedNFT;

    mapping(address => bool) private permission;


    uint256 public countFirday= 3;
    uint256 public countEvent= 1;
    
    uint256 public fridayNumberNFT = 10;
    uint256 public eventNumberNFT = 1;
    uint256 public fridayNormalNFTAmount = 2000 * 10**18;
    uint256 public fridayFusedNFTAmount = 10000 * 10**18;
    uint256 public eventNormalNFTAmount = 100000 * 10**18;
    uint256 public eventFusedNFTAmount = 1000000 * 10**18;
    uint256 public fridayPeriod = 604800;
    uint256 public eventPeriod = 2678400;

    uint256 public nextFridayTime = 1684512000;
    uint256 public nextEventTime = 1685548800;



    uint256 private nonce = 0;


    modifier onlyPermission() {
        require(permission[msg.sender], "NOT_THE_PERMISSION");
        _;
    }


    function choseNFTFriday(uint256[] memory _plant, uint256[] memory _fused) public onlyPermission {

        for(uint256 i=0; i<_plant.length; i++){
            address owner = IERC721Enumerable(normalNFTAddress).ownerOf(_plant[i]);

            fridayNormalNFT[countFirday].push(_plant[i]);
            require(IERC20(tokenAddress).transfer(owner, fridayNormalNFTAmount));
        }

        for(uint256 i=0; i<_fused.length; i++){
            address fusedOwner = IERC721Enumerable(fusedNFTAddress).ownerOf(_fused[i]);

            fridayFusedNFT[countFirday].push(_fused[i]);
            require(IERC20(tokenAddress).transfer(fusedOwner, fridayFusedNFTAmount));
            
        }

        nextFridayTime += fridayPeriod;
        countFirday +=1;
    }


    function choseNFTEvent() public onlyPermission {
        uint256 totalNormalNFT = IERC721Enumerable(normalNFTAddress).totalSupply();

        for(uint256 i=0; i<eventNumberNFT; i++){
            uint256 tokenId = _randomNumber(msg.sender, totalNormalNFT);
            eventNormalNFT[countEvent].push(tokenId);
            require(IERC20(tokenAddress).transfer(IERC721Enumerable(normalNFTAddress).ownerOf(tokenId), eventNormalNFTAmount));
        }


        uint256 totalFusedNFT = IERC721Enumerable(fusedNFTAddress).totalSupply();
        for(uint256 i=0; i<eventNumberNFT; i++){
            uint256 tokenId = _randomNumber(msg.sender, totalFusedNFT);
            eventFusedNFT[countEvent].push(tokenId);
            require(IERC20(tokenAddress).transfer(IERC721Enumerable(normalNFTAddress).ownerOf(tokenId), eventFusedNFTAmount));
        }
    
        nextEventTime += eventPeriod;
        countEvent += 1;
    }


    function _randomNumber(address _addr, uint256 _length) internal returns (uint256) {
        uint256 index = uint256(keccak256(abi.encodePacked(_addr, block.timestamp, nonce, blockhash(block.number), gasleft()))) % _length + 1;
        nonce++;
        
        return index;
    }

    function getFridayNormalNFT(uint256 _id) public view returns(uint256[] memory){
        return fridayNormalNFT[_id];
    }

    function getFridayFusedNFT(uint256 _id) public view returns(uint256[] memory){
        uint256 total = fridayFusedNFT[_id].length;
        uint256[] memory result = new uint256[](total);
        for(uint256 i=0; i<total; i++){
            result[i] = fridayFusedNFT[_id][i];
        }
        return result;
    }

    function getEventNormalNFT(uint256 _id) public view returns(uint256[] memory){
        return eventNormalNFT[_id];
    }

    function getEventFusedNFT(uint256 _id) public view returns(uint256[] memory){
        return eventFusedNFT[_id];
    }


    function setPermission(address _permission, bool _enabled) external onlyOwner {
        permission[_permission] = _enabled;
    }
    // @dev Sets the reference to the plant.
    /// @param _address - Address of plant contract.
    function setTokenAddress(address _address) external onlyOwner {
        tokenAddress = _address;
    }

    function setNormalNFTAddress(address _address) external onlyOwner {
        normalNFTAddress = _address;
    }

    function setFusedNFTAddress(address _address) external onlyOwner {
        fusedNFTAddress = _address;
    }

    function setFridayNumberNFT(uint256 _fridayNumberNFT) external onlyOwner {
        fridayNumberNFT = _fridayNumberNFT;
    }

    function setEventNumberNFT(uint256 _eventNumberNFT) external onlyOwner {
        eventNumberNFT = _eventNumberNFT;
    }

    function setFridayNormalNFT(uint256 _id, uint256[] memory _token) external onlyOwner {
        fridayNormalNFT[_id] = _token;
    }

    function setFridayNormalNFTAmount(uint256 _fridayNormalNFTAmount) external onlyOwner {
        fridayNormalNFTAmount = _fridayNormalNFTAmount;
    }

    function setFridayFusedNFTAmount(uint256 _fridayFusedNFTAmount) external onlyOwner {
        fridayFusedNFTAmount = _fridayFusedNFTAmount;
    }

    function setEventNormalNFTAmount(uint256 _eventNormalNFTAmount) external onlyOwner {
        eventNormalNFTAmount = _eventNormalNFTAmount;
    }

    function setEventFusedNFTAmount(uint256 _eventFusedNFTAmount) external onlyOwner {
        eventFusedNFTAmount = _eventFusedNFTAmount;
    }

    function setFridayPeriod(uint256 _fridayPeriod) external onlyOwner {
        fridayPeriod = _fridayPeriod;
    }

    function setEventPeriod(uint256 _eventPeriod) external onlyOwner {
        eventPeriod = _eventPeriod;
    }

    function getBalance() public view returns(uint256) {
        return IERC20(tokenAddress).balanceOf(address(this));
    }

    function withdrawBalance(address _token, uint256 _amount, address _owner) external onlyOwner {
        require(_token != tokenAddress);
        IERC20(_token).transfer(_owner, _amount);
    }

}