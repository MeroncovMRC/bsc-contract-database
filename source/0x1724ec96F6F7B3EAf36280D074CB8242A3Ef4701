
// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface VRFCoordinatorV2Interface {
  /**
   * @notice Get configuration relevant for making requests
   * @return minimumRequestConfirmations global min for request confirmations
   * @return maxGasLimit global max for request gas limit
   * @return s_provingKeyHashes list of registered key hashes
   */
  function getRequestConfig()
    external
    view
    returns (
      uint16,
      uint32,
      bytes32[] memory
    );

  /**
   * @notice Request a set of random words.
   * @param keyHash - Corresponds to a particular oracle job which uses
   * that key for generating the VRF proof. Different keyHash's have different gas price
   * ceilings, so you can select a specific one to bound your maximum per request cost.
   * @param subId  - The ID of the VRF subscription. Must be funded
   * with the minimum subscription balance required for the selected keyHash.
   * @param minimumRequestConfirmations - How many blocks you'd like the
   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
   * for why you may want to request more. The acceptable range is
   * [minimumRequestBlockConfirmations, 200].
   * @param callbackGasLimit - How much gas you'd like to receive in your
   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
   * may be slightly less than this amount because of gas used calling the function
   * (argument decoding etc.), so you may need to request slightly more than you expect
   * to have inside fulfillRandomWords. The acceptable range is
   * [0, maxGasLimit]
   * @param numWords - The number of uint256 random values you'd like to receive
   * in your fulfillRandomWords callback. Note these numbers are expanded in a
   * secure way by the VRFCoordinator from a single random value supplied by the oracle.
   * @return requestId - A unique identifier of the request. Can be used to match
   * a request to a response in fulfillRandomWords.
   */
  function requestRandomWords(
    bytes32 keyHash,
    uint64 subId,
    uint16 minimumRequestConfirmations,
    uint32 callbackGasLimit,
    uint32 numWords
  ) external returns (uint256 requestId);

  /**
   * @notice Create a VRF subscription.
   * @return subId - A unique subscription id.
   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
   * @dev Note to fund the subscription, use transferAndCall. For example
   * @dev  LINKTOKEN.transferAndCall(
   * @dev    address(COORDINATOR),
   * @dev    amount,
   * @dev    abi.encode(subId));
   */
  function createSubscription() external returns (uint64 subId);

  /**
   * @notice Get a VRF subscription.
   * @param subId - ID of the subscription
   * @return balance - LINK balance of the subscription in juels.
   * @return reqCount - number of requests for this subscription, determines fee tier.
   * @return owner - owner of the subscription.
   * @return consumers - list of consumer address which are able to use this subscription.
   */
  function getSubscription(uint64 subId)
    external
    view
    returns (
      uint96 balance,
      uint64 reqCount,
      address owner,
      address[] memory consumers
    );

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @param newOwner - proposed new owner of the subscription
   */
  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @dev will revert if original owner of subId has
   * not requested that msg.sender become the new owner.
   */
  function acceptSubscriptionOwnerTransfer(uint64 subId) external;

  /**
   * @notice Add a consumer to a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - New consumer which can use the subscription
   */
  function addConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Remove a consumer from a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - Consumer to remove from the subscription
   */
  function removeConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Cancel a subscription
   * @param subId - ID of the subscription
   * @param to - Where to send the remaining LINK to
   */
  function cancelSubscription(uint64 subId, address to) external;

  /*
   * @notice Check to see if there exists a request commitment consumers
   * for all consumers and keyhashes for a given sub.
   * @param subId - ID of the subscription
   * @return true if there exists at least one unfulfilled request for the subscription, false
   * otherwise.
   */
  function pendingRequestExists(uint64 subId) external view returns (bool);
}


// File: @openzeppelin/contracts/proxy/utils/Initializable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;

import "../../utils/Address.sol";

/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized < type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: contracts/interfaces/ILottery.sol
// SPDX-License-Identifier: MIT
pragma solidity =0.8.14;

interface ILottery {

    // Events

    event RaffleCreated(
        uint256 _raffleNumber,
        string _raffleName,
        uint16 _maxTickets,
        uint256 _ticketPrice,
        uint32 _startTime,
        uint32 _endTime,
        address _buyToken,
        address _rewardToken
    );

    event ProfitWalletUpdated(address _profitWallet1, address _profitWallet2);

    event PercentagesUpdated(
        uint16 _profitSplit1Bp, 
        uint16 _profitSplit2Bp, 
        uint16 _burnPercent, 
        uint16 _profitPercent, 
        uint16 _taxBp
    );

    event BuyTicket(
        uint256 _raffleNumber,
        address _buyer,
        uint16 _ticketStart,
        uint16 _noOfTickets,
        uint256 _burnAmount
    );

    event RewardClaimed(
        uint256 _raffleId,
        address _to,
        address _rewardToken,
        uint256 _amount
    );

    event BurnCollected(address _token, uint256 _amount, address _to);

    event WinnerDeclared(
        uint256 _raffleId,
        uint256 _winningTicket,
        address _winner,
        uint256 _rewardAmount
    );

    event AdminChanged(address _oldAdmin, address _newAdmin);

    event RewardTokenUpdate(uint256 _raffleNumber, address _rewardToken);

    event AddedBuyToken(address _buyToken);

    event RemovedBuyToken(address _buyToken);

    event EndTimeUpdated(uint256 _raffleNumber, uint32 _endTime);

    event WinnerDeclarationInitiated(uint256 _raffleNumber, uint256 _requestId);

    // Structs

    struct RaffleInfo {
        uint256 number;
        string raffleName;

        uint16 maxTickets;
        uint256 ticketPrice;
        uint16 ticketCounter;
        mapping(uint256 => address) ticketOwner;

        uint32 startTime;
        uint32 endTime;
        address buyToken;
        uint256 requestId;
        RewardInfo rewardInfo;
    }

    struct RewardInfo {
        address rewardToken;
        bool isTaxed;
        uint16 rewardPercent;
        uint256 rewardAmount;
        uint256 actualRewardAmount;
        uint16 burnPercent;
        uint256 burnAmount;

        uint256 winningTicket;
        address winner;
        bool isClaimed;
    }

    struct UserTickets {
        uint256[] ticketsNumber;
    }
}


// File: contracts/interfaces/IUniswapV2Router02.sol
// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.7;

interface IUniswapV2Router02 {
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/Lottery.sol
//SPDX-License-Identifier:UNLICENSED

pragma solidity = 0.8.14; // Audit change to be made.

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./VRFv2Consumer.sol";
import "./interfaces/IUniswapV2Router02.sol";
import "./interfaces/ILottery.sol";

contract Lottery is ReentrancyGuard, VRFv2Consumer, ILottery {
    using SafeERC20 for IERC20;

    uint16 public profitPercent; // in BP
    uint16 public burnPercent;
    uint16 public profitSplit1BP;
    uint16 public basisPoints;
    uint16 public taxBP;
    uint256 public totalRaffles;

    address payable public profitWallet1;
    address payable public profitWallet2;
    address public admin;
    address public operator;
    IUniswapV2Router02 public router;

    mapping(uint256 => RaffleInfo) public raffle;

    // stores ticket numbers for every user for a given raffle. RaffleNumber => UserAddress => UserTickets
    mapping(uint256 => mapping(address => UserTickets)) userTicketNumbersInRaffle;

    mapping(uint256 => uint256) public requestIdPerRaffle;
    mapping(address => uint256) public tokenBurnAmount;

    // Stores the allowed buyTokens to buyRaffles
    mapping(address => bool) public allowedBuyTokens;

    modifier onlyAdmin() {
        require(msg.sender == admin, "You are not the admin.");
        _;
    }

    modifier onlyAdminOrOperator {
        require(msg.sender == admin || msg.sender == operator, "You are neither an admin not an operator.");
        _;
    }

    struct init {
        uint16 _basisPoints;
        uint16 _profitPercent;
        uint16 _burnPercent;
        uint16 _profitSplit1BP;
        uint16 _taxBP;
        uint64 _subscriptionId;
        address _admin;
        address _operator;
        address _router;
        address payable _profitWallet1;
        address payable _profitWallet2;
        address _vrfCoordinator;
        bytes32 _keyhash;
        address[] _buyTokens;
    }

    /**
     * @dev Sets the values for
        uint16 _basisPoints  Kept as 10000
        uint16 _profitPercent, * profit percent to be deducted from the fee paid from ticket buying.
        uint16 _burnPercent, * burn percent to be deducted from the fee paid from ticket buying.
        uint16 _profitSplit1BP. * profit percent 
        uint64 subscriptionId, *id to be received from the Chainlink VRF
        address _operator, *ROLE to be declared for the operator only functions.
        address _admin,    *ROLE to be declared for the admin only functions.
        address _router, * UNISWAP or any other DEX Router contract, for the swap functions.
        address payable _profitWallet1, 
        address payable _profitWallet2,
        address _weth, * WETH Address for the said DEX
        address _vrfCoordinator
        bytes32 _keyhash
     */
    constructor(init memory params) {
        require(params._admin != address(0), "Invalid _admin address");
        require(params._operator != address(0), "Invalid _operator address");
        require(params._router != address(0), "Invalid _router address");
        require(params._profitWallet1 != address(0), "Invalid _profitWallet1 address");
        require(params._profitWallet2 != address(0), "Invalid _profitWallet2 address");
        require(params._vrfCoordinator != address(0), "Invalid _vrfCoordinator address");
        require(
            params._profitPercent + params._burnPercent < params._basisPoints,
            "Sum of _burnPercent and _profitPercent cannot be more than 100%"
        );
        require(params._profitSplit1BP < params._basisPoints, "_profitSplit1BP cannot be more than 100%");
        require(params._taxBP < params._basisPoints, "_taxBP cannot be more than 100%");

        admin = params._admin;
        operator = params._operator;
        router = IUniswapV2Router02(params._router);
        profitWallet1 = params._profitWallet1;
        profitWallet2 = params._profitWallet2;
        basisPoints = params._basisPoints;
        profitPercent = params._profitPercent;
        burnPercent = params._burnPercent;
        profitSplit1BP = params._profitSplit1BP;
        taxBP = params._taxBP;
        initializeV2Consumer(
            params._subscriptionId,
            params._vrfCoordinator,
            params._keyhash
        );
        __updateBuyTokens(params._buyTokens, true);
    }

    /**
     * @dev Private Helper method to add or remove the buy tokens from the allowed list
     * @param _buyTokens - Array of token addresses to be allowed
     */
    function __updateBuyTokens(address[] memory _buyTokens, bool _isAllowed) private {
        for (uint256 i=0; i<_buyTokens.length; i++) {
            allowedBuyTokens[_buyTokens[i]] = _isAllowed;
            if (_isAllowed) {
                emit AddedBuyToken(_buyTokens[i]);
            } else {
                emit RemovedBuyToken(_buyTokens[i]);
            }
        }
    }

    /**
     * @dev Helper method to allow or disallow the buyTokens for Admin
     * @param _buyTokens - Array of token addresses to be updated
     * @param _isAllowed - Flag to annotate whether to allow or not
     */
    function updateBuyTokens(address[] memory _buyTokens, bool _isAllowed) public onlyAdminOrOperator {
        __updateBuyTokens(_buyTokens, _isAllowed);
    }

    /**
     * @dev Sets the values for raffleName, maxTickets, ticketPrice, startTime, endTime, rewardToken, and isTaxed(Shows if the token is a taxable token).
     * Values are set at the time of creating a new Raffle.
     * Start time should be always less than the endTime.
     * The function can only be called by the Operator role.
     */
    function createRaffle(
        string memory _raffleName,
        uint16 _maxTickets,
        uint256 _ticketPrice,
        uint32 _startTime,
        uint32 _endTime,
        address _buyToken,
        address _rewardToken,
        bool _isTaxed
    ) public onlyAdmin {
        require(
            _startTime >= block.timestamp && _startTime < _endTime,
            "Time values invalid!"
        );
        require(_buyToken != address(0), "_buyToken should not be zero address");
        require(allowedBuyTokens[_buyToken], "_buyToken not allowed");

        totalRaffles++;
        RaffleInfo storage raffleInfo = raffle[totalRaffles];

        raffleInfo.raffleName = _raffleName;
        raffleInfo.maxTickets = _maxTickets;
        raffleInfo.number = totalRaffles;
        raffleInfo.ticketPrice = _ticketPrice;
        raffleInfo.startTime = _startTime;
        raffleInfo.endTime = _endTime;
        raffleInfo.buyToken = _buyToken;
        raffleInfo.rewardInfo.rewardToken = _rewardToken;
        raffleInfo.rewardInfo.burnPercent = burnPercent;
        raffleInfo.rewardInfo.rewardPercent = basisPoints - profitPercent - burnPercent;
        raffleInfo.rewardInfo.isTaxed = _isTaxed;
        emit RaffleCreated(
            totalRaffles,
            _raffleName,
            _maxTickets,
            _ticketPrice,
            _startTime,
            _endTime,
            _buyToken,
            _rewardToken
        );
    }

    /**
     * @dev buyTicket function is to becalled by the User to buy raffle tickets.
     * Raffle number is to be provided to buy ticket from the specific raffle.
     * raffle should not be over at the time of buying ticket.
     *
     * The ticket price should be paid in the multiples of number of tickets.
     */

    function buyTicket(uint256 _raffleNumber, uint16 _noOfTickets)
        external
        payable
        nonReentrant
    {
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];
        uint256 totalPrice = _noOfTickets * raffleInfo.ticketPrice;

        require(raffleInfo.startTime <= block.timestamp, "Raffle not yet started!");
        require(raffleInfo.endTime > block.timestamp, "Buying ticket time over!");
        require(
            raffleInfo.ticketCounter + _noOfTickets <= raffleInfo.maxTickets,
            "Tickets sold out!"
        );

        // Transferring the Price to the contract
        IERC20(raffleInfo.buyToken).safeTransferFrom(msg.sender, address(this), totalPrice);

        uint16 ticketStart = raffleInfo.ticketCounter + 1;
        for (uint16 i = 1; i <= _noOfTickets; i++) {
            raffleInfo.ticketCounter += 1;
            userTicketNumbersInRaffle[_raffleNumber][msg.sender].ticketsNumber.push(
                raffleInfo.ticketCounter
            );

            raffleInfo.ticketOwner[raffleInfo.ticketCounter] = msg.sender;
        }
        uint256 burnAmount = (totalPrice * raffleInfo.rewardInfo.burnPercent) / basisPoints;
        tokenBurnAmount[raffleInfo.buyToken] += burnAmount;
        raffle[_raffleNumber].rewardInfo.burnAmount += burnAmount;
        __splitProfit(_raffleNumber, _noOfTickets);

        emit BuyTicket(
            _raffleNumber,
            msg.sender,
            ticketStart,
            _noOfTickets,
            burnAmount
        );
    }

    /**
     * @dev function takes {raffleNumber} as argument.
     *
     * This function will be called by the backend to create the requesID for the random number for the particulare raffle.
       The requestId will be saved in the mapping requestId => raffleNumber.
     */

    function initiateWinnerDeclaration(uint256 _raffleNumber) external {
        require(raffle[_raffleNumber].requestId == 0, 'Already initiated!');
        require(checkRaffleOver(_raffleNumber), 'Raffle not over yet!');

        uint256 requestId = requestRandomWords();
        raffle[_raffleNumber].requestId = requestId;
        requestIdPerRaffle[requestId] = _raffleNumber;
        emit WinnerDeclarationInitiated(_raffleNumber, requestId);
    }

    /**
     * @dev function to be called by the winner of the raffle.
     *
     * This function takes the {raffle number} as the argument.
     * This function can only be called by the winner of a particular raffle.
     * Reward can only be claimed once.
     * This function transfers the reward token to the winner.
     */

    function claimReward(
        uint256 _raffleNumber, 
        address[] calldata _buyTokenToRewardTokenSwapPath,
        uint256 _slippageBp
    ) external nonReentrant {
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];
        require(msg.sender == raffleInfo.rewardInfo.winner, "You are not the winner");
        require(!raffleInfo.rewardInfo.isClaimed, "Reward Already Claimed");

        raffleInfo.rewardInfo.isClaimed = true;

        raffleInfo.rewardInfo.actualRewardAmount = __swapBuyTokenToRewardToken(
            raffleInfo.buyToken,
            raffleInfo.rewardInfo.rewardToken,
            raffleInfo.rewardInfo.rewardAmount,
            _buyTokenToRewardTokenSwapPath,
            _slippageBp,
            raffleInfo.rewardInfo.isTaxed
        );

        IERC20(raffleInfo.rewardInfo.rewardToken).safeTransfer(
            msg.sender, 
            raffleInfo.rewardInfo.actualRewardAmount
        );

        emit RewardClaimed(
            _raffleNumber,
            msg.sender,
            raffleInfo.rewardInfo.rewardToken,
            raffleInfo.rewardInfo.actualRewardAmount
        );
    }

    /**
     * @dev function to be called by the Admin.
     *
     * Burn amount is stored in the smart contract at every sale of the ticket.
     *
     * Function takes the {address _to} as an argument.
     * It transfers the Ether stored as burnAmount in the smart contract and transfers to the address given.
     * Total burn gets depleted but for information purpose the value of burn amount per raffle is stored on the smart contract.
     */
    function collectBurnReward(address _token, address _to)
        external
        onlyAdmin
        nonReentrant
    {
        uint256 amount = tokenBurnAmount[_token];
        tokenBurnAmount[_token] = 0;
        IERC20(_token).safeTransfer(_to, amount);
        emit BurnCollected(_token, amount, _to);
    }

    /**
     * @dev Internal Helper method to swap from available Buy Token to Reward Token
     * @param _buyToken - The Token used to buy Raffles
     * @param _rewardToken - The tokens that the rewards needs to be claimed in
     * @param _availableRewardInBuyToken - The amount of buyToken is availabe to be rewarded
     * @param _swapPath - Path of the swap to be executed
     * @param _slippageBp - Slippage tolerance basisPoint for the swap
     * @param _isTaxed - Boolean to represent whether the token includes any Fee on transfers
     */
    function __swapBuyTokenToRewardToken(
        address _buyToken,
        address _rewardToken,
        uint256 _availableRewardInBuyToken,
        address[] calldata _swapPath,
        uint256 _slippageBp,
        bool _isTaxed
    ) internal returns(uint256 rewardAmount_) {
        require(_buyToken == _swapPath[0] && _rewardToken == _swapPath[_swapPath.length - 1], "Invalid swap path");

        if (_buyToken == _rewardToken) {
            return _availableRewardInBuyToken;
        }

        // Approving the rewardToken to the router
        IERC20(_buyToken).safeApprove(address(router), _availableRewardInBuyToken);

        uint256[] memory amountsOut = router.getAmountsOut(_availableRewardInBuyToken, _swapPath);
        uint256 maxRewardAmount = amountsOut[1];
        if (_isTaxed) {
            uint256 minRewardAmount = (maxRewardAmount * (basisPoints - taxBP - _slippageBp)) / basisPoints;
            uint256 rewardTokenBalanceBefore = IERC20(_rewardToken).balanceOf(address(this));
            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                _availableRewardInBuyToken,
                minRewardAmount,
                _swapPath,
                address(this),
                block.timestamp + 60
            );
            rewardAmount_ = IERC20(_rewardToken).balanceOf(address(this)) - rewardTokenBalanceBefore;
        } else {
            uint256 minRewardAmount = (maxRewardAmount * (basisPoints - _slippageBp)) / basisPoints;
            uint256[] memory swapAmounts = router.swapExactTokensForTokens(
                _availableRewardInBuyToken,
                minRewardAmount,
                _swapPath,
                address(this),
                block.timestamp + 60
            );
            rewardAmount_ = swapAmounts[1];
        }
    }

    /**
     * @dev function called by the buyTicket function.
     *
     * It takes {raffleNumber, _noOfTickets} as arguments.
     * Function is used to transfer the profit amount set by the admin in every ticket sale, to the profit 
       wallets.
     * 
     */

    function __splitProfit(uint256 _raffleNumber, uint16 _noOfTickets) internal {
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];

        uint256 totalAmount = _noOfTickets * raffleInfo.ticketPrice;
        uint256 profitAmount = (profitPercent * totalAmount) / basisPoints;

        uint256 splitWallet1Amount = (profitAmount * profitSplit1BP) / basisPoints;
        IERC20(raffleInfo.buyToken).safeTransfer(profitWallet1, splitWallet1Amount);

        uint256 splitWallet2Amount = profitAmount - splitWallet1Amount;
        IERC20(raffleInfo.buyToken).safeTransfer(profitWallet2, splitWallet2Amount);
    }

    /**
     * @dev function to be called by the chainlink vrf coordinator.
     *
     * Function will be called by the external contract to provide the random words that will be further used in the declareWinner function.
     */

    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords /* internal function (chainlink keepers automatically call this function */
    ) internal override {
        uint256 raffleNumber = requestIdPerRaffle[requestId];
        uint256 randomNumber = randomWords[0];
        RaffleInfo storage raffleInfo = raffle[raffleNumber];
        uint256 totalTicketsSold = raffleInfo.ticketCounter;
        uint256 winnerTicketNumber = (randomNumber % totalTicketsSold) + 1;

        raffleInfo.rewardInfo.winningTicket = winnerTicketNumber;
        raffleInfo.rewardInfo.winner = raffleInfo.ticketOwner[winnerTicketNumber];

        raffleInfo.rewardInfo.rewardAmount = ((raffleInfo.ticketPrice * raffleInfo.ticketCounter) *
            raffleInfo.rewardInfo.rewardPercent) / basisPoints;

        emit WinnerDeclared(
            raffleNumber,
            winnerTicketNumber,
            raffleInfo.ticketOwner[winnerTicketNumber],
            raffleInfo.rewardInfo.rewardAmount
        );
    }

    /**
     * @dev Helper function for admin to update the percentage related configurations
     * @param _burnBp - Burn Percentage
     * @param _profitBp - Profit Percentage
     * @param _profitSplit1BP - Profit Split percentage for profit wallet 1
     * @param _taxBp - Tax percentage
     */
    function updatePercentages(
        uint16 _burnBp, 
        uint16 _profitBp, 
        uint16 _profitSplit1BP,
        uint16 _taxBp
    )
        external
        onlyAdmin
    {
        burnPercent = _burnBp;
        profitPercent = _profitBp;
        profitSplit1BP = _profitSplit1BP;
        taxBP = _taxBp;
        emit PercentagesUpdated(profitSplit1BP, basisPoints - profitSplit1BP, burnPercent, profitPercent, _taxBp);
    }

    /**
     * @dev Helper function for admin to update the profit wallet addresses
     * @param _profitWallet1 - Profit wallet address 1
     * @param _profitWallet2 - Profit wallet address 2
     */
    function updateProfitAddress(address _profitWallet1, address _profitWallet2) external onlyAdmin {
        profitWallet1 = payable(_profitWallet1);
        profitWallet2 = payable(_profitWallet2);
        emit ProfitWalletUpdated(_profitWallet1, _profitWallet2);
    }

    /**
     * @dev Helper function to admin to update the controller(Admin, Operator) addresses of the contract
     * @param _newAdmin - New admin's address
     */
    function changeAdmin(address _newAdmin) external onlyAdmin {
        address oldAdmin = admin;
        admin = _newAdmin;
        emit AdminChanged(oldAdmin, _newAdmin);
    }

    /**
     * @dev Function to be called by the Admin.
     *
     * Function takes {uint raffleNumber, address tokenAddress} as arguments.
     *
     * Updates the address for the reward token in the given raffle.
     * Token address can be updated in the raffle before its startTime, once the raffle is started or ended the reward token 
       cannot be changed. 
     */

    function updateRewardToken(uint256 _raffleNumber, address _rewardToken)
        external
        onlyAdminOrOperator
    {
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];

        require(block.timestamp < raffleInfo.startTime, "Raffle already started.");
        raffleInfo.rewardInfo.rewardToken = _rewardToken;
        emit RewardTokenUpdate(_raffleNumber, _rewardToken);
    }

    /**
     * @dev Helper function to update the endTime of the raffle
     * @param _raffleNumber - No of the Raffle
     * @param _endTime - End Time of the Raffle
     */
    function updateRaffleEndtime(uint256 _raffleNumber, uint32 _endTime)
        external
        onlyAdminOrOperator
    {
        require(_endTime > block.timestamp, "Provide a future endtime");
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];
        raffleInfo.endTime = _endTime;
        emit EndTimeUpdated(_raffleNumber, _endTime);
    }

    /**
     * @dev Function to be called by the User.
     *
     * Function takes {raffleNumber, address ownerOfTickets} as arguments.
     *
     * Function returns the array for the ticket numbers owned by the User.
     */

    function checkYourTickets(uint256 _raffleNo, address _owner)
        external
        view
        returns (uint256[] memory)
    {
        return userTicketNumbersInRaffle[_raffleNo][_owner].ticketsNumber;
    }

    /**
     * @dev Function to be called by the anyone.
     *
     * Function takes {raffleNumber} as argument.
     * Function returns the boolean for if the raffle is over or not i.e. the endTIme is met or not.
     *
     */

    function checkRaffleOver(uint256 _raffleNumber) public view returns (bool) {
        RaffleInfo storage raffleInfo = raffle[_raffleNumber];
        return
            (block.timestamp > raffleInfo.endTime) ||
            (raffleInfo.ticketCounter == raffleInfo.maxTickets);
    }

    /**
     * @dev Function to be called by the anyone.
     *
     * Function takes {raffleNumber, ticketNumber} as arguments.
     * Function returns the address for the owner of a specific ticket number.
     *
     */

    function checkTicketOwner(uint256 _raffleNumber, uint16 _ticketNumber)
        external
        view
        returns (address)
    {
        return raffle[_raffleNumber].ticketOwner[_ticketNumber];
    }
}


// File: contracts/VRFConsumerBaseV2.sol
// SPDX-License-Identifier: MIT
pragma solidity = 0.8.14;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBaseV2 {
  error OnlyCoordinatorCanFulfill(address have, address want);
  address private vrfCoordinator;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   */
 

  function setCoordinator(address _vrfCoordinator) internal {
         require(_vrfCoordinator!=address(0),"Invalid address");

         vrfCoordinator = _vrfCoordinator;
  }

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomWords the VRF output expanded to the requested number of words
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {
    if (msg.sender != vrfCoordinator) {
      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);
    }
    fulfillRandomWords(requestId, randomWords);
  }
}


// File: contracts/VRFv2Consumer.sol
// SPDX-License-Identifier: MIT

pragma solidity =0.8.14;

import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "./VRFConsumerBaseV2.sol";
import "@openzeppelin/contracts/proxy/utils/Initializable.sol";

contract VRFv2Consumer is VRFConsumerBaseV2, Initializable {
    VRFCoordinatorV2Interface COORDINATOR;

    // Your subscription ID.
    uint64 s_subscriptionId;

    // Goerli coordinator. For other networks,
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    // address vrfCoordinator = 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // For a list of available gas lanes on each network,
    // see https://docs.chain.link/docs/vrf-contracts/#configurations
    // bytes32 keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;

    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,
    // so 100,000 is a safe default for this example contract. Test and adjust
    // this limit based on the network that you select, the size of the request,
    // and the processing of the callback request in the fulfillRandomWords()
    // function.
    uint32 internal constant callbackGasLimit = 100000;

    address internal vrfCoordinator;

    bytes32 internal keyHash;

    // The default is 3, but you can set this higher.
    uint16 internal constant requestConfirmations = 3;

    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.
    uint32 internal constant numWords = 1;

    uint256[] internal s_randomWords;
    uint256 public s_requestId;
    address internal s_owner;
    bool internal isInitialized;

    function initializeV2Consumer(
        uint64 _subscriptionId,
        address _vrfCoordinator,
        bytes32 _keyHash
    ) internal  {
        require(!isInitialized, "Already Initialized");
        vrfCoordinator = _vrfCoordinator;
        keyHash = _keyHash;
        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);
        setCoordinator(vrfCoordinator);
        s_owner = msg.sender;
        s_subscriptionId = _subscriptionId;
        isInitialized = true;
    }

    // Assumes the subscription is funded sufficiently.
    function requestRandomWords() internal returns (uint256) {
        // Will revert if subscription is not set and funded.
        s_requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        return s_requestId;
    }

    function fulfillRandomWords(
        uint256, /* requestId */
        uint256[] memory randomWords
    ) internal virtual override {
        s_randomWords = randomWords;
    }
}

