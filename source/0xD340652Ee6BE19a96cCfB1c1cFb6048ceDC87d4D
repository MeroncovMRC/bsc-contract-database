// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.8.0;


// 
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// 
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// 
// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)
/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// 
// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)
// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.
/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// 
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// 
interface IPancakeswapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

// 
interface IPancakeswapFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

// 
interface IPancakeswapPair {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to) external returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// 
interface IPinkAntiBot {
    function setTokenOwner(address owner) external;

    function onPreTransferCheck(
        address from,
        address to,
        uint256 amount
    ) external;
}

// 
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)
/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// 
contract StakeManager is ReentrancyGuard {
    using SafeMath for uint256;

    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);

    // The Moox token
    Moox public moox;

    // The LP token for MOOX/WBNB
    IPancakeswapPair public lpToken;

    // Total deposited BUSD for awarding
    uint256 public totalDepositedBusd;

    // Deposited BUSD amount on the last reward update
    uint256 public lastRewardDepositedBusd;

    // Accumulated BUSD per share
    uint256 public accBusdPerShare;

    // Info of each user that stakes tokens
    mapping(address => UserInfo) public userInfo;

    struct UserInfo {
        uint256 amount; // How many MOOX/WBNB LP tokens the user has provided
        uint256 rewardDebt; // Reward debt
    }

    event Deposit(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    constructor(Moox _moox, IPancakeswapPair _lpToken) {
        moox = _moox;
        lpToken = _lpToken;
    }

    function busdDeposit(uint256 _amount) external nonReentrant {
        require(msg.sender == address(moox), 'StakeManager: Not allowed');

        totalDepositedBusd = totalDepositedBusd.add(_amount);
    }

    /**
     * @notice Deposit staked tokens and collect reward tokens (if any)
     * @param _amount: amount to deposit
     */
    function deposit(uint256 _amount) external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];

        _updatePool();

        if (user.amount > 0) {
            uint256 pending = user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);
            if (pending > 0) {
                safeBusdTransfer(address(msg.sender), pending);
            }
        }

        if (_amount > 0) {
            user.amount = user.amount.add(_amount);
            lpToken.transferFrom(address(msg.sender), address(this), _amount);
        }

        user.rewardDebt = user.amount.mul(accBusdPerShare).div(1e12);

        emit Deposit(msg.sender, _amount);
    }

    /**
     * @notice Withdraw staked tokens and collect reward
     * @param _amount: amount to withdraw
     */
    function withdraw(uint256 _amount) external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        require(user.amount >= _amount, 'StakeManager: Withdraw amount gt user.amount');

        _updatePool();

        uint256 pending = user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);

        if (_amount > 0) {
            user.amount = user.amount - _amount;
            lpToken.transfer(address(msg.sender), _amount);
        }

        if (pending > 0) {
            safeBusdTransfer(address(msg.sender), pending);
        }

        user.rewardDebt = user.amount.mul(accBusdPerShare).div(1e12);

        emit Withdraw(msg.sender, _amount);
    }

    /**
     * @dev Update reward variables of the pool to be up-to-date.
     */
    function _updatePool() internal {
        uint256 lpTokenSupply = lpToken.balanceOf(address(this));

        if (totalDepositedBusd <= lastRewardDepositedBusd) {
            return;
        }

        if (lpTokenSupply == 0) {
            lastRewardDepositedBusd = totalDepositedBusd;
            return;
        }

        uint256 busdReward = totalDepositedBusd.sub(lastRewardDepositedBusd);
        accBusdPerShare = accBusdPerShare.add(busdReward.mul(1e12).div(lpTokenSupply));
        lastRewardDepositedBusd = totalDepositedBusd;
    }

    /**
     * @dev Safe BUSD transfer function, just in case if rounding error causes pool to not have enough BUSD.
     * @param _to: address
     * @param _amount: amount
     */
    function safeBusdTransfer(address _to, uint256 _amount) private {
        uint256 busdBalance = BUSD.balanceOf(address(this));

        if (_amount > busdBalance) {
            BUSD.transfer(_to, busdBalance);
        } else {
            BUSD.transfer(_to, _amount);
        }
    }

    /**
     * @dev View function to see pending reward on frontend.
     * @param _user: user address
     *
     * @return Pending reward for a given user
     */
    function pendingReward(address _user) external view returns (uint256) {
        UserInfo storage user = userInfo[_user];
        uint256 lpTokenSupply = lpToken.balanceOf(address(this));

        if (totalDepositedBusd > lastRewardDepositedBusd && lpTokenSupply != 0) {
            uint256 busdReward = totalDepositedBusd.sub(lastRewardDepositedBusd);
            uint256 adjustedBusdPerShare = accBusdPerShare.add(busdReward.mul(1e12).div(lpTokenSupply));

            return user.amount.mul(adjustedBusdPerShare).div(1e12).sub(user.rewardDebt);
        } else {
            return user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);
        }
    }

    /**
     * @notice Withdraw staked tokens without caring about rewards rewards
     * @dev Needs to be for emergency.
     */
    function emergencyWithdraw() external nonReentrant {
        UserInfo storage user = userInfo[msg.sender];
        uint256 amountToTransfer = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;

        if (amountToTransfer > 0) {
            lpToken.transfer(address(msg.sender), amountToTransfer);
        }

        emit EmergencyWithdraw(msg.sender, user.amount);
    }
}

// 
contract Moox is IBEP20, Ownable {
    using SafeMath for uint256;

    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    uint8 public constant DECIMALS = 18;
    uint8 public constant RATE_DECIMALS = 7;
    uint256 public constant MAX_UINT256 = ~uint256(0);
    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 100 * 10**3 * 10**DECIMALS;
    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);
    uint256 public constant MAX_SUPPLY = 70 * 10**9 * 10**DECIMALS;
    uint256 public constant REBASE_PERIOD = 5 minutes;

    uint256 public constant FEE_DOMINATOR = 1000;

    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    IPancakeswapRouter public constant router = IPancakeswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IPinkAntiBot public constant pinkAntiBot = IPinkAntiBot(0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002);

    string public _name = 'Moox';
    string public _symbol = 'MOOX';
    uint256 public _totalSupply;
    mapping(address => uint256) private _gonBalances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) _isFeeExempt;

    uint256 private _gonsPerFragment;

    address public pancakeswapPair;
    address public liquidityProxy;
    address public treasuryReceiver;

    IPancakeswapPair public pairContract;
    StakeManager public stakeManager;

    bool public autoRebaseEnabled;
    uint256 public initRebaseStartTime;
    uint256 public lastRebasedTime;

    bool public antibotEnabled = false;

    uint256 private _minAmountToSwap;
    uint256 private _collectedBuyFee;
    uint256 private _collectedSellFee;

    event LogRebase(uint256 indexed epoch, uint256 totalSupply);
    event SetTreasuryReceiver(address treasuryReceiver);
    event StartAutoRebase();
    event IncludeFeeExempt(address includedAddress);
    event ExcludeFeeExempt(address excludedAddress);
    event SetAntibotEnabled(bool flag);
    event SetMinAmountToSwap(uint256 minAmountToSwap);

    constructor() {
        pancakeswapPair = IPancakeswapFactory(router.factory()).createPair(router.WETH(), address(this));
        pairContract = IPancakeswapPair(pancakeswapPair);
        liquidityProxy = address(new LiquidityProxy(this, pairContract));
        stakeManager = new StakeManager(this, pairContract);

        pinkAntiBot.setTokenOwner(msg.sender);

        initRebaseStartTime = block.timestamp;

        _isFeeExempt[msg.sender] = true;
        _isFeeExempt[address(this)] = true;
        _isFeeExempt[liquidityProxy] = true;

        _allowances[address(this)][address(router)] = type(uint256).max;
        _allowances[liquidityProxy][address(router)] = type(uint256).max;

        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;
        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
        _gonBalances[msg.sender] = TOTAL_GONS;

        emit Transfer(address(0x0), msg.sender, _totalSupply);
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 value) external override returns (bool) {
        _transfer(_msgSender(), to, value);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        _transfer(sender, recipient, amount);

        if (_allowances[sender][msg.sender] != type(uint256).max) {
            _approve(
                sender,
                _msgSender(),
                _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')
            );
        }

        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), 'BEP20: transfer from the zero address');
        require(recipient != address(0), 'BEP20: transfer to the zero address');

        uint256 gonAmount = amount.mul(_gonsPerFragment);

        require(_gonBalances[sender] >= gonAmount, 'BEP20: transfer amount exceeds balance');

        bool shouldTakeFee = false;

        if (
            (sender == pancakeswapPair || recipient == pancakeswapPair) &&
            !(sender == pancakeswapPair && recipient == address(router)) && // remove liquidity
            !_isFeeExempt[sender] &&
            recipient != liquidityProxy &&
            amount >= FEE_DOMINATOR
        ) {
            if (antibotEnabled) {
                pinkAntiBot.onPreTransferCheck(sender, recipient, amount);
            }

            shouldTakeFee = true;

            // Rebase and swapForTreasuryAndStakeAward if tx is sell
            if (msg.sender != pancakeswapPair) {
                if (
                    autoRebaseEnabled &&
                    _totalSupply < MAX_SUPPLY &&
                    block.timestamp >= (lastRebasedTime + REBASE_PERIOD)
                ) {
                    rebase();
                }

                swapForTreasuryAndStakeAward();

                gonAmount = amount.mul(_gonsPerFragment);
            }
        }

        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);

        uint256 gonAmountReceived = shouldTakeFee ? takeFee(sender, recipient, gonAmount) : gonAmount;

        _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);

        emit Transfer(sender, recipient, gonAmountReceived.div(_gonsPerFragment));
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), 'BEP20: approve from the zero address');
        require(spender != address(0), 'BEP20: approve to the zero address');

        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Calculates and updates _totalSupply and _gonsPerFragment
     *
     * Emits an {LogRebase} event.
     */
    function rebase() internal {
        uint256 rebaseRate;
        uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;
        uint256 deltaTime = block.timestamp - lastRebasedTime;
        uint256 times = deltaTime.div(REBASE_PERIOD);
        uint256 epoch = times.mul(5);

        if (deltaTimeFromInit < (365 days)) {
            rebaseRate = 943;
        } else if (deltaTimeFromInit >= (10 * 365 days)) {
            rebaseRate = 3;
        } else if (deltaTimeFromInit >= (3 * 365 days)) {
            rebaseRate = 10;
        } else if (deltaTimeFromInit >= (365 days)) {
            rebaseRate = 66;
        }

        uint256 tempTotalSupply = _totalSupply;

        for (uint256 i = 0; i < times; i++) {
            tempTotalSupply = tempTotalSupply.mul((10**RATE_DECIMALS).add(rebaseRate)).div(10**RATE_DECIMALS);
        }

        _totalSupply = tempTotalSupply;

        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
        lastRebasedTime = lastRebasedTime.add(times.mul(REBASE_PERIOD));

        pairContract.sync();

        emit LogRebase(epoch, _totalSupply);
    }

    /**
     * @dev Takes fee and updates balances
     *
     * Emits an {Transfer} event for stakeAndTreasuryAmount.
     * Emits an {Transfer} event for burnAmount if the tx is a sell tx.
     */
    function takeFee(
        address sender,
        address recipient,
        uint256 gonAmount
    ) internal returns (uint256) {
        uint256 burnAmount = 0;
        uint256 stakeAndTreasuryAmount = 0;
        (uint256 buyStakeFee, uint256 sellStakeFee, uint256 treasuryFee) = getStakeAndTreasuryFee();

        if (recipient == pancakeswapPair) {
            burnAmount = gonAmount.div(FEE_DOMINATOR).mul(getBurnFee());

            _gonBalances[BURN_ADDRESS] = _gonBalances[BURN_ADDRESS].add(burnAmount);

            emit Transfer(sender, BURN_ADDRESS, burnAmount.div(_gonsPerFragment));

            stakeAndTreasuryAmount = gonAmount.div(FEE_DOMINATOR).mul(sellStakeFee);

            _collectedSellFee = _collectedSellFee.add(stakeAndTreasuryAmount.div(_gonsPerFragment));
        } else {
            stakeAndTreasuryAmount = gonAmount.div(FEE_DOMINATOR).mul(buyStakeFee.add(treasuryFee));

            _collectedBuyFee = _collectedBuyFee.add(stakeAndTreasuryAmount.div(_gonsPerFragment));
        }

        _gonBalances[address(this)] = _gonBalances[address(this)].add(stakeAndTreasuryAmount);

        emit Transfer(sender, address(this), stakeAndTreasuryAmount.div(_gonsPerFragment));

        return gonAmount.sub(stakeAndTreasuryAmount.add(burnAmount));
    }

    /**
     * @dev Swaps token balance with busd and sends to treasury receiver and stake manager
     */
    function swapForTreasuryAndStakeAward() internal {
        uint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);

        if (amountToSwap == 0 || amountToSwap < _minAmountToSwap) {
            return;
        }

        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = router.WETH();
        path[2] = address(BUSD);

        router.swapExactTokensForTokens(amountToSwap, 0, path, address(this), block.timestamp);

        // All the BUSD balance is assumed to come from this swap
        uint256 busdBalance = BUSD.balanceOf(address(this));

        if (pairContract.balanceOf(address(stakeManager)) <= 0) {
            BUSD.transfer(treasuryReceiver, busdBalance);
        } else {
            (uint256 buyStakeFee, , uint256 treasuryFee) = getStakeAndTreasuryFee();

            if (treasuryFee > 0 && _collectedBuyFee > 0) {
                uint256 totalFeeCollected = _collectedBuyFee.add(_collectedSellFee);

                uint256 sellFeeStakeAmount = busdBalance.mul(_collectedSellFee).div(totalFeeCollected);
                uint256 totalBuyFeeAmount = busdBalance.sub(sellFeeStakeAmount);
                uint256 treasuryAmount = totalBuyFeeAmount.mul(treasuryFee).div(buyStakeFee.add(treasuryFee));
                uint256 stakeAmount = busdBalance.sub(treasuryAmount);

                BUSD.transfer(treasuryReceiver, treasuryAmount);

                BUSD.transfer(address(stakeManager), stakeAmount);
                stakeManager.busdDeposit(stakeAmount);
            } else {
                BUSD.transfer(address(stakeManager), busdBalance);
                stakeManager.busdDeposit(busdBalance);
            }
        }

        _collectedBuyFee = 0;
        _collectedSellFee = 0;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')
        );
        return true;
    }

    /**
     * @dev Manually sync pancakeswap pair
     */
    function manualSync() external {
        pairContract.sync();
    }

    /**
     * @dev Starts auto rebase after DEX listing
     *
     * Emits a {StartAutoRebase} event.
     */
    function startAutoRebase() external onlyOwner {
        require(!autoRebaseEnabled, 'Moox: Autorebase already started');

        autoRebaseEnabled = true;
        lastRebasedTime = block.timestamp;

        emit StartAutoRebase();
    }

    /**
     * @dev Sets receiver address for treasury fund
     *
     * Emits a {SetTreasuryReceiver} event.
     */
    function setTreasuryReceiver(address _treasuryReceiver) external onlyOwner {
        require(_treasuryReceiver != address(0), 'Moox: treasuryReceiver cannot be zero');

        treasuryReceiver = _treasuryReceiver;
        _isFeeExempt[_treasuryReceiver] = true;

        emit SetTreasuryReceiver(_treasuryReceiver);
    }

    /**
     * @dev Includes address for fee exempt
     *
     * Emits an {IncludeFeeExempt} event.
     */
    function includeFeeExempt(address _address) external onlyOwner {
        require(_address != pancakeswapPair, 'Moox: PancakeswapPair cannot be included');
        require(_address != address(router), 'Moox: Router cannot be included');

        _isFeeExempt[_address] = true;

        emit IncludeFeeExempt(_address);
    }

    /**
     * @dev Excludes address from fee exempt
     *
     * Emits an {ExcludeFeeExempt} event.
     */
    function exludeFeeExempt(address _address) external onlyOwner {
        require(address(this) != _address, 'Moox: This cannot be excluded');
        require(liquidityProxy != _address, 'Moox: Liquidity proxy cannot be excluded');

        _isFeeExempt[_address] = false;

        emit ExcludeFeeExempt(_address);
    }

    /**
     * @dev Sets whether pink antibot enabled
     *
     * Emits an {SetAntibotEnabled} event.
     */
    function setAntibotEnabled(bool _flag) external onlyOwner {
        antibotEnabled = _flag;

        emit SetAntibotEnabled(_flag);
    }

    /**
     * @dev Set minimum amount for swaping stake and treasury fee
     *
     * Emits an {SetMinAmountToSwap} event.
     */
    function setMinAmountToSwap(uint256 _amount) external onlyOwner {
        _minAmountToSwap = _amount;

        emit SetMinAmountToSwap(_amount);
    }

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view override returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token name.
     */
    function name() public view override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() public pure override returns (uint8) {
        return DECIMALS;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _gonBalances[account].div(_gonsPerFragment);
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev Returns treasury and stake fee
     */
    function getStakeAndTreasuryFee()
        public
        view
        returns (
            uint256 buyStakeFee,
            uint256 sellStakeFee,
            uint256 treasuryFee
        )
    {
        uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;

        if (deltaTimeFromInit < (365 days)) {
            buyStakeFee = 50;
            sellStakeFee = 100;
            treasuryFee = 50;
        } else if (deltaTimeFromInit >= (10 * 365 days)) {
            buyStakeFee = 20;
            sellStakeFee = 30;
            treasuryFee = 0;
        } else if (deltaTimeFromInit >= (3 * 365 days)) {
            buyStakeFee = 20;
            sellStakeFee = 60;
            treasuryFee = 10;
        } else if (deltaTimeFromInit >= (365 days)) {
            buyStakeFee = 30;
            sellStakeFee = 100;
            treasuryFee = 20;
        }
    }

    /**
     * @dev Returns burn fee
     *
     * Calculated by the ratio of burned amount to total supply
     */
    function getBurnFee() public view returns (uint256) {
        if (_totalSupply.mul(999).div(1000) > balanceOf(BURN_ADDRESS)) {
            return 150;
        }

        if (_totalSupply.mul(9999).div(10000) > balanceOf(BURN_ADDRESS)) {
            return 100;
        }

        if (_totalSupply.mul(99999).div(100000) > balanceOf(BURN_ADDRESS)) {
            return 50;
        }

        return 20;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function checkFeeExempt(address _addr) external view returns (bool) {
        return _isFeeExempt[_addr];
    }
}

// 
contract LiquidityProxy {
    using SafeMath for uint256;

    IPancakeswapRouter public constant router = IPancakeswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    Moox public moox;
    IPancakeswapPair public pair;

    constructor(Moox _moox, IPancakeswapPair _pair) {
        moox = _moox;
        pair = _pair;
    }

    receive() external payable {}

    function addLiquidity(
        uint256 _amountMooxDesired,
        uint256 _amountMooxMin,
        uint256 _amountBNBMin,
        address _to,
        uint256 _deadline
    )
        external
        payable
        returns (
            uint256 amountMoox,
            uint256 amountBNB,
            uint256 liquidity
        )
    {
        moox.transferFrom(msg.sender, address(this), _amountMooxDesired);

        (amountMoox, amountBNB, liquidity) = router.addLiquidityETH{value: msg.value}(
            address(moox),
            _amountMooxDesired,
            _amountMooxMin,
            _amountBNBMin,
            _to,
            _deadline
        );

        if (_amountMooxDesired > amountMoox) {
            moox.transfer(msg.sender, _amountMooxDesired.sub(amountMoox));
        }

        if (msg.value > amountBNB) {
            (bool success, ) = msg.sender.call{value: msg.value.sub(amountBNB)}(new bytes(0));
            require(success, 'LiquidityProxy: BNB_TRANSFER_FAILED');
        }
    }

    function removeLiquidityWithPermit(
        uint256 _liquidity,
        uint256 _amountMooxMin,
        uint256 _amountBNBMin,
        address _to,
        uint256 _deadline,
        bool _approveMax,
        uint8 _v,
        bytes32 _r,
        bytes32 _s
    ) external virtual returns (uint256 amountMoox, uint256 amountBNB) {
        uint256 value = _approveMax ? type(uint256).max : _liquidity;

        pair.permit(msg.sender, address(this), value, _deadline, _v, _r, _s);

        (amountMoox, amountBNB) = removeLiquidity(_liquidity, _amountMooxMin, _amountBNBMin, _to, _deadline);
    }

    function removeLiquidity(
        uint256 _liquidity,
        uint256 _amountMooxMin,
        uint256 _amountBNBMin,
        address _to,
        uint256 _deadline
    ) public returns (uint256 amountMoox, uint256 amountBNB) {
        pair.transferFrom(msg.sender, address(this), _liquidity);

        if (pair.allowance(address(this), address(router)) < _liquidity) {
            pair.approve(address(router), type(uint256).max);
        }

        (amountMoox, amountBNB) = router.removeLiquidityETH(
            address(moox),
            _liquidity,
            _amountMooxMin,
            _amountBNBMin,
            address(this),
            _deadline
        );

        moox.transfer(_to, amountMoox);

        (bool success, ) = _to.call{value: amountBNB}(new bytes(0));
        require(success, 'LiquidityProxy: BNB_TRANSFER_FAILED');
    }
}