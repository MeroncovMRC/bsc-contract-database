pragma solidity ^0.8.0;



abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library Address {
  
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)


/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}




pragma solidity ^0.8.0;
abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;
    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }
    modifier nonReentrant() {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        _status = _ENTERED;

        _;
        _status = _NOT_ENTERED;
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


interface IBITV {


    function category() external view returns(uint256);

    function _lastIndex() external view returns(uint256);
    
    function _owner() external view returns(address payable);

    function owner() external view returns(address);

    function nftOwner(uint256 _id) external view returns (address);

    function ownerOf(uint256 _id) external view returns (address);

    function balanceOf(address account) external view returns (uint256);

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    function getCollectionLength() external view returns(uint256);

    function totalSupply() external view returns (uint256);
    
    function referalWallet(address _contractAddress) external view returns(address);

    function getMarketerNft(address _contractAddress) external view returns(address);
    
    function _royaltyFees(address _contractAddress) external view returns(uint256);

    function royaltiesActive(address _contractAddress) external view returns(bool);
    
    function getCollectionCategory(address _contractAddress) external view returns(uint256);

    function getNFTIndexPrice(uint256 _index) external view returns(uint256);

    function mintFor(uint256 quantity, uint256 index, address owner) payable external returns (uint256);
    
    function getAccessoryNFT() external view returns(uint256[] memory);

    function getAccessorySize() external view returns(uint256);

    function getHolderIds(address _owner) external view returns(uint256[] memory);

    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external;

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);
}

contract IRobotDAOVoter is ReentrancyGuard, Ownable {

    struct IRobotVote {
        string name;
        string description;
        bool status;
        bool finished;
        uint256 pollCount; 
    }

    struct IVotePolls {
        uint256 key;
        string value;
        uint256 votes;
    }

    struct InjectedWallet {
        address walletAddress;
        uint256 percentage;
        bool locked;
    }

    using SafeMath for uint256;
    using SafeERC20 for IERC20;
    using Counters for Counters.Counter;

    Counters.Counter private _votes;
    IBEP20 private iRobotContract = IBEP20(0x431D3890F2E6EfD22fACbb5ca5b71871c073CC18);
    IBITV public iRobotCollection = IBITV(0xF629C769b8A7A5B89BB1E854eFE1540b901EfbAE); 

    uint256 public minVote; //  100000000000
    
    mapping(uint => IRobotVote) private iRobotDao;
    mapping(uint256 => IVotePolls[]) private _polls;
    mapping(uint => mapping(uint => mapping(address => bool))) private IDaoVotedAddresses;
    mapping(uint => mapping(address => bool)) private IVotedAddresses;

    

    mapping(address => InjectedWallet) wallets;
    address[] walletAddresses;

    // BEP20 configs
    address private WBNB;
    address public buyBackToken = 0x19fa30C25C5A9E8eECc75E850F96295cEFfD30af;
    IDEXRouter public router;
    uint public payoutTokenPercentage = 35;

    event WalletAdded(address indexed wallet, uint256 percentage, bool locked);
    event WalletRemoved(address indexed wallet);
    
    /**
        @dev Constructor function. Initializes the contract by setting the contract owner and incrementing the votes counter.
    */
    constructor()  {
        transferOwnership(msg.sender);
        _votes.increment();
        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        WBNB = address(router.WETH());
    }


    /**
    * Requires the voter to hold at least `minVote` iRobotCollection tokens
    * and have a non-zero balance of iRobotContract tokens.
    */
    modifier exclusiveVoter() {
        require(iRobotCollection.balanceOf(msg.sender) >= minVote && iRobotContract.balanceOf(msg.sender) > 0, "Callback: Not Allowed!");
        _;
    }

    /**
    * Requires the voter to hold at least `minVote` iRobotCollection tokens.
    */
    modifier allowedVoter() {
        require(iRobotContract.balanceOf(msg.sender) >= minVote, "Callback: Not Allowed!");
        _;
    }

    
    function getTotalPanels() external view returns(uint256) {
        return _votes.current();
    }


    /**
        * Returns the percentage of iRobotCollection tokens held by a given owner.
        * 
        * @param owner The address of the owner whose iRobotCollection token holdings will be calculated.
        * @return The percentage of iRobotCollection tokens held by the given owner, scaled by 100.
    */
    function getCollectionOwnerShares(address owner) public view returns(uint256) {
        return fromX(iRobotCollection.balanceOf(owner), iRobotCollection.totalSupply(), toWei(100));
    }

    /**
        * Returns the percentage of iRobotContract tokens held by a given owner.
        * 
        * @param owner The address of the owner whose iRobotContract token holdings will be calculated.
        * @return The percentage of iRobotContract tokens held by the given owner, scaled by 100.
    */
    function getTokenOwnersShares(address owner) public view returns(uint256) {
        return fromX(iRobotContract.balanceOf(owner), iRobotContract.totalSupply(), toWei(100));
    }


    /**
        * Returns the percentage of iRobotContract tokens held by a given owner.
        * 
        * @param owner The address of the owner whose iRobotContract token holdings will be calculated.
        * @return The percentage of iRobotContract tokens held by the given owner, scaled by 100.
    */
    function getShares(address owner) internal view returns(uint256) {
        return fromX(iRobotContract.balanceOf(owner), iRobotContract.totalSupply(), toWei(100));
    }
        
    /**
    * Returns the percentage and locked status of a wallet.
    * Requirements:
    * - The wallet must exist.
    */
    function getWallet(address walletAddress) external view returns (uint256 percentage, bool locked) {
        InjectedWallet storage wallet = wallets[walletAddress];
        require(wallet.walletAddress != address(0), "NFT: Wallet does not exist");
        return (wallet.percentage, wallet.locked);
    }


    /**
    * Returns an array of IVotePolls objects for a given vote index.
    * Requirements:
    * - The index must be less than the current vote count.
    */
    function getDaoPolls(uint256 index) external view returns (IRobotVote memory) {
        require(index < _votes.current(), "Index out of range");
        return iRobotDao[index];
    }

    /**
    * Returns an array of IVotePolls objects for a given vote index.
    * Requirements:
    * - The index must be less than the current vote count.
    */
    function getVotePolls(uint256 index) external view returns (IVotePolls[] memory) {
        require(index < _votes.current(), "Index out of range");
        return _polls[index];
    }


    function getVotingPower(address _owner) external view returns(uint256) {
        return iRobotCollection.balanceOf(_owner) + fromGwei(iRobotContract.balanceOf(_owner)) / 100;
    }

    function getTokenPower(address _owner) external view returns(uint256) {
        return fromGwei(iRobotContract.balanceOf(_owner)) / 100;
    }


    /**
        * @dev Sets `percentage` as the mint of `_payoutTokenPercentage` by the amount.
        *
        * Requirements:
        *
        * - `_payoutTokenPercentage` must exist.
    */
    function setPayoutTokenPercentage(uint256 _payoutTokenPercentage) external  onlyOwner {
        payoutTokenPercentage = _payoutTokenPercentage;
    }

        
    /**
        * Requirements:
        *
        * - `_buyBackToken` must exist.
    */
    function setTokenBuyback(address _buyBackToken) external  onlyOwner {
        buyBackToken = _buyBackToken;
    }

 
    /**
    * @dev Sets the address of the iRobot contract to be used for operations that require it.
    * @param contractAddress The address of the iRobot contract.
    * @notice Only the contract owner can call this function.
    * @notice The address of the iRobot contract must not be the zero address.
    */
    function setIRobotContract(address contractAddress) external onlyOwner {
        require(contractAddress != address(0), "Invalid contract address");
        iRobotContract = IBEP20(contractAddress);
    }


     /**
    * @dev Sets the address of the iRobot collection contract.
    * @param collectionAddress The address of the iRobot collection contract.
    * Requirements:
    * - `collectionAddress` must not be the zero address.
    * - Only the contract owner can call this function.
    */
    function setIRobotCollection(address collectionAddress) external onlyOwner {
        require(collectionAddress != address(0), "Invalid collection address");
        iRobotCollection = IBITV(collectionAddress);
    }


    /**
    * @dev Sets the minimum vote power required for voting in the DAO.
    * @param _power The new minimum vote power required.
    * Requirements:
    * - Only the owner can call this function.
    */
    function setMinVote(uint256 _power) external onlyOwner {
        minVote = _power;
    }

    /**
    * Creates a new vote with the given name, description, status, and key-value pairs.
    * Requirements:
    * - Caller must be the contract owner.
    */
    function createVote(IRobotVote memory types, uint256[] memory keys, string[] memory values) external onlyOwner {
        uint256 index = _votes.current();

        // Create a new IVotePolls object for each key-value pair
        for (uint256 i = 0; i < keys.length; i++) {
            _polls[index].push(IVotePolls({key: keys[i], value: values[i], votes: 0}));
        }

        // Create a new IRobotVote object for the new vote
        iRobotDao[index] = types;
        // Increment the vote count
        _votes.increment();
    }

    /**
    * Updates the key and value of a poll at a given index for a given vote.
    * Requirements:
    * - The vote index must be less than the current vote count.
    * - The poll index must be less than the length of the polls array for the given vote.
    */
    function updateVotePoll(uint256 voteIndex, uint256 pollIndex, uint256 newKey, string memory newValue) external onlyOwner {
        require(voteIndex < _votes.current(), "Index out of range");
        require(pollIndex < _polls[voteIndex].length, "Poll index out of range");
        require(!iRobotDao[voteIndex].finished, "DAO Voting poll finished!");
        require(iRobotDao[voteIndex].status, "DAO: Voting is live");
        
        _polls[voteIndex][pollIndex].key = newKey;
        _polls[voteIndex][pollIndex].value = newValue;
    }

    /**
    * Allows a voter to cast a vote for a given poll index in a given vote.
    * Requirements:
    * - The vote index must be less than the current vote count.
    * - The poll index must be less than the length of the polls array for the given vote.
    * - The voter must not have already voted in the given poll.
    * - The voter must hold at least `minVote` iRobotCollection tokens.
    */
    function vote(uint256 index, uint256 pollIndex) external allowedVoter() {
        require(index < _votes.current(), "DAO: Index out of range");
        require(pollIndex < _polls[index].length, "DAO: Index out of range");
        require(!IDaoVotedAddresses[index][pollIndex][msg.sender], "DAO: Already voted");
        require(!IVotedAddresses[index][msg.sender], "DAO: Already voted");
        require(!iRobotDao[index].finished, "DAO Voting poll finished!");
        
        uint256 votePower = iRobotCollection.balanceOf(msg.sender) + fromGwei(iRobotContract.balanceOf(msg.sender)) / 100;
        
        if(!iRobotDao[index].status) iRobotDao[index].status = true;
        
        _polls[index][pollIndex].votes += votePower;
        IDaoVotedAddresses[index][pollIndex][msg.sender] = true;
        IVotedAddresses[index][msg.sender] = true;
    }

    function setDaoFinished(uint256 index) external onlyOwner {
        iRobotDao[index].finished = true;
    }


    /**
    * Deletes a vote at a given index.
    * Requirements:
    * - The index must be less than the current vote count.
    * - The vote must not be in progress (status must be false).
    */
    function deleteVote(uint256 index) external onlyOwner {
        require(index < _votes.current(), "Index out of range");
        require(!iRobotDao[index].status, "DAO: Cannot delete in porcess");
        require(!iRobotDao[index].finished, "DAO Cannot delete finished poll!");
        
        for (uint256 i = index; i < _votes.current() - 1; i++) {
            iRobotDao[i] = iRobotDao[i+1];
        }

         for (uint256 i = index; i < _votes.current() - 1; i++) {
            _polls[i] = _polls[i+1];
        }

        delete iRobotDao[_votes.current() - 1];
        delete _polls[_votes.current() - 1];
        
        _votes.decrement();
    }



    /**
        * Adds an extended wallet to the contract with a given percentage and lock status.
        * Requirements:
        * - The wallet address cannot be the zero address.
        * - The wallet address must not already exist in the wallets mapping.
        * 
        * @param wallet The address of the wallet to be added.
        * @param percentage The percentage of rewards to be sent to this wallet, scaled by 100.
        * @param locked Whether or not this wallet is locked and cannot be removed.
    */
    function addExtendedWallet(address wallet, uint256 percentage, bool locked) external onlyOwner {
        require(wallet != address(0), "NFT: Wallet cannot be zero address");
        require(wallets[wallet].walletAddress == address(0), "NFT: Wallet already exists");
        wallets[wallet] = InjectedWallet(wallet, percentage, locked);
        walletAddresses.push(wallet);
        emit WalletAdded(wallet, percentage, locked);
    }

    /**
        * Removes a wallet by its address.
        * Requirements:
        * - The wallet must exist.
        * - The wallet must not be locked.
     */
    function removeExtendedWallet(address wallet) external onlyOwner {
        require(wallets[wallet].walletAddress != address(0), "DAO: Wallet does not exist");
        require(!wallets[wallet].locked, "DAO: Locked Wallet");

        delete wallets[wallet];
        for (uint256 i = 0; i < walletAddresses.length; i++) {
            if (walletAddresses[i] == wallet) {
                walletAddresses[i] = walletAddresses[walletAddresses.length - 1];
                walletAddresses.pop();
                emit WalletRemoved(wallet);
                return;
            }
        }
    }

   /**
        * Converts a given value to its equivalent in wei (the smallest unit of Ether).
        * 
        * @param value The value to be converted to wei.
        * @return The value in wei.
    */
    function toWei(uint value) internal pure returns (uint) {
        return value*(10**18);
    }


    function fromGwei(uint256 value) internal pure returns (uint256) {
       return value / 1 gwei;
    }

    /**
        * Calculates the equivalent of a/b scaled by a given factor.
        * 
        * @param a The numerator value.
        * @param b The denominator value.
        * @param scale The factor to scale the result by.
        * @return The value of a/b scaled by the given factor.
    */
    function fromX(uint256 a, uint256 b, uint256 scale) internal  pure returns(uint256) {
        return (scale * a) / b;
    }

    /**
        * Transfers Ether stuck in the contract to the contract owner.
        * 
        * @param _amount The amount of Ether to transfer.
    */
    function withdrawStuckBalance(uint256 _amount) payable external onlyOwner {
        payable(address(owner())).transfer(_amount);
    }

    /**
        * Transfers ERC20 tokens stuck in the contract to the contract owner.
        * 
        * @param _amount The amount of ERC20 tokens to transfer.
        * @param _token The address of the ERC20 token contract.
    */
    function withdrawErc20StuckBalance(uint256 _amount, address _token) payable external onlyOwner {
        IBEP20(_token).transfer(owner(), _amount);
    }


     function buyBack(uint256 payout_shares) internal {
            address[] memory path = new address[](2);
            uint deadline = block.timestamp;
            path[0] = WBNB;
            path[1] = buyBackToken;
            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: payout_shares}(
                        0,
                        path,
                        address(0x000000000000000000000000000000000000dEaD),
                        deadline
            );
        }


    /**
        * Allows the contract to receive Ether transfers.
        * Sends a percentage of the transferred amount to each of the added wallets based on their percentage.
        * 
        * Requirements:
        * - Each wallet must exist in the wallets mapping.
    */
    receive() external payable {
        uint256 wallet = msg.value * (100 - payoutTokenPercentage) / 100;
        uint256 payout_shares = msg.value * payoutTokenPercentage / 100;

        for (uint256 i = 0; i < walletAddresses.length; i++) {
            uint256 amount = wallet * wallets[walletAddresses[i]].percentage / 100;
            (bool sent,) = payable(address(walletAddresses[i])).call{value: amount}("");
            require(sent, "Failed to send tx");
        }
        
        buyBack(payout_shares);
    }
    
}