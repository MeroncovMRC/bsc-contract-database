// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

interface IToken {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval( address indexed owner, address indexed spender, uint256 value );
}

contract TokenSplitter {
    address public address1;
    address public address2;
    address public address3;
    address public address4;
    IToken public tokenAddress;

    constructor(address _address1, address _address2, address _address3, address _address4, address token) {
        require(isContract(token));
        require(!isContract(_address1) && !isContract(_address2) && !isContract(_address3) && !isContract(_address4));  
        address1 = _address1;
        address2 = _address2;
        address3 = _address3;
        address4 = _address4;
        tokenAddress = IToken(token);
    }

    function splitBUSD(uint256 amount) external {
        tokenAddress.transferFrom(msg.sender, address(this), amount);
        uint256 amountPerRecipient = amount / 4;
        tokenAddress.transfer(address1, amountPerRecipient);
        tokenAddress.transfer(address2, amountPerRecipient);
        tokenAddress.transfer(address3, amountPerRecipient);
        tokenAddress.transfer(address4, amountPerRecipient);
    }
    
  function isContract(address addr) internal view returns (bool) {
        uint size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }
}