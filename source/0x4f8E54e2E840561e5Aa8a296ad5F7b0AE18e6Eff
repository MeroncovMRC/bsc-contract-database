pragma solidity ^0.4.24;

contract Estates {
  string public name;
  string public symbol;
  uint8 public decimals = 0;
  uint256 public totalSupply = 1;
  mapping (address => uint256) public balanceOf;

  /**
  mapping (address => mapping (address => uint256)) public allowance; //V2
  */

  string public author;
  string public content;
  uint8 public form;
  // 0:img
  // 1:htm
  // 2:xml
  // 3:txt
  // 4:t64
  // 5:zip
  // 6:hex
  // 7:json
  // 8:wasm
  // 9:js
  // 10:id
  // 11:dna
  // 12:name
  // 13:hash
  // 14:ipfs

  uint256 public price;
  bool public forSale;
  address public owner;

  event Transfer (address indexed fromAddress, address indexed toAddress, uint256 txPenny);

  /**
  event Approval (address indexed ownerAddress, address indexed spenderAddress, uint256 txPenny);
  */

  constructor (
  string _name,
  string _symbol,
  uint8 _form,
  string _content,
  string _author,
  uint _price,
  bool _forSale ) public {
    name = _name;
    symbol = _symbol;
    form = _form;
    content = _content;
    author = _author;
    price = _price*10**18;
    forSale = _forSale;
    owner = msg.sender;
    balanceOf[msg.sender] = 1;
  }

  modifier onlyOwner {
    require (msg.sender == owner);
    _;
  }

  function move (address from, address to)
  internal {
    require (balanceOf[from] == 1);
    balanceOf[from] = 0;
    balanceOf[to] = 1;
    forSale = false;
    owner = to;
    emit Transfer (from, to, 1);
  }

  function transfer (address to, uint256 value) public returns (bool success) {
    move (msg.sender, to);
    return true;
  }

  /**
  function transferFrom (address from, address to, uint256 value) public returns (bool success) {
    require (allowance[from][msg.sender] == 1);
    allowance[from][msg.sender] = 0;
    move (from, to);
    return true;
  }
  */

  /**
  function approve (address spender, uint256 value) public returns (bool success) {
    allowance[msg.sender][spender] = 1;
    emit Approval (msg.sender, spender, 1);
    return true;
  }
  */

  function setSale (bool _forSale)
  onlyOwner public {
    forSale = _forSale;
  }

  function setPrice (uint256 _price)
  onlyOwner public {
     price = _price; /* in Wei */
  }

  function () public payable {
    require (forSale, "SALE?");
    require (msg.value >= price, "PRICE?");
    owner.transfer (msg.value);
    move (owner, msg.sender);
  }
}