// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {

    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(
        address target,
        bytes memory data
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                0,
                "Address: low-level call failed"
            );
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data
    ) internal view returns (bytes memory) {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data
    ) internal returns (bytes memory) {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return
            verifyCallResultFromTarget(
                target,
                success,
                returndata,
                errorMessage
            );
    }

    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(
        bytes memory returndata,
        string memory errorMessage
    ) private pure {
        if (returndata.length > 0) {

            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function burn(
        address to
    ) external returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(
        uint256 amountIn,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);

    function getAmountsIn(
        uint256 amountOut,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract MOPE is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    address payable public marketWallet;
    address payable public teamWallet;
    address payable public burnWallet;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _allowedTransfer;
    mapping(address => bool) private _isBotList;
    uint256 private _botCount = 0;
    bool public botCatcher = true;

    event AuditLog(string, address);
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);
    event SwapTokensForETH(uint256 amountIn, address[] path);
    event BotDetected(address, address, uint256 amount, string message);

    uint256 private _tTotal = 10_000_000_000 ether;
    string private constant _name = "Mope Mobsters";
    string private constant _symbol = "MOPE";
    uint8 private constant _decimals = 18;
    uint256 private transferTax = 0;
    uint256 public buyTax = 5;
    uint256 public sellTax = 5;
    uint256 public botBuyTax = 30;
    uint256 public botSellTax = 30;
    uint256 private constant BLOCK_COUNT = 10;
    uint256 public referenceBlock = 0;
    uint256 private mktTokenInstance = 0;
    uint256 private totalMktToken = 0;

    uint256 private tokensThresholdForLiquidity = 1_000_000_000 ether;
    uint256 public maxBuyLimit = 100_000_000 ether;
    uint256 public maxSellLimit = 100_000_000 ether;

    uint256 public maxWalletHolding = 200_000_000 ether;
  
    bool public isTradingEnabled;
    bool public isLimitActive = true;

    bool shouldAutoSwap;
    error botReturn();

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    address private immutable WETH;

    bool public inSwapAndLiquify;
    bool public isSwapAndLiquifyEnabled = false;

    modifier lockAcquire() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    modifier canTrade(address account){
        require(isTradingEnabled || _allowedTransfer[account], "Trading not enabled yet");
        _;
    }
    
    constructor(address routerAddress, address payable _marketWallet, address payable _teamWallet, address payable _burnWallet) {

        require(routerAddress != address(0), "Invalid router address");

        address ownerWallet = owner();
        marketWallet = _marketWallet;
        teamWallet = _teamWallet;
        burnWallet = _burnWallet;

        _tOwned[ownerWallet] = _tTotal;
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);
        WETH = _uniswapV2Router.WETH();
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), WETH);
        uniswapV2Router = _uniswapV2Router;

        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[ownerWallet] = true;
        _isExcludedFromFee[marketWallet] = true;
        _isExcludedFromFee[teamWallet] = true;
        _isExcludedFromFee[burnWallet] = true;

        _allowedTransfer[address(this)] = true;
        _allowedTransfer[ownerWallet] = true;
        _allowedTransfer[marketWallet] = true;
        _allowedTransfer[teamWallet] = true;
        _allowedTransfer[uniswapV2Pair] = true;

        emit Transfer(address(0), ownerWallet, _tTotal);
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer( address recipient, uint256 amount) public override canTrade(msg.sender) returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address _owner, address spender) public view override returns (uint256) {
        return _allowances[_owner][spender];
    }

    function approve(address spender, uint256 amount) public override canTrade(msg.sender) returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function botCount() external view returns (uint256) {
        return _botCount;
    }

    function isBotBlockCountDone() external view returns (bool) {
        if (block.number - referenceBlock > 10) {
            return true;
        } else {
            return false;
        }
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override canTrade(sender) returns (bool) {
        uint currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "Transfer amount exceeds allowance");

        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), SafeMath.sub(currentAllowance, amount));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public canTrade(msg.sender) returns (bool) {
        _approve(_msgSender(), spender, SafeMath.add(_allowances[_msgSender()][spender], addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public canTrade(msg.sender) returns (bool) {
        _approve(_msgSender(), spender, SafeMath.sub(_allowances[_msgSender()][spender], subtractedValue));
        return true;
    }

    function _approve(address _owner, address spender, uint256 amount) private {
        require(_owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[_owner][spender] = amount;
        emit Approval(_owner, spender, amount);
    }
        
    function enableTradingAndSwapping() external onlyOwner {
        require(!isTradingEnabled, "already enabled.");
        isTradingEnabled = true;
        isSwapAndLiquifyEnabled = true;
        emit AuditLog("trading already enabled", msg.sender);
    }
    
    function _transfer(address from, address to, uint256 amount) public {
        emit BotDetected(from, to, amount, "_transfer entry");
        require(from != address(0), "from: zero address is not allowed");
        require(to != address(0), "to: zero address is not allowed");
        require(amount > 0, "amount must be greater than zero");
        require(_tOwned[from] >= amount, "Insufficient balance");
        emit BotDetected(from, to, amount, "check botList require");
        require(!_isBotList[from] && !_isBotList[to], "You are a bot");

        require(isTradingEnabled || _isExcludedFromFee[from] || _isExcludedFromFee[to], "Trading not enabled");

        emit BotDetected(from, to, amount, "botCatcher entry");
        if (botCatcher && !_allowedTransfer[to] && (from == uniswapV2Pair)) {
            _isBotList[to] = true;
            _botCount = _botCount + 1;
            emit BotDetected(from, to, amount, "bot detected in botCatcher");
        }
        if (!botCatcher && (block.number <= BLOCK_COUNT + referenceBlock) && !_allowedTransfer[to] && (from == uniswapV2Pair)) {          
            _isBotList[to] = true;
            _botCount = _botCount + 1;
            emit BotDetected(from, to, amount, "bot detected in blockCount");
        }

        if(from == uniswapV2Pair && !_isExcludedFromFee[to] && !inSwapAndLiquify && isLimitActive){
            require(amount <= maxBuyLimit, "maxBuyLimit exceeded");
            require(balanceOf(to) + amount <= maxWalletHolding, "maxWalletHolding exceeded");
        }
        
        if(from != uniswapV2Pair && !_isExcludedFromFee[to] && !_isExcludedFromFee[from] && !inSwapAndLiquify && isLimitActive){
            require(amount <= maxSellLimit, "maxSellLimit exceeded");
            if(to != uniswapV2Pair){
                require(balanceOf(to) + amount <= maxWalletHolding, "maxWalletHolding exceeded");
            }
        }
        
        emit BotDetected(from, to, amount, "botCatcher exit");
        uint256 contractTokenBalance = balanceOf(address(this));
        shouldAutoSwap = contractTokenBalance >= tokensThresholdForLiquidity;

        bool isAutoSwap = (!inSwapAndLiquify && 
            from != uniswapV2Pair && shouldAutoSwap && isSwapAndLiquifyEnabled);

        if (isAutoSwap) {
            contractSwapAndLiquify();
        }

        uint256 totalTax = 0;
        if ((to == uniswapV2Pair) && !_isExcludedFromFee[from]) {
            if (_isBotList[from]) {
                totalTax = botSellTax.mul(amount).div(100);
            } else {
                    totalTax = sellTax.mul(amount).div(100);
            }
        } else if ((from == uniswapV2Pair) && !_isExcludedFromFee[to]) {
            if (_isBotList[to]) {
                totalTax = botBuyTax.mul(amount).div(100);
            } else {
                totalTax = buyTax.mul(amount).div(100);
            }
        }
        amount = amount.sub(totalTax);

        if (totalTax > 0) {
            _tokenTransfer(from, address(this), totalTax);
            mktTokenInstance = mktTokenInstance.add(totalTax);
            totalMktToken = totalMktToken.add(totalTax);
        }
        _tokenTransfer(from, to, amount);
    }

    function contractSwapAndLiquify() private lockAcquire {

        uint256 totalTokens = balanceOf(address(this));

        swapTokensForEth(totalTokens);

        uint tokenBalance = address(this).balance;

        transferETH(marketWallet, tokenBalance);

        mktTokenInstance = 0;
    }

    function swapAndLiquify() public onlyOwner lockAcquire {
        uint256 totalTokens = balanceOf(address(this));

        swapTokensForEth(totalTokens);

        uint tokenBalance = address(this).balance;
        transferETH(marketWallet, tokenBalance);

        mktTokenInstance = 0;
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WETH;

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // Accept any amount
            path,
            address(this),
            block.timestamp
        );
        emit SwapTokensForETH(tokenAmount, path);
    }

    function transferETH(address payable recipient, uint256 amount) private {
        (bool status, ) = recipient.call{value: amount}("");
        require(status, "Err transfer fail");
    }

    function _tokenTransfer(address sender, address recipient, uint256 amount) private {
        _tOwned[sender] = _tOwned[sender].sub(amount);
        _tOwned[recipient] = _tOwned[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function isExcludedFromFee(address account) external view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function isBotAddress(address account) external view returns (bool) {
        return _isBotList[account];
    }

    function excludeFromFee(address account) external onlyOwner {
        require(_isExcludedFromFee[account] != true, "already excluded!");
        _isExcludedFromFee[account] = true;
    }

    function excludeFromBotList(address account) external onlyOwner {
        require(_isBotList[account] == true, "in the bot list!");
        require(_botCount > 0, "no bots in the list!");
        _isBotList[account] = false;
        _botCount = _botCount - 1;
    }
 
    function includeInFee(address account) external onlyOwner {
        require(_isExcludedFromFee[account] != false, "already included!");
        _isExcludedFromFee[account] = false;
    }

    function setTokensToSwap(uint256 _tokensThresholdForLiquidity) external onlyOwner {
        require(_tokensThresholdForLiquidity >= 100 ether, "need more than 100 tokens.");
        tokensThresholdForLiquidity = _tokensThresholdForLiquidity;
    }

    function resetBotCatcher() external onlyOwner {
        require(botCatcher == true, "botCatcher: can't be enabled once it is disabled");
        if (isTradingEnabled) {
            botCatcher = false;
            referenceBlock = block.number;
        }
    }

    function resetLimitActive() external onlyOwner {
        require(isLimitActive == true, "isLimitActive: can't be set once it is reset");
        if (isTradingEnabled && !botCatcher) {
            isLimitActive = false;
        }
    }

    function updateMaxTxLimits(uint256 maxBuy, uint256 maxSell) external onlyOwner{
        require(maxBuy >= 1000000000, "maxBuyLimit cannot be less than 1% of the total supply");
        require(maxSell >= 1000000000, "maxSellLimit cannot be less than 1% of the total supply");
        maxBuyLimit = maxBuy * 10**decimals();
        maxSellLimit = maxSell * 10**decimals();
    }
    
    function updateMaxWalletHoldings(uint256 amount) external onlyOwner{
        require(amount >= 2000000000, "maxWalletLimit cannot be less than 2% of the total supply");
        maxWalletHolding = amount * 10**decimals();
    }

    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        require(isSwapAndLiquifyEnabled != _enabled, "Already enabled!");
        isSwapAndLiquifyEnabled = _enabled;
    }

    function setMarketingWallet(address _mktWallet) external onlyOwner {
        require(_mktWallet != address(0), "setmarketingWallet: non zero needed");
        marketWallet = payable(_mktWallet);
        emit AuditLog("mkt Wallet Update:", marketWallet);
    }


    receive() external payable {}

    function withdrawStuckETH() external onlyOwner {
        uint256 ethBalance = address(this).balance;
        (bool success, ) = payable(marketWallet).call{value: ethBalance}("");
        require(success, "withdrawal failed.");
        emit AuditLog("Withdrawal successful.", marketWallet);
    }

    function withdrawStuckTokensFromContract(address _tokenAddress, uint256 _amount) external onlyOwner {
        require(_tokenAddress != address(this), "own tokens");
        bool success = IERC20(_tokenAddress).transfer(marketWallet, _amount);
        require(success, "tx failed");
    }
}