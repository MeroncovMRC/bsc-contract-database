{"NFTGenerator.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./Ownable.sol\";\n\ninterface NFT {\n    function clone() external returns (address);\n    function __init__(\n        string calldata name_, \n        string calldata symbol_, \n        address treasury_, \n        uint256 maxSupply, \n        address owner_\n    ) external;\n}\n\n/**\n    Generates NFT Smart Contracts\n */\n contract LuxeNFTGenerator is Ownable {\n\n    // Master Proxy Implementation Contract\n    NFT public proxy;\n\n    // Treasury Address\n    address public treasury;\n\n    // list of NFTs\n    address[] public allNFTsGenerated;\n\n    // Mint Page Events\n    event NFTCreated(address NFTAddress);\n\n    constructor(\n        address proxy_\n    ) {\n        proxy = NFT(payable(proxy_));\n    }\n\n    function createNFT(\n        string calldata name,\n        string calldata symbol,\n        uint256 maxSupply\n    ) external onlyOwner returns (address newNFT) {\n\n        // creates new NFT Proxy\n        newNFT = proxy.clone();\n\n        // Initialize Proxy\n        NFT(payable(newNFT)).__init__(\n            name,\n            symbol,\n            treasury,\n            maxSupply,\n            msg.sender\n        );\n\n        // add to list of NFTs\n        allNFTsGenerated.push(newNFT);\n\n        // Emit Proxy Creation Event\n        emit NFTCreated(newNFT);\n    }\n\n    function createNFTCustomImplementation(\n        address implementation,\n        string calldata name,\n        string calldata symbol,\n        uint256 maxSupply\n    ) external onlyOwner returns (address newNFT) {\n\n        // creates new NFT Proxy\n        newNFT = NFT(implementation).clone();\n\n        // Initialize Proxy\n        NFT(payable(newNFT)).__init__(\n            name,\n            symbol,\n            treasury,\n            maxSupply,\n            msg.sender\n        );\n\n        // add to list of NFTs\n        allNFTsGenerated.push(newNFT);\n\n        // Emit Proxy Creation Event\n        emit NFTCreated(newNFT);\n    }\n\n    function setTreasury(address treasury_) external onlyOwner {\n        treasury = treasury_;\n    }\n\n    function withdraw() external onlyOwner {\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(s);\n    }\n\n    function withdrawToken(address token, uint256 amount) external onlyOwner {\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, msg.sender, amount));\n        require(\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\n            \u0027TransferHelper::safeTransfer: transfer failed\u0027\n        );\n    }\n\n    function setProxy(address proxy_) external onlyOwner {\n        proxy = NFT(payable(proxy_));\n    }\n\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.14;\n\n/**\n * @title Owner\n * @dev Set \u0026 change owner\n */\ncontract Ownable {\n\n    address private owner;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier onlyOwner() {\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}"}}