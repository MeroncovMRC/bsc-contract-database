
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: /contracts/TGG_Exchange_Card.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interface/ITGG.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IBP{
    function decimals() external view returns(uint);
}
contract TGG_Exhcange_Card is Ownable {
    uint public cardPrice = 30e18;
    TGG721 public NFT;
    mapping(address => bool) public cardList;
    uint public catId = 1000;
    address public wallet;
    Mining public main;

    function setAddress(address main_) external onlyOwner {
        main = Mining(main_);
        NFT = TGG721(main.NFT());
        cardList[main.TGG()] = true;
    }

    function setCardPrice(uint price) public onlyOwner {
        cardPrice = price;
    }

    function setWallet(address addr_) public onlyOwner {
        wallet = addr_;
    }

    function editCard(address token, bool com) public onlyOwner {
        cardList[token] = com;
    }

    function getTokenPrice(address token) public view returns (uint){
        return main.getTokenPrice(token);
    }

    function coutingTokenNeed(address token) public view returns (uint){
        uint price = getTokenPrice(token);
        uint dec = IBP(token).decimals();
        uint out = cardPrice * 1e18 / (price * (10 ** (18 - dec)));
        return out;
    }

    function buyCard(address token, uint amount_, address recipient) public {
        require(cardList[token], 'wrong token');
        uint need = coutingTokenNeed(token);
        IERC20(token).transferFrom(msg.sender, wallet, need * amount_);
        for (uint i = 0; i < amount_; i++) {
            NFT.mint(recipient, catId, false);
        }

    }

    function setCatId(uint catId_) public onlyOwner {
        catId = catId_;
    }

    function safePull(address token_, address wallet_, uint amount_) public onlyOwner {
        IERC20(token_).transfer(wallet_, amount_);
    }


}

// File: /contracts/interface/ITGG.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
interface ClaimTGG {
    function addAmount(address addr_, uint amount_) external;
}

interface TGG721 {
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    function tokenByIndex(uint256 index) external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256 balance);

    function cardIdMap(uint tokenId) external view returns (uint256 cardId);

    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    function mint(address player_, uint cardId_, bool uriInTokenId_) external returns (uint256);
}
interface Refer {
    function bondUserInvitor(address addr_, address invitor_) external;

    function checkUserInvitor(address addr_) external view returns (address);
    
    function isRefer(address addr_) external view returns (bool);
}

interface Mining {
    function checkUserValue(address addr_) external view returns (uint);

    function stage() external view returns (address);

    function U() external view returns (address);

    function NFT() external view returns (address);

    function TGG() external view returns (address);

    function fund() external view returns (address);

    function userInfo(address addr_) external view returns (uint total, uint claimed, bool frist, uint value);

    function getTGGPrice() external view returns (uint);

    function userAmount() external view returns (uint);

    function refer() external view returns (address);

    function claim() external view returns (address);

    function nftPool() external view returns (address);

    function pair() external view returns (address);

    function burnAddress() external view returns (address);
    
    function getTokenPrice(address addr_) external view returns (uint);

}
interface Box {
    function price() external view returns (uint);

    function getPrice() external view returns (uint);

    function U() external view returns (address);

    function NFT() external view returns (address);

    function TGG() external view returns (address);
}
