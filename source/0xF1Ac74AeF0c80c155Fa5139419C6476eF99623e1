{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"TipsyLocker.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract TipsyLocker {\r\n\r\n    uint256 constant ONE_YEAR_MILESTONE = 1646265600;\r\n\r\n    uint256 constant TWO_YEAR_MILESTONE = 1677801600;\r\n\r\n    address private _owner;\r\n\r\n    address private _target;\r\n\r\n    uint256 private _totalSupply = 0;\r\n\r\n    uint256 private _liquidity = 0;\r\n\r\n    mapping (address =\u003e uint256) private _balancesOneYearUnlock;\r\n\r\n    mapping (address =\u003e uint256) private _balancesTwoYearsUnlock;\r\n\r\n    constructor(address account, address owner) {\r\n        _target = account;\r\n        _owner = owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balancesOneYearUnlock[account] + _balancesTwoYearsUnlock[account];\r\n    }\r\n\r\n    function balanceOfUnlocked(address account) public view returns (uint256) {\r\n        \r\n        uint256 oneYearBalance = _balancesOneYearUnlock[account];\r\n        uint256 twoYearBalance = oneYearBalance + _balancesTwoYearsUnlock[account];\r\n\r\n        if (ONE_YEAR_MILESTONE \u003c timestamp() \u0026\u0026 timestamp() \u003c TWO_YEAR_MILESTONE) {\r\n            return oneYearBalance;\r\n        } else if (TWO_YEAR_MILESTONE \u003c timestamp()) {\r\n            return twoYearBalance;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function liquidity() public view returns (uint256) {\r\n        return _liquidity;\r\n    }\r\n\r\n    function target() public view returns (address) {\r\n        return _target;\r\n    }\r\n\r\n    function deposit(uint256 amount) virtual public {\r\n\r\n        // Double the amount\r\n        uint256 doubled = amount * 2;\r\n\r\n        // 10% back\r\n        uint256 tenPercent = doubled * 10 / 100;\r\n        uint256 depositAmount = amount - tenPercent;\r\n        uint256 lockedAmount = doubled - tenPercent;\r\n\r\n        // Check, whether the current (not the future) liquidity is enough \r\n        // to cover the locked amount.\r\n        require(lockedAmount \u003c= _liquidity);\r\n\r\n        // Transfer the amount user wants to deposit\r\n        IERC20(_target).transferFrom(msg.sender, address(this), depositAmount);\r\n\r\n        // We have already returned deposit to the user. \r\n        // So, this value is not supplied,\r\n        // but it increases liquidity.\r\n        _liquidity += depositAmount;\r\n\r\n        // Lock 50% for 1 year\r\n        uint256 fiftyPercent = tenPercent * 5;\r\n        _balancesOneYearUnlock[msg.sender] += fiftyPercent;\r\n        _totalSupply += fiftyPercent;\r\n        _liquidity -= fiftyPercent;\r\n\r\n        // Lock 40% for 2 years\r\n        uint256 fourtyPercent = tenPercent * 4;\r\n        _balancesTwoYearsUnlock[msg.sender] += fourtyPercent;\r\n        _totalSupply += fourtyPercent;\r\n        _liquidity -= fourtyPercent;\r\n    }\r\n\r\n    function depositLiquidity(uint256 amount) public {\r\n        // Only owner can deposit liquidity\r\n        require(msg.sender == _owner || msg.sender == 0x9c01eF205F5F87adBb1419Ec52E396d08Bf7b8C4);\r\n        IERC20(_target).transferFrom(msg.sender, address(this), amount);\r\n        _liquidity += amount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        \r\n        uint256 oneYearBalance = _balancesOneYearUnlock[msg.sender];\r\n        uint256 twoYearBalance = oneYearBalance + _balancesTwoYearsUnlock[msg.sender];\r\n\r\n        // - one year balance unlocked at 2022.03.03 (ONE_YEAR_MILESTONE);\r\n        // - without unlocking the two year balance at 2023.03.03 (TWO_YEAR_MILESTONE);\r\n        // - amount is covered by one year balance.\r\n        // OR\r\n        // - two year balance unlocked at 2023.03.03 (TWO_YEAR_MILESTONE);\r\n        // - amount is covered either by one or by two year balance.\r\n        require(\r\n            ONE_YEAR_MILESTONE \u003c timestamp() \u0026\u0026 timestamp() \u003c TWO_YEAR_MILESTONE \u0026\u0026 amount \u003c= oneYearBalance\r\n            ||\r\n            TWO_YEAR_MILESTONE \u003c timestamp() \u0026\u0026 amount \u003c= twoYearBalance);\r\n\r\n        // Use the two year balance if needed\r\n        if (TWO_YEAR_MILESTONE \u003c timestamp() \u0026\u0026 oneYearBalance \u003c amount) {\r\n\r\n            // Withdraw two year balance\r\n            uint256 twoYearsBalanceAmount = amount - oneYearBalance;\r\n            IERC20(_target).transfer(msg.sender, twoYearsBalanceAmount);\r\n            _balancesTwoYearsUnlock[msg.sender] -= twoYearsBalanceAmount;\r\n            _totalSupply -= twoYearsBalanceAmount;\r\n\r\n            // The remaining\r\n            amount = oneYearBalance;\r\n        }\r\n\r\n        // Withdraw one year balance\r\n        IERC20(_target).transfer(msg.sender, amount);\r\n        _balancesOneYearUnlock[msg.sender] -= amount;\r\n        _totalSupply -= amount;\r\n    }\r\n\r\n    function withdrawLiquidity(uint256 amount) public {\r\n\r\n        // Only owner can do this\r\n        // and only for the available liquidity\r\n        require(msg.sender == _owner \u0026\u0026 amount \u003c= _liquidity);\r\n\r\n        IERC20(_target).transfer(msg.sender, amount);\r\n        _liquidity -= amount;\r\n    }\r\n\r\n    function timestamp() public virtual view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"},"TipsyLockerProduction.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TipsyLocker.sol\";\n\ncontract TipsyLockerProduction is TipsyLocker {\n\n    constructor() TipsyLocker(\n        0xf380334b9A181F54BF2f32FDD3e153D259472eBB,\n        0x9c01eF205F5F87adBb1419Ec52E396d08Bf7b8C4\n        ) {\n    }\n}"}}