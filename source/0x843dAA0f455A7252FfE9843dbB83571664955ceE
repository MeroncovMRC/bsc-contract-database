// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;

// import "@openzeppelin/contracts/math/SafeMath.sol";
// import "@openzeppelin/contracts/access/Ownable.sol";
// import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

contract NEXTYPEInvitationV2 is Ownable, ReentrancyGuard {
    using SafeMath for uint256;

    address[] public adminList;

    uint256 private initCodeLen = 8;

    address private initSuperior;

    string private initCode;

    // invitation list (superior > subordinate list)
    mapping(address => address[]) private invitationList;

    // invitation at list (superior > at list)
    mapping(address => uint256[]) private invitationAtList;

    // direct superior (user > superior)
    mapping(address => address) private directSuperior;

    // invitation code list (invitationCode > user)
    mapping(string => address) private codeList;

    // user list (user > invitationCode)
    mapping(address => string) private userList;

    // user bind at list (user > bind at)
    mapping(address => uint256) private userBindAtList;

    constructor() public {
        adminList.push(msg.sender);

        initSuperior = address(this);
        initCode = getNewCode(initSuperior);

        /* init data */
        codeList[initCode] = initSuperior;
        userList[initSuperior] = initCode;
    }

    /* admin */
    // set admin list
    function setAdminList(address[] memory _list) public nonReentrant onlyOwner {
        require(_list.length > 0, "NONEMPTY_ADDRESS_LIST");

        for (uint256 nIndex = 0; nIndex < _list.length; nIndex++) {
            require(_list[nIndex] != address(0), "ADMIN_NONEMPTY_ADDRESS");
        }
        adminList = _list;
    }

    // get admin list
    function getAdminList() public view returns (address[] memory) {
        return adminList;
    }

    function onlyAdminCheck(address _adminAddress) internal view returns (bool) {
        for (uint256 nIndex = 0; nIndex < adminList.length; nIndex++) {
            if (adminList[nIndex] == _adminAddress) {
                return true;
            }
        }
        return false;
    }

    modifier onlyAdmin() {
        require(onlyAdminCheck(msg.sender) == true, "ONLY_ADMIN_OPERATE");

        _;
    }

    /* invite */
    function getUserDirectSuperior(address _user) public view returns (address) {
        return directSuperior[_user];
    }

    function getUserByCode(string memory _code) public view returns (address) {
        return codeList[_code];
    }

    function getCodeByUser(address _user) public view returns (string memory) {
        return userList[_user];
    }

    function getUserBindAt(address _user) public view returns (uint256) {
        return userBindAtList[_user];
    }

    function getInitInfo() public view returns (address, string memory) {
        return (initSuperior, initCode);
    }

    function getSubordinateList(address _superior) public view returns (address[] memory) {
        return invitationList[_superior];
    }

    function getSubordinateAtList(address _superior) public view returns (uint256[] memory) {
        return invitationAtList[_superior];
    }

    function checkCodeIsExist(string memory _code) public view returns (bool) {
        address _user = getUserByCode(_code);
        if ( _user != address(0) ){
            return true;
        } else {
            return false;
        }
    }

    function checkUserBindStatus(address _user) public view returns (bool) {
        if ( directSuperior[_user] != address(0) ) {
            return true;
        } else {
            return false;
        }
    }

    function getUserSuperiorMulti(address _user, uint256 _amount) public view returns (address[] memory) {
        require(_user != address(0), "NONEMPTY_ADDRESS");
        require(_amount > 0, "AMOUNT_ERROR");

        address[] memory addressArr = new address[](_amount);
        
        address _userTmp = _user;
        for( uint256 _dd = 0; _dd < _amount; _dd++ ) {
            if ( _dd == 0 ) {
                addressArr[_dd] = _userTmp;
            } else {
                address _superior = getUserDirectSuperior(_userTmp);
                if ( _superior == address(0) ) {
                    break;
                } else {
                    addressArr[_dd] = _superior;
                    _userTmp = _superior;
                }
            }
        }

        return addressArr;
    }

    function addressToString(address _userAddr) private pure returns(string memory){
        require(_userAddr != address(0), "NONEMPTY_ADDRESS");
        //Convert addr to bytes
        bytes20 value = bytes20(uint160(_userAddr));
        bytes memory strBytes = new bytes(42);
        //Encode hex prefix
        strBytes[0] = '0';
        strBytes[1] = 'x';
        //Encode bytes usig hex encoding
        for(uint i=0;i<20;i++){
            uint8 byteValue = uint8(value[i]);
            strBytes[2 + (i<<1)] = encode((byteValue >> 4) & 0x0f);
            strBytes[3 + (i<<1)] = encode(byteValue & 0x0f);
        }
        return string(strBytes);
    }

    function encode(uint8 num) private pure returns(byte){
        //0-9 -> 0-9
        if(num >= 0 && num <= 9){
            return byte(num + 48);
        }
        //10-15 -> a-f
        return byte(num + 87);
    }

    function getStrSlice(uint256 _begin, uint256 _end, string memory _str) private pure returns (string memory) {
        require((_end >= _begin) && (_begin > 0) && (_end > 0), "LENGTH_ERROR");

        bytes memory _tmpStr = bytes(_str);
        uint256 _strLen = _tmpStr.length;
        require((_strLen > 0) && (_strLen >= _end), "STRING_ERROR");

        uint256 _sliceLen = _end.sub(_begin).add(1);
        bytes memory _newStr = new bytes(_sliceLen);

        uint256 _tmpLen = _end.sub(_begin);
        for ( uint256 i = 0; i <= _tmpLen; i++ ) {
            uint256 _tmp = i.add(_begin).sub(1);
            _newStr[i] = _tmpStr[_tmp];
        }
        
        return string(_newStr);
    }

    function getNewCode(address _userAddr) public view returns (string memory) {
        uint256 _lenTotal = 42;
        string memory _userAddrStr = addressToString(_userAddr);

        string memory _newCode;
        for (uint256 _dd = initCodeLen; _dd <= 40; _dd++ ) {
            uint256 _start = _lenTotal.sub(_dd).add(1);
            _newCode = getStrSlice(_start, _lenTotal, _userAddrStr);

            if ( checkCodeIsExist(_newCode) == false ) {
                break;
            }
        }
        return _newCode;
    }

    event RebindUser(address[] _userList, address[] _superiorList, string[] _newCodeList, uint256 _at);
    event BindCodeV2(address _user, string _userCode, address _superior, string _superiorCode, uint256 _at);

    function rebindUser(address[] memory _userList, address[] memory _superiorList) public nonReentrant onlyAdmin {
        require(_userList.length > 0, "NONEMPTY_USER_ADDRESS_LIST");
        require(_userList.length == _superiorList.length, "INCONSISTENT_LENGTH");

        string[] memory _newCodeList = new string[](_userList.length); 

        for( uint256 _dd = 0; _dd < _userList.length; _dd++ ){
            address _user = _userList[_dd];

            // get superior
            address _superior = _superiorList[_dd];

            require( (_user != address(0)) && (_superior != address(0)) , "NONEMPTY_USER_ADDRESS");
            require(checkUserBindStatus(_user) == false, "USER_ALREADY_BIND");

            // get new code
            string memory _newCode = getNewCode(_user);

            // update superior invitation list
            invitationList[_superior].push(_user);
            invitationAtList[_superior].push(block.timestamp);

            // update direct superior
            directSuperior[_user] = _superior;

            // set code
            codeList[_newCode] = _user;

            // set user
            userList[_user] = _newCode;

            // set user bind at
            userBindAtList[_user] = block.timestamp;

            _newCodeList[_dd] = _newCode;
        }

        emit RebindUser(_userList, _superiorList, _newCodeList, block.timestamp);
    }

    function bindCode(string memory _code) public nonReentrant returns (string memory) {
        require(checkCodeIsExist(_code), "CODE_ERROR");
        require(checkUserBindStatus(msg.sender) == false, "USER_ALREADY_BIND");

        // get superior
        address _superior = getUserByCode(_code);

        // get new code
        string memory _newCode = getNewCode(msg.sender);

        // update superior invitation list
        invitationList[_superior].push(msg.sender);
        invitationAtList[_superior].push(block.timestamp);

        // update direct superior
        directSuperior[msg.sender] = _superior;

        // set code
        codeList[_newCode] = msg.sender;

        // set user
        userList[msg.sender] = _newCode;

        // set user bind at
        userBindAtList[msg.sender] = block.timestamp;

        emit BindCodeV2(msg.sender, _newCode, _superior, _code, block.timestamp);

        return _newCode;
    }

}