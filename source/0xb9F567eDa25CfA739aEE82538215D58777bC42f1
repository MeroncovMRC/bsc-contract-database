
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../utils/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: @openzeppelin/contracts/math/Math.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}


// File: @openzeppelin/contracts/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "./IERC20.sol";
import "../../math/SafeMath.sol";
import "../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: contracts/asdic/interfaces/IASDICCard.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.7.6;

interface IASDICCard {
     function mint(address to, uint16 cardType) external returns (uint256);

     function batchByAmountMint(
        address to,
        uint16 _type,
        uint256 _num
    ) external returns (uint256[] memory);

     function safeBatchTransferFrom(address from, address to,
        uint256[] memory tokenIds) external;

        function _cardType(uint256 tokenId) external view returns(uint16);
}

// File: contracts/asdic/interfaces/IERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0;


 

interface IERC165 {
    /// @notice Query if a contract implements an interface
    /// @param interfaceID The interface identifier, as specified in ERC-165
    /// @dev Interface identification is specified in ERC-165. This function
    ///  uses less than 30,000 gas.
    /// @return `true` if the contract implements `interfaceID` and
    ///  `interfaceID` is not 0xffffffff, `false` otherwise
    function supportsInterface(bytes4 interfaceID) external view returns(bool);
}




/// @title ERC-721 Non-Fungible Token Standard
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.
interface IERC721 /* is ERC165 */ {
    /// @dev This emits when ownership of any NFT changes by any mechanism.
    ///  This event emits when NFTs are created (`from` == 0) and destroyed
    ///  (`to` == 0). Exception: during contract creation, any number of NFTs
    ///  may be created and assigned without emitting Transfer. At the time of
    ///  any transfer, the approved address for that NFT (if any) is reset to none.
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);

    /// @dev This emits when the approved address for an NFT is changed or
    ///  reaffirmed. The zero address indicates there is no approved address.
    ///  When a Transfer event emits, this also indicates that the approved
    ///  address for that NFT (if any) is reset to none.
    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);

    /// @dev This emits when an operator is enabled or disabled for an owner.
    ///  The operator can manage all NFTs of the owner.
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

    /// @notice Count all NFTs assigned to an owner
    /// @dev NFTs assigned to the zero address are considered invalid, and this
    ///  function throws for queries about the zero address.
    /// @param _owner An address for whom to query the balance
    /// @return The number of NFTs owned by `_owner`, possibly zero
    function balanceOf(address _owner) external view returns(uint256);

    /// @notice Find the owner of an NFT
    /// @dev NFTs assigned to zero address are considered invalid, and queries
    ///  about them do throw.
    /// @param _tokenId The identifier for an NFT
    /// @return The address of the owner of the NFT
    function ownerOf(uint256 _tokenId) external view returns(address);

    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function
    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls
    ///  `onERC721Received` on `_to` and throws if the return value is not
    ///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    /// @param data Additional data with no specified format, sent in call to `_to`
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;

    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev This works identically to the other function with an extra data parameter,
    ///  except this function just sets data to "".
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;

    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
    ///  THEY MAY BE PERMANENTLY LOST
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_tokenId` is not a valid NFT.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;

    /// @notice Change or reaffirm the approved address for an NFT
    /// @dev The zero address indicates there is no approved address.
    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized
    ///  operator of the current owner.
    /// @param _approved The new approved NFT controller
    /// @param _tokenId The NFT to approve
    function approve(address _approved, uint256 _tokenId) external payable;

    /// @notice Enable or disable approval for a third party ("operator") to manage
    ///  all of `msg.sender`'s assets
    /// @dev Emits the ApprovalForAll event. The contract MUST allow
    ///  multiple operators per owner.
    /// @param _operator Address to add to the set of authorized operators
    /// @param _approved True if the operator is approved, false to revoke approval
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice Get the approved address for a single NFT
    /// @dev Throws if `_tokenId` is not a valid NFT.
    /// @param _tokenId The NFT to find the approved address for
    /// @return The approved address for this NFT, or the zero address if there is none
    function getApproved(uint256 _tokenId) external view returns(address);

    /// @notice Query if an address is an authorized operator for another address
    /// @param _owner The address that owns the NFTs
    /// @param _operator The address that acts on behalf of the owner
    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise
    function isApprovedForAll(address _owner, address _operator) external view returns(bool);
}



/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.
interface IERC721Metadata /* is ERC721 */ {
    /// @notice A descriptive name for a collection of NFTs in this contract
    function name() external view returns (string memory);

    /// @notice An abbreviated name for NFTs in this contract
    function symbol() external view returns (string memory);

    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
    ///  3986. The URI may point to a JSON file that conforms to the "ERC721
    ///  Metadata JSON Schema".
    /// {"name":"","description":"","image":""}
    function tokenURI(uint256 _tokenId) external view returns (string memory);
}


/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.
interface IERC721TokenReceiver {
    /// @notice Handle the receipt of an NFT
    /// @dev The ERC721 smart contract calls this function on the recipient
    ///  after a `transfer`. This function MAY throw to revert and reject the
    ///  transfer. Return of other than the magic value MUST result in the
    ///  transaction being reverted.
    ///  Note: the contract address is always the message sender.
    /// @param _operator The address which called `safeTransferFrom` function
    /// @param _from The address which previously owned the token
    /// @param _tokenId The NFT identifier which is being transferred
    /// @param _data Additional data with no specified format
    /// @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
    ///  unless throwing
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);
}


interface IERC721TokenReceiverEx is IERC721TokenReceiver {
    // bytes4(keccak256("onERC721ExReceived(address,address,uint256[],bytes)")) = 0x0f7b88e3
    function onERC721ExReceived(address operator, address from,
        uint256[] memory tokenIds, bytes memory data)
    external returns(bytes4);
}


// File: contracts/asdic/interfaces/IOLDPool.sol
// SPDX-License-Identifier: MIT

pragma abicoder v2;

pragma solidity >=0.7.0;


interface IOLDPool {

    struct UserInfo {
        address referrer;
        address node;
        uint256 power;
        bool isNode;
    }

    function userInfos(address account) external view returns(UserInfo memory);

    function getSuperior(address account) external view returns (address);

     function balanceOf(address account) external view returns (uint256);

     function nftOwner(address account) external view returns(uint256);
}

// File: contracts/asdic/shop/CardShop.sol
// SPDX-License-Identifier: MIT

pragma abicoder v2;

pragma solidity >=0.7.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/math/Math.sol";
import "../../interfaces/IEMERouter.sol";
import "../interfaces/IASDICCard.sol";
import "../interfaces/IOLDPool.sol";
import "../../user/User.sol";
import "../interfaces/IERC721.sol";

contract CardShop is Ownable, User {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    IERC20 public token;
    IERC20 public usdt;
    IERC20 public mos;
    IASDICCard public card;
    IOLDPool public nftPool;
    IOLDPool public mosPool;
    IERC721 public oldCard;
    IEMERouter public emeSwapV2Router;

    uint256 public startDas;
    uint256 public startTime;
    address public walletAddr;
    address public mosAddr;

    mapping(address => uint256) public userStar;
    mapping(uint256 => uint256) public cardShopAmount;
    mapping(address => uint256) public powerBalanceOf;
    mapping(address => uint256) public totalDiscount;
    mapping(address => uint256) public useDiscount;
    mapping(address => uint256) public cardBalance;
    mapping(address => uint256) public lpBalanceOf;
    mapping(address => uint256) public lpTotalDiscount;
    mapping(address => uint256) public lpUseDiscount;
    mapping(address => bool) public isSync;
    mapping(address => uint256) public buyStarCardNum;
    mapping(address => uint256) public inviteBuyStarNum;
    mapping(address => uint256) public userTotal;
    mapping(address => uint256) public userShopTime;
    mapping(address => uint256) public userMoonBuyCount;
    mapping(address => uint256) public userMoon;

    constructor(
        address _usdt,
        address _mos,
        address router,
        address _nftPool,
        address _mosPool,
        address _oldCard,
        address _card,
        address _walletAddr,
        address _mosAddr
    ) {
        usdt = IERC20(_usdt);
        mos = IERC20(_mos);
        emeSwapV2Router = IEMERouter(router);
        card = IASDICCard(_card);
        walletAddr = _walletAddr;
        nftPool = IOLDPool(_nftPool);
        mosPool = IOLDPool(_mosPool);
        oldCard = IERC721(_oldCard);
        mosAddr = _mosAddr;

        startTime = block.timestamp;
        startDas = startTime / 86400;

        cardShopAmount[1] = 600;
        cardShopAmount[2] = 3000;
        cardShopAmount[3] = 20000;
    }

    uint256 public _time;

    function addDays(uint256 num) public onlyOwner {
        _time = _time.add(num.mul(86400));
    }

    function setToken(address _token) external onlyOwner {
        token = IERC20(_token);
    }

    function setWalletAddr(address _walletAddr) external onlyOwner {
        walletAddr = _walletAddr;
    }

    function setMosAddr(address _mosAddr) external onlyOwner {
        mosAddr = _mosAddr;
    }

    function getPrice(uint256 price) public view returns (uint256, uint256) {
        if (block.timestamp.add(_time) < startTime) {
            return (price, 1);
        }
        uint256 dayNum = block.timestamp.add(_time).sub(startTime).div(86400);
        if (!isPrice) {
            dayNum = newDay;
        }
        return (price.add(dayNum.mul(price.mul(5).div(1000))), dayNum.add(1));
    }

    uint256 public newDay;
    bool public isPrice = true;

    function openPrice() external onlyOwner {
        if (!isPrice) return;
        isPrice = false;
        newDay = block.timestamp.add(_time).sub(startTime).div(86400);
    }

    function nftUserPower() internal {
        uint256 balance = powerBalanceOf[msg.sender];
        uint256 newPower = nftPool.userInfos(msg.sender).power;
        if (newPower <= balance) return;
        powerBalanceOf[msg.sender] = newPower;
        balance = powerBalanceOf[msg.sender];
        totalDiscount[msg.sender] = balance / (1000 * 10**18);
        uint256 remaining = balance.sub(
            totalDiscount[msg.sender].mul(1000 * 10**18)
        );
        newPower = newPower.add(remaining);

        totalDiscount[msg.sender] = totalDiscount[msg.sender].add(
            (newPower.sub(balance)) / (500 * 10**18)
        );
    }

    function mosUserLp() internal {
        uint256 balance = lpBalanceOf[msg.sender];
        uint256 newPower = mosPool.balanceOf(msg.sender);
        if (newPower <= balance) return;
        lpBalanceOf[msg.sender] = newPower;
        balance = lpBalanceOf[msg.sender];
        lpTotalDiscount[msg.sender] = balance / (400 * 10**18);
    }

    function getPoolCardNum(address account) internal view returns (uint256) {
        return nftPool.nftOwner(account) > 0 ? 1 : 0;
    }

    function nftCardNum() internal {
        uint256 oldCardNum = cardBalance[msg.sender];
        uint256 walletCardNum = oldCard.balanceOf(msg.sender);
        uint256 poolCardNum = getPoolCardNum(msg.sender);
        uint256 newCardNum = poolCardNum.add(walletCardNum);
        if (newCardNum <= oldCardNum) return;
        cardBalance[msg.sender] = newCardNum;
        oldCardNum = cardBalance[msg.sender];
        lpTotalDiscount[msg.sender] = lpTotalDiscount[msg.sender].add(
            oldCardNum
        );

        lpTotalDiscount[msg.sender] = lpTotalDiscount[msg.sender].add(
            newCardNum.sub(oldCardNum)
        );
    }

    function sync() external {
        if (isSync[msg.sender]) return;
        isSync[msg.sender] = true;
        nftUserPower();
        mosUserLp();
        nftCardNum();
    }

    mapping(address => uint256) userNft;

    function getNft(address account) public view returns (uint256) {
        if (cardShopAmount[1] <= 0) return 0;
        if (!isSync[account]) return 0;
        uint256 count;
        uint256 _count = userNft[account];

        uint256 balance = powerBalanceOf[account];
        if (balance >= 10000 * 10**18) {
            count = count + (balance / (10000 * 10**18));
        }
        uint256 newPower = nftPool.userInfos(account).power;
        if (newPower > balance) {
            uint256 userNewPower = newPower.sub(balance);
            if (userNewPower >= 5000 * 10**18) {
                count = count + (userNewPower / (5000 * 10**18));
            }
        }
        if(count <= _count) return 0;
        return count - _count;
    }

    function receiveNft() external {
        uint256 amount = getNft(msg.sender);
        if (amount <= 0) return;

        card.batchByAmountMint(msg.sender, 1, amount);
        cardShopAmount[1] = cardShopAmount[1].sub(1);
        userNft[msg.sender] = userNft[msg.sender].add(amount);
    }

    function isSunConverted(address account) public view returns (bool) {
        if (!isSync[account]) return false;
        uint256 balance = powerBalanceOf[account];
        uint256 newPower = nftPool.userInfos(msg.sender).power;
        uint256 totalCount;
        if (newPower < balance) {
            totalCount = totalDiscount[account];
        } else {
            totalCount = ((newPower.sub(balance)) / (500 * 10**18)).add(
                totalDiscount[account]
            );
        }

        return totalCount > useDiscount[account];
    }

    function isMoonConverted(address account) public view returns (bool) {
        if (!isSync[account]) return false;
        uint256 balance = lpBalanceOf[account];
        uint256 newPower = mosPool.balanceOf(msg.sender);
        uint256 totalCount;
        if (newPower < balance) {
            totalCount = lpTotalDiscount[account];
        } else {
            totalCount = ((newPower.sub(balance)) / (100 * 10**18)).add(
                lpTotalDiscount[account]
            );
        }
        uint256 walletCardNum = oldCard.balanceOf(msg.sender);
        uint256 poolCardNum = getPoolCardNum(msg.sender);
        uint256 newCardNum = poolCardNum.add(walletCardNum);
        totalCount = totalCount.add(newCardNum);

        return totalCount > lpUseDiscount[account];
    }

    function sunConvertedAmount(address account) public view returns (uint256) {
        if (!isSunConverted(account)) return 0;
        uint256 balance = powerBalanceOf[account];
        uint256 newPower = nftPool.userInfos(msg.sender).power;
        uint256 totalCount;
        if (newPower < balance) {
            totalCount = totalDiscount[account];
        } else {
            totalCount = ((newPower.sub(balance)) / (500 * 10**18)).add(
                totalDiscount[account]
            );
        }
        return totalCount.sub(useDiscount[account]);
    }

    function moonConvertedAmount(address account)
        public
        view
        returns (uint256)
    {
        if (!isMoonConverted(account)) return 0;

        uint256 walletCardNum = oldCard.balanceOf(msg.sender);
        uint256 poolCardNum = getPoolCardNum(msg.sender);
        uint256 newCardNum = poolCardNum.add(walletCardNum);

        uint256 balance = lpBalanceOf[account];
        uint256 newPower = mosPool.balanceOf(msg.sender);
        uint256 totalCount;
        if (newPower < balance) {
            totalCount = lpTotalDiscount[account];
        } else {
            totalCount = ((newPower.sub(balance)) / (100 * 10**18)).add(
                lpTotalDiscount[account]
            );
        }
        totalCount = totalCount.add(newCardNum);

        return totalCount.sub(lpUseDiscount[account]);
    }

    function sunConverted(
        address account,
        uint256 value,
        uint256 amount
    ) public view returns (uint256, uint256) {
        uint256 con = sunConvertedAmount(account);
        uint256 returnValue = amount.mul(value.mul(50).div(100));
        if (con >= amount) {
            con = amount;
        } else {
            uint256 _value = con.mul(value.mul(50).div(100));
            returnValue = _value.add(amount.sub(con).mul(value));
        }
        return (returnValue, con);
    }

    function moonConverted(
        address account,
        uint256 value,
        uint256 amount
    ) public view returns (uint256, uint256) {
        uint256 con = moonConvertedAmount(account);
        uint256 returnValue = amount.mul(value.mul(50).div(100));
        if (con >= amount) {
            con = amount;
        } else {
            uint256 _value = con.mul(value.mul(50).div(100));
            returnValue = _value.add(amount.sub(con).mul(value));
        }
        return (returnValue, con);
    }

    function swapUsdtForToken(address to, uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(usdt);
        path[1] = address(mos);

        IERC20(path[0]).approve(address(emeSwapV2Router), tokenAmount);

        emeSwapV2Router.swapExactTokensForTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
    }

    function sunShop(uint256 amount) external {
        require(amount > 0, "not amount");
        require(cardShopAmount[1] >= amount, "not shop amount");
        cardShopAmount[1] = cardShopAmount[1].sub(amount);
        uint256 sunPrice;
        (sunPrice, ) = getPrice(3000 * 10**18);
        if (isSunConverted(msg.sender)) {
            uint256 num;
            (sunPrice, num) = sunConverted(msg.sender, sunPrice, amount);
            useDiscount[msg.sender] = useDiscount[msg.sender].add(num);
        }
        userTotal[msg.sender] = userTotal[msg.sender].add(sunPrice);
        userShopTime[msg.sender] = block.timestamp;

        usdt.safeTransferFrom(
            msg.sender,
            walletAddr,
            sunPrice.mul(20).div(100)
        );
        usdt.safeTransferFrom(
            msg.sender,
            address(this),
            sunPrice.mul(80).div(100)
        );
        swapUsdtForToken(mosAddr, sunPrice.mul(80).div(100));

        card.batchByAmountMint(msg.sender, 1, amount);
    }

    function giveMoonCard() external {
        uint256 _count = isUserMoonCount(msg.sender);
        if (_count <= 0) return;
        card.batchByAmountMint(msg.sender, 2, _count);
        userMoon[msg.sender] = userMoon[msg.sender].add(_count);
    }

    function moonShop(uint256 amount) external {
        require(amount > 0, "not amount");
        require(cardShopAmount[2] >= amount, "not shop amount");
        cardShopAmount[2] = cardShopAmount[2].sub(amount);
        uint256 moonPrice;
        (moonPrice, ) = getPrice(800 * 10**18);
        if (isMoonConverted(msg.sender)) {
            uint256 num;
            (moonPrice, num) = moonConverted(msg.sender, moonPrice, amount);
            lpUseDiscount[msg.sender] = lpUseDiscount[msg.sender].add(num);
        }
        userTotal[msg.sender] = userTotal[msg.sender].add(moonPrice);
        userShopTime[msg.sender] = block.timestamp;

        usdt.safeTransferFrom(
            msg.sender,
            walletAddr,
            moonPrice.mul(20).div(100)
        );
        usdt.safeTransferFrom(
            msg.sender,
            address(this),
            moonPrice.mul(80).div(100)
        );
        swapUsdtForToken(mosAddr, moonPrice.mul(80).div(100));

        card.batchByAmountMint(msg.sender, 2, amount);

        userMoonBuyCount[msg.sender] = userMoonBuyCount[msg.sender].add(amount);
    }

    function isUserMoonCount(address account) public view returns (uint256) {
        uint256 buyCount = userMoonBuyCount[account];
        uint256 seCount = userMoon[account];
        if (seCount >= buyCount.div(5)) return 0;
        return buyCount.div(5).sub(seCount);
    }

    function starShop(uint256 amount) external {
        require(amount > 0, "not amount");
        address supe = getSuperior(msg.sender);
        require(supe != address(0), "not supe");
        require(cardShopAmount[3] > amount, "not shop amount");
        cardShopAmount[3] = cardShopAmount[3].sub(amount);
        require(buyStarCardNum[msg.sender] + amount <= 5, "not shop");
        buyStarCardNum[msg.sender] = buyStarCardNum[msg.sender] + amount;

        (uint256 starPrice, ) = getPrice(100 * 10**18);
        starPrice = starPrice.mul(amount);
        userTotal[msg.sender] = userTotal[msg.sender].add(starPrice);
        userShopTime[msg.sender] = block.timestamp;

        usdt.safeTransferFrom(
            msg.sender,
            walletAddr,
            starPrice.mul(20).div(100)
        );
        usdt.safeTransferFrom(
            msg.sender,
            address(this),
            starPrice.mul(80).div(100)
        );
        swapUsdtForToken(mosAddr, starPrice.mul(80).div(100));

        card.batchByAmountMint(msg.sender, 3, amount);

        if (
            supe != address(0) &&
            supe != address(this) &&
            buyStarCardNum[supe] > 0
        ) {
            inviteBuyStarNum[supe] = inviteBuyStarNum[supe].add(amount);
        }
    }

    function isUserStarCount(address account) public view returns (uint256) {
        uint256 buyCount = inviteBuyStarNum[account];
        uint256 seCount = userStar[account];
        if (seCount >= buyCount.div(5)) return 0;
        return buyCount.div(5).sub(seCount);
    }

    function giveStarCard() external {
        uint256 _count = isUserStarCount(msg.sender);
        if (_count <= 0 || cardShopAmount[3] < _count) return;
        card.batchByAmountMint(msg.sender, 3, _count);
        userStar[msg.sender] = userStar[msg.sender].add(_count);
        cardShopAmount[3] = cardShopAmount[3].sub(_count);
    }

    function getInviteInfo(address account, uint256 page)
        public
        view
        returns (UserInfo[] memory)
    {
        uint256 size = 20;
        UserInfo[] memory info = new UserInfo[](size);
        if (page > 0) {
            uint256 startIndex = (page - 1) * size;
            address[] memory list = getDowns(account);
            uint256 length = list.length;
            for (uint256 i = 0; i < size; i++) {
                if (startIndex + i >= length) {
                    break;
                }
                info[i].account = list[startIndex + i];
                info[i].amount = userTotal[info[i].account];
                info[i].createTime = userShopTime[info[i].account];
            }
        }
        return info;
    }
}


// File: contracts/interfaces/IEMERouter.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.7.6;

interface IEMERouter {
    function factory() external view returns (address);
    function WETH() external view returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/user/User.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0;

contract User {

    struct UserInfo {
        address account;
        uint256 amount;
        uint256 createTime;
    }

    mapping(address => address) public superior;
    mapping(address => address[]) public downs;

    event BindSuperior(address account, address superior);
    event UpgradeNode(address account);
    event AbandonNode(address account);

    constructor() {
        superior[msg.sender] = address(this);
    }

    function setSuperior(address _referrer) external {
        require(
           superior[_referrer] != address(0),
            "INVALID_SUPERIOR_ADDRESS"
        );
        require(superior[msg.sender] == address(0), "referrer has been bound");
        superior[msg.sender] = _referrer;
        downs[_referrer].push(msg.sender);
        emit BindSuperior(msg.sender, _referrer);
    }

    function getDownCount(address account) public view returns(uint256) {
        return downs[account].length;
    }

    function getSuperior(address account) public view returns(address) {
        return superior[account];
    }

    function getDowns(address account) public view returns(address[] memory) {
        return downs[account];
    }
}

