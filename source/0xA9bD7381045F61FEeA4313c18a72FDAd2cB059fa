// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor(address theOwner) internal {
        _owner = theOwner;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() external view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() external virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) external virtual onlyOwner {
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

abstract contract PubSale is Ownable {
    using SafeMath for uint256;

    event SetupSale(
        uint256 beginTime,
        uint256 endTime,
        uint256 cap,
        uint256 rate
    );
    event StopSale(uint256 remain);
    event BuyToken(address buyer, uint256 amount);

    struct SaleState {
        address payee;
        uint256 rate; // token/bnb
        uint256 cap;
        uint256 lockDuration;
        uint256 beginTime;
        uint256 endTime;
        uint256 totalSold;
        uint256 remain;
    }

    SaleState private _saleState;

    function getSaleState() external view returns (SaleState memory) {
        return _saleState;
    }

    constructor(address aOwner) internal Ownable(aOwner) {}

    function setupPubSale(
        address payee,
        uint256 rate,
        uint256 cap,
        uint256 lockDuration,
        uint256 beginTime,
        uint256 endTime
    ) external onlyOwner {
        require(
            block.timestamp < beginTime && beginTime < endTime,
            "Invalid time"
        );
        require(payee != address(0), "Payee is zero");
        require(rate > 0, "Rate is zero");
        require(
            _saleState.beginTime == 0 || block.timestamp < _saleState.beginTime,
            "Setup is not allowed anymore"
        );
        _saleState.payee = payee;
        _saleState.rate = rate;
        _saleState.cap = cap;
        _saleState.lockDuration = lockDuration;
        _saleState.beginTime = beginTime;
        _saleState.endTime = endTime;
        _saleState.remain = cap;
        emit SetupSale(beginTime, endTime, cap, rate);
    }

    function buyToken() external payable {
        require(
            block.timestamp >= _saleState.beginTime &&
                block.timestamp < _saleState.endTime,
            "Not the right time"
        );
        require(_saleState.remain > 0, "No more token");
        require(msg.value > 0, "Value is 0");
        uint256 amount = msg.value.mul(_saleState.rate);
        uint256 refund = 0;
        if (amount > _saleState.remain) {
            amount = _saleState.remain;
            refund = msg.value.sub(amount.div(_saleState.rate));
            if (refund == msg.value) {
                refund = refund.sub(1);
            }
        }
        _saleState.totalSold = _saleState.totalSold.add(amount);
        _saleState.remain = _saleState.remain.sub(amount);
        payable(_saleState.payee).transfer(msg.value.sub(refund));
        doSale(msg.sender, amount, _saleState.lockDuration);
        if (refund > 0) {
            msg.sender.transfer(refund);
        }
        emit BuyToken(msg.sender, amount);
    }

    function stopSale() external onlyOwner {
        require(_saleState.remain > 0, "Invalid state");
        emit StopSale(_saleState.remain);
        doStopSale(_saleState.remain);
        _saleState.remain = 0;
    }

    function doSale(
        address buyer,
        uint256 amount,
        uint256 duration
    ) internal virtual;

    function doStopSale(uint256 remain) internal virtual;
}

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract Token is IERC20, PubSale {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    struct SwapPair {
        uint256 buyBurnLimit; // burn on buy or removeLiquidity from swap when pair balance exceed limit, 0 means not set
        uint256 buyBurnPercent; // burn percent
        uint256 sellBurnLimit; // burn on sell or addLiquidity to swap when pair balance exceed limit, 0 means not set
        uint256 sellBurnPercent; // burn percent
    }
    // burn on swap pairs
    mapping(address => SwapPair) private _pairs;

    struct LockInfo {
        uint256 amount;
        uint256 duration;
        uint256 deadline;
    }
    mapping(address => LockInfo) private _locks;

    struct BalanceDetail {
        uint256 balance;
        uint256 available;
        uint256 lockAmount;
        uint256 lockDuration;
        uint256 lockDeadline;
    }

    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(
        address aOwner,
        address aSeed,
        address aDex
    ) public PubSale(aOwner) {
        _name = "Magic Shouler";
        _symbol = "MGS";
        _decimals = 18;

        _totalSupply = 18e7 * 1e18;
        _addInitSupply(aOwner, 12e7 * 1e18);
        _addInitSupply(aOwner, 35e6 * 1e18);
        _addInitSupply(aSeed, 5e6 * 1e18);
        _addInitSupply(address(this), 1e7 * 1e18);
        _addInitSupply(aDex, 1e7 * 1e18);
    }

    function _addInitSupply(address addr, uint256 amount) internal {
        _balances[addr] = _balances[addr].add(amount);
        emit Transfer(address(0), addr, amount);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        external
        virtual
        override
        returns (bool)
    {
        // burn on buy or removeLiquidity from swap
        uint256 buyBurnLimit = _pairs[msg.sender].buyBurnLimit;
        bool triggerBuyBurn =
            buyBurnLimit > 0 && _balances[msg.sender] > buyBurnLimit;

        _transfer(msg.sender, recipient, amount);
        uint256 buyBurnPercent = _pairs[msg.sender].buyBurnPercent;
        if (triggerBuyBurn && buyBurnPercent > 0) {
            _burn(recipient, amount.mul(buyBurnPercent).div(100));
        }
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount)
        external
        virtual
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        // burn on sell or addLiquidity to swap
        uint256 sellBurnLimit = _pairs[recipient].sellBurnLimit;
        uint256 sellBurnPercent = _pairs[recipient].sellBurnPercent;
        if (
            sellBurnLimit > 0 &&
            sellBurnPercent > 0 &&
            _balances[recipient] > sellBurnLimit
        ) {
            _burn(recipient, amount.mul(sellBurnPercent).div(100));
        }
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        external
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        external
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);
        uint256 remain =
            _balances[sender].sub(
                amount,
                "ERC20: transfer amount exceeds balance"
            );
        _balances[sender] = remain;
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address, /*to*/
        uint256 amount
    ) internal view virtual {
        require(
            availableBalance(from) >= amount,
            "Insufficient available balance"
        );
    }

    // ==================== Burnable ====================

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) external virtual {
        _burn(msg.sender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) external virtual {
        uint256 decreasedAllowance =
            allowance(account, msg.sender).sub(
                amount,
                "ERC20: burn amount exceeds allowance"
            );

        _approve(account, msg.sender, decreasedAllowance);
        _burn(account, amount);
    }

    // ==================== Burn on swap ====================
    function getSwapPair(address pair) public view returns (SwapPair memory) {
        return _pairs[pair];
    }

    function setSwapPair(
        address pair,
        uint256 buyBurnLimit,
        uint256 buyBurnPercent,
        uint256 sellBurnLimit,
        uint256 sellBurnPercent
    ) external onlyOwner {
        require(
            buyBurnPercent <= 100 && sellBurnPercent <= 100,
            "Invalid percent number"
        );
        _pairs[pair] = SwapPair({
            buyBurnLimit: buyBurnLimit,
            buyBurnPercent: buyBurnPercent,
            sellBurnLimit: sellBurnLimit,
            sellBurnPercent: sellBurnPercent
        });
    }

    // ==================== Locking ====================
    function lockedBalance(address account) public view returns (uint256) {
        LockInfo memory li = _locks[account];
        if (li.amount > 0 && block.timestamp < li.deadline) {
            return
                li.amount.mul(li.deadline.sub(block.timestamp)).div(
                    li.duration
                );
        } else {
            return 0;
        }
    }

    function availableBalance(address account) public view returns (uint256) {
        return _balances[account].sub(lockedBalance(account));
    }

    function getBalanceDetail(address account)
        public
        view
        returns (BalanceDetail memory)
    {
        LockInfo memory li = _locks[account];
        return
            BalanceDetail({
                balance: _balances[account],
                available: availableBalance(account),
                lockAmount: li.amount,
                lockDuration: li.duration,
                lockDeadline: li.deadline
            });
    }

    function _addLock(
        address account,
        uint256 amount,
        uint256 duration
    ) internal {
        uint256 deadline = block.timestamp.add(duration);
        uint256 preLocked = lockedBalance(account);
        if (preLocked > 0) {
            require(
                _locks[account].deadline <= deadline,
                "New lock has earlier end-time than previous one"
            );
        }
        amount = amount.add(preLocked);
        require(
            _balances[account] >= amount,
            "Balance is not enough for locking"
        );
        _locks[account] = LockInfo(amount, duration, deadline);
    }

    /**
     * @dev Lock `amount` tokens in the account, unlock will happen linearly in every second.
     * If there is token still in locking-state, those token will be relocked with new duration too.
     * The new lock-deadline time must not be earlier than the previous lock.
     */
    function linearLock(uint256 amount, uint256 duration) external {
        _addLock(msg.sender, amount, duration);
    }

    // ==================== PubSale ====================
    function doSale(
        address buyer,
        uint256 amount,
        uint256 duration
    ) internal override {
        this.transfer(buyer, amount);
        _addLock(buyer, amount.mul(75).div(100), duration);
    }

    function doStopSale(uint256 remain) internal override {
        this.burn(remain);
    }

    // ==================== Util ====================

    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}