// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

// File: @openzeppelin/contracts/utils/Context.sol

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin/contracts/math/SafeMath.sol

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

// File: contracts/interface/IRegistry.sol

interface IRegistry {

    // base and research
    function base() external view returns (address);
    function research() external view returns (address);

    // fleets and ships
    function account() external view returns (address);
    function fleets() external view returns (address);
    function explore() external view returns (address);
    function battle() external view returns (address);
    function ship() external view returns (address);
    function hero() external view returns (address);

    // staking and burning
    function staking() external view returns (address);
    function burning() external view returns (address);
    function uniswapV2Router() external view returns (address);
    function stableToken() external view returns (address);
    function treasury() external view returns (address);

    // fleets config and ships config
    function shipConfig() external view returns (address);
    function heroConfig() external view returns (address);
    function fleetsConfig() external view returns (address);
    function exploreConfig() external view returns (address);
    function battleConfig() external view returns (address);
    function shipAttrConfig() external view returns (address);
    function heroAttrConfig() external view returns (address);

    // base config and research config
    function baseConfig() external view returns (address);
    function researchConfig() external view returns (address);
    function miningConfig() external view returns (address);
    function claimConfig() external view returns (address);

    // tokens
    function tokenIron() external view returns (address);
    function tokenGold() external view returns (address);
    function tokenEnergy() external view returns (address);
    function tokenSilicate() external view returns (address);
    function tokenLightCoin() external view returns (address);

    // access
    function canMintCommodity(address) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: contracts/interface/ICommodityERC20.sol

interface ICommodityERC20 is IERC20 {
    function mintByInternalContracts(address who_, uint256 amount_) external;
    function burn(uint256 amount_) external;
}

// File: contracts/interface/ILightCoin.sol

interface ILightCoin is IERC20 {
    function burn(uint256 amount_) external;
}

// File: contracts/interface/IMiningConfig.sol

interface IMiningConfig {
    function getMultiplier(address who_, uint256 index_) external view returns(uint256);
}

// File: contracts/SoftStakingV1.sol

contract SoftStakingV1 is Ownable {

    using SafeMath for uint256;

    uint256 constant UNIT_PER_SHARE = 1e18;
    uint256 constant MULTIPLIER_BASE = 8e10;

    IRegistry public registry;

    uint256 public delay = 24 hours;
    uint256 public rewardPerSecond = 57e9;

    struct Info {
        uint256 balance;
        uint256 time;
        uint256 unclaimed;
    }

    mapping(address => Info) public infoMap;

    constructor (IRegistry registry_) public {
        registry = registry_;
    }

    function setDelay(uint256 delay_) external onlyOwner {
        delay = delay_;
    }

    function setRewardPerSecond(uint256 value_) external onlyOwner {
        rewardPerSecond = value_;
    }

    function getMultiplier(
        address who_
    ) public view returns (uint256) {
        return IMiningConfig(registry.miningConfig()).getMultiplier(who_, 3);
    }

    function _update(address who_) private {
        Info storage info = infoMap[who_];

        if (info.time > 0) {
            info.unclaimed = info.unclaimed.add(
                now.sub(info.time).mul(rewardPerSecond).mul(
                    info.balance).mul(getMultiplier(who_)).div(
                        UNIT_PER_SHARE).div(MULTIPLIER_BASE));
        }

        info.time = now;
    }

    function deposit(uint256 amount_) external {
        Info storage info = infoMap[_msgSender()];

        //update unclaimed amount
        _update(_msgSender());

        ILightCoin(registry.tokenLightCoin()).transferFrom(
            _msgSender(), address(this), amount_);
        info.balance = info.balance.add(amount_);
    }

    function withdraw(uint256 amount_) external {
        Info storage info = infoMap[_msgSender()];

        require(now > info.time + delay, "Wait");
        require(amount_ <= info.balance, "Not enough balance");

        //update unclaimed amount
        _update(_msgSender());

        ILightCoin(registry.tokenLightCoin()).transfer(
            _msgSender(), amount_);
        info.balance = info.balance.sub(amount_);
    }

    function snatch(address from_, address to_, uint256 amount_, uint256 fee_) external {
        require(_msgSender() == registry.fleets() ||
                _msgSender() == registry.battle() ||
                _msgSender() == registry.explore(), "Only call from authorized contracts");
        _update(from_);
        _update(to_);

        infoMap[from_].balance = infoMap[from_].balance.sub(amount_).sub(fee_);
        infoMap[to_].balance = infoMap[to_].balance.add(amount_);
        ILightCoin(registry.tokenLightCoin()).burn(fee_);
    }

    function claim() external {
        Info storage info = infoMap[_msgSender()];

        //update unclaimed amount
        _update(_msgSender());

        ICommodityERC20(registry.tokenEnergy()).mintByInternalContracts(
            _msgSender(), info.unclaimed);
        info.unclaimed = 0;
    }

    function expectedAmount() external view returns (uint256){
        return expectedAmountOfUser(_msgSender());
    }

    function expectedAmountOfUser(address who_) public view returns (uint256){
        Info storage info = infoMap[who_];

        return info.unclaimed.add(
            now.sub(info.time).mul(rewardPerSecond).mul(
                info.balance).mul(getMultiplier(who_)).div(
                    UNIT_PER_SHARE).div(MULTIPLIER_BASE));
    }
}