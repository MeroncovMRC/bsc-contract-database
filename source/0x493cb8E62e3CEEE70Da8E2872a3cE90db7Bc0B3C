// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

library Address {

    function isContract(address addr) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(addr) }
        return size > 0;
    }
}

library StorageSlot {
    
    struct AddressSlot {
        address value;
    }
    
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        assembly {
            r.slot := slot
        }
    }
}

struct User {
    bool isExists;
    uint timestamp;
    address referral;
    uint256 totalInvest;
    uint256 totalIncome;
}

struct Packages {
    uint256 invest;
    uint256 referralIncome;
    uint256 referral2Income;
    uint256 levelIncome;
    uint256 extraBonus;
    uint256 nonWorkingIncome;
    uint256 nonLimit;
    uint256 limit;
}

struct Plan {
    uint256 invest;
    uint256[] referralDistribution;
    uint256[] levelDistribution;
    uint256 extraBonus;
    uint256 nonWorkingDistribution;
    uint256 nonLimit;
    uint256 limit;
}

abstract contract DollarMineProxy {

    event Upgraded(address indexed implementation);
    event AdminChanged(address previousAdmin, address newAdmin);

    constructor(address newImplementation) payable {
        _setAdmin(msg.sender);
        _upgradeTo(newImplementation);
    }

    function _delegate(address implementation) internal {
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())

            switch result
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

    function _fallback() internal {
        _delegate(_implementation());
    }

    fallback() external payable {
        _fallback();
    }

    receive() external payable {
        _fallback();
    }

    function _implementation() internal view returns (address) {
        return StorageSlot.getAddressSlot(bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1)).value;
    }

    function _upgradeTo(address newImplementation) internal {
        require(Address.isContract(newImplementation), "ERC1967Proxy: new implementation is not a contract!");
        StorageSlot.getAddressSlot(bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1)).value = newImplementation;
        emit Upgraded(newImplementation);
    }

    function _getAdmin() internal view returns (address) {
        return StorageSlot.getAddressSlot(bytes32(uint256(keccak256("eip1967.owner")) -1)).value;
    }

    function _setAdmin(address newAdmin) internal {
        StorageSlot.getAddressSlot(bytes32(uint256(keccak256("eip1967.owner")) -1)).value = newAdmin;
    }

    function _changeAdmin(address newAdmin) internal {
        require(newAdmin != address(0), "ERC1967: new admin is the zero address!");
        address oldAdmin = _getAdmin();
        _setAdmin(newAdmin);
        emit AdminChanged(oldAdmin, newAdmin);
    }
    
    function _checkAdmin() internal view {
        require(_getAdmin() == msg.sender, "ERC1967: caller is not the owner!");
    }

    modifier onlyAdmin() {
        _checkAdmin();
        _;
    }
}

contract DollarMine is DollarMineProxy {
    
    bool internal initialized;
    address internal USDT;
    address[] internal usersList;
    uint256 public totalUsers;
    uint256 public totalInvestment;
    mapping(address => User) public users;
    mapping(address => address[]) internal referTeam;
    mapping(address => Packages[10]) public packages;
    mapping(uint => Plan) internal plans;
    address[] internal receivers;
    uint256 internal maxUSDT = 1e22;

    constructor(address implementation_) payable DollarMineProxy(implementation_) {}

    function getAdmin() external view returns (address) {
        return _getAdmin();
    }

    function changeAdmin(address newAdmin) external onlyAdmin {
        _changeAdmin(newAdmin);
    }

    function getImplementation() external view returns (address) {
        return _implementation();
    }

    function upgradeTo(address newImplementation) external onlyAdmin {
        _upgradeTo(newImplementation);
    }

    function referList(address _user) external view returns (address[] memory) {
        return referTeam[_user];
    }

    function referCount(address _user) external view returns (uint256) {
        return _referCount(_user);
    }

    function _referCount(address _user) internal view returns (uint256) {
        return referTeam[_user].length;
    }

    function _referCount(address _user, uint _plan) internal view returns (uint256) {
        uint256 count_ = 0;
        for (uint256 i = 0; i < referTeam[_user].length; i++){ 
            if (packages[referTeam[_user][i]][_plan].invest > 0) {
                count_++;
            }
        }
        return count_;
    }
}