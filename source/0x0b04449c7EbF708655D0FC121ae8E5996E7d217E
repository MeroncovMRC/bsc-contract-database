// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract BoyFriend is IBEP20 {
    string public constant name = "BoyFriend";
    string public constant symbol = "BF";
    uint8 public constant decimals = 18;
    uint256 private constant _maxSupply = 6969696969000000000000000000; // 6,969,696,969 tokens with 18 decimal places
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    address private _marketingWallet;
    bool private _isContractRenounced;

    modifier onlyOwner() {
        require(msg.sender == _marketingWallet, "Only the owner can call this function.");
        _;
    }

    constructor(address marketingWallet) {
        _marketingWallet = marketingWallet;
        _totalSupply = _maxSupply;
        _balances[_marketingWallet] = _totalSupply;
        emit Transfer(address(0), _marketingWallet, _totalSupply);
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function renounceContract() external onlyOwner {
        require(!_isContractRenounced, "Contract already renounced.");
        _isContractRenounced = true;
        emit Transfer(_marketingWallet, address(0), _balances[_marketingWallet]);
        _balances[_marketingWallet] = 0;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address is not allowed.");
        require(recipient != address(0), "Transfer to the zero address is not allowed.");
        require(amount > 0, "Transfer amount must be greater than zero.");
        require(_balances[sender] >= amount, "Insufficient balance.");

        uint256 taxAmount = amount * 35 / 1000; // 3.5% tax fee
        uint256 transferAmount = amount - taxAmount;

        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;

        // Deduct the tax from the sender and add it to the marketing wallet
        _balances[_marketingWallet] += taxAmount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, _marketingWallet, taxAmount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address is not allowed.");
        require(spender != address(0), "Approve to the zero address is not allowed.");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}