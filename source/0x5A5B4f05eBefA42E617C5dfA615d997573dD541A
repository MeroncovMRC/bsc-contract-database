
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC1155.sol";
import "./IERC1155Receiver.sol";
import "./extensions/IERC1155MetadataURI.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of the basic standard multi-token.
 * See https://eips.ethereum.org/EIPS/eip-1155
 * Originally based on code by Enjin: https://github.com/enjin/erc-1155
 *
 * _Available since v3.1._
 */
contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
    using Address for address;

    // Mapping from token ID to account balances
    mapping(uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {_setURI}.
     */
    constructor(string memory uri_) {
        _setURI(uri_);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC1155).interfaceId ||
            interfaceId == type(IERC1155MetadataURI).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC1155MetadataURI-uri}.
     *
     * This implementation returns the same URI for *all* token types. It relies
     * on the token type ID substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * Clients calling this function must replace the `\{id\}` substring with the
     * actual token type ID.
     */
    function uri(uint256) public view virtual override returns (string memory) {
        return _uri;
    }

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
        require(account != address(0), "ERC1155: balance query for the zero address");
        return _balances[id][account];
    }

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)
        public
        view
        virtual
        override
        returns (uint256[] memory)
    {
        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");

        uint256[] memory batchBalances = new uint256[](accounts.length);

        for (uint256 i = 0; i < accounts.length; ++i) {
            batchBalances[i] = balanceOf(accounts[i], ids[i]);
        }

        return batchBalances;
    }

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(_msgSender() != operator, "ERC1155: setting approval status for self");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC1155-isApprovedForAll}.
     */
    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[account][operator];
    }

    /**
     * @dev See {IERC1155-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not owner nor approved"
        );
        _safeTransferFrom(from, to, id, amount, data);
    }

    /**
     * @dev See {IERC1155-safeBatchTransferFrom}.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: transfer caller is not owner nor approved"
        );
        _safeBatchTransferFrom(from, to, ids, amounts, data);
    }

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);

        uint256 fromBalance = _balances[id][from];
        require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
        unchecked {
            _balances[id][from] = fromBalance - amount;
        }
        _balances[id][to] += amount;

        emit TransferSingle(operator, from, to, id, amount);

        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; ++i) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 fromBalance = _balances[id][from];
            require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
            unchecked {
                _balances[id][from] = fromBalance - amount;
            }
            _balances[id][to] += amount;
        }

        emit TransferBatch(operator, from, to, ids, amounts);

        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
    }

    /**
     * @dev Sets a new URI for all token types, by relying on the token type ID
     * substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * By this mechanism, any occurrence of the `\{id\}` substring in either the
     * URI or any of the amounts in the JSON file at said URI will be replaced by
     * clients with the token type ID.
     *
     * For example, the `https://token-cdn-domain/\{id\}.json` URI would be
     * interpreted by clients as
     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`
     * for token type ID 0x4cce0.
     *
     * See {uri}.
     *
     * Because these URIs cannot be meaningfully represented by the {URI} event,
     * this function emits no events.
     */
    function _setURI(string memory newuri) internal virtual {
        _uri = newuri;
    }

    /**
     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _mint(
        address account,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(account != address(0), "ERC1155: mint to the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);

        _balances[id][account] += amount;
        emit TransferSingle(operator, address(0), account, id, amount);

        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _mintBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: mint to the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; i++) {
            _balances[ids[i]][to] += amounts[i];
        }

        emit TransferBatch(operator, address(0), to, ids, amounts);

        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
    }

    /**
     * @dev Destroys `amount` tokens of token type `id` from `account`
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens of token type `id`.
     */
    function _burn(
        address account,
        uint256 id,
        uint256 amount
    ) internal virtual {
        require(account != address(0), "ERC1155: burn from the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");

        uint256 accountBalance = _balances[id][account];
        require(accountBalance >= amount, "ERC1155: burn amount exceeds balance");
        unchecked {
            _balances[id][account] = accountBalance - amount;
        }

        emit TransferSingle(operator, account, address(0), id, amount);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     */
    function _burnBatch(
        address account,
        uint256[] memory ids,
        uint256[] memory amounts
    ) internal virtual {
        require(account != address(0), "ERC1155: burn from the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");

        for (uint256 i = 0; i < ids.length; i++) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 accountBalance = _balances[id][account];
            require(accountBalance >= amount, "ERC1155: burn amount exceeds balance");
            unchecked {
                _balances[id][account] = accountBalance - amount;
            }
        }

        emit TransferBatch(operator, account, address(0), ids, amounts);
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning, as well as batched variants.
     *
     * The same hook is called on both single and batched variants. For single
     * transfers, the length of the `id` and `amount` arrays will be 1.
     *
     * Calling conditions (for each `id` and `amount` pair):
     *
     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * of token type `id` will be  transferred to `to`.
     * - When `from` is zero, `amount` tokens of token type `id` will be minted
     * for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
     * will be burned.
     * - `from` and `to` are never both zero.
     * - `ids` and `amounts` have the same, non-zero length.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {}

    function _doSafeTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
                if (response != IERC1155Receiver.onERC1155Received.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non ERC1155Receiver implementer");
            }
        }
    }

    function _doSafeBatchTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (
                bytes4 response
            ) {
                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non ERC1155Receiver implementer");
            }
        }
    }

    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
        uint256[] memory array = new uint256[](1);
        array[0] = element;

        return array;
    }
}


// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC1155 compliant contract, as defined in the
 * https://eips.ethereum.org/EIPS/eip-1155[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155 is IERC165 {
    /**
     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.
     */
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);

    /**
     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all
     * transfers.
     */
    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    /**
     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to
     * `approved`.
     */
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);

    /**
     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.
     *
     * If an {URI} event was emitted for `id`, the standard
     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value
     * returned by {IERC1155MetadataURI-uri}.
     */
    event URI(string value, uint256 indexed id);

    /**
     * @dev Returns the amount of tokens of token type `id` owned by `account`.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) external view returns (uint256);

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)
        external
        view
        returns (uint256[] memory);

    /**
     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,
     *
     * Emits an {ApprovalForAll} event.
     *
     * Requirements:
     *
     * - `operator` cannot be the caller.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address account, address operator) external view returns (bool);

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes calldata data
    ) external;

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev _Available since v3.1._
 */
interface IERC1155Receiver is IERC165 {
    /**
        @dev Handles the receipt of a single ERC1155 token type. This function is
        called at the end of a `safeTransferFrom` after the balance has been updated.
        To accept the transfer, this must return
        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
        (i.e. 0xf23a6e61, or its own function selector).
        @param operator The address which initiated the transfer (i.e. msg.sender)
        @param from The address which previously owned the token
        @param id The ID of the token being transferred
        @param value The amount of tokens being transferred
        @param data Additional data with no specified format
        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
    */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
        @dev Handles the receipt of a multiple ERC1155 token types. This function
        is called at the end of a `safeBatchTransferFrom` after the balances have
        been updated. To accept the transfer(s), this must return
        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
        (i.e. 0xbc197c81, or its own function selector).
        @param operator The address which initiated the batch transfer (i.e. msg.sender)
        @param from The address which previously owned the token
        @param ids An array containing ids of each token being transferred (order and length must match values array)
        @param values An array containing amounts of each token being transferred (order and length must match ids array)
        @param data Additional data with no specified format
        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
    */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC1155.sol";

/**
 * @dev Interface of the optional ERC1155MetadataExtension interface, as defined
 * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155MetadataURI is IERC1155 {
    /**
     * @dev Returns the URI for token type `id`.
     *
     * If the `\{id\}` substring is present in the URI, it must be replaced by
     * clients with the actual token type ID.
     */
    function uri(uint256 id) external view returns (string memory);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: project:/contracts/Auction.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./utils/Pausable.sol";
import "./Track.sol";
import "./Marketplace.sol";

/**
 * @title Auction contract
 * @author Thierry
 * @notice Auction contract use to bid on Pack NfTs
 */

contract Auction is Pausable {
  using SafeMath for uint256;
  uint256 public primaryRate;
  uint256 public secondaryRate;
  uint256 public bidIncrement;
  uint256 internal coeffScale;
  int256 public royalties;
  bool public ended;
  uint256 public highestBid;
  uint256 private reservePrice;
  uint256 public endAuctionTime;
  uint256 public id;
  uint256 public amount;
  uint256 public totalBid;
  uint256[] public beneficiaryRates;
  address public ownerNFT;
  address public highestBidder;
  address private treasury;
  address public addressTrack;
  uint256 public constant delay = 3 days;
  mapping(address => uint256) public timeBid;

  // Events that will be emitted on changes.
  event IncreaseHighestBid(address indexed _bidder, uint256 _amount);
  event EndedAuction(address indexed _winner, uint256 _amount);
  event ShareBid(uint256 _bid, address indexed _bidder);

  constructor(
    uint256 _id,
    uint256 _amount,
    uint256 _biddingTime,
    uint256 _initialBid,
    uint256 _reservePrice,
    address _ownerNFT,
    address _addressTrack,
    address _addressMarketplace
  ) {
    Marketplace _Marketplace = Marketplace(_addressMarketplace);
    treasury = _Marketplace.getTreasury();
    primaryRate = _Marketplace.getRate().primaryRate;
    secondaryRate = _Marketplace.getRate().secondaryRate;
    bidIncrement = _Marketplace.getBidIncrement();
    coeffScale = _Marketplace.getCoeffScale();
    ownerNFT = _ownerNFT;
    addressTrack = _addressTrack;
    id = _id;
    amount = _amount;
    endAuctionTime = block.timestamp + _biddingTime;
    highestBid = _initialBid;
    reservePrice = _reservePrice;
  }

  function getReservePrice() external view returns (uint256) {
    require(
      msg.sender == ownerNFT,
      "Atlanticus: caller is not the owner of the NFT"
    );
    return reservePrice;
  }

  function placeBid(uint256 _bid) external payable {
    require(
      (block.timestamp <= endAuctionTime) && (ended == false),
      "Atlanticus: auction already ended"
    );
    require(
      _bid >= ((bidIncrement.mul(highestBid)) / coeffScale + highestBid) ||
        (highestBidder == address(0) && _bid >= highestBid),
      "Atlanticus: there is already a higher bid"
    );
    require(msg.sender != ownerNFT, "Atlanticus: caller is the owner");
    require(
      msg.sender != address(this),
      "Atlanticus: caller is the auction contract"
    );
    require(msg.value == _bid, "Atlanticus: bid should equal msg.value");
    address _bidder = msg.sender;

    timeBid[msg.sender] = block.timestamp;
    totalBid = totalBid.add(1);

    if (highestBidder != address(0)) {
      bool sent = payable(highestBidder).send(highestBid);
      require(sent, "Failed to send highestBidder");
    }
    highestBidder = _bidder;
    highestBid = _bid;
    emit IncreaseHighestBid(highestBidder, highestBid);
  }

  function shareBid() internal returns (bool) {
    Track _Track = Track(addressTrack);
    address _treasury = treasury;
    address[] memory _beneficiaries = _Track.getPack(id - 1).beneficiaries;
    uint256[] memory _beneficiaryRates = _Track
      .getPack(id - 1)
      .beneficiaryRates;
    if (ownerNFT == _Track.getPack(id - 1).initialOwner) {
      uint256 _amountTreasury = (primaryRate.mul(highestBid)) / coeffScale;
      uint256 _amountBeneficiaries = (
        (coeffScale - primaryRate).mul(highestBid)
      ) / coeffScale;
      bool sent = payable(_treasury).send(_amountTreasury);
      require(sent, "Failed to send _treasury");
      for (uint256 i = 0; i < _beneficiaries.length; i++) {
        uint256 _amount = (_amountBeneficiaries.mul(_beneficiaryRates[i])) /
          coeffScale;
        sent = payable(_beneficiaries[i]).send(_amount);
        require(sent, "Failed to send _beneficiaries");
      }
    } else {
      uint256 _royalties = _Track.getPack(id - 1).royalties;
      uint256 _amountTreasury = (secondaryRate.mul(highestBid)) / coeffScale;
      uint256 _amountBeneficiaries = (_royalties.mul(highestBid)) / coeffScale;
      uint256 _amountOwner = highestBid.sub(
        (_amountTreasury.add(_amountBeneficiaries))
      );
      bool sent = payable(_treasury).send(_amountTreasury);
      require(sent, "Failed to send _treasury");
      sent = payable(ownerNFT).send(_amountOwner);
      require(sent, "Failed to send ownerNFT");

      for (uint256 i = 0; i < _beneficiaries.length; i++) {
        uint256 _amount = (_beneficiaryRates[i].mul(_amountBeneficiaries)) /
          coeffScale;
        sent = payable(_beneficiaries[i]).send(_amount);
        require(sent, "Failed to send ownerNFT");
      }
    }
    emit ShareBid(highestBid, highestBidder);
    return true;
  }

  function transferPack(
    uint256 _id,
    uint256 _amount,
    address _caller
  ) internal returns (bool) {
    Track _Track = Track(addressTrack);
    _Track.safeTransferFrom(ownerNFT, _caller, _id, _amount, " ");
    return (true);
  }

  function endAuction(bool _isAccepted) external {
    require(!ended, "Atlanticus: endAuction has already been called");
    require(
      (block.timestamp >= endAuctionTime),
      "Atlanticus: auction not yet ended."
    );
    if (highestBid >= reservePrice) {
      require(
        (msg.sender == highestBidder) || (msg.sender == ownerNFT),
        "Atlanticus: Auction has to be ended by highest bidder."
      );
      require(
        transferPack(id, amount, highestBidder) == true,
        "Atlanticus: pack transfer is failure"
      );
      require(shareBid() == true, "Atlanticus: share bid is failure");
      Track _Track = Track(addressTrack);
      _Track.setOnAuction(ownerNFT, id, amount);
    } else if (_isAccepted == true) {
      require(
        (msg.sender == ownerNFT),
        "Atlanticus: Auction has to be ended by owner."
      );
      require(
        transferPack(id, amount, highestBidder) == true,
        "Atlanticus: pack transfer is failure"
      );
      require(shareBid() == true, "Atlanticus: share bid is failure");
      Track _Track = Track(addressTrack);
      _Track.setOnAuction(ownerNFT, id, amount);
    } else {
      bool sent = payable(highestBidder).send(highestBid);
      require(sent, "Failed to send ownerNFT");
    }
    ended = true;
    emit EndedAuction(highestBidder, highestBid);
  }

  function cancelAuction() external {
    require(msg.sender == ownerNFT, "Atlanticus: caller is not the owner");
    require(
      highestBidder == address(0),
      "Atlanticus: not possible to cancel Auction, already have bids"
    );
    Track _Track = Track(addressTrack);
    _Track.setOnAuction(ownerNFT, id, amount);
    ended = true;
  }
}


// File: project:/contracts/Marketplace.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./utils/Pausable.sol";
import "./Track.sol";
import "./Whitelist.sol";

/**
 * @title Marketplace contract
 * @author Thierry
 * @notice Marketplace contract serves to purchase Pack NfTs
 */

contract Marketplace is Pausable {
  using SafeMath for uint256;
  struct Rate {
    uint256 primaryRate;
    uint256 secondaryRate;
  }
  Rate private rate = Rate(2000, 250);
  mapping(uint256 => Rate) private specialRate;
  uint256 internal coeffScale = 10000;
  uint256 bidIncrement = 500;
  address private treasury;
  address private operator;
  mapping(address => bool) private admins;
  string public ipfs;

  // Events emmited by the contract
  event SetAdmin(address indexed _admin, bool _state);
  event CheckAllowance(address indexed _owner, uint256 _price);
  event PayPack(uint256 _id, uint256 _price, address indexed _buyer);
  event PurchasePack(uint256 _id, address indexed _buyer);
  event SendFree(
    address indexed _sender,
    address indexed _receiver,
    uint256 _id,
    uint256 _amount
  );

  // @dev modifier to restrict function calls to administrators
  modifier onlyAdmin() {
    require(admins[msg.sender] == true, "Atlanticus: caller is not authorized");
    _;
  }

  modifier onlyOperator() {
    require(msg.sender == operator, "Atlanticus: caller is not authorized");
    _;
  }

  constructor(
    address _treasury,
    address _operator,
    string memory _ipfs
  ) {
    treasury = _treasury;
    operator = _operator;
    admins[msg.sender] = true;
    ipfs = _ipfs;
  }

  function setIpfs(string memory _ipfs) external onlyAdmin {
    ipfs = _ipfs;
  }

  /**  @dev getter functions
   */
  function getRate() external view returns (Rate memory) {
    return rate;
  }

  function getBidIncrement() external view returns (uint256) {
    return bidIncrement;
  }

  function getCoeffScale() external view returns (uint256) {
    return coeffScale;
  }

  function getTreasury() external view returns (address) {
    return treasury;
  }

  function getOperator() external view returns (address) {
    return operator;
  }

  function getSpecialRate(uint256 _id) external view returns (Rate memory) {
    if (specialRate[_id].primaryRate == 0) {
      return rate;
    } else {
      return specialRate[_id];
    }
  }

  function isAdmin(address _address) external view onlyAdmin returns (bool) {
    return admins[_address];
  }

  function setRate(uint256 _primaryRate, uint256 _secondaryRate)
    external
    onlyAdmin
  {
    rate = Rate(_primaryRate, _secondaryRate);
  }

  function setSpecialRate(
    uint256 _id,
    uint256 _primaryRate,
    uint256 _secondaryRate
  ) external onlyAdmin {
    specialRate[_id] = Rate(_primaryRate, _secondaryRate);
  }

  function setBidIncrement(uint256 _bidIncrement) external onlyAdmin {
    bidIncrement = _bidIncrement;
  }

  function setCoeffScale(uint256 _coeffScale) external onlyAdmin {
    coeffScale = _coeffScale;
  }

  function setTreasury(address _treasury) external onlyAdmin {
    treasury = _treasury;
  }

  function setOperator(address _operator) external onlyAdmin {
    operator = _operator;
  }

  function setAdmin(address _admin, bool _state) external onlyAdmin {
    admins[_admin] = _state;
    emit SetAdmin(_admin, _state);
  }

  /**  @dev Pay a Pack NFT
   */
  function payPack(
    uint256 _id,
    uint256 _price,
    address _addressTrack,
    address _owner
  ) internal returns (bool) {
    // Get Special rate if exists
    uint256 primaryRate;
    uint256 secondaryRate;
    if (specialRate[_id].primaryRate == 0) {
      primaryRate = rate.primaryRate;
      secondaryRate = rate.secondaryRate;
    } else {
      primaryRate = specialRate[_id].primaryRate;
      secondaryRate = specialRate[_id].secondaryRate;
    }
    Track _Track = Track(_addressTrack);

    address[] memory _beneficiaries = _Track.getPack(_id - 1).beneficiaries;
    uint256[] memory _beneficiaryRates = _Track
      .getPack(_id - 1)
      .beneficiaryRates;
    if (_owner == _Track.getPack(_id - 1).initialOwner) {
      uint256 _amountTreasury = (primaryRate.mul(_price)) / coeffScale;
      uint256 _amountBeneficiaries = ((coeffScale - primaryRate).mul(_price)) /
        coeffScale;
      (bool sent, ) = treasury.call{value: _amountTreasury}("");
      require(sent, "Failed to send treasure");

      for (uint256 i = 0; i < _beneficiaries.length; i++) {
        uint256 _amount = (_amountBeneficiaries.mul(_beneficiaryRates[i])) /
          coeffScale;
        (sent, ) = _beneficiaries[i].call{value: _amount}("");
        require(sent, "Failed to send beneficiaries");
      }
    } else {
      uint256 _amountTreasury = (secondaryRate.mul(_price)) / coeffScale;
      uint256 _royalties = _Track.getPack(_id - 1).royalties;
      uint256 _amountBeneficiaries = (_royalties.mul(_price)) / coeffScale;
      uint256 _amountOwner = _price.sub(
        _amountTreasury.add(_amountBeneficiaries)
      );
      //   bool sent = payable(treasury).send(_amountTreasury);
      (bool sent, ) = treasury.call{value: _amountTreasury}("");
      require(sent, "Failed to send treasure");

      sent = payable(_owner).send(_amountOwner);
      require(sent, "Failed to send beneficiaries");
      for (uint256 i = 0; i < _beneficiaries.length; i++) {
        uint256 _amount = (_amountBeneficiaries.mul(_beneficiaryRates[i])) /
          coeffScale;
        (sent, ) = _beneficiaries[i].call{value: _amount}("");
        require(sent, "Failed to send beneficiaries");
      }
    }
    emit PayPack(_id, _price, msg.sender);
    return true;
  }

  function purchasePack(
    uint256 _id,
    uint256 _amount,
    address _addressTrack,
    address _owner
  ) external payable whenNotPaused {
    require(_amount > 0, "Atlanticus: amount is zero");
    require(
      _addressTrack != address(0),
      "Atlanticus: Track address is the zero address"
    );
    require(_owner != address(0), "Atlanticus : owner is the zero address");
    require(msg.sender != _owner, "Atlanticus: caller is the owner");
    require(
      msg.sender != address(this),
      "Atlanticus: caller is the marketplace contract"
    );
    Track _Track = Track(_addressTrack);

    if (_Track.whitelistNFT(_id) == true) {
      require(
        _Track.whitelistUsers(_id, msg.sender) == true,
        "User not in WhiteList"
      );
      require(
        _Track.whitelistNFTlimit(_id) >=
          (_Track.balanceOf(msg.sender, _id) + _amount),
        "Limit reached for whitelisted user"
      );
    }
    require(
      _Track.balanceOf(_owner, _id) >= _amount,
      "Atlanticus: amount exceeds owner balance"
    );
    require(
      _Track.getOnSale(_owner, _id).amount >= _amount,
      "Atlanticus: amount exceeds onSale balance"
    );

    uint256 _price = _amount.mul(_Track.getOnSale(_owner, _id).price);
    require(
      payPack(_id, _price, _addressTrack, _owner) == true,
      "Atlanticus: pack payment is failure"
    );

    require(
      transferPack(_id, _amount, _owner, msg.sender, _addressTrack) == true,
      "Atlanticus: pack transfer is failure"
    );
    _Track.setOnSale(_owner, _id, _amount);

    emit PurchasePack(_id, msg.sender);
  }

  function transferPack(
    uint256 _id,
    uint256 _amount,
    address _sender,
    address _receiver,
    address _addressTrack
  ) internal returns (bool) {
    Track _Track = Track(_addressTrack);
    _Track.safeTransferFrom(_sender, _receiver, _id, _amount, " ");
    return (true);
  }

  function correctSale(
    uint256 _id,
    uint256 _amount,
    address _sender,
    address _addressTrack
  ) external onlyOperator whenNotPaused returns (bool) {
    require(_sender != address(0), "Atlanticus: sender is the zero address");
    require(
      _addressTrack != address(0),
      "Atlanticus: Track address is the zero address"
    );
    Track _Track = Track(_addressTrack);
    _Track.setOnSale(_sender, _id, _amount);
    return (true);
  }

  function sendFree(
    uint256 _id,
    uint256[] calldata _amount,
    address _sender,
    address[] calldata _receiver,
    address _addressTrack
  ) external onlyOperator whenNotPaused returns (bool) {
    require(_sender != address(0), "Atlanticus: sender is the zero address");
    require(
      _addressTrack != address(0),
      "Atlanticus: Track address is the zero address"
    );
    Track _Track = Track(_addressTrack);
    require(
      _Track.getPack(_id - 1).creator == _sender,
      "Atlanticus: sender is not the creator of the pack"
    );
    require(
      _receiver.length == _amount.length,
      "Atlanticus: receiver and ammount don't have the same size"
    );

    for (uint256 i = 0; i < _receiver.length; i++) {
      require(
        _receiver[i] != address(0),
        "Atlanticus: receiver is the zero address"
      );

      require(_amount[i] > 0, "Atlanticus: amount is zero");
      _Track.safeTransferFrom(_sender, _receiver[i], _id, _amount[i], " ");
      _Track.setOnSale(_sender, _id, _amount[i]);
      emit SendFree(_sender, _receiver[i], _id, _amount[i]);
    }
    return (true);
  }
}


// File: project:/contracts/Track.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
pragma experimental ABIEncoderV2;
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "./utils/Pausable.sol";
import "./Marketplace.sol";
import "./Auction.sol";

/** @title Track contract
 * @author Thierry
 * @notice Track contract to create and manage artist's packs by NFTs.
 * @notice Each NFT representes one pack with specific features
 * @notice This NFT is Transferrable.
 */

/**
 * @dev Standard ERC-1155 is used for NFT Pack.
 */
contract Track is ERC1155, Pausable {
  using SafeMath for uint256;
  using Counters for Counters.Counter;

  struct SaleData {
    uint256 amount;
    uint256 price;
  }

  struct AuctionData {
    uint256 amount;
    address[] contractAddress;
  }

  /// @notice Pack Struct contains Pack features
  struct Pack {
    uint256 tokenId;
    uint256 initialAmount;
    uint256 royalties;
    uint256[] beneficiaryRates;
    address creator;
    address initialOwner;
    address[] beneficiaries;
  }

  /** @notice packs are stored in packs.
   */
  uint256 public royalties = 1000;
  address public addressMarketplace;
  address private operator;
  Pack[] public packs;
  mapping(address => bool) private whiteList;
  mapping(uint256 => bool) public whitelistNFT;
  mapping(uint256 => uint256) public whitelistNFTlimit;
  mapping(uint256 => mapping(address => bool)) public whitelistUsers;
  mapping(address => bool) private approvedList;
  mapping(address => mapping(uint256 => SaleData)) public onSale;
  mapping(address => mapping(uint256 => AuctionData)) public onAuction;
  mapping(address => uint256) public specialRoyalties;
  mapping(uint256 => string) private _uris;
  Counters.Counter private PackId;

  // Events emited by the contract
  event CreatePack(address indexed _owner, uint256 _id, uint256 _amount);
  event DeletePack(address indexed _owner, uint256 _id, uint256 _amount);
  event ActivateSale(
    address indexed _owner,
    uint256 _id,
    uint256 _amount,
    uint256 _price
  );
  event DeactivateSale(address indexed _owner, uint256 _id, uint256 _amount);
  event SetPriceSale(
    address indexed _owner,
    uint256 _id,
    uint256 _oldPrice,
    uint256 _newPrice
  );

  event DeployAuction(
    address indexed _owner,
    address indexed _addressAuction,
    uint256 _id
  );

  /// @dev modifier to restrict function calls to the owner.
  modifier onlyOwnerPack(uint256 _id) {
    require(
      balanceOf(msg.sender, _id) > 0,
      "Atlanticus: caller is not the owner"
    );
    _;
  }

  modifier onlyOperator() {
    require(msg.sender == operator, "Atlanticus: caller is not authorized");
    _;
  }

  /**
   *  @dev set addressMarketplace
   */
  constructor(address _addressMarketplace, address _operator)
    ERC1155("https://wwww.atlanticusmusic.com/api/token/{id}")
  {
    require(
      _addressMarketplace != address(0),
      "Atlanticus: address Marketplace is the zero address"
    );

    addressMarketplace = _addressMarketplace;
    operator = _operator;
    approvedList[_addressMarketplace] = true;
    whiteList[_addressMarketplace] = true;
  }

  /**
   *  @dev getter functions
   */
  function uri(uint256 _id) public view override returns (string memory) {
    return (_uris[_id]);
  }

  function getPack(uint256 _id) public view returns (Pack memory) {
    return packs[_id];
  }

  function getOperator() external view returns (address) {
    return operator;
  }

  function getRoyalties(address _address)
    public
    view
    onlyOwner
    returns (uint256)
  {
    if (specialRoyalties[_address] == 0) {
      return royalties;
    } else {
      return specialRoyalties[_address];
    }
  }

  function getCountPack() public view returns (uint256) {
    return packs.length;
  }

  function getOnSale(address _owner, uint256 _id)
    public
    view
    returns (SaleData memory)
  {
    return onSale[_owner][_id];
  }

  function getOnAuction(address _owner, uint256 _id)
    public
    view
    returns (AuctionData memory)
  {
    return onAuction[_owner][_id];
  }

  function isOnWhiteList(address _address) public view returns (bool) {
    require(_address != address(0), "Atlanticus: address is the zero address");
    return whiteList[_address];
  }

  function isOnApprovedList(address _address) public view returns (bool) {
    require(_address != address(0), "Atlanticus: address is the Zero address");
    return approvedList[_address];
  }

  /**
   *  @dev setter functions
   */
  function setRoyalties(uint256 _royalties) external onlyOwner {
    royalties = _royalties;
  }

  function setRoyaltiesArtist(address _address, uint256 _royalties)
    external
    onlyOwner
  {
    specialRoyalties[_address] = _royalties;
  }

  function setOperator(address _operator) external onlyOwner {
    operator = _operator;
  }

  function setAddressMarketplace(address _addressMarketplace)
    external
    onlyOwner
  {
    addressMarketplace = _addressMarketplace;
    approvedList[_addressMarketplace] = true;
    whiteList[_addressMarketplace] = true;
  }

  function setOnSale(
    address _owner,
    uint256 _id,
    uint256 _amount
  ) external {
    require(
      approvedList[msg.sender] == true,
      "Atlanticus: caller is not approved"
    );
    onSale[_owner][_id].amount = onSale[_owner][_id].amount.sub(_amount);
  }

  function setOnAuction(
    address _owner,
    uint256 _id,
    uint256 _amount
  ) external {
    require(
      approvedList[msg.sender] == true,
      "Atlanticus: caller is not approved"
    );
    onAuction[_owner][_id].amount = onAuction[_owner][_id].amount.sub(_amount);
  }

  function setWhiteList(address _address, bool _state) external onlyOwner {
    require(_address != address(0), "Atlanticus*: address is the zero address");
    whiteList[_address] = _state;
  }

  function setApprovedList(address _address, bool _state) external onlyOwner {
    require(_address != address(0), "Atlanticus: address is the zero address");
    approvedList[_address] = _state;
  }

  /**
   * @dev create pack NFT .
   * Emit a {CreatePack} event.
   */
  function createPack(
    address _owner,
    address[] memory _beneficiaries,
    uint256[] memory _beneficiaryRates,
    uint256 _amount
  ) external whenNotPaused {
    require(_amount > 0, "Atlanticus: Amount should be bigger than zero");
    PackId.increment();
    uint256 newItemId = PackId.current();
    whiteList[msg.sender] = true;
    uint256 royaltiesPack;
    if (specialRoyalties[_owner] == 0) {
      royaltiesPack = royalties;
    } else {
      royaltiesPack = specialRoyalties[_owner];
    }
    _mint(_owner, newItemId, _amount, " ");
    Pack memory _pack = Pack(
      newItemId,
      _amount,
      royaltiesPack,
      _beneficiaryRates,
      msg.sender,
      _owner,
      _beneficiaries
    );
    packs.push(_pack);
    whiteList[msg.sender] = false;
    emit CreatePack(_owner, newItemId, _amount);
  }

  /**
   * @dev update pack NFT URI.
   */
  function setTokenUri(uint256 _id, string memory metadataUri)
    external
    onlyOperator
    whenNotPaused
  {
    require(bytes(_uris[_id]).length == 0, "Cannot set uri twice");
    _uris[_id] = metadataUri;
  }

  /**
   *  @dev Remove NFT Pack.
   *  Emit a {RemovePack} event.
   */

  function deletePack(uint256 _id, uint256 _amount)
    external
    onlyOwnerPack(_id)
    whenNotPaused
  {
    require(
      balanceOf(msg.sender, _id) >= _amount,
      "Atlanticus: amount exceeds the balance"
    );
    whiteList[msg.sender] = true;
    _burn(msg.sender, _id, _amount);
    whiteList[msg.sender] = false;
    emit DeletePack(msg.sender, _id, _amount);
  }

  function setWhitelistEnabled(
    uint256 _id,
    bool _isEnabled,
    uint256 _limit
  ) external onlyOperator {
    whitelistNFT[_id] = _isEnabled;
    whitelistNFTlimit[_id] = _limit;
  }

  function setWhitelistUsers(
    uint256 _id,
    address[] memory _users,
    bool _isEnabled
  ) external onlyOperator whenNotPaused {
    uint256 size = _users.length;
    for (uint256 i = 0; i < size; i++) {
      address user = _users[i];
      whitelistUsers[_id][user] = _isEnabled;
    }
  }

  function setWhitelistUser(
    uint256 _id,
    address _user,
    bool _isEnabled
  ) external onlyOperator whenNotPaused {
    whitelistUsers[_id][_user] = _isEnabled;
  }

  /**
   * @dev Activate Sale  for Pack NFT '_id'.
   * Set  '_price' for Sale option.
   * Emit a {ActivateSale} event
   * Approve 'addressMarketplace' for NFTs
   */
  function activateSale(
    uint256 _id,
    uint256 _amount,
    uint256 _price
  ) external onlyOwnerPack(_id) whenNotPaused {
    require(_amount > 0, "Atlanticus: amount is zero");
    require(_price > 0, "Atlanticus: price is zero");
    require(
      balanceOf(msg.sender, _id) >=
        (onSale[msg.sender][_id].amount +
          onAuction[msg.sender][_id].amount +
          _amount),
      "Atlanticus: amount exceeds available balance"
    );
    if (onSale[msg.sender][_id].amount > 0) {
      require(
        _price == onSale[msg.sender][_id].price,
        "Atlanticus: price must be equal to the current price"
      );
    } else {
      onSale[msg.sender][_id].price = _price;
    }
    onSale[msg.sender][_id].amount = onSale[msg.sender][_id].amount.add(
      _amount
    );
    if (isApprovedForAll(msg.sender, addressMarketplace) == false) {
      setApprovalForAll(addressMarketplace, true);
    }
    emit ActivateSale(msg.sender, _id, _amount, _price);
  }

  /**
   * @dev Desactivate Sale for pack NFT '_id'.
   *  Emit a {DeactivateSale} event
   */
  function deactivateSale(uint256 _id, uint256 _amount)
    external
    onlyOwnerPack(_id)
  {
    require(
      balanceOf(msg.sender, _id) >= _amount,
      "Atlanticus: amount exceeds the balance"
    );
    require(
      onSale[msg.sender][_id].amount >= _amount,
      "Atlanticus: amount exceeds onsale balance"
    );
    onSale[msg.sender][_id].amount = onSale[msg.sender][_id].amount.sub(
      _amount
    );

    emit DeactivateSale(msg.sender, _id, _amount);
  }

  /**
   * @dev Set price Sale for NFT  pack '_id'.
   * Emit a {SetPriceSale} event.
   */
  function setPriceSale(uint256 _id, uint256 _price)
    external
    onlyOwnerPack(_id)
  {
    require(_price > 0, "Atlanticus: price is zero");
    require(onSale[msg.sender][_id].amount > 0, " Atlanticus: amount is zero");

    require(
      _price != onSale[msg.sender][_id].price,
      "Atlanticus: price does not change"
    );
    uint256 _oldprice = onSale[msg.sender][_id].price;
    onSale[msg.sender][_id].price = _price;
    emit SetPriceSale(msg.sender, _id, _oldprice, _price);
  }

  function setAuction(
    uint256 _id,
    uint256 _amount,
    uint256 _biddingTime,
    uint256 _initialBid,
    uint256 _reservePrice
  ) external onlyOwnerPack(_id) whenNotPaused {
    require(_amount > 0, "Atlanticus: amount is zero");
    require(_biddingTime > 0, "Atlanticus: biddingTime is zero");
    require(
      balanceOf(msg.sender, _id) >=
        (onSale[msg.sender][_id].amount +
          onAuction[msg.sender][_id].amount +
          _amount),
      "Atlanticus: amount exceeds available balance"
    );

    Auction _auction = new Auction(
      _id,
      _amount,
      _biddingTime,
      _initialBid,
      _reservePrice,
      address(msg.sender),
      address(this),
      addressMarketplace
    );
    onAuction[msg.sender][_id].amount = onAuction[msg.sender][_id].amount.add(
      _amount
    );
    onAuction[msg.sender][_id].contractAddress.push(address(_auction));
    approvedList[address(_auction)] = true;
    whiteList[address(_auction)] = true;
    setApprovalForAll(address(_auction), true);
    emit DeployAuction(msg.sender, address(_auction), _id);
  }

  function _setBaseURI(string memory _newuri) external onlyOwner {
    _setURI(_newuri);
  }

  function _beforeTokenTransfer(
    address,
    address,
    address,
    uint256[] memory,
    uint256[] memory,
    bytes memory
  ) internal virtual override {
    require(
      whiteList[msg.sender] == true,
      "Atlanticus: transfer is not approved by Atlanticus"
    );
  }
}


// File: project:/contracts/Whitelist.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;
import '@openzeppelin/contracts/access/Ownable.sol';

contract Whitelist is Ownable {
    mapping(address => bool) whitelist;
    event AddedToWhitelist(address indexed account);
    event RemovedFromWhitelist(address indexed account);

    modifier onlyWhitelisted() {
        require(isWhitelisted(msg.sender));
        _;
    }

    function add(address _address) public onlyOwner {
        whitelist[_address] = true;
        emit AddedToWhitelist(_address);
    }

    function remove(address _address) public onlyOwner {
        whitelist[_address] = false;
        emit RemovedFromWhitelist(_address);
    }

    function isWhitelisted(address _address) public view returns(bool) {
        return whitelist[_address];
    }
}

// File: project:/contracts/utils/Pausable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;


import "@openzeppelin/contracts/access/Ownable.sol";


/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;


  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }

  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }

  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    emit Pause();
  }

  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    emit Unpause();
  }
}
