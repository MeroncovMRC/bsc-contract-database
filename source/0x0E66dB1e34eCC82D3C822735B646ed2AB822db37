// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;


abstract contract Context 
{
    function _msgSender() internal view virtual returns (address) 
    {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) 
    {
        this; 
        return msg.data;
    }
}
abstract contract OwnableV2 is Context
{
    address _owner;
    address public _newOwner;
    constructor()  
    {
        _owner = payable(msg.sender);
    }

    modifier onlyOwner() 
    {
        require(_msgSender() == _owner, "Only owner");
        _;
    }

    function changeOwner(address newOwner) onlyOwner public
    {
        _newOwner = newOwner;
    }
    function confirm() public
    {
        require(_newOwner == msg.sender);
        _owner = _newOwner;
    }
}

interface IBanStorage
{
    function ban(address user, uint toDay) external;
    function unBan(address user) external;

    function isBanned(address user) external view returns (bool); 
} 

contract BanStorage is IBanStorage, OwnableV2
{
    mapping (address => bool) BannedUsers;
    mapping (address => uint) Utill;

    
    function ban(address user, uint toDay) public onlyOwner
    {
        BannedUsers[user] = true;
        Utill[user] = block.timestamp + (86400 * toDay);
    }
    function unBan(address user) public onlyOwner
    {
        BannedUsers[user] = false;
    }

    function isBanned(address user) public view returns (bool)
    {
        if (BannedUsers[user])
        {
            if (Utill[user] > block.timestamp)
            {
                return true;
            }
        }
        return false;
    }
}