// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RoyalDeathClub {
    string public name = "Royal Death Club";
    string public symbol = "RDC";
    uint256 public totalSupply = 100000 * 10**18; // 100,000 tokens with 18 decimals
    uint8 public decimals = 18;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public marketingWallet = 0xebAB032282E9e089F11465a2B9Cf2515fda6Ee6D;
    address public burnAddress = address(0xdead);

    uint256 public constant taxRate = 5; // 3% marketing wallet, 2% burn address
    uint256 public constant taxDenominator = 100;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value, "insufficient balance");

        uint256 taxAmount = value * taxRate / taxDenominator;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value - taxAmount;
        balanceOf[marketingWallet] += value * 3 / 100;
        balanceOf[burnAddress] += value * 2 / 100;

        emit Transfer(msg.sender, to, value - taxAmount);
        emit Transfer(msg.sender, marketingWallet, value * 3 / 100);
        emit Transfer(msg.sender, burnAddress, value * 2 / 100);

        return true;
    }

    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);

        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(balanceOf[from] >= value, "insufficient balance");
        require(allowance[from][msg.sender] >= value, "insufficient allowance");

        uint256 taxAmount = value * taxRate / taxDenominator;

        balanceOf[from] -= value;
        balanceOf[to] += value - taxAmount;
        balanceOf[marketingWallet] += value * 3 / 100;
        balanceOf[burnAddress] += value * 2 / 100;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, value - taxAmount);
        emit Transfer(from, marketingWallet, value * 3 / 100);
        emit Transfer(from, burnAddress, value * 2 / 100);

        return true;
    }
}