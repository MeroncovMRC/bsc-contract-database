pragma solidity ^0.7.4;

library SafeMath {
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");
    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "SafeMath: subtraction overflow");
    return a - b;
  }
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");
    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
		require(b > 0, "SafeMath: division by zero");
    uint256 c = a / b;
    return c;
  }
	function mod(uint256 a, uint256 b) internal pure returns (uint256) {
		require(b != 0, "SafeMath: modulo by zero");
		return a % b;
	}
  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
    uint256 c = add(a,m);
    uint256 d = sub(c,1);
    return mul(div(d,m),m);
  }
}

interface IBEP20 {
	function balanceOf(address account) external view returns (uint256);
	function allowance(address owner, address spender) external view returns (uint256);
	function transfer(address to, uint256 value) external returns (bool);
	function transferFrom(address from, address to, uint256 value) external returns (bool);
	function approve(address spender, uint256 value) external returns (bool);
    event Transfer(address from, address to, uint256 value);
    event Approval(address owner, address spender, uint256 value);
}

contract Owned {
	address private _owner;

	constructor() {
		_owner = msg.sender;
	}

    function owner() public view returns (address) {
        return _owner;
    }

	modifier onlyOwner {
		require(msg.sender == _owner);
		_;
	}

	function transferOwnership(address newOwner) onlyOwner public {
		_owner = newOwner;
	}
}

contract CEEZEE is IBEP20, Owned {
    using SafeMath for uint256;
    
    string private _name = 'CEEZEE';
    string private _symbol = 'SAFU';
    uint8 private _decimals = 18;
    uint256 private _total = 1000000000000 * 10**18;            // Total Supply: 1,000,000,000,000
    uint256 private _current = 1000000000000 * 10**18;
    uint256 private _rewardFee = 3 * 10**16;                    // Reward Fee: 3%
    uint256 private _burnFee = 2 * 10**16;                      // Burn Fee: 2%

    mapping (address => uint256) private _balances;
    mapping (address => mapping(address => uint256)) private _allowances;
    mapping (address => bool) private _isExcluded;
    address[] private _excluded;

    address private _ecoSystem;
    uint256 private _totalReward;
    uint256 private _totalBurn;
    bool private _lockTx;

    constructor (address ecoSystem) {
        _ecoSystem = ecoSystem;
        _balances[msg.sender] = _current;
        emit Transfer(address(0), msg.sender, _current);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function maxSupply() public pure returns (uint256) {
        return 1000000000000 * 10**18;
    }

    function totalSupply() public view returns (uint256) {
        return _current;
    }

    function totalBurn() public view returns (uint256) {
        return _totalBurn;
    }

    function totalReward() public view returns (uint256) {
        return _totalReward;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function isExcluded(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function isLocked() external view returns(bool) {
        return _lockTx;
    }

    function ecoSystemVault() external view returns(address) {
        return _ecoSystem;
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        if (_lockTx) require(_isExcluded[sender]);
        
        if (_isExcluded[sender] || _isExcluded[recipient]) {
            _transferExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
    }

    function _transferExcluded(address sender, address recipient, uint256 tAmount) private {
        _balances[sender] = _balances[sender].sub(tAmount);
        _balances[recipient] = _balances[recipient].add(tAmount);
        emit Transfer(sender, recipient, tAmount);
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        address ecoSystem = _ecoSystem;
        (uint256 transferAmt, uint256 rewardAmt, uint256 burnAmt) = _getValues(tAmount);
        _balances[sender] = _balances[sender].sub(tAmount);
        _balances[recipient] = _balances[recipient].add(transferAmt);
        _balances[ecoSystem] = _balances[ecoSystem].add(rewardAmt);
        _updateFee(rewardAmt, burnAmt);
        emit Transfer(sender, recipient, transferAmt);
    }

    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
        uint256 burnAmt = tAmount.mul(_burnFee).div(1000000000000000000);
        uint256 rewardAmt = tAmount.mul(_rewardFee).div(1000000000000000000);
        uint256 transferAmt = tAmount.sub(burnAmt).sub(rewardAmt);
        return (transferAmt, rewardAmt, burnAmt);
    }

    function _updateFee(uint256 rewardAmt, uint256 burnAmt) private {
        _totalReward = _totalReward.add(rewardAmt);
        _totalBurn = _totalBurn.add(burnAmt);
        _current = _current.sub(burnAmt);
        uint256 total = _total.div(2);
        if (total >= _current) {
            _burnFee = _burnFee.div(2);
            _total = total;
        }
    }

    function setEcoSystemVault(address ecoSystem) external onlyOwner() {
        _ecoSystem = ecoSystem;
    }

    function excludeAccount(address account) external onlyOwner() {
        require(!_isExcluded[account], "Account is already excluded");
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeAccount(address account) external onlyOwner() {
        require(_isExcluded[account], "Account is already included");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    function burn(uint256 amount) external returns(bool) {
        require(msg.sender != address(0));
        require(amount<=_balances[msg.sender]);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        _updateFee(0, amount);
        return true;
    }

    function setLock(bool lockTx) external onlyOwner() {
        _lockTx = lockTx;
    }
}