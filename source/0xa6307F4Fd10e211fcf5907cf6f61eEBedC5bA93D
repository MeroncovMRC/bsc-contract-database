pragma solidity 0.8.4;

contract ElonPonzi {
    string public name = "Elon Ponzi";
    string public symbol = "EPonzi";
    uint256 public totalSupply = 690000000000000; // Updated total supply to 69 million
    uint8 public decimals = 0; // No decimal places

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to) public returns (bool success) {
        require(balanceOf[msg.sender] >= 1);
        balanceOf[msg.sender]--;
        balanceOf[_to]++;
        emit Transfer(msg.sender, _to, 1);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to) public returns (bool success) {
        require(balanceOf[_from] >= 1);
        require(allowance[_from][msg.sender] >= 1);
        balanceOf[_from]--;
        balanceOf[_to]++;
        allowance[_from][msg.sender]--;
        emit Transfer(_from, _to, 1);
        return true;
    }
}