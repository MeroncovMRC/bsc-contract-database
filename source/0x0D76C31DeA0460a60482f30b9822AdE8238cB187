{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\ninterface ERC20 {\n    function balanceOf(address who) external view returns (uint);\n    function transfer(address to, uint value) external;\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\ncontract Ownable {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"./Ownable.sol\";\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = true;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n"},"Reward.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.11;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\nimport \"./Pausable.sol\";\n\ncontract Reward is Ownable, Pausable {\n    struct Balance {\n        address recipient; //奖励接收者\n        uint totalAmount; //总的奖励金额\n        uint withdrawAmount; //已经提取的奖励金额\n    }\n\n    struct Award {\n        address recipient;\n        uint totalAmount;\n    }\n\n    mapping(address =\u003e Balance) public balances;\n    address[] private _recipients;\n\n    // USDT TOKEN CONTRACT (WITH 6 DECIMALS)\n    // for ETH mainnet: 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address public usdtAddress;\n\n    address public operator;\n\n    function setParams(\n        address _usdtAddress,\n        address _operator\n    ) public onlyOwner {\n        usdtAddress = _usdtAddress;\n        operator = _operator;\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operator, \"only operator\");\n        _;\n    }\n\n    function syncAwards(Award[] memory awards) public onlyOperator {\n        for (uint i = 0; i \u003c awards.length; i++) {\n            if (balances[awards[i].recipient].recipient == address(0)) {\n                _recipients.push(awards[i].recipient);\n            }\n            balances[awards[i].recipient].totalAmount = awards[i].totalAmount;\n            balances[awards[i].recipient].recipient = awards[i].recipient;\n        }\n    }\n\n    function purgeAwards(address[] memory recipients) public onlyOwner {\n        for (uint i = 0; i \u003c recipients.length; i++) {\n            balances[recipients[i]].totalAmount = 0;\n        }\n    }\n\n    function exportBalances() public view returns (Balance[] memory) {\n        Balance[] memory result = new Balance[](_recipients.length);\n        for (uint i = 0; i \u003c _recipients.length; i++) {\n            result[i] = balances[_recipients[i]];\n        }\n        return result;\n    }\n\n    function refund(address recipient) public onlyOwner {\n        ERC20 usdt = ERC20(usdtAddress);\n        usdt.transfer(recipient, usdt.balanceOf(address(this)));\n        pause();\n    }\n\n    function remainAward(address recipient) public view returns (uint) {\n        return\n            balances[recipient].totalAmount -\n            balances[recipient].withdrawAmount;\n    }\n\n    function claimAward() public whenNotPaused {\n        uint amount = balances[msg.sender].totalAmount -\n            balances[msg.sender].withdrawAmount;\n        require(amount \u003e 0, \"no awards\");\n        ERC20 usdt = ERC20(usdtAddress);\n        usdt.transfer(msg.sender, amount);\n\n        balances[msg.sender].withdrawAmount = balances[msg.sender].totalAmount;\n    }\n}\n"}}