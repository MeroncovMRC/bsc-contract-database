// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: Terrible.sol



pragma solidity ^0.8.19;



contract BabyBurnJaguar {
  using SafeMath for uint256;

  string public name = "Baby Burn Jaguar";
  string public symbol = "BBJ";
  uint8 public decimals = 18;
  uint256 public totalSupply = 300000000000000000000000000000;
  uint256 public circulatingSupply;
  uint256 public reserveAmount = totalSupply.mul(29).div(100); // 29% para a reserva
  uint256 public burnAmount = totalSupply.mul(1).div(100); // 1% queimado no lanÃ§amento

  mapping(address => uint256) public balances;
  mapping(address => mapping(address => uint256)) public allowed;

  address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;
  address payable public owner;
  


  constructor() {
    owner = payable(msg.sender);
    balances[owner] = totalSupply.sub(reserveAmount).sub(burnAmount);
    circulatingSupply = totalSupply.sub(burnAmount);
  }

  modifier onlyOwner {
    require(msg.sender == owner, "Only owner can call this function");
    _;
}

  function withdrawBNB(uint256 amount) external onlyOwner {
    owner.transfer(amount);
}

  function transfer(address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0), "Invalid address");
    require(_value > 0, "Invalid value");
    require(_value <= balances[msg.sender], "Insufficient balance");

    uint256 burnFee = _value.mul(5).div(100); // 5% para queima
    uint256 contractFee = _value.mul(3).div(100); // 3% para o contrato
    uint256 ownerFee = _value.mul(2).div(100); // 2% para o dono

    uint256 transferAmount = _value.sub(burnFee).sub(contractFee).sub(ownerFee);

balances[msg.sender] = balances[msg.sender].sub(_value);
balances[_to] = balances[_to].add(transferAmount);
balances[burnAddress] = balances[burnAddress].add(burnFee);
balances[address(this)] = balances[address(this)].add(contractFee);
balances[owner] = balances[owner].add(ownerFee);
circulatingSupply = circulatingSupply.sub(burnFee);

emit Transfer(msg.sender, _to, transferAmount);
emit Transfer(msg.sender, burnAddress, burnFee);
emit Transfer(msg.sender, address(this), contractFee);
emit Transfer(msg.sender, owner, ownerFee);

return true;
}

function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
require(_from != address(0), "Invalid sender address");
require(_to != address(0), "Invalid recipient address");
require(_value > 0, "Invalid value");
require(_value <= balances[_from], "Insufficient balance");
require(_value <= allowed[_from][msg.sender], "Insufficient allowance");
uint256 burnFee = _value.mul(5).div(100); // 5% para queima
uint256 contractFee = _value.mul(3).div(100); // 3% para o contrato
uint256 ownerFee = _value.mul(2).div(100); // 2% para o dono

uint256 transferAmount = _value.sub(burnFee).sub(contractFee).sub(ownerFee);

balances[_from] = balances[_from].sub(_value);
balances[_to] = balances[_to].add(transferAmount);
balances[burnAddress] = balances[burnAddress].add(burnFee);
balances[address(this)] = balances[address(this)].add(contractFee);
balances[owner] = balances[owner].add(ownerFee);
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
circulatingSupply = circulatingSupply.sub(burnFee);

emit Transfer(_from, _to, transferAmount);
emit Transfer(_from, burnAddress, burnFee);
emit Transfer(_from, address(this), contractFee);
emit Transfer(_from, owner, ownerFee);

return true;
}
function approve(address _spender, uint256 _value) public returns (bool success) {
require(_spender != address(0), "Invalid spender address");
allowed[msg.sender][_spender] = _value;
emit Approval(msg.sender, _spender, _value);
return true;
}

function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
require(_owner != address(0), "Invalid owner address");
require(_spender != address(0), "Invalid spender address");
return allowed[_owner][_spender];
}

function balanceOf(address _owner) public view returns (uint256 balance) {
require(_owner != address(0), "Invalid address");
return balances[_owner];
}

function burn(uint256 _value) public {
require(_value > 0, "Invalid value");
require(balances[msg.sender] >= _value, "Insufficient balance");
balances[msg.sender] = balances[msg.sender].sub(_value);
circulatingSupply = circulatingSupply.sub(_value);

emit Transfer(msg.sender, burnAddress, _value);
}

event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}