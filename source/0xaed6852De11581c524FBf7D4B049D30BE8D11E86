{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"DHNetworkToken.sol":{"content":"// SPDX-License-Identifier: MIT\n\n//\n// $DHNETWORK proposes an innovative feature in its contract.\n//\n// ? Telegram: https://t.me/Diamondhandsnetwork\n// ? Website: https://diamondhandsnetwork.app\n// ? Twitter: https://twitter.com/D_H_Network\n//\n\npragma solidity ^0.6.2;\n\nimport \"./IUniswapV2Pair.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router.sol\";\nimport \"./Ownable.sol\";\nimport \"./ERC20.sol\";\n\ncontract DiamondHandsNetworkToken is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public  uniswapV2Pair;\n\n    bool private swapping;\n\n    bool public projectWalletsFounded;\n\n    bool public contractSendEnabled = false;\n\n    bool public swapEnabled = true;\n\n    address public constant DEAD_WALLET = 0x000000000000000000000000000000000000dEaD;\n\n    uint256 private constant TOTAL_SUPPLY = 1000000 * (10**18);\n\n    uint256 public _minBalanceToEmptyWallet = 500 * (10**18);\n\n    uint256 public _swapTokensAtAmount = 2500 * (10**18);\n\n    mapping(address =\u003e bool) public _isBlacklisted;\n\n    mapping(address =\u003e bool) public _isSniperBot;\n\n    uint256 public _maxDailyTxPercentage = 10;\n\n    uint256 public liquidityFee = 10;\n    uint256 public marketingFee = 5;\n    uint256 public totalFees = liquidityFee.add(marketingFee);\n\n    uint256 private launchedAt;\n\n    //multisig marketing wallet\n    address payable public _marketingWalletAddress = payable(0xDEC550DFE34a56E0804B733fFE3b09CE7Bed1e9F);\n\n    //multisig treasury wallet\n    address payable public _treasuryWalletAddress = payable(0x56819053E939F264bdFEE89F7E3bE95BA54175Dc);\n\n    address[] public _teamWallets =  [\n        0xBB2B9D571ffec7Fcd71E6c238bCAE508EC649274,\n        0x57145d2c11F6c49e1D5AeBcd18B557a367a0748d,\n        0xf7A085f84ba6dAa4d49c7a6Fe71AE1EB245af7BB,\n        0x3B00203adc45B35Afd3354ad5185119e6d1840bC,\n        0xAf34AA18cdaaD85300c310C58C16498aaD3F4A59,\n        0xcbcAA9865386663Ad9da3fBdb3F5EA5A638EaAD4,\n        0xb064ac78c21096f69dE062c64dAbe768c20B28d3\n    ];\n\n\n    // exlcude from fees and max transaction amount\n    mapping (address =\u003e bool) private _isExcludedFromFees;\n\n    mapping (address =\u003e bool) private _isExcludedFromTransferLimits;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\n\n    uint256 private constant TOKENS_MKT = 200000 * (10**18);\n\n    uint256 public _sellWait = 86400;\n\n    uint256 public _maxWalletSize = 15000 * (10**18);\n    uint256 public _maxTxAmount = 1000 * (10**18);\n\n    uint256 public lockPeriod = 7889238;\n\n    struct SellsHistory {\n        uint256 sellTime;\n        uint256 salesAmount;\n    }\n\n    mapping (address =\u003e SellsHistory) public _sellsHistoryPerAddress;\n\n    mapping (address =\u003e uint256) public _teamWalletsLockTime;\n\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event ExcludeFromTransferLimits(address indexed account, bool isExcluded);\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event SellWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    event SwapTokensForETH(\n        uint256 amountIn,\n        address[] path\n    );\n\n    constructor() public ERC20(\"Diamond Hands Network\", \"$DHN\") {\n\n        //Pancakeswap bsc mainnet\n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n        // Create a uniswap pair for this new token\n        IUniswapV2Factory _uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\n        address _uniswapV2Pair = _uniswapV2Factory.createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = _uniswapV2Pair;\n\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(_marketingWalletAddress, true);\n        excludeFromFees(_treasuryWalletAddress, true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0), true);\n        //excludeFromFees(address(_uniswapV2Router), true);\n\n        excludeFromTransferLimits(address(this), true);\n        excludeFromTransferLimits(owner(), true);\n        excludeFromTransferLimits(address(0), true);\n        excludeFromTransferLimits(DEAD_WALLET, true);\n        excludeFromTransferLimits(_marketingWalletAddress, true);\n        excludeFromTransferLimits(_treasuryWalletAddress, true);\n        excludeFromTransferLimits(address(_uniswapV2Router), true);\n\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n\n        _mint(owner(), TOTAL_SUPPLY);\n        fundAndLockTeamAndMarketingWallets();\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"DHNET#1\");\n        automatedMarketMakerPairs[pair] = value;\n\n        if(value) {\n            excludeFromTransferLimits(pair, true);\n        }\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function isExcludedFromTransferLimits(address account) public view returns(bool) {\n        return _isExcludedFromTransferLimits[account];\n    }\n\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size \u003e 0;\n    }\n\n    function _canSell(address from, uint256 amount) external view returns(bool){\n        return canSell(from, amount);\n    }\n\n\n    function canSell(address from, uint256 amount) private view returns(bool){\n        // If address is excluded from fees or is the owner of the contract or is the contract we allow all transfers to avoid probles with liquidity or dividends\n        if (_isExcludedFromFees[from]){\n            return true;\n        }\n\n        uint256 walletBalance = balanceOf(from);\n        // If walletBalance \u003c=  _minBalanceToEmptyWallet tokens let them sell all.\n        if(walletBalance \u003c= _minBalanceToEmptyWallet \u0026\u0026 _sellsHistoryPerAddress[from].sellTime.add(_sellWait) \u003c block.timestamp){\n            return true;\n        }\n        // If wallet is trying to sell more than 10% of it\u0027s balance we won\u0027t allow the transfer\n        if(walletBalance \u003e 0 \u0026\u0026 amount \u003e walletBalance.mul(_maxDailyTxPercentage).div(100)){\n            return false;\n        }\n        // If time of last sell plus waiting time is greater than actual time we need to check if addres is trying to sell more than 10%\n        if(_sellsHistoryPerAddress[from].sellTime.add(_sellWait) \u003e= block.timestamp){\n            uint256 maxSell = walletBalance.add(_sellsHistoryPerAddress[from].salesAmount).mul(_maxDailyTxPercentage).div(100);\n            return _sellsHistoryPerAddress[from].salesAmount.add(amount) \u003c maxSell;\n        }\n        if(_sellsHistoryPerAddress[from].sellTime.add(_sellWait) \u003c block.timestamp){\n            return true;\n        }\n        return false;\n    }\n\n    function getTimeUntilNextTransfer(address from) external view returns(uint256){\n        if(_sellsHistoryPerAddress[from].sellTime.add(_sellWait) \u003e block.timestamp){\n            return _sellsHistoryPerAddress[from].sellTime.add(_sellWait).sub(block.timestamp);\n        }\n        return 0;\n    }\n\n    function updateAddressLastSellData(address from, uint256 amount) private {\n        // If tiem of last sell plus waiting time is lower than the actual time is either a first sale or waiting time has expired\n        // We can reset all struct values for this address\n        if(_sellsHistoryPerAddress[from].sellTime.add(_sellWait) \u003c block.timestamp){\n            _sellsHistoryPerAddress[from].salesAmount = amount;\n            _sellsHistoryPerAddress[from].sellTime = block.timestamp;\n            return;\n        }\n        _sellsHistoryPerAddress[from].salesAmount += amount;\n    }\n\n    // This should limit the wallet tokens to _maxWalletSize\n    function _maxWalletReached(address to) external view returns (bool) {\n        return maxWalletReached(to, 0);\n    }\n\n    // This should limit the wallet tokens to _maxWalletSize\n    function maxWalletReached(address to, uint256 amount) private view returns (bool) {\n        if(_isExcludedFromTransferLimits[to]){\n            return false;\n        }\n        uint256 amountToBuy = amount;\n        if (!_isExcludedFromFees[to] \u0026\u0026 amount != 0){\n        \tuint256 fees = amount.mul(totalFees).div(100);\n            amountToBuy = amount.sub(fees);\n        }\n        return balanceOf(to).add(amountToBuy) \u003e= _maxWalletSize;\n    }\n\n    function _isTeamWalletLocked(address who) external view returns (bool){\n        return isTeamWalletLocked(who);\n    }\n\n    function isTeamWalletLocked(address who) private view returns (bool){\n        bool isTeamWallet = false;\n        for (uint i = 0; i \u003c _teamWallets.length; i++){\n            if(_teamWallets[i] == who){\n                isTeamWallet = true;\n                break;\n            }\n        }\n        return isTeamWallet \u0026\u0026 _teamWalletsLockTime[who] \u003e block.timestamp;\n    }\n\n    function cloneSellDataToTransferWallet(address to, address from) private {\n        _sellsHistoryPerAddress[to].salesAmount = _sellsHistoryPerAddress[from].salesAmount;\n        _sellsHistoryPerAddress[to].sellTime = _sellsHistoryPerAddress[from].sellTime;\n\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"DHNET#4\");\n        require(to != address(0), \"DHNET#5\");\n        require(!_isBlacklisted[from] \u0026\u0026 !_isBlacklisted[to], \"DHNET#6\");\n        require(!isTeamWalletLocked(to) \u0026\u0026 !isTeamWalletLocked(from), \"DHNET#7\");\n        require(!_isSniperBot[from], \"DHNET#7\");\n        if(from != owner() \u0026\u0026 to != owner()) {\n            if(!contractSendEnabled \u0026\u0026 isContract(to) \u0026\u0026 from != address(this)) {\n                revert(\"DHNET#7b\");\n            }\n        }\n\n        if(launchedAt == 0 \u0026\u0026 from == owner() \u0026\u0026 automatedMarketMakerPairs[to]) {\n\t\t\tlaunchedAt = block.number;\n\t\t}\n\n        if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n\t    uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance \u003e= _swapTokensAtAmount;\n\n        bool isTransferBetweenWallets = to != address(this) \u0026\u0026 from != address(this) \u0026\u0026 !automatedMarketMakerPairs[to]\n            \u0026\u0026 !automatedMarketMakerPairs[from] \u0026\u0026 to != owner() \u0026\u0026 from != owner();\n\n        if (isTransferBetweenWallets){\n            cloneSellDataToTransferWallet(to, from);\n            super._transfer(from, to, amount);\n            return;\n        }\n\n        bool removingLiq = ( automatedMarketMakerPairs[from] \u0026\u0026 to == address(uniswapV2Router) )\n            || ( to == owner() \u0026\u0026 from == address(uniswapV2Router) );\n\n        bool addingLiq = (automatedMarketMakerPairs[to] \u0026\u0026 from == owner());\n\n        if(!_isExcludedFromFees[to] \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !addingLiq \u0026\u0026 !removingLiq ) {\n            require(amount \u003c= _maxTxAmount, \"DHNET#8\");\n        }\n\n        if (automatedMarketMakerPairs[from]){\n            require(!maxWalletReached(to, amount), \"DHNET#9\");\n        }\n\n        if(automatedMarketMakerPairs[to] \u0026\u0026 !_isExcludedFromTransferLimits[from]){\n            require(canSell(from, amount), \"DHNET#10\");\n            updateAddressLastSellData(from, amount);\n        }\n\n\n        if( swapEnabled \u0026\u0026\n            canSwap \u0026\u0026\n            !swapping \u0026\u0026\n            !automatedMarketMakerPairs[from] \u0026\u0026\n            from != owner() \u0026\u0026\n            to != owner() \u0026\u0026\n            from != _marketingWalletAddress \u0026\u0026\n            to != _marketingWalletAddress \u0026\u0026\n            from != _treasuryWalletAddress \u0026\u0026\n            to != _treasuryWalletAddress \u0026\u0026\n            !removingLiq\n        ) {\n\n            if(contractTokenBalance \u003e _swapTokensAtAmount){\n                contractTokenBalance = _swapTokensAtAmount;\n            }\n\n            swapTokensForFees(contractTokenBalance);\n\n        }\n\n        bool takeFee = !swapping;\n\n        // if any account belongs to _isExcludedFromFees account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || addingLiq || removingLiq) {\n            takeFee = false;\n        }\n\n        if(takeFee) {\n\n\n        \tuint256 finalFees = totalFees;\n        \tif(block.number \u003c= (launchedAt + 10) \u0026\u0026 automatedMarketMakerPairs[from] \u0026\u0026 to != address(uniswapV2Router) \u0026\u0026 to != address(this) \u0026\u0026 to != owner()) {\n        \t    finalFees = totalFees.add(45);\n        \t    _isSniperBot[to] = true;\n        \t}else if (_isSniperBot[to]){\n        \t    finalFees = totalFees.add(45);\n        \t}\n\n        \tuint256 fees = amount.mul(finalFees).div(100);\n        \tamount = amount.sub(fees);\n\n            super._transfer(from, address(this), fees);\n\n\n        }\n\n        super._transfer(from, to, amount);\n\n\n    }\n\n    function setSWapEnabled(bool enable) external onlyOwner{\n        require(swapEnabled != enable, \"DHNET#20\");\n        swapEnabled = enable;\n    }\n\n    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner{\n        require(_swapTokensAtAmount != newAmount, \"DHNET#20\");\n        _swapTokensAtAmount = newAmount;\n    }\n\n    function enableContractSend() public onlyOwner {\n        require(!contractSendEnabled, \"DHNET#20\");\n        contractSendEnabled = true;\n    }\n\n    function _swapTokensForFees() public onlyOwner{\n        swapTokensForFees(_swapTokensAtAmount);\n    }\n\n    function swapTokensForFees(uint256 contractTokenBalance) private{\n\n        swapping = true;\n\n        //uint256 tokensForMarketing = contractTokenBalance.mul(marketingFee).div(totalFees);\n        uint256 tokensForLiquidity = contractTokenBalance.mul(liquidityFee).div(totalFees);\n\n        uint256 halfLiq = tokensForLiquidity.div(2);\n\n        uint256 tokensForSwap = contractTokenBalance.sub(halfLiq);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        // swap tokens for ETH\n        swapTokensForEth(tokensForSwap, path);\n\n        uint256 contractBalance = address(this).balance;\n\n        uint256 bnbForLiq = contractBalance.mul(liquidityFee).div(totalFees);\n        addLiquidity(halfLiq, bnbForLiq);\n\n        uint256 bnbForMkt = address(this).balance;\n\n        _marketingWalletAddress.transfer(bnbForMkt);\n\n        swapping = false;\n\n    }\n\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path)  private{\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            //address(0),\n\t        owner(),\n            block.timestamp\n        );\n\n        emit SwapAndLiquify(tokenAmount, ethAmount, tokenAmount);\n\n    }\n\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n        require(_maxTxAmount != maxTxAmount, \"DHNET#23\");\n        _maxTxAmount = maxTxAmount;\n    }\n\n    function updateMinBalanceToEmptyWallet(uint256 newAmount) external onlyOwner {\n        require(_minBalanceToEmptyWallet != newAmount, \"DHNET#11\");\n        _minBalanceToEmptyWallet = newAmount;\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != uniswapV2Pair, \"DHNET#11\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function fundAndLockTeamAndMarketingWallets() private {\n        require(!projectWalletsFounded, \"DHNET#13\");\n        super._transfer(owner(), address(_marketingWalletAddress), TOKENS_MKT);\n        super._transfer(owner(), address(_treasuryWalletAddress), TOKENS_MKT);\n        uint256 lockUntil = block.timestamp.add(lockPeriod);\n        uint256 balance = _maxWalletSize;\n        for (uint i = 0; i \u003c _teamWallets.length; i++){\n            excludeFromFees(_teamWallets[i], true);\n            if(i \u003e 4){\n                balance = _maxWalletSize.div(2);\n            }\n            super._transfer(owner(), _teamWallets[i], balance);\n            _teamWalletsLockTime[_teamWallets[i]] = lockUntil;\n            excludeFromFees(_teamWallets[i], false);\n        }\n        projectWalletsFounded = true;\n    }\n\n    receive() external payable {\n\n  \t}\n\n\n    function updateSellWait(uint256 newSellWait) external onlyOwner {\n        require(newSellWait != _sellWait, \"DHNET#14\");\n        emit SellWaitUpdated(newSellWait, _sellWait);\n        _sellWait = newSellWait;\n    }\n\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\n        require(newAddress != address(uniswapV2Router), \"DHNET#17\");\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\n        uniswapV2Router = IUniswapV2Router02(newAddress);\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(address(this), uniswapV2Router.WETH());\n        excludeFromTransferLimits(address(_uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n        uniswapV2Pair = _uniswapV2Pair;\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        require(_isExcludedFromFees[account] != excluded, \"DHNET#18\");\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeFromTransferLimits(address account, bool excluded) public onlyOwner {\n        require(_isExcludedFromTransferLimits[account] != excluded, \"DHNET#19\");\n        _isExcludedFromTransferLimits[account] = excluded;\n\n        emit ExcludeFromTransferLimits(account, excluded);\n    }\n\n    function setMarketingWallet(address payable wallet) external onlyOwner{\n        require(_marketingWalletAddress != wallet, \"DHNET#24\");\n        excludeFromFees(_marketingWalletAddress, false);\n        excludeFromTransferLimits(_marketingWalletAddress, false);\n        _marketingWalletAddress = wallet;\n        excludeFromFees(_marketingWalletAddress, true);\n        excludeFromTransferLimits(_marketingWalletAddress, true);\n    }\n\n    function setTreasuryWallet(address payable wallet) external onlyOwner{\n        require(_treasuryWalletAddress != wallet, \"DHNET#25\");\n        excludeFromFees(_treasuryWalletAddress, false);\n        excludeFromTransferLimits(_treasuryWalletAddress, false);\n        _treasuryWalletAddress = wallet;\n        excludeFromFees(_treasuryWalletAddress, true);\n        excludeFromTransferLimits(_treasuryWalletAddress, true);\n    }\n\n    function setLiquiditFee(uint256 value) external onlyOwner{\n        require(liquidityFee != value \u0026\u0026 value \u003c 15, \"DHNET#29\");\n        liquidityFee = value;\n        totalFees = liquidityFee.add(marketingFee);\n    }\n\n    function setMarketingFee(uint256 value) external onlyOwner{\n        require(marketingFee != value \u0026\u0026 value \u003c 10, \"DHNET#30\");\n        marketingFee = value;\n        totalFees = liquidityFee.add(marketingFee);\n\n    }\n\n    function blacklistAddress(address account, bool value) external onlyOwner{\n        require(_isBlacklisted[account] != value, \"DHNET#31\");\n        _isBlacklisted[account] = value;\n    }\n}\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.6.2;\n\n// SPDX-License-Identifier: MIT License\n\nimport \"./Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}