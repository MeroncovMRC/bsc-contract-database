pragma solidity >=0.8.0 <0.9.0;

// SPDX-License-Identifier: MIT
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

contract IDO is Ownable, Pausable {
    using SafeERC20 for IERC20;
    // <================================ CONSTANTS ================================>
    uint8 constant TEAM_PERCENTAGE = 15;
    uint8 constant TEAM_FREEZE_DURATION_IN_MONTHS = 6;
    uint8 constant PUBLIC_PERCENTAGE = 15;
    uint8 constant PUBLIC_IMMEDIATE_UNLOCK_PERCENTAGE = 10;
    uint8 constant PUBLIC_UNLOCK_PER_MONTH_PERCENTAGE = 30;
    uint8 constant PUBLIC_LOCK_DURATION_IN_MONTHS = 3;
    
    // <================================ MODIFIERS ================================>
    modifier contractNotStarted() {
        require(_contractStarted == false, "IDO: The IDO contract has already started");
        _;
    }

    struct Share {
        address shareAddress;
        uint256 share;
        uint256 releaseTime;
    }

    // PSBuyer stands for Public Sale Buyer
    struct PSBuyer {
        uint256 lastWithdraw;
        uint256 initialTotalBalance;
        uint256 balance;
        uint256 busdLimit;
    }

    struct PublicSale {
        uint256 supply;
        uint256 unlockStartDate;
    }
    
    // <================================ CONSTRUCTOR AND INITIALIZER ================================>

    constructor(
        address nftmAddress, 
        address busdAddress,
        address teamAddress) 
    {
        require(nftmAddress != address(0), "IDO: NFTime token address must not be zero");
        require(busdAddress != address(0), "IDO: BUSD token address must not be zero");
        require(teamAddress != address(0), "IDO: Team address must not be zero");
        _nftm = IERC20(nftmAddress);
        _busd = IERC20(busdAddress);
        
        _teamShare.shareAddress = teamAddress;
        
        _teamShare.releaseTime = block.timestamp + _monthsToTimestamp(TEAM_FREEZE_DURATION_IN_MONTHS);
        _pause();
    }
    
    function initialize()
        external
        onlyOwner
        contractNotStarted
    {
        uint256 totalSupply = _nftm.totalSupply();
        uint256 totalPercentage = TEAM_PERCENTAGE + PUBLIC_PERCENTAGE;
        uint256 initialSupply = (totalSupply * totalPercentage) / 100;

        _teamShare.share = (totalSupply * TEAM_PERCENTAGE) / 100;
        _publicSale.supply = (totalSupply * PUBLIC_PERCENTAGE) / 100;

        _contractStarted = true;
        _startDate = (block.timestamp - (block.timestamp % 1 days)) + 10 hours;
        transferTokensToContract(initialSupply);
        _unpause();
    }

    IERC20 public _nftm;
    IERC20 public _busd;
    uint256 public _startDate;
    Share public _teamShare;
    PublicSale public _publicSale;
    bool public _contractStarted; // true when contract has been initialized
    bool public _publicSaleEnded; // true if ended and false if still active
    mapping (address => PSBuyer) private psBuyers;

    // <================================ EXTERNAL FUNCTIONS ================================>

    function buyTokens(uint256 busdAmount) 
    external
    whenNotPaused
    returns(bool) {
        address buyer = _msgSender();
        require(!_publicSaleEnded, "IDO: Public sale has already finished");
        if(!isPublicSaleBuyer(buyer)) {
            PSBuyer storage psBuyer = psBuyers[buyer];
            psBuyer.busdLimit = 500e18;
        }
        require(buyer != address(0), "IDO: Token issue to Zero address is prohibited");
        require(busdAmount > 0, "IDO: Provided BUSD amount must be higher than 0");
        require(busdAmount <= psBuyers[buyer].busdLimit, "IDO: The Provided BUSD amount exceeds allowed spend limit");
        uint256 nftmPrice = getTokenPrice();
        uint256 tokensAmountToIssue = busdAmount / nftmPrice; // The total number of full tokens that will be issued. 1 Full NFTM token = 1000 tokens in full decimal precision
        require(tokensAmountToIssue > 0, "IDO: Provided BUSD amount is not sufficient to buy even one NFTM token");
        uint256 totalPrice = tokensAmountToIssue * nftmPrice; //Total price in BUSD to buy specific number of NFTM tokens
        uint256 megaTokensToIssue = toMegaToken(tokensAmountToIssue); //Total amount of NFTM tokens (in full decimal precision) to issue
        require(_publicSale.supply >= megaTokensToIssue, "IDO: There are not enough public sale tokens available to be issued for provided BUSD amount");

        require(_issueTokens(buyer, totalPrice, megaTokensToIssue), "IDO: Token transfer failed");
        psBuyers[buyer].busdLimit -= totalPrice;
        return true;
    }

    function withdrawUnlockedTokens() 
    external
    whenNotPaused
    returns(bool) {
        address buyer = _msgSender();
        require(_publicSaleEnded, "IDO: Can not withdraw balance yet. Public Sale is not over yet");
        uint256 monthsSinceDate = _monthsSinceDate(_publicSale.unlockStartDate);
        require(monthsSinceDate > 0, "IDO: Can not withdraw balance yet");
        require(buyer != address(0), "IDO: Token issue to Zero address is prohibited");
        require(isPublicSaleBuyer(buyer), "IDO: The user hasn't participated in Public Sale or has already withdrawn all his balance");
        PSBuyer storage psBuyer = psBuyers[buyer];
        require(psBuyer.lastWithdraw < PUBLIC_LOCK_DURATION_IN_MONTHS, "IDO: Buyer has already withdrawn all available unlocked tokens");
        require(monthsSinceDate != psBuyer.lastWithdraw, "IDO: Buyer has already withdrawn tokens this month");
        uint256 unlockForMonths = monthsSinceDate - psBuyer.lastWithdraw;
        uint256 nftmToUnlock;
        if(monthsSinceDate >= PUBLIC_LOCK_DURATION_IN_MONTHS)
        {
            nftmToUnlock = psBuyer.balance;
            _removePublicSaleBuyer(buyer);
        } else {
            nftmToUnlock = psBuyer.initialTotalBalance * (PUBLIC_UNLOCK_PER_MONTH_PERCENTAGE * unlockForMonths) / 100;
            psBuyer.balance -= nftmToUnlock;
            psBuyer.lastWithdraw = monthsSinceDate;
        }

        _nftm.safeTransfer(buyer, nftmToUnlock);
        
        emit TokensUnlocked(buyer, nftmToUnlock);
        return true;
    }

    function withdrawTeamShare() external onlyOwner whenNotPaused {
        require(_withdrawShare(_teamShare));
    }

    // <================================ ADMIN FUNCTIONS ================================>

    function pauseContract() external onlyOwner whenNotPaused
    {
        _pause();
    }

    function endPublicSale() external onlyOwner whenNotPaused 
    {
        _endPublicSale();
    }

    function unPauseContract() external onlyOwner whenPaused
    {
        _unpause();
    }

    function isPublicSaleBuyer(address buyer) public view returns(bool) {
        if(psBuyers[buyer].initialTotalBalance != 0) {
            return true;
        }
        return false;
    }

    function transferTokensToContract(uint256 amount) public onlyOwner
    {
        address owner = _msgSender();
        _nftm.safeTransferFrom(owner, address(this), amount);
        emit TokensTransferedToStakingBalance(owner, amount);
    }

    function withdrawBUSD() external onlyOwner returns (bool) {
        address owner = _msgSender();
        uint256 balanceBUSD = _busd.balanceOf(address(this));
        require(balanceBUSD > 0, "IDO: Nothing to withdraw. Ido contract's BUSD balance is empty");
        _busd.safeTransfer(owner, balanceBUSD);
        return true;
    }

    function withdrawLeftPublicTokens() external onlyOwner returns (bool) {
        address owner = _msgSender();
        require(_publicSaleEnded, "IDO: Can not withdraw. Public sale is still active");
        require(_publicSale.supply > 0, "IDO: Nothing to withdraw. Ido contract's BUSD balance is empty");
        _nftm.safeTransfer(owner, _publicSale.supply);
        _publicSale.supply = 0;
        return true;
    }

    function finalize() external onlyOwner {
        address owner = _msgSender();
        uint256 balanceBUSD = _busd.balanceOf(address(this));
        uint256 balanceNFTM = _nftm.balanceOf(address(this));
        if(balanceBUSD > 0) _busd.safeTransfer(owner, balanceBUSD);
        if(balanceNFTM > 0)  _nftm.safeTransfer(owner, balanceNFTM);
        _pause();
        selfdestruct(payable(owner));
    }

    // <================================ INTERNAL & PRIVATE FUNCTIONS ================================>
    function _withdrawShare(Share memory share) internal returns(bool) {
        require(block.timestamp >= share.releaseTime, "IDO: Time is not up. Cannot release share");
        _nftm.safeTransfer(share.shareAddress, share.share);

        emit ShareReleased(share.shareAddress, share.share);
        return true;
    }

    function _monthsSinceDate(uint256 _timestamp) private view returns(uint256){
        return  (block.timestamp - _timestamp) / 30 days;
    }

    function _daysSinceDate(uint256 _timestamp) private view returns(uint256){
        return  (block.timestamp - _timestamp) / 1 days;
    }

    function getBuyerLimit(address buyer) external view returns(uint256){
        return isPublicSaleBuyer(buyer) ? psBuyers[buyer].busdLimit : 500e18;
    }

    function getBuyerLockedBalance(address buyer) external view returns(uint256){
        return psBuyers[buyer].balance;
    }

    function getBuyerLastWithdraw(address buyer) external view returns(uint256){
        return psBuyers[buyer].lastWithdraw;
    }

    function getPublicSaleLeftSupply() external view returns(uint256){
        return _publicSale.supply;
    }

    function getCurrentMonth() external view returns(uint256) {
        return _publicSale.unlockStartDate == 0 ? 0 : _monthsSinceDate(_publicSale.unlockStartDate);
    }

    function isPublicSaleActive() external view returns(bool) {
        return !_publicSaleEnded;
    }

    function isTokensUnlockActive() external view returns(bool) {
        uint256 monthsSinceDate = _monthsSinceDate(_publicSale.unlockStartDate);
        return monthsSinceDate > 0 && _publicSaleEnded;
    }

    function getTokenPrice() public view returns(uint256) {
        uint256 price = 90000000000000000; // 0,09$
        uint256 supply = _publicSale.supply;
        if(supply <= toMegaToken(12000000) && supply > toMegaToken(9000000)) {
            price = 95000000000000000; //0,095$
        } else if (supply <= toMegaToken(9000000) && supply > toMegaToken(6000000)) {
            price = 100000000000000000; //0,10$
        } else if (supply <= toMegaToken(6000000) && supply > toMegaToken(3000000)) {
            price = 110000000000000000; //0,11$
        } else if (supply <= toMegaToken(3000000) && supply >= toMegaToken(0)) {
            price = 120000000000000000; //0,12$
        }

        return price;
    }
    
    function _issueTokens(address buyer, uint256 busdToPay, uint256 nftmToIssue) private returns(bool) {
        uint256 nftmToUnlock = (nftmToIssue * PUBLIC_IMMEDIATE_UNLOCK_PERCENTAGE) / 100;
        
        _busd.safeTransferFrom(buyer, address(this), busdToPay);
        _nftm.safeTransfer(buyer, nftmToUnlock);
        _publicSale.supply -= nftmToIssue;
        if(_publicSale.supply == 0) {
            _endPublicSale();
        }

        PSBuyer storage psBuyer = psBuyers[buyer];
        psBuyer.initialTotalBalance += nftmToIssue;
        psBuyer.balance += nftmToIssue - nftmToUnlock;

        emit TokensPurchased(buyer, busdToPay, nftmToIssue);
        return true;
    }

    function _endPublicSale() private {
        require(!_publicSaleEnded, "IDO: Public sale has already finished");
        _publicSale.unlockStartDate = _startDate + (_daysSinceDate(_startDate) * 1 days) + 1 days;
        _publicSaleEnded = true;
    }

    function _removePublicSaleBuyer(address buyer) private {
        if(isPublicSaleBuyer(buyer)) {
            delete psBuyers[buyer];
        }
    }

    function _monthsToTimestamp(uint256 months) internal pure returns(uint256) {
        return months * 30 days;
    }

    function toMegaToken(uint256 amount) internal pure returns(uint256) {
        return amount * (10 ** decimals());
    }

    function decimals() internal pure returns(uint8) {
        return 6;
    }
    // <================================ EVENTS ================================>

    event TokensTransferedToStakingBalance(address indexed sender, uint256 indexed amount);

    event ShareReleased(address indexed beneficiary, uint256 indexed amount);

    event TokensPurchased(address indexed buyer, uint256 spentAmount, uint256 indexed issuedAmount);

    event TokensUnlocked(address indexed buyer, uint256 unlockedAmount);
}