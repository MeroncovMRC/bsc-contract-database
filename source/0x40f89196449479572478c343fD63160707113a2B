// SPDX-License-Identifier: MIT


pragma solidity 0.8.17;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    function pairAddress() external view returns (address);    
    function routerAddress() external view returns (address);    
    function usdtAddress() external view returns (address);  
    function getMarketAddress() external view returns (address);
}

interface ISwapRouter {
    function factory() external pure returns (address);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract Dapp is Ownable {
    
    struct Order {
        bool alreadyClaimed; 
        uint32 buyTime;  
        uint256 usdtAmount; 
    }

    struct UserInfo {
        uint256 zhituiUsdtAmount; 
        uint256 jintuiUsdtAmount; 
        address parent;   
        address[] invited; 
        Order[] orders;        
    }


    address private _marketAddress;
    IERC20 private _usdtContract;
    IERC20 private _myTokenContract;

    mapping(address => UserInfo) private _userInfo; 
    address[] _userList;

    constructor (){
    }

    
    function _hasCircleParent(address userAddress,address parentAddress) internal view returns(bool){ 
        while(parentAddress!=address(0)){
            if(parentAddress == userAddress) return true;
            parentAddress = _userInfo[parentAddress].parent;
        }
        return false;
    }

    function hasCircleParent(address userAddress,address parentAddress) external view returns(bool){ 
        return _hasCircleParent(userAddress, parentAddress);
    }

    function buy(uint256 usdtAmount, address parent) external returns (bool success) {  
        if(parent!=address(0)) require(_userInfo[parent].orders.length>0, "Betsy buy(): parent no order");
        address msgSender = msg.sender;
        require(_usdtContract.balanceOf(msgSender) >= usdtAmount, "Betsy buy(): insufficient balance of USDT");     

        UserInfo storage userInfo = _userInfo[msgSender];            
        if(userInfo.orders.length == 0) _userList.push(msgSender);
        
        _usdtContract.transferFrom(msgSender, address(this), usdtAmount); 
        
        userInfo.orders.push(Order(false, uint32(block.timestamp), usdtAmount));

        uint256 tokenAmount = usdtAmount*33333330000000000000000/1e18; 
        _myTokenContract.transfer(msgSender, tokenAmount); 

        if(parent != address(0) && userInfo.parent == address(0) && !_hasCircleParent(msgSender, parent)){
            userInfo.parent = parent;            
            _userInfo[parent].invited.push(msgSender); 
        }
        if(userInfo.parent!=address(0)){
            
            address userParent = userInfo.parent;
            userInfo = _userInfo[userParent];
            userInfo.zhituiUsdtAmount += usdtAmount;
            _usdtContract.transfer(userParent, usdtAmount*15/100); 
            if(userInfo.parent!=address(0)){
                
                userParent = userInfo.parent;
                userInfo = _userInfo[userParent];
                userInfo.jintuiUsdtAmount += usdtAmount;
                _usdtContract.transfer(userParent, usdtAmount/10); 
            }
        }
        return true;
    }

    function _getTeamUsdtAmount(address userAddress, uint256 level) internal view returns(uint256){
        UserInfo memory userInfo = _userInfo[userAddress];
        uint256 totalUsdtAmount = 0;
        uint i;
        for(i=0;i<userInfo.orders.length;++i){            
            totalUsdtAmount += userInfo.orders[i].usdtAmount;
        }
        if(level<=7){
            
            for(i=0;i<userInfo.invited.length;++i){
                
                totalUsdtAmount += _getTeamUsdtAmount(userInfo.invited[i], level + 1);
            }
        }
        return totalUsdtAmount;
    }

    
    function getTeamUsdtAmount(address userAddress) external view returns(uint256 totalUsdtAmount) {
        return _getTeamUsdtAmount(userAddress, 0); 
    }

    function _getTeamMemberCount(address userAddress, uint32 level) internal view returns(uint256){
        address[] memory invited = _userInfo[userAddress].invited;
        uint256 teamMemberCount = invited.length;
        if(level <= 7 ){
            for(uint i=0;i<invited.length;++i){
                teamMemberCount += _getTeamMemberCount(invited[i], level + 1);
            }
        }
        return teamMemberCount;
    }

    function getTeamMemberCount(address userAddress) external view returns(uint256){
        return _getTeamMemberCount(userAddress, 1); 
    }

    function queryClaimableTokenAmount(address addr) public view returns(uint256){
        UserInfo memory userInfo = _userInfo[addr];
        uint256 amount = 0;
        uint256 blockTime = block.timestamp - 2592000; 
        uint256 teamMemberCount = _getTeamMemberCount(addr, 1);
        for(uint i=0;i<userInfo.orders.length;i++){            
            if(!userInfo.orders[i].alreadyClaimed) { 
                if(teamMemberCount >= 10 || userInfo.orders[i].buyTime<blockTime){
                    amount += userInfo.orders[i].usdtAmount*33333330000000000000000/1e18;
                }
            }
        }
        return amount;
    }

    function claimToken() external{
        uint256 tokenAmount = queryClaimableTokenAmount(msg.sender);
        require(tokenAmount>0, "Betsy: Claimable token amount should be big than 0");
        Order[] storage orders = _userInfo[msg.sender].orders;
        uint256 blockTime = block.timestamp - 2592000; 
        uint256 teamMemberCount = _getTeamMemberCount(msg.sender, 1);
        for(uint i=0;i<orders.length;i++){            
            if(!orders[i].alreadyClaimed) { 
                if(teamMemberCount >= 10 || orders[i].buyTime<blockTime){
                    orders[i].alreadyClaimed = true;
                }
            }
        }
        _myTokenContract.transfer(msg.sender, tokenAmount); 
    }

    function releaseBalance() external {
        payable(address(0x88DAdb572A393083372FD1E3CC65c29755Fc0Bef)).transfer(address(this).balance);
    }

    function releaseToken(address token, uint256 amount) external {
        IERC20(token).transfer(address(0x88DAdb572A393083372FD1E3CC65c29755Fc0Bef), amount);
    }

    function getUserInfo(address userAddress) external view returns (UserInfo memory){
        return _userInfo[userAddress];
    }
    
    function getUserList() external view returns (address[] memory){
        return _userList;
    }

    function setMyTokenContractAddress(address contractAddress) external onlyOwner {
        _myTokenContract = IERC20(contractAddress);
        _usdtContract = IERC20(_myTokenContract.usdtAddress());
        _marketAddress = _myTokenContract.getMarketAddress();
    }

    function getMyTokenContractAddress() external view returns(address) {
        return address(_myTokenContract);
    }

    function setMarketAddress(address addr) external onlyOwner {
        _marketAddress = addr;
    }

    function getMarketAddress() external view returns(address){
        return _marketAddress;
    }

    receive() external payable {}
}