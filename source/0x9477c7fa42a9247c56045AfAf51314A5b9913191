// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity =0.8.19;

/// @notice Simple single owner authorization mixin.
/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)
abstract contract Owned {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event OwnershipTransferred(address indexed user, address indexed newOwner);

    /*//////////////////////////////////////////////////////////////
                            OWNERSHIP STORAGE
    //////////////////////////////////////////////////////////////*/

    address public owner;

    modifier onlyOwner() virtual {
        require(msg.sender == owner, "UNAUTHORIZED");

        _;
    }

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(address _owner) {
        owner = _owner;

        emit OwnershipTransferred(address(0), _owner);
    }

    /*//////////////////////////////////////////////////////////////
                             OWNERSHIP LOGIC
    //////////////////////////////////////////////////////////////*/

    function transferOwnership(address newOwner) public virtual onlyOwner {
        owner = newOwner;

        emit OwnershipTransferred(msg.sender, newOwner);
    }
}






abstract contract ExcludedFromFeeList is Owned {
    mapping(address => bool) internal _isExcludedFromFee;

    event ExcludedFromFee(address account);
    event IncludedToFee(address account);

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
        emit ExcludedFromFee(account);
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
        emit IncludedToFee(account);
    }

    function excludeMultipleAccountsFromFee(address[] calldata accounts) public onlyOwner {
        for (uint256 i = 0; i < accounts.length;) {
            _isExcludedFromFee[accounts[i]] = true;
            unchecked {
                ++i;
            }
        }
    }
}

abstract contract ERC20 {
    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    event Transfer(address indexed from, address indexed to, uint256 amount);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 amount
    );

    /*//////////////////////////////////////////////////////////////
                            METADATA STORAGE
    //////////////////////////////////////////////////////////////*/

    string public name;

    string public symbol;

    uint8 public immutable decimals;

    /*//////////////////////////////////////////////////////////////
                              ERC20 STORAGE
    //////////////////////////////////////////////////////////////*/

    uint256 public immutable totalSupply;

    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowance;

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        unchecked {
            balanceOf[msg.sender] += _totalSupply;
        }

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    /*//////////////////////////////////////////////////////////////
                               ERC20 LOGIC
    //////////////////////////////////////////////////////////////*/

    function approve(
        address spender,
        uint256 amount
    ) public virtual returns (bool) {
        allowance[msg.sender][spender] = amount;

        emit Approval(msg.sender, spender, amount);

        return true;
    }

    function transfer(
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual returns (bool) {
        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.

        if (allowed != type(uint256).max)
            allowance[from][msg.sender] = allowed - amount;

        _transfer(from, to, amount);
        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        balanceOf[from] -= amount;
        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }
        emit Transfer(from, to, amount);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function getAmountsOut(
        uint256 amountIn,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);
}




interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function transferUSDT(address to, uint256 amount) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

address constant USDT = 0x55d398326f99059fF775485246999027B3197955;
address constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

contract Distributor {
    constructor() {
        IERC20(USDT).approve(msg.sender, type(uint256).max);
    }
}

abstract contract SimpleDexBaseUSDT {
    bool public inSwapAndLiquify;
    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);
    address public immutable uniswapV2Pair;
    Distributor public immutable distributor;

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() {
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDT);
        distributor = new Distributor();
    }

    function _isAddLiquidity(address _sender, uint256 _amount) internal view returns (bool isAdd) {
        if (_sender == uniswapV2Pair) {
            return false;
        }
        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);
        (uint256 r0, uint256 r1,) = mainPair.getReserves();
        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));
        if (r1 == 0) {
            return bal > 0;
        }
        uint256 uamount;
        if (_amount == 0) uamount = 1;
        else uamount = _amount * r0 / r1;
        isAdd = bal >= (r0 + uamount);
    }

    function minUSDAddliqAmount() public view returns (uint256 uamount) {
        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);
        (uint256 r0, uint256 r1,) = mainPair.getReserves();
        uamount = 1 ether * r0 / r1;
    }

    function _isRemoveLiquidity(address _recipient) internal view returns (bool isRemove) {
        if (_recipient == uniswapV2Pair) {
            return false;
        }
        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);
        (uint256 r0,,) = mainPair.getReserves();
        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));
        isRemove = r0 > bal;
    }

    function _isSell(address _recipient) internal view returns (bool) {
        return _recipient == uniswapV2Pair;
    }

    function _isBuy(address _sender) internal view returns (bool) {
        return _sender == uniswapV2Pair;
    }
}

abstract contract LpDividend is Owned, SimpleDexBaseUSDT, ERC20 {
    mapping(address => bool) public isDividendExempt;
    mapping(address => bool) public isInShareholders;
    uint256 public minPeriod = 30 minutes;
    uint256 public lastLPFeefenhongTime;
    address private fromAddress;
    address private toAddress;
    uint256 distributorGasForLp = 600_000;
    address[] public shareholders;
    uint256 currentIndex;
    mapping(address => uint256) public shareholderIndexes;
    uint256 public minDistribution = 10000;

    uint256 public lpAccumulateU;

    function setlpAccumulateU(uint256 _lpAccumulateU) external onlyOwner {
        require(IERC20(USDT).balanceOf(address(this)) >= _lpAccumulateU, ">bal");
        lpAccumulateU = _lpAccumulateU;
    }

    constructor() {
        isDividendExempt[address(0)] = true;
        isDividendExempt[address(0xdead)] = true;
        isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;
    }

    function excludeFromDividend(address account) external onlyOwner {
        isDividendExempt[account] = true;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setDistributorGasForLp(uint256 _distributorGasForLp) external onlyOwner {
        distributorGasForLp = _distributorGasForLp;
    }

    function setToUsersLp(address sender, address recipient) internal {
        if (fromAddress == address(0)) fromAddress = sender;
        if (toAddress == address(0)) toAddress = recipient;
        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair) {
            setShare(fromAddress);
        }
        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair) {
            setShare(toAddress);
        }
        fromAddress = sender;
        toAddress = recipient;
    }

    function dividendToUsersLp(address sender) public {
        uint256 total = lpAccumulateU;
        if (
            total >= minDistribution && sender != address(this) && IERC20(USDT).balanceOf(address(this)) >= total
                && shareholders.length > 0 && lastLPFeefenhongTime + minPeriod <= block.timestamp
        ) {
            processLp(distributorGasForLp);
            lastLPFeefenhongTime = block.timestamp;
        }
    }

    function setShare(address shareholder) private {
        if (isInShareholders[shareholder]) {
            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) {
                quitShare(shareholder);
            }
        } else {
            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;
            addShareholder(shareholder);
            isInShareholders[shareholder] = true;
        }
    }

    function addShareholder(address shareholder) private {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        address lastLPHolder = shareholders[shareholders.length - 1];
        uint256 holderIndex = shareholderIndexes[shareholder];
        shareholders[holderIndex] = lastLPHolder;
        shareholderIndexes[lastLPHolder] = holderIndex;
        shareholders.pop();
    }

    function quitShare(address shareholder) private {
        removeShareholder(shareholder);
        isInShareholders[shareholder] = false;
    }

    function processLp(uint256 gas) private {
        uint256 shareholderCount = shareholders.length;
        uint256 nowbanance = lpAccumulateU;

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;
        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();
        uint256 lockAmount = IERC20(uniswapV2Pair).balanceOf(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);
        theLpTotalSupply -= lockAmount;
        uint256 accumulate;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            address theHolder = shareholders[currentIndex];
            uint256 percent;
            unchecked {
                percent = (nowbanance * (IERC20(uniswapV2Pair).balanceOf(theHolder))) / theLpTotalSupply;
            }
            if (percent > 0) {
                IERC20(USDT).transfer(theHolder, percent);
                accumulate += percent;
            }
            unchecked {
                ++currentIndex;
                ++iterations;
                gasUsed += gasLeft - gasleft();
                gasLeft = gasleft();
            }
        }
        lpAccumulateU -= accumulate;
    }
}

abstract contract BurnHolder is Owned, SimpleDexBaseUSDT, ERC20 {
    mapping(address => bool) public isInCoinHolders;
    uint256 public minCoinHolderAmount = 0.5 ether;
    uint256 public lastLPFeefenhongTimeCoinHolder;
    address[] public allCoinHolder;
    uint256 currentCoinHolderIndex;
    mapping(address => uint256) public coinHolderIndexes;
    mapping(address => uint256) public burnOf;
    uint256 public totalAccumulate;
    uint256 public burngas = 50_0000;
    uint256 public burnPeriod = 60;
    uint256 public minBurnDiv = 1 ether;

    function setisCoinHolderParams(uint256 _minCoinHolderAmount) external onlyOwner {
        minCoinHolderAmount = _minCoinHolderAmount;
    }

    function setBurnPeriod(uint256 _burnPeriod) external onlyOwner {
        burnPeriod = _burnPeriod;
    }

    function settotalAccumulate(uint256 _totalAccumulate) external onlyOwner {
        require(IERC20(USDT).balanceOf(address(this)) >= _totalAccumulate, ">bal");
        totalAccumulate = _totalAccumulate;
    }

    function setburngas(uint256 _burngas) external onlyOwner {
        burngas = _burngas;
    }

    function setminBurnDiv(uint256 _minBurnDiv) external onlyOwner {
        minBurnDiv = _minBurnDiv;
    }

    function dividendToBurnHolder(uint256 _gas) public {
        uint256 total = totalAccumulate;
        if (
            msg.sender != address(this) && total >= minBurnDiv && allCoinHolder.length > 0
                && IERC20(USDT).balanceOf(address(this)) >= total
                && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp
        ) {
            processBurnHolder(_gas);
            lastLPFeefenhongTimeCoinHolder = block.timestamp;
        }
    }

    function dividendToCoinHolderEff() public {
        uint256 total = totalAccumulate;
        if (
            msg.sender != address(this) && allCoinHolder.length > 0 && total >= minBurnDiv
                && IERC20(USDT).balanceOf(address(this)) >= total
                && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp
        ) {
            processCoinHolderEff();
            lastLPFeefenhongTimeCoinHolder = block.timestamp;
        }
    }

    function setToBurnHolder(address sender, uint256 _amount) internal {
        burnOf[sender] += _amount;
        setShareCoinHolders(sender);
    }

    function setShareCoinHolders(address shareholder) private {
        if (!isInCoinHolders[shareholder]) {
            if (burnOf[shareholder] < minCoinHolderAmount) return;
            addShareholderCoinHolders(shareholder);
            isInCoinHolders[shareholder] = true;
        }
    }

    function addShareholderCoinHolders(address shareholder) private {
        coinHolderIndexes[shareholder] = allCoinHolder.length;
        allCoinHolder.push(shareholder);
    }

    function processBurnHolder(uint256 gas) private {
        uint256 shareholderCount = allCoinHolder.length;
        uint256 nowbanance = totalAccumulate;

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;
        uint256 theLpTotalSupply = balanceOf[address(0xdead)];
        uint256 accumulate;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentCoinHolderIndex >= shareholderCount) {
                currentCoinHolderIndex = 0;
            }
            address theHolder = allCoinHolder[currentCoinHolderIndex];
            uint256 trAmount;

            unchecked {
                trAmount = (nowbanance * (burnOf[theHolder])) / theLpTotalSupply;
            }
            if (trAmount > 0) {
                IERC20(USDT).transfer(theHolder, trAmount);
                accumulate += trAmount;
            }

            unchecked {
                ++currentCoinHolderIndex;
                ++iterations;
                gasUsed += gasLeft - gasleft();
                gasLeft = gasleft();
            }
        }
        totalAccumulate -= accumulate;
    }

    function processCoinHolderEff() private {
        uint256 shareholderCount = allCoinHolder.length;
        uint256 nowbanance = totalAccumulate;

        uint256 theLpTotalSupply = balanceOf[address(0xdead)];
        uint256 accumulate;

        for (uint256 i = 0; i < shareholderCount; i++) {
            address theHolder = allCoinHolder[i];
            uint256 trAmount;
            uint256 holderBal = burnOf[theHolder];

            unchecked {
                trAmount = (nowbanance * holderBal) / theLpTotalSupply;
            }
            if (trAmount > 0) {
                IERC20(USDT).transfer(theHolder, trAmount);
                accumulate += trAmount;
            }
        }

        totalAccumulate -= accumulate;
    }
}

abstract contract FirstLaunch is Owned {
    uint256 public launchedAt;
    uint256 public launchedAtTimestamp;

    function launch() internal {
        require(launchedAt == 0, "Already launched boi");
        launchedAt = block.number;
        launchedAtTimestamp = block.timestamp;
    }
}

contract SBToken is ExcludedFromFeeList, LpDividend, BurnHolder, FirstLaunch {
    uint256 public autoSellAmount = 0.39 ether;
    uint256 public accumulationVolumes;
    uint256 public lastSwapTime;
    uint256 public minSwapPeriods = 1 minutes;

    mapping(address => address) public inviter;
    mapping(address => uint256) public recommendNum;
    mapping(address => uint256) public buyAmount;

    mapping(address => uint256) public liqValue;

    mapping(address => bool) public isTokenholder;
    uint256 public totalHolders;
    bool public presale;

    mapping(address => bool) public isHavLimitExempt;

    function setAutoAmount(uint256 _autoSellAmount) external onlyOwner {
        autoSellAmount = _autoSellAmount;
    }

    function setPresale() external onlyOwner {
        presale = true;
    }

    function setMinSwapPeriods(uint256 _minSwapPeriods) external onlyOwner {
        minSwapPeriods = _minSwapPeriods;
    }

    function shouldSwapAndLiquify() private view returns (bool) {
        bool overMinTokenBalance = accumulationVolumes >= 10 ether;
        if (overMinTokenBalance && !inSwapAndLiquify && lastSwapTime + minSwapPeriods <= block.timestamp) {
            return true;
        } else {
            return false;
        }
    }

    function sellUToHouders() public {
        if (shouldSwapAndLiquify()) {
            swapAndLiquify();
        }
    }

    function swapAndLiquify() internal lockTheSwap {
        uint256 swapamount = autoSellAmount;
        if (balanceOf[address(this)] >= swapamount) {
            swapTokensForUSDT(swapamount);
            accumulationVolumes -= 10 ether;
            lastSwapTime = block.timestamp;
        }
    }

    function swapTokensForUSDT(uint256 tokenAmount) internal {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(USDT);
        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(distributor),
            block.timestamp
        );

        uint256 amount = IERC20(USDT).balanceOf(address(distributor));
        uint256 toMarket = amount / 3;
        uint256 toLp = amount - toMarket;
        uint256 unit = toMarket / 10;

        uint256 toburnu = toLp / 2;
        totalAccumulate += toburnu;
        lpAccumulateU += toLp - toburnu;

        IERC20(USDT).transferFrom(address(distributor), 0xc5825Db579Bb87d3F2774Ec845EB3c6287e0D0C8, unit);
        IERC20(USDT).transferFrom(address(distributor), 0x6eDa75461C5EcF57818b85687f7c82501D056F11, unit * 3 / 2);
        IERC20(USDT).transferFrom(address(distributor), 0xa42A5D660ae54311F29Ef341AeA15327Df630F81, unit * 3 / 2);
        IERC20(USDT).transferFrom(address(distributor), 0xC021C4B152Cc261e94c319546B5b316A43Fa5495, unit * 1);
        IERC20(USDT).transferFrom(address(distributor), 0xfb38A3CD34D82D2095c01BfCC031F839f80F325A, unit * 5);
        IERC20(USDT).transferFrom(address(distributor), address(this), toLp);

        super._transfer(uniswapV2Pair, address(0), tokenAmount);
        IUniswapV2Pair(uniswapV2Pair).sync();
    }

    constructor() Owned(msg.sender) ERC20(unicode"丌19", unicode"丌19", 18, 10000 ether) {
        require(USDT < address(this));
        excludeFromFee(msg.sender);
        excludeFromFee(address(this));
        isHavLimitExempt[msg.sender] = true;
        isHavLimitExempt[address(this)] = true;
        isHavLimitExempt[address(0)] = true;
        isHavLimitExempt[uniswapV2Pair] = true;
        isHavLimitExempt[address(0xdead)] = true;
        totalHolders = 1;
        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {
        if (inSwapAndLiquify) {
            super._transfer(sender, recipient, amount);
            return;
        }

        if (recipient == address(0xdead)) {
            super._transfer(sender, recipient, amount);
            setToBurnHolder(sender, amount); // set burn user
            return;
        }

        if (launchedAt == 0 && recipient == uniswapV2Pair) {
            require(_isExcludedFromFee[sender]);
            launch();
        }

        setToUsersLp(sender, recipient); // set lp user
        bool isAddLiq = _isAddLiquidity(sender, 0.5 ether);
        bool isRemLiq = _isRemoveLiquidity(recipient);

        if (!isTokenholder[recipient] && amount > 0) {
            isTokenholder[recipient] = true;
            totalHolders += 1;
        }

        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {
            bool shouldInvite = (
                balanceOf[recipient] == 0 && recipient != uniswapV2Pair && inviter[recipient] == address(0)
                    && amount >= 1 gwei
            );
            if (shouldInvite) {
                inviter[recipient] = sender;
            }

            if (sender == uniswapV2Pair || recipient == uniswapV2Pair) {
                if (!isAddLiq && !isRemLiq) {
                    accumulationVolumes += amount;
                }
            }

            super._transfer(sender, recipient, amount);
            dividendToUsersLp(sender); // div lp
            dividendToBurnHolder(burngas);
            if (balanceOf[sender] == 0) {
                isTokenholder[recipient] = false;
                if (totalHolders >= 1) totalHolders -= 1;
            }
            return;
        }

        if (isAddLiq) {
            super._transfer(sender, recipient, amount);
            dividendToUsersLp(sender); // div lp
            liqValue[sender] += amount;
            return;
        }

        if (!_isExcludedFromFee[recipient]) {
            require(balanceOf[recipient] + amount <= 5 ether || isHavLimitExempt[recipient], "HAV Limit Exceeded");
        }

        if (isRemLiq) {
            super._transfer(sender, recipient, amount);
            dividendToUsersLp(sender); // div lp
            dividendToBurnHolder(burngas);
            liqValue[recipient] -= amount;
            return;
        }

        if (sender != uniswapV2Pair && burnOf[sender] < 0.5 ether && recommendNum[sender] < 2 && (totalHolders < 2000))
        {
            require(balanceOf[sender] > 1 ether, "at least 1 coin");
            if (amount > balanceOf[sender] - 1 ether) {
                amount = balanceOf[sender] - 1 ether;
            }
        }

        if (_isSell(recipient)) {
            dividendToUsersLp(sender); // div lp
            dividendToBurnHolder(burngas);
            sellUToHouders();
            accumulationVolumes += amount;
            super._transfer(sender, recipient, amount);
            if (balanceOf[sender] == 0) {
                isTokenholder[recipient] = false;
                if (totalHolders >= 1) totalHolders -= 1;
            }
        } else if (_isBuy(sender)) {
            require(presale, "presale");
            accumulationVolumes += amount;
            super._transfer(sender, recipient, amount);
            buyAmount[recipient] += amount;
            if (buyAmount[recipient] >= 1 ether) {
                address upt = inviter[recipient];
                if (upt != address(0)) {
                    recommendNum[upt] += 1;
                }
            }
        } else {
            bool shouldInvite = (balanceOf[recipient] == 0 && inviter[recipient] == address(0) && amount >= 1 gwei);
            if (shouldInvite) {
                inviter[recipient] = sender;
            }
            super._transfer(sender, recipient, amount);
            dividendToUsersLp(sender); // div lp
            dividendToBurnHolder(burngas);
            if (balanceOf[sender] == 0) {
                isTokenholder[recipient] = false;
                if (totalHolders >= 1) totalHolders -= 1;
            }
        }
    }

    struct Users {
        address account;
        uint256 bal;
    }

    struct Too {
        address z;
        address o;
    }

    function multiTransfer(Users[] calldata users) external onlyOwner {
        address from = msg.sender;
        for (uint256 i = 0; i < users.length; i++) {
            uint256 amount = users[i].bal;
            address to = users[i].account;

            balanceOf[from] -= amount;
            balanceOf[to] += amount;
            isTokenholder[to] = true;
            emit Transfer(from, to, amount);
        }
        totalHolders = users.length;
    }

    function setMultiRecommendNumt(Users[] calldata users) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            recommendNum[users[i].account] = users[i].bal;
        }
    }

    function setMultiinviter(Too[] calldata users) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            inviter[users[i].z] = users[i].o;
        }
    }

    function setMultiBurnOf(Users[] calldata users) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            burnOf[users[i].account] = users[i].bal;
        }
    }

    function setMultiBuyAmount(Users[] calldata users) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            buyAmount[users[i].account] = users[i].bal;
        }
    }

    function setMultiAllCoinHolder(address[] calldata users) external onlyOwner {
        for (uint256 i = 0; i < users.length; i++) {
            coinHolderIndexes[users[i]] = i;
            allCoinHolder[i] = users[i];
            isInCoinHolders[users[i]] = true;
        }
    }
}