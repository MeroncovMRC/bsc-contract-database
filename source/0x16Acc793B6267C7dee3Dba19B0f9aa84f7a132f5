{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"LoopLiquidityPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract LoopLiquidityPool is Ownable {\n     \n    //income balance\n    mapping (address =\u003e uint256) private _last_block;\n    \n    //ore pool self power\n    mapping (address =\u003e uint256) private _power;\n    mapping (address =\u003e uint256) private _lock_power;\n    mapping (address =\u003e uint256) private _unclaimed;\n    \n    //ore pool total power\n    uint256 private _totalPower;\n    \n    //income total balance\n    uint256 private _everyDayMintingAmount = 400*1e18;\n\n    uint256 public total_rewards = 400000 * 1e18;\n    uint256 public released;\n    \n    IERC20 public loopToken;\n    IERC20 public lpToken;\n    address public locker;\n\n    event Stake(address indexed from, uint256 value);\n    event Claim(address indexed to, uint256 value);\n    event Redeem(address indexed to, uint256 value);\n\n    function addLockPower(address owner,uint256 amount)public virtual onlyOwner returns(bool){\n        _lock_power[owner] += amount;\n        _totalPower += amount;\n        if(_last_block[owner] == 0){\n            _last_block[owner] = block.number;\n        }\n        return true;\n    }\n\n    function addTokenContract(address _loopContract, address _lpContract)public virtual onlyOwner returns(bool){\n        require(_loopContract != address(0), \"OrePool: transfer from the zero address\");\n        require(_lpContract != address(0), \"OrePool: transfer from the zero address\");\n       loopToken = IERC20(_loopContract);\n        lpToken = IERC20(_lpContract);\n        return true;\n    }\n\n    function totalPower() public view  returns (uint256) {\n        return _totalPower;\n    }\n\n    function getUnclaimedAmount(address _account)public view returns(uint256){\n        uint256 _my_power = powerOf(_account);\n        if(_last_block[_account]==0 || _my_power==0){\n            return 0;\n        }\n\n        if(released \u003e= total_rewards){\n            return 0;\n        }\n       \n        uint256 _diff_block = block.number - _last_block[_account];\n        return _unclaimed[msg.sender] + ((((_my_power * _everyDayMintingAmount)/ _totalPower) * _diff_block)/28800);\n    }\n    \n    function powerOf(address account) public view  returns (uint256) {\n        return _power[account] + _lock_power[account];\n    }\n    \n    function stake(uint256 amount) public  returns (bool){\n        _stake(_msgSender(),amount);\n        settlement(_msgSender());\n        return true;\n    }\n    \n    function _stake(address sender,uint256 amount) internal virtual{\n        require(sender != address(0), \"OrePool: transfer from the zero address\");\n        require(lpToken.transferFrom(msg.sender, address(this), amount), \"No approval or insufficient balance\");\n        \n        _power[sender] = _power[sender] + amount;\n        _totalPower = _totalPower + amount;\n        if(_last_block[sender] == 0){\n            _last_block[sender] = block.number;\n        }\n        \n        emit Stake(sender,amount);\n    }\n    \n    function claim() public  returns (bool){\n        address sender = msg.sender;\n        require(sender != address(0), \"OrePool: transfer from the zero address\");\n        settlement(sender);\n        uint256 myUnclaimedAmount = _unclaimed[sender];\n        require(myUnclaimedAmount \u003e0 , \"OrePool: balance must be greater than 0 \");\n\n        //mint\n        loopToken.transfer(sender, myUnclaimedAmount);\n        // miner.mint(sender,myUnclaimedAmount);\n        \n        _unclaimed[sender] = 0;\n        emit Claim(sender,myUnclaimedAmount);\n        return true;\n    }\n\n    function redeem() public  returns (bool){\n        address sender = msg.sender;\n        require(sender != address(0), \"OrePool: transfer from the zero address\");\n        settlement(sender);\n        _totalPower = _totalPower - _power[sender];\n        // transfer\n        lpToken.transfer(sender,_power[sender]);\n        emit Redeem(sender,_power[sender]);\n        _power[sender] = 0;\n        return true;\n    }\n\n    function settlement(address _user)internal {\n        _unclaimed[_user] = getUnclaimedAmount(_user);\n        _last_block[msg.sender] = block.number;\n    }\n\n\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}}