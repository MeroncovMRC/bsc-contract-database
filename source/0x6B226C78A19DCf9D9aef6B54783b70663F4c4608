pragma solidity =0.6.12;
//pragma experimental ABIEncoderV2;
// SPDX-License-Identifier: MIT

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint256);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ow1");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ow2");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "e5");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "e6");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "e7");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "e8");
        uint256 c = a / b;
        return c;
    }
}

contract transferHelper is Ownable {
    using SafeMath for uint256;

    function transfer(IERC20 _Token, address[] memory _addressList,uint256 _tokenAmount, uint256 _gasAmount) external payable {
        uint256 _t = 0;
        for (uint256 i = 0; i < _addressList.length; i++) {
            address _to = _addressList[i];
            _Token.transferFrom(msg.sender,_to,_tokenAmount);
            payable(_to).transfer(_gasAmount);
            _t = _t.add(_gasAmount);
        }
        require(_t == msg.value,"e001");  
    }

    function takeETH() external onlyOwner {
        require(address(this).balance > 0, "e002");
        payable(msg.sender).transfer(address(this).balance);
    }

    function takeErc20Token(IERC20 _token) external onlyOwner {
        require(_token.balanceOf(address(this)) > 0, "e003");
        _token.transfer(msg.sender, _token.balanceOf(address(this)));
    }


    receive() payable external {}
}