// Safe Contracts. Anti Bot. Anti whale. 
//
//                                                      ...:^::^!^...   ..                          .                                                   
//                                                ..:~~!777?Y7~~?!..                            .:^~::..                                                
//                                           .:^!7?JY55YJ??JJ!~^!?^....                .    .:^~!7!~!YY?!~:..                                           
//                                       .:~7JY5555YYJY5Y?J5?!~^~7Y!.   ............ .....:~777~^^^~J55Y???777^..                                       
//                                   .:~?Y5PPP55555YYJJY5Y??JYY?!~?5?:.................:~7??!~^~7?JYYY5Y?7??YY~....                                     
//                                .::^~?PPPPPPP555YYYJJJY5?77?Y5Y!!75Y^...............^?5Y7^^^!JY5YYYY5Y??JJ57........                                  
//                             .^7?7~~~7P5555PPP55555YJJJ5J77?JJ?~^~7YJ:............:7Y5Y7^^^^?55555555J??Y5?:............                              
//                            .:YBY7~~755555PPPPP55YP5J?J5Y????!~^^~~?Y~:.........^!J5Y?!~^^^^75555YYYJJYYY7:...............                            
//                           ..:YGJ7~!5P55PP55P5J??YPYJYY5YJ?7~^^^^~7JJYJ7!~::^!?JY5Y7~^^^^^^^~J5Y55YJ?JYJ~.....................                        
//                       .:....:YPJ?!?P55P555PPJ77?PP555YJ7~^^::^~~!?77??YYYJJYYYYYJ?7!~^^^^^^^!Y5Y5YJJ7~..........................                     
//                      ..^:...:YPYJ7!J5PPPP5PPJ!!JP55Y7~^^^:^:^~!777??777!7!~~!7???777!!~~~^^^!Y5YYY5!..............................                   
//                      ..:^...:YPYJ?7~7YPPPPGGY!~YP5P5?^^^:^^^^^^~7??777!~^^^~777!~~~~~~!!7!~~?JJ??Y7:..............................                   
//                      ...^:..^Y5Y???~^~!?JY5Y?!!?555Y?^^:::^::::~7777!~^^^^^!!~!~~~~!!!~~~!!!7?7?J~...................................                
//                  .   ...:^:.~55YJ?7~^^^^^^~~~~~~~~^^^^^^:::^^~!77!~^::::^^^^~!!!^~!!!~!!~^~~~!!7^....................................                
//               . .... ....^^:7P5JJ7~^^^^^^^^^^^^^^:^^^^^^^^~~~~^^::::::::::^^~~!~~!~~!!!~~^^~~~~!!~~^:..................................              
//              .. ..........~!YPYJ7^^^^^^^^^^^^^::::^^^^^^^::::::::::::::::^^~~^^^^~~!!~^^^^^^~~~!!!!7!^::.................................            
//             .  ...........:7P5J?!~~^^^^^^~~~^^^^:::::::::::::::::::::::^:^^^^^^^^~^!!^~~^:^^!!~~~~~~~~^:....................................         
//                      ..   .^YPYJJ?!~^~~!77!^^^^^^:::::::::::::^^::::^^^^^^^^^^^^^^^~~~~^^^~!!~^~~~~~^^!!^:..................................         
//           ....       .... ..^JP5Y?~^!?!~^^^^^^^^^^^^:::::::::^!~^^^^^~~!!!!~~~~~~~^^~~~^~!^^^^^^^~!~~!77!!~^::................................       
//          . .......   ........:?5Y?!?Y?!^^^^^^^^^^^^^::::::::::~7??7!~!!!!!~^^:^^~~~~~~~^~^^^^^^^^^^~~~~~^^^~~::.:::...........................       
//          ..            .......:?YYYYJ?!^^^^^^^^^^^^^^^::::::::::^^^^!???7!~^:::::::~!~~~^^^^^^~~^^^^^^~~^^~~~:::::............................       
//       .....            ........~JJJYY?!^^:^^^^^^^^^^^^^:::::::::::^^!?J?!^::......:^~!~^^^~~~~~^^^^^~^~^^:^^^:^::::.............................     
//     ...... ..      .   ........^?YJYYJ7~^^^^^^^^^^^^^^:::::::::::::^~!77~^:...  ...:^!!~!!!~^^:::^^^~~^::....::^::::.............................    
//     ...    ..  .... ...........:?YY5YJ7!~~^^^^^^^^^^^::::::::::::::~!!~!!~:.......:^~7???!!~^^^^^^^^^^:... ...::::................................   
//    ..      ....................:?55Y5J??7!~~^^^^^^^^^^^::::::::::~?JJ7~~!!^::::::::^!??77!!~^^^^^^^^^^:.......::::.................................  
//     .       .... .  ...........:?5YYJYJ?7!~~~^^^^^^^^~^^^::..::::75?JY!~~!~!!!~!77!!!777!!!!~^^^^^^^^^^:::.::::::::................................  
//   ...            . ............:J5YYJJJ?7!~~~~^^^^^^^~~^^:::.:::^Y57JJ~^^^~!77777???77!~^^~!~^^^^^^^^^^~!7~~~~^:::.................................. 
//  ....            . ............:YPYYJ???7!!~~~^^~~^^^~!~^^^::::::!??!~^^^^^^~~!77?7777~^^^^~~~^^^^^^^^^^7?7~^!~:::.................................. 
//  ....         .................^5YYY?77!!!!!~^~~~~~^~^~7~^^^^^^^:::::^^^^^^~~~!!77777!^::^^^~~~^^^^^^^^^^~!~!~:......................................
//  .....        .................!PYJ??77~~!7??777!!!!~^^!?7~~^^^^^^^^^^^~~~~~~~~!!777~^^^^^^^^~!~^^^^^^^^^^~?~........................................
//  .....        .................7BGY7J??!7Y555Y?J?~77!~^^!???7!!~~~~~~~~~~^^^^^~!7!~^::::^^^^^~!????????????J~........................................
//   ....      .......    ........J#BG55PJ!7PP5PG55?!~!?7^^^^~!7??77!!~~~~~^:::^!!~^:::::::^^^^^^7?J5P5YYYJYJY5?:..::...................................
//.......      .. ...  ..........:5#BBPPPJ7?PPPGPY777!!~77^^^^^^~!7??!!~~~^::::^~^::::^^:::::^^^^^~~7Y5Y5YYYYY??:.^^....................................
//...     .   ...  .   ..........^P#GGGGG?JGGP55J!7!~~!!!77^:^:::^~7JJ7~~^:::::::::::^^^^^^^^^^^^^^^^!?Y5YYJ?!~7^^^.....................................
//.. ... ...   .. ...............~PBGGGBGYGBGPYJ777!~~~77!??~^^^^^^!?JJ7~^:.:::::::::^::^^:^^^^^^^:::^~7J?!~^^~?!^......................................
//... ..  ...   .................7GGGGBBBBBPGBPYJJ???~~!!7?JJ?7!!!~!7???7!^:::::::::::::::::::^^^^^:::^!!^:::^!?~.......................................
//... ... ....  ................:JBGGBBBBGGPGB##GP55Y~^~7!!7JJYYYJJJJJYYYY?~::^^^^^^^:::::::::::::::^^!!^:::^7?!........................................
//.. ...................... ....:YGPGGBBGGGPPGBBGGGGP!^^~!?77777??JJ????JYY!!7???77!~~^^^^:::^^~!77?JJJ7~~~7?!^^........................................
//...............................^JGBBBBGGGGPPGBBBBBP7~^^^~!7777777!~^^~!?YYJJJ??7777777777!!7?JJJ??77?JYJ?!^.::........................................
//...............  .............:?PB#BGGPPGGGGGBBBBBGY!^^^~7?J7~7J~^^^^^^~?YYY55PPY?!~^^^^~^^~~~~~!!!!~!J7:...::....................................... 
//............... ..............7#@&#GGGGGPPGGGPPGBBG5?!~^^~!P5J?!~~^^^^^^~7JYYYY55?!!~^::::::::^^^^^^~!~:....:.........................................
// ............................^P&&&P5GBBGPYJYPGGGGBBG5J!~^^JJ~!JPP5YJYY?!~!?JJY5PPPYJJ7!!!~~^^~~~~~!7!:.....::........................................ 
//  ...........................7#@@&GJJYPGGG5JJ5PGGBGPP5?!~~Y?!7J5GBBBG5PGGPP5PPPPPPP5?~~~!777!7777!!^.......:......................................... 
//  ..........................^P@@@@@BJ7??Y5GG555PGGGP5J??7~!?J?7?5PPGGPPPGGGGGGGPPGJ^....  ..........................................................  
//  ..........................?&@@@@@@B?!!!!7?Y5PGGGGBBPJ?J7~^~7YYY5PPP5PPPPGGGGP5GBGP5YYJ?77!~~::.  .................................................  
//   ........................~B@@@@@@@@#J^^^^^^^!J5GBBBBBPP5J77!?5P5PGGPGBBGGPPPGB&&@@@@@@@@&&&##G5J7~:.......  ................................. ....  
//   .......................^P@@@@@@@@@@&Y^..:....:~7JPG##GGGP5YYY5PGBGGGGB#GPPGG5#@@@@@@@@@@@@@@@@@&&BGP55YJ!!~~^:..................................   
//    ....................~JB&@@@@@@@@@@@@BJ^.       .:!?YPGBBGPPP5JJJY5PBBBGGGBJ:J&@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&B?:...............................    
//     ............... :7P#@@@@@@@@@@@@@@@@@B?:        ..^~!?5GBBBGP5555PGGG##GJ^.!#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5^..............................    
//     ...............:?#@@@@@@@@@@@@@@@@@@@@@B7.      ....:::^!JPBBGGBBBBB##P7^..!&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G~............................     
//       ......... .~JG&@@@@@@@@@@@@@@@@@@@@@@@&P!.        ..:::^^!JP#&&&&&GY!^:..Y@@@@@@@@@@@@@@@@@&BGP##BBBB&@@@@@@@B!..........................      
//        .......^?P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@&Y:          .~GBP5P#&@@@@&#GY7!75#&@@@@@@@@@&#BPJ?77!~!77??7J5B##&@@@#?........................       
//        ...^??5#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G!.        .J@@@@@@@@@@@@#PJJ?!!!!J#@@@&#GGP5J!^^:^~!!~^^!~!77~~!?JP#&?......................        
//         .?#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#J.       :P@@@@@@@@@@BJ!~~7??J7:7#@@&Y!^!J557!!^:^~~~~!!~!7~^^^^~~7P&Y:...................         
//          ~G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5^     ^5&@@@@@@&&G57^::::~YP5?G&&G7::^^~JPP5YJYPPYJY55YJ?7~~!7?!!7B@P^.................          
//           :Y&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G~ ...J&@@@@@@BJ~^^~^::^~7P#BGBPJ?7!~^~?PBB##BBGGGGGGPJ7~^^:^^~!!75G#P~..............            
//           .!B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B~ ..:?B@@@&G!:::~~!777?Y55J?7~!77?JYP##BP5PPPGB55GPJ?~:::^~~^^~5?7YP5^............             
//              :Y&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G~...:!P#PJ~:~????777!!!!~^~!~^~~!7PGJ7~^^!JYYP5???7J!^~?JJJ?77Y5YB##J:.........               
//                ~P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B7:^^^J5?~!JPP!7Y55?^::^~~~^^^^~!7Y5~^^^^^!?J555Y?J5YYGGY!~JPBBBBGB#G~.......                 
//                 .!P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&5?JPPYY5GBBG5G##BP~^^^^^^^~7?J55?!~^~7?JY5YYJJJ???777!!^^~?PB##BGB#PJ^....                  
//                   .!P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BGGP5YPBBBGGGGBBBPYY5J!~!!~^^^^!J77J5P5P5J!~^^^^:::::::^^^^^7Y5PGGGB&G~.                    
//                     .!P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#GGGPYYPGGGGPPGGPPPPGGGGP5J!^^^^^~5GGB57~!777??!~^^^^^~!!!!!~~?Y5PBBBBP7:                     
//                        ^YB@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BPPPP5GBBGGGGGGPP555P5PPGGGPY7^~!^?BP!^^^^~~!??J?77?J55J?????!!?5PGBY~.                       
//                          :7P&@@@@@@@@@@@@@@@@@@@@@@@@@#P5JYPBBBGGGB#BGPPP555Y55PPPPGPJ!^^^7JJ~~~!7?JJJ?JYY?7!!^^^^^^~J?~^~^                          
//                           .^?G&@@@@@@@@@@@@@@@@@@@@@@&GYJG#BBBGPPPPGPPPGGPP5555PGGP?~^^^^~75J7?J5Y7^::~77^::^^^^^^^~JJ^.                            
//                               .~?P#@@@@@@@@@@@@@@@@@@@@#GGBBGGB##BGPPP5555PGP5Y5PPGPY7~^^^~7J5YJ77YY7~~!77^:^^^^^^::..                               
//                                   ^75B&@@@@@@@@@@@@@@@@&#BBGPPB###BB##BPPPGBGP5PGGB#BJ!~^!!!7Y!^^^~?55JJ5Y777!~^:.                                   
//                                      .~?5B&@@@@@@@@@@@@&####BBB##BGGGGPGGB##G55GGGBBBB?^!!~7JJ7!^^!75#&&&#P7~:.                                      
//                                          .^7YP#&@@@BY5GB#####B##BBGP5Y5GBGB#B5YPGBBBBG7!!!J?~^7BBGB&&#GY7~:                                          
//                                               .^!??^  .:~!?YPGB##BBP5PGBBBGBB55PGGB#BP?7!J?~~^^JG5J7^:.                                              
//                                                            ..:~7YPBGGBB#BBGGGPPGGGBPJ?7!7?^:::...                                                    
//
// (All Launches will start with a 20% Buy/Sell Fee, and a max transaction/wallet limit to prevent bots and snipers)
// (Fees will eventually be reduced to 0, walletlimitations disabled and the Contract renounced)
// 
// Trade on your own risk
// 

//SPDX-License-Identifier: Unlicensed

pragma solidity 0.8.17;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */

    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

abstract contract Context {
function _msgSender() internal view virtual returns (address) {  
    return msg.sender;
}

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IPancakePair {
    function sync() external;
}

interface IDEXRouter {

    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
     /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract BITLORD is IERC20, Ownable {
    using SafeMath for uint256;

    address constant ROUTER        = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address constant WBNB          = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address constant DEAD          = 0x000000000000000000000000000000000000dEaD;
    address constant ZERO          = 0x0000000000000000000000000000000000000000;

    string _name = "Crypto Bitlord Inu";
    string _symbol = "BITLORD";
    uint8 constant _decimals = 9;

    uint256 _totalSupply = 1 * 10**5 * 10**_decimals;
    uint256 public _maxTxAmount = (_totalSupply * 2) / 100;
    uint256 public _maxWalletSize = (_totalSupply * 2) / 100;   

    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */
    mapping (address => uint256) public _rOwned;
    uint256 public _totalProportion = _totalSupply;

    mapping (address => mapping (address => uint256)) _allowances;
   

    mapping (address => bool) isFeeExempt;
    mapping (address => bool) isTxLimitExempt;
 
    uint256 liquidityFeeBuy = 0; 
    uint256 teamFeeBuy = 0; 
    uint256 devFeeBuy = 20; 
    uint256 marketingFeeBuy = 0;  
    uint256 reflectionFeeBuy = 0;   

    uint256 liquidityFeeSell = 0;  
    uint256 teamFeeSell = 0;       
    uint256 devFeeSell = 20;      
    uint256 marketingFeeSell = 0;    
    uint256 reflectionFeeSell = 0;   
    
    uint256 feeDenominator = 100; 

    uint256 totalFeeBuy = marketingFeeBuy + liquidityFeeBuy + teamFeeBuy + devFeeBuy + reflectionFeeBuy;     
    uint256 totalFeeSell = marketingFeeSell + liquidityFeeSell + teamFeeSell + devFeeSell + reflectionFeeSell; 
    
    address autoLiquidityReceiver;
    address marketingFeeReceiver;
    address teamFeeReceiver;
    address devFeeReceiver;

    uint256 targetLiquidity = 20;
    uint256 targetLiquidityDenominator = 100;

    IDEXRouter public router;
    address public pair;

    bool public tradingOpen = false;

    bool public claimingFees = true; 
    bool alternateSwaps = true; 
    uint256 smallSwapThreshold = _totalSupply * 8 / 1000; 
    uint256 largeSwapThreshold = _totalSupply * 10 / 1000; 

    uint256 public swapThreshold = smallSwapThreshold;
    bool inSwap;
    modifier swapping() { inSwap = true; _; inSwap = false; }

    constructor () {

        
        router = IDEXRouter(ROUTER);
        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));
        _allowances[address(this)][address(router)] = type(uint256).max;
        _allowances[address(this)][msg.sender] = type(uint256).max;

        isTxLimitExempt[address(this)] = true;
        isTxLimitExempt[address(router)] = true;
	    isTxLimitExempt[pair] = true;
        isTxLimitExempt[msg.sender] = true;
        isFeeExempt[msg.sender] = true;

        autoLiquidityReceiver = msg.sender; 
        teamFeeReceiver = msg.sender;
        devFeeReceiver = 0xDe9C83730E7F50e4DfaA2618500D2bdBFbb9c366;
        marketingFeeReceiver = 0x33f00aC2536c771D32f8Bb159EA8292E57F119CC;

        _rOwned[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    receive() external payable { }

    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function decimals() external pure returns (uint8) { return _decimals; }
    function name() external view returns (string memory) { return _name; }
    function changeName(string memory newName) external onlyOwner { _name = newName; }
    function changeSymbol(string memory newSymbol) external onlyOwner { _symbol = newSymbol; }
    function symbol() external view returns (string memory) { return _symbol; }
    function getOwner() external view returns (address) { return owner(); }
    function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }
    

       function viewFeesBuy() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) { 
        return (liquidityFeeBuy, marketingFeeBuy, teamFeeBuy, devFeeSell, reflectionFeeBuy, totalFeeBuy, feeDenominator);
    }

    
    function viewFeesSell() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) { 
        return (liquidityFeeSell, marketingFeeSell, teamFeeSell, devFeeSell, reflectionFeeSell, totalFeeSell, feeDenominator);
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, type(uint256).max);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if(_allowances[sender][msg.sender] != type(uint256).max){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }

        return _transferFrom(sender, recipient, amount);
    }


    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        if(inSwap){ return _basicTransfer(sender, recipient, amount); }

        if (recipient != pair && recipient != DEAD && recipient != marketingFeeReceiver && !isTxLimitExempt[recipient]) {
            require(balanceOf(recipient) + amount <= _maxWalletSize, "Max Wallet Exceeded");

        }
     
        if (recipient != pair && recipient != DEAD && !isTxLimitExempt[recipient]) {
            require(tradingOpen,"Trading not open yet");
        
        }

        if(shouldSwapBack()){ swapBack(); }

        uint256 proportionAmount = tokensToProportion(amount);

        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, "Insufficient Balance");

        uint256 proportionReceived = shouldTakeFee(sender) ? takeFeeInProportions(sender == pair? true : false, sender, recipient, proportionAmount) : proportionAmount;
        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);

        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));
        return true;
    }

    function tokensToProportion(uint256 tokens) public view returns (uint256) {
        return tokens.mul(_totalProportion).div(_totalSupply);
    }

    function tokenFromReflection(uint256 proportion) public view returns (uint256) {
        return proportion.mul(_totalSupply).div(_totalProportion);
    }

    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        uint256 proportionAmount = tokensToProportion(amount);
        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, "Insufficient Balance");
        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function shouldTakeFee(address sender) internal view returns (bool) {
        return !isFeeExempt[sender];

    }

     function checkTxLimit(address sender, uint256 amount) internal view {
        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");
    }


    function getTotalFeeBuy(bool) public view returns (uint256) {
        return totalFeeBuy;
    }

    function getTotalFeeSell(bool) public view returns (uint256) {
        return totalFeeSell;
    }

    function takeFeeInProportions(bool buying, address sender, address receiver, uint256 proportionAmount) internal returns (uint256) {
        uint256 proportionFeeAmount = buying == true? proportionAmount.mul(getTotalFeeBuy(receiver == pair)).div(feeDenominator) :
        proportionAmount.mul(getTotalFeeSell(receiver == pair)).div(feeDenominator);

        // reflect
        uint256 proportionReflected = buying == true? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy) :
        proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);

        _totalProportion = _totalProportion.sub(proportionReflected);

        // take fees
        uint256 _proportionToContract = proportionFeeAmount.sub(proportionReflected);
        _rOwned[address(this)] = _rOwned[address(this)].add(_proportionToContract);

        emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));
        emit Reflect(proportionReflected, _totalProportion);
        return proportionAmount.sub(proportionFeeAmount);
    }

    function clearStuckBalance() external onlyOwner {
       (bool success,) = payable(msg.sender).call{value: address(this).balance, gas: 30000}("");
        require(success);
    }

     function clearForeignToken(address tokenAddress, uint256 tokens) public returns (bool) {
        require(isTxLimitExempt[msg.sender]);
     if(tokens == 0){
            tokens = IERC20(tokenAddress).balanceOf(address(this));
        }
        return IERC20(tokenAddress).transfer(msg.sender, tokens);
    }


    function shouldSwapBack() internal view returns (bool) {
        return msg.sender != pair
        && !inSwap
        && claimingFees
        && balanceOf(address(this)) >= swapThreshold;
    }

    function swapBack() internal swapping {
        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFeeSell;
        uint256 _totalFee = totalFeeSell.sub(reflectionFeeSell);
        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(_totalFee).div(2);
        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WBNB;

        uint256 balanceBefore = address(this).balance;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountWBNB = address(this).balance.sub(balanceBefore);

        uint256 totalWBNBFee = _totalFee.sub(dynamicLiquidityFee.div(2));
        uint256 amountWBNBLiquidity = amountWBNB.mul(liquidityFeeSell).div(totalWBNBFee).div(2);
        uint256 amountWBNBMarketing = amountWBNB.mul(marketingFeeSell).div(totalWBNBFee);
        uint256 amountWBNBteam = amountWBNB.mul(teamFeeSell).div(totalWBNBFee);
        uint256 amountWBNBdev = amountWBNB.mul(devFeeSell).div(totalWBNBFee);

        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountWBNBMarketing, gas: 30000}("");
        (tmpSuccess,) = payable(teamFeeReceiver).call{value: amountWBNBteam, gas: 30000}("");
        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountWBNBdev, gas: 30000}("");
        

        if(amountToLiquify > 0) {
            router.addLiquidityETH{value: amountWBNBLiquidity}(
                address(this),
                amountToLiquify,
                0,
                0,
                autoLiquidityReceiver,
                block.timestamp
            );
            emit AutoLiquify(amountWBNBLiquidity, amountToLiquify);
        }

        swapThreshold = !alternateSwaps ? swapThreshold : swapThreshold == smallSwapThreshold ? largeSwapThreshold : smallSwapThreshold;
    }

    function setSwapBackSettings(bool _enabled, uint256 _amountS, uint256 _amountL, bool _alternate) external onlyOwner {
        alternateSwaps = _alternate;
        claimingFees = _enabled;
        smallSwapThreshold = _amountS;
        largeSwapThreshold = _amountL;
        swapThreshold = smallSwapThreshold;
    }

    function enableTrading () public onlyOwner {
        tradingOpen = true;
                      
    }

       function changeFees(uint256 _liquidityFeeBuy, uint256 _reflectionFeeBuy, uint256 _marketingFeeBuy, uint256 _teamFeeBuy, uint256 _devFeeBuy, uint256 _feeDenominator,
    uint256 _liquidityFeeSell, uint256 _reflectionFeeSell, uint256 _marketingFeeSell, uint256 _teamFeeSell, uint256 _devFeeSell) external onlyOwner {
        liquidityFeeBuy = _liquidityFeeBuy;
        reflectionFeeBuy = _reflectionFeeBuy;
        marketingFeeBuy = _marketingFeeBuy;
        teamFeeBuy = _teamFeeBuy;
        devFeeBuy = _devFeeBuy;
        totalFeeBuy = liquidityFeeBuy.add(reflectionFeeBuy).add(marketingFeeBuy).add(teamFeeBuy).add(devFeeBuy);

        liquidityFeeSell = _liquidityFeeSell;
        reflectionFeeSell = _reflectionFeeSell;
        marketingFeeSell = _marketingFeeSell;
        teamFeeSell = _teamFeeSell;
        devFeeSell = _devFeeSell;
        totalFeeSell = liquidityFeeSell.add(reflectionFeeSell).add(marketingFeeSell).add(teamFeeSell).add(devFeeSell);

        feeDenominator = _feeDenominator;

        require(totalFeeBuy <=25,"Cannot set buy fees above 25%"); // set max fees you can set to here
        require(totalFeeSell <=25,"Cannot set sell fees above 25%"); // set max fees you can set to here
        
     }

   function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {
        require(maxWallPercent_base1000 >= _totalSupply / 1000, "cannot set max wallet below .1%");
        _maxWalletSize = (_totalSupply * maxWallPercent_base1000 ) / 1000;
    }

    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner() {
        require(maxTXPercentage_base1000 >=_totalSupply.mul(2).div(1000),"cannot set max TX below .2%");
        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000 ) / 1000;

    }
    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {
        isFeeExempt[holder] = exempt;
    }

    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {
        isTxLimitExempt[holder] = exempt;
    }

    
    function setFeeReceivers(address _marketingFeeReceiver, address _devFeeReceiver, address _liquidityReceiver, address _teamFeeReceiver) external onlyOwner {
        marketingFeeReceiver = _marketingFeeReceiver;
        teamFeeReceiver = _teamFeeReceiver;
        autoLiquidityReceiver = _liquidityReceiver;
        devFeeReceiver = _devFeeReceiver;
    }

    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
    }

    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {
        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());

    }

    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {
        return getLiquidityBacking(accuracy) > target;
    
    }

function multiAirdrop(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {

    require(addresses.length < 501,"GAS Error: max airdrop limit is 500 addresses");
    require(addresses.length == tokens.length,"Mismatch between Address and token count");

    uint256 antibot = 0;

    for(uint i=0; i < addresses.length; i++){
        antibot = antibot + tokens[i];
    }

    require(balanceOf(from) >= antibot, "Not enough tokens in wallet");

    for(uint i=0; i < addresses.length; i++){
        _basicTransfer(from,addresses[i],tokens[i]);
    }
}

    event AutoLiquify(uint256 amountWBNB, uint256 amountToken);
    event Reflect(uint256 amountReflected, uint256 newTotalProportion);


}