// File: rlt-new/interfaces/IRltRateStructs.sol



pragma solidity 0.8.4;

interface IRltRateStructs {
    struct RateConfig {
        uint32 burnRate;
        uint32 feeRate;
        uint32 holdersRate;
        uint32 parentRate;
        uint32 fomoRate;
        uint32 bigHolderBurnRate;
        uint64 bigHolderRate;
    }
}
// File: rlt-new/interfaces/IRltRateSetting.sol



pragma solidity 0.8.4;


interface IRltRateSetting is IRltRateStructs {
    function getFeeRates() external view returns(RateConfig memory);

    // function getBigHolderBurnRate() external view returns(uint256);
}
// File: rlt-new/interfaces/IParentPool.sol



pragma solidity ^0.8.0;

interface IParentPool {
    function addReward(address parent,uint256 parentAmount) external returns(uint256 addedAmount);
}
// File: rlt-new/interfaces/IFomoPool.sol



pragma solidity ^0.8.0;

interface IFomoPool {
    function refreshTrade(address trader,uint reward) external;
}
// File: libs/IRlinkCore.sol



pragma solidity ^0.8.0;

interface IRlinkCore {
    /**
     * @dev add address relation
     * @param _child: address of the child
     * @param _parent: address of the parent
     * @return reward rlt amount for add relation
     */
    function addRelation(address _child, address _parent) external returns(uint256);

    /**
     * @dev query child and parent is associated
     * @param child: address of the child
     * @param parent: address of the parent
     * @return child and parent is associated
     */
    function isParent(address child,address parent) external view returns(bool);

    /**
     * @dev query parent of address
     * @param account: address of the child
     * @return parent address
     */
    function parentOf(address account) external view returns(address);

    /**
     * @dev distribute token
     * you must approve bigger than 'amount' allowance of token for rlink relation contract before call
     * require (incentiveAmount + parentAmount + grandpaAmount) <= amount
     * @param token: token address to be distributed
     * @param to: to address
     * @param amount: total amount of distribute
     * @param incentiveAmount: amount of incentive reward
     * @param parentAmount: amount of parent reward
     * @param grandpaAmount: amount of grandpa reward
     */
    function distribute(
        address token,
        address to,
        uint256 amount,
        uint256 incentiveAmount,
        uint256 parentAmount,
        uint256 grandpaAmount
    ) external returns(uint256 distributedAmount);
}
// File: libs/IERC20.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: libs/IERC20Metadata.sol



pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: libs/Context.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/GSN/Context.sol
/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
// File: libs/Pausable.sol



pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: libs/Ownable.sol


pragma solidity ^0.8.0;


// File: @openzeppelin/contracts/ownership/Ownable.sol
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
// File: libs/Blacklistable.sol

//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


abstract contract BlackListable is Ownable {

    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////
    function getBlackListStatus(address _maker) public view returns (bool) {
        return isBlackListed[_maker];
    }

    mapping (address => bool) public isBlackListed;
    
    function addBlackList(address _evilUser) public onlyOwner {
        isBlackListed[_evilUser] = true;
        emit AddedBlackList(_evilUser);
    }

    function removeBlackList(address _clearedUser) public onlyOwner {
        isBlackListed[_clearedUser] = false;
        emit RemovedBlackList(_clearedUser);
    }

    modifier notBlackListed {
        require(!isBlackListed[_msgSender()],"BlackListable: blacklisted");
        _;
    }

    event AddedBlackList(address _user);

    event RemovedBlackList(address _user);

}
// File: libs/Address.sol


pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
// File: libs/SafeMath.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/math/SafeMath.sol
/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * _Available since v2.4.0._
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
// File: rlt-new/rlt-token.sol



pragma solidity 0.8.4;











contract Rlt is Ownable,Pausable,BlackListable,IERC20Metadata,IRltRateStructs {
    using Address for address;
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    //mainnet: 
    string private constant _name = "RLT";
    //mainnet: 
    string private constant _symbol = "RLT";
    uint256 private constant _initSupply = 10000000000 * 1e18;
    uint256 private _totalSupply = _initSupply;

    /// @notice The EIP-712 typehash for the contract's domain
    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");

    /// @notice The EIP-712 typehash for the permit struct used by the contract
    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    bytes32 public immutable DOMAIN_SEPARATOR;

    /// @notice A record of states for signing / validating signatures
    mapping (address => uint) public nonces;

    address private constant _blackHole = address(0);

    mapping(address => bool) public isWhiteList;

    // mapping(address => bool) public isSwapPair;

    mapping(address => bool) public isDisRmLpAccount;

    uint256 public rewardPerTokenStored;
    mapping(address => uint256) public userRewardPerTokenPaid;
    uint256 public totalCapital;

    address public fomoPool;
    address public parentPool;
    address public feeTo; 

    IRltRateSetting public rateSetting;

    struct FeeAmounts {
        uint256 burnAmount;
        uint256 fomoAmount;
        uint256 parentAmount;
        uint256 feeAmount;
        uint256 holdersAmount;
        uint256 bigHolderBurnAmount;
        uint256 bigHolderAmount;
    }

    constructor(
        address _feeTo,
        address _rateSetting
    ){

        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), _getChainId(), address(this)));

        feeTo = _feeTo;
        rateSetting = IRltRateSetting(_rateSetting);

        isWhiteList[msg.sender] = true;
        isWhiteList[_feeTo] = true;
        // isWhiteList[address(0xfF76a21685c7FB06C6461D9FAc81783bF9bbd09D)] = true;

        // isDisRmLpAccount[address(0x638eb1Ce4b7bb4c104e3E1A86d09A84069c469A3)] = true;

        _balances[msg.sender] = _totalSupply;
        totalCapital = _initSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public pure override returns (string memory) {
        return _name;
    }

    function symbol() public pure override returns (string memory) {
        return _symbol;
    }

    function decimals() public pure override returns (uint8) {
        return 18;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        uint capital = _balances[account];
        if(capital == 0){
            return 0;
        }
        return account != address(0) && !account.isContract() ? capital.add(calcPendingReward(account,capital)) : capital;
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
        require(block.timestamp <= deadline, "ERC20permit: expired");
        // bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), _getChainId(), address(this)));
        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));
        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "ERC20permit: invalid signature");
        require(signatory == owner, "ERC20permit: unauthorized");

        _approve(owner, spender, amount);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        //require(recipient != address(0), "ERC20: transfer to the zero address");
        require(!isBlackListed[sender] && !isBlackListed[recipient],"_beforeTokenTransfer: forbidden");

        _beforeTokenTransfer(sender, recipient, amount);

        uint capitalIncr = _updateUserCapital(sender);
        capitalIncr = capitalIncr.add(_updateUserCapital(recipient));
        capitalIncr = capitalIncr.add(_updateUserCapital(feeTo));

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        uint validCapital_ = totalCapital.add(capitalIncr);
        bool senderIsContract = sender.isContract();
        bool recipientIsContract = recipient.isContract();
        if(senderIsContract){
            validCapital_ = validCapital_.add(amount);
        }
        if(recipientIsContract){
            validCapital_ = validCapital_.sub(amount);
        }

        uint recipientAmount = amount;
        if(sender != address(0) && recipient != address(0) && !isWhiteList[sender] && !isWhiteList[recipient]){
            bool senderIsPair = senderIsContract;
            bool recipientIsPair = recipientIsContract;
            require(!senderIsPair || !isDisRmLpAccount[recipient],"RLT: rm lp disabled");

            FeeAmounts memory fees = _calcTransferFees(amount);
            if(senderIsPair || recipientIsPair){

                // remove liquidity and buy token                
                if(fees.parentAmount > 0){                    
                    address parentPool_ = parentPool;
                    if(parentPool_ != address(0)){                        
                        recipientAmount = recipientAmount.sub(fees.parentAmount);
                        address child_ = recipientIsPair && !senderIsPair ? sender : recipient;
                        uint addedAmount = IParentPool(parentPool_).addReward(child_, fees.parentAmount);
                        _balances[parentPool_] = _balances[parentPool_].add(addedAmount);
                        emit Transfer(sender, parentPool_, addedAmount);
                        fees.burnAmount = fees.burnAmount + fees.parentAmount.sub(addedAmount);
                    }
                }

                if(fees.fomoAmount > 0){
                    address fomoPool_ = fomoPool;
                    if(fomoPool_ != address(0)){
                        recipientAmount = recipientAmount - fees.fomoAmount;                    
                        _balances[fomoPool_] = _balances[fomoPool_].add(fees.fomoAmount);
                        emit Transfer(sender, fomoPool_, fees.fomoAmount);        
                    }
                    IFomoPool(fomoPool_).refreshTrade(tx.origin,fees.fomoAmount);
                }

                if(fees.feeAmount > 0){
                    address feeTo_ = feeTo;
                    recipientAmount = recipientAmount - fees.feeAmount;  
                    _balances[feeTo_] = _balances[feeTo_].add(fees.feeAmount);
                    emit Transfer(sender, feeTo_, fees.feeAmount); 
                }

                recipientAmount = recipientAmount.sub(fees.holdersAmount);
            }else{
                fees.burnAmount = 0;
                fees.fomoAmount = 0;
                fees.parentAmount = 0;
                fees.feeAmount = 0;
                fees.holdersAmount = 0;
            }

            if(senderBalance >= fees.bigHolderAmount && !senderIsPair && sender != address(0) && recipient != address(0)){
                fees.burnAmount = fees.burnAmount + fees.bigHolderBurnAmount;
            }

            if(fees.burnAmount > 0){
                recipientAmount = recipientAmount.sub(fees.burnAmount);
                _balances[_blackHole] = _balances[_blackHole].add(fees.burnAmount);
                emit Transfer(sender, _blackHole, fees.burnAmount);                    
            }
            
            if(!recipient.isContract()){
                validCapital_ = validCapital_.sub(amount - recipientAmount + fees.feeAmount);
            }else {
                validCapital_ = validCapital_.add(fees.feeAmount);
            }

            if(fees.holdersAmount > 0 && validCapital_ > 0){
                rewardPerTokenStored = rewardPerTokenStored.add(fees.holdersAmount * 1e18 / validCapital_);
            }
        }
        
        totalCapital = validCapital_;   
        _balances[sender] = senderBalance.sub(amount);        
        _balances[recipient] = _balances[recipient].add(recipientAmount);
        emit Transfer(sender, recipient, recipientAmount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    function _updateUserCapital(address account) internal returns(uint256) {
        uint pendingReward = 0;
        if(account != address(0) && !account.isContract()){
            uint capital = _balances[account];
            if(capital > 0){
                pendingReward = calcPendingReward(account,capital);
                if(pendingReward > 0){
                    _balances[account] = capital.add(pendingReward);
                }
            }
            userRewardPerTokenPaid[account] = rewardPerTokenStored;
        }

        return pendingReward;
    }

    function _calcTransferFees(uint amount) internal view returns(FeeAmounts memory fees) {
        RateConfig memory rates_ = rateSetting.getFeeRates();
        require(rates_.burnRate + rates_.fomoRate + rates_.holdersRate + rates_.parentRate + rates_.feeRate + rates_.bigHolderBurnRate <= 1e9,"fee rates excceds 1e9");
        require(rates_.bigHolderRate <= 1e9,"big holder rate exceeds 1e9");

        fees.burnAmount = amount.mul(rates_.burnRate).div(1e9);
        fees.fomoAmount = amount.mul(rates_.fomoRate).div(1e9);
        fees.holdersAmount = amount.mul(rates_.holdersRate).div(1e9);
        fees.parentAmount = amount.mul(rates_.parentRate).div(1e9);
        fees.feeAmount = amount.mul(rates_.feeRate).div(1e9);
        fees.bigHolderBurnAmount = amount.mul(rates_.bigHolderBurnRate).div(1e9);
        fees.bigHolderAmount = _initSupply.mul(rates_.bigHolderRate).div(1e9);
    }

    function earened(address account) public view returns(uint){
        uint capital = _balances[account];
        return account != address(0) && !account.isContract() ? calcPendingReward(account,capital) : 0;
    }

    function calcPendingReward(address account,uint256 capital) public view returns(uint){
        return capital.mul(rewardPerTokenStored.sub(userRewardPerTokenPaid[account])).div(1e18);
    }

    // function _updateBalance(address account) internal {
    //     //uint pendingReward = 0;
    //     if(account != address(0) && !account.isContract()){
    //         uint capital = _balances[account];
    //         if(capital > 0){
    //             uint pendingReward = calcPendingReward(account);
    //             if(pendingReward > 0){
    //                 _balances[account] = capital.add(pendingReward);
    //             }
    //         }
    //         userRewardPerHolderPaid[account] = rewardPerHolderStored;
    //     }

    //     //return pendingReward;
    // }


    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal whenNotPaused {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal {}
    
    function _getChainId() internal view returns (uint) {
        uint256 chainId;
        assembly { chainId := chainid() }
        return chainId;
    }

    function mint(address to,uint256 amount) public onlyOwner {        
        _updateUserCapital(to);
        _mint(to, amount);
        if(!to.isContract()){
            totalCapital = totalCapital.add(amount);
        }
    }

    function burn(address account, uint256 amount) public onlyOwner {
        _updateUserCapital(account);
        _burn(account, amount);
        if(!account.isContract()){
            totalCapital = totalCapital.sub(amount);
        }
    }

    function addWhiteList(address account) external onlyOwner {
        require(account != address(0),"account can not be address 0");
        isWhiteList[account] = true;
    }

    function removeWhiteList(address account) external onlyOwner {
        require(account != address(0),"account can not be address 0");
        isWhiteList[account] = false;
    }

    // function addSwapPair(address pair) external onlyOwner {
    //     require(pair != address(0),"pair can not be address 0");
    //     isSwapPair[pair] = true;
    // }

    // function removeSwapPair(address pair) external onlyOwner {
    //     require(pair != address(0),"pair can not be address 0");
    //     isSwapPair[pair] = false;
    // }

    function setFeeTo(address _feeTo) public onlyOwner {
        feeTo = _feeTo;
        isWhiteList[_feeTo] = true;
    }

    function setFomoPool(address _fomoPool) public onlyOwner {
        require(_fomoPool != address(0),"_fomoPool can not be address 0");
        fomoPool = _fomoPool;
        isWhiteList[_fomoPool] = true;
    }

    function setParentPool(address _parentPool) public onlyOwner {
        require(_parentPool != address(0),"_parentPool can not be address 0");
        parentPool = _parentPool;
        isWhiteList[_parentPool] = true;
    }

    function setRateSetting(address _rateSetting) public onlyOwner {
        require(_rateSetting != address(0) && _rateSetting.isContract(),"_rateSetting must be contract address");
        rateSetting = IRltRateSetting(_rateSetting);
    }

    function setBatch(address _rateSetting,address _feeTo,address _fomoPool,address _parentPool) external {
        setRateSetting(_rateSetting);
        setFeeTo(_feeTo);
        setFomoPool(_fomoPool);
        setParentPool(_parentPool);
    }

    function feeRates() external view returns(RateConfig memory){
        return rateSetting.getFeeRates();
    }

    function feeTos() external view returns(address _feeTo,address _fomoPool,address _parentPool) {
        _feeTo = feeTo;
        _fomoPool = fomoPool;
        _parentPool = parentPool;
    }

    function addDisRmLpAccount(address account) external onlyOwner {
        require(account != address(0),"account can not be address 0");
        isDisRmLpAccount[account] = true;
    }

    function removeDisRmLpAccount(address account) external onlyOwner {
        require(account != address(0),"account can not be address 0");
        isDisRmLpAccount[account] = false;
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
       _unpause();
    }
}