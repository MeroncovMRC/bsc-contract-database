pragma solidity ^0.8.0;

contract Token {
    string public name = "BURN 3 Percent";
    string public symbol = "3BURN";
    uint256 public decimals = 18;
    uint256 public totalSupply = 1000000000 * 10 ** decimals;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= balanceOf[msg.sender], "Insufficient balance");

        uint256 burnAmount = (value * 3) / 100;
        uint256 transferAmount = value - burnAmount;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += transferAmount;

        emit Transfer(msg.sender, to, transferAmount);
        emit Burn(msg.sender, burnAmount);

        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Insufficient allowance");

        uint256 burnAmount = (value * 3) / 100;
        uint256 transferAmount = value - burnAmount;

        balanceOf[from] -= value;
        balanceOf[to] += transferAmount;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, transferAmount);
        emit Burn(from, burnAmount);

        return true;
    }

    function balances(address account) public view returns (uint256) {
        return balanceOf[account];
    }
}