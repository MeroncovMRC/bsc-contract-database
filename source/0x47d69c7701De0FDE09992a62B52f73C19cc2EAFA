{"BIF_V2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract BIFInvestmentContract is Ownable {\n    struct Investment {\n        address investor;\n        uint256 amount;\n        uint8 planId; // 0 for UltraSafe, 1 for MidCap, 2 for SmallCap\n        uint256 startTimestamp;\n        uint256 lockDuration;\n        bool withdrawn;\n        uint256 totalProfit;\n    }\n\n    uint256 launchTime;\n\n    IERC20 public usdtToken;\n    IERC20 public busdToken;\n    address public treasury;\n\n    mapping(address =\u003e mapping(uint256 =\u003e Investment)) public investments;\n    mapping(address =\u003e uint256) public investmentCount;\n    mapping(address =\u003e uint256) public totalInvestedAmount;\n    mapping(address =\u003e bool) public earlyInvestors;\n    mapping(address =\u003e bool) public frozenAccounts;\n\n    event Invested(\n        address indexed investor,\n        uint256 investmentId,\n        uint256 amount,\n        uint256 lockterm\n    );\n    event Withdrawn(\n        address indexed investor,\n        uint256 investmentId,\n        uint256 amount\n    );\n    event Compounded(uint256 investmentId, uint256 amount, uint256 newLockTerm);\n\n    event Whitelisted(address[] investors);\n    event AccountFrozen(address investor, string reason);\n    event ETHCollected(address collector, uint256 amount);\n    event IERC20TokenWithdrawn(address collector, uint256 amount);\n    event FundsWithdrawn(address treasury, uint256 usdtAmount, uint256 busdAmount, string reason);\n\n    constructor(\n        address _usdtTokenAddress,\n        address _busdTokenAddress,\n        address _treasury\n    ) {\n        require(\n            _usdtTokenAddress != address(0) \u0026\u0026 _treasury != address(0),\n            \"Can\u0027t set to zero address\"\n        );\n        usdtToken = IERC20(_usdtTokenAddress);\n        busdToken = IERC20(_busdTokenAddress);\n        treasury = _treasury;\n        launchTime = block.timestamp;\n    }\n\n    function getInvestmentIds(address wallet)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory investmentIds = new uint256[](investmentCount[wallet]);\n\n        for (uint256 i = 1; i \u003c= investmentCount[wallet]; i++) {\n            investmentIds[i - 1] = i;\n        }\n\n        return investmentIds;\n    }\n\n    function invest(\n        IERC20 _tokenAddress,\n        uint256 _amount,\n        uint8 _planId,\n        uint256 _lockduration\n    ) external {\n        require(_amount \u003e 100 * 1e18, \"Amount must be greater than $100\");\n        require(_lockduration \u003e= 30, \"choose 30 days as minimum lock period\");\n        require(\n            _tokenAddress == usdtToken || _tokenAddress == busdToken,\n            \"Use either USDT or BUSD only!\"\n        );\n\n        if (block.timestamp \u003c= launchTime + 89 days) {\n            require(\n                earlyInvestors[msg.sender],\n                \"Only whitelisted addresses can participate in first 90 days!\"\n            );\n        }\n\n        if (_planId \u003e 0) {\n            require(\n                totalInvestedAmount[msg.sender] \u003e= 1000 * 1e18,\n                \"Minimum $1000 should be invested in UltraSafe fund!\"\n            );\n        }\n\n        uint256 investmentId = investmentCount[msg.sender] + 1;\n\n        _tokenAddress.transferFrom(msg.sender, address(this), _amount);\n\n        uint256 lockterm = _lockduration * 1 days;\n\n        investments[msg.sender][investmentId] = Investment({\n            // uniqueId: _uniqueId,\n            investor: msg.sender,\n            amount: _amount,\n            planId: _planId,\n            startTimestamp: block.timestamp,\n            lockDuration: lockterm,\n            withdrawn: false,\n            totalProfit: 0\n        });\n\n        investmentCount[msg.sender]++;\n        totalInvestedAmount[msg.sender] += _amount;\n\n        emit Invested(msg.sender, investmentId, _amount, lockterm);\n    }\n\n    function withdrawInvestment(\n        uint256 _investmentId,\n        uint256 _amount,\n        uint256 nonce,\n        bytes memory _signature\n    ) external {\n        Investment storage investment = investments[msg.sender][_investmentId];\n\n        require(\n            investment.investor == msg.sender,\n            \"Only the investor can withdraw their investment\"\n        );\n        require(!investment.withdrawn, \"Investment has already been withdrawn\");\n        require(\n            !frozenAccounts[msg.sender],\n            \"This account has been frozen on account of hack!\"\n        );\n\n        bytes32 message = prefixed(\n            keccak256(abi.encodePacked(msg.sender, _amount, nonce, this))\n        );\n\n        require(\n            recoverSigner(message, _signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        if (\n            block.timestamp \u003c\n            investment.startTimestamp + investment.lockDuration\n        ) {\n            uint256 earlyWithdrawalPenalty = investment.amount / 100;\n            uint256 withdrawableAmnt = investment.amount -\n                earlyWithdrawalPenalty;\n\n            require(\n                usdtToken.balanceOf(address(this)) \u003e= withdrawableAmnt,\n                \"Not enough balance in the contract\"\n            );\n\n            usdtToken.transfer(msg.sender, withdrawableAmnt);\n        } else {\n            uint256 profitEarned = _amount - investment.amount;\n            investment.totalProfit += profitEarned;\n\n            require(\n                usdtToken.balanceOf(address(this)) \u003e= _amount,\n                \"Not enough balance in the contract\"\n            );\n\n            usdtToken.transfer(msg.sender, _amount);\n        }\n\n        investment.withdrawn = true;\n\n        emit Withdrawn(msg.sender, _investmentId, _amount);\n    }\n\n    function _compound(\n        uint256 _investmentId,\n        uint256 _amount,\n        uint256 _lockduration,\n        uint256 nonce,\n        bytes memory _signature\n    ) external {\n        Investment storage investment = investments[msg.sender][_investmentId];\n\n        require(\n            investment.investor == msg.sender,\n            \"Only the investor can withdraw their investment\"\n        );\n        require(!investment.withdrawn, \"Investment has already been withdrawn\");\n        require(\n            !frozenAccounts[msg.sender],\n            \"This account has been frozen on account of hack!\"\n        );\n        require(\n            block.timestamp \u003e=\n                investment.startTimestamp + investment.lockDuration,\n            \"Investment is locked!\"\n        );\n\n        bytes32 message = prefixed(\n            keccak256(abi.encodePacked(msg.sender, _amount, nonce, this))\n        );\n\n        require(\n            recoverSigner(message, _signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        uint256 newLockTerm = _lockduration * 1 days;\n\n        investment.amount += _amount;\n        investment.lockDuration = newLockTerm;\n\n        emit Compounded(_investmentId, _amount, newLockTerm);\n    }\n\n    function prefixed(bytes32 _hash) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n            );\n    }\n\n    function recoverSigner(bytes32 _message, bytes memory _signature)\n        internal\n        pure\n        returns (address)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        (v, r, s) = splitSignature(_signature);\n\n        return ecrecover(_message, v, r, s);\n    }\n\n    function splitSignature(bytes memory _signature)\n        internal\n        pure\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        )\n    {\n        require(_signature.length == 65, \"Invalid signature length\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := byte(0, mload(add(_signature, 96)))\n        }\n\n        return (v, r, s);\n    }\n\n    // Admin priveledges\n\n    function _addEarlyInvestors(address[] memory accounts, bool state) external onlyOwner {\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\n            earlyInvestors[accounts[i]] = state;\n        }\n    }\n\n    function freezeAccount(\n        address _investor,\n        string memory _reason,\n        uint256 nonce,\n        bytes memory _signature\n    ) external onlyOwner {\n        require(!frozenAccounts[_investor], \"Account is already frozen!\");\n\n        bytes32 message = prefixed(\n            keccak256(abi.encodePacked(msg.sender, _reason, nonce, this))\n        );\n\n        require(\n            recoverSigner(message, _signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        frozenAccounts[_investor] = true;\n\n        emit AccountFrozen(_investor, _reason);\n    }\n\n    function collectETH() external onlyOwner {\n        uint256 fundsToSend = address(this).balance;\n        bool sent = payable(treasury).send(fundsToSend);\n        require(sent, \"Failed to send Ether\");\n\n        emit ETHCollected(treasury, fundsToSend);\n    }\n\n    function withdrawOtherTokens(address _token) external onlyOwner {\n        require(_token != address(0), \"can\u0027t withdraw zero token\");\n        require(\n            IERC20(_token) != usdtToken \u0026\u0026 IERC20(_token) != busdToken,\n            \"Use collectUSDT method!\"\n        );\n        uint256 fundsToSend;\n\n        fundsToSend = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, fundsToSend);\n\n        emit IERC20TokenWithdrawn(msg.sender, fundsToSend);\n    }\n\n    function collectFunds(string memory _reason) external onlyOwner {\n        uint256 usdtToSend = usdtToken.balanceOf(address(this));\n        uint256 busdToSend = busdToken.balanceOf(address(this));\n\n        if (usdtToSend \u003e 0 || busdToSend \u003e 0) {\n            usdtToken.transfer(treasury, usdtToSend);\n            busdToken.transfer(treasury, busdToSend);\n        }\n\n        emit FundsWithdrawn(treasury, usdtToSend, busdToSend, _reason);\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}}