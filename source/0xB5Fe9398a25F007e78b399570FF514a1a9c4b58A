// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Интерфейс для контракта BEP20
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// Основной контракт для AtomicHeartFun
contract AtomicHeartFun is IBEP20 {
    string private _name = "AtomicHeartFun";
    string private _symbol = "ATOHER";
    uint8 private _decimals = 10;
    uint256 private _totalSupply = 10_000_000 * 10**_decimals;
    uint256 private _marketingFee = 4;
    address private _owner;
    address private _marketingWallet = 0xab9da3BbC27FaBf394B0B4D514e4F27af5a378A4;
    uint256 public maxPurchaseAmount;
    bool public salesAllowed;
    uint256 public salesBlockedUntil;

    mapping(address => bool) private _whitelist;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => uint256) private _lastRewardTime;

    // Константы для функции вознаграждения
    uint256 private constant REWARD_PERIOD = 30 days;
    uint256 private constant BASE_REWARD_PERCENTAGE = 300; // 3% * 100
    uint256 private constant REWARD_PERCENTAGE_INCREMENT = 250; // 2.5% * 100
    uint256 private constant SCALE_FACTOR = 10**18;

    modifier onlyOwner() {
        require(msg.sender == _owner, "Caller is not the owner");
        _;
    }

    constructor() {
        _owner = msg.sender;
        _balances[_msgSender()] = _totalSupply;
        _whitelist[_marketingWallet] = true; // Добавляем маркетинговый адрес в белый список
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _updateAccountReward(_msgSender(), recipient);
        _transfer(_msgSender(), recipient, amount);
    return true;
}

function allowance(address owner, address spender) external view override returns (uint256) {
    return _allowances[owner][spender];
}

function approve(address spender, uint256 amount) external override returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
}

function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
    _updateAccountReward(sender, recipient);
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][msg.sender];
    require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance");
    _approve(sender, msg.sender, currentAllowance - amount);

    return true;
}

function setMarketingWallet(address newMarketingWallet) external onlyOwner {
    require(newMarketingWallet != address(0), "NewmarketingWallet cannot be the zero address");
    _marketingWallet = newMarketingWallet;
}

function setMarketingFee(uint256 newMarketingFee) external onlyOwner {
    require(newMarketingFee <= 100, "New marketing fee should be less than or equal to 100");
    _marketingFee = newMarketingFee;
}

function setMaxPurchaseAmount(uint256 newMaxPurchaseAmount) external onlyOwner {
    maxPurchaseAmount = newMaxPurchaseAmount;
}

function renounceOwnership() external onlyOwner {
    _owner = address(0);
}

function toggleSales(bool enabled, uint256 duration) external onlyOwner {
    salesAllowed = enabled;
    if (enabled) {
        salesBlockedUntil = block.timestamp + duration;
    } else {
        salesBlockedUntil = 0;
    }
}

function addToWhitelist(address account) external onlyOwner {
    _whitelist[account] = true;
}

function removeFromWhitelist(address account) external onlyOwner {
    _whitelist[account] = false;
}

function isWhitelisted(address account) external view returns (bool) {
    return _whitelist[account];
}

function calculateReward(address account) public view returns (uint256) {
    uint256 holdingPeriod = block.timestamp - _lastRewardTime[account];
    uint256 rewardCycles = holdingPeriod / REWARD_PERIOD;
    uint256 accountBalance = _balances[account];
    uint256 totalReward = 0;

    for (uint256 i = 0; i < rewardCycles; i++) {
        uint256 cycleRewardPercentage = (BASE_REWARD_PERCENTAGE + (i * REWARD_PERCENTAGE_INCREMENT)) * SCALE_FACTOR;
        uint256 cycleReward = (accountBalance * cycleRewardPercentage) / (100 * SCALE_FACTOR);
        totalReward += cycleReward;
    }

    return totalReward;
}

function _updateAccountReward(address sender, address recipient) internal {
    if (_lastRewardTime[sender] > 0) {
        uint256 senderReward = calculateReward(sender);
        _balances[sender] += senderReward;
        _totalSupply += senderReward;
        emit Transfer(address(0), sender, senderReward);
    }
    _lastRewardTime[sender] = block.timestamp;

    if (_lastRewardTime[recipient] > 0) {
        uint256 recipientReward = calculateReward(recipient);
        _balances[recipient] += recipientReward;
        _totalSupply += recipientReward;
        emit Transfer(address(0), recipient, recipientReward);
    }
    _lastRewardTime[recipient] = block.timestamp;
}

function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "BEP20: transfer from the zero address");
    require(recipient != address(0), "BEP20: transfer to the zero address");
    require(amount > 0, "BEP20: transfer amount must be greater than zero");

    if (!_whitelist[sender] && !_whitelist[recipient]) {
        require(salesAllowed, "Sales are currently not allowed");
        require(block.timestamp > salesBlockedUntil, "Sales are blocked until a specific time");
        require(amount <= maxPurchaseAmount, "Purchase amount exceeds the maximum allowed");
    }

    uint256 marketingAmount = (amount * _marketingFee) / 100;
    uint256 transferAmount = amount - marketingAmount;

    _balances[sender] -= amount;
    _balances[recipient] += transferAmount;
    _balances[_marketingWallet] += marketingAmount;

    emit Transfer(sender, recipient, transferAmount);
    emit Transfer(sender, _marketingWallet, marketingAmount);
}

function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "BEP20: approve from the zero address");
    require(spender != address(0), "BEP20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
}

function _msgSender() internal view returns (address) {
    return msg.sender;
}

function getOwner() external view override returns (address) {
    return _owner;
}

}