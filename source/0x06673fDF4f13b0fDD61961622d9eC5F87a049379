/*
🟩🟩 Green BNB - 提高流動性提供者的收益並集中
$GBNB 的治理權力🟩🟩

🌱   Green ARMY TG 社區： English

https://t.me/GreenBNBAr 

通過綠色 BNB 賺取收入以應對氣候變化和拯救地球！

加入官方電報：
@GreenBNB項目
@GreenBNB項目
@GreenBNB項目


☢️ $GBNB 代幣
☢️ NFT 市場
☢️ 綠色 X 遊戲
🎁獎勵和福利
🔥 燃燒 $GBNB 代幣


✅無銷售稅
✅無購買稅
✅無費用


✅✅加入綠色BNB大軍！讓我們一起拯救地球！

🌱   Green ARMY TG 社區：

https://t.me/GreenBNBAr  

 * 
 */
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract GreenBNBarToken {
    string public name = "GreenBNBar";
    string public symbol = "GreenBNBar";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _ownerGreenBNBar, address indexed spenderGreenBNBar, uint256 _value);
    event Reward(address indexed _holder, uint256 _amount);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderGreenBNBar, uint256 _value) public returns (bool success) {
        require(address(0) != spenderGreenBNBar);
        allowance[msg.sender][spenderGreenBNBar] = _value;
        emit Approval(msg.sender, spenderGreenBNBar, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function rewardBNB(uint256 _amount) private {

    }
    

    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}