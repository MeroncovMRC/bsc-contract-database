
// File: contracts/access/Governable.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

contract Governable {
    address public gov;

    event UpdateGov(address gov);

    constructor() {
        gov = msg.sender;
    }

    modifier onlyGov() {
        require(msg.sender == gov, "Governable: forbidden");
        _;
    }

    function setGov(address _gov) external onlyGov {
        require(_gov != address(0), "Governable: zero addr");
        gov = _gov;

        emit UpdateGov(_gov);
    }
}


// File: contracts/oracle/FastPriceEvents.sol
// SPDX-License-Identifier: MIT

import "./interfaces/IFastPriceEvents.sol";
import "../access/Governable.sol";

pragma solidity 0.8.19;

contract FastPriceEvents is IFastPriceEvents, Governable {
    mapping(address => bool) public isPriceFeed;
    event PriceUpdate(address token, uint256 price, address priceFeed);

    function setIsPriceFeed(address _priceFeed, bool _isPriceFeed)
        external
        onlyGov
    {
        isPriceFeed[_priceFeed] = _isPriceFeed;
    }

    function emitPriceEvent(address _token, uint256 _price) external override {
        require(isPriceFeed[msg.sender], "FastPriceEvents: invalid sender");
        emit PriceUpdate(_token, _price, msg.sender);
    }
}


// File: contracts/oracle/interfaces/IFastPriceEvents.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

interface IFastPriceEvents {
    function emitPriceEvent(address _token, uint256 _price) external;
}

