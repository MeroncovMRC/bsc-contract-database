// Sources flattened with hardhat v2.13.1 https://hardhat.org

// File @openzeppelin/contracts-old/GSN/Context.sol@v3.0.0

pragma solidity ^0.6.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () internal { }

    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File @openzeppelin/contracts-old/access/Ownable.sol@v3.0.0

pragma solidity ^0.6.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File @openzeppelin/contracts-old/math/SafeMath.sol@v3.0.0

pragma solidity ^0.6.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


// File @openzeppelin/contracts-old/token/ERC20/IERC20.sol@v3.0.0

pragma solidity ^0.6.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File @openzeppelin/contracts-old/utils/Address.sol@v3.0.0

pragma solidity ^0.6.2;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}


// File @openzeppelin/contracts-old/token/ERC20/SafeERC20.sol@v3.0.0

pragma solidity ^0.6.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves.

        // A Solidity high level call has three parts:
        //  1. The target address is checked to verify it contains contract code
        //  2. The call itself is made, and success asserted
        //  3. The return value is decoded, which in turn checks the size of the returned data.
        // solhint-disable-next-line max-line-length
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File @openzeppelin/contracts-old/utils/Pausable.sol@v3.0.0

pragma solidity ^0.6.0;

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor () internal {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     */
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     */
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File @openzeppelin/contracts-old/math/Math.sol@v3.0.0

pragma solidity ^0.6.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}


// File contracts/FusionRewardDistributor.sol

// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;






interface INFT {
    function compoundForTokenId(uint256, uint256) external;
    function individualShares(uint256) external view returns (uint256);
    function totalShares() external view returns (uint256);
    function ownerOf(uint256) external view returns (address);
    function tokenURI(uint256) external view returns (string memory);
    function tokenByWallet(address) external view returns (uint256);
}

interface IFarmV2 {
    function withdraw(uint256, uint256) external;
    function deposit(uint256, uint256) external;
    function poolInfo(uint256) external view returns (PoolInfo memory);
    struct PoolInfo {
       IERC20 token; // Address of LP token contract.
       uint256 allocPoint; // How many allocation points assigned to this pool. tSHAREs to distribute per block.
       uint256 lastRewardTime; // Last time that tSHAREs distribution occurs.
       uint256 accESharePerShare; // Accumulated tSHAREs per share, times 1e18. See below.
       bool isStarted; // if lastRewardTime has passed
    }
}

contract FusionRewardDistributor is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    INFT public nft;
    IERC20 public eshare;
    IFarmV2 public farm;
    uint256 public poolId;
    
    mapping(uint256 => mapping(address => uint256)) public last_distPoints;
    mapping(uint256 => mapping(address => uint256)) public receiversAllocPoints;
    mapping(uint256 => uint256) public totalReceiversAllocPoints;
    mapping(address => bool) public verifiedReceivers;

    uint256 public esharePending;
    uint256 public eshareCompounded;
    uint256 public eshareClaimed;
    uint256 public totalDistributePoints;
    uint256 public constant MULTIPLIER = 10e18;
    event Compound(uint256 indexed id, uint256 amount);
    event Claim(uint256 indexed id, uint256 amount);

    constructor(address _nft, address _eshare, address _farm, uint256 _poolId) public {
        nft = INFT(_nft);
        eshare =IERC20( _eshare);
        farm = IFarmV2(_farm);
        poolId = _poolId;
    }

    // receive() external payable {}

    function setNft(address _nft) external onlyOwner {
        nft = INFT(_nft);
    }

    function verifyReceiver(address _receiver, bool _verified) external onlyOwner {
        verifiedReceivers[_receiver] = _verified;
    }

    function setReceiver(uint256 _id, uint256 _allocPoints) public {
        address _receiver = _msgSender();
        require (verifiedReceivers[_receiver], "Caller is not verified receiver");
        totalReceiversAllocPoints[_id] = totalReceiversAllocPoints[_id].sub(receiversAllocPoints[_id][_receiver]).add(_allocPoints);
        receiversAllocPoints[_id][_receiver] = _allocPoints;
        if (last_distPoints[_id][_receiver] == 0) {
            last_distPoints[_id][_receiver] = totalDistributePoints;
        }
    }

    function approveToken(address token, address spender) external onlyOwner {
		if (IERC20(token).allowance(address(this), address(spender)) == 0) {
			IERC20(token).safeApprove(spender, uint256(-1));
		}
	}

    function setPaused(bool pause) external onlyOwner {
		pause ? _pause() : _unpause();
	}

    function withdraw_z115(address token, address to, uint256 amnt) external onlyOwner {
        if (token == address(0)) {
            payable(to).transfer(amnt);
        } else {
            if (token == address(eshare)) {
                eshareCompounded = eshareCompounded.sub(amnt);
            }
            IERC20(token).safeTransfer(to, amnt);
        }
    }
    
    function migrateDistPoints(uint256 _id, address _receiver, uint256 _last_distPoints) external onlyOwner {
        last_distPoints[_id][_receiver] =  _last_distPoints;
    }
    
    function migrateReceiver(uint256 _id, address _receiver, uint256 _allocPoints) external onlyOwner {
        if (receiversAllocPoints[_id][_receiver] == 0) {
            receiversAllocPoints[_id][_receiver] = _allocPoints;
            totalReceiversAllocPoints[_id] = totalReceiversAllocPoints[_id].add(_allocPoints);
        }
    }

    function migrateGlobals(
        uint256 _esharePending, 
        uint256 _eshareCompounded, 
        uint256 _eshareClaimed, 
        uint256 _totalDistributePoints
    ) external onlyOwner {
        esharePending = _esharePending;
        eshareCompounded = _eshareCompounded;
        eshareClaimed = _eshareClaimed;
        totalDistributePoints = _totalDistributePoints;
    }

    function totalShares() public view returns (uint256) {
        return nft.totalShares();
    }
    
    function userShares(address account) public view returns (uint256) {
        return nft.individualShares(nft.tokenByWallet(account));
    }

    function getShare(address _account) external view returns (uint256) {
        return userShares(_account).mul(MULTIPLIER).div(totalShares());
    }

    function getDistributionRewards(uint256 _id, address _receiver) external view returns (uint256) {
        return _getDistributionRewards(_id, _receiver);
    }

    function _getDistributionRewards(uint256 _id, address _receiver) internal view returns (uint256) {
        uint256 _points = last_distPoints[_id][_receiver];
        if (_points == 0) return 0;

        uint256 _distributionRewards = nft.individualShares(_id).mul(totalDistributePoints.sub(_points)).div(MULTIPLIER);
        uint256 _receiverAllocPoints = receiversAllocPoints[_id][_receiver];
        uint256 _totalReceiversAllocPoints = totalReceiversAllocPoints[_id];
        
        if (_totalReceiversAllocPoints == 0 && _receiver == address(this)) 
            return _distributionRewards;

        return verifiedReceivers[_receiver] && _receiverAllocPoints > 0 && _totalReceiversAllocPoints > 0
            ? _distributionRewards.mul(_receiverAllocPoints).div(_totalReceiversAllocPoints)
            : 0;
    }

    function getTotalRewardsFor(address _sender, address _receiver) external view returns (uint256) {
        return getTotalRewards(nft.tokenByWallet(_sender), _receiver);
    }
    
    function getTotalRewards(uint256 _id, address _receiver) public view returns (uint256) {
        uint256 _individualShares = nft.individualShares(_id);
        uint256 _totalShares = nft.totalShares();
        uint256 _points = last_distPoints[_id][_receiver];
        return _totalShares > 0 && _individualShares > 0 && _points > 0
            ? _getDistributionRewards(_id, _receiver).add(
                    getPoolBalance()
                        .mul(_individualShares)
                        .div(_totalShares)
            ) : 0;
    }

    function compound() external {
        compoundFor(nft.tokenByWallet(_msgSender()), true);
    }

    function compoundFor(uint256 _id, bool _claimBefore) public whenNotPaused {

        if (last_distPoints[_id][address(this)] == 0) {
            last_distPoints[_id][address(this)] = totalDistributePoints;
        }
        if (_claimBefore) {
            _tryClaimFarm();
        }

        if (totalReceiversAllocPoints[_id] == 0) {

            uint256 distributed = _getDistributionRewards(_id, address(this));

            if (distributed > 0) {
            
                last_distPoints[_id][address(this)] = totalDistributePoints;
                esharePending = esharePending.sub(distributed);
                eshareCompounded = eshareCompounded.add(distributed);

                nft.compoundForTokenId(distributed, _id);

                _tryClaimFarm();

                if (last_distPoints[_id][address(this)] != totalDistributePoints)
                    last_distPoints[_id][address(this)] = totalDistributePoints;

                emit Compound(_id, distributed);
            }
        }
    }

    function compoundForMany(uint256[] calldata _ids) external {
        _tryClaimFarm();

        for (uint256 i = 0; i < _ids.length; i++) {
            compoundFor(_ids[i], false);
        }
    }

    function claimFor(uint256 _id, bool _claimBefore) public whenNotPaused {
        address _receiver = _msgSender();
        uint256 _totalReceiversAllocPoints = totalReceiversAllocPoints[_id];
        uint256 _receiversAllocPoints = receiversAllocPoints[_id][_receiver];
        require(verifiedReceivers[_receiver], "Caller is not verified receiver");
        require(_receiversAllocPoints > 0 && _totalReceiversAllocPoints > 0, "Caller has no allocation points");

        if (last_distPoints[_id][_receiver] == 0) {
            last_distPoints[_id][_receiver] = totalDistributePoints;
        }
        if (_claimBefore) {
            _tryClaimFarm();
        }

        uint256 rewards = _getDistributionRewards(_id, _receiver);

        if (rewards > 0) {
        
            esharePending = esharePending.sub(rewards);
            eshareClaimed = eshareClaimed.add(rewards);
            last_distPoints[_id][_receiver] = totalDistributePoints;

            eshare.safeTransfer(_receiver, rewards);

            emit Claim(_id, rewards);
        }
    }

    function claimForMany(uint256[] calldata _ids) external {
        _tryClaimFarm();

        for (uint256 i = 0; i < _ids.length; i++) {
            claimFor(_ids[i], false);
        }
    }

    function _distributeRewards() internal {
        uint256 _poolBalance = getPoolBalance();
        uint256 _totalShares = nft.totalShares();

        if (_poolBalance > 0 && _totalShares > 0) {
            totalDistributePoints = totalDistributePoints.add(_poolBalance.mul(MULTIPLIER).div(_totalShares));
            esharePending = esharePending.add(_poolBalance);
        }
    }


    function distributeRewards() external {
        _distributeRewards();
    }

    function getTokenURI(address account) external view returns (string memory) {
        return nft.tokenURI(nft.tokenByWallet(account));
    }

    function getBalance() public view returns (uint256) {
        return eshare.balanceOf(address(this));
    }

    function getPoolBalance() public view returns (uint256) {
        return getBalance().sub(esharePending).sub(eshareCompounded);
    }

    function lastClaimTime() public view returns (uint256) {
        return farm.poolInfo(poolId).lastRewardTime;
    }

    function updateRewardsAndPoints(uint256 _id) external {
        require(_msgSender() == address(nft), "Caller is not MicroGridNFT");
        _tryClaimFarm();
        compoundFor(_id, false);
    }

    function _tryClaimFarm() internal {
        address farmAddr = address(farm);
        bytes4 functionSelector = farm.withdraw.selector;
        uint256 _poolId = poolId;
        uint256 _amount = 0;

        assembly {
            let ptr := mload(0x40)          // Load free memory pointer
            mstore(ptr, functionSelector)  // Store function selector
            mstore(add(ptr, 0x04), _poolId) // Store poolId argument after the function selector
            mstore(add(ptr, 0x24), _amount) // Store amount argument after the poolId

            // Call the external function and ignore the success value using 'pop()'
            pop(call(
                gas(),                   // Forward all available gas
                farmAddr,                // Address of the farm contract
                0,                       // No value transfer
                ptr,                     // Input (function selector, poolId, and amount)
                0x44,                    // Input size (4 bytes for function selector + 32 bytes for poolId + 32 bytes for amount)
                0,                       // Output pointer (0 bytes, since we don't expect any output)
                0                        // Output size (0 bytes, since we don't expect any output)
            ))
        }

        _distributeRewards();
    }

    function adminClaimFarm(bool _internalCall) external onlyOwner {
        if (_internalCall) {
            _tryClaimFarm();
        } else {
            farm.withdraw(poolId, 0);
            _distributeRewards();
        }
    }

    function adminDepositFarm(uint256 _amount) external onlyOwner {
        farm.poolInfo(poolId).token.approve(address(farm), _amount);
        farm.deposit(poolId, _amount);
        farm.poolInfo(poolId).token.approve(address(farm), 0);

        // _tryClaimFarm();
    }

    function adminWithdrawFarm(uint256 _amount, address _to) public onlyOwner {
        farm.withdraw(poolId, _amount);
        farm.poolInfo(poolId).token.transfer(_to, _amount);
        _tryClaimFarm();
    }

    function adminWithdrawFarm(uint256 _amount) external onlyOwner {
        adminWithdrawFarm(_amount, address(this));
    }

    function setPoolInfo(IERC20 _eshare, IFarmV2 _farm, uint256 _pid) external onlyOwner {
        eshare = _eshare;
        farm = _farm;
        poolId = _pid;
    }

    /**
     * @notice Performs a generic transaction.
     * @param _target The address for the transaction.
     * @param _value The value for the transaction.
     * @param _data The data of the transaction.
     */
    function invoke_z115(
        address _target,
        uint256 _value,
        bytes memory _data
    ) external onlyOwner returns (bytes memory _result) {
        bool success;
        (success, _result) = _target.call{value: _value}(_data);
        if (!success) {
            // solhint-disable-next-line no-inline-assembly
            assembly {
                returndatacopy(0, 0, returndatasize())
                revert(0, returndatasize())
            }
        }
    }
}