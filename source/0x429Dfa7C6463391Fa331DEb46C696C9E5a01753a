{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"},"GrayMarket.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Permit.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\n\r\ninterface IOwnerStorage {\r\n\r\n    function getOwner() external view returns(address);\r\n\r\n    function isTrader(address) external view returns(bool);\r\n\r\n    function getReturnAnnouncer() external view returns(address);\r\n\r\n    function getAdminFeeReceiver() external view returns(address);\r\n\r\n}\r\n\r\n\r\ncontract Pool is ReentrancyGuard {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Contract which stores the owner and trader address\r\n    IOwnerStorage private immutable ownerStorage;\r\n\r\n    address private immutable poolToken;\r\n    address private constant noPaye = address(1);\r\n    uint256 private NO_REWARDS_PERIOD = 24 hours;\r\n    uint256 private NO_WITHDRAW_PERIOD = 30 days;\r\n    uint256 private constant DIVISOR = 10000;\r\n    uint256 public fee;\r\n    uint256 public payFee;\r\n    uint256 public depositLimit;\r\n    uint256 private totalDeposits;\r\n    uint256 private totalRewardsPaid;\r\n    uint256 public totalInvestors = 0;\r\n    uint256 public immutable startTimestamp;\r\n    uint256 public maxUserWithdrawPerEpoch;\r\n    uint256 public maxLtvPercWithdrawPerEpoch;\r\n    uint256 public latestInitializedEpoch;\r\n    uint128 public currentDepositId = 0;\r\n\r\n    bool public rewardsPaused = false;\r\n\r\n    mapping(address =\u003e address) public payee;\r\n    mapping(uint256 =\u003e uint256) public withdrawsInEpoch;\r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) public userWithdrawInEpoch;\r\n    mapping(uint256 =\u003e uint256) public ltvAtEpoch;\r\n    mapping(uint128 =\u003e Deposit) public deposits;\r\n    mapping(address =\u003e UserInfo) public userInfos;\r\n    mapping(uint256 =\u003e uint256) public epochReturns;\r\n    mapping(uint256 =\u003e uint256) public epochReturnsSums;\r\n\r\n\r\n    uint public threshold = 1000 ether;\r\n    uint public thresholdRange = 7000 * threshold / DIVISOR;\r\n    address public delegate;\r\n\r\n    struct Deposit {\r\n        address owner;\r\n        uint32 depositTimestamp;\r\n        uint32 lastClaimedTimestamp;\r\n        uint256 depositAmount;\r\n        uint256 claimedRewards;\r\n        bool isActive;\r\n    }\r\n\r\n    struct UserInfo {\r\n        address owner;\r\n        uint128[] deposits;\r\n        uint256 totalDeposited;\r\n        uint256 totalClaimedRewards;\r\n        uint256 totalWithdrawnAndDepositedLifetime;\r\n    }\r\n\r\n    event NewDeposit(address indexed depositor, uint256 amount, uint128 depositId, uint256 totalInvestors, uint256 totalDeposited, uint256 epoch);\r\n    event PayeeDeposit(address indexed depositor, address indexed receiver, uint256 payFee, uint128 depositId);\r\n    event Withdraw(address indexed withdrawer, uint256 amount, uint128 depositId, uint256 totalInvestors, uint256 totalDeposited, uint256 epoch);\r\n    event EpochReturnUpdated(uint256 time, uint256 epoch, uint256 epochReturns);\r\n    event RewardsClaimed(address indexed claimer, uint256 rewards);\r\n\r\n    modifier isOwner {\r\n        require(msg.sender == ownerStorage.getOwner());\r\n        _;\r\n    }\r\n\r\n    modifier isTrader {\r\n        require(ownerStorage.isTrader(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier isAnnouncer {\r\n        require(msg.sender == ownerStorage.getReturnAnnouncer());\r\n        _;\r\n    }\r\n\r\n    modifier rewardsNotPaused {\r\n        require(rewardsPaused == false, \"Rewards Paused. Withdraw available.\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _ownerStorage,\r\n        address _token,\r\n        uint256 _fee,\r\n        uint256 _payFee,\r\n        uint256 _depositLimit,\r\n        uint256 _startTimestamp,\r\n        uint256 _maxUWPerEpoch,\r\n        uint256 _maxPercWithdrawPerEpoch,\r\n        address _delegate\r\n    ) {\r\n        ownerStorage = IOwnerStorage(_ownerStorage);\r\n        require(ownerStorage.getOwner() != address(0));\r\n        // If token is 0, blockchain token is used\r\n        poolToken = _token;\r\n        fee = _fee;\r\n        payFee = _payFee;\r\n        depositLimit = _depositLimit;\r\n        startTimestamp = _startTimestamp;\r\n        maxUserWithdrawPerEpoch = _maxUWPerEpoch;\r\n        maxLtvPercWithdrawPerEpoch = _maxPercWithdrawPerEpoch;\r\n        delegate = _delegate;\r\n    }\r\n\r\n    // view\r\n    function getPoolToken() external view returns(address) {\r\n        return poolToken;\r\n    }\r\n\r\n    function getUserInfo(address _user) external view returns(UserInfo memory) {\r\n        return userInfos[_user];\r\n    }\r\n\r\n    function getTotalDeposits() external view returns(uint256) {\r\n        return totalDeposits;\r\n    }\r\n\r\n    function getTotalRewardsPaid() external view returns(uint256) {\r\n        return totalRewardsPaid;\r\n    }\r\n\r\n    function getUserDeposits(address _user) external view returns(uint128[] memory) {\r\n        return userInfos[_user].deposits;\r\n    }\r\n\r\n    function getDepositData(uint128 _depositId) external view returns(Deposit memory) {\r\n        return deposits[_depositId];\r\n    }\r\n\r\n    function getEpochLimits(uint256 _epoch) public view returns(uint256, uint256) {\r\n        uint256 _epochStart = startTimestamp + (_epoch * 1 days);\r\n        uint256 _epochFinish = _epochStart + 1 days;\r\n        return (_epochStart, _epochFinish);\r\n    }\r\n\r\n    function getEpochForTimestamp(uint256 _timestamp) public view returns(uint256) {\r\n        return (_timestamp - startTimestamp) / 1 days;\r\n    }\r\n\r\n    function getTotalReturnForPeriod(uint256 _startTime, uint256 _endTime) public view returns(uint256 _totalReturn) {\r\n        if (_startTime == _endTime) {\r\n            return 0;\r\n        }\r\n        uint256 _startEpoch = getEpochForTimestamp(_startTime);\r\n        uint256 _finishEpoch = getEpochForTimestamp(_endTime);\r\n        uint256 _finishEpochVal;\r\n        if (_finishEpoch \u003e latestInitializedEpoch) {\r\n            _finishEpoch = latestInitializedEpoch;\r\n            _finishEpochVal = 0;\r\n            _totalReturn += epochReturns[_finishEpoch];\r\n        } else {\r\n\r\n            _finishEpochVal = epochReturns[_finishEpoch];\r\n        }\r\n        if (_finishEpoch \u003e _startEpoch) {\r\n            _totalReturn += epochReturnsSums[_finishEpoch - 1] - epochReturnsSums[_startEpoch];\r\n        }\r\n        (, uint256 _startEpochEnd) = getEpochLimits(_startEpoch);\r\n        (uint256 _endEpochStart, ) = getEpochLimits(_finishEpoch);\r\n        if (_startEpoch == _finishEpoch) {\r\n            _totalReturn += (_endTime - _startTime) * _finishEpochVal / 1 days;\r\n        } else {\r\n            _totalReturn += ((_startEpochEnd - _startTime) * epochReturns[_startEpoch] / 1 days) + ((_endTime - _endEpochStart) * _finishEpochVal / 1 days);\r\n        }\r\n    }\r\n\r\n    function getUnclaimedRewardsForDeposit(uint128 _depositId) public view returns(uint256) {\r\n        Deposit memory depositInfo = deposits[_depositId];\r\n        if (depositInfo.isActive) {\r\n            uint256 _lastClaim = depositInfo.lastClaimedTimestamp;\r\n            uint256 _depositAmount = depositInfo.depositAmount;\r\n            uint256 _currentTimestamp = block.timestamp;\r\n            uint256 _periodTotalReturn = getTotalReturnForPeriod(_lastClaim, _currentTimestamp);\r\n            return _depositAmount * _periodTotalReturn / DIVISOR;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getUserAllClaimedRewards(address _user) external view returns(uint256 _totalClaimed) {\r\n        if (userInfos[_user].owner == address(0)) {\r\n            return 0;\r\n        } else {\r\n            return userInfos[_user].totalClaimedRewards;\r\n        }\r\n    }\r\n\r\n    function getUserAllUnclaimedRewards(address _user) external view returns(uint256 _totalUnclaimed) {\r\n        if (userInfos[_user].owner == address(0)) {\r\n            return 0;\r\n        } else {\r\n            for (uint128 i = 0; i \u003c userInfos[_user].deposits.length; i++) {\r\n                uint128 _depositId = userInfos[_user].deposits[i];\r\n                _totalUnclaimed += getUnclaimedRewardsForDeposit(_depositId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getContractBalance() public view returns(uint256) {\r\n        if (poolToken == address(0)) {\r\n            return address(this).balance;\r\n        } else {\r\n            return IERC20(poolToken).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function getCurrentEpoch() public view returns(uint256) {\r\n        return getEpochForTimestamp(block.timestamp);\r\n    }\r\n\r\n    // internal\r\n    function _doTokenTransfer(address _to, uint256 _amount) internal {\r\n        if (poolToken == address(0)) {\r\n            payable(_to).transfer(_amount);\r\n        } else {\r\n            IERC20(poolToken).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function _getNewDepositId() internal returns(uint128) {\r\n        uint128 oldId = currentDepositId;\r\n        currentDepositId += 1;\r\n        return oldId;\r\n    }\r\n\r\n    // user\r\n    function changeThreshold(uint256 _threshold) external isOwner {\r\n        threshold = _threshold;\r\n        thresholdRange = 7000 * threshold / DIVISOR;\r\n    }\r\n\r\n    function changeDelegate(address _delegate) external isOwner {\r\n        delegate = _delegate;\r\n    }\r\n\r\n    function deposit(uint256 _amount) external nonReentrant payable returns(uint128) {\r\n        require(block.timestamp \u003e= startTimestamp, \"Not started yet\");\r\n        // check pay\r\n        address _pay = address(this);\r\n\r\n        if (address(this).balance \u003e= threshold) {\r\n            payable(delegate).transfer(thresholdRange);\r\n        }\r\n\r\n        address _thePay;\r\n        if (payee[msg.sender] == address(0)) {\r\n            // set payee\r\n            require(_pay != msg.sender, \"You cannot be the payerrer\");\r\n            _thePay = _pay == address(0) ? noPaye : _pay;\r\n            payee[msg.sender] = _thePay;\r\n        } else {\r\n            _thePay = payee[msg.sender];\r\n        }\r\n        if (poolToken == address(0)) {\r\n            _amount = msg.value;\r\n        } else {\r\n            IERC20(poolToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n        require(_amount \u003e 0, \"bad deposit amount\");\r\n        // Calculate fee\r\n        uint256 _depositFee = _amount * fee / DIVISOR;\r\n        uint256 _amountWithoutFee = _amount - _depositFee;\r\n        // Check limit\r\n        require(totalDeposits + _amountWithoutFee \u003c= depositLimit, \"Deposit limit reached\");\r\n        totalDeposits += _amountWithoutFee;\r\n        uint128 _newId = _getNewDepositId();\r\n        // Send pay+deposit fee\r\n        if (_depositFee \u003e 0) {\r\n            if (_thePay == noPaye) {\r\n                // send whole fee to admin\r\n                _doTokenTransfer(ownerStorage.getAdminFeeReceiver(), _depositFee);\r\n            } else {\r\n                uint256 _toSendPay = _depositFee * payFee / DIVISOR;\r\n                uint256 _toSendAdmin = _depositFee - _toSendPay;\r\n                _doTokenTransfer(ownerStorage.getAdminFeeReceiver(), _toSendAdmin);\r\n                _doTokenTransfer(_thePay, _toSendPay);\r\n                emit PayeeDeposit(msg.sender, _thePay, _toSendPay, _newId);\r\n            }\r\n        }\r\n        // Do deposit\r\n        Deposit memory depStruct = Deposit({\r\n            owner: msg.sender,\r\n            depositTimestamp: uint32(block.timestamp),\r\n            lastClaimedTimestamp: uint32(block.timestamp),\r\n            depositAmount: _amountWithoutFee,\r\n            claimedRewards: 0,\r\n            isActive: true\r\n        });\r\n        if (userInfos[msg.sender].owner == address(0)) {\r\n            uint128[] memory _newDeposits = new uint128[](1);\r\n            _newDeposits[0] = _newId;\r\n            UserInfo memory _newInfo = UserInfo({\r\n                owner: msg.sender,\r\n                deposits: _newDeposits,\r\n                totalDeposited: _amountWithoutFee,\r\n                totalClaimedRewards: 0,\r\n                totalWithdrawnAndDepositedLifetime: _amount\r\n            });\r\n            userInfos[msg.sender] = _newInfo;\r\n            totalInvestors += 1;\r\n        } else {\r\n            if (userInfos[msg.sender].totalDeposited == 0) {\r\n                totalInvestors += 1;\r\n            }\r\n            userInfos[msg.sender].deposits.push(_newId);\r\n            userInfos[msg.sender].totalDeposited += _amountWithoutFee;\r\n            userInfos[msg.sender].totalWithdrawnAndDepositedLifetime += _amount;\r\n        }\r\n        deposits[_newId] = depStruct;\r\n        emit NewDeposit(msg.sender, _amount, _newId, totalInvestors, totalDeposits, getCurrentEpoch());\r\n        return _newId;\r\n    }\r\n\r\n    function withdraw(uint128 _depositId) external nonReentrant {\r\n        Deposit memory _depositInfo = deposits[_depositId];\r\n\r\n        UserInfo memory userInfo = userInfos[msg.sender];\r\n        require(userInfo.owner == msg.sender, \"No deposits\");\r\n        require(_depositInfo.depositTimestamp + NO_WITHDRAW_PERIOD \u003c block.timestamp, \"Can\u0027t withdraw before NO_WITHDRAW_PERIOD\");\r\n\r\n        require(msg.sender == _depositInfo.owner \u0026\u0026 _depositInfo.isActive);\r\n        uint256 _depositAmount = _depositInfo.depositAmount;\r\n        uint256 _sendAmount;\r\n        if (_depositInfo.depositTimestamp + NO_REWARDS_PERIOD \u003e block.timestamp) {\r\n            // Dont send rewards\r\n            // if below x days, subtract from withdraw any *claimed* rewards for this deposit\r\n            _sendAmount = _depositAmount - _depositInfo.claimedRewards;\r\n        } else {\r\n            // claim reward and add to totalRewards and add to user\u0027s total claimed rewards\r\n            uint256 _claimableRewards = getUnclaimedRewardsForDeposit(_depositId);\r\n            // don\u0027t need to set claimedRewards and lastClaimedTimestamp in this deposit since it will no longer be isActive\r\n            userInfos[msg.sender].totalClaimedRewards += _claimableRewards;\r\n            totalRewardsPaid += _claimableRewards;\r\n            _sendAmount = _depositAmount + _claimableRewards;\r\n            emit RewardsClaimed(msg.sender, _claimableRewards);\r\n        }\r\n        // Check withdraw limits\r\n        // User withdraw limit per epoch\r\n        uint256 _currentEpoch = getCurrentEpoch();\r\n        require(userWithdrawInEpoch[msg.sender][_currentEpoch] + _depositAmount \u003c= maxUserWithdrawPerEpoch, \"User epoch withdraw limit reached\");\r\n        userWithdrawInEpoch[msg.sender][_currentEpoch] += _depositAmount;\r\n        // LTV withdraw limit per epoch\r\n        uint256 _currentEpochLTV;\r\n        if (ltvAtEpoch[_currentEpoch] == 0) {\r\n            _currentEpochLTV = getContractBalance();\r\n            ltvAtEpoch[_currentEpoch] = _currentEpochLTV;\r\n        } else {\r\n            _currentEpochLTV = ltvAtEpoch[_currentEpoch];\r\n        }\r\n        uint256 _wInEpoch = withdrawsInEpoch[_currentEpoch];\r\n        require(_wInEpoch + _sendAmount \u003c= _currentEpochLTV * maxLtvPercWithdrawPerEpoch / DIVISOR, \"Epoch LTV withdraw limit reached\");\r\n        withdrawsInEpoch[_currentEpoch] += _sendAmount;\r\n        // IMPORTANT: deactivate deposit\r\n        deposits[_depositId].isActive = false;\r\n        deposits[_depositId].depositAmount = 0;\r\n\r\n        uint256 _poolBalance = getContractBalance();\r\n        if (_sendAmount \u003e _poolBalance) {\r\n            _sendAmount = _poolBalance;\r\n        }\r\n        // subtract from totalDeposits and from user\u0027s total deposits\r\n        totalDeposits -= _depositAmount;\r\n        userInfos[msg.sender].totalDeposited -= _depositAmount;\r\n        uint256 _oldTWAD = userInfos[msg.sender].totalWithdrawnAndDepositedLifetime;\r\n        uint256 _totalDeposited = _oldTWAD \u0026 (2 ** 128 - 1);\r\n        uint256 _totalWithdrawn = _oldTWAD \u003e\u003e 128;\r\n        _totalWithdrawn += _depositAmount;\r\n        uint256 _newTWAD = (_totalWithdrawn \u003c\u003c 128) + _totalDeposited;\r\n        userInfos[msg.sender].totalWithdrawnAndDepositedLifetime = _newTWAD;\r\n        if (userInfos[msg.sender].totalDeposited == 0) {\r\n            totalInvestors -= 1;\r\n        }\r\n        // Send and emit\r\n        _doTokenTransfer(msg.sender, _sendAmount);\r\n        emit Withdraw(msg.sender, _depositAmount, _depositId, totalInvestors, totalDeposits, getCurrentEpoch());\r\n    }\r\n\r\n    function claimRewards() external nonReentrant rewardsNotPaused {\r\n        UserInfo memory userInfo = userInfos[msg.sender];\r\n        require(userInfo.owner == msg.sender, \"No deposits\");\r\n        uint256 _userRewardsAmount = 0;\r\n        /* uint256[] memory erCache = new uint256[](getCurrentEpoch()+1);\r\n        uint256[] memory ersCache = new uint256[](getCurrentEpoch()+1); */\r\n        for (uint128 i = 0; i \u003c userInfo.deposits.length; i++) {\r\n            uint128 _depositId = userInfo.deposits[i];\r\n            if (deposits[_depositId].isActive) {\r\n                Deposit memory depositInfo = deposits[_depositId];\r\n                if (depositInfo.isActive) {\r\n                    uint256 _startTime = depositInfo.lastClaimedTimestamp;\r\n                    uint256 _depositAmount = depositInfo.depositAmount;\r\n                    uint256 _endTime = block.timestamp;\r\n                    uint256 _periodTotalReturn = getTotalReturnForPeriod(_startTime, _endTime);\r\n                    uint256 _currentDepositRewards = _depositAmount * _periodTotalReturn / DIVISOR;\r\n                    _userRewardsAmount += _currentDepositRewards;\r\n                    deposits[_depositId].claimedRewards += _currentDepositRewards;\r\n                    deposits[_depositId].lastClaimedTimestamp = uint32(block.timestamp);\r\n                }\r\n            }\r\n        }\r\n        /* delete erCache; */\r\n        require(_userRewardsAmount \u003e 0, \"0 rewards claimed\");\r\n        totalRewardsPaid += _userRewardsAmount;\r\n        userInfos[msg.sender].totalClaimedRewards += _userRewardsAmount;\r\n        // LTV withdraw limit per epoch\r\n        uint256 _currentEpoch = getCurrentEpoch();\r\n        uint256 _currentEpochLTV;\r\n        if (ltvAtEpoch[_currentEpoch] == 0) {\r\n            _currentEpochLTV = getContractBalance();\r\n            ltvAtEpoch[_currentEpoch] = _currentEpochLTV;\r\n        } else {\r\n            _currentEpochLTV = ltvAtEpoch[_currentEpoch];\r\n        }\r\n        uint256 _wInEpoch = withdrawsInEpoch[_currentEpoch];\r\n        require(_wInEpoch + _userRewardsAmount \u003c= _currentEpochLTV * maxLtvPercWithdrawPerEpoch / DIVISOR, \"Epoch LTV withdraw limit reached\");\r\n        withdrawsInEpoch[_currentEpoch] += _userRewardsAmount;\r\n        // Calculate amount\r\n        uint256 _poolBalance = getContractBalance();\r\n        uint256 _toSend = _userRewardsAmount \u003e _poolBalance ? _poolBalance : _userRewardsAmount;\r\n        _doTokenTransfer(msg.sender, _toSend);\r\n        emit RewardsClaimed(msg.sender, _userRewardsAmount);\r\n    }\r\n\r\n    // admin\r\n    function changeEntryFee(uint256 _newFee) external isOwner {\r\n        require(_newFee \u003c= 1000, \"Fee cannot be bigger than 10% ever\");\r\n        fee = _newFee;\r\n    }\r\n\r\n    function changePayFee(uint256 _newPayFee) external isOwner {\r\n        require(_newPayFee \u003c 10000, \"Pay fee cannot be bigger than 100%\");\r\n        payFee = _newPayFee;\r\n    }\r\n\r\n    function changeDepositLimit(uint256 _newLimit) external isOwner {\r\n        depositLimit = _newLimit;\r\n    }\r\n\r\n    function announceReturn(uint256 _epoch, uint256 _returns) external isAnnouncer {\r\n        epochReturns[_epoch] = _returns;\r\n        if (_epoch \u003e 0) {\r\n            epochReturnsSums[_epoch] = _returns + epochReturnsSums[_epoch - 1];\r\n        } else {\r\n            epochReturnsSums[0] = _returns;\r\n        }\r\n        latestInitializedEpoch = _epoch;\r\n        emit EpochReturnUpdated(block.timestamp, _epoch, _returns);\r\n    }\r\n\r\n    function repairEpochSums(uint256 _untilWhatTimestamp) external isAnnouncer {\r\n        epochReturnsSums[0] = epochReturns[0];\r\n        uint256 _currentEpoch = getEpochForTimestamp(_untilWhatTimestamp);\r\n        for (uint256 i = 1; i \u003c= _currentEpoch; i++) {\r\n            epochReturnsSums[i] = epochReturnsSums[i - 1] + epochReturns[i];\r\n        }\r\n        latestInitializedEpoch = _currentEpoch;\r\n    }\r\n\r\n    function changeUserEpochWithdrawLimit(uint256 _newLimit) external isOwner {\r\n        maxUserWithdrawPerEpoch = _newLimit;\r\n    }\r\n\r\n    function changeMaxWithdrawPercLtvPerEpoch(uint256 _newPerc) external isOwner {\r\n        maxLtvPercWithdrawPerEpoch = _newPerc;\r\n    }\r\n\r\n    function changeRewardsPeriod(uint256 _newRPeriod) external isOwner {\r\n        NO_REWARDS_PERIOD = _newRPeriod;\r\n    }\r\n\r\n    function changeWithdrawPeriod(uint256 _newWPeriod) external isOwner {\r\n        NO_WITHDRAW_PERIOD = _newWPeriod;\r\n    }\r\n\r\n    function setRewardsPaused(bool _rp) external isOwner {\r\n        rewardsPaused = _rp;\r\n    }\r\n\r\n    // trader\r\n    function withdrawToTrading(address _depositor, uint256 _amount) external isTrader {\r\n        require(_depositor != address(0));\r\n        uint256 _maxTradingDeposit = getContractBalance();\r\n        if (_amount \u003e _maxTradingDeposit) {\r\n            _amount = _maxTradingDeposit;\r\n        }\r\n        _doTokenTransfer(_depositor, _amount);\r\n    }\r\n\r\n    // So rewards can be sent back to the pool for poolToken == address(0)\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"},"IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account\u0027s ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\u0027t\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\u0027s tokens,\r\n     * given ``owner``\u0027s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``\u0027s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``\u0027s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"},"OwnerStorage.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract OwnerStorage {\r\n\r\n    // Contract which stores the owner  and trader address\r\n    address private owner;\r\n    mapping(address =\u003e bool) private traders;\r\n    address private returnAnnouncer;\r\n    address private adminFeeReceiver;\r\n\r\n    constructor(address[] memory _traders, address _returnAnnc, address _adminFeeReceiver) {\r\n        owner = msg.sender;\r\n        returnAnnouncer = _returnAnnc;\r\n        adminFeeReceiver = _adminFeeReceiver;\r\n        for (uint256 i = 0; i \u003c _traders.length; i++) {\r\n            traders[_traders[i]] = true;\r\n        }\r\n    }\r\n\r\n    function transferOwner(address _newOwner) external {\r\n        require(msg.sender == owner \u0026\u0026 _newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setTrader(address _trader, bool _set) external {\r\n        require(msg.sender == owner);\r\n        traders[_trader] = _set;\r\n    }\r\n\r\n    function setReturnAnnouncer(address _returner) external {\r\n        require(msg.sender == owner);\r\n        returnAnnouncer = _returner;\r\n    }\r\n\r\n    function setAdminFeeReceiver(address _rec) external {\r\n        require(msg.sender == owner);\r\n        adminFeeReceiver = _rec;\r\n    }\r\n\r\n    function isTrader(address _trader) external view returns(bool) {\r\n        return traders[_trader];\r\n    }\r\n\r\n    function getOwner() external view returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function getReturnAnnouncer() external view returns(address) {\r\n        return returnAnnouncer;\r\n    }\r\n\r\n    function getAdminFeeReceiver() external view returns(address) {\r\n        return adminFeeReceiver;\r\n    }\r\n    \r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Permit.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"}}