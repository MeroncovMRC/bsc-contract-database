{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}"},"IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``\u0027s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"PROJECT_EXO_PET.sol":{"content":"    // SPDX-License-Identifier: MIT\r\n    pragma solidity ^0.8.4;\r\n\r\n    import \"IERC721.sol\";\r\n    import \"IERC721Receiver.sol\";\r\n    import \"IERC20.sol\";\r\n    import \"Ownable.sol\";\r\n    import \"IERC721Enumerable.sol\";\r\n    \r\n    contract PROJECT_EXO_PET is Ownable, IERC721Receiver{\r\n\r\n    IERC20 public token;\r\n    IERC721 public nft;\r\n\r\n    uint256[] public rewardsReceived;\r\n    address[] public nft_awards_contracts;\r\n    uint256[] public nft_awards_tokenIDs;\r\n        \r\n    uint256 public bnbAwards = 0.03 ether;\r\n\r\n    uint256 public decimalNumber = 9;\r\n    uint256 public rewardsAmount = 1;\r\n    uint256 public rewardsCircle = 0;\r\n    uint256 public rewardsRate = 86400;\r\n    uint256 public countOfOverallStakers;\r\n\r\n    uint256 public rarityCount = 250;\r\n    uint256 public rarityMode = 0;\r\n\r\n    uint256 public actionFigure1Count = 0;\r\n    uint256 public actionFigure2Count = 0;\r\n\r\n    uint256 public launchTime = 1665100800;\r\n\r\n    // Contract Addresses\r\n    address _nft_Contract = 0xCaF8e9D1349e58155781e4B2D35aF61cA8EFDd7d;\r\n    address _token_Contract = 0x276f3641B24E78d93E9c221E04bC51503130Cf5C;\r\n\r\n    // Mapping \r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) public tokenStakedTime;\r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) public tokenStakedDuration;\r\n    mapping(uint256 =\u003e address) public stakedTokenOwner;\r\n    mapping(address =\u003e uint256[]) public stakedTokens;\r\n    mapping(address =\u003e uint256) public countofMyStakedTokens;\r\n    mapping(address =\u003e uint256) public totalRewardReleased;\r\n    mapping(uint256 =\u003e address) public stakers;\r\n    mapping(uint256 =\u003e uint256) public rarityScores;\r\n    mapping(address =\u003e uint256) public deposit;\r\n    mapping(address =\u003e uint256) public actionFigure;\r\n    mapping(uint256 =\u003e address) public actionFigureList1;\r\n    mapping(uint256 =\u003e address) public actionFigureList2;\r\n    mapping(address =\u003e string) public eml;\r\n\r\n    mapping(address =\u003e bool) public milestone1Claimed;\r\n    mapping(address =\u003e bool) public milestone2Claimed;\r\n    mapping(address =\u003e bool) public milestone3Claimed;\r\n    mapping(address =\u003e bool) public milestone4Claimed;\r\n    mapping(address =\u003e bool) public milestone5Claimed;\r\n    mapping(address =\u003e bool) public milestone6Claimed;\r\n    mapping(address =\u003e bool) public milestone7Claimed;\r\n    mapping(address =\u003e bool) public milestone8Claimed;\r\n    mapping(address =\u003e bool) public milestone9Claimed;\r\n    mapping(address =\u003e bool) public milestone10Claimed;\r\n  \r\n\r\n\r\n    constructor(){\r\n    nft = IERC721(_nft_Contract);\r\n    token = IERC20(_token_Contract);\r\n    }\r\n\r\n    function stakeNFT(uint256 _tokenID) public {\r\n        require(launchTime \u003c= block.timestamp, \"Not yet launched\");\r\n        require(nft.ownerOf(_tokenID) == msg.sender, \"Not the owner\");\r\n        stakedTokens[msg.sender].push(_tokenID);\r\n        countofMyStakedTokens[msg.sender]++;\r\n\r\n        uint256 length = stakedTokens[msg.sender].length;\r\n\r\n        if(stakedTokens[msg.sender].length != countofMyStakedTokens[msg.sender]){\r\n            stakedTokens[msg.sender][countofMyStakedTokens[msg.sender]-1] = stakedTokens[msg.sender][length-1];\r\n            delete stakedTokens[msg.sender][length-1];\r\n        }\r\n    \r\n        stakedTokenOwner[_tokenID] = msg.sender;\r\n        tokenStakedTime[msg.sender][_tokenID] = block.timestamp;\r\n        nft.safeTransferFrom(msg.sender,address(this),_tokenID,\"0x00\");\r\n\r\n        stakers[countOfOverallStakers] = msg.sender;    \r\n        countOfOverallStakers++;\r\n    }\r\n\r\n    function batchStakeNFT(uint256[] memory _tokenIDs) public {\r\n        \r\n        for(uint256 x = 0; x \u003c  _tokenIDs.length ; x++){\r\n            stakeNFT(_tokenIDs[x]);\r\n\r\n        }\r\n\r\n    }\r\n        \r\n    function unstakeNFT(uint256 _tokenID) public {\r\n\r\n        nft.safeTransferFrom(address(this), msg.sender, _tokenID,\"0x00\");\r\n        claimRewards(_tokenID);\r\n\r\n        delete tokenStakedTime[msg.sender][_tokenID];\r\n        delete stakedTokenOwner[_tokenID]; \r\n\r\n        for(uint256 i = 0; i \u003c countofMyStakedTokens[msg.sender]; i++){\r\n            if(stakedTokens[msg.sender][i] == _tokenID){    \r\n            countofMyStakedTokens[msg.sender] = countofMyStakedTokens[msg.sender] - 1;\r\n\r\n\r\n                for(uint256 x = i; x \u003c countofMyStakedTokens[msg.sender]; x++){                   \r\n                stakedTokens[msg.sender][x] = stakedTokens[msg.sender][x+1];\r\n                }\r\n\r\n                delete stakedTokens[msg.sender][countofMyStakedTokens[msg.sender]];\r\n\r\n                           \r\n            }\r\n        }\r\n    } \r\n\r\n    function batchUnstakeNFT(uint256[] memory _tokenIDs) public{\r\n\r\n        for(uint256 x = 0; x \u003c  _tokenIDs.length ; x++){\r\n            unstakeNFT(_tokenIDs[x]);\r\n\r\n        }\r\n    }\r\n\r\n    function batchClaimRewards(uint256[] memory _tokenIDs) public {\r\n\r\n        for(uint256 x = 0; x \u003c  _tokenIDs.length ; x++){\r\n            claimRewards(_tokenIDs[x]);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function claimRewards(uint256 _tokenID) public {\r\n\r\n        uint256 rewardRelease;\r\n\r\n        tokenStakedDuration[msg.sender][_tokenID] = (block.timestamp - tokenStakedTime[msg.sender][_tokenID]);\r\n\r\n        if (tokenStakedDuration[msg.sender][_tokenID] \u003e= rewardsCircle){\r\n\r\n            if(rarityMode == 1){\r\n\r\n              rewardRelease = (tokenStakedDuration[msg.sender][_tokenID] * rewardsAmount * ((rarityScores[_tokenID] + rarityCount) / rarityCount) * 10 ** decimalNumber) / rewardsRate;\r\n              } else {\r\n              rewardRelease = (tokenStakedDuration[msg.sender][_tokenID] * rewardsAmount * 10 ** decimalNumber) / rewardsRate;\r\n            }\r\n\r\n        if(token.balanceOf(address(this)) \u003e= rewardRelease){\r\n            token.transfer(msg.sender,rewardRelease);\r\n            tokenStakedTime[msg.sender][_tokenID] = block.timestamp;\r\n\r\n            totalRewardReleased[msg.sender] = totalRewardReleased[msg.sender] + rewardRelease;\r\n            \r\n            }\r\n        }\r\n    }\r\n\r\n    function claimAwards1() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 20000000000) {\r\n            require(milestone1Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone1Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n        function claimAwards2() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 60000000000) {\r\n            require(milestone2Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone2Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n        function claimAwards3() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 100000000000 ) {\r\n            require(milestone3Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone3Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards4() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 150000000000 ) {\r\n            require(milestone4Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone4Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards5() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 200000000000 ) {\r\n            require(milestone5Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone5Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n       function claimActionFigure1() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 250000000000 ) {\r\n          require(actionFigure[msg.sender] \u003c 1, \"Already Claimed\");\r\n          actionFigureList1[actionFigure1Count] = msg.sender;\r\n          actionFigure1Count++;\r\n          actionFigure[msg.sender] = 1;\r\n\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards6() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 270000000000 ) {\r\n            require(milestone6Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone6Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards7() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 310000000000 ) {\r\n            require(milestone7Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone7Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards8() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 350000000000 ) {\r\n            require(milestone8Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone8Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards9() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 390000000000 ) {\r\n            require(milestone9Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone9Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n\r\n    function claimAwards10() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 450000000000 ) {\r\n            require(milestone10Claimed[msg.sender] != true, \"Already Claimed\");\r\n\r\n            (bool main, ) = payable(msg.sender).call{value: bnbAwards}(\"\");\r\n            require(main);\r\n\r\n            milestone10Claimed[msg.sender] = true;\r\n          }\r\n\r\n    }\r\n\r\n       function claimActionFigure2() public {\r\n           \r\n          if(totalRewardReleased[msg.sender] \u003e= 500000000000 ) {\r\n          require(actionFigure[msg.sender] \u003c 2, \"Already Claimed\");\r\n          actionFigureList2[actionFigure2Count] = msg.sender;\r\n          actionFigure2Count++;\r\n          actionFigure[msg.sender] = 2;\r\n\r\n          }\r\n\r\n\r\n\r\n\r\n          \r\n          }\r\n    \r\n    \r\n\r\n\r\n\r\n    function rarityInjecter(uint256[] calldata _tokenId, uint256[] calldata _rarityScore) public onlyOwner {\r\n\r\n        require(_tokenId.length == _rarityScore.length);\r\n\r\n        uint256 x;\r\n\r\n        for (x = 0 ; x \u003c _tokenId.length; x++){\r\n            rarityScores[_tokenId[x]] = _rarityScore[x];\r\n        }\r\n    }\r\n\r\n    function register(string memory _eml) public{\r\n\r\n      eml[msg.sender] = _eml;\r\n    }\r\n\r\n\r\n  \r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4){\r\n    return this.onERC721Received.selector;\r\n    }\r\n\r\n    function setNFTContract(address _nftContract) public onlyOwner{\r\n    nft = IERC721(_nftContract);\r\n\r\n    }\r\n  \r\n    function setTokenContract(address _tokenContract) public onlyOwner{\r\n    token = IERC20(_tokenContract);\r\n\r\n    }\r\n    \r\n    function setDecimalNumber(uint256 _decimalNumber) public onlyOwner{\r\n    decimalNumber = _decimalNumber;\r\n\r\n    }\r\n\r\n    function setRewardsCircle(uint256 _rewardsCircle) public onlyOwner{\r\n    rewardsCircle = _rewardsCircle;\r\n\r\n    }\r\n\r\n    function setRewardsAmount(uint256 _rewardsAmount) public onlyOwner{\r\n    rewardsAmount = _rewardsAmount;\r\n\r\n    }\r\n\r\n    function setRewardsRate(uint256 _rewardsRate) public onlyOwner{\r\n    rewardsRate = _rewardsRate;\r\n\r\n    }\r\n    \r\n    function setRarityMode(uint256 _rarityMode) public onlyOwner{\r\n    rarityMode = _rarityMode;\r\n\r\n    }\r\n\r\n    function setbnbAwards(uint256 _bnbAwards) public onlyOwner{\r\n    bnbAwards = _bnbAwards;\r\n\r\n    }\r\n    \r\n    function setRarityCount(uint256 _rarityCount) public onlyOwner{\r\n    rarityCount = _rarityCount;\r\n\r\n    }\r\n\r\n    function tokenWithdrawal() public onlyOwner{\r\n    token.transfer(msg.sender,token.balanceOf(address(this)));\r\n\r\n    }\r\n       \r\n    function depositToContract() public payable onlyOwner{\r\n    require(msg.value \u003e 0);\r\n    deposit[msg.sender] = msg.value;\r\n    //payable(address(this)).transfer(msg.value);\r\n\r\n    }\r\n\r\n    \r\n    function setLaunchTime(uint256 _launchTime) public onlyOwner {\r\n        launchTime = _launchTime;\r\n    }\r\n\r\n    function withdrawal() public onlyOwner {\r\n\r\n    (bool main, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(main);\r\n\r\n    }\r\n}"}}