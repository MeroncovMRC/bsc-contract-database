{"SLDCommon.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    //function decimals() external returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract BEP20 is Context, IBEP20 {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"SLDRewards.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\nimport \"./SLDCommon.sol\";\n\ncontract SLDRewards is Ownable {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n    IBEP20 public rewardsToken;\n\n    uint256 internal constant TOTALSUPPLY = 1e9; // Total supply of Shield Token\n    uint256 internal constant PRICE_DECIMALS = 1e18;\n    uint256 internal constant percentageDenominator = 100;\n\n    uint256 public TOTAL_REWARDS = TOTALSUPPLY.mul(1e18).mul(50).div(100); // 50% total supply should be rewarded\n    uint256 public rewardsPerBlockForLP1 = 3e17; // Public pool mining rewards per block\n\n    uint256 public minStakeAmount = 1e18;\n\n    bytes4 private constant SELECTOR_TRANSFER_FROM =\n        bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 private constant SELECTOR_TRANSFER =\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n    // Fiat tokens\n    uint256 internal constant DAI = 1;\n    uint256 internal constant USDT = 2;\n    uint256 internal constant USDC = 3;\n\n    uint256 public sldPriceForRewardsNumerator = 20; // SLD price, mean 0.2U\n    uint256 public sldPriceForRewardsDenominator = 100;\n    uint256 public sldRewardsNumeratorForLP2 = 15; // Portion of private pool rewards\n    uint256 public rewardDecimal = 100;\n\n    uint256 public sldLocked = TOTAL_REWARDS; // Total locked SLD amount\n    uint256 public halvingNumerator = 20; // means total mined token reached 20% of the total locked, halving the mining reward\n\n    uint256 public unlockedPortionForLP1Mining = 30; // means 30%\n\n    uint256 public sldThreshold =\n        sldLocked.mul(halvingNumerator).div(percentageDenominator);\n\n    uint256 public constant LOCKPERIOD = 180; // Public pool mining reward should be locked by 180 days\n\n    mapping(address =\u003e uint256) public reTokens; // Mapping of reTokens\n    mapping(uint256 =\u003e address) public reTokenAddrs;\n\n    uint256 public weeklyRewardA = 1000 * 1e18; // means 1000 SLD\n    uint256 public weeklyRewardB = 700 * 1e18; // means 700 SLD\n    uint256 public weeklyRewardC = 500 * 1e18; // means 500 SLD\n\n    uint256 public sldUnlocked; // Total unlocked SLD amount(Public pool mining + private pool mining + liquidation rewards)\n\n    uint256 public totalVested; // Total vested SLD amount since last halved\n\n    // Private pool reward info\n    struct ClaimLP2 {\n        uint256 claimed;\n        uint256 claimable;\n    }\n\n    uint256 public sldUnlockedForLP2;\n    mapping(address =\u003e ClaimLP2) public sldRewardsForLP2;\n    mapping(address =\u003e bool) public keeperMap;\n\n    struct LP1Info {\n        // Locked\n        uint256 userReDAI;\n        uint256 userReUSDT;\n        uint256 userReUSDC;\n        uint256 totalReDAI;\n        uint256 totalReUSDT;\n        uint256 totalReUSDC;\n        // Share\n        uint256 userShare;\n        uint256 totalShare;\n    }\n\n    struct Lp1LockInfo {\n        uint256 date;\n        uint256 amount;\n    }\n\n    mapping(address =\u003e Lp1LockInfo[LOCKPERIOD]) lp1LockInfos;\n\n    uint256 public sldUnlockedForLp1;\n    uint256 public totalStaked;\n    uint256 public halveTime; // Latest halving time\n\n    mapping(uint256 =\u003e uint256) public totalStakedMap;\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) public stakingsMap;\n\n    uint256 public totalShare;\n    uint256 public lastRewardBlock;\n    mapping(address =\u003e uint256) public stakings;\n    mapping(address =\u003e uint256) public debts;\n\n    event SetKeeper(address, bool);\n    event WithdrawForLP1(address, uint256, uint256, uint256, uint256);\n    event EmergencyWithdraw(address indexed, address indexed, uint256);\n    event ClaimRewardsForLP1(address, uint256, uint256, uint256, uint256);\n    event StakeForLP1(address, address, uint256);\n    event GetAndSetLockedRewards(address, uint256, uint256, uint256, uint256);\n    event CalcRewardsForLP2(address, uint256, uint256);\n    event ClaimRewardsForLP2(address, uint256);\n    event SetParamsAfterHalving(uint256, uint256, uint256, uint256, uint256);\n    event CalcAndSendRewardsForLiquidator(address, uint256, uint256);\n    event CalcAndSendRewardsForLiquidatorWeekly(\n        address,\n        uint256,\n        uint256,\n        uint256\n    );\n\n    modifier onlyKeeper(address addr) {\n        require(isKeeper(addr), \"caller is not the keeper\");\n        _;\n    }\n\n    function setKeeper(address addr, bool auth) public onlyOwner {\n        keeperMap[addr] = auth;\n        emit SetKeeper(addr, auth);\n    }\n\n    function isKeeper(address addr) public view returns (bool) {\n        return keeperMap[addr];\n    }\n\n    /**\n     * @dev Contract constructor.\n     * @param token SLD token contract address\n     * @param _reDAI reDAI contract address\n     * @param _reUSDT reUSDT contract address\n     * @param _reUSDC reUSDC contract address\n     */\n    constructor(\n        address token,\n        address _reDAI,\n        address _reUSDT,\n        address _reUSDC\n    ) public {\n        rewardsToken = IBEP20(token); //SLD token\n\n        reTokens[_reDAI] = DAI;\n        reTokens[_reUSDT] = USDT;\n        reTokens[_reUSDC] = USDC;\n        reTokenAddrs[DAI] = _reDAI;\n        reTokenAddrs[USDT] = _reUSDT;\n        reTokenAddrs[USDC] = _reUSDC;\n\n        halveTime = block.number;\n    }\n\n    /**\n     * @dev Internal function to update public pool mining info\n     */\n    function updateVault() internal {\n        if (block.number \u003c= lastRewardBlock) {\n            return;\n        }\n        if (totalStaked == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n        uint256 reward = block.number.sub(lastRewardBlock).mul(\n            rewardsPerBlockForLP1\n        );\n        totalShare = totalShare.add(reward.mul(1e18).div(totalStaked));\n        lastRewardBlock = block.number;\n    }\n\n    /**\n     * @dev Staking in public pool\n     * @param _reToken reToken type\n     * @param _amount amount to stake\n     */\n    function stakeForLP1(address _reToken, uint256 _amount) public {\n        require(_amount \u003e= minStakeAmount, \"stake too small\");\n        uint256 tokenType = reTokens[_reToken];\n        require(tokenType != 0 \u0026\u0026 tokenType \u003c 4, \"ReToken not included\");\n        updateVault();\n        uint256 userStaked = stakings[msg.sender];\n        if (userStaked \u003e 0) {\n            uint256 pending = userStaked.mul(totalShare).div(1e18).sub(\n                debts[msg.sender]\n            );\n\n            if (pending \u003e 0) {\n                // 30% could be claimed instantly, 70% vesting in 180 days\n                uint256 instantRewards = pending\n                    .mul(unlockedPortionForLP1Mining)\n                    .div(percentageDenominator);\n                uint256 lockedRewards = pending.sub(instantRewards);\n                uint256 unlockedRewards = getAndSetLockedRewards(\n                    msg.sender,\n                    tokenType,\n                    lockedRewards\n                );\n                uint256 claimedRewards = instantRewards.add(unlockedRewards);\n                sldUnlocked = sldUnlocked.add(pending);\n                if (sldUnlocked \u003e sldThreshold) {\n                    setParamsAfterHalving();\n                }\n\n                _safeTransfer(\n                    address(rewardsToken),\n                    msg.sender,\n                    claimedRewards\n                );\n            }\n        }\n\n        stakings[msg.sender] = stakings[msg.sender].add(_amount);\n        stakingsMap[msg.sender][tokenType] = stakingsMap[msg.sender][tokenType]\n            .add(_amount);\n        totalStaked = totalStaked.add(_amount);\n        totalStakedMap[tokenType] = totalStakedMap[tokenType].add(_amount);\n        debts[msg.sender] = stakings[msg.sender].mul(totalShare).div(1e18);\n        _safeTransferFrom(_reToken, msg.sender, address(this), _amount);\n        emit StakeForLP1(msg.sender, _reToken, _amount);\n    }\n\n    /**\n     * @dev Unstaking in public pool\n     * @param _reToken reToken type\n     * @param _amount amount to stake\n     */\n    function withdrawForLP1(address _reToken, uint256 _amount)\n        public\n        returns (uint256)\n    {\n        require(_amount \u003e 0, \"withdraw amount should be positive\");\n        uint256 tokenType = reTokens[_reToken];\n        require(tokenType != 0 \u0026\u0026 tokenType \u003c 4, \"ReToken not included\");\n        require(\n            stakingsMap[msg.sender][tokenType] \u003e= _amount,\n            \"ReToken Amount less than amount\"\n        );\n        updateVault();\n        uint256 userStaked = stakings[msg.sender];\n        uint256 claimedRewards = 0;\n        if (userStaked \u003e 0) {\n            uint256 pending = userStaked.mul(totalShare).div(1e18).sub(\n                debts[msg.sender]\n            );\n\n            if (pending \u003e 0) {\n                // 30% could be claimed instantly, 70% vesting in 180 days\n                uint256 instantRewards = pending.mul(30).div(100);\n                uint256 lockedRewards = pending.sub(instantRewards);\n\n                uint256 unlockedRewards = getAndSetLockedRewards(\n                    msg.sender,\n                    tokenType,\n                    lockedRewards\n                );\n\n                claimedRewards = instantRewards.add(unlockedRewards);\n                sldUnlocked = sldUnlocked.add(pending);\n                if (sldUnlocked \u003e sldThreshold) {\n                    setParamsAfterHalving();\n                }\n\n                _safeTransfer(\n                    address(rewardsToken),\n                    msg.sender,\n                    claimedRewards\n                );\n            }\n        }\n        stakings[msg.sender] = stakings[msg.sender].sub(_amount);\n        stakingsMap[msg.sender][tokenType] = stakingsMap[msg.sender][tokenType]\n            .sub(_amount);\n        totalStaked = totalStaked.sub(_amount);\n        totalStakedMap[tokenType] = totalStakedMap[tokenType].sub(_amount);\n        debts[msg.sender] = stakings[msg.sender].mul(totalShare).div(1e18);\n\n        _safeTransfer(_reToken, msg.sender, _amount);\n        emit WithdrawForLP1(\n            msg.sender,\n            _amount,\n            userStaked,\n            sldUnlocked,\n            claimedRewards\n        );\n    }\n\n    /**\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\n     * @param _reToken reToken type\n     */\n    function emergencyWithdrawFromLP1(address _reToken) public {\n        uint256 tokenType = reTokens[_reToken];\n        uint256 amount = stakingsMap[msg.sender][tokenType];\n\n        require(tokenType != 0 \u0026\u0026 tokenType \u003c 4, \"ReToken not included\");\n        require(amount \u003e 0, \"stake amount is zero\");\n\n        _safeTransfer(_reToken, msg.sender, amount);\n\n        emit EmergencyWithdraw(msg.sender, _reToken, amount);\n\n        stakings[msg.sender] = stakings[msg.sender].sub(amount);\n        totalStaked = totalStaked.sub(amount);\n        stakingsMap[msg.sender][tokenType] = 0;\n        debts[msg.sender] = 0;\n    }\n\n    /**\n     * @dev Claim public pool mining rewards\n     */\n    function claimRewardsForLP1() public {\n        updateVault();\n        uint256 userStaked = stakings[msg.sender];\n        uint256 pending = userStaked.mul(totalShare).div(1e18).sub(\n            debts[msg.sender]\n        );\n\n        if (pending \u003e 0) {\n            // 30% could be claimed instantly, 70% vesting in 180 days\n            uint256 instantRewards = pending.mul(30).div(100);\n            uint256 lockedRewards = pending.sub(instantRewards);\n\n            uint256 unlockedRewards = 0;\n            uint256 tmpRewards = getAndSetLockedRewards(\n                msg.sender,\n                1,\n                lockedRewards\n            );\n            unlockedRewards = unlockedRewards.add(tmpRewards);\n\n            uint256 claimedRewards = instantRewards.add(unlockedRewards);\n\n            sldUnlocked = sldUnlocked.add(pending);\n            if (sldUnlocked \u003e sldThreshold) {\n                setParamsAfterHalving();\n            }\n\n            _safeTransfer(address(rewardsToken), msg.sender, claimedRewards);\n\n            debts[msg.sender] = userStaked.mul(totalShare).div(1e18);\n            emit ClaimRewardsForLP1(\n                msg.sender,\n                userStaked,\n                totalStaked,\n                lockedRewards,\n                claimedRewards\n            );\n        }\n    }\n\n    /**\n     * @dev Internal function to get all locked amount and set new period for incoming tokens\n     * @param _user staker address\n     * @param _tokenType token type\n     * @param _lockedRewards amount to be locked\n     */\n    function getAndSetLockedRewards(\n        address _user,\n        uint256 _tokenType,\n        uint256 _lockedRewards\n    ) internal returns (uint256) {\n        uint256 rewardsAmount = 0;\n        (uint256 today, ) = getDate();\n\n        for (uint256 i = 0; i \u003c LOCKPERIOD; i++) {\n            uint256 tmpAmount = 0;\n            if (lp1LockInfos[_user][i].date \u003c= today) {\n                tmpAmount = lp1LockInfos[_user][i].amount;\n                lp1LockInfos[_user][i].amount = 0;\n                lp1LockInfos[_user][i].date = 0;\n            }\n            rewardsAmount = rewardsAmount.add(tmpAmount);\n        }\n\n        // set new lock period\n        uint256 unlockDay = today.add(LOCKPERIOD);\n        uint256 index = unlockDay % LOCKPERIOD;\n        lp1LockInfos[_user][index].date = unlockDay;\n        lp1LockInfos[_user][index].amount = lp1LockInfos[_user][index]\n            .amount\n            .add(_lockedRewards);\n        emit GetAndSetLockedRewards(\n            _user,\n            _tokenType,\n            index,\n            unlockDay,\n            lp1LockInfos[_user][index].amount\n        );\n        return rewardsAmount;\n    }\n\n    /**\n     * @dev Internal function to execute mining halving\n     */\n    function setParamsAfterHalving() internal {\n        // threshold = threshold + (total_rewards - threshold) * 20%\n        sldThreshold = sldThreshold.add(\n            (\n                TOTAL_REWARDS.sub(sldThreshold).mul(halvingNumerator).div(\n                    percentageDenominator\n                )\n            )\n        );\n\n        totalVested = getTotalMinted();\n        halveTime = block.number;\n\n        updateVault();\n\n        sldPriceForRewardsNumerator = sldPriceForRewardsNumerator.mul(2);\n        rewardsPerBlockForLP1 = rewardsPerBlockForLP1.div(2);\n\n        emit SetParamsAfterHalving(\n            sldThreshold,\n            totalVested,\n            halveTime,\n            sldPriceForRewardsNumerator,\n            rewardsPerBlockForLP1\n        );\n    }\n\n    /**\n     * @dev Get total minted token amount, incluing vested and vesting tokens\n     */\n    function getTotalMinted() public view returns (uint256) {\n        return\n            totalVested +\n            (block.number.sub(halveTime).mul(rewardsPerBlockForLP1));\n    }\n\n    /**\n     * @dev Get total minted token amount, incluing vested and vesting tokens\n     * @param _user staker address\n     */\n    function queryRewardsForLP1(address _user)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (uint256 unlock, uint256 lock) = getLockedRewardsInfoForLP1(_user);\n        uint256 rewardsAmount = getPendingSLd(_user);\n        return (\n            rewardsAmount.mul(unlockedPortionForLP1Mining).div(\n                percentageDenominator\n            ) + unlock,\n            lock,\n            rewardsAmount\n                .mul(percentageDenominator.sub(unlockedPortionForLP1Mining))\n                .div(percentageDenominator)\n        );\n    }\n\n    /**\n     * @dev Get pending SLD amount during mining period\n     * @param _user staker address\n     */\n    function getPendingSLd(address _user) public view returns (uint256) {\n        uint256 userStaked = stakings[_user];\n        uint256 reward = block.number.sub(lastRewardBlock).mul(\n            rewardsPerBlockForLP1\n        );\n        uint256 tempAccShare = 0;\n        if (totalStaked \u003e 0) {\n            tempAccShare = totalShare.add(reward.mul(1e18).div(totalStaked));\n        }\n        return userStaked.mul(tempAccShare).div(1e18).sub(debts[_user]);\n    }\n\n    /**\n     * @dev Get public pool mining info for certain staker\n     * @param _user staker address\n     */\n    function getLockedRewardsInfoForLP1(address _user)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 unlockedRewardsAmount;\n        uint256 lockedRewardsAmount;\n\n        (uint256 today, ) = getDate();\n\n        for (uint256 i = 0; i \u003c LOCKPERIOD; i++) {\n            uint256 tmpAmount = lp1LockInfos[_user][i].amount;\n            if (lp1LockInfos[_user][i].date \u003c= today) {\n                unlockedRewardsAmount = unlockedRewardsAmount.add(tmpAmount);\n            } else {\n                lockedRewardsAmount = lockedRewardsAmount.add(tmpAmount);\n            }\n        }\n\n        return (unlockedRewardsAmount, lockedRewardsAmount);\n    }\n\n    /**\n     * @dev Get public pool mining info for certain staker\n     * @param _lpUserAddr private pool maker address\n     * @param _tradingFee 15% trading fee\n     */\n    function calcAndSendRewardsForLP2(address _lpUserAddr, uint256 _tradingFee)\n        public\n        onlyKeeper(msg.sender)\n        returns (bool)\n    {\n        uint256 rewards = _tradingFee\n            .mul(sldRewardsNumeratorForLP2)\n            .mul(sldPriceForRewardsDenominator)\n            .div(sldPriceForRewardsNumerator)\n            .div(percentageDenominator);\n        sldUnlocked = sldUnlocked.add(rewards);\n\n        if (sldUnlocked \u003e sldThreshold) {\n            setParamsAfterHalving();\n        }\n\n        sldUnlockedForLP2 = sldUnlockedForLP2.add(rewards);\n        sldRewardsForLP2[_lpUserAddr].claimable = sldRewardsForLP2[_lpUserAddr]\n            .claimable\n            .add(rewards);\n        emit CalcRewardsForLP2(_lpUserAddr, sldUnlocked, rewards);\n        return true;\n    }\n\n    /**\n     * @dev Claim private pool incentive rewards\n     */\n    function claimRewardsForLP2() public {\n        uint256 rewards = sldRewardsForLP2[msg.sender].claimable;\n        if (rewards \u003e 0) {\n            sldRewardsForLP2[msg.sender].claimable = 0;\n            sldRewardsForLP2[msg.sender].claimed = sldRewardsForLP2[msg.sender]\n                .claimed\n                .add(rewards);\n            _safeTransfer(address(rewardsToken), msg.sender, rewards);\n\n            emit ClaimRewardsForLP2(msg.sender, rewards);\n        }\n    }\n\n    /**\n     * @dev Set paramaters for private pool incentives\n     * @param _sldRewardsNumeratorForLP2 reward numerator\n     * @param _rewardDecimal reward decimal\n     */\n    function setsldRewardsParamatersForLP2(\n        uint256 _sldRewardsNumeratorForLP2,\n        uint256 _rewardDecimal\n    ) public onlyOwner {\n        sldRewardsNumeratorForLP2 = _sldRewardsNumeratorForLP2;\n        rewardDecimal = _rewardDecimal;\n    }\n\n    /**\n     * @dev Get private pool reward info\n     * @param _lp private pool maker address\n     */\n    function queryRewardsForLP2(address _lp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        return (sldRewardsForLP2[_lp].claimable, sldUnlockedForLP2);\n    }\n\n    /**\n     * @dev Get total private pool reward amount\n     */\n    function queryTotalRewardsForLP2() public view returns (uint256) {\n        return sldUnlockedForLP2;\n    }\n\n    /**\n     * @dev Calculate liquidation incentives\n     * @param _liquidator liquidator address\n     * @param _gasUsedByStable gas used\n     */\n    function calcAndSendRewardsForLiquidator(\n        address _liquidator,\n        uint256 _gasUsedByStable\n    ) public onlyKeeper(msg.sender) returns (uint256, bool) {\n        uint256 rewards = _gasUsedByStable\n            .mul(sldPriceForRewardsDenominator)\n            .div(sldPriceForRewardsNumerator);\n        sldUnlocked = sldUnlocked.add(rewards);\n\n        if (sldUnlocked \u003e sldThreshold) {\n            setParamsAfterHalving();\n        }\n\n        if (rewardsToken.balanceOf(address(this)) \u003e= rewards) {\n            _safeTransfer(address(rewardsToken), _liquidator, rewards);\n\n            emit CalcAndSendRewardsForLiquidator(\n                _liquidator,\n                rewards,\n                sldUnlocked\n            );\n\n            return (rewards, true);\n        }\n        return (0, false);\n    }\n\n    /**\n     * @dev Calculate weekly liquidation incentives\n     * @param _liquidator liquidator address\n     * @param _rank weekly rank\n     */\n    function calcAndSendRewardsForLiquidatorWeekly(\n        address _liquidator,\n        uint256 _rank\n    ) public onlyKeeper(msg.sender) returns (uint256, bool) {\n        uint256 rewards;\n\n        if (_rank == 0) {\n            rewards = weeklyRewardA;\n        } else if (_rank == 1) {\n            rewards = weeklyRewardB;\n        } else if (_rank == 2) {\n            rewards = weeklyRewardC;\n        }\n\n        sldUnlocked = sldUnlocked.add(rewards);\n\n        if (sldUnlocked \u003e sldThreshold) {\n            setParamsAfterHalving();\n        }\n\n        if (rewardsToken.balanceOf(address(this)) \u003e= rewards) {\n            _safeTransfer(address(rewardsToken), _liquidator, rewards);\n\n            emit CalcAndSendRewardsForLiquidatorWeekly(\n                _liquidator,\n                _rank,\n                rewards,\n                sldUnlocked\n            );\n\n            return (rewards, true);\n        }\n        return (0, false);\n    }\n\n    /**\n     * @dev Set SLD price for calculating reward\n     * @param _numerator price numerator\n     * @param _denominator price denominator\n     */\n    function setSLDPrice(uint256 _numerator, uint256 _denominator)\n        public\n        onlyOwner\n    {\n        sldPriceForRewardsNumerator = _numerator;\n        sldPriceForRewardsDenominator = _denominator;\n    }\n\n    /**\n     * @dev Set reToken address\n     * @param _reToken reToken address\n     * @param _index index of retoken\n     */\n    function setReTokens(address _reToken, uint256 _index) public onlyOwner {\n        reTokens[_reToken] = _index;\n        reTokenAddrs[_index] = _reToken;\n    }\n\n    /**\n     * @dev Set SLD reward per block for public pool mining\n     * @param _rewardsPerBlockForLP1 SLD reward per block\n     */\n    function setRewardsPerBlockForLP1(uint256 _rewardsPerBlockForLP1)\n        public\n        onlyOwner\n    {\n        updateVault();\n        rewardsPerBlockForLP1 = _rewardsPerBlockForLP1;\n    }\n\n    /**\n     * @dev Set minimum stake amount for public pool mining\n     * @param _minStakeAmount Minimum stake amount\n     */\n    function setMinStakeAmount(uint256 _minStakeAmount) public onlyOwner {\n        minStakeAmount = _minStakeAmount;\n    }\n\n    /**\n     * @dev Get halving parameters\n     */\n    function getParmsAfterHalving()\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            sldThreshold,\n            totalVested,\n            halveTime,\n            sldPriceForRewardsNumerator,\n            rewardsPerBlockForLP1\n        );\n    }\n\n    /**\n     * @dev Get total unlocked info\n     */\n    function getUnlockInfo() public view returns (uint256, uint256) {\n        return (TOTAL_REWARDS, sldUnlocked);\n    }\n\n    /**\n     * @dev Get public pool mining info\n     */\n    function queryStakeShareInfoForLP1(address user)\n        public\n        view\n        returns (LP1Info memory)\n    {\n        return\n            LP1Info(\n                stakingsMap[msg.sender][DAI],\n                stakingsMap[msg.sender][USDT],\n                stakingsMap[msg.sender][USDC],\n                totalStakedMap[DAI],\n                totalStakedMap[USDT],\n                totalStakedMap[USDC],\n                //share part\n                getUserShare(user),\n                getTotalShare()\n            );\n    }\n\n    /**\n     * @dev Get total share info on public pool\n     */\n    function getTotalSharedInfo() public view returns (uint256) {\n        uint256 reward = block.number.sub(lastRewardBlock).mul(\n            rewardsPerBlockForLP1\n        );\n        return\n            totalShare.add(reward.mul(1e18).div(totalStaked)).mul(totalStaked);\n    }\n\n    /**\n     * @dev Get staker share info on public pool\n     */\n    function getUserShare(address _user) public view returns (uint256) {\n        return\n            stakingsMap[_user][DAI].add(stakingsMap[_user][USDT]).add(\n                stakingsMap[_user][USDC]\n            );\n    }\n\n    /**\n     * @dev Get total staked on public pool\n     */\n    function getTotalShare() public view returns (uint256) {\n        return\n            totalStakedMap[DAI].add(totalStakedMap[USDT]).add(\n                totalStakedMap[USDC]\n            );\n    }\n\n    function getDate() public view returns (uint256 today, uint256 blocktime) {\n        today = block.timestamp / 1 days;\n        blocktime = block.timestamp;\n    }\n\n    /**\n     * @dev Set paramters for weekly liquidation reward\n     */\n    function setWeeklyRewardPortion(\n        uint256 _rewardA,\n        uint256 _rewardB,\n        uint256 _rewardC\n    ) public onlyOwner {\n        weeklyRewardA = _rewardA;\n        weeklyRewardB = _rewardB;\n        weeklyRewardC = _rewardC;\n    }\n\n    /**\n     * @dev Set paramters for halving\n     * @param _halvingNumerator unlocked percentage to reach halving\n     */\n    function setHalvingParams(uint256 _halvingNumerator) public onlyOwner {\n        halvingNumerator = _halvingNumerator;\n    }\n\n    /**\n     * @dev Set instant unlock portion for public pool mining\n     * @param _unlockedPortion instantly claimable token percentage\n     */\n    function setUnlockedParamsForLP1(uint256 _unlockedPortion)\n        public\n        onlyOwner\n    {\n        unlockedPortionForLP1Mining = _unlockedPortion;\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR_TRANSFER_FROM, from, to, value)\n        );\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR_TRANSFER, to, value)\n        );\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"}}