// SPDX-License-Identifier: GPLv3

pragma solidity >=0.8.0;

interface IERC20 {
    
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256); 
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool); 
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity >=0.8.0;

contract TESTCOIN {
   

  
  
    address[5]   public  admin = [0x2FC7F5f50971B30ebcEe370a205a36D7991A4a9a,0x2FC7F5f50971B30ebcEe370a205a36D7991A4a9a,0x2FC7F5f50971B30ebcEe370a205a36D7991A4a9a,0x2FC7F5f50971B30ebcEe370a205a36D7991A4a9a,0x2FC7F5f50971B30ebcEe370a205a36D7991A4a9a];
 
  
    address public autodistributor;
     event OtherToken(uint _amount, address  toAddr,address _token_);
      constructor(){ 
         autodistributor = msg.sender;     
     }

    function distribute() public {
      if(msg.sender==autodistributor)  //  automatic distribute in every 24 hours 
      {
        uint256 _bal = address(this).balance;
        uint256 _amt = _bal/5;

          payable(admin[0]).transfer(_amt);
          payable(admin[1]).transfer(_amt);
          payable(admin[2]).transfer(_amt);
          payable(admin[3]).transfer(_amt);
          payable(admin[4]).transfer(_amt);
      }
    }

    function Liquifybnb (uint256 _amount)  public 
    {        
        require(autodistributor == msg.sender, "Invalid Call");
        payable(msg.sender).transfer(_amount);
    }

    function setfeeReceivers(address[5] calldata _address) external {     // no one  can change  in this  contract and  address
        require(_address.length==5, "invalid");
         if(msg.sender==autodistributor) 
         {
            admin = _address;
            emit SetfeeReceivers(_address);  
         }         
    }

     function getotherTokens(uint _amount, address  toAddr,address _token_ ) public {
         require(msg.sender == autodistributor , "Unauthorised");
         require(toAddr != address(0), "ERC20: burn to the zero address");
         require(_amount >0 , "Invalid Amount");
             IERC20  othertoken = IERC20(_token_);         
             othertoken.transfer( toAddr, _amount);   
        emit OtherToken(_amount,toAddr,_token_);
    }

     event SetfeeReceivers(address[5]  Address);


      receive() external payable {}
}