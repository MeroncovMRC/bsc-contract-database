/**
 *Submitted for verification at BscScan.com on 2023-06-06
*/

pragma solidity ^0.5.0;

contract ERC20Interface {
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    function getWhitelist(address tokenOwner) public view returns (uint status);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract SafeMath {
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a); c = a - b; 
        } 
        
    function safeMul(uint a, uint b) public pure returns (uint c) {
         c = a * b; require(a == 0 || c / a == b); 
         } 
    function safeDiv(uint a, uint b) public pure returns (uint c) {
         require(b > 0);
        c = a / b;
    }
}

contract MyscarInterface {
    function _mint(address to, uint tokens) external returns(bool success);
    function mint(address to) external returns (uint liquidity);
    function getAllUser() public view returns (uint id);
}

contract ExhangeMYSCAR{
    address public Pair;
    address public MYSCAR;
    address public USDT;
    address public owner;
    address public system;

    constructor(address _Pair, address _MYSCAR, address _USDT ) public {
    owner = msg.sender;
    Pair = _Pair;
    MYSCAR = _MYSCAR;
    USDT = _USDT;
    }

    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }

    modifier onlySystem() {
    require(msg.sender == system);
    _;
    }

    function changeOwner(address newOwner) public onlyOwner{
    require(newOwner != address(0));
    owner = newOwner;
    }

        function changeSystem(address newSystem) public onlyOwner{
    require(newSystem != address(0));
    system = newSystem;
    }

    function exchange(address challenger) external onlySystem{
       transferForOwner();
       uint reserve0 = getBalanceMYSCAR(Pair);
       uint reserve1 = getBalanceUSDT(Pair);
       uint ratio = getBalanceUSDT(address(this));
       uint ratioUSDT = SafeMath(address(this)).safeDiv(reserve1, ratio);
       uint ratioMYSCAR = SafeMath(address(this)).safeDiv(reserve0, ratioUSDT);
       MyscarInterface(MYSCAR)._mint(address(this), ratioMYSCAR+(ratioMYSCAR * 30 / 100));
       ERC20Interface(USDT).transfer(Pair, ratio);
       ERC20Interface(MYSCAR).transfer(Pair, ratioMYSCAR);
       MyscarInterface(MYSCAR).mint(owner);
       uint reserve2 = getBalanceMYSCAR(address(this));
       ERC20Interface(MYSCAR).transfer(challenger, reserve2);
    }

    function transferForOwner() internal{
        uint ratio = ERC20Interface(USDT).balanceOf(address(this)) / 5;
        ERC20Interface(USDT).transfer(owner, ratio);
    }

    function getBalanceMYSCAR(address tokenOwner) public view returns (uint balance){
        return ERC20Interface(MYSCAR).balanceOf(tokenOwner);
    }

    function getBalanceUSDT(address tokenOwner) public view returns (uint balance){
        return ERC20Interface(USDT).balanceOf(tokenOwner);
    }

    function getAlluser() public view returns (uint AllUsers){
        return MyscarInterface(system).getAllUser();
    }

    function ExtraTokens(address tokens, address wallet) public onlyOwner{
        uint ratio = ERC20Interface(tokens).balanceOf(address(this));
        ERC20Interface(tokens).transfer(wallet, ratio);
    }

    function ExtraBNB(address payable wallet) public onlyOwner{
        uint ratio = (address(this)).balance;
        wallet.transfer(ratio);
    }

}