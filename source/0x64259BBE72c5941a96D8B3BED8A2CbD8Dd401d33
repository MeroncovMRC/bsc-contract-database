{"SafeMath.sol":{"content":"pragma solidity ^0.6.12;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c \u003e= a, \u0027SafeMath:INVALID_ADD\u0027);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b \u003c= a, \u0027SafeMath:OVERFLOW_SUB\u0027);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b, uint decimal) internal pure returns (uint) {\r\n        uint dc = 10**decimal;\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"SafeMath: multiple overflow\");\r\n        uint c1 = c0 + (dc / 2);\r\n        require(c1 \u003e= c0, \"SafeMath: multiple overflow\");\r\n        uint c2 = c1 / dc;\r\n        return c2;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, uint decimal) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: division by zero\");\r\n        uint dc = 10**decimal;\r\n        uint c0 = a * dc;\r\n        require(a == 0 || c0 / a == dc, \"SafeMath: division internal\");\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 \u003e= c0, \"SafeMath: division internal\");\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n}\r\n"},"StandardToken.sol":{"content":"pragma solidity ^0.6.12;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\n\r\nabstract contract ERC20Interface {\r\n  function totalSupply() public virtual view returns (uint);\r\n  function balanceOf(address tokenOwner) public virtual view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public virtual view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public virtual returns (bool success);\r\n  function approve(address spender, uint tokens) public virtual returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public virtual returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nabstract contract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public virtual;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  \r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20Interface, Owned, Pausable {\r\n  using SafeMath for uint;\r\n\r\n  address public dev;\r\n  string  public symbol;\r\n  string  public name;\r\n  uint8   public decimals;\r\n  uint    public total_supply;\r\n  uint    public rate_receiver;     // (!) input value precision follow \"decimals\"\r\n  uint    public rate_max_transfer; // (!) input value precision follow \"decimals\"\r\n  uint    public total_mint;\r\n  bool    public is_mintable;\r\n\r\n  mapping(address =\u003e uint) balances;\r\n  mapping(address =\u003e mapping(address =\u003e uint)) allowed;\r\n  mapping(address =\u003e bool) public tax_list;\r\n  mapping(address =\u003e bool) public antiWhale_list;\r\n  mapping(address =\u003e bool) public minter_list;\r\n\r\n  event UpdateMintable(bool status);\r\n  event UpdateDevAddress(address dev);\r\n  event UpdateTaxAddress(address target_address, bool status);\r\n  event UpdateRateReceiver(uint rate);\r\n  event UpdateRateMaxTransfer(uint rate);\r\n  event UpdateAntiWhaleList(address account, bool status);\r\n  event UpdateMinter(address minter, bool status);\r\n\r\n  constructor() public {\r\n    symbol            = \"SPEED\";\r\n    name              = \"SPEED\";\r\n    decimals          = 18;\r\n    total_supply      = 5000000000 * 10**uint(decimals);\r\n    dev               = msg.sender;\r\n    is_mintable       = true;\r\n\r\n    // initial no limitation\r\n    rate_receiver     = 1000000000000000000;\r\n    rate_max_transfer = 1000000000000000000;\r\n\r\n    minter_list[msg.sender] = true;\r\n  }\r\n\r\n  modifier antiWhale(address from, address to, uint256 amount) {\r\n    if (maxTransferAmount() \u003e 0) {\r\n      if (antiWhale_list[from] || antiWhale_list[to]) {\r\n        require(amount \u003c= maxTransferAmount(), \"AntiWhale: Transfer amount exceeds the maxTransferAmount\");\r\n      }\r\n    }\r\n    _;\r\n  }\r\n  \r\n  modifier isMinter() {\r\n      require(minter_list[msg.sender], \"Not allowed to mint\");\r\n      _;\r\n  }\r\n\r\n  function totalSupply() public override view returns (uint) {\r\n    return total_supply.sub(balances[address(0)]);\r\n  }\r\n\r\n  function circulateSupply() public view returns (uint) {\r\n    return total_mint.sub(balances[address(0)]);\r\n  }\r\n\r\n  function balanceOf(address tokenOwner) public override view returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  function approve(address spender, uint tokens) public whenNotPaused override returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address to, uint tokens) public whenNotPaused antiWhale(msg.sender, to, tokens) override returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    _transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens) public whenNotPaused antiWhale(from, to, tokens) override returns (bool success) {\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    _transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint tokens) internal {\r\n    if (tax_list[from] || tax_list[to]) {\r\n        // send token by calculate allocation to receiver\r\n        uint amount = tokens.mul(rate_receiver, decimals);\r\n        balances[to] = balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n\r\n        // send remaining token to dev\r\n        uint amount_dev = tokens.sub(amount);\r\n        if (amount_dev \u003e 0) {\r\n            balances[dev] = balances[dev].add(amount_dev);\r\n            emit Transfer(from, dev, amount_dev);\r\n        }\r\n    } else {\r\n        // send full amount to receiver\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n    }\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public whenNotPaused returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  \r\n  function updateMinter(address minter, bool status) public onlyOwner {\r\n    minter_list[minter] = status;\r\n    emit UpdateMinter(minter, status);\r\n  }\r\n\r\n  function mint(address _address, uint amount) public isMinter {\r\n    _mint(_address, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"mint to the zero address\");\r\n    require(is_mintable, \"not mintable\");\r\n    uint tmp_total = total_mint.add(amount);\r\n    require(tmp_total \u003c= total_supply, \"total supply exceed\");\r\n\r\n    balances[account] = balances[account].add(amount);\r\n    total_mint = total_mint.add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n  function maxTransferAmount() public view returns (uint) {\r\n    return circulateSupply().mul(rate_max_transfer, decimals);\r\n  }\r\n\r\n  function updateRateMaxTransfer(uint rate) public onlyOwner returns (bool) {\r\n    rate_max_transfer = rate;\r\n    emit UpdateRateMaxTransfer(rate_max_transfer);\r\n    return true;\r\n  }\r\n  \r\n  function updateMintable(bool status) public onlyOwner returns (bool) {\r\n    is_mintable = status;\r\n    emit UpdateMintable(status);\r\n    return true;\r\n  }\r\n  \r\n  function updateDevAddress(address _dev) public onlyOwner returns (bool) {\r\n    dev = _dev;\r\n    emit UpdateDevAddress(_dev);\r\n    return true;\r\n  }\r\n  \r\n  function updateTaxAddress(address _address, bool status) public onlyOwner returns (bool) {\r\n    tax_list[_address] = status;\r\n    emit UpdateTaxAddress(_address, status);\r\n    return true;\r\n  }\r\n\r\n  function updateAntiWhaleList(address _address, bool status) public onlyOwner returns (bool) {\r\n    antiWhale_list[_address] = status;\r\n    emit UpdateAntiWhaleList(_address, status);\r\n    return true;\r\n  }\r\n  \r\n  function updateRateReceiver(uint _rate_receiver) public onlyOwner returns (bool) {\r\n    rate_receiver = _rate_receiver;\r\n    emit UpdateRateReceiver(_rate_receiver);\r\n    return true;\r\n  }\r\n  \r\n  fallback() external payable {\r\n    revert();\r\n  }\r\n}\r\n"}}