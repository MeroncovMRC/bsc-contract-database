// SPDX-License-Identifier: UNLICENCSD

pragma solidity ^0.8.0;

contract KOSMIC {
    string public constant name = "KOSMIC";
    string public constant symbol = "KOS";
    uint8 public constant decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    uint256 public constant MAX_SUPPLY = 50000 * 10 ** decimals;
    uint256 public taxPercentage = 15;
    address payable public owner = payable(0x88B280E521BF47F950DC50dF35c10265E5f01534);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    constructor() {
        totalSupply = MAX_SUPPLY;
        balanceOf[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        uint256 taxAmount = calculateTax(_value);
        uint256 tokensToTransfer = _value - taxAmount;
        require(balanceOf[msg.sender] >= _value, "Not enough tokens in sender's balance.");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += tokensToTransfer;
        balanceOf[owner] += taxAmount;
        emit Transfer(msg.sender, _to, tokensToTransfer);
        emit Transfer(msg.sender, owner, taxAmount);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        uint256 taxAmount = calculateTax(_value);
        uint256 tokensToTransfer = _value - taxAmount;
        require(balanceOf[_from] >= _value, "Not enough tokens in sender's balance.");
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance for this transfer.");
        balanceOf[_from] -= _value;
        balanceOf[_to] += tokensToTransfer;
        balanceOf[owner] += taxAmount;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, tokensToTransfer);
        emit Transfer(_from, owner, taxAmount);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function calculateTax(uint256 _value) public view returns (uint256 taxAmount) {
        taxAmount = (_value * taxPercentage) / 100;
        return taxAmount;
    }
    
        function setTaxPercentage(uint256 _taxPercentage) public onlyOwner {
        require(_taxPercentage <= 100, "Tax percentage cannot exceed 100.");
        taxPercentage = _taxPercentage;
    }

    function transferOwnership(address payable _newOwner) public onlyOwner {
        require(_newOwner != address(0), "New owner address cannot be zero.");
        emit OwnershipTransferred(owner, _newOwner);
        owner = _newOwner;
    }
}