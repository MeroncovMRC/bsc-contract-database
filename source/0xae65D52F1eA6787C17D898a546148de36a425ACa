// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract KeyValuePair {
    address private owner;
    
    struct Pair {
        string key;
        string value;
    }
    
    mapping(string => Pair) private pairs;
    
    constructor() {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function.");
        _;
    }
    
    function setPair(string memory key, string memory value) public onlyOwner {
        if (keccak256(bytes(pairs[key].key)) == keccak256(bytes(key))) {
            pairs[key].value = value;
        } else {
            pairs[key] = Pair(key, value);
        }
    }
    
    function getValue(string memory key) public view returns (string memory) {
        return pairs[key].value;
    }
    
    function changeOwner(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Invalid new owner address.");
        owner = newOwner;
    }
}