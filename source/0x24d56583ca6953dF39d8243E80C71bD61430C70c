
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

import "../GSN/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: @openzeppelin/contracts/GSN/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: contracts/interfaces/IVault.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.7.6;
pragma abicoder v2;

interface IVault {
    event Deposited(
        address user,
        uint256 amount0,
        uint256 amount1,
        uint256 share
    );

    event Withdrawn(
        uint256 amountIn,
        address user,
        uint256 amount0,
        uint256 amount1
    );

    event Fees(uint256 t0, uint256 t1);

    function zapInSingle(
        address tokenIn,
        uint256 amountIn,
        uint256 amountOutMin
    ) external payable returns (uint256 shareAmount);

    function zapInDual(
        uint256 amount0,
        uint256 amount1,
        uint256 amount0Min,
        uint256 amount1Min
    ) external payable returns (uint256 shareAmount);

    function zapOut(
        uint128 amount,
        uint256 amount0Min,
        uint256 amount1Min
    ) external returns (uint256 amount0, uint256 amount1);

    function zapOutAndSwap(
        uint128 amount,
        uint256 amount0Min,
        uint256 amount1Min,
        address desiredToken,
        uint256 amountOutMin
    ) external;

    function harvest(
        address tokenOut,
        uint256 amountOutMin,
        uint256 amount0Min,
        uint256 amount1Min,
        uint24 _fee
    ) external;

    function pauseAndWithdrawNFT(
        address tokenOut,
        uint256 amountOutMin,
        uint256 amount0Min,
        uint256 amount1Min,
        uint24 _fee
    ) external;

    function unpauseAndDepositNFT() external;

    function pauseVault() external;

    function unpauseVault() external;

    function emergencyExit(
        uint128 amount,
        uint256 amount0Min,
        uint256 amount1Min
    ) external;
}


// File: contracts/interfaces/IVaultManager.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.7.6;

interface IVaultManager {
    struct VaultDetail {
        address vault;
        bool status;
    }
    event Status(address vault, bool isActive);
    event VaultAdded(address vault, address lpToken);

    function addVaultAddress(address lpToken, address vault) external;

    function emergencyPause(address vault,address tokenOut,
        uint256 amountOutMin,
        uint256 amount0Min,
        uint256 amount1Min,
        uint24 _fee) external;

    function unpauseVaultAndDepost(address vault) external;

    function pauseVault(address vault) external;

    function unpauseVault(address vault) external;
}


// File: contracts/VaultManager.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IVaultManager.sol";
import "./interfaces/IVault.sol";

contract VaultManager is IVaultManager, Ownable {
    mapping(address => IVaultManager.VaultDetail) public Vault;


    

    function addVaultAddress(
        address lpToken,
        address vault
    ) external override onlyOwner {
        Vault[lpToken].vault = vault;
        Vault[lpToken].status = true;
        emit VaultAdded(lpToken, vault);
    }

    function emergencyPause(address vault,address tokenOut,
        uint256 amountOutMin,
        uint256 amount0Min,
        uint256 amount1Min,
        uint24 _fee) external override onlyOwner {
        IVault(vault).pauseAndWithdrawNFT(tokenOut,
        amountOutMin,
        amount0Min,
        amount1Min,
        _fee);
        emit Status(vault, false);
    }

    function unpauseVaultAndDepost(
        address vault
    ) external override onlyOwner {
        IVault(vault).unpauseAndDepositNFT();
        emit Status(vault, true);
    }

    function pauseVault(address vault) external override onlyOwner {
        IVault(vault).pauseVault();
    }

    function unpauseVault(address vault) external override onlyOwner {
        IVault(vault).unpauseVault();
    }
}

