pragma solidity ^0.6.0;
// SPDX-License-Identifier: Unlicensed

    library SafeMath {//konwnsec//安全数值运算库
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            if (a == 0) {
                return 0; 
            }
            uint256 c = a * b;
            assert(c / a == b);
            return c; 
        }
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
// assert(b > 0); // Solidity automatically throws when dividing by 0
            uint256 c = a / b;
// assert(a == b * c + a % b); // There is no case in which this doesn't hold
            return c; 
        }

        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            assert(b <= a);
            return a - b; 
        }
        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            assert(c >= a);
            return c; 
        }
    }
contract Context {
  // Empty internal constructor, to prevent people from mistakenly deploying
  // an instance of this contract, which should be used via inheritance.
  constructor () internal { }

  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}
contract Ownable is Context {
  address private _owner;
  address public _callContractAddr; // 操作员

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor () internal {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }
 modifier onlyCallContractAddr() {//konwnsec//修饰器，检测是否为调用合约特定方法的地址
            require(msg.sender == _callContractAddr, "Permission denied"); _; 
        }


    function setCallContractAddr(address callContractAddr) external onlyOwner  { 
        _callContractAddr = callContractAddr; 
    }
  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
//   function renounceOwnership() public onlyOwner {
//     emit OwnershipTransferred(_owner, address(0));
//     _owner = address(0);
//   }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}



    contract DEC is Ownable  {
        using SafeMath for uint;
        string public name; 
        string public symbol; 
        uint256 public decimals;
        uint256 public totalSupply; 
        mapping (address => uint256) public balanceOf;
        mapping (address => mapping (address => uint256)) public allowance;
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Burn(address indexed from, uint256 value);

        address  _operator;

      



        constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint256 _decimals) public {
            totalSupply = initialSupply * 10 ** _decimals;  
            balanceOf[msg.sender] = totalSupply;  
            name = tokenName;  
            symbol = tokenSymbol; 
            decimals = _decimals; 
        }



        
       
 
        function _transfer(address _from, address _to, uint _value) internal { 
            require(_to != address(0)&& _from != _to);
            require(balanceOf[_from] >= _value);
            require(balanceOf[_to].add(_value) > balanceOf[_to]);
            uint previousBalances = balanceOf[_from].add(balanceOf[_to]); balanceOf[_from] = balanceOf[_from].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value);
            emit Transfer(_from, _to, _value);
            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances); 
        }

 
        function transfer(address _to, uint256 _value) public {
            // require(_to != address(0) && _to != _from); 
            _transfer(msg.sender, _to, _value); 
        }

 
        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
            require(_value <= allowance[_from][msg.sender]); // Check allowance
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); 
            _transfer(_from, _to, _value);
            return true; 
        }

 
        function approve(address _spender, uint256 _value) public
            returns (bool success) {
            require(_spender != address(0));
            require((_value == 0) || (allowance[msg.sender][_spender] == 0));
            allowance[msg.sender][_spender] = _value;
            return true; 
        }

 
        function burn(uint256 _value) public returns (bool success) {
            require(balanceOf[msg.sender] >= _value); 
            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); 
            totalSupply = totalSupply.sub(_value); 
            emit Burn(msg.sender, _value);
            return true; 
        }
 
        function burnFrom(address _from, uint256 _value) public returns (bool success) {
            require(balanceOf[_from] >= _value); 
            require(_value <= allowance[_from][msg.sender]); 
            balanceOf[_from] = balanceOf[_from].sub(_value); 
            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
             totalSupply = totalSupply.sub(_value); 
            emit Burn(_from, _value);
            return true; 
        }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");
        totalSupply = totalSupply.add(amount);
        balanceOf[account] = balanceOf[account].add(amount);
        emit Transfer(address(0), account, amount);
    }


    function mint(uint256 amount) public onlyCallContractAddr returns (bool) {
        _mint(_msgSender(), amount);
        return true;
    }



}