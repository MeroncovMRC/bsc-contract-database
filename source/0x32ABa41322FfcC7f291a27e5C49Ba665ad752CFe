// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ChatGTPToken {
    string public name = "Chat GTP Token";
    string public symbol = "GTP";
    uint256 public totalSupply = 1000000 * 10**18;
    uint8 public decimals = 18;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }
    
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Insufficient allowance");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function buyToken() payable public {
        require(msg.value > 0, "Insufficient amount");
        uint256 tokenAmount = msg.value * 100;
        uint256 feeAmount = msg.value * 9 / 10;
        require(balanceOf[owner] >= tokenAmount, "Insufficient token supply");
        balanceOf[owner] -= tokenAmount;
        balanceOf[msg.sender] += tokenAmount;
        payable(owner).transfer(feeAmount);
        emit Transfer(owner, msg.sender, tokenAmount);
    }
    
    function withdrawBNB() public {
        require(msg.sender == owner, "Only owner can withdraw BNB");
        payable(owner).transfer(address(this).balance);
    }
    
    receive() external payable {}
}