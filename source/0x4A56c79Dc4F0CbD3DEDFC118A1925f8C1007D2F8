// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: AceAirdrop.sol



pragma solidity ^0.8.0;


contract AceAirdrop {
    IERC20 public airdropToken;
    address private _admin;
    mapping(address => uint256) public tokenAmounts;
    mapping(address => bool) public whitelisted;

    event WhitelistUpdated(address indexed user, uint256 amount);

    constructor(address tokenAddress, address admin_) {
        airdropToken = IERC20(tokenAddress);
        _admin = admin_;
    }

    modifier onlyAdmin() {
        require(msg.sender == _admin, "Caller is not the admin");
        _;
    }

    function addToWhitelist(address[] memory users, uint256[] memory amounts) external onlyAdmin {
        require(users.length == amounts.length, "Users and amounts length mismatch");

        for (uint256 i = 0; i < users.length; i++) {
            address user = users[i];
            uint256 amount = amounts[i];
            require(user != address(0), "Invalid user address");
            require(amount > 0, "Amount must be greater than 0");

            whitelisted[user] = true;
            tokenAmounts[user] += amount;
            emit WhitelistUpdated(user, tokenAmounts[user]);
        }
    }

    function removeFromWhitelist(address user) external onlyAdmin {
        require(user != address(0), "Invalid user address");
        require(whitelisted[user], "User is not whitelisted");

        whitelisted[user] = false;
        tokenAmounts[user] = 0;
        emit WhitelistUpdated(user, tokenAmounts[user]);
    }

    function claimAirdrop() external {
        require(whitelisted[msg.sender], "Caller is not whitelisted");
        require(tokenAmounts[msg.sender] > 0, "No tokens available to claim");

        uint256 amount = tokenAmounts[msg.sender];
        tokenAmounts[msg.sender] = 0;

        require(airdropToken.transfer(msg.sender, amount), "Token transfer failed");
    }

    function withdrawRemainingTokens() external onlyAdmin {
        uint256 balance = airdropToken.balanceOf(address(this));
        require(balance > 0, "No tokens available to withdraw");
        require(airdropToken.transfer(_admin, balance), "Token transfer failed");
    }
}