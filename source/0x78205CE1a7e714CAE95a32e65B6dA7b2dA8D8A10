
// File: contracts/MasterChefDogs.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "./DogsTokenV2.sol";
import "./interfaces/IDDSCA.sol";
import "./interfaces/IFeeManager.sol";
import "./interfaces/IReferralSystem.sol";
import "./interfaces/IStrategy.sol";


contract MasterChefDogsV2 is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    address public PLATFORM_ADDRESS;
    address public govAddress;
    bool public migrationEnabled = false;
    bool public platformnotLocked = true;
    bool public mintBurned = false;
    uint256 public totalLockedUpRewards;

    DogsTokenV2 public immutable dogsToken;
    IFeeManager public feeManager;
    IReferralSystem dogsReferral;
    IDDSCA DDSCA;

    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;

    // Info of each user.
    struct UserInfo {
        uint256 amount;             // How many LP tokens the user has provided.
        uint256 dogsRewardDebt;     // Reward debt. See explanation below.
        uint256 rewardLockedUp;     // Reward locked up.
        uint256 nextHarvestUntil;   // When can the user harvest again.
    }

    // Info of each pool.
    struct PoolInfo {
        IERC20 lpToken;           // Address of LP token contract.
        IStrategy strategy;       // Strategy address that will earnings compound want tokens
        uint256 allocPoint;       // How many allocation points assigned to this pool. DOGS to distribute per block.
        uint256 lastRewardBlock;  // Last block number that DOGS distribution occurs.
        uint256 accDogsPerShare;  // Accumulated DOGS per share, times 1e24. See below.
        uint256 lpSupply;         // Total units locked in the pool
        uint256 harvestInterval;  // Harvest interval in seconds
        uint256 depositFeeBP;     // Deposit fee in basis points
        uint256 withdrawFeeBP;    // Withdraw fee in basis points
        bool isLPToken;
    }

    struct migrationInfo {
        address lpToken;
        uint256 amountStaked;
    }

    // Info of each user.
    struct UserMigrationInfo {
        uint256 amountStaked;
    }

    // Info of each pool.
    PoolInfo[] public poolInfo;
    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserMigrationInfo)) public userMigrationInfo;


    // Info of each user that stakes LP tokens.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;

    uint256 public totalAllocPoint = 0;
    uint256 public constant referralCommissionRate = 300; // Pay out 3% to the referrer

    // Events
    event AddPool(uint256 indexed pid, bool isLPToken, uint256 allocPoint, address lpToken, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);
    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);
    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);
    event SetDogsReferral(address dogsAddress);
    event SetPlatformAddress(address indexed newAddress);
    event GovUpdated(address govAddress);

    constructor(
        DogsTokenV2 _dogsToken,
        address _platform,
        IDDSCA _ddsca
    ){
        DDSCA = _ddsca;
        PLATFORM_ADDRESS = _platform;
        dogsToken = _dogsToken;
        
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    mapping(IERC20 => bool) public poolExistence;
    modifier nonDuplicated(IERC20 _lpToken) {
        require(poolExistence[_lpToken] == false, "nonDuplicated: duplicated");
        _;
    }


    // View function to see pending on frontend.
    function pendingDogs(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accDogsPerShare = pool.accDogsPerShare;

        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0 && totalAllocPoint > 0) {
            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);
            uint256 dogReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;
            accDogsPerShare = accDogsPerShare + ((dogReward * 1e24) / pool.lpSupply);
        }

        uint256 pending = ((user.amount * accDogsPerShare) / 1e24) - user.dogsRewardDebt;
        return pending + user.rewardLockedUp;
    }

    function canHarvest(uint256 _pid, address _user) public view returns (bool) {
        UserInfo storage user = userInfo[_pid][_user];
        return block.timestamp >= user.nextHarvestUntil;
    }

    function addPoolUserData(uint256 _poolIndex, address[] memory _users, uint256[] memory _usersStakeData) external onlyOwner {
        require(_users.length == _usersStakeData.length);
        for (uint256 i = 0; i < _users.length; i++) {
            userMigrationInfo[_poolIndex][_users[i]].amountStaked = _usersStakeData[i];
        }
    }

    // Return reward multiplier over the given _from to _to block.
    function getDogsMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
        // As we set the multiplier to 0 here after DDSCA.emissionEndBlock
        // deposits aren't blocked after farming ends.
        if (_from > DDSCA.emissionEndBlock())
            return 0;
        if (_to > DDSCA.emissionEndBlock())
            return DDSCA.emissionEndBlock() - _from;
        else
            return _to - _from;
    }

    // Update reward variables for all pools. Be careful of gas spending!
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }

    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock)
            return;

        uint256 lpSupply = pool.lpSupply;
        if (lpSupply == 0 || pool.allocPoint == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }

        if (totalAllocPoint > 0){ 
            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);
            if (multiplier > 0) {
                uint256 dogsReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;
                dogsToken.mint(address(this), dogsReward);
                pool.accDogsPerShare = pool.accDogsPerShare + ((dogsReward * 1e24) / lpSupply);
            }
        }

        pool.lastRewardBlock = block.number;

    }

    function deposit(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {
        _deposit(_pid, msg.sender, _amount, _referrer, false);
    }

    function depositMigrator(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {
        require(migrationEnabled, 'migration not enabled');
        require(_amount > 0, 'zero amount');
        require(userMigrationInfo[_pid][msg.sender].amountStaked >= _amount);
        _deposit(_pid, msg.sender, _amount, _referrer, true);
        userMigrationInfo[_pid][msg.sender].amountStaked -= _amount;
    }

    function canMigrate(address _address) external view returns(bool){
        uint256 migrationSum = 0;
        for(uint256 i = 0 ; i < poolInfo.length; i++){
            migrationSum += userMigrationInfo[i][_address].amountStaked ;
        }
        if(migrationSum > 0){
            return true;
        }
        return false;
    }

    function canMigratePools(address _address) external view returns(migrationInfo[] memory){
        migrationInfo[] memory returnval = new migrationInfo[](poolInfo.length);
        for(uint256 i = 0 ; i < poolInfo.length; i++){
            returnval[i] = migrationInfo({lpToken: address(poolInfo[i].lpToken), amountStaked: userMigrationInfo[i][_address].amountStaked});
        }
        return returnval;
    }

    // Deposit LP tokens to MasterChef for DOGS allocation.
    function _deposit(uint256 _pid, address _userAddress, uint256 _amount, address _referrer, bool _isMigrator) internal {


        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_userAddress];
        updatePool(_pid);

        if (_amount > 0 && address(dogsReferral) != address(0) && _referrer != address(0) && _referrer != _userAddress) {
            dogsReferral.recordReferral(_userAddress, _referrer);
        }

        payOrLockupPendingDogs(_pid, _userAddress);

        if (_amount > 0) {

            uint256 userBalance = pool.lpToken.balanceOf(_userAddress);
            // Accept the balance of coins we receive (useful for coins which take fees).
            uint256 previousBalance = pool.lpToken.balanceOf(address(this));
            pool.lpToken.safeTransferFrom(_userAddress, address(this), _amount);
            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;
            require(_amount > 0, "no funds were received");

            uint256 depositFee = pool.depositFeeBP > 0 ? ((_amount * pool.depositFeeBP) / 10000) : 0;
            if (_isMigrator){
                depositFee = 0;
            }

            if (depositFee > 0) {

                uint256 platformFees = ((depositFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform
                uint256 rewardFees = depositFee - platformFees;          // 75% converted to busd for rewards

                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);
                pool.lpToken.safeTransfer(address(feeManager), rewardFees);

                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);

            }

            //take remains, send to strategy
            pool.lpToken.safeIncreaseAllowance(address(pool.strategy), _amount - depositFee);
            uint256 amountDeposit = pool.strategy.deposit(_amount - depositFee);

            user.amount = user.amount + amountDeposit;
            pool.lpSupply = pool.lpSupply + amountDeposit;

        }

        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);

        emit Deposit(_userAddress, _pid, _amount);
    }

    // Withdraw LP tokens from MasterChef.
    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {
        _withdraw(_pid, msg.sender, _amount);
    }

    function _withdraw(uint256 _pid, address _userAddress, uint256 _amount) internal {

        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_userAddress];
        require(user.amount >= _amount, "withdraw: not good");

        updatePool(_pid);

        payOrLockupPendingDogs(_pid, _userAddress);

        if (_amount > 0) {

            uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));
            pool.strategy.withdraw(_amount);
            uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));
            uint256 amountRemoved = lpAmountAfter - lpAmountBefore;

            // @bb new section
            uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;
            if (withdrawFee > 0) {
                uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform
                uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards

                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);
                pool.lpToken.safeTransfer(address(feeManager), rewardFees);

                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);
            }

            uint256 amountRemaining = amountRemoved - withdrawFee;

            if (_amount > user.amount) {
                user.amount = 0;
            } else {
                user.amount = user.amount - _amount;
            }

            pool.lpToken.safeTransfer(_userAddress, amountRemaining);

            if (pool.lpSupply >= _amount)
                pool.lpSupply = pool.lpSupply - _amount;
            else
                pool.lpSupply = 0;
        }

        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);

        emit Withdraw(_userAddress, _pid, _amount);
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external nonReentrant {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        uint256 amount = user.amount;
        user.amount = 0;
        user.dogsRewardDebt = 0;

        uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));
        pool.strategy.withdraw(amount);
        uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));
        uint256 amountRemoved = lpAmountAfter - lpAmountBefore;

        // @bb new section
        uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;
        if (withdrawFee > 0) {
            uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform
            uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards

            pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);
            pool.lpToken.safeTransfer(address(feeManager), rewardFees);

//            feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);
        }

        pool.lpToken.safeTransfer(msg.sender, amountRemoved - withdrawFee);

        // In the case of an accounting error, we choose to let the user emergency withdraw anyway
        if (pool.lpSupply >=  amount)
            pool.lpSupply = pool.lpSupply - amount;
        else
            pool.lpSupply = 0;

        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    // Pay pending Dogs
    function payOrLockupPendingDogs(uint256 _pid, address _userAddress) internal {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_userAddress];

        if (user.nextHarvestUntil == 0) {
            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;
        }

        uint256 dogsPending = ((user.amount * pool.accDogsPerShare) / 1e24) - user.dogsRewardDebt;

        if (canHarvest(_pid, _userAddress)) {
            if (dogsPending > 0 || user.rewardLockedUp > 0) {
                uint256 totalRewards = dogsPending + user.rewardLockedUp;

                // reset lockup
                totalLockedUpRewards = totalLockedUpRewards - user.rewardLockedUp;
                user.rewardLockedUp = 0;
                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;

                // dogsPending can't be zero
                safeTokenTransfer(address(dogsToken), _userAddress, totalRewards);
                payReferralCommission(_userAddress, totalRewards);
            }
        } else if (dogsPending > 0) {
            user.rewardLockedUp = user.rewardLockedUp + dogsPending;
            totalLockedUpRewards = totalLockedUpRewards + dogsPending;
            emit RewardLockedUp(_userAddress, _pid, dogsPending);
        }

    }

    // Safe token transfer function, just in case if rounding error causes pool to not have enough DOGS.
    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {
        uint256 tokenBal = IERC20(token).balanceOf(address(this));
        if (_amount > tokenBal) {
            IERC20(token).safeTransfer(_to, tokenBal);
        } else {
            IERC20(token).safeTransfer(_to, _amount);
        }
    }

    // Pay referral commission to the referrer who referred this user.
    function payReferralCommission(address _user, uint256 _pending) internal {
        if (address(dogsReferral) != address(0)) {
            address referrer = dogsReferral.getReferrer(_user);
            uint256 commissionAmount = (_pending * referralCommissionRate) / 10000;

            if (referrer != address(0) && commissionAmount > 0) {
                dogsToken.mint(referrer, commissionAmount);
                dogsReferral.recordReferralCommission(referrer, commissionAmount);
            }
        }
    }

    function increaseDogsSupply(uint256 _amount) external onlyOwner{
        require(!mintBurned);
        dogsToken.mint(msg.sender, _amount);
    }

    function burnMint() external onlyOwner{
        mintBurned = true;
    }

    // ************* Admin functions // *************
    // Add a new lp to the pool. Can only be called by the owner.
    function add(bool _isLPToken, uint256 _allocPoint, IERC20 _lpToken, IStrategy _strategy, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {
        _lpToken.balanceOf(address(this)); // Make sure the provided token is ERC20
        require(_strategy.wantLockedTotal() >= 0, "add: invalid strategy");
        require(_depositFeeBP <= 601, "add: bad deposit fee");
        require(_withdrawFeeBP <= 601, "add: bad withdraw fee");
        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, "add: invalid harvest interval");
        require(address(_lpToken) != address(dogsToken), "add: no native token pool");

        if (_withUpdate) {
            massUpdatePools();
        }

        uint256 lastRewardBlock = block.number > DDSCA.emissionStartBlock() ? block.number : DDSCA.emissionStartBlock();
        totalAllocPoint = totalAllocPoint + _allocPoint;
        poolExistence[_lpToken] = true;

        poolInfo.push(PoolInfo({
        lpToken: _lpToken,
        allocPoint: _allocPoint,
        lastRewardBlock: lastRewardBlock,
        accDogsPerShare: 0,
        depositFeeBP: _depositFeeBP,
        withdrawFeeBP: _withdrawFeeBP,
        isLPToken: _isLPToken,
        lpSupply: 0,
        strategy: _strategy,
        harvestInterval: _harvestInterval
        }));

        emit AddPool(poolInfo.length - 1, _isLPToken, _allocPoint, address(_lpToken), _depositFeeBP, _withdrawFeeBP, _harvestInterval);
    }

    // Update the given pool's DOGS allocation point and deposit fee. Can only be called by the owner.
    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner {
        require(_allocPoint <= 1e6, "set: invalid allocPoint");
        require(_depositFeeBP <= 601, "set: bad deposit fee");
        require(_withdrawFeeBP <= 601, "set: bad withdraw fee");
        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, "set: invalid harvest interval");
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;
        poolInfo[_pid].allocPoint = _allocPoint;
        poolInfo[_pid].depositFeeBP = _depositFeeBP;
        poolInfo[_pid].withdrawFeeBP = _withdrawFeeBP;
        poolInfo[_pid].harvestInterval = _harvestInterval;

        emit SetPool(_pid, _allocPoint, _depositFeeBP, _withdrawFeeBP, _harvestInterval);
    }

    // Update the dogs referral contract address by the owner
    function setReferral(IReferralSystem _dogsReferral) external onlyOwner {
        require(address(_dogsReferral) != address(0), "dogsReferral cannot be the 0 address");
        require(address(dogsReferral) == address(0), "dogs referral address already set");
        dogsReferral = _dogsReferral;

        emit SetDogsReferral(address(dogsReferral));
    }

    function setFarmStartBlock(uint256 _newStartBlock) external onlyOwner {
        DDSCA._setFarmStartBlock(_newStartBlock);
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            PoolInfo storage pool = poolInfo[pid];
            pool.lastRewardBlock = _newStartBlock;
        }
    }

    function setPlatformAddress(address _platformAddress) external onlyOwner {
        require(_platformAddress != address(0), "!nonzero");
        require(platformnotLocked);
        PLATFORM_ADDRESS = _platformAddress;
        emit SetPlatformAddress(_platformAddress);
    }
    
    function setDDSCAAddress(IDDSCA _ddsca) external onlyOwner{
        DDSCA = _ddsca;
    }

    function updateEmissions(uint256 priceInCents) external {
        require(msg.sender == govAddress, "!gov");
        (bool needsUpdate, IDDSCA.EmissionRate rate) = DDSCA.checkIfUpdateIsNeeded(priceInCents);
        if (needsUpdate){
            // Update pools before changing the emission rate
            massUpdatePools();
            DDSCA.updateEmissions(rate);
        }
    }

    function toggleMigrationEnabled(bool _state) public onlyOwner {
        migrationEnabled = _state;
    }
    
    function lockPlatform() external onlyOwner{
        platformnotLocked = false; 
    }

    function setGov(address _govAddress) external onlyOwner {
        require(_govAddress != address(0), 'zero address');
        govAddress = _govAddress;
        emit GovUpdated(govAddress);
    }

    function updateFeeManager(IFeeManager _feeManagerAddress) external onlyOwner {
        feeManager = _feeManagerAddress;
    }


}

// File: contracts/DogsTokenV2.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/interfaces/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./interfaces/IFeeManagerDogs.sol";
import "./interfaces/IDogPound.sol";

import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";

contract DogsTokenV2 is ERC20("Animal Farm Dogs", "AFD"), Ownable {
    using SafeERC20 for IERC20;

    uint256 public TxBaseTax = 9000; // 90%
    uint256 public TxBurnRate = 333; // 3.33%
    uint256 public TxVaultRewardRate = 9666; // 96.66%

    uint256 public constant MAXIMUM_TX_BASE_TAX = 9001; // Max transfer tax rate: 90.01%.
    uint256 public constant ZERO_TAX_INT = 10001; // Special 0 tax int

    address public constant BUSD_ADDRESS = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    IERC20 public constant busdRewardCurrency = IERC20(BUSD_ADDRESS);

    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    address public constant PANCAKESWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    IUniswapV2Router02 public pancakeswapRouter = IUniswapV2Router02(PANCAKESWAP_ROUTER_ADDRESS);

    address public dogsBusdSwapPair;
    address public dogsWbnbSwapPair;

    bool public swapAndLiquifyEnabled = false; // Automatic swap and liquify enabled
    bool private _inSwapAndLiquify;  // In swap and liquify

    IFeeManagerDogs public FeeManagerDogs;

    mapping(address => bool) public txTaxOperators;

    mapping(address => bool) public liquifyExemptFrom;
    mapping(address => bool) public liquifyExemptTo;

    mapping(address => uint256) public customTaxRateFrom;
    mapping(address => uint256) public customTaxRateTo;

    // Events
    event Burn(address indexed sender, uint256 amount);
    event SetSwapAndLiquifyEnabled(bool swapAndLiquifyEnabled);
    event TransferTaxChanged(uint256 txBaseTax);
    event TransferTaxDistributionChanged(uint256 baseBurnRate, uint256 vaultRewardRate);
    event UpdateCustomTaxRateFrom(address _account, uint256 _taxRate);
    event UpdateCustomTaxRateTo(address _account, uint256 _taxRate);
    event SetOperator(address operator);
    event SetFeeManagerDogs(address feeManagerDogs);
    event SetTxTaxOperator(address taxOperator, bool isOperator);

    // The operator can use admin functions
    address public _operator;

    // AB measures
    mapping(address => bool) private blacklistFrom;
    mapping(address => bool) private blacklistTo;
    mapping (address => bool) private _isExcludedFromLimiter;
    bool private blacklistFeatureAllowed = true;

    bool private transfersPaused = true;
    bool private transfersPausedFeatureAllowed = true;

    bool private sellingEnabled = false;
    bool private sellingToggleAllowed = true;

    bool private buySellLimiterEnabled = true;
    bool private buySellLimiterAllowed = true;
    uint256 private buySellLimitThreshold = 500e18;

    // AB events
    event LimiterUserUpdated(address account, bool isLimited);
    event BlacklistUpdated(address account, bool blacklisted);
    event TransferStatusUpdate(bool isPaused);
    event TransferPauseFeatureBurn();
    event SellingToggleFeatureBurn();
    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);
    event SellingEnabledToggle(bool enabled);
    event LimiterFeatureBurn();
    event BlacklistingFeatureBurn();

    modifier onlyOperator() {
        require(_operator == msg.sender, "!operator");
        _;
    }

    modifier onlyTxTaxOperator() {
        require(txTaxOperators[msg.sender], "!txTaxOperator");
        _;
    }

    modifier lockTheSwap {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }

    modifier transferTaxFree {
        uint256 _TxBaseTaxPrevious = TxBaseTax;
        TxBaseTax = 0;
        _;
        TxBaseTax = _TxBaseTaxPrevious;

    }

    /**
     * @notice Constructs the Dogs Token contract.
     */
    constructor(address _addLiquidityHelper) {

        _operator = msg.sender;
        txTaxOperators[msg.sender] = true;

        // Create BUSD and WBNB pairs
        dogsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), BUSD_ADDRESS);
        dogsWbnbSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), pancakeswapRouter.WETH());

        // Exclude from AB limiter
        _isExcludedFromLimiter[msg.sender] = true;
        _isExcludedFromLimiter[_addLiquidityHelper] = true; // needs to be false for initial launch

        // Apply custom Taxes
        // Buying / Remove Liq directly on PCS incurs 6% tax.
        customTaxRateFrom[dogsBusdSwapPair] = 600;
        customTaxRateFrom[dogsWbnbSwapPair] = 600;

        // Adding liquidity via helper is tax free
        customTaxRateFrom[_addLiquidityHelper] = ZERO_TAX_INT;
        customTaxRateTo[_addLiquidityHelper] = ZERO_TAX_INT;

        // Operator is untaxed
        customTaxRateFrom[msg.sender] = ZERO_TAX_INT;

        // Sending to Burn address is tax free
        customTaxRateTo[BURN_ADDRESS] = ZERO_TAX_INT;

        // Exclude add liquidityHelper from triggering liquification
        liquifyExemptFrom[_addLiquidityHelper] = true;
        liquifyExemptTo[_addLiquidityHelper] = true;

        liquifyExemptFrom[dogsBusdSwapPair] = true;
        liquifyExemptTo[dogsBusdSwapPair] = true;

        liquifyExemptFrom[dogsWbnbSwapPair] = true;
        liquifyExemptTo[dogsWbnbSwapPair] = true;
    }

    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).
    function mint(address _to, uint256 _amount) external onlyOwner {
        _mint(_to, _amount);
    }

    /// @dev overrides transfer function to meet tokenomics of Dogs Token
    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {

        require(!isBlacklistedFrom(sender), "ERROR: Address Blacklisted!");
        require(!isBlacklistedTo(recipient), "ERROR: Address Blacklisted!");

        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];

        if (transfersPaused) {
            require(isExcluded, "ERROR: Transfer Paused!");
        }

        if (recipient == address(dogsBusdSwapPair) && !isExcluded) {
            require(sellingEnabled, "ERROR: Selling disabled!");
        }
        if (recipient == address(dogsWbnbSwapPair) && !isExcluded) {
            require(sellingEnabled, "ERROR: Selling disabled!");
        }

        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding
        if (buySellLimiterEnabled && !isExcluded) {
            if (recipient == address(dogsBusdSwapPair) || sender == address(dogsBusdSwapPair)) {
                require(amount <= buySellLimitThreshold, "ERROR: buy / sell exceeded!");
            }
            if (recipient == address(dogsWbnbSwapPair) || sender == address(dogsWbnbSwapPair)) {
                require(amount <= buySellLimitThreshold, "ERROR: buy / sell exceeded!");
            }
        }
        // End of AB measures

        if (swapAndLiquifyEnabled == true && _inSwapAndLiquify == false){
            if (!liquifyExemptFrom[sender] || !liquifyExemptTo[recipient]){
                swapAndLiquefy();
            }
        }

        uint256 taxToApply = TxBaseTax;
        if (customTaxRateFrom[sender] > 0 ){
            taxToApply = customTaxRateFrom[sender];
        }
        if (customTaxRateTo[recipient] > 0 ){
            taxToApply = customTaxRateTo[recipient];
        }

        if (taxToApply == ZERO_TAX_INT || taxToApply == 0) {
            super._transfer(sender, recipient, amount);
        } else {
            uint256 baseTax = amount * taxToApply / 10000;
            uint256 baseBurn = baseTax * TxBurnRate / 10000;
            uint256 vaultReward = baseTax * TxVaultRewardRate / 10000;
            uint256 sendAmount = amount - baseBurn - vaultReward;

            _burnTokens(sender, baseBurn);
            super._transfer(sender, address(FeeManagerDogs), vaultReward);
            super._transfer(sender, recipient, sendAmount);

        }
    }

    function swapAndLiquefy() private lockTheSwap transferTaxFree {
        FeeManagerDogs.liquefyDogs();
    }

    /**
     * @notice Destroys `amount` tokens from the sender, reducing the total supply.
	 */
    function burn(uint256 _amount) external {
        _burnTokens(msg.sender, _amount);
    }

    /**
     * @dev Destroys `amount` tokens from the sender, reducing the total supply.
	 */
    function _burnTokens(address sender, uint256 _amount) private {
        _burn(sender, _amount);
        emit Burn(sender, _amount);
    }

    /**
     * @dev Update the transfer base tax rate.
     * Can only be called by the current operator.
     */
    function updateTransferTaxRate(uint256 _txBaseTax) external onlyTxTaxOperator {
        require(_txBaseTax <= MAXIMUM_TX_BASE_TAX, "invalid tax");
        TxBaseTax = _txBaseTax;
        emit TransferTaxChanged(TxBaseTax);
    }

    function updateCustomTaxRateFrom(address _account, uint256 _taxRate) external onlyTxTaxOperator {
        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, "invalid tax");
        customTaxRateFrom[_account] = _taxRate;
        emit UpdateCustomTaxRateFrom(_account, _taxRate);
    }

    function updateCustomTaxRateTo(address _account, uint256 _taxRate) external onlyTxTaxOperator {
        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, "invalid tax");
        customTaxRateTo[_account] = _taxRate;
        emit UpdateCustomTaxRateTo(_account, _taxRate);
    }

    /**
     * @dev Update the transfer tax distribution ratio's.
     * Can only be called by the current operator.
     */
    function updateTaxDistribution(uint256 _txBurnRate, uint256 _txVaultRewardRate) external onlyOperator {
        require(_txBurnRate + _txVaultRewardRate <= 10000, "!valid");
        TxBurnRate = _txBurnRate;
        TxVaultRewardRate = _txVaultRewardRate;
        emit TransferTaxDistributionChanged(TxBurnRate, TxVaultRewardRate);
    }

    /**
     * @dev Returns the address of the current operator.
     */
    function operator() external view returns (address) {
        return _operator;
    }

    /**
     * @dev Transfers operator of the contract to a new account (`newOperator`).
     * Can only be called by the current operator.
     */
    function transferOperator(address newOperator) external onlyOperator {
        require(newOperator != address(0), "!!0");
        _operator = newOperator;

        emit SetOperator(_operator);
    }

    /**
     * @dev Update list of Transaction Tax Operators
     * Can only be called by the current operator.
     */
    function updateTxTaxOperator(address _txTaxOperator, bool _isTxTaxOperator) external onlyOperator {
        require(_txTaxOperator != address(0), "!!0");
        txTaxOperators[_txTaxOperator] = _isTxTaxOperator;

        emit SetTxTaxOperator(_txTaxOperator, _isTxTaxOperator);
    }


    /**
     * @dev Update Fee Manager Dogs, sets tax to 0, exclude from triggering liquification
     * Can only be called by the current operator.
     */
    function updateFeeManagerDogs(address _feeManagerDogs) public onlyOperator {
        FeeManagerDogs = IFeeManagerDogs(_feeManagerDogs);
        customTaxRateFrom[_feeManagerDogs] = ZERO_TAX_INT;
        liquifyExemptFrom[_feeManagerDogs] = true;
        emit SetFeeManagerDogs(_feeManagerDogs);
    }

    /**
     * @dev Update the swapAndLiquifyEnabled.
     * Can only be called by the current operator.
     */
    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {
        swapAndLiquifyEnabled = _enabled;

        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled);
    }


    // AB measures
    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {
        require(buySellLimiterAllowed, 'feature destroyed');
        _isExcludedFromLimiter[account] = isExcluded;
        emit LimiterUserUpdated(account, isExcluded);
    }

    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {
        require(buySellLimiterAllowed, 'feature destroyed');
        buySellLimiterEnabled = isEnabled;
        buySellLimitThreshold = amount;
        emit BuySellLimiterUpdate(isEnabled, amount);
    }

    function burnLimiterFeature() external onlyOperator {
        buySellLimiterAllowed = false;
        emit LimiterFeatureBurn();
    }

    function isBlacklistedFrom(address account) public view returns (bool) {
        return blacklistFrom[account];
    }

    function isBlacklistedTo(address account) public view returns (bool) {
        return blacklistTo[account];
    }

    function toggleBlacklistUserFrom(address[] memory accounts, bool blacklisted) external onlyOperator {
        require(blacklistFeatureAllowed, "ERROR: Function burned!");
        for (uint256 i = 0; i < accounts.length; i++) {
            blacklistFrom[accounts[i]] = blacklisted;
            emit BlacklistUpdated(accounts[i], blacklisted);
        }
    }

    function toggleBlacklistUserTo(address[] memory accounts, bool blacklisted) external onlyOperator {
        require(blacklistFeatureAllowed, "ERROR: Function burned!");
        for (uint256 i = 0; i < accounts.length; i++) {
            blacklistTo[accounts[i]] = blacklisted;
            emit BlacklistUpdated(accounts[i], blacklisted);
        }
    }

    function burnBlacklistingFeature() external onlyOperator {
        blacklistFeatureAllowed = false;
        emit BlacklistingFeatureBurn();
    }

    function toggleSellingEnabled(bool enabled) external onlyOperator {
        require(sellingToggleAllowed, 'feature destroyed');
        sellingEnabled = enabled;
        emit SellingEnabledToggle(enabled);
    }

    function burnToggleSellFeature() external onlyOperator {
        sellingToggleAllowed = false;
        emit SellingToggleFeatureBurn();
    }

    function toggleTransfersPaused(bool isPaused) external onlyOperator {
        require(transfersPausedFeatureAllowed, 'feature destroyed');
        transfersPaused = isPaused;
        emit TransferStatusUpdate(isPaused);
    }

    function burnTogglePauseFeature() external onlyOperator {
        transfersPausedFeatureAllowed = false;
        emit TransferPauseFeatureBurn();
    }

}



// File: contracts/interfaces/IDDSCA.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IDDSCA {
  enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}
  function ActiveEmissionIndex (  ) external view returns ( uint8 );
  function bottomPriceInCents (  ) external view returns ( uint256 );
  function checkIfUpdateIsNeeded ( uint256 priceInCents ) external view returns ( bool, EmissionRate );
  function emissionEndBlock (  ) external view returns ( uint256 );
  function emissionStartBlock (  ) external view returns ( uint256 );
  function getEmissionStage ( uint256 currentPriceCents ) external view returns ( uint8 );
  function isInitialized (  ) external view returns ( bool );
  function masterchef (  ) external view returns ( address );
  function maxEmissionRate (  ) external view returns ( uint256 );
  function owner (  ) external view returns ( address );
  function renounceOwnership (  ) external;
  function setFarmEndBlock ( uint256 _newEndBlock ) external;
  function _setFarmStartBlock(uint256 _newStartBlock) external;
  function token (  ) external view returns ( address );
  function tokenPerBlock (  ) external view returns ( uint256 );
  function topPriceInCents (  ) external view returns ( uint256 );
  function transferOwnership ( address newOwner ) external;
  function updateDDSCAMaxEmissionRate ( uint256 _maxEmissionRate ) external;
  function updateDDSCAPriceRange ( uint256 _topPrice, uint256 _bottomPrice ) external;
  function updateEmissions ( EmissionRate _newEmission ) external;
  function updateMcAddress ( address _mcAddress ) external;
}


// File: contracts/interfaces/IFeeManager.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IFeeManager {

    function swapDepositFeeForBUSD(address token, bool isLPToken) external;
    function convertDepositFeesToBUSD(address token, bool isLPToken, bool isLiquidation) external;
}

// File: contracts/interfaces/IStrategy.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IStrategy {
    // Total want tokens managed by strategy
    function wantLockedTotal() external view returns (uint256);

    // Main want token compounding function
    function earn() external;

    // Transfer want tokens MasterChefV2 -> strategy
    function deposit(uint256 _wantAmt)
    external
    returns (uint256);

    // Transfer want tokens strategy -> MasterChefV2
    function withdraw(uint256 _wantAmt)
    external
    returns (uint256);

    function inCaseTokensGetStuck(
        address _token,
        uint256 _amount,
        address _to
    ) external;
}

// File: contracts/interfaces/IReferralSystem.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IReferralSystem {
    /**
     * @dev Record referral.
     */
    function recordReferral(address user, address referrer) external;

    /**
     * @dev Record referral commission.
     */
    function recordReferralCommission(address referrer, uint256 commission) external;

    /**
     * @dev Get the referrer address that referred the user.
     */
    function getReferrer(address user) external view returns (address);
}

// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/interfaces/IDogPound.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ILoyalityPool {
    function totalTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);
}

// File: contracts/interfaces/IFeeManagerDogs.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IFeeManagerDogs {

    function liquefyDogs() external;
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol
pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

