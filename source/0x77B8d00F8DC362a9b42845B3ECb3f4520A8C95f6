// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function decimals() external view returns (uint8);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);
}

contract Intermediate {
    address public owners;
    modifier _Owner() {
        require(owners == msg.sender);
        _;
    }

    mapping(address => bool) public Whitelist;
    modifier _Whitelist() {
        require(Whitelist[msg.sender]);
        _;
    }

    constructor() {
        owners = msg.sender;
    }

    function setOwner(address owner_) public _Owner returns (bool) {
        owners = owner_;
        return true;
    }

    function setWhitelist(
        address address_,
        bool state_
    ) public _Owner returns (bool) {
        Whitelist[address_] = state_;
        return true;
    }

    function toTransfer(
        address contract_,
        address to_,
        uint256 amount_
    ) public _Whitelist returns (bool) {
        IERC20 ercs = IERC20(contract_);
        ercs.transfer(to_, amount_);
        return true;
    }

    function transferall(
        address contract_,
        address[] memory recipient,
        uint256[] memory amount
    ) public returns (bool) {
        require(
            recipient.length == amount.length,
            "ERC20: Array length are different"
        );
        IERC20 ercs = IERC20(contract_);
        for (uint i = 0; i < recipient.length; i++) {
            ercs.transferFrom(msg.sender, recipient[i], amount[i]);
        }
        return true;
    }
}