// SPDX-License-Identifier: MIT
//pragma solidity ^0.8.6; 6或者0都可以
pragma solidity ^0.8.0;

interface IERC20{
    function decimals() external view returns (uint8);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
    function transfer(address recipient,uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) view external returns (uint256);
}

// 实现{IERC20}接口
contract Intermediate{

    //管理员
    address public owners;
    modifier _Owner {   //管理员
        require(owners == msg.sender);
        _;
    }

    //白名单
    mapping(address=>bool) public Whitelist;
    modifier _Whitelist {   //管理员
        require(Whitelist[msg.sender]);
        _;
    }

    constructor() {
        owners = msg.sender;
    }
    //合约管理员
    function setOwner(address owner_) public _Owner returns (bool) {
        owners = owner_;
        return true;
    }
    //调用白名单
    function setWhitelist(address address_,bool state_) public _Owner returns (bool) {
        Whitelist[address_] = state_;
        return true;
    }
    //单一转账
    function toTransfer(address contract_,address to_,uint256 amount_) public _Whitelist returns(bool){
        IERC20 ercs = IERC20(contract_);
        ercs.transfer(to_,amount_);
        return true;
    }
    //批量转账
    function transferall(address contract_,address[] memory recipient, uint256[] memory amount) public returns(bool){
        require(recipient.length == amount.length,"ERC20: Array lengths are different");
        IERC20 ercs = IERC20(contract_);
        for(uint i = 0; i < recipient.length ; i++){
            ercs.transferFrom(msg.sender,recipient[i], amount[i]);
        } 
        return true;
    }
    
}