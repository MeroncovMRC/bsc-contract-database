// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract SiopaoToken {
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;
    
    uint256 private totalSupply = 1000000000000 * 10 ** 18;
    string public name = "Siopao";
    string public symbol = "SIOPAO";
    uint8 public decimals = 18;
    
    uint256 private liquidityFee = 2;
    uint256 private buyTaxFee = 5;
    uint256 private sellTaxFee = 5;
    
    address payable public marketingWallet;
    address payable public greenWallet;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(address payable _marketingWallet, address payable _greenWallet) {
        balances[msg.sender] = totalSupply;
        marketingWallet = _marketingWallet;
        greenWallet = _greenWallet;
    }
    
    function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
    }
    
    function transfer(address to, uint256 value) public returns (bool) {
        require(to != address(0), "Invalid recipient address");
        require(value > 0, "Invalid transfer amount");
        require(balanceOf(msg.sender) >= value, "Insufficient balance");

        uint256 buyTaxAmount = (value * buyTaxFee) / 100;
        uint256 transferAmount = value - buyTaxAmount;
        
        balances[msg.sender] -= value;
        balances[to] += transferAmount;
        balances[marketingWallet] += buyTaxAmount;

        emit Transfer(msg.sender, to, transferAmount);
        emit Transfer(msg.sender, marketingWallet, buyTaxAmount);
        return true;
    }
    
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(to != address(0), "Invalid recipient address");
        require(value > 0, "Invalid transfer amount");
        require(balanceOf(from) >= value, "Insufficient balance");
        require(allowances[from][msg.sender] >= value, "Insufficient allowance");
        
        uint256 sellTaxAmount = (value * sellTaxFee) / 100;
        uint256 transferAmount = value - sellTaxAmount;
        
        balances[from] -= value;
        balances[to] += transferAmount;
        balances[marketingWallet] += sellTaxAmount;
        allowances[from][msg.sender] -= value;

        emit Transfer(from, to, transferAmount);
        emit Transfer(from, marketingWallet, sellTaxAmount);
        return true;
    }
    
    function approve(address spender, uint256 value) public returns (bool) {
        allowances[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
}