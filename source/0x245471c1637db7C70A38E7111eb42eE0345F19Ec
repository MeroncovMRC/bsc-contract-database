// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ERC20Launcher {
    address private owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "ERC20Launcher: caller is not the owner");
        _;
    }

    event ContractDeployed(address indexed tokenAddress, string name, string symbol, uint256 totalSupply);

    constructor() {
        owner = msg.sender;
    }

    function launchToken(
        string memory name,
        string memory symbol,
        uint256 totalSupply,
        address wallet
    ) public onlyOwner {
        ERC20Token newToken = new ERC20Token(name, symbol, totalSupply, wallet);
        emit ContractDeployed(address(newToken), name, symbol, totalSupply);
    }
}

contract ERC20Token {
    string private _name;
    string private _symbol;
    uint256 private _totalSupply;
    address private _wallet;
    mapping(address => uint256) private _balances;

    constructor(
        string memory tokenname,
        string memory tokensymbol,
        uint256 initialSupply,
        address wallet
    ) {
        _name = tokenname;
        _symbol = tokensymbol;
        _totalSupply = initialSupply;
        _wallet = wallet;
        _balances[wallet] = initialSupply;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }
}