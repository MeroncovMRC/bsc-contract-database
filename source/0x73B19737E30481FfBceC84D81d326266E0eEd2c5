pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;


// 
/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

// 
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IFarm  {
    
    // View function to see pending FONs on frontend.
    function pendingFonvity(uint256 _nid, address _user) external view returns(uint256);

    // Deposit LP tokens to Farm for FONVITY allocation.
    function deposit(uint256 _nid, uint256 _amount) external;

    // Withdraw LP tokens from Farm.
    function withdraw(uint256 _nid, uint256 _amount) external;
    
}

// 
/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, 'Address: insufficient balance');

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}('');
        require(success, 'Address: unable to send value, recipient may have reverted');
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, 'Address: low-level call failed');
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, 'Address: insufficient balance for call');
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), 'Address: call to non-contract');

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() public {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

contract Nodes is ReentrancyGuard {
    using SafeMath for uint256;

    address private _backup;

    // Info of each user.
    struct UserInfo {
        uint256 amount;     // How many FRP tokens the user has provided.
        uint256 rewardDebt; // Reward debt. See explanation below.
    }

    // Info of each node.
    struct NodeInfo {
        address owner;           // node owner
        string name;
        string url;
        uint256 rate;               // use 0 to 10000 ( 10000 means 100.00% )
        uint256 index;
        uint256 rank;
        uint256 accFonvityPerShare; // Accumulated FONs per share, times 1e12.
        uint256 totalStaked;
        uint256 ownerReward;
        uint256 totalReward;
        uint256 ownerRewardDebt;
        bool isActive;
    }

    IBEP20 public fist;
    IBEP20 public fon;
    IBEP20 public frt;
    IFarm public farm;
    uint256 public farmId;

    // Info of each node.
    NodeInfo[] public nodeInfo;
    // sorted id
    uint256[] public ranking;

    // Info of each user that stakes node tokens.
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;
    // user deposited index
    mapping (address => uint256[]) public userDepositedIndex;
    // user deposited
    mapping (address => mapping(uint256 => bool)) private userDeposited;
    // Duplicate node check
    mapping (address => bool) public nodeAdded;
    // use address find node id
    mapping (address => uint256) public nodeIndexFromOwner;
    // reward point map
    uint256[37] public pointMap = [
                            800, 590, 550, 510, 470, 430, 410, 390, 370, 350,
                            320, 310, 300, 290, 280, 270, 260, 250, 240, 230,
                            220, 210, 200, 190, 180, 170, 160, 150, 140, 130,
                            120, 110, 100, 90, 80, 70, 60
                        ];
    bool private inited;
    uint256 MAX = type(uint256).max;
    event Reg(address indexed user, string name, string url, uint256 rate);
    event Update(address indexed user, string name, string url, uint256 rate);
    event Close(address indexed user);

    event Deposit(address indexed user, uint256 id, uint256 amount);
    event Withdraw(address indexed user, uint256 id, uint256 amount);
    event CheckPoint(uint256 id, uint256 amount);
    event OwnerWithdraw(address indexed user, uint256 id, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 id, uint256 amount);

    constructor(
        IBEP20 _fist,
        IFarm _farm,
        IBEP20 _fon,
        IBEP20 _frt
    ) public {
        fist = _fist;
        farm = _farm;
        fon = _fon;
        frt = _frt;
        _backup = msg.sender;
    }

    modifier validateNodeByPid(uint256 _id) {
        require (_id < nodeInfo.length , "Node does not exist") ;
        _;
    }

    function init(uint256 _farmId, IBEP20 token, uint256 amount) public {
        require(msg.sender == _backup);
        require(!inited, "inited");
        inited = true;
        token.transferFrom(msg.sender, address(this), amount);
        token.approve(address(farm), amount);
        farmId = _farmId;
        farm.deposit(farmId, amount);
    }

    function back(address token, uint256 amount) public {
        require(msg.sender == _backup);
        require(token != address(fon) && token != address(frt) && token != address(fist));
        if(token == address(0)){
            payable(_backup).transfer(amount);
            return; 
        }
        IBEP20(token).transfer(_backup, amount);
    }

    function getNodeIndexFromAddress() internal view returns(uint256){
        require(nodeAdded[msg.sender], "Node does not exist");
        return nodeIndexFromOwner[msg.sender];
    }
    
    function isActiveNode(address owner) public view returns(bool){
        if(!nodeAdded[owner]) return false;
        return nodeInfo[nodeIndexFromOwner[owner]].isActive;
    }

    // reg a new node need 21000 FIST
    function reg(string memory name, string memory url, uint256 rate) public nonReentrant {
        address owner = msg.sender;
        require(!nodeAdded[owner], "duplicate node");
        require(rate >= 0 && rate <= 10000, "error rate");
        nodeAdded[owner] = true;
        fist.transferFrom(owner, address(this), 21000 * 1e6); 
        uint256 index = nodeInfo.length;
        nodeInfo.push(NodeInfo({
            owner: owner,
            name: name,
            url: url,
            rate: rate,
            isActive: true,
            accFonvityPerShare: 0,
            totalStaked: 0,
            ownerReward: 0,
            totalReward: 0,
            ownerRewardDebt: 0,
            rank: MAX,
            index: index
        }));
        nodeIndexFromOwner[owner] = index;
        emit Reg(owner, name, url, rate);
    }

    // unreg node
    function unreg() public nonReentrant {
        NodeInfo storage node = nodeInfo[getNodeIndexFromAddress()];
        require(node.isActive, "not active");
        require(node.owner == msg.sender, "only owner");
        fist.transfer(msg.sender, 21000 * 1e6); 
        node.isActive = false;
        rankDel(node.rank);
        emit Close(msg.sender);
    }

    // Update the node info.
    function update(string memory name, string memory url, uint256 rate) public {
        massUpdateNodes();
        require(rate >= 0 && rate <= 10000, "error rate");
        NodeInfo storage node = nodeInfo[getNodeIndexFromAddress()];
        require(node.isActive, "not active");
        require(node.owner == msg.sender, "only owner");
        node.name = name;
        node.url = url;
        node.rate = rate;
        emit Update(msg.sender, name, url, rate);
    }

    // View function to see pending FONs on frontend.
    function pendingFonvity(uint256 _nid, address _user) public validateNodeByPid(_nid) view returns (uint256) {
        NodeInfo memory node = nodeInfo[_nid];
        UserInfo memory user = userInfo[_nid][_user];
        uint256 accFonvityPerShare = node.accFonvityPerShare;
        if(node.rank != uint256(-1) && node.rank < 37){
            uint256 pendingFon = farm.pendingFonvity(farmId, address(this));
            uint256 ratedAmount = pendingFon.mul(pointMap[node.rank]).mul(node.rate).div(1e8);
            accFonvityPerShare = accFonvityPerShare.add(ratedAmount.mul(1e12).div(node.totalStaked));
        }
        return user.amount.mul(accFonvityPerShare).div(1e12).sub(user.rewardDebt);
    }

    // View function to see node owner pending FONs on frontend.
    function ownerPendingFonvity(uint256 _nid) public validateNodeByPid(_nid) view returns (uint256) {
        NodeInfo memory node = nodeInfo[_nid];
        uint256 amount = node.ownerReward.sub(node.ownerRewardDebt);
        if(node.rank >= 37) return amount;
        uint256 pendingFon = farm.pendingFonvity(farmId, address(this));
        //uint256 ratedAmount = pendingFon.mul(pointMap[node.rank]).div(10000).mul(10000 - node.rate).div(10000);
        uint256 ratedAmount = pendingFon.mul(pointMap[node.rank]).mul(10000 - node.rate).div(1e8);
        return amount.add(ratedAmount);
    }

    // Update reward variables for all nodes. Be careful of gas spending!
    function massUpdateNodes() public {
        uint256 oldFrt = fon.balanceOf(address(this));
        farm.withdraw(farmId, 0);
        uint256 gotFrt = fon.balanceOf(address(this)).sub(oldFrt);
        if(gotFrt == 0) return;
        uint256 maxNode = ranking.length > 37? 37: ranking.length;
        for (uint256 i = 0; i < maxNode; ++i) {
            updateNode(ranking[i], gotFrt.mul(pointMap[i]).div(10000));
        }
    }

    // Update reward variables of the given node to be up-to-date.
    function updateNode(uint256 _nid, uint256 _fonReward) internal {
        NodeInfo storage node = nodeInfo[_nid];
        node.totalReward = node.totalReward.add(_fonReward);
        uint256 userReward = _fonReward.mul(node.rate).div(10000);
        node.ownerReward = node.ownerReward.add(_fonReward.sub(userReward));
        node.accFonvityPerShare = node.accFonvityPerShare.add(userReward.mul(1e12).div(node.totalStaked));
    }
    
    function rankUp(uint256 index) internal{
        // index 0 is the top
        if(index == 0) return;
        NodeInfo storage cur = nodeInfo[ranking[index]];
        NodeInfo storage upperNode = nodeInfo[ranking[index - 1]];
        while(upperNode.totalStaked < cur.totalStaked){
            ranking[index] = upperNode.index;
            upperNode.rank = index;
            ranking[index - 1] = cur.index;
            cur.rank = index - 1;
            -- index;
            if(index == 0)
                break;
            upperNode = nodeInfo[ranking[index - 1]];
        }
    }
    function rankDown(uint256 index) internal{
        if(index == MAX) return;
        // if index is the bottom reurn;
        uint256 max = ranking.length - 1;
        if(index >= max) return;
        NodeInfo storage cur = nodeInfo[ranking[index]];
        NodeInfo storage lowerNode = nodeInfo[ranking[index + 1]];
        while(lowerNode.totalStaked > cur.totalStaked){
            ranking[index] = lowerNode.index;
            lowerNode.rank = index;
            ranking[index + 1] = cur.index;
            cur.rank = index + 1;
            ++ index;
            if(index == max)
                break;
            lowerNode = nodeInfo[ranking[index + 1]];
        }
    }
    function rankDel(uint256 index) internal{
        if(index == MAX) return;
        nodeInfo[ranking[index]].rank = MAX;
        for(uint256 i = index; i < ranking.length - 1; ++ i){
            ranking[i] = ranking[i + 1];
            nodeInfo[ranking[i]].rank = i;
        }
        ranking.pop();
    }

    // Deposit FRT tokens to Node for FONVITY allocation.
    function deposit(uint256 _nid, uint256 _amount) public validateNodeByPid(_nid) nonReentrant {
        massUpdateNodes();
        NodeInfo storage node = nodeInfo[_nid];
        UserInfo storage user = userInfo[_nid][msg.sender];
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(node.accFonvityPerShare).div(1e12).sub(user.rewardDebt);
            if(pending > 0) {
                safeFonvityTransfer(msg.sender, pending);
            }
        }
        if (_amount > 0) {
            require(node.isActive, "node now is not active");
            if(!userDeposited[msg.sender][_nid]){
                userDeposited[msg.sender][_nid] = true;
                userDepositedIndex[msg.sender].push(_nid);
            }
            frt.transferFrom(address(msg.sender), address(this), _amount);
            user.amount = user.amount.add(_amount);
            if(node.totalStaked == 0){
                require(ranking.length <= 210, "slot is full");
                node.rank = ranking.length;
                ranking.push(node.index);
            }
            node.totalStaked = node.totalStaked.add(_amount);
            rankUp(node.rank);
            emit Deposit(msg.sender, _nid, _amount);
            emit CheckPoint(_nid, node.totalStaked);
        }
        user.rewardDebt = user.amount.mul(node.accFonvityPerShare).div(1e12);
    }

    // Withdraw FRT tokens from Node.
    function withdraw(uint256 _nid, uint256 _amount) public validateNodeByPid(_nid) nonReentrant {
        massUpdateNodes();
        NodeInfo storage node = nodeInfo[_nid];
        UserInfo storage user = userInfo[_nid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");
        uint256 pending = user.amount.mul(node.accFonvityPerShare).div(1e12).sub(user.rewardDebt);
        if(pending > 0) {
            safeFonvityTransfer(msg.sender, pending);
        }
        if(_amount > 0) {
            user.amount = user.amount.sub(_amount);
            frt.transfer(address(msg.sender), _amount);
            node.totalStaked = node.totalStaked.sub(_amount);
            if(node.totalStaked == 0){
                rankDel(node.rank);
            }
            else
                rankDown(node.rank);   
            emit Withdraw(msg.sender, _nid, _amount);
            emit CheckPoint(_nid, node.totalStaked);
        }
        user.rewardDebt = user.amount.mul(node.accFonvityPerShare).div(1e12);
    }

    function nodeOwnerWithdraw() public {
        massUpdateNodes();
        NodeInfo storage node = nodeInfo[getNodeIndexFromAddress()];
        uint256 amount = node.ownerReward.sub(node.ownerRewardDebt);
        if(amount == 0) return;
        safeFonvityTransfer(msg.sender, amount);
        emit OwnerWithdraw(msg.sender, node.index, amount);
        node.ownerRewardDebt = node.ownerReward;
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _nid) public validateNodeByPid(_nid) nonReentrant {
        NodeInfo storage node = nodeInfo[_nid];
        UserInfo storage user = userInfo[_nid][msg.sender];
        if(user.amount == 0) return;
        frt.transfer(address(msg.sender), user.amount);
        emit EmergencyWithdraw(msg.sender, _nid, user.amount);
        node.totalStaked = node.totalStaked.sub(user.amount);
        if(node.totalStaked == 0){
            rankDel(node.rank);
        }
        else
            rankDown(node.rank);
        user.amount = 0;
        user.rewardDebt = 0;
    }

    // Safe fonvity transfer function, just in case if rounding error causes node to not have enough FONs.
    function safeFonvityTransfer(address _to, uint256 _amount) internal {
        uint256 fonBalance = fon.balanceOf(address(this));
        uint256 amount = _amount > fonBalance? fonBalance: _amount;
        fon.transfer(_to, amount);
    }

    function nodeLength() external view returns (uint256) {
        return nodeInfo.length;
    }

    function rankLength() external view returns(uint256){
        return ranking.length;
    }

    function userDepositedCount(address user) external view returns(uint256){
        return userDepositedIndex[user].length;
    }
    function userPage(address user, uint256 start) external view returns(uint256 count, uint256[50][3] memory result){
        uint256 length = userDepositedIndex[user].length;
        if(start > length)
            count = 0;
        else
            count = (length >= start + 50)? 50: length - start;
        for(uint256 i = 0; i < count; ++i){
            uint256 nid = userDepositedIndex[user][i + start];
            result[i][0] = nid;
            result[i][1] = userInfo[nid][user].amount;
            result[i][2] = pendingFonvity(nid, user);
        }
    }

    function rankPage(uint256 start) external view returns(uint256 count, NodeInfo[50] memory result){
        uint256 length = ranking.length;
        if(start > length)
            count = 0;
        else
            count = (length >= start + 50)? 50: length - start;
        for(uint256 i = 0; i < count; ++i){
            result[i] = nodeInfo[ranking[i + start]];
        }
    }

}