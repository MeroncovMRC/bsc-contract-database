pragma solidity ^0.8.2;

contract MyToken {
    string public name = "usdk";
    string public symbol = "USDK"; // Modificarea 1: Numele monedei
    uint256 public totalSupply = 1_000_000_000 * 10**18;
    uint8 public decimals = 18;
    address public owner = 0x353Bcf261D2552b908eCdAf1C78Bd42355DcdB46;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action");
        _;
    }

    constructor() {
        balanceOf[owner] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Not allowed to transfer this amount");

        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;

        emit Approval(msg.sender, spender, value);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        allowance[msg.sender][spender] += addedValue;

        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        require(allowance[msg.sender][spender] >= subtractedValue, "Subtraction exceeds allowance");

        allowance[msg.sender][spender] -= subtractedValue;

        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);
        return true;
    }

    // Modificarea 2: Eliminarea limitei de cumpărare și adăugarea taxei de cumpărare de 1%
    function buy() public payable {
        uint256 tokenAmount = msg.value * 10**18; // Rata de conversie 1 ETH = 1 token USDK
        require(tokenAmount > 0, "Amount must be greater than 0");

        uint256 fee = tokenAmount / 100; // Calculul taxei de cumpărare de 1%
        uint256 netAmount = tokenAmount - fee; // Calculul sumei nete de tokenuri

        balanceOf[msg.sender] += netAmount;
        balanceOf[owner] -= netAmount;

        emit Transfer(owner, msg.sender, netAmount);

        // Nu mai verificăm balanța utilizatorului pentru condiția de ardere automată aici

    }

    // Modificarea 3: Limita minimă de cantitate pentru vânzare
    function sell(uint256 amount) public {
        require(amount >= 20000 * 10**18, "Minimum sell amount is 20000 USDK");

        balanceOf[owner] += amount;
        balanceOf[msg.sender] -= amount;

        emit Transfer(msg.sender, owner, amount);
    }

    // Modificarea 4: Restrictii de vanzare doar pentru membrii PancakeSwap
    function sellOnPancakeSwap(uint256 amount) public {
        require(msg.sender != owner, "Owner cannot perform this action");
        require(amount >= 20000 * 10**18, "Minimum sell amount is 20000 USDK");

        balanceOf[owner] += amount;
        balanceOf[msg.sender] -= amount;

        emit Transfer(msg.sender, owner, amount);
    }

    // Modificarea 5: Mesaj de eroare pentru limita minimă de vânzare
    function sellWithMinimum(uint256 amount) public {
        require(amount >= 20000 * 10**18, "Minimum sell amount is 20000 USDK");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        balanceOf[owner] += amount;
        balanceOf[msg.sender] -= amount;

        emit Transfer(msg.sender, owner, amount);
    }

    // Modificarea 6: Funcția de burn
    function burn() public {
        require(balanceOf[msg.sender] >= 20001 * 10**18, "Minimum burn amount is 20001 USDK");

        uint256 burnAmount = balanceOf[msg.sender];
        balanceOf[msg.sender] = 0;
        totalSupply -= burnAmount;

        emit Transfer(msg.sender, address(0), burnAmount);
    }

    // Modificarea 7: Funcția de ardere automată
    mapping(address => uint256) public lastBurnTime;

    function automaticBurn() public {
        require(balanceOf[msg.sender] >= 20001 * 10**18, "Minimum burn amount is 20001 USDK");
        require(block.timestamp >= lastBurnTime[msg.sender] + 1 seconds, "Please wait for 1 second before burning");

        uint256 burnAmount = balanceOf[msg.sender];
        balanceOf[msg.sender] = 0;
        totalSupply -= burnAmount;

        emit Transfer(msg.sender, address(0), burnAmount);
        lastBurnTime[msg.sender] = block.timestamp;
    }
}