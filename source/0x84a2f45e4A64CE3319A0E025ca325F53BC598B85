
// File: contracts/ApeHeroMarketplace.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.4;

import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

// common interface for Heroes & Villains
interface IApeHeroNFT {
    function totalSupply() external view returns (uint256);
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
    function tokenByIndex(uint256 index) external view returns (uint256);
    function originalMinter(uint tokenId) external view returns (address);
}

contract ApeHeroMarketplace is ReentrancyGuard, Pausable, IERC721Receiver, Ownable, AccessControlEnumerable {
    using Address for address;
    using Strings for uint;
    using EnumerableSet for EnumerableSet.UintSet;
    using EnumerableSet for EnumerableSet.AddressSet;

    enum RewardType {
        HOLDER,
        MINTER
    }

    struct Collection {
        address id;
        bool active;
        uint volume;
        uint items;
        uint totalSupply;
        uint rShareHolders;
        uint rShareMinters;
        uint rShareTeam;
        bool earnRoyalties;
    }

    struct NFT {
        address collection;
        address owner;
        uint id;
        uint price;
        uint listedOn;
        uint soldOn;
        bool sold;
    }

    struct ContractData {
        uint balance;
        uint rTeamLifetimeTotal;
        uint rTeamBalance;
        uint rHoldersLifetimeTotal;
        uint rHoldersBalance;
        uint rHoldersRewards;
        uint rMintersLifetimeTotal;
        uint rMintersBalance;
        uint totalListing;
        uint svcFeesBalance;
        uint svcFeesListBalance;
        uint svcFeesDelistBalance;
        uint svcFeesListing;
        uint svcFeesDelisting;
        uint minListPrice;
    }

    struct SellShare {
        uint seller;
        uint holders;
        uint minter;
        uint team;
    }

    bytes32 public constant ADMIN = keccak256("ADMIN");

    // service
    uint private _minListPrice = 0 ether;
    uint private _sFeesList = 0 ether;
    uint private _sFeesDelist = 0 ether;
    uint private _sFeesListBalance;
    uint private _sFeesDelistBalance;
    uint private _sFeesBalance;

    // total lifetime royalties
    uint private _rTeamLifetimeTotal;
    uint private _rTeamBalance;
    uint private _rHoldersLifetimeTotal;
    uint private _rHoldersBalance;
    uint private _rHoldersRewards;
    uint private _rMintersLifetimeTotal;
    uint private _rMintersBalance;

    // original minter rewards by account
    mapping(address => uint) private _rMinterRewardsLifetimeTotal;
    EnumerableSet.AddressSet private _rMintersWithRewards;
    mapping(address => uint) private _rMintersRewards;

    // holders
    mapping(address => uint) private _rHolderRewardsByCollection;
    mapping(address => mapping(uint => uint)) private _rHolderClaimedRewardsByCollection;

    // collections
    EnumerableSet.AddressSet private _royaltiesCollections;
    EnumerableSet.AddressSet private _allActiveCollections;
    mapping(address => Collection) private _allCollections;

    // items
    // {[collection]: [tokenId,]}
    mapping(address => EnumerableSet.UintSet) private _listedItemsById;
    // {[collection]: {[tokenId]: {NFT}}}
    mapping(address => mapping(uint => NFT)) private _listedItems;
    // {[collection]: uint}
    mapping(address => uint) private _listedItemsTotalByCollection;
    uint _listedItemsTotal;

    // {[walletAddress]: {[collection]: [tokenId,]}}
    mapping(address => mapping(address => EnumerableSet.UintSet)) private _listedItemsByAccount;
    // {[walletAddress]: [collection]}
    mapping(address => EnumerableSet.AddressSet) private _listedCollectionsByAccount;
    // {[walletAddress]: uint}
    mapping(address => uint) private _listedTotalByAccount;

    // events
    event FundsDirectlyDeposited(address sender, uint amount);
    event FundsReceived(address sender, uint amount);
    event ItemListed(address indexed lister, address indexed collection, uint tokenId, uint price);
    event ItemDelisted(address indexed delister, address indexed collection, uint tokenId);
    event ItemSold(address indexed buyer, address indexed lister, address indexed collection, uint tokenId, uint price);
    event RewardsClaimed(uint rType, address indexed claimer, uint amount);
    event CollectionAdded(address indexed collection, uint supply, uint rHolders, uint rMinters, uint rTeam, bool earnRoyalties);
    event CollectionRemoved(address indexed collection);

    constructor() Ownable() {
        // make owner default admin for all roles
        _setupRole(DEFAULT_ADMIN_ROLE, owner());
        grantRole(ADMIN, owner());
    }

    // --- fallback/received --- //
    receive() external payable {
        emit FundsReceived(_msgSender(), msg.value);
    }

    fallback() external payable {
        emit FundsDirectlyDeposited(_msgSender(), msg.value);
    }

    // --- overrides --- //
    /**
     * Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    // --- utils --- //
    // get all admins
    function _getAllAdmins() internal view returns (address[] memory) {
        uint adminCount = getRoleMemberCount(ADMIN);
        address[] memory allAdmins = new address[](adminCount);
        for (uint i = 0; i < adminCount; i++) {
            allAdmins[i] = getRoleMember(ADMIN, i);
        }

        return allAdmins;
    }

    // get total of all tokens that earn royalties
    function _totalEarningHoldersRewards() internal view returns (uint) {
        uint total;
        for (uint i = 0; i < _royaltiesCollections.length(); i++) {
            total += _allCollections[_royaltiesCollections.at(i)].totalSupply;
        }
        return total;
    }

    /**
     * @dev calculate royalties and
     * toSeller, toHolder, toMinter, toTeam
     */
    function _allocateRoyalties(address collection, uint price) internal view returns (SellShare memory) {
        uint onePercent = price / 100;
        return SellShare(
            (100 - (_allCollections[collection].rShareHolders + _allCollections[collection].rShareMinters + _allCollections[collection].rShareTeam)) * onePercent,
            _allCollections[collection].rShareHolders * onePercent,
            _allCollections[collection].rShareMinters * onePercent,
            _allCollections[collection].rShareTeam * onePercent
        );
    }

    /**
     * @dev get all current listing for a collection
     */
    function _getListedItems(address collection) internal view returns (NFT[] memory) {
        uint _totalListing = _listedItemsById[collection].length();
        NFT[] memory _currentListings = new NFT[](_totalListing);
        for (uint i = 0; i < _listedItemsById[collection].length(); i++) {
            _currentListings[i] = _listedItems[collection][_listedItemsById[collection].at(i)];
        }

        return _currentListings;
    }

    function _getListedItemsForAccount(address account, address collection) internal view returns (NFT[] memory) {
        uint listCount = _listedItemsByAccount[account][collection].length();
        NFT[] memory allListed = new NFT[](listCount);
        for (uint i = 0; i < listCount; i++) {
            allListed[i] = _listedItems[collection][_listedItemsByAccount[account][collection].at(i)];
        }
        return allListed;
    }

    function _getMinterRewards(address account) internal view returns (uint) {
        if (!_rMintersWithRewards.contains(account)) {
            return 0;
        }
        return _rMintersRewards[account];
    }

    function _claimMinterRewards(address payable account) internal {
        uint rewards = _rMintersRewards[account];
        require(rewards > 0, "Does not have any original minter's rewards at this time");
        _rMintersRewards[account] = 0;
        _rMintersBalance -= rewards;
        payable(account).transfer(rewards);
        emit RewardsClaimed(uint(RewardType.MINTER), account, rewards);
    }

    function _getTokensByOwner(address collection, address account) internal view returns (uint[] memory) {
        uint _bal = IERC721(collection).balanceOf(account);
        uint[] memory tokens = new uint[](_bal);
        for (uint i = 0; i < _bal; i++) {
            tokens[i] = IERC721Enumerable(collection).tokenOfOwnerByIndex(account, i);
        }
        return tokens;
    }

    function _getHolderRewards(address account) internal view returns (uint) {
        uint collCount = _royaltiesCollections.length();
        uint _allEarned;
        uint _tEarned;
        uint[] memory _tokens;
        for (uint i = 0; i < collCount; i++) {
            _tokens = _getTokensByOwner(_royaltiesCollections.at(i), account);
            if (_tokens.length > 0) {
                for (uint j = 0; j < _tokens.length; j++) {
                    _tEarned = _rHoldersRewards - _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_tokens[j]];
                    if (_tEarned > 0) {
                        _allEarned += _tEarned;
                    }
                }
            }

            // account for items listed on market
            uint _lEarned;
            NFT[] memory _listed = _getListedItemsForAccount(account, _royaltiesCollections.at(i));
            if (_listed.length > 0) {
                for (uint k = 0; k < _listed.length; k++) {
                    _lEarned = _rHoldersRewards - _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_listed[k].id];
                if (_lEarned > 0) {
                        _allEarned += _lEarned;
                    }
                }
            }
        }
        return _allEarned;
    }

    function _claimHolderRewards(address account) internal {
        uint collCount = _royaltiesCollections.length();
        uint _allEarned;
        uint _tEarned;
        uint[] memory _tokens;
        for (uint i = 0; i < collCount; i++) {
            _tokens = _getTokensByOwner(_royaltiesCollections.at(i), account);
            if (_tokens.length > 0) {
                for (uint j = 0; j < _tokens.length; j++) {
                    _tEarned = _rHoldersRewards - _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_tokens[j]];
                    if (_tEarned > 0) {
                        _allEarned += _tEarned;
                        _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_tokens[j]] += _tEarned;
                    }
                }
            }

            // account for items listed on market
            uint _lEarned;
            NFT[] memory _listed = _getListedItemsForAccount(account, _royaltiesCollections.at(i));
            if (_listed.length > 0) {
                for (uint k = 0; k < _listed.length; k++) {
                    _lEarned = _rHoldersRewards - _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_listed[k].id];
                    if (_lEarned > 0) {
                        _allEarned += _lEarned;
                        _rHolderClaimedRewardsByCollection[_royaltiesCollections.at(i)][_listed[k].id] += _lEarned;
                    }
                }
            }
        }

        require(_allEarned > 0 && _allEarned <= _rHoldersBalance, "Insufficient balance");
        _rHoldersBalance -= _allEarned;
        payable(account).transfer(_allEarned);
        emit RewardsClaimed(uint(RewardType.HOLDER), account, _allEarned);
    }

    // --- owners & safety measures in case of emergency --- //
    /**
     * @dev emergency withdraw-we would never use this but it's best to have this to protect
     * our token owners and community.
     */
    function emergencyWithdraw() public onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    /**
     * @dev emergency brake allows pausing of contract in case of exploit
     * this is just a measure to ensure our holders' properties are safe
     */
    function emergencyBrake() public onlyOwner whenNotPaused {
        _pause();
    }

    /**
     * @dev removing emergency brake
     */
    function removeEmergencyBrake() public onlyOwner whenPaused {
        _unpause();
    }

    /**
     * @dev emergency release safely sends listed NFT back to appropriate owner
     * no charges/fees are involved here. Just straight-up giving people's stuff back
     */
    function emergencyRelease(address collection, uint tokenId) public onlyOwner whenNotPaused {
        require(
            !_listedItems[collection][tokenId].sold &&
        _listedItems[collection][tokenId].id == tokenId,
            "Token does not exist in collection"
        );
        IERC721(collection).safeTransferFrom(
            address(this),
            address(_listedItems[collection][tokenId].owner),
            _listedItems[collection][tokenId].id
        );
    }

    /**
     * @dev add admin
     */
    function addAdmin(address account) public onlyOwner {
        grantRole(ADMIN, account);
    }

    /**
     * @dev remove admin
     */
    function removeAdmin(address account) public onlyOwner {
        revokeRole(ADMIN, account);
    }

    /**
     * @dev paying only the portion allocated for team
     * which consists of multiple department wallets
     * each department is responsible for their own
     * employee payroll & budget
     */
    function teamPayout() public onlyRole(ADMIN) {
        address[] memory allAdmins = _getAllAdmins();
        uint teamBalance = _rTeamBalance + _sFeesBalance;
        // reset
        _rTeamBalance = 0;
        _sFeesBalance = 0;

        require((allAdmins.length - 1) > 0, "Need to add department wallets!");

        uint departmentShare = teamBalance / (allAdmins.length - 1);
        for (uint i = 0; i < allAdmins.length; i++) {
            if (allAdmins[i] != owner()) {
                payable(allAdmins[i]).transfer(departmentShare);
            }
        }
    }

    /**
     * @dev update service settings
     */
    function updateService(uint listingFees, uint delistingFees, uint minListingPrice) public onlyOwner {
        _sFeesList = listingFees;
        _sFeesDelist = delistingFees;
        _minListPrice = minListingPrice;
    }

    /**
     * @dev add a Collection to marketplace
     */
    function addCollection(address collection, uint supply, uint rHolders, uint rMinters, uint rTeam, bool earnRoyalties) public onlyOwner {
        require(rHolders + rMinters + rTeam <= 100, "Royalties cannot be more than 100%");
        _allCollections[collection] = Collection(collection, true, 0, 0, supply, rHolders, rMinters, rTeam, earnRoyalties);

        // keeping track of active & royalties
        _allActiveCollections.add(collection);
        if (earnRoyalties) {
            _royaltiesCollections.add(collection);
        }

        emit CollectionAdded(collection, supply, rHolders, rMinters, rTeam, earnRoyalties);
    }

    /**
     * @dev remove a Collection from marketplace
     */
    function removeCollection(address collection) public onlyOwner {
        require(_allCollections[collection].active, "Collection not active");
        _allCollections[collection].active = false;

        // keeping track of active & royalties
        _allActiveCollections.remove(collection);
        if (_allCollections[collection].earnRoyalties) {
            _royaltiesCollections.remove(collection);
        }

        emit CollectionRemoved(collection);
    }

    /**
     * @dev add a Collection to marketplace
     */
    function updateCollection(address collection, uint supply, uint rHolders, uint rMinters, uint rTeam, bool earnRoyalties) public onlyOwner {
        require(_allCollections[collection].active, "Collection not active");
        require(rHolders + rMinters + rTeam <= 100, "Royalties cannot be more than 100%");

        _allCollections[collection].totalSupply = supply;
        _allCollections[collection].rShareHolders = rHolders;
        _allCollections[collection].rShareMinters = rMinters;
        _allCollections[collection].rShareTeam = rTeam;
        _allCollections[collection].earnRoyalties = earnRoyalties;

        // keeping track of royalties
        if (earnRoyalties) {
            _royaltiesCollections.add(collection);
        }
    }


    // --- public --- //
    function listItem(address collection, uint tokenId, uint price) public payable nonReentrant whenNotPaused {
        require(msg.value >= _sFeesList, "Insufficient payment for listing fee");
        require(price >= _minListPrice, "List price needs to be higher than minimum listing price");
        require(_allCollections[collection].active, "Collection not supported");

        // transfer item
        IERC721(collection).safeTransferFrom(_msgSender(), address(this), tokenId);

        // pay service fees
        _sFeesListBalance += msg.value;
        _sFeesBalance += msg.value;

        // list item
        _listedCollectionsByAccount[_msgSender()].add(collection);
        _listedItemsByAccount[_msgSender()][collection].add(tokenId);
        _listedItemsById[collection].add(tokenId);
        _listedItems[collection][tokenId] = NFT(collection, _msgSender(), tokenId, price, block.timestamp, 0, false);
        _listedTotalByAccount[_msgSender()] += 1;
        _listedItemsTotalByCollection[collection] += 1;
        _listedItemsTotal += 1;

        // update collection data
        _allCollections[collection].items += 1;

        emit ItemListed(_msgSender(), collection, tokenId, price);
    }

    function delistItem(address collection, uint tokenId) public payable nonReentrant whenNotPaused {
        require(msg.value >= _sFeesDelist, "Insufficient payment for delisting fee");
        require(_listedItemsById[collection].contains(tokenId), "Item not currently listed");
        require(_msgSender() == _listedItems[collection][tokenId].owner, "Does not own item");

        NFT memory _item = _listedItems[collection][tokenId];

        // pay service fees
        _sFeesDelistBalance += msg.value;
        _sFeesBalance += msg.value;

        // delist item
        _listedItemsByAccount[_msgSender()][collection].remove(tokenId);
        if (_listedItemsByAccount[_msgSender()][collection].length() == 0) {
            _listedCollectionsByAccount[_msgSender()].remove(collection);
        }
        _listedTotalByAccount[_msgSender()] -= 1;
        _listedItemsTotalByCollection[collection] -= 1;
        _listedItemsTotal -= 1;
        _listedItemsById[collection].remove(tokenId);
        delete _listedItems[collection][tokenId];

        // send item back
        IERC721(collection).safeTransferFrom(address(this), address(_item.owner), _item.id);

        // keeps items tally
        _allCollections[collection].items -= 1;

        emit ItemDelisted(_msgSender(), collection, tokenId);
    }

    function buyItem(address collection, uint tokenId) public payable nonReentrant whenNotPaused {
        require(_listedItemsById[collection].contains(tokenId), "Item not currently listed");
        require(_msgSender() != _listedItems[collection][tokenId].owner, "Owner cannot buy owned item");
        require(msg.value >= _listedItems[collection][tokenId].price, "Insufficient payment for item");

        NFT memory _item = _listedItems[collection][tokenId];
        SellShare memory _sellShare = _allocateRoyalties(collection, _item.price);

        // pay royalties - team
        _rTeamLifetimeTotal += _sellShare.team;
        _rTeamBalance += _sellShare.team;

        // pay royalties - original minter
        if (_sellShare.minter > 0) {
            address minter = IApeHeroNFT(collection).originalMinter(tokenId);
            _rMintersBalance += _sellShare.minter;
            _rMinterRewardsLifetimeTotal[minter] += _sellShare.minter;
            _rMintersRewards[minter] += _sellShare.minter;
            _rMintersWithRewards.add(minter);
        }

        // pay royalties - holders
        _rHolderRewardsByCollection[collection] += _sellShare.holders;
        _rHoldersLifetimeTotal += _sellShare.holders;
        _rHoldersBalance += _sellShare.holders;
        _rHoldersRewards += _sellShare.holders / _totalEarningHoldersRewards();

        // pay seller
        payable(_item.owner).transfer(_sellShare.seller);
        // transfer NFT
        IERC721(collection).safeTransferFrom(address(this), _msgSender(), tokenId);

        // remove item
        _listedItemsByAccount[_item.owner][collection].remove(tokenId);
        if (_listedItemsByAccount[_item.owner][collection].length() == 0) {
            _listedCollectionsByAccount[_item.owner].remove(collection);
        }
        _listedTotalByAccount[_item.owner] -= 1;
        _listedItemsTotalByCollection[collection] -= 1;
        _listedItemsTotal -= 1;
        _listedItemsById[collection].remove(tokenId);
        delete _listedItems[collection][tokenId];

        // update collection data
        _allCollections[collection].volume += _item.price;
        _allCollections[collection].items -= 1;
        emit ItemSold(_msgSender(), _item.owner, collection, tokenId, _item.price);
    }

    /**
     * @dev contract data
     */
    function cData() public view returns (ContractData memory) {
        return ContractData(
            address(this).balance,
            _rTeamLifetimeTotal,
            _rTeamBalance,
            _rHoldersLifetimeTotal,
            _rHoldersBalance,
            _rHoldersRewards,
            _rMintersLifetimeTotal,
            _rMintersBalance,
            _listedItemsTotal,
            _sFeesBalance,
            _sFeesListBalance,
            _sFeesDelistBalance,
            _sFeesList,
            _sFeesDelist,
            _minListPrice
        );
    }

    /**
     * @dev account data
     */
    function aData() public view returns (uint, uint) {
        return (
            _getHolderRewards(_msgSender()),
            _getMinterRewards(_msgSender())
        );
    }
    /**
     * @dev account data
     */
    function wData(address account) public view returns (uint, uint) {
        return (
            _getHolderRewards(account),
            _getMinterRewards(account)
        );
    }

    /**
     * @dev get all admins
     */
    function getAdmins() public view returns (address[] memory) {
        return _getAllAdmins();
    }

    /**
     * @dev get all current data for a collection and listed items
     */
    function getCollectionData(address collection) public view returns (Collection memory, NFT[] memory) {
        return (
            _allCollections[collection],
            _getListedItems(collection)
        );
    }

    /**
     * @dev get all active collections
     */
    function getAllCollections() public view returns (Collection[] memory) {
        uint _collCount = _allActiveCollections.length();
        Collection[] memory _allColls = new Collection[](_collCount);
        for (uint i = 0; i < _collCount; i++) {
            _allColls[i] = _allCollections[_allActiveCollections.at(i)];
        }
        return _allColls;
    }

    /**
     * @dev current listed item for an account
     */
    function getListedItemsForAccount(address account, address collection) public view returns (NFT[] memory) {
        return _getListedItemsForAccount(account, collection);
    }

    function claimMinterRewards() public {
        _claimMinterRewards(payable(_msgSender()));
    }

    function claimHolderRewards() public {
        _claimHolderRewards(payable(_msgSender()));
    }
}


// File: @openzeppelin/contracts/access/AccessControlEnumerable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IAccessControlEnumerable.sol";
import "./AccessControl.sol";
import "../utils/structs/EnumerableSet.sol";

/**
 * @dev Extension of {AccessControl} that allows enumerating the members of each role.
 */
abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {
    using EnumerableSet for EnumerableSet.AddressSet;

    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {
        return _roleMembers[role].at(index);
    }

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {
        return _roleMembers[role].length();
    }

    /**
     * @dev Overload {grantRole} to track enumerable memberships
     */
    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {
        super.grantRole(role, account);
        _roleMembers[role].add(account);
    }

    /**
     * @dev Overload {revokeRole} to track enumerable memberships
     */
    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {
        super.revokeRole(role, account);
        _roleMembers[role].remove(account);
    }

    /**
     * @dev Overload {renounceRole} to track enumerable memberships
     */
    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {
        super.renounceRole(role, account);
        _roleMembers[role].remove(account);
    }

    /**
     * @dev Overload {_setupRole} to track enumerable memberships
     */
    function _setupRole(bytes32 role, address account) internal virtual override {
        super._setupRole(role, account);
        _roleMembers[role].add(account);
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}


// File: @openzeppelin/contracts/access/IAccessControlEnumerable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IAccessControl.sol";

/**
 * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.
 */
interface IAccessControlEnumerable is IAccessControl {
    /**
     * @dev Returns one of the accounts that have `role`. `index` must be a
     * value between 0 and {getRoleMemberCount}, non-inclusive.
     *
     * Role bearers are not sorted in any particular way, and their ordering may
     * change at any point.
     *
     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure
     * you perform all queries on the same block. See the following
     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]
     * for more information.
     */
    function getRoleMember(bytes32 role, uint256 index) external view returns (address);

    /**
     * @dev Returns the number of accounts that have `role`. Can be used
     * together with {getRoleMember} to enumerate all bearers of a role.
     */
    function getRoleMemberCount(bytes32 role) external view returns (uint256);
}


// File: @openzeppelin/contracts/access/AccessControl.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IAccessControl.sol";
import "../utils/Context.sol";
import "../utils/Strings.sol";
import "../utils/introspection/ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    function _grantRole(bytes32 role, address account) private {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    function _revokeRole(bytes32 role, address account) private {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// File: @openzeppelin/contracts/access/IAccessControl.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

