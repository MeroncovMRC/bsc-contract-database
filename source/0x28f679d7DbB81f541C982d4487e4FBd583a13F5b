{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n"},"interact.sol":{"content":"//SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.6.2;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ninterface Staking{\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract StakingToken is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n    uint256 apy = 100; // 100%\r\n    Staking token = Staking(address(0));\r\n\r\n    struct Staked{\r\n        uint256 amount;\r\n        uint256 at;\r\n    }\r\n\r\n    mapping(address =\u003e Staked[]) internal stakes;\r\n    mapping(address =\u003e uint256) internal rewards;\r\n    address[] public stakeHolders;\r\n    uint256 public depositFee = 100; // 10000 = 100% -\u003e 100 = 1%\r\n    uint256 public withdrawalFee = 50; // 10000 = 100% -\u003e 50 = 0.5%\r\n\r\n    constructor(address oldToken) public {\r\n        token = Staking(oldToken);     \r\n    }\r\n    function stake(uint256 amount) public{\r\n        token.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, amount);\r\n        token.mint(owner(), amount.mul(depositFee).div(10000));\r\n        if(isStakeholder(msg.sender)){\r\n            sendReward(msg.sender, stakes[msg.sender][0].at, stakes[msg.sender][0].amount);\r\n            stakes[msg.sender][0].at = block.timestamp;\r\n            stakes[msg.sender][0].amount += amount.sub(amount.mul(depositFee).div(10000));\r\n        } else {\r\n            stakeHolders.push(msg.sender);\r\n            stakes[msg.sender].push(Staked(amount.sub(amount.mul(depositFee).div(10000)), block.timestamp));\r\n        }\r\n    }\r\n\r\n    function sendReward(address to, uint256 at, uint256 amount) private {\r\n        uint256 toMint = calculateRewards(amount, at);\r\n        uint256 toFee = toMint.mul(withdrawalFee).div(10000);\r\n        token.mint(to, toMint - toFee);\r\n        token.mint(owner(), toFee);\r\n    }\r\n\r\n    function calculateRewards(uint256 amount, uint256 blocktime) public view returns(uint256){\r\n        return apy.mul(amount).div(100).mul(block.timestamp.sub(blocktime)).div(365 days);\r\n    }\r\n\r\n    function unstake(uint256 amount) public {\r\n        require(stakes[msg.sender][0].amount \u003e= amount);\r\n        sendReward(msg.sender, stakes[msg.sender][0].at, stakes[msg.sender][0].amount);\r\n        token.mint(msg.sender, amount);\r\n        stakes[msg.sender][0].amount = stakes[msg.sender][0].amount - amount;\r\n        stakes[msg.sender][0].at = block.timestamp;\r\n    }\r\n\r\n    function stakeOf(address staker) public view returns(uint256){\r\n        return stakes[staker][0].amount;\r\n    }\r\n\r\n    function totalStakes() public view returns(uint256){\r\n        uint256 total = 0;\r\n        for(uint256 i=0; i \u003c stakeHolders.length; i++){\r\n            total += stakes[stakeHolders[i]][0].amount;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function isStakeholder(address guy) public view returns(bool){\r\n        for (uint256 i = 0; i \u003c stakeHolders.length; i++){\r\n            if (guy == stakeHolders[i]) return (true);\r\n        }\r\n        return (false);\r\n    }\r\n\r\n    function getUnclaimedRewards(address wad) public view returns(uint256){\r\n        return calculateRewards(stakes[wad][0].amount, stakes[wad][0].at);\r\n    }\r\n\r\n    function totalUnclaimedRewards() public view returns(uint256){ \r\n        uint256 totalRewards = 0;\r\n        for (uint256 i = 0; i \u003c stakeHolders.length; i++){\r\n            totalRewards += calculateRewards(stakes[stakeHolders[i]][0].amount, stakes[stakeHolders[i]][0].at);\r\n        }\r\n        return totalRewards;\r\n    }\r\n\r\n    function sendAllRewards() public onlyOwner {\r\n        for(uint256 i=0; i \u003c stakeHolders.length; i++){\r\n            sendReward(stakeHolders[i], stakes[stakeHolders[i]][0].at, stakes[stakeHolders[i]][0].amount);\r\n            stakes[stakeHolders[i]][0].at = block.timestamp;\r\n        }\r\n    }\r\n    function changeAPY(uint256 newApy) public onlyOwner {\r\n        apy = newApy; // WILL ALSO AFFECT UNCLAIMED REWARDS! MAKE SURE TO SEND REWARDS FIRST\r\n    }\r\n\r\n    function changeFees(uint256 deposit, uint256 withdrawal) public onlyOwner {\r\n        depositFee = deposit;\r\n        withdrawalFee = withdrawal;\r\n    }\r\n\r\n    function claimReward() public{\r\n        require(isStakeholder(msg.sender));\r\n        require(stakes[msg.sender][0].amount \u003e 0);\r\n        sendReward(msg.sender, stakes[msg.sender][0].at, stakes[msg.sender][0].amount);\r\n        stakes[msg.sender][0].at = block.timestamp;\r\n    }\r\n\r\n    function getAPY() public view returns(uint256){\r\n        return apy;\r\n    }\r\n\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.6.2;\r\n\r\n// SPDX-License-Identifier: MIT License\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}