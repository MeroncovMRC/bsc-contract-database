{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \u0027Address: insufficient balance\u0027);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\u0027\u0027);\r\n        require(success, \u0027Address: unable to send value, recipient may have reverted\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \u0027Address: low-level call failed\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \u0027Address: low-level call with value failed\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \u0027Address: insufficient balance for call\u0027);\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \u0027Address: call to non-contract\u0027);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./Context.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    uint256 _maxsupply;\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory namea, string memory symbola,uint8 decimalsa) {\r\n        _name = namea;\r\n        _symbol = symbola;\r\n        _decimals = decimalsa;\r\n        _maxsupply = 1000000000 *(10 **_decimals);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        require(_totalSupply.add(amount) \u003c= _maxsupply);\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \u0027BEP20: transfer from the zero address\u0027);\r\n        require(recipient != address(0), \u0027BEP20: transfer to the zero address\u0027);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0027BEP20: transfer amount exceeds balance\u0027);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: mint to the zero address\u0027);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0027BEP20: burn amount exceeds balance\u0027);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\r\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function burn(uint256 amount) public override returns (bool)\r\n    {\r\n        _burn(msg.sender,amount);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public override returns (bool)\r\n    {\r\n        _burnFrom(account,amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \u0027BEP20: burn amount exceeds allowance\u0027)\r\n        );\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burnFrom(address account, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"LizMinePool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\n \r\ncontract LizMinePool\r\n{\r\n    address _owner;\r\n    address _token;\r\n    address _feeowner;\r\n    using TransferHelper for address;\r\n \r\n    constructor(address tokenaddress,address feeowner)\r\n    {\r\n        _owner=msg.sender;\r\n        _token=tokenaddress;\r\n        _feeowner=feeowner;\r\n    }\r\n\r\n    function SendOut(address to,uint256 amount) public returns(bool)\r\n    {\r\n        require(msg.sender==_feeowner);\r\n        _token.safeTransfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    function MineOut(address to,uint256 amount,uint256 fee) public returns(bool){\r\n        require(msg.sender==_owner);\r\n        _token.safeTransfer(to, amount);\r\n        IBEP20(_token).burn(fee);\r\n        return true;\r\n    }\r\n}"},"LizMiner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./LpWallet.sol\";\r\nimport \"./LizMinePool.sol\";\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface oldminer {\r\n    function getUserLevel(address user) external view returns (uint256);\r\n\r\n    function getUserTeamHash(address user) external view returns (uint256);\r\n\r\n    function getUserSelfHash(address user) external view returns (uint256);\r\n\r\n    function getMyLpInfo(address user, address tokenaddress)\r\n        external\r\n        view\r\n        returns (uint256[3] memory);\r\n}\r\n\r\ncontract LizMiner is ReentrancyGuard {\r\n    using TransferHelper for address;\r\n    using SafeMath for uint256;\r\n    address private _Lizaddr;\r\n    address private _Liztrade;\r\n    address private _bnbtradeaddress;\r\n    address private _wrappedbnbaddress;\r\n    address private _usdtaddress;\r\n    address private _owner;\r\n    address private _feeowner;\r\n    LizMinePool private _minepool;\r\n    oldminer _oldcontract;\r\n    oldminer _ooldcontract;\r\n\r\n    mapping(uint256 =\u003e uint256[20]) internal _levelconfig; //credit level config\r\n    uint256 _nowtotalhash;\r\n    mapping(uint256 =\u003e uint256[3]) _checkpoints;\r\n    uint256 _currentMulitiper;\r\n    uint256 _maxcheckpoint;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) _oldpool;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) _userLphash;\r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) _userlevelhashtotal; // level hash in my team\r\n    mapping(address =\u003e address) internal _parents; //Inviter\r\n    mapping(address =\u003e UserInfo) _userInfos;\r\n    mapping(address =\u003e PoolInfo) _lpPools;\r\n    mapping(address =\u003e address[]) _mychilders;\r\n    mapping(uint256 =\u003e uint256) _pctRate;\r\n    address[] _lpaddresses;\r\n\r\n    struct PoolInfo {\r\n        LpWallet poolwallet;\r\n        uint256 hashrate; //  The LP hashrate\r\n        address tradeContract;\r\n        uint256 minpct;\r\n        uint256 maxpct;\r\n    }\r\n\r\n    uint256[8] _vipbuyprice = [0, 100, 300, 500, 800, 1200, 1600, 2000];\r\n\r\n    struct UserInfo {\r\n        uint256 selfhash; //user hash total count\r\n        uint256 teamhash;\r\n        uint256 userlevel; // my userlevel\r\n        uint256 pendingreward;\r\n        uint256 lastblock;\r\n        uint256 lastcheckpoint;\r\n    }\r\n\r\n    event BindingParents(address indexed user, address inviter);\r\n    event VipChanged(address indexed user, uint256 userlevel);\r\n    event TradingPooladded(address indexed tradetoken);\r\n    event UserBuied(\r\n        address indexed tokenaddress,\r\n        uint256 amount,\r\n        uint256 hashb\r\n    );\r\n    event TakedBack(address indexed tokenaddress, uint256 pct);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function getMinerPoolAddress() public view returns (address) {\r\n        return address(_minepool);\r\n    }\r\n\r\n    function setPctRate(uint256 pct, uint256 rate) public {\r\n        require(msg.sender == _owner);\r\n        _pctRate[pct] = rate;\r\n    }\r\n\r\n    function getHashRateByPct(uint256 pct) public view returns (uint256) {\r\n        if (_pctRate[pct] \u003e 0) return _pctRate[pct];\r\n\r\n        return 100;\r\n    }\r\n\r\n    function getMyChilders(address user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return _mychilders[user];\r\n    }\r\n\r\n    function into(uint256 amount) public payable {\r\n        _Lizaddr.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n \r\n\r\n    function InitalContract(\r\n        address lizToken,\r\n        address liztrade,\r\n        address wrappedbnbaddress,\r\n        address bnbtradeaddress,\r\n        address usdtaddress,\r\n        address feeowner,\r\n        address oldcontract,\r\n        address ooldcontract\r\n    ) public {\r\n        require(msg.sender == _owner);\r\n        require(_feeowner == address(0));\r\n        _Lizaddr = lizToken;\r\n        _Liztrade = liztrade;\r\n        _bnbtradeaddress = bnbtradeaddress;\r\n        _usdtaddress = usdtaddress;\r\n        _wrappedbnbaddress = wrappedbnbaddress;\r\n        _feeowner = feeowner;\r\n        _minepool = new LizMinePool(lizToken, _owner);\r\n        _parents[msg.sender] = address(_minepool);\r\n        _oldcontract = oldminer(oldcontract);\r\n        _ooldcontract = oldminer(ooldcontract);\r\n        _pctRate[70] = 120;\r\n        _pctRate[50] = 150;\r\n\r\n        _levelconfig[0] = [\r\n            100,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[1] = [\r\n            150,\r\n            100,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[2] = [\r\n            160,\r\n            110,\r\n            90,\r\n            60,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[3] = [\r\n            170,\r\n            120,\r\n            100,\r\n            70,\r\n            40,\r\n            30,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[4] = [\r\n            180,\r\n            130,\r\n            110,\r\n            80,\r\n            40,\r\n            30,\r\n            20,\r\n            10,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[5] = [\r\n            200,\r\n            140,\r\n            120,\r\n            90,\r\n            40,\r\n            30,\r\n            20,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[6] = [\r\n            220,\r\n            160,\r\n            140,\r\n            100,\r\n            40,\r\n            30,\r\n            20,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ];\r\n        _levelconfig[7] = [\r\n            250,\r\n            180,\r\n            160,\r\n            110,\r\n            40,\r\n            30,\r\n            20,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10,\r\n            10\r\n        ];\r\n\r\n        _maxcheckpoint = 1;\r\n        uint256 newpoint = 1e25;\r\n        newpoint = newpoint.mul(1331).div(1000);\r\n        _checkpoints[_maxcheckpoint][0] = block.number;\r\n        _checkpoints[_maxcheckpoint][1] = 9e32 / newpoint;\r\n        _checkpoints[_maxcheckpoint][2] = newpoint;\r\n        _currentMulitiper = 9e32 / newpoint;\r\n    }\r\n\r\n    function getCurrentCheckPoint() public view returns(uint256[3] memory)\r\n    {\r\n        return _checkpoints[_maxcheckpoint];\r\n    }\r\n\r\n    function fixTradingPool(\r\n        address tokenAddress,\r\n        address tradecontract,\r\n        uint256 rate,\r\n        uint256 pctmin,\r\n        uint256 pctmax\r\n    ) public returns (bool) {\r\n        require(msg.sender == _owner);\r\n        _lpPools[tokenAddress].hashrate = rate;\r\n        _lpPools[tokenAddress].tradeContract = tradecontract;\r\n        _lpPools[tokenAddress].minpct = pctmin;\r\n        _lpPools[tokenAddress].maxpct = pctmax;\r\n        return true;\r\n    }\r\n\r\n    function addTradingPool(\r\n        address tokenAddress,\r\n        address tradecontract,\r\n        uint256 rate,\r\n        uint256 pctmin,\r\n        uint256 pctmax\r\n    ) public returns (bool) {\r\n        require(msg.sender == _owner);\r\n        require(rate \u003e 0, \"ERROR RATE\");\r\n        require(_lpPools[tokenAddress].hashrate == 0, \"LP EXISTS\");\r\n\r\n        LpWallet wallet =\r\n            new LpWallet(tokenAddress, _Lizaddr, _feeowner, _owner);\r\n        _lpPools[tokenAddress] = PoolInfo({\r\n            poolwallet: wallet,\r\n            hashrate: rate,\r\n            tradeContract: tradecontract,\r\n            minpct: pctmin,\r\n            maxpct: pctmax\r\n        });\r\n        _lpaddresses.push(tokenAddress);\r\n        emit TradingPooladded(tokenAddress);\r\n        return true;\r\n    }\r\n\r\n    //******************Getters ******************/\r\n    function getParent(address user) public view returns (address) {\r\n        return _parents[user];\r\n    }\r\n\r\n    function getTotalHash() public view returns (uint256) {\r\n        return _nowtotalhash;\r\n    }\r\n\r\n    function getMyLpInfo(address user, address tokenaddress)\r\n        public\r\n        view\r\n        returns (uint256[3] memory)\r\n    {\r\n        uint256[3] memory bb;\r\n        bb[0] = _lpPools[tokenaddress].poolwallet.getBalance(user, true);\r\n        bb[1] = _lpPools[tokenaddress].poolwallet.getBalance(user, false);\r\n        bb[2] = _userLphash[user][tokenaddress];\r\n        return bb;\r\n    }\r\n\r\n    function getUserLevel(address user) public view returns (uint256) {\r\n        return _userInfos[user].userlevel;\r\n    }\r\n\r\n    function getUserTeamHash(address user) public view returns (uint256) {\r\n        return _userInfos[user].teamhash;\r\n    }\r\n\r\n    function getUserSelfHash(address user) public view returns (uint256) {\r\n        return _userInfos[user].selfhash;\r\n    }\r\n\r\n    function getFeeOnwer() public view returns (address) {\r\n        return _feeowner;\r\n    }\r\n\r\n    function getExchangeCountOfOneUsdt(address lptoken)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_lpPools[lptoken].tradeContract != address(0));\r\n\r\n        if (lptoken == address(2)) //BNB\r\n        {\r\n            (uint112 _reserve0, uint112 _reserve1, ) =\r\n                IPancakePair(_bnbtradeaddress).getReserves();\r\n            uint256 a = _reserve0;\r\n            uint256 b = _reserve1;\r\n            return b.mul(1e18).div(a);\r\n        }\r\n\r\n        if (lptoken == _Lizaddr) {\r\n            (uint112 _reserve0, uint112 _reserve1, ) =\r\n                IPancakePair(_Liztrade).getReserves();\r\n            uint256 a = _reserve0;\r\n            uint256 b = _reserve1;\r\n            return b.mul(1e18).div(a);\r\n        } else {\r\n            (uint112 _reserve0, uint112 _reserve1, ) =\r\n                IPancakePair(_bnbtradeaddress).getReserves();\r\n            (uint112 _reserve3, uint112 _reserve4, ) =\r\n                IPancakePair(_lpPools[lptoken].tradeContract).getReserves();\r\n\r\n            uint256 balancea = _reserve0;\r\n            uint256 balanceb = _reserve1;\r\n            uint256 balancec =\r\n                IPancakePair(_lpPools[lptoken].tradeContract).token0() ==\r\n                    lptoken\r\n                    ? _reserve3\r\n                    : _reserve4;\r\n            uint256 balanced =\r\n                IPancakePair(_lpPools[lptoken].tradeContract).token0() ==\r\n                    lptoken\r\n                    ? _reserve4\r\n                    : _reserve3;\r\n            if (balancea == 0 || balanceb == 0 || balanced == 0) return 0;\r\n            return balancec.mul(1e18).div(balancea.mul(balanced).div(balanceb));\r\n        }\r\n    }\r\n\r\n    function buyVipPrice(address user, uint256 newlevel)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (newlevel \u003e= 8) return 0;\r\n\r\n        uint256 userlevel = _userInfos[user].userlevel;\r\n        if (userlevel \u003e= newlevel) return 0;\r\n        uint256 costprice = _vipbuyprice[newlevel] - _vipbuyprice[userlevel];\r\n        uint256 costcount = costprice.mul(getExchangeCountOfOneUsdt(_Lizaddr));\r\n        return costcount;\r\n    }\r\n\r\n    //******************Getters ************************************/\r\n    function getWalletAddress(address lptoken) public view returns (address) {\r\n        return address(_lpPools[lptoken].poolwallet);\r\n    }\r\n\r\n    function logCheckPoint(\r\n        uint256 totalhashdiff,\r\n        bool add,\r\n        uint256 blocknumber\r\n    ) private {\r\n        if (add) {\r\n            _nowtotalhash = _nowtotalhash.add(totalhashdiff);\r\n\r\n            if (_nowtotalhash \u003e 1e25) {\r\n                uint256 newpoint =\r\n                    _checkpoints[_maxcheckpoint][2].mul(110).div(100);\r\n                if (_nowtotalhash \u003e= newpoint \u0026\u0026 newpoint \u003e 1e25) {\r\n                    _maxcheckpoint++;\r\n                    _checkpoints[_maxcheckpoint][0] = blocknumber;\r\n                    _checkpoints[_maxcheckpoint][1] = 9e32 / newpoint;\r\n                    _checkpoints[_maxcheckpoint][2] = newpoint;\r\n                    _currentMulitiper = 9e32 / newpoint;\r\n                }\r\n            }\r\n        } else {\r\n            _nowtotalhash = _nowtotalhash.sub(totalhashdiff);\r\n            if (_nowtotalhash \u003c 1e25) {\r\n                if (_maxcheckpoint \u003e 0) {\r\n                    uint256 newpoint = _checkpoints[_maxcheckpoint][2];\r\n                    if (newpoint \u003e 1e25 \u0026\u0026 _nowtotalhash \u003c 9e24) {\r\n                        _maxcheckpoint++;\r\n                        _checkpoints[_maxcheckpoint][0] = blocknumber;\r\n                        _checkpoints[_maxcheckpoint][1] = 1e8;\r\n                        _checkpoints[_maxcheckpoint][2] = 1e25;\r\n                        _currentMulitiper = 1e8;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getHashDiffOnLevelChange(address user, uint256 newlevel)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 hashdiff = 0;\r\n        uint256 userlevel = _userInfos[user].userlevel;\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            if (_userlevelhashtotal[user][i] \u003e 0) {\r\n                if (_levelconfig[userlevel][i] \u003e 0) {\r\n                    uint256 dff =\r\n                        _userlevelhashtotal[user][i]\r\n                            .mul(_levelconfig[newlevel][i])\r\n                            .sub(\r\n                            _userlevelhashtotal[user][i].mul(\r\n                                _levelconfig[userlevel][i]\r\n                            )\r\n                        );\r\n                    dff = dff.div(1000);\r\n                    hashdiff = hashdiff.add(dff);\r\n                } else {\r\n                    uint256 dff =\r\n                        _userlevelhashtotal[user][i]\r\n                            .mul(_levelconfig[newlevel][i])\r\n                            .div(1000);\r\n                    hashdiff = hashdiff.add(dff);\r\n                }\r\n            }\r\n        }\r\n        return hashdiff;\r\n    }\r\n\r\n    function RemoveInfo(address user, address tokenaddress) public {\r\n        require(\r\n            _oldpool[msg.sender][tokenaddress] \u003e 0 || msg.sender == _owner,\r\n            \"ERROR\"\r\n        );\r\n\r\n        require(\r\n            _lpPools[tokenaddress].poolwallet.getBalance(user, true) \u003e= 10000,\r\n            \"ERROR2\"\r\n        );\r\n        uint256 decreasehash = _userLphash[user][tokenaddress];\r\n        uint256 amounta =\r\n            _lpPools[tokenaddress].poolwallet.getBalance(user, true);\r\n        uint256 amountb =\r\n            _lpPools[tokenaddress].poolwallet.getBalance(user, false);\r\n        _userLphash[user][tokenaddress] = 0;\r\n\r\n        address parent = user;\r\n        uint256 dthash = 0;\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            parent = _parents[parent];\r\n            if (parent == address(0)) break;\r\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].sub(\r\n                decreasehash\r\n            );\r\n            uint256 parentlevel = _userInfos[parent].userlevel;\r\n            uint256 pdechash =\r\n                decreasehash.mul(_levelconfig[parentlevel][i]).div(1000);\r\n            if (pdechash \u003e 0) {\r\n                dthash = dthash.add(pdechash);\r\n                UserHashChanged(parent, 0, pdechash, false, block.number);\r\n            }\r\n        }\r\n        UserHashChanged(user, decreasehash, 0, false, block.number);\r\n        logCheckPoint(decreasehash.add(dthash), false, block.number);\r\n        _lpPools[tokenaddress].poolwallet.decBalance(user, amounta, amountb);\r\n        _oldpool[user][tokenaddress] = 0;\r\n    }\r\n\r\n    function DontDoingThis(address tokenaddress, uint256 pct2)\r\n        public\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(pct2 \u003e= 10000);\r\n        RemoveInfo(msg.sender, tokenaddress);\r\n        return true;\r\n    }\r\n\r\n    function ChangeWithDrawPoint(\r\n        address user,\r\n        uint256 blocknum,\r\n        uint256 pendingreward\r\n    ) public {\r\n        require(msg.sender == _owner);\r\n        _userInfos[user].pendingreward = pendingreward;\r\n        _userInfos[user].lastblock = blocknum;\r\n        if (_maxcheckpoint \u003e 0)\r\n            _userInfos[user].lastcheckpoint = _maxcheckpoint;\r\n    }\r\n\r\n    function setOldPool(\r\n        address tokenAddress,\r\n        address useraddress,\r\n        uint256 amount\r\n    ) public {\r\n        require(msg.sender == _owner);\r\n        _oldpool[useraddress][tokenAddress] = amount;\r\n    }\r\n\r\n    function MappingUserFromOld(address user, uint256 pending,address aparent) public {\r\n        require(msg.sender == _owner);\r\n        require(_userInfos[user].lastcheckpoint == 0);\r\n  \r\n        if (aparent != address(_oldcontract) \u0026\u0026 aparent != _owner)\r\n            require(_parents[aparent] != address(0));\r\n        if (_parents[user] == address(0)) {\r\n            _parents[user] = aparent;\r\n            _mychilders[aparent].push(user);\r\n        }\r\n        uint256 self = _oldcontract.getUserSelfHash(user);\r\n        uint256 team =_oldcontract.getUserTeamHash(user);\r\n        _userInfos[user] = UserInfo({\r\n            pendingreward: pending,\r\n            lastblock: block.number,\r\n            userlevel: _oldcontract.getUserLevel(user),\r\n            teamhash: team,\r\n            selfhash: self,\r\n            lastcheckpoint: 1\r\n        });\r\n\r\n        if (self \u003e 0) {\r\n            for (uint256 m = 0; m \u003c _lpaddresses.length; m++) {\r\n                address tokenAddress = _lpaddresses[m];\r\n                uint256[3] memory info =\r\n                    _oldcontract.getMyLpInfo(user, tokenAddress);\r\n                if (info[0] \u003e 0) {\r\n\r\n                    uint256[3] memory oold =\r\n                    _ooldcontract.getMyLpInfo(user, tokenAddress);\r\n                    uint256 amounta = info[0];\r\n                    uint256 amountb = info[1];\r\n                    uint256 addhash = info[2];\r\n\r\n                     if(oold[0] \u003e 0)\r\n                        setOldPool(tokenAddress, user, amounta);\r\n\r\n                    _lpPools[tokenAddress].poolwallet.addBalance(\r\n                        user,\r\n                        amounta,\r\n                        amountb\r\n                    );\r\n                    _userLphash[user][tokenAddress] = _userLphash[user][\r\n                        tokenAddress\r\n                    ].add(addhash);\r\n                }\r\n            }\r\n\r\n            address parent2 = user;\r\n                for (uint256 j = 0; j \u003c 20; j++) {\r\n                    parent2 = _parents[parent2];\r\n                    if (parent2 == address(0)) break;\r\n                    _userlevelhashtotal[parent2][j] = _userlevelhashtotal[parent2][j].add(self);\r\n                }\r\n        }\r\n\r\n        _nowtotalhash=_nowtotalhash.add(team).add(self);\r\n    }\r\n\r\n    function buyVip(uint256 newlevel) public nonReentrant returns (bool) {\r\n        require(newlevel \u003c 8);\r\n        require(_parents[msg.sender] != address(0), \"must bind parent first\");\r\n        uint256 costcount = buyVipPrice(msg.sender, newlevel);\r\n        require(costcount \u003e 0);\r\n        uint256 diff = getHashDiffOnLevelChange(msg.sender, newlevel);\r\n        if (diff \u003e 0) {\r\n            UserHashChanged(msg.sender, 0, diff, true, block.number);\r\n            logCheckPoint(diff, true, block.number);\r\n        }\r\n\r\n        IBEP20(_Lizaddr).burnFrom(msg.sender, costcount);\r\n        _userInfos[msg.sender].userlevel = newlevel;\r\n        emit VipChanged(msg.sender, newlevel);\r\n        return true;\r\n    }\r\n\r\n    function bindParent(address parent) public {\r\n        require(_parents[msg.sender] == address(0), \"Already bind\");\r\n        require(parent != address(0), \"ERROR parent\");\r\n        require(parent != msg.sender, \"error parent\");\r\n        require(_parents[parent] != address(0));\r\n        _parents[msg.sender] = parent;\r\n        _mychilders[parent].push(msg.sender);\r\n        emit BindingParents(msg.sender, parent);\r\n    }\r\n\r\n    function SetParentByAdmin(address user, address parent) public {\r\n        require(_parents[user] == address(0), \"Already bind\");\r\n        require(msg.sender == _owner);\r\n        _parents[user] = parent;\r\n        _mychilders[parent].push(user);\r\n    }\r\n\r\n    function getUserLasCheckPoint(address useraddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _userInfos[useraddress].lastcheckpoint;\r\n    }\r\n\r\n    function getPendingCoin(address user) public view returns (uint256) {\r\n        if (_userInfos[user].lastblock == 0) {\r\n            return 0;\r\n        }\r\n        UserInfo memory info = _userInfos[user];\r\n        uint256 total = info.pendingreward;\r\n        uint256 mytotalhash = info.selfhash.add(info.teamhash);\r\n        if (mytotalhash == 0) return total;\r\n        uint256 lastblock = info.lastblock;\r\n\r\n        if (_maxcheckpoint \u003e 0) {\r\n            uint256 mulitiper = _currentMulitiper;\r\n            if (mulitiper \u003e 1e8) mulitiper = 1e8;\r\n\r\n            uint256 startfullblock = _checkpoints[1][0];\r\n            if (lastblock \u003c startfullblock) {\r\n                uint256 getk = mytotalhash.mul(startfullblock.sub(lastblock)).div(1e17);\r\n                total = total.add(getk);\r\n                lastblock = startfullblock;\r\n            }\r\n\r\n            if (info.lastcheckpoint \u003e 0) {\r\n                for (\r\n                    uint256 i = info.lastcheckpoint + 1;\r\n                    i \u003c= _maxcheckpoint;\r\n                    i++\r\n                ) {\r\n                    uint256 blockk = _checkpoints[i][0];\r\n                    if (blockk \u003c= lastblock) {\r\n                        continue;\r\n                    }\r\n                    uint256 get =\r\n                        blockk\r\n                            .sub(lastblock)\r\n                            .mul(_checkpoints[i - 1][1])\r\n                            .mul(mytotalhash)\r\n                            .div(1e25);\r\n                    total = total.add(get);\r\n                    lastblock = blockk;\r\n                }\r\n            }\r\n\r\n            if (lastblock \u003c block.number \u0026\u0026 lastblock \u003e 0) {\r\n                uint256 blockcount = block.number.sub(lastblock);\r\n                if (_nowtotalhash \u003e 0) {\r\n                    uint256 get =\r\n                        blockcount.mul(mulitiper).mul(mytotalhash).div(1e25);\r\n                    total = total.add(get);\r\n                }\r\n            }\r\n        } else {\r\n            if (block.number \u003e lastblock) {\r\n                uint256 blockcount = block.number.sub(lastblock);\r\n                uint256 getk = mytotalhash.mul(blockcount).div(1e17);\r\n                total = total.add(getk);\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function UserHashChanged(\r\n        address user,\r\n        uint256 selfhash,\r\n        uint256 teamhash,\r\n        bool add,\r\n        uint256 blocknum\r\n    ) private {\r\n        uint256 dash = getPendingCoin(user);\r\n        UserInfo memory info = _userInfos[user];\r\n        info.pendingreward = dash;\r\n        info.lastblock = blocknum;\r\n        if (_maxcheckpoint \u003e 0) {\r\n            info.lastcheckpoint = _maxcheckpoint;\r\n        }\r\n        if (selfhash \u003e 0) {\r\n            if (add) {\r\n                info.selfhash = info.selfhash.add(selfhash);\r\n            } else info.selfhash = info.selfhash.sub(selfhash);\r\n        }\r\n        if (teamhash \u003e 0) {\r\n            if (add) {\r\n                info.teamhash = info.teamhash.add(teamhash);\r\n            } else {\r\n                if (info.teamhash \u003e teamhash)\r\n                    info.teamhash = info.teamhash.sub(teamhash);\r\n                else info.teamhash = 0;\r\n            }\r\n        }\r\n        _userInfos[user] = info;\r\n    }\r\n\r\n    function WithDrawCredit() public nonReentrant returns (bool) {\r\n        uint256 amount = getPendingCoin(msg.sender);\r\n        if (amount \u003c 100) return true;\r\n\r\n        _userInfos[msg.sender].pendingreward = 0;\r\n        _userInfos[msg.sender].lastblock = block.number;\r\n        if (_maxcheckpoint \u003e 0)\r\n            _userInfos[msg.sender].lastcheckpoint = _maxcheckpoint;\r\n        uint256 fee = amount.div(100);\r\n        _minepool.MineOut(msg.sender, amount.sub(fee), fee);\r\n        return true;\r\n    }\r\n\r\n    function TakeBack(address tokenAddress, uint256 pct)\r\n        public\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(pct \u003e= 10000 \u0026\u0026 pct \u003c= 1000000);\r\n        require(\r\n            _lpPools[tokenAddress].poolwallet.getBalance(msg.sender, true) \u003e=\r\n                10000,\r\n            \"ERROR AMOUNT\"\r\n        );\r\n        require(_oldpool[msg.sender][tokenAddress] == 0, \"back old\");\r\n        uint256 balancea =\r\n            _lpPools[tokenAddress].poolwallet.getBalance(msg.sender, true);\r\n        uint256 balanceb =\r\n            _lpPools[tokenAddress].poolwallet.getBalance(msg.sender, false);\r\n        uint256 totalhash = _userLphash[msg.sender][tokenAddress];\r\n\r\n        uint256 amounta = balancea.mul(pct).div(1000000);\r\n        uint256 amountb = balanceb.mul(pct).div(1000000);\r\n        uint256 decreasehash =\r\n            _userLphash[msg.sender][tokenAddress].mul(pct).div(1000000);\r\n\r\n        if (balanceb.sub(amountb) \u003c= 10000) {\r\n            decreasehash = totalhash;\r\n            amounta = balancea;\r\n            amountb = balanceb;\r\n            _userLphash[msg.sender][tokenAddress] = 0;\r\n        } else {\r\n            _userLphash[msg.sender][tokenAddress] = totalhash.sub(decreasehash);\r\n        }\r\n\r\n        address parent = msg.sender;\r\n        uint256 dthash = 0;\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            parent = _parents[parent];\r\n            if (parent == address(0)) break;\r\n\r\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].sub(\r\n                decreasehash\r\n            );\r\n            uint256 parentlevel = _userInfos[parent].userlevel;\r\n            uint256 pdechash =\r\n                decreasehash.mul(_levelconfig[parentlevel][i]).div(1000);\r\n            if (pdechash \u003e 0) {\r\n                dthash = dthash.add(pdechash);\r\n                UserHashChanged(parent, 0, pdechash, false, block.number);\r\n            }\r\n        }\r\n        UserHashChanged(msg.sender, decreasehash, 0, false, block.number);\r\n        logCheckPoint(decreasehash.add(dthash), false, block.number);\r\n        _lpPools[tokenAddress].poolwallet.TakeBack(\r\n            msg.sender,\r\n            amounta,\r\n            amountb\r\n        );\r\n        if (tokenAddress == address(2)) {\r\n            uint256 fee2 = amounta.div(100);\r\n            (bool success, ) =\r\n                msg.sender.call{value: amounta.sub(fee2)}(new bytes(0));\r\n            require(success, \"TransferHelper: BNB_TRANSFER_FAILED\");\r\n            (bool success2, ) = _feeowner.call{value: fee2}(new bytes(0));\r\n            require(success2, \"TransferHelper: BNB_TRANSFER_FAILED\");\r\n            if (amountb \u003e= 100) {\r\n                uint256 fee = amountb.div(100); //Destory 1%\r\n                _Lizaddr.safeTransfer(msg.sender, amountb.sub(fee));\r\n                IBEP20(_Lizaddr).burn(fee);\r\n            } else {\r\n                _Lizaddr.safeTransfer(msg.sender, amountb);\r\n            }\r\n        }\r\n        emit TakedBack(tokenAddress, pct);\r\n        return true;\r\n    }\r\n\r\n    function getPower(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 lpscale\r\n    ) public view returns (uint256) {\r\n        uint256 hashb =\r\n            amount.mul(1e20).div(lpscale).div(\r\n                getExchangeCountOfOneUsdt(tokenAddress)\r\n            );\r\n        return hashb;\r\n    }\r\n\r\n    function getLpPayLiz(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 lpscale\r\n    ) public view returns (uint256) {\r\n        require(lpscale \u003c= 100);\r\n        uint256 hashb =\r\n            amount.mul(1e20).div(lpscale).div(\r\n                getExchangeCountOfOneUsdt(tokenAddress)\r\n            );\r\n        uint256 costabc =\r\n            hashb\r\n                .mul(getExchangeCountOfOneUsdt(_Lizaddr))\r\n                .mul(100 - lpscale)\r\n                .div(1e20);\r\n        return costabc;\r\n    }\r\n\r\n    function deposit(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 dppct\r\n    ) public payable nonReentrant returns (bool) {\r\n        if (tokenAddress == address(2)) {\r\n            amount = msg.value;\r\n        }\r\n        require(amount \u003e 10000);\r\n        require(dppct \u003e= _lpPools[tokenAddress].minpct, \"Pct1\");\r\n        require(dppct \u003c= _lpPools[tokenAddress].maxpct, \"Pct2\");\r\n        uint256 price = getExchangeCountOfOneUsdt(tokenAddress);\r\n        uint256 lizprice = getExchangeCountOfOneUsdt(_Lizaddr);\r\n        uint256 hashb = amount.mul(1e20).div(dppct).div(price); // getPower(tokenAddress,amount,dppct);\r\n        uint256 costliz = hashb.mul(lizprice).mul(100 - dppct).div(1e20);\r\n        hashb = hashb.mul(getHashRateByPct(dppct)).div(100);\r\n        uint256 abcbalance = IBEP20(_Lizaddr).balanceOf(msg.sender);\r\n\r\n        if (abcbalance \u003c costliz) {\r\n            require(tokenAddress != address(2), \"liz balance\");\r\n            amount = amount.mul(abcbalance).div(costliz);\r\n            hashb = amount.mul(abcbalance).div(costliz);\r\n            costliz = abcbalance;\r\n        }\r\n        if (tokenAddress == address(2)) {\r\n            if (costliz \u003e 0)\r\n                _Lizaddr.safeTransferFrom(msg.sender, address(this), costliz);\r\n        } else {\r\n            tokenAddress.safeTransferFrom(\r\n                msg.sender,\r\n                address(_lpPools[tokenAddress].poolwallet),\r\n                amount\r\n            );\r\n            if (costliz \u003e 0)\r\n                _Lizaddr.safeTransferFrom(\r\n                    msg.sender,\r\n                    address(_lpPools[tokenAddress].poolwallet),\r\n                    costliz\r\n                );\r\n        }\r\n\r\n        _lpPools[tokenAddress].poolwallet.addBalance(\r\n            msg.sender,\r\n            amount,\r\n            costliz\r\n        );\r\n        _userLphash[msg.sender][tokenAddress] = _userLphash[msg.sender][\r\n            tokenAddress\r\n        ]\r\n            .add(hashb);\r\n\r\n        address parent = msg.sender;\r\n        uint256 dhash = 0;\r\n\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            parent = _parents[parent];\r\n            if (parent == address(0)) break;\r\n\r\n            _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].add(\r\n                hashb\r\n            );\r\n            uint256 parentlevel = _userInfos[parent].userlevel;\r\n            uint256 levelconfig = _levelconfig[parentlevel][i];\r\n            if (levelconfig \u003e 0) {\r\n                uint256 addhash = hashb.mul(levelconfig).div(1000);\r\n                if (addhash \u003e 0) {\r\n                    dhash = dhash.add(addhash);\r\n                    UserHashChanged(parent, 0, addhash, true, block.number);\r\n                }\r\n            }\r\n        }\r\n        UserHashChanged(msg.sender, hashb, 0, true, block.number);\r\n        logCheckPoint(hashb.add(dhash), true, block.number);\r\n        emit UserBuied(tokenAddress, amount, hashb);\r\n        return true;\r\n    }\r\n}\r\n"},"LpWallet.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\nimport \"./SafeMath.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\n\r\ncontract LpWallet //EMPTY CONTRACT TO HOLD THE USERS assetS\r\n{\r\n    address lptoken;\r\n    address liztoken;\r\n    address _MainContract;\r\n    address _feeowner;\r\n    address _owner;\r\n\r\n    mapping(address=\u003euint256) _balancesa;\r\n    mapping(address=\u003euint256) _balancesb;\r\n\r\n    using TransferHelper for address;\r\n    using SafeMath for uint256;\r\n\r\n    event eventWithDraw(address indexed to,uint256 indexed  amounta,uint256 indexed amountb);\r\n\r\n    constructor(address tokena,address tokenb,address feeowner,address owner) //Create by lizmain \r\n    {\r\n        _MainContract=msg.sender;// The lizmain CONTRACT\r\n        lptoken =tokena;\r\n        liztoken=tokenb;\r\n        _feeowner=feeowner;\r\n        _owner=owner;\r\n    }\r\n\r\n    function getBalance(address user,bool isa) public view returns(uint256)\r\n    {\r\n        if(isa)\r\n            return _balancesa[user];\r\n       else\r\n           return _balancesb[user];\r\n    }\r\n \r\n    function addBalance(address user,uint256 amounta,uint256 amountb) public\r\n    {\r\n        require(_MainContract==msg.sender);//Only lizmain can do this\r\n        _balancesa[user] = _balancesa[user].add(amounta);\r\n        _balancesb[user] = _balancesb[user].add(amountb);\r\n    }\r\n\r\n    function resetTo(address newcontract) public\r\n    {\r\n        require(msg.sender==_owner);\r\n        _MainContract=newcontract;\r\n    }\r\n\r\n    function decBalance(address user,uint256 amounta,uint256 amountb ) public \r\n    {\r\n        require(_MainContract==msg.sender);//Only lizmain can do this\r\n        _balancesa[user] = _balancesa[user].sub(amounta);\r\n        _balancesb[user] = _balancesb[user].sub(amountb);\r\n    }\r\n \r\n    function TakeBack(address to,uint256 amounta,uint256 amountb) public \r\n    {\r\n        require(_MainContract==msg.sender);//Only lizmain can do this\r\n        _balancesa[to]= _balancesa[to].sub(amounta);\r\n        _balancesb[to]= _balancesb[to].sub(amountb);\r\n        if(lptoken!= address(2))//BNB\r\n        {\r\n            uint256 mainfee= amounta.div(100);\r\n           lptoken.safeTransfer(to, amounta.sub(mainfee));\r\n           lptoken.safeTransfer(_feeowner, mainfee);\r\n           if(amountb\u003e=100)\r\n           {\r\n               uint256 fee = amountb.div(100);//fee 1%\r\n               liztoken.safeTransfer(to, amountb.sub(fee));\r\n               IBEP20(liztoken).burn(fee);\r\n           }\r\n           else\r\n           {\r\n               liztoken.safeTransfer(to, amountb);\r\n           }\r\n        }\r\n    }\r\n}"},"Manageable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\nimport \u0027./Context.sol\u0027;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an manager) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the manager account will be the one that deploys the contract. This\r\n * can later be changed with {transferManagement}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyManager`, which can be applied to your functions to restrict their use to\r\n * the manager.\r\n */\r\ncontract Manageable is Context {\r\n    address private _manager;\r\n\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial manager.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current manager.\r\n     */\r\n    function manager() public view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(_manager == _msgSender(), \u0027Manageable: caller is not the manager\u0027);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without manager. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current manager.\r\n     *\r\n     * NOTE: Renouncing management will leave the contract without an manager,\r\n     * thereby removing any functionality that is only available to the manager.\r\n     */\r\n    function renounceManagement() public onlyManager {\r\n        emit ManagementTransferred(_manager, address(0));\r\n        _manager = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers management of the contract to a new account (`newManager`).\r\n     * Can only be called by the current manager.\r\n     */\r\n    function transferManagement(address newManager) public onlyManager {\r\n        _transferManagement(newManager);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers management of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferManagement(address newManager) internal {\r\n        require(newManager != address(0), \u0027Manageable: new manager is the zero address\u0027);\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\nimport \u0027./Context.sol\u0027;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: BNB_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n"}}