// SPDX-License-Identifier: MIT
// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f1e92dd184a599f39ce9cc4ec8a5e4a94416f3a2/contracts/utils/math/SafeMath.sol



pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;




/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
            unchecked {
                _approve(sender, _msgSender(), currentAllowance - amount);
            }
        }

        _transfer(sender, recipient, amount);

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: printbit.sol

/**
  PRINTBIT COIN - The official token of PrintBit Printing Shop

  Features:
      - 88,000,000,000  deflationary tokens 
	  - 2% for maintenance & marketing fee for every BUY transaction
      - 3% for maintenance & marketing fee for every SELL transaction
	  - 50% of tokens are allocated for DEX Reserve
	  - 30% are locked for future DEVs and partners, 10% can be unlocked every year for 3 years
      - 10% are for airdrops, marketing
	  - 10% allocation for the founding team
      - Pauseable
      - Burnable
      - Anti-whale, limits buy and sell transactions (5% of available token supply)

   WEB: printbit.com
   E-mail: info@printbit.com
 **/

pragma solidity ^0.8.0;




contract Printbit is ERC20 {
  using SafeMath for uint256;
  uint MAINTENANCE_FEE = 2;
  uint BURN_FEE = 2;
  bool ENABLE_BURN = false;
  bool IS_PAUSED = false;
  uint256 public totalLockedTokens = 0;


  struct locked{
        uint256 expire;
        uint256 amount;
  }

  address public owner_address = 0xE35ce937f17496bD37a9B5e366Bd98BEc31d1942;  //Founding Team
  address public dev1_address = 0x89700878fc12105a5a661A6F6c32C16747085f82;   
  address public dev2_address = 0xA911b28f8D1A704E50750a96EDb8C3A9d4ff05B3;
  address public dev3_address = 0x875552131230249f95861054c469a4E1a6214C0F;
  address public airdrop_address = 0x78f1b2626FC0a25E48E4cB3F839e23880029feF3;
  address public maintenance_address = 0xfE6AFDCdbdd160431883A7b86176209fDA8D5f80;

  string public tokenName = 'PrintBit Coin';
  string public tokenSymbol = 'PRINTBIT';

  mapping (address => bool) public excludedFromFee;
  mapping(address => locked) users;

  constructor() ERC20(tokenName, tokenSymbol) {
    _mint(owner_address,    8800000000 * 10 ** 18);
    _mint(msg.sender,      44000000000 * 10 ** 18); // DEX
    _mint(dev1_address,     8800000000 * 10 ** 18);
    _mint(dev2_address,     8800000000 * 10 ** 18);
    _mint(dev3_address,     8800000000 * 10 ** 18);
    _mint(airdrop_address,  8800000000 * 10 ** 18);

    excludedFromFee[owner_address] = true;
    excludedFromFee[dev1_address] = true;
    excludedFromFee[dev2_address] = true;
    excludedFromFee[dev3_address] = true;
    excludedFromFee[airdrop_address] = true;
    excludedFromFee[maintenance_address] = true;

    // Lock for 1 year
    locked storage userInfo = users[dev1_address];              
    userInfo.expire = block.timestamp + (365 * 1 days);
    userInfo.amount = 8800000000 * 10 ** 18;
    totalLockedTokens += (8800000000 * 10 ** 18);
    // Lock for 2 years
    userInfo = users[dev2_address];                             
    userInfo.expire = block.timestamp + ((365*2) * 1 days);
    userInfo.amount = 8800000000 * 10 ** 18;
    totalLockedTokens += (8800000000 * 10 ** 18);
    // Lock for 3 years
    userInfo = users[dev3_address];                             
    userInfo.expire = block.timestamp + ((365*3) * 1 days);
    userInfo.amount = 8800000000 * 10 ** 18;
    totalLockedTokens += (8800000000 * 10 ** 18);
  }

  function transfer(address recipient, uint256 amount) override public returns (bool) {
     require(IS_PAUSED==false,"Contract is paused!");
     require(checkLockTokensforTransfer(_msgSender(), amount), "Tokens are locked!");

     if (excludedFromFee[recipient] == true) {
                _transfer(_msgSender(), recipient, amount);
     } else {
          uint burnAmount = 0;
          if (ENABLE_BURN == true) {
                    burnAmount = (amount.mul(BURN_FEE)).div(100);
                    _burn(_msgSender(), burnAmount);
          } 
          uint256 adminAmount = (amount.mul(MAINTENANCE_FEE)).div(100);
          _transfer(_msgSender(), maintenance_address, adminAmount);
          _transfer(_msgSender(), recipient, amount.sub(burnAmount).sub(adminAmount));
     }
     //update lock
     lockTokenUpdate(_msgSender());
     return true;
  }
  //from = user address, to = contract address
  function transferFrom(address from, address to, uint256 amount) public override returns (bool) {
      require(IS_PAUSED==false,"Contract is paused!");
      require(checkLockTokensforTransfer(from, amount), "Tokens are locked!");
      address spender = _msgSender();
      if (excludedFromFee[to] == true) {
          _spendAllowance(from, spender, amount);
          _transfer(from, to, amount);
      } else {
          uint burnAmount = 0;
          if (ENABLE_BURN == true) {
              burnAmount = (amount.mul(BURN_FEE)).div(100);
              _burn(_msgSender(), burnAmount);
          }
          uint adminAmount = (amount.mul(MAINTENANCE_FEE)).div(100);
          _spendAllowance(from, spender, amount);
          _transfer(from, maintenance_address, adminAmount);
          _transfer(from, to, amount.sub(burnAmount).sub(adminAmount)); 
      }
      lockTokenUpdate(from);
      return true;
  }
  
  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
  }

  function enableBurn(bool enable_value) public returns (string memory) {
    if (msg.sender == owner_address) {
       ENABLE_BURN = enable_value;
       return ("Success!");
    } else {
      return ("Failed!");
     } 
	}
    
  function lockTokens(address _address, uint256 _amount, uint256 _lockTime) public {
        require(_amount > 0, "Please enter amount to lock");
        require(msg.sender == owner_address, "Only owner can lock tokens");     
        locked storage userInfo = users[_address];
        uint256 locktime = block.timestamp + (_lockTime * 1 days);
        require(locktime > userInfo.expire, "Lock time must be greater than user locktime");
        userInfo.expire = locktime;
        userInfo.amount = userInfo.amount + _amount;
        totalLockedTokens += _amount;
  }

  function lockTokenUpdate(address _address) private {
        require(block.timestamp>=users[_address].expire);
        locked storage userInfo = users[_address];
        userInfo.expire = 0;
        userInfo.amount = 0;
  }

  function checkLockTokens(address _address) public view returns (uint256, uint256) {
     return (users[_address].amount,  users[_address].expire);
  }

  function checkLockTokensforTransfer(address _address, uint256 _amount) private view returns (bool) {
      (uint256 _lockedAmount, uint256 _expire) = checkLockTokens(_address);
      uint256 _tokenBalanceUser = balanceOf(_address);
      uint256 _netBalance = _tokenBalanceUser.sub(_lockedAmount);
      if (_lockedAmount==0 || block.timestamp>=_expire || _netBalance >= _amount ) {
          return true;
      } else {
          return false;
      }
  }

   function getTotalLockedTokens() public view returns (uint256){
    return totalLockedTokens;
  } 

  function getBurnStatus() public view returns (bool){
    return ENABLE_BURN;
  } 

  function isPaused (bool _value) public returns (string memory) {
    require(msg.sender==owner_address,"Must be owner");
    IS_PAUSED = _value;
    return ("Success!");
  }

  function getisPausedStatus() public view returns (bool){
    return IS_PAUSED ;
  } 

}

contract DEX {
    
    using SafeMath for uint256;
    uint256 CONST_LP = 44e46;
    uint256 public totalTransactions;
    mapping (address => uint256) internal _transactions;


    event Bought(uint256 BNB, uint256 BNBbalance, uint256 totalBNB, uint256 pbReserve, uint256 price, uint256 amount);
    event Sold(address sender, address contractAdd, uint256 pbAmountSold, uint256 price, uint256 BNBtoReceive);
    event ContractBalance(uint256 balance);
    event Price(uint256 price);

    Printbit public token;
    address public DEX_contract_address;
    uint MAINTENANCE_FEE_SELL = 3;
    uint MAINTENANCE_FEE_BUY = 2;

    constructor() {
        token = new Printbit();
        DEX_contract_address = address(this);
    }
    
    function buy() payable public {
        require(!token.getisPausedStatus(),"Contract is paused!");
        uint256 _amountTobuy = msg.value;
        uint256 _tokenBalance = token.balanceOf(address(this));
        uint256 _bnbBalance = address(this).balance;
        require(_amountTobuy > 0, "You need to send some BNB");
        require(_amountTobuy <= _tokenBalance, "Not enough tokens in the reserve");
        uint256 _tBNB = (_bnbBalance);       
        uint256 _CONST_BNB = _tBNB.add(10e18);
        uint256 _pbReserve = CONST_LP.div(_CONST_BNB); 
        uint256 _price = (_CONST_BNB.mul(1e18)).div(_pbReserve);
        require (_price > 0, "Price must be greater than 0");
        uint256 _totalTokentoBuy = (_amountTobuy.mul(1e18)).div(_price);
        uint256 adminAmount = (_amountTobuy.mul(MAINTENANCE_FEE_BUY)).div(100);
        require(!antiWhale(_totalTokentoBuy), "You're buying more than 5% of the token balance");
        token.transfer(msg.sender, _totalTokentoBuy);
        payable(token.maintenance_address()).transfer(adminAmount);
        emit Bought(_amountTobuy, _bnbBalance, _CONST_BNB,_pbReserve, _price, _totalTokentoBuy);
        stats();
    } 
    
    function sell(uint256 tokenAmount) public {
        require(!token.getisPausedStatus(),"Contract is paused!");
        require(tokenAmount > 0, "You need to sell at least some PrintBit Coins");
        require(!antiWhale(tokenAmount), "You're selling more than 5% of the token balance");
        uint256 allowance = token.allowance(msg.sender, address(this));
        require(allowance >= tokenAmount, "Check the token allowance");
        uint256 _tokenBalanceof = token.balanceOf(address(this));
        uint256 _totalTokenSupply = tokenAmount.add(_tokenBalanceof);
        uint256 _BNBConst = CONST_LP.div(_totalTokenSupply);
        uint256 _price = (_BNBConst.mul(1e18)).div(_totalTokenSupply);
        require (_price > 0, "Price must be greater than 0");
        uint256 _totalBNBtoReceive = (tokenAmount.mul(_price)).div(1e18);
        uint256 _adminAmount = (_totalBNBtoReceive.mul(MAINTENANCE_FEE_SELL)).div(100);
        token.transferFrom(msg.sender, address(this), tokenAmount);
        payable(msg.sender).transfer(_totalBNBtoReceive.sub(_adminAmount));
        payable(token.maintenance_address()).transfer(_adminAmount);
        emit Sold(msg.sender, address(this), tokenAmount, _price, _totalBNBtoReceive);
        stats();
    }

    function addLiquidity() payable public returns (uint256){
        require(msg.value > 0, "Amount is 0");
        require(!token.getisPausedStatus(),"Contract is paused!");
        require(msg.sender==token.owner_address(), "Must be owner");
        return address(this).balance;
    }

    function bnbBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function tokenBalance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    function getBurnStatus() public view returns (bool){
       return token.getBurnStatus();
    }

    function tokenBalanceOf(address _addr) public view returns (uint256) {
        return token.balanceOf(_addr);
    }

    function tokenTotalSupply() public view returns (uint256) {
        return token.totalSupply();
    }

    function bnbPricePerToken() public view returns (uint256) {
      uint256 _tokenBalance = token.balanceOf(address(this));
      uint256 _totalBNB = address(this).balance;
      _totalBNB = (_totalBNB.add(10e18)).mul(1e18);     
      uint256 _temp = (_totalBNB).div(_tokenBalance);
      return _temp;
    }

    // limits only 5% of the available token supply that can be sold or purchased  
    function antiWhale(uint256 _amount) private view returns (bool) {
        uint _limit = 5;
        uint256 _tokenBalance = token.balanceOf(address(this));
        uint256 _allowedTokens = (_tokenBalance.mul(_limit)).div(100);
        bool _retval = false;        

        if (_amount > _allowedTokens) {
            _retval = true;
        }
        return _retval;
    }

    function stats() private {

        uint256 price = bnbPricePerToken();
        uint256 balance = bnbBalance();

        emit ContractBalance(balance);
        emit Price(price);

        totalTransactions += 1;
        _transactions[msg.sender] += 1;
    }

     function userTransactions(address owner) public view returns (uint256) {
        return _transactions[owner];
     }

}