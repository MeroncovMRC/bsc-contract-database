
// File: contracts/Implementations/ERC20WithBurnableWithFeesInOtherTokenImpl.sol
pragma solidity ^0.8.0;

import "../extensions/BasicToken.sol";
import "../extensions/ERC20WithFeesInOtherToken.sol";

contract ERC20WithBurnableWithFeesInOtherTokenImpl  is BasicTokenBurnable, ERC20WithFeesInOtherToken{
    constructor(
        string memory name,
        string memory symbol,
        uint256 totalSupply,
        address owner,
        Structs.FeeInfo[] memory fees,
        address routerAddress,
        address registerGateway
    ) payable
    ERC20(name, symbol)
    BasicToken(owner, totalSupply, registerGateway)
    BasicTokenBurnable()
    FeeManager(routerAddress)
    ERC20WithFeesInOtherToken(fees)
    {

    }
    function _transferHook(address from, address to, uint256 amount) internal virtual override(BasicToken, ERC20WithFeesInOtherToken) returns (uint256) {
        return super._transferHook(from, to, amount);
    }

    function _versionCode() override public pure returns(uint256) {
        return 9;
    }
}


// File: contracts/extensions/BasicToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "../interfaces/IUnilab.sol";

abstract contract BasicToken is ERC20, Ownable {
    constructor (address owner, uint256 totalSupply, address registerGateway) payable {
        _mint(owner, totalSupply);
        _transferOwnership(owner);
        IRegistrar(registerGateway).register{value : msg.value}(address(this), _versionCode());
    }

    function _transferHook(address from, address to, uint256 amount) internal virtual returns (uint256 deductedAmount) {
        from;
        to;
        amount;
        return 0;
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        uint256 fees = _transferHook(from, to, amount);
        ERC20._transfer(from, to, amount - fees);
    }

    function _versionCode() virtual public pure returns (uint256);
}

abstract contract BasicTokenBurnable is BasicToken {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}


// File: contracts/extensions/ERC20WithFeesInOtherToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./FeeManager.sol";
import "./BasicToken.sol";
import "../libraries/structs.sol";

// BNBFeeReceiver this contract is receiving the BNBs and sending them to the beneficiary addresses
contract BNBFeeReceiver is Ownable {
    ERC20WithFeesInOtherToken public token;
    uint256 immutable precision;

    event TransferFees(address, uint256);

    constructor(uint256 precision_) {
        token = ERC20WithFeesInOtherToken(payable(msg.sender));
        precision = precision_;
    }

    // this function send the fees
    function sendFees() public onlyOwner {
        Structs.FeeInfo [] memory feeBooker = token.getManagementFees();

        uint256 currentBalance = address(this).balance;
        for (uint256 i = 0; i < feeBooker.length; i++) {
            uint256 fees = currentBalance * feeBooker[i].fee / precision;
            bool sent;
            bytes memory data;

            (sent, data) = feeBooker[i].beneficiary.call{value : fees, gas : 2300}("");
            if (sent) {
                emit TransferFees(feeBooker[i].beneficiary, fees);
            }
            else {

            }
        }
    }

    receive() external payable {}
}


abstract contract ERC20WithFeesInOtherToken is BasicToken, FeeManager {
    mapping(address => uint256) public beneficiaryToFee;
    address[] public beneficiaries;
    uint256 public totalManagementFees;

    /* swap to base tokens for fees */
    bool public swapForFeesEnabled = true;
    uint256 public pairBalanceThreshold = 50;
    uint256 public maxSwapAmount = 0;
    BNBFeeReceiver public temporaryFeeReceiver;

    event FeeChanged(address beneficiary, uint256 oldFee, uint256 newFee);
    event ChangeStatusOfExclusionFromBeneficiaryFees(address who, bool status);
    event SwapPercentageThresholdChanged(uint256);
    event SwapForFeesChanged(bool);
    event MaxTokensToSwapChanged(uint256);
    event ETHReceivedForFees(uint256);
    event ETHPaidAsFees(address, uint256);

    constructor (Structs.FeeInfo[] memory fees)
    {
        require(fees.length <= 5, "Maximum beneficiary addresses is 5");

        for (uint i = 0; i < fees.length; i++) {
            beneficiaryToFee[fees[i].beneficiary] = fees[i].fee;
            beneficiaries.push(fees[i].beneficiary);
            totalManagementFees += fees[i].fee;
        }

        _setTotalFees(totalFees() + totalManagementFees);

        temporaryFeeReceiver = new BNBFeeReceiver(precision);
    }

    function _transferHook(address from, address to, uint256 amount) internal virtual override returns (uint256) {
        if (!shouldTakeFee(from, to)) {
            return super._transferHook(from, to, amount);
        }

        uint256 deductedAmount = amount * totalManagementFees / precision;
        if (deductedAmount > 0) {
            ERC20._transfer(from, address(this), deductedAmount);
        }

        // if it is a sell transaction
        if (pairAddress != address(0) && isSellTransaction(from, to) && swapForFeesEnabled && from != address(this)) {
            swapForFees();
        }

        return super._transferHook(from, to, amount) + deductedAmount;
    }

    function isSellTransaction(address from, address to) internal view returns (bool){
        return to == pairAddress;
    }

    function setBeneficiaryAddress(address newBeneficiary, uint256 index) external onlyOwner {
        require(newBeneficiary != address(0), "invalid address");
        require(index < beneficiaries.length, "address does not exist");
        beneficiaries[index] = newBeneficiary;
    }

    function setBeneficiaryAddressFee(address beneficiary, uint256 newFee) external onlyOwner {
        bool beneficiaryExists = false;
        // Note that this loop is bounded by beneficiaryLengthMax which is very small
        for (uint256 i = 0; i < beneficiaries.length; i++) {
            if (beneficiaries[i] == beneficiary) {
                beneficiaryExists = true;
                break;
            }
        }
        require(beneficiaryExists, "beneficiary does not exist");

        uint256 newTotalManagementFees = totalManagementFees - beneficiaryToFee[beneficiary] + newFee;

        _setTotalFees(totalFees() + newFee - beneficiaryToFee[beneficiary]);

        totalManagementFees = newTotalManagementFees;
        beneficiaryToFee[beneficiary] = newFee;

        emit FeeChanged(beneficiary, beneficiaryToFee[beneficiary], newFee);
    }

    function getManagementFees() external view returns (Structs.FeeInfo[] memory) {
        Structs.FeeInfo [] memory data = new Structs.FeeInfo[](beneficiaries.length);
        for (uint256 i = 0; i < beneficiaries.length; i++) {
            data[i] = Structs.FeeInfo(beneficiaries[i], beneficiaryToFee[beneficiaries[i]]);
        }
        return data;
    }

    function getAmountToSwap() public view returns (uint256){
        if (pairAddress == address(0)) {
            return 0;
        }
        uint256 pairBalance = balanceOf(pairAddress);
        uint256 contractBalance = balanceOf(address(this));
        /* get the pair balance in order prevent significant price impact */
        uint256 maxSwapByPairBalance = pairBalance * pairBalanceThreshold / precision;
        uint256 amountToSwap = contractBalance;

        if (maxSwapByPairBalance > 0 && amountToSwap > maxSwapByPairBalance) {
            amountToSwap = maxSwapByPairBalance;
        }

        if (maxSwapAmount > 0 && amountToSwap > maxSwapAmount) {
            amountToSwap = maxSwapAmount;
        }

        return amountToSwap;
    }

    function swapForFees() internal {
        if (baseTokenAddress == router.WETH()) {
            swapTokensForETH();
        }
    }

    function swapTokensForETH() internal {
        /* if the balance of address this is 0, no need to initiate swap */
        if (balanceOf(address(this)) == 0) {
            return;
        }
        uint256 amountToSwap = getAmountToSwap();
        if (allowance(address(this), address(router)) <= amountToSwap) {
            super._approve(address(this), address(router), ~uint256(0));
        }
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(temporaryFeeReceiver),
            block.timestamp
        ){
            // send the fees to beneficiaries
            try temporaryFeeReceiver.sendFees() {

            } catch{}
        }
        catch (bytes memory e){
            return;
        }
    }

    function setSwapPercentageThreshold(uint256 percentage) external onlyOwner {
        require(percentage <= 100, "percentage is too high");
        require(percentage >= 1, "percentage is too low");

        pairBalanceThreshold = percentage;
        emit SwapPercentageThresholdChanged(percentage);
    }

    function setSwapForFeesStatus(bool enabled) external onlyOwner {
        swapForFeesEnabled = enabled;
        emit SwapForFeesChanged(enabled);
    }
    // Swap For BNB Management
    // Change the amount of tokens to swap on every sell.
    // In order to turn in off the maxSwapAmount should set to 0
    function setMaxTokensToSwap(uint256 maxSwapAmount_) external onlyOwner {
        maxSwapAmount = maxSwapAmount_;
        emit MaxTokensToSwapChanged(maxSwapAmount);
    }

    receive() external payable {}

    function beneficiariesLength() external view returns (uint256){
        return beneficiaries.length;
    }

    function setManagementFees(Structs.FeeInfo[] memory fees) onlyOwner external {
        require(fees.length == beneficiaries.length, "should have the same length");

        uint256 oldFees = totalManagementFees;
        uint256 newFees = 0;
        for (uint i = 0; i < fees.length; i++) {
            require(fees[i].beneficiary != address(0), "cannot add address(0) as beneficiary");
            beneficiaries[i] = fees[i].beneficiary;
            beneficiaryToFee[fees[i].beneficiary] = fees[i].fee;
            newFees += fees[i].fee;
        }

        totalManagementFees = newFees;
        _setTotalFees(totalFees() + newFees - oldFees);
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Spend `amount` form the allowance of `owner` toward `spender`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: contracts/interfaces/IUnilab.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../libraries/structs.sol";

interface IRegistrar {
    function register(address addr, uint256 id) external payable;
}

interface IBookkeeper is IRegistrar {
    function getTemplatePrice(uint256 id) external view returns(uint256, address);
    function getAllTemplates() external view returns(Structs.TemplateInfo[] memory);
    function getTemplatePriceByCodehash(bytes32 codehash) external view returns (uint256, address);
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: contracts/libraries/structs.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library Structs {
    struct FeeInfo {
        address beneficiary;
        uint256 fee;
    }

    struct ContractInfo {
        address creator;
        uint256 templateId;
        address contractAddress;
        uint256 timestamp;  // creation timestamp
    }

    struct TemplateInfo {
        uint256 id;
        bytes32 codehash;
        string name;
        bytes32 version;
        uint256 price;
        address paymentToken;

        uint _index; // Index in the array of templates
    }
}


// File: contracts/extensions/FeeManager.sol
// SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/access/Ownable.sol";
import "../interfaces/IUniswap.sol";

abstract contract FeeManager is Ownable {
    address public routerAddress;
    IUniswapV2Router02 router;
    IUniswapV2Factory factory;
    address public pairAddress;
    address public baseTokenAddress;
    bool public shouldTakeFeeOnTransfer = false;
    uint256 private _totalFees;
    uint256 constant internal precision = 1000; // 0.1% precision
    uint256 constant public totalFeesMax = 300; // 30%
    bool public allFeesDisabled = false;

    mapping(address => bool) public excluded;

    constructor(address routerAddress_) {
        routerAddress = routerAddress_;
        router = IUniswapV2Router02(routerAddress);
        factory = IUniswapV2Factory(router.factory());
        // default pair address is WETH / token
        pairAddress = getPair();
        // default base token is WETH
        baseTokenAddress = router.WETH();
        // exclude by default the token contract and the msg.sender.
        excludeFromFees(address(this));
        excludeFromFees(owner());
    }

    function excludeFromFees(address who) public onlyOwner {
        excluded[who] = true;
    }

    function includeInFees(address who) public onlyOwner {
        excluded[who] = false;
    }

    function isExcludedFromFees(address who) public view returns (bool){
        return excluded[who];
    }

    function multiExcludeFromFees(address [] memory wallets) public onlyOwner {
        for (uint256 i = 0; i < wallets.length; i++) {
            excludeFromFees(wallets[i]);
        }
    }

    function multiIncludeInFees(address [] memory wallets) public onlyOwner {
        for (uint256 i = 0; i < wallets.length; i++) {
            includeInFees(wallets[i]);
        }
    }

    function shouldTakeFee(address from, address to) public view returns (bool) {
        if (allFeesDisabled || isExcludedFromFees(from) || isExcludedFromFees(to)) {
            return false;
        }
        if (shouldTakeFeeOnTransfer) {
            return true;
        }
        // shouldn't take fee on transfer make sure it's from == pairAddress || to == pairAddress
        else {
            return (from == pairAddress || to == pairAddress);
        }
    }

    function getPair() public returns (address) {
        pairAddress = factory.getPair(address(this), router.WETH());
        if (pairAddress == address(0)) {
            pairAddress = factory.createPair(address(this), router.WETH());
        }
        return pairAddress;
    }

    function setShouldTakeFeeOnTransfer(bool status) external onlyOwner {
        shouldTakeFeeOnTransfer = status;
    }

    function setAddressesFeeStatus(address [] memory walletsToInclude, address [] memory walletsToExclude) external onlyOwner {
        multiIncludeInFees(walletsToInclude);
        multiExcludeFromFees(walletsToExclude);
    }

    function _setTotalFees(uint256 newTotalFees) internal {
        require(newTotalFees <= totalFeesMax, "fees exceed max");
        _totalFees = newTotalFees;
    }

    function setDisableAllFees(bool value) external onlyOwner {
        allFeesDisabled = value;
    }

    function totalFees() public view returns (uint256) {
        return _totalFees;
    }
}


// File: contracts/interfaces/IUniswap.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01{
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}


interface IUniswapV2ERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
}
