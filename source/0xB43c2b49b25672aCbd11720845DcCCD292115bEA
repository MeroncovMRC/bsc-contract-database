// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

contract TazzyManiacs {
    string public name = "Tazzy";
    string public symbol = "TAZZY";
    uint8 public decimals = 18;
    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private _owner;
    uint256 public maxHolders = 488;
    uint256 public buyLimit = 20_000_000 * 10 ** uint256(decimals); // 20 million tokens
    uint256 public holdersCount = 0;
    mapping(address => bool) public holders;

    constructor() {
        _owner = msg.sender;
        holders[msg.sender] = true;
        holdersCount++;
        _totalSupply = 533_000_000_000 * 10 ** uint256(decimals); // Total supply: 533 billion tokens
        _balances[msg.sender] = _totalSupply;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount, "Insufficient balance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;

        if (!holders[recipient]) {
            holders[recipient] = true;
            holdersCount++;
            require(holdersCount <= maxHolders, "Maximum holders reached");
        }
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
    }
}