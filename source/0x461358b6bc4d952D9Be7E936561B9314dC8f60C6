
// File: /C/Users/carme/OneDrive/Documents/Crypto/projects/ethereum/Koji_Perm/contracts/KojiSwap.sol
// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Context.sol";

interface KojiEarth {
    function GetPending(address _shareholder) external view returns (uint256);
    function GetClaimed(address _shareholder) external view returns (uint256);
    function GetShareholderExpired(address _holder) external view returns (uint256);
    function ViewHolderInfo(address _address) external view returns (uint256 amount, uint256 unpaid, uint256 realised, uint256 excluded, bool rewardeligible);
}   

interface KojiOracle {
    function getbnbequivalent(uint256 amount) external view returns (uint256);
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function safeTransferFrom(address from, address to, uint256 value) external;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract KojiSwap is Ownable, ReentrancyGuard {

    using SafeMath for uint256;
    
    KojiEarth internal kojiearth;
    KojiOracle public oracle;
    IBEP20 internal tokencontractv1Interface;
    IBEP20 internal tokencontractv2Interface;

    mapping (address => bool) public PendingDivsPaid;
    mapping (address => bool) public SwapComplete;
    mapping (address => uint256) public holderRealized;
    mapping (address => uint256) public holderBonus;
    mapping (address => uint256) public holderSwapLast;
    mapping (address => bool) public blacklisted;
    mapping (address => bool) public shitlisted;

    bool public rewardsEnabled = true;

    address public tokencontractv1 = 0x99919114A6e249A9D7862422211d37C41eA29589;
    address public tokencontractv2 = 0x7eb567F5c781EE8e47C7100DC5046955503fc26A;
    
    constructor() {
        kojiearth = KojiEarth(tokencontractv1);
        oracle = KojiOracle(0x2E7bC3122009E9d6487a9b62465C5Ecc5466E81e);  
        tokencontractv1Interface = IBEP20(tokencontractv1);
        tokencontractv2Interface = IBEP20(tokencontractv2);

        shitlisted[address(0x1Cdd863575F479aC935a7922a5dC3cF8610553a4)] = true;

        blacklisted[address(0x018aa70957Dfd9FF84a40BE3dE6E0564E0D5A093)] = true;
        blacklisted[address(0x90147c7cCDF01356fE7217Ce421Ad0b99993423f)] = true;
        blacklisted[address(0xaC8ecCEe643A317FeAaD3E153031b27d5eadB126)] = true;
        blacklisted[address(0xaB0dC348a17375D9aC6cE7bd297DC7204A66B448)] = true; 
        blacklisted[address(0xD7AfeBF94988bEAa196E76B0E0B852CAB22d69f1)] = true;
        blacklisted[address(0xa8f7ff7B386B9A2732716B17dd5856EA3aC72fc8)] = true;
        blacklisted[address(0x945757B48F05F9e4E2Bd54E25Ce801179d79508A)] = true;

    }
    
    receive() external payable {}

    // This will allow owner to rescue BNB sent to the contract
    function rescueBNB() external onlyOwner {
        address payable _owner = payable(msg.sender);
        _owner.transfer(address(this).balance);
    }

    // Function to allow admin to claim tokens sent to this contract
    function transferBEP20Tokens(address _tokenAddr, address _to, uint _amount) external onlyOwner {
        IBEP20(_tokenAddr).transfer(_to, _amount);
    }

    function changeOracle(address _oracle) external onlyOwner {
        oracle = KojiOracle(_oracle);
    }

    function changeContracts(address _v1, address _v2) external onlyOwner {
        tokencontractv1 = _v1;
        tokencontractv2 = _v2;

        kojiearth = KojiEarth(_v1);
        tokencontractv1Interface = IBEP20(_v1);
        tokencontractv2Interface = IBEP20(_v2);
    }

    function hasPendingDividends(address _holder) public view returns (bool) {
        uint256 tempdivs = kojiearth.GetPending(_holder);
        tempdivs = tempdivs.add(kojiearth.GetClaimed(_holder));
         if (kojiearth.GetShareholderExpired(_holder) != 9999999999 || PendingDivsPaid[_holder] || blacklisted[_holder]) {
            return false;
        } else {
            if (tempdivs > 1) {
                return true;
            } else {
                return false;
            }
        }
    }

    function getClaimedDividends(address _holder) public view returns (uint256) {
        if (kojiearth.GetShareholderExpired(_holder) != 9999999999 || PendingDivsPaid[_holder] || blacklisted[_holder]) {
            return 0;
        } else {
            return kojiearth.GetClaimed(_holder);
        }
        
    }

    function getPendingDividends(address _holder) public view returns (uint256) {
        if (kojiearth.GetShareholderExpired(_holder) != 9999999999 || PendingDivsPaid[_holder] || blacklisted[_holder]) {
            return 0;
        } else {
        return kojiearth.GetPending(_holder);
        }
    }

    function payDividends() external nonReentrant {
        if (kojiearth.GetShareholderExpired(_msgSender()) != 9999999999 || kojiearth.GetShareholderExpired(_msgSender()) == 0) {
            //mark address as completed
            PendingDivsPaid[_msgSender()] = true;
            return;
        } else {
            require(hasPendingDividends(_msgSender()), "User has no pending dividends");
            require(!PendingDivsPaid[_msgSender()], "User has already received outstanding dividends!");
            require(!blacklisted[_msgSender()], "Blacklisted addresses cannot receive pending divs");
            //get the total pending divs
            uint256 tempbnb = getPendingDividends(_msgSender());
            tempbnb = tempbnb.add(getClaimedDividends(_msgSender()));

            //get the equivalent KOJI amount from the oracle
            uint256 tempkoji = oracle.getbnbequivalent(tempbnb);

            //transfer BNB to sender
            (bool successShareholder, /* bytes memory data */) = payable(_msgSender()).call{value: tempbnb, gas: 30000}("");
            require(successShareholder, "Shareholder rejected BNB transfer");

            //record realized BNB
            holderRealized[_msgSender()] = tempbnb;

            //transfer bonus KOJI v2 to sender
            if (!blacklisted[_msgSender()] && rewardsEnabled) {
                tokencontractv2Interface.transfer(_msgSender(), tempkoji);
                holderBonus[_msgSender()] = tempkoji;
            }
        
            //mark address as completed
            PendingDivsPaid[_msgSender()] = true;
        }
    }

    function swapTokens() external nonReentrant {
        if (!blacklisted[_msgSender()] && rewardsEnabled) {
            require(!hasPendingDividends(_msgSender()) || PendingDivsPaid[_msgSender()], "Cannot complete swap: user has unpaid dividends");
        }
        //get v1 balance at this address
        uint256 balanceBefore = tokencontractv1Interface.balanceOf(address(this));
        uint256 balanceUser = tokencontractv1Interface.balanceOf(_msgSender());

        //get v1 tokens
        tokencontractv1Interface.transferFrom(address(_msgSender()), address(this), balanceUser);
        
        uint256 balanceNow = tokencontractv1Interface.balanceOf(address(this));
        uint256 newBalanceUser = tokencontractv1Interface.balanceOf(_msgSender());

        //validate receipt of old tokens
        require(newBalanceUser == 0, "User balance not zero");
        require(balanceBefore.add(balanceUser) == balanceNow, "User balance added to contract balance do not match");

        //send user  new tokens
        if (shitlisted[_msgSender()]) {
            tokencontractv2Interface.transfer(_msgSender(), 184497240000000);
        } else {
            if (!blacklisted[_msgSender()] && rewardsEnabled) {
                uint256 tempAmount = balanceUser.mul(10).div(1000);
                balanceUser = balanceUser.add(tempAmount);
                tokencontractv2Interface.transfer(_msgSender(), balanceUser);
            } else {
                tokencontractv2Interface.transfer(_msgSender(), balanceUser);
            }
            
        }

        //mark user as completed
        SwapComplete[_msgSender()] = true;
        holderSwapLast[_msgSender()] = block.timestamp;

    }

    function getRealized(address _holder) external view returns (uint256) {
        (,,uint256 v1Realized,,) = kojiearth.ViewHolderInfo(_holder);
        uint256 swapRealized = holderRealized[_holder];

        return v1Realized.add(swapRealized);
    }

    function changeBlacklistStatus(address _holder, bool _status) external onlyOwner {
        blacklisted[_holder] = _status;
    }

    function setRewardsEnabled(bool _status) external onlyOwner {
        rewardsEnabled = _status;
    }

}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

