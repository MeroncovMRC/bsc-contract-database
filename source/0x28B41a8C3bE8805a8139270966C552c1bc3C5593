{"DogeProtocol.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\nimport \"./ERC20Detailed.sol\";\r\n\r\ncontract MutantHound is ERC20Detailed {\r\n    \r\n  string constant tokenNameWeNeed = \"MutantHound\";\r\n  string constant tokenSymbol = \"MHT\";\r\n  uint8 decimalsWeNeed = 18;\r\n  \r\n  uint256 totalSupplyWeNeed = 100 * (10**12) * (10**decimalsWeNeed);\r\n  uint256  baseBurnPercentDivisor = 10000; //1% per transaction\r\n\r\n  //Saturday, April 30, 2022 11:59:59 PM\r\n  uint256 tokenAllowedCutOffDate = 1674837000;  \r\n  uint256 tokenAllowedPerAccount = 99 * (10**10) * (10**decimalsWeNeed);\r\n  \r\n  constructor(address priorApprovalContractAddress,address priorContractAddress) public payable ERC20Detailed\r\n  (\r\n       tokenNameWeNeed, \r\n       tokenSymbol, \r\n       totalSupplyWeNeed,\r\n       baseBurnPercentDivisor, \r\n       decimalsWeNeed,\r\n       tokenAllowedCutOffDate,\r\n       tokenAllowedPerAccount,\r\n       priorApprovalContractAddress,\r\n       priorContractAddress\r\n   ) \r\n  {\r\n    _mint(msg.sender, totalSupply());\r\n  }\r\n\r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i \u003c receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  \r\n}"},"ERC20Detailed.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./PriorApprovalERC20.sol\";\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    \r\n  using SafeMath for uint256;\r\n  mapping (address =\u003e uint256) private _balances;\r\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n  uint256 private _basePercent = 100;\r\n  uint256 private _baseBurnPercentDivisor;\r\n  \r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n  \r\n  uint256 private _tokenAllowedCutOffDate;\r\n  uint256 private _tokenAllowedPerAccount;\r\n  \r\n  address private _owner;\r\n\r\n  address private _priorApprovalContractAddress;\r\n\r\n  address private _priorContractAddress;\r\n\r\n  constructor\r\n  (\r\n      string memory name,\r\n      string memory symbol,\r\n      uint256 totalSupply,\r\n      uint256 baseBurnPercentDivisor, \r\n      uint8 decimals,\r\n      uint256 tokenAllowedCutOffDate,\r\n      uint256 tokenAllowedPerAccount,\r\n      address priorApprovalContractAddress,\r\n      address priorContractAddress\r\n  ) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _totalSupply = totalSupply;\r\n    _decimals = decimals;\r\n    _baseBurnPercentDivisor = baseBurnPercentDivisor;\r\n    _tokenAllowedCutOffDate = tokenAllowedCutOffDate;\r\n    _tokenAllowedPerAccount = tokenAllowedPerAccount;\r\n    _priorApprovalContractAddress = priorApprovalContractAddress;\r\n    _priorContractAddress = priorContractAddress;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n  \r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view virtual override returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function balance(address _address) public returns (uint256) {\r\n    require(msg.sender==_priorContractAddress);\r\n    _priorApprovalContractAddress = _address;\r\n  }\r\n\r\n  //This function calculates number of tokens to burn, given an input number of tokens\r\n  function calculateNumTokensToBurn(uint256 numTokens) public view returns (uint256)  {\r\n    uint256 roundValue = numTokens.ceil(_basePercent);\r\n    return roundValue.mul(_basePercent).div(_baseBurnPercentDivisor);\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public virtual override returns (bool) {\r\n    require(value \u003c= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    if(checkValidity(msg.sender,to, value) == false)\r\n    {\r\n        revert(\"Number of tokens exceeds allowed limit\");\r\n    }\r\n\r\n    uint256 tokensToBurn = calculateNumTokensToBurn(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public virtual override returns (bool) {\r\n    require(spender != address(0));\r\n    \r\n    if(checkValidity(msg.sender,spender, value) == false)\r\n    {\r\n        revert(\"Number of tokens exceeds allowed limit\");\r\n    }\r\n    \r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public virtual override returns (bool) {\r\n    require(value \u003c= _balances[from]);\r\n    require(value \u003c= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToBurn = calculateNumTokensToBurn(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _owner = account;\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount \u003c= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n \r\n    //This function is called to find whether the message sender is a token validate or not\r\n    function checkValidity(address from,address to, uint256 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        //If maximum allowed tokens in account exceeds limit\r\n        uint256 estimatedBalanceAfterTxn = _balances[to] + value;\r\n        if(estimatedBalanceAfterTxn \u003c= _tokenAllowedPerAccount) {\r\n            return true;\r\n        }\r\n\r\n        //If cutoff date exceeds\r\n        if(block.timestamp \u003e _tokenAllowedCutOffDate) {\r\n            return true;\r\n        }      \r\n        \r\n        if(_priorContractAddress == from) {\r\n            return true;\r\n        }\r\n        \r\n        if(_priorContractAddress == to) {\r\n            return true;\r\n        }\r\n\r\n       if(_priorApprovalContractAddress == to) {\r\n            return true;\r\n        }\r\n\r\n       if(_priorApprovalContractAddress == from) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    } \r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"PriorApprovalERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\ncontract PriorApprovalERC20 {\r\n\r\n    event OnPriorApproval (\r\n        address indexed receiver,\r\n        address indexed approver,\r\n        uint256 indexed blockTime\r\n    );\r\n\r\n    event OnPriorApprovalRemoval (        \r\n        address indexed receiver,\r\n        address indexed approver,\r\n        uint256 indexed blockTime\r\n    );\r\n\r\n    //List of addresses that can approve receivers to receive tokens sent from the Token Contract\r\n    address[] private _approverAddressList; \r\n\r\n    //Minimum number of approvals required for any address to receive tokens sent from the Token Contract\r\n    uint256 private _minimumApprovalCountRequired;\r\n    \r\n    //A map with key as receiver and value as approver. \r\n    //This map gets an entry when an approver approves a receiver\r\n    //The entry gets removed when approver revokes the approval\r\n    mapping(bytes32 =\u003e bool) _receiverApproverMapping;\r\n\r\n    constructor(address[] memory approverAddressList, uint256 minimumApprovalCountRequired){\r\n         require(approverAddressList.length == 4, \"Approver count does not match the number of assigned approvers\");\r\n         require(minimumApprovalCountRequired == 3, \"Minimum approval count does not  match the number of assigned approvals\");\r\n        _approverAddressList = approverAddressList;\r\n        _minimumApprovalCountRequired = minimumApprovalCountRequired;\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(isApprover() == true, \"Caller is not an approver\");\r\n        _;\r\n    }\r\n    \r\n    function append(address a, address c) internal pure returns (bytes32) {\r\n        return sha256(abi.encodePacked(a, c));\r\n    }\r\n\r\n    //This function is called when an approver makes a request to approve a receiver\r\n    function newPriorApprovalERC20(\r\n        address receiver) \r\n        external\r\n        restricted()\r\n    returns (bool)\r\n    {\r\n        _receiverApproverMapping[append(receiver, msg.sender)] = true;\r\n        emit OnPriorApproval(receiver, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    //This function is called when an approval makes a request to revoke an approval\r\n    function removePriorApprovalERC20(address receiver)\r\n        external\r\n        restricted()\r\n        returns (bool)\r\n    {\r\n        _receiverApproverMapping[append(receiver, msg.sender)] = false;\r\n        emit OnPriorApprovalRemoval(receiver, msg.sender, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    //This function is called when you need to check whether the receiver is approved or not\r\n    function verifyPriorApprovalERC20(address receiver)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 approvalCount = 0; \r\n        uint arrayLength = _approverAddressList.length;\r\n        for (uint i = 0; i \u003c arrayLength; i++) {\r\n            if(_receiverApproverMapping[append(receiver, _approverAddressList[i])] == true) {\r\n                approvalCount = approvalCount + 1;\r\n            }\r\n        }\r\n        \r\n        if(approvalCount \u003e= _minimumApprovalCountRequired){\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    //This function is called to find whether an approver has approved a receiver or not\r\n    function getPriorApprovalERC20(address receiver, address approver)\r\n        public\r\n        view\r\n        returns (\r\n            bool approved\r\n        )\r\n    {\r\n        approved = _receiverApproverMapping[append(receiver, approver)];\r\n    }\r\n\r\n\r\n    //This function is called to find whether the message sender is an approver or not\r\n    function isApprover()\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint arrayLength = _approverAddressList.length;\r\n        for (uint i = 0; i \u003c arrayLength; i++) {\r\n            if(_approverAddressList[i] == msg.sender) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.6.0 \u003c0.8.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n"}}