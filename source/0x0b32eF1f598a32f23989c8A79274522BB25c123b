
// File: contracts/0xSwap.sol
/**
 *Submitted for verification at polygonscan.com on 2021-06-13
*/

// SPDX-License-Identifier: MIT

pragma solidity >=0.6.2;
import "./safelib.sol";
import "./IERC20.sol";

contract Dexo0xSwap {

    function marketSwap (
            bool nativeSwap,
            address sellToken,
            address buyToken,
            address spender,
            address payable swapTarget,
            bytes calldata swapCallData,
            uint assetInOffered
        )
            external
            payable
        {
            bool success = false;
            uint boughtAmount =0;

            if(!nativeSwap) {
                boughtAmount = address(this).balance;
            }else{
                boughtAmount = IERC20(buyToken).balanceOf(address(this));
            }

            require(IERC20(sellToken).approve(spender, type(uint256).max));
            if(!nativeSwap) {
                (success,) = swapTarget.call{value: msg.value}(swapCallData);
            }else{
                (success,) = swapTarget.call{value: assetInOffered}(swapCallData);
            }
            require(success, 'SWAP_FAILED');
            
            if(!nativeSwap) {
                boughtAmount = address(this).balance - boughtAmount;
                TransferHelper.safeTransferETH(msg.sender, boughtAmount);
            }else{
                boughtAmount = IERC20(buyToken).balanceOf(address(this))-boughtAmount;
                TransferHelper.safeTransfer(buyToken, msg.sender, boughtAmount);
            }
        }
}

// File: contracts/safelib.sol
//SPDX-License-Identifier: MIT

pragma solidity >=0.7.0;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) { return 0; }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library TransferHelper {
    function safeApprove(address token, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint256 value) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}


// File: contracts/IERC20.sol
//SPDX-License-Identifier: MIT
pragma solidity >=0.6.6;

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

