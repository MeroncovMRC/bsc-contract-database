// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor () { }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
  */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
  */
    function owner() public view returns (address) {
        return _owner;
    }


    /**
     * @dev Returns the address of the current owner.
  */
    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
  */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
  * `onlyOwner` functions anymore. Can only be called by the current owner.
  *
  * NOTE: Renouncing ownership will leave the contract without an owner,
  * thereby removing any functionality that is only available to the owner.
  */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
  * Can only be called by the current owner.
  */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
  */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
contract Ecs is Ownable{
    address[100] public ecs;

    constructor(){
        ecs[0]=0xd7B60e745ECc19bBe27B39780E6C5EfD689A609a;
        ecs[1]=0x8303839e4fBeF6dF4c0A17064CDEa14a5F35C7ab;
        ecs[2]=0x8B54071dE3556E798982f48741F32aDB0D64debA;
        ecs[3]=0x496640395200A653028e1754E105266F5425c023;//
        ecs[4]=0x0518eDd3f907A1D804405fCa1F6864cFc95CC7CC;//
        ecs[5]=0x4BD38FB97A48f848fEb2E41500F667D6ED3434BA;//
    }
    function setAddress(address[] calldata accounts) external onlyOwner{
        require(accounts.length>0);
        delete ecs;
        for(uint i;i<accounts.length;i++){
            ecs[i]=accounts[i];
        }
    }
    function getEcs() external view returns(address[] memory){
        uint count;
        for(uint i;i<ecs.length;i++){
            if(ecs[i]!=address(0)){
                count++;
            }
        }
        address[] memory res=new address[](count);
        for(uint i=0;i<count;i++){
            res[i]=ecs[i];
        }
        return res;
    }
}