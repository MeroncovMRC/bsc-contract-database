{"SEC.sol":{"content":"/*\r\n##########################################################################################################################\r\n##########################################################################################################################\r\n\r\nSave Every Crypto\r\n\r\nhttps://saveeverycrypto.com/\r\n\r\nhttps://t.me/secbsc\r\n\r\n##########################################################################################################################\r\n##########################################################################################################################\r\n\r\n*/\r\n\r\nimport \"./Utils.sol\";\r\n\r\npragma solidity ^0.8.16;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ncontract SEC is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private excludedFromFee;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 private _burnShare;\r\n\r\n    uint256 private _buyTax;\r\n    uint256 private _sellTax;\r\n\r\n    uint256 private _marketingTaxCollected;\r\n\r\n    uint256 private minimumTokensValueBeforeSwap;\r\n    uint256 private minimumBNBToTransfer;\r\n\r\n    uint256 private acceptSlippageReduceFactor;\r\n    uint256 private acceptFeeOnAddLP;\r\n\r\n    address payable public marketingAddress;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool public enableUniSwap;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool inSplitShares;\r\n    bool public swapAndLiquifyEnabled;\r\n    bool public autoSplitShares;\r\n    bool public taxesEnabled;\r\n\r\n    mapping(address =\u003e bool) private _lockedBot;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event EnabledUniswap();\r\n    event UpdateMarketingWallet(address previousAddress, address newAddress);\r\n\r\n    modifier lockForSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier lockForSplitShare() {\r\n        inSplitShares = true;\r\n        _;\r\n        inSplitShares = false;\r\n    }\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _totalSupply = 120_255_157_77 * 10 ** 9;\r\n\r\n        _burnShare = 33;\r\n\r\n        _buyTax = 0;\r\n        _sellTax = 30; //=\u003e 3%\r\n\r\n        minimumTokensValueBeforeSwap = 3 * 10 ** 15;\r\n        minimumBNBToTransfer = 1 * 10 ** 16;\r\n\r\n        acceptSlippageReduceFactor = 7;\r\n        acceptFeeOnAddLP = 110;\r\n\r\n        swapAndLiquifyEnabled = true;\r\n        autoSplitShares = true;\r\n        enableUniSwap = false;\r\n        taxesEnabled = true;\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        excludedFromFee[_msgSender()] = true;\r\n        excludedFromFee[address(this)] = true;\r\n\r\n        //UNISWAP V2\r\n        _setRouterAddress(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        _setMarketingAddress(\r\n            payable(0x51c0e416Da048eB789172b44C1C0c010CEf66b27)\r\n        );\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // Start ERC-20 standard functions\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // End ERC-20 standart functions\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(\r\n            !_lockedBot[from] \u0026\u0026 !_lockedBot[to],\r\n            \"Invalid account - contact EGT admin!\"\r\n        );\r\n\r\n        if (amount == 0) {\r\n            emit Transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (!taxesEnabled || excludedFromFee[from] || excludedFromFee[to]) {\r\n            _transferStandard(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool isToPair = to == uniswapV2Pair; //means sell or provide LP\r\n        bool isFromPair = from == uniswapV2Pair; //means buy or remove LP\r\n\r\n        if (!isToPair \u0026\u0026 !isFromPair) {\r\n            _transferStandard(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        require(enableUniSwap, \"Uniswap not enabled yet\");\r\n\r\n        if (isToPair) {\r\n            bool hasSwapped = false;\r\n\r\n            if (!inSwapAndLiquify \u0026\u0026 !inSplitShares \u0026\u0026 swapAndLiquifyEnabled) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                uint256 contractTokenValue = getSellValue(contractTokenBalance);\r\n                if (contractTokenValue \u003e= minimumTokensValueBeforeSwap) {\r\n                    swapAndLiquify(contractTokenBalance);\r\n                    hasSwapped = true;\r\n                }\r\n            }\r\n\r\n            if (\r\n                !hasSwapped \u0026\u0026\r\n                !inSplitShares \u0026\u0026\r\n                !inSwapAndLiquify \u0026\u0026\r\n                autoSplitShares \u0026\u0026\r\n                address(this).balance \u003e= minimumBNBToTransfer\r\n            ) {\r\n                _distributeTax();\r\n            }\r\n\r\n            _transferToPair(from, to, amount);\r\n        } else {\r\n            _transferFromPair(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool sentBNB, ) = payable(to).call{value: value}(\"\");\r\n        require(sentBNB, \"Failed to send BNB\");\r\n    }\r\n\r\n    function manualSwapAndLiquify() external onlyOwner {\r\n        if (!inSwapAndLiquify \u0026\u0026 !inSplitShares) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            uint256 contractTokenValue = getSellValue(contractTokenBalance);\r\n            if (contractTokenValue \u003e= minimumTokensValueBeforeSwap) {\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function manualSwapAndLiquify(\r\n        uint256 tokenAmountToSwap\r\n    ) external onlyOwner {\r\n        if (!inSwapAndLiquify \u0026\u0026 !inSplitShares) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            require(\r\n                contractTokenBalance \u003e= tokenAmountToSwap,\r\n                \"Invalid amount\"\r\n            );\r\n\r\n            uint256 contractTokenValue = getSellValue(tokenAmountToSwap);\r\n            if (contractTokenValue \u003e= minimumTokensValueBeforeSwap) {\r\n                swapAndLiquify(tokenAmountToSwap);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Handles all autoswap to BNB\r\n     *\r\n     * @param tokensToSwap the amount that will be swapped\r\n     *\r\n     * NOTE: will never be called if swapAndLiquify = false!.\r\n     */\r\n    function swapAndLiquify(uint256 tokensToSwap) internal lockForSwap {\r\n        swapTokensForBNB(tokensToSwap);\r\n    }\r\n\r\n    /**\r\n     * @dev Handles selling of {tokenAmount}\r\n     *\r\n     * @param tokenAmount the amount of tokens to swap for BNB\r\n     *\r\n     */\r\n    function swapTokensForBNB(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getBuyValue(uint256 BNBAmount) internal view returns (uint256) {\r\n        if (BNBAmount == 0) {\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        return uniswapV2Router.getAmountsIn(BNBAmount, path)[0];\r\n    }\r\n\r\n    function getSellValue(uint256 tokenAmount) internal view returns (uint256) {\r\n        if (tokenAmount == 0) {\r\n            return 0;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        return uniswapV2Router.getAmountsOut(tokenAmount, path)[1];\r\n    }\r\n\r\n    function _distributeTax() internal lockForSplitShare {\r\n        safeTransferBNB(marketingAddress, address(this).balance);\r\n        _marketingTaxCollected = _marketingTaxCollected.add(\r\n            address(this).balance\r\n        );\r\n    }\r\n\r\n    function distributeTax() external onlyOwner {\r\n        _distributeTax();\r\n    }\r\n\r\n    function provideLP(uint256 tokenAmount) external payable {\r\n        uint256 initBalance = balanceOf(_msgSender());\r\n        require(initBalance \u003e= tokenAmount, \"Insufficient token balance\");\r\n\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(tokenAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(tokenAmount);\r\n        emit Transfer(_msgSender(), address(this), tokenAmount);\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            tokenAmount,\r\n            tokenAmount,\r\n            msg.value,\r\n            _msgSender(),\r\n            block.timestamp + 10 minutes\r\n        );\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferToPair(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _transferWithTax(sender, recipient, amount, _sellTax);\r\n    }\r\n\r\n    function _transferFromPair(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        _transferWithTax(sender, recipient, amount, _buyTax);\r\n    }\r\n\r\n    function _transferWithTax(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 tax\r\n    ) internal {\r\n        if (tax == 0) {\r\n            _transferStandard(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        uint256 taxAmount = amount.mul(tax).div(1000);\r\n        uint256 receiveAmount = amount.sub(taxAmount);\r\n\r\n        uint256 burnAmount = taxAmount.mul(_burnShare).div(100);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(\r\n            taxAmount.sub(burnAmount)\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(receiveAmount);\r\n\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n\r\n        emit Transfer(_msgSender(), address(0), burnAmount);\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return excludedFromFee[account];\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        excludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        excludedFromFee[account] = true;\r\n    }\r\n\r\n    function isBlockedBotAccount(address account) external view returns (bool) {\r\n        return _lockedBot[account];\r\n    }\r\n\r\n    function enableBlockedBotAccount(address account) external onlyOwner {\r\n        _lockedBot[account] = false;\r\n    }\r\n\r\n    function blockBotAccount(address account) external onlyOwner {\r\n        _lockedBot[account] = true;\r\n    }\r\n\r\n    function _setMarketingAddress(address payable _marketingAddress) internal {\r\n        address prevMarketing = marketingAddress;\r\n        marketingAddress = _marketingAddress;\r\n        excludedFromFee[marketingAddress] = true;\r\n        excludedFromFee[prevMarketing] = false;\r\n        emit UpdateMarketingWallet(prevMarketing, marketingAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev owner only function to set the marketing address\r\n     *\r\n     * Emits an {UpdateMarketingWallet} event.\r\n     *\r\n     */\r\n    function setMarketingAddress(\r\n        address payable _marketingAddress\r\n    ) external onlyOwner {\r\n        _setMarketingAddress(_marketingAddress);\r\n    }\r\n\r\n    function setBurnShare(uint256 burnShare) external onlyOwner {\r\n        require(burnShare \u003c= 100, \"Cannot set share higher than 100%\");\r\n        _burnShare = burnShare;\r\n    }\r\n\r\n    function setBuyTax(uint256 buyTax) external onlyOwner {\r\n        require(buyTax \u003c= 250, \"Cannot set fees higher than 25%!\");\r\n        _buyTax = buyTax;\r\n    }\r\n\r\n    function getBuyTax() external view returns (uint256) {\r\n        return _buyTax;\r\n    }\r\n\r\n    function setSellTax(uint256 sellTax) external onlyOwner {\r\n        require(sellTax \u003c= 250, \"Cannot set fees higher than 25%!\");\r\n        _sellTax = sellTax;\r\n    }\r\n\r\n    function getSellTax() external view returns (uint256) {\r\n        return _sellTax;\r\n    }\r\n\r\n    /**\r\n     * @dev public function to read the limiter on when the contract will auto convert to BNB\r\n     *\r\n     */\r\n    function getTokenAutoSwapLimit() external view returns (uint256) {\r\n        return minimumTokensValueBeforeSwap;\r\n    }\r\n\r\n    /**\r\n     * @dev owner only function to set the limit of tokens to sell for BNB when reached\r\n     *\r\n     * @param _minimumTokensValueBeforeSwap the amount tokens BNB value when to sell from the contract\r\n     *\r\n     */\r\n    function setTokenAutoSwapLimit(\r\n        uint256 _minimumTokensValueBeforeSwap\r\n    ) external onlyOwner {\r\n        minimumTokensValueBeforeSwap = _minimumTokensValueBeforeSwap;\r\n    }\r\n\r\n    function getBNBAutoTransferLimit() external view returns (uint256) {\r\n        return minimumBNBToTransfer;\r\n    }\r\n\r\n    function setBNBAutoTransferLimit(\r\n        uint256 _minimumBNBToTransfer\r\n    ) external onlyOwner {\r\n        minimumBNBToTransfer = _minimumBNBToTransfer;\r\n    }\r\n\r\n    /**\r\n     * @dev owner only function to control if the autoswap to BNB should happen\r\n     *\r\n     * Emits an {SwapAndLiquifyEnabledUpdated} event.\r\n     *\r\n     */\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setAutoSplitSharesEnables(bool _enabled) external onlyOwner {\r\n        autoSplitShares = _enabled;\r\n    }\r\n\r\n    function enableUniswap() external onlyOwner {\r\n        require(!enableUniSwap, \"Already enabled!\");\r\n        enableUniSwap = true;\r\n        emit EnabledUniswap();\r\n    }\r\n\r\n    function setAcceptedSlippage(uint256 accepted) external onlyOwner {\r\n        require(accepted \u003c= 9, \"Cannot set above 9\");\r\n        acceptSlippageReduceFactor = accepted;\r\n    }\r\n\r\n    function getAcceptedSlippage() external view onlyOwner returns (uint256) {\r\n        return acceptSlippageReduceFactor;\r\n    }\r\n\r\n    function setAcceptedFeeOnAdd(uint256 accepted) external onlyOwner {\r\n        acceptFeeOnAddLP = accepted;\r\n    }\r\n\r\n    function getAcceptedFeeOnAdd() external view onlyOwner returns (uint256) {\r\n        return acceptFeeOnAddLP;\r\n    }\r\n\r\n    function _setRouterAddress(address newRouter) internal {\r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        IUniswapV2Factory factory = IUniswapV2Factory(\r\n            _newPancakeRouter.factory()\r\n        );\r\n\r\n        address existingPair = factory.getPair(\r\n            address(this),\r\n            _newPancakeRouter.WETH()\r\n        );\r\n\r\n        if (existingPair == address(0)) {\r\n            uniswapV2Pair = factory.createPair(\r\n                address(this),\r\n                _newPancakeRouter.WETH()\r\n            );\r\n        } else {\r\n            uniswapV2Pair = existingPair;\r\n        }\r\n        uniswapV2Router = _newPancakeRouter;\r\n    }\r\n\r\n    /**\r\n     * @dev owner only function to set a new router address and create a new pair.\r\n     *\r\n     */\r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        _setRouterAddress(newRouter);\r\n    }\r\n\r\n    function totalMarketingTaxCollected()\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        return _marketingTaxCollected;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(balanceOf(_msgSender()) \u003e= amount, \"Insufficient balance\");\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(_msgSender(), address(0), amount);\r\n    }\r\n\r\n    function O_BuyValue(uint256 BNBAmount) external view returns (uint256) {\r\n        return getBuyValue(BNBAmount);\r\n    }\r\n\r\n    function O_SellValue(uint256 tokenAmount) external view returns (uint256) {\r\n        return getSellValue(tokenAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"},"Utils.sol":{"content":"pragma solidity ^0.8.16;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length \u003e 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"}}