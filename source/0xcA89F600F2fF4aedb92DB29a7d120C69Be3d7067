// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

// Создаем интерфейс IERC20
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

contract FreelanceTokenVault {
    IERC20 private _token;
    mapping(address => uint256) private _deposits;

    constructor(address tokenAddress) public {
        _token = IERC20(tokenAddress);
    }

    function deposit(uint256 amount) public {
        require(_token.transferFrom(msg.sender, address(this), amount), "Transfer failed");
        _deposits[msg.sender] += amount;
    }

    function withdraw(uint256 amount) public {
        require(_deposits[msg.sender] >= amount, "Insufficient balance");
        _deposits[msg.sender] -= amount;
        require(_token.transfer(msg.sender, amount), "Transfer failed");
    }

    function getDeposit() public view returns (uint256) {
        return _deposits[msg.sender];
    }
}