// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.4;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface Token {
    function transferFrom(address, address, uint) external returns (bool);
    function transfer(address, uint) external returns (bool);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}



library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    function transferOwnership(address newOwner) public virtual onlyOwner {
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

}

contract SmartMonkey is Context, IERC20, Ownable {
    
    using SafeMath for uint256;
    mapping (address => uint256) private _rOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _isExcludedFromFee;
    
    uint256 private constant _totalSupply = 50 * 10**6 * 10**18;
    
    uint256 public _taxFeeMarketingOnBuy = 2;
    uint256 public _taxFeeAppOnBuy = 1;
    uint256 public _taxFeeLiquidityOnBuy = 1;
    
    uint256 public _taxFeeMarketingOnSell = 3;
    uint256 public _taxFeeAppOnSell = 2;
    uint256 public _taxFeeLiquidityOnSell = 1;
        
    string private constant _name = "SmartMonkey";
    string private constant _symbol = "SMT";
    uint8 private constant _decimals = 18;
    
    address payable private _marketingAddress = payable(0x82A4acA10E4eD0F1A72a2761a0b498758c79D2BA);
    address payable private _appAddress = payable(0xc45c3B2bF6De798b0cDD6DEEfa50300e5AEA16Ef);
    address payable private _liquidityAddress = payable(0xAd471Ae3940b0b1e63Ca1a0df2AeA13B61D5f7a0);


    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    
    bool private inSwap = false;
    bool private swapEnabled = true;
    
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }
    constructor () {
        _rOwned[_msgSender()] = _totalSupply;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        //pancake test: 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506
        //pancake main: 0x10ED43C718714eb63d5aA57B78B54704E256024E
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_marketingAddress] = true;
        _isExcludedFromFee[_liquidityAddress] = true;
        _isExcludedFromFee[_appAddress] = true;

        emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _totalSupply);
    }

    modifier onlyDev() {	
        require(owner() == _msgSender() || _isExcludedFromFee[_msgSender()], "Caller is not the dev");	
        _;	
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _rOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        bool taxFee = false;
        uint256 marketingFeeAmount = 0;
        uint256 appFeeAmount = 0;
        uint256 liquidityFeeAmount = 0;
        uint256 tAmount = amount;

        if(from == uniswapV2Pair && to != address(uniswapV2Router)) {
            taxFee = true;
            marketingFeeAmount = amount.mul(_taxFeeMarketingOnBuy).div(100);
            appFeeAmount = amount.mul(_taxFeeAppOnBuy).div(100);
            liquidityFeeAmount = amount.mul(_taxFeeLiquidityOnBuy).div(100);
        }

        if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
            taxFee = true;
            marketingFeeAmount = amount.mul(_taxFeeMarketingOnSell).div(100);
            appFeeAmount = amount.mul(_taxFeeAppOnSell).div(100);
            liquidityFeeAmount = amount.mul(_taxFeeLiquidityOnSell).div(100);
        }
        
        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {
            taxFee = false;
        }
        
        if (taxFee) {
            tAmount = amount.sub(marketingFeeAmount).sub(appFeeAmount).sub(liquidityFeeAmount);
            _rOwned[_marketingAddress] = _rOwned[_marketingAddress].add(marketingFeeAmount);
            emit Transfer(from, _marketingAddress, marketingFeeAmount);
            _rOwned[_appAddress] = _rOwned[_appAddress].add(appFeeAmount);
            emit Transfer(from, _appAddress, appFeeAmount);
            _rOwned[_liquidityAddress] = _rOwned[_liquidityAddress].add(liquidityFeeAmount);
            emit Transfer(from, _liquidityAddress, liquidityFeeAmount);
        }
        _rOwned[from] = _rOwned[from].sub(amount);
        _rOwned[to] = _rOwned[to].add(tAmount); 
        emit Transfer(from, to, tAmount);
    }
       
    function setNewMarketingAddress(address payable dev) public onlyDev {
        _marketingAddress = dev;
        _isExcludedFromFee[_marketingAddress] = true;
    }

    function setNewAppAddress(address payable dev) public onlyDev {
        _appAddress = dev;
        _isExcludedFromFee[_appAddress] = true;
    }

    function setNewLiquidityAddress(address payable dev) public onlyDev {
        _liquidityAddress = dev;
        _isExcludedFromFee[_liquidityAddress] = true;
    }

    function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress); 

        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());

        if(newPairAddress == address(0)) //Create If Doesnt exist
        {
            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())
                .createPair(address(this), _uniswapV2Router.WETH());
        }

        uniswapV2Pair = newPairAddress; //Set new pair address
        uniswapV2Router = _uniswapV2Router; //Set new router address
    }

    receive() external payable {}
    
    function setBuyFee(uint256 taxMarketingFeeOnBuy, uint256 taxAppFeeOnBuy, uint256 taxLiquidityFeeOnBuy) public onlyDev {
	    require(taxMarketingFeeOnBuy < 6, "Tax cannot be more than 5.");
	    require(taxAppFeeOnBuy < 6, "Tax cannot be more than 5.");
        require(taxLiquidityFeeOnBuy < 6, "Tax cannot be more than 5.");
        _taxFeeMarketingOnBuy = taxMarketingFeeOnBuy;
        _taxFeeAppOnBuy = taxAppFeeOnBuy;
        _taxFeeLiquidityOnBuy = taxLiquidityFeeOnBuy;
    }
    function setSellFee(uint256 taxMarketingFeeOnSell, uint256 taxAppFeeOnSell, uint256 taxLiquidityFeeOnSell) public onlyDev {
	    require(taxMarketingFeeOnSell < 6, "Tax cannot be more than 5.");
	    require(taxAppFeeOnSell < 6, "Tax cannot be more than 5.");
        require(taxLiquidityFeeOnSell < 6, "Tax cannot be more than 5.");
        _taxFeeMarketingOnSell = taxMarketingFeeOnSell;
        _taxFeeAppOnSell = taxAppFeeOnSell;
        _taxFeeLiquidityOnSell = taxLiquidityFeeOnSell;
    }
    
    function toggleSwap(bool _swapEnabled) public onlyDev {
        swapEnabled = _swapEnabled;
    }

    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyDev {
        for(uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = excluded;
        }
    }
}