// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.18;


interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Auth is Context {
    error NotAuthorized();

    mapping(address => bool) _auth;
    address _owner;

    constructor () {
        _owner = _msgSender();
    }

    modifier onlyAuth() {
        if(!_auth[_msgSender()]) revert NotAuthorized();
        _;
    }

    modifier onlyOwner() {
        if(_msgSender() != _owner) revert NotAuthorized();
        _;
    }

    function isAuth(address a) public view returns (bool) {
        return _auth[a];
    }

    function giveAuth(address a) external onlyOwner {
        _auth[a] = true;
    }

    function removeAuth(address a) external onlyOwner {
        _auth[a] = false;
    }

    function transferOwnership(address newOwner) external virtual onlyOwner {
        _owner = newOwner;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function RecoverETH(uint amount, address recipient) external onlyOwner
    {
        payable(recipient).transfer(amount);
    }

    function RecoverERC20(address token, uint amount, address recipient) external onlyOwner
    {
        IERC20(token).transfer(recipient, amount);
    }
}


interface IStorage {
    function getUint(bytes32 _key) external view returns(uint);
    function getString(bytes32 _key) external view returns(string memory);
    function getAddress(bytes32 _key) external view returns(address);
    function getBytes(bytes32 _key) external view returns(bytes memory);
    function getBool(bytes32 _key) external view returns(bool);
    function getInt(bytes32 _key) external view returns(int);

    function setUint(bytes32 _key, uint _value) external;
    function setString(bytes32 _key, string calldata _value) external;
    function setAddress(bytes32 _key, address _value) external;
    function setBytes(bytes32 _key, bytes calldata _value) external;
    function setBool(bytes32 _key, bool _value) external;
    function setInt(bytes32 _key, int _value) external;
}

contract EternalStorage is Auth, IStorage {
    mapping(bytes32 => uint) uIntStorage;
    mapping(bytes32 => string) stringStorage;
    mapping(bytes32 => address) addressStorage;
    mapping(bytes32 => bytes) bytesStorage;
    mapping(bytes32 => bool) boolStorage;
    mapping(bytes32 => int) intStorage;

    constructor() {
    }

    receive() external payable { }

    function getUint(bytes32 _key) external view returns(uint) {
        return uIntStorage[_key];
    }

    function getString(bytes32 _key) external view returns(string memory) {
        return stringStorage[_key];
    }

    function getAddress(bytes32 _key) external view returns(address) {
        return addressStorage[_key];
    }

    function getBytes(bytes32 _key) external view returns(bytes memory) {
        return bytesStorage[_key];
    }

    function getBool(bytes32 _key) external view returns(bool) {
        return boolStorage[_key];
    }

    function getInt(bytes32 _key) external view returns(int) {
        return intStorage[_key];
    }

    function setUint(bytes32 _key, uint _value) onlyAuth external {
        uIntStorage[_key] = _value;
    }

    function setString(bytes32 _key, string calldata _value) onlyAuth external {
        stringStorage[_key] = _value;
    }

    function setAddress(bytes32 _key, address _value) onlyAuth external {
        addressStorage[_key] = _value;
    }

    function setBytes(bytes32 _key, bytes calldata _value) onlyAuth external {
        bytesStorage[_key] = _value;
    }

    function setBool(bytes32 _key, bool _value) onlyAuth external {
        boolStorage[_key] = _value;
    }

    function setInt(bytes32 _key, int _value) onlyAuth external {
        intStorage[_key] = _value;
    }
}