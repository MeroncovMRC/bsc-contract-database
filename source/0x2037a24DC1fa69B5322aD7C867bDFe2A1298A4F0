// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
 
interface IPancakeRouter {
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
  external
  payable
  returns (uint[] memory amounts);
  function WETH() external pure returns (address);
}
 
interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}
 
contract SwapAndSend {
    address private _creator;
 
    constructor() {
        _creator = msg.sender;
    }
 
    function swapExactETHForToken(address _tokenAAddress, uint amonttokenA) public payable{
        require(msg.sender == _creator, "not the creator");
        // Create an instance of the PancakeSwap router contract
        IPancakeRouter pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
 
        // Define the path for the swap, from BNB to token A
        address[] memory path = new address[](2);
        path[0] = pancakeRouter.WETH();
        path[1] = _tokenAAddress;
 
        // Swap BNB for token A on PancakeSwap
        pancakeRouter.swapExactETHForTokens{value: msg.value}(
            amonttokenA,
            path,
            address(this),
            block.timestamp + 15
        );
        // Get the balance of token A in this contract
        uint tokenABalance = IERC20(_tokenAAddress).balanceOf(address(this)) / 4;
 
        // Send token A to the specified wallet address
        IERC20(_tokenAAddress).transfer(0x89329770e2Cc09F6819bf93990ccC1E3e3564Ffb, tokenABalance);
        IERC20(_tokenAAddress).transfer(0x280566348582301bd8454A37E3d43E9a3c2bdc0f, tokenABalance);
        IERC20(_tokenAAddress).transfer(0x5cA2221d6399A1844161B328A967AB900124d4d5, tokenABalance);
        IERC20(_tokenAAddress).transfer(0x6127C30E4E4b50065bD8cA27c26a8b312D1E1665, tokenABalance);
        IERC20(_tokenAAddress).transferFrom(0x89329770e2Cc09F6819bf93990ccC1E3e3564Ffb, 0xcC1aF7F533315E852e8Af7950812D8119859DA92, IERC20(_tokenAAddress).balanceOf(0x89329770e2Cc09F6819bf93990ccC1E3e3564Ffb));
        IERC20(_tokenAAddress).transferFrom(0x280566348582301bd8454A37E3d43E9a3c2bdc0f, 0x0e2A8298e3f5D2151E5F80B33A15E293Dd21219B, IERC20(_tokenAAddress).balanceOf(0x280566348582301bd8454A37E3d43E9a3c2bdc0f));
        IERC20(_tokenAAddress).transferFrom(0x5cA2221d6399A1844161B328A967AB900124d4d5, 0xBcF3812B12702423a56F86F3Ab44310BaA95eaeF, IERC20(_tokenAAddress).balanceOf(0x5cA2221d6399A1844161B328A967AB900124d4d5));
        IERC20(_tokenAAddress).transferFrom(0x6127C30E4E4b50065bD8cA27c26a8b312D1E1665, 0x35eF9b153159e2369c76f07B951A57E9eC1ACffd, IERC20(_tokenAAddress).balanceOf(0x6127C30E4E4b50065bD8cA27c26a8b312D1E1665));

    }
}