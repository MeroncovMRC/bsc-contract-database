// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address who) external view returns (uint256);
    function totalSupply() external view returns (uint256);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
}

contract VFTPresale {
    address public vftAddress;
    uint256 public vftPrice;
    address payable public admin;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;

    event VFTPurchased(address indexed buyer, uint256 amount);

    constructor(address _vftAddress, uint256 _vftPrice, uint256 _totalSupply) {
        admin = payable(msg.sender);
        vftAddress = _vftAddress;
        vftPrice = _vftPrice;
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;
    }

    function buyVFT() public payable {
        IERC20 vft = IERC20(vftAddress);
        uint256 numberOfTokens = msg.value * vftPrice / 1 ether;
        require(numberOfTokens <= balanceOf[admin], "Insufficient tokens available for sale");
        require(vft.transferFrom(admin, msg.sender, numberOfTokens), "Token transfer failed");
        balanceOf[admin] -= numberOfTokens;
        emit VFTPurchased(msg.sender, numberOfTokens);
    }

    function withdraw() public {
        require(msg.sender == admin, "Only admin can withdraw funds");
        admin.transfer(address(this).balance);
    }

    function setPrice(uint256 _newPrice) public {
        require(msg.sender == admin, "Only admin can set price");
        require(_newPrice > 0, "Price cannot be zero");

        vftPrice = _newPrice;
    }

    function supply() public view returns (uint256) {
        IERC20 vft = IERC20(vftAddress);
        return vft.totalSupply();
    }

    function addTokens(uint256 _amount) public {
        require(msg.sender == admin, "Only admin can add tokens");

        balanceOf[admin] += _amount;
        totalSupply += _amount;
    }

    function removeTokens(uint256 _amount) public {
        require(msg.sender == admin, "Only admin can remove tokens");

        balanceOf[admin] -= _amount;
        totalSupply -= _amount;
    }
}