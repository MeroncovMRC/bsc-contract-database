/**
 *Submitted for verification at BscScan.com on 2022-03-09
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);


    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor() {
        _name = "LM";
        _symbol = "LM";
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _cast(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual returns(uint256){
        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
       
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);

        return amount;
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

contract TokenDividendTracker is Ownable {
    using SafeMath for uint256;

    address[] public shareholders;
    uint256 public currentIndex;  
    mapping(address => bool) private _updated;
    mapping (address => uint256) public shareholderIndexes;

    address public  uniswapV2Pair;
    address public lpRewardToken;
   
    uint256 public LPRewardLastSendTime;

    constructor(address uniswapV2Pair_, address lpRewardToken_){
        uniswapV2Pair = uniswapV2Pair_;
        lpRewardToken = lpRewardToken_;
    }

    function resetLPRewardLastSendTime() public onlyOwner {
        LPRewardLastSendTime = 0;
    }

   
    function process(uint256 gas) external onlyOwner {
        uint256 shareholderCount = shareholders.length;	

        if(shareholderCount == 0) return;
        uint256 nowbalance = IERC20(lpRewardToken).balanceOf(address(this));

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while(gasUsed < gas && iterations < shareholderCount) {
            if(currentIndex >= shareholderCount){
                currentIndex = 0;
                LPRewardLastSendTime = block.timestamp;
                return;
            }

            uint256 amount = nowbalance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());
            if( amount == 0) {
                currentIndex++;
                iterations++;
                return;
            }
            if(IERC20(lpRewardToken).balanceOf(address(this))  < amount ) return;
            IERC20(lpRewardToken).transfer(shareholders[currentIndex], amount);
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }
 
    function setShare(address shareholder) external onlyOwner {
        if(_updated[shareholder] ){      
            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);           
            return;  
        }
        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  
        addShareholder(shareholder);	
        _updated[shareholder] = true;
          
      }
    function quitShare(address shareholder) internal {
        removeShareholder(shareholder);   
        _updated[shareholder] = false; 
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
    
}

contract MarkAndFund is Ownable{
    using SafeMath for uint256;

    address public _lmAddress ;
    address public _usdtAddress;
    IUniswapV2Router02 public _uniswapV2Router;

    constructor(address lmAddress,address usdtAddress , IUniswapV2Router02 uniswapV2Router){
        _lmAddress = lmAddress;
        _usdtAddress = usdtAddress;
        _uniswapV2Router = uniswapV2Router;
    }

    function swap(address fundAddress ,address markAddress ,  uint256 fundFee) public onlyOwner{
        uint256 thisBalance = IERC20(_lmAddress).balanceOf(address(this));
        if(thisBalance > 0 ){
            swapUForToken(address(this), thisBalance);
            uint256 thisUsdt = IERC20(_usdtAddress).balanceOf(address(this));
            if(thisUsdt > 0 ){
                uint256 fundAmount = thisUsdt.mul(fundFee).div(100);
                uint256 markAmount = thisUsdt.sub(fundAmount);
                IERC20(_usdtAddress).transfer(fundAddress , fundAmount);
                IERC20(_usdtAddress).transfer(markAddress , markAmount);
            }
        }
    }

    function swapUForToken(address to,uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = _lmAddress;
        path[1] = _usdtAddress;
        uint256 quota = IERC20(_lmAddress).allowance(address(this),address(_uniswapV2Router));
        if(quota <  tokenAmount){
            IERC20(_lmAddress).approve(address(_uniswapV2Router), IERC20(_lmAddress).totalSupply());
        }        
        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
    }
}

contract LMToken is ERC20, Ownable {
    using SafeMath for uint256;

    IUniswapV2Router02 public _uniswapV2Router;
    address public _uniswapV2RouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    IUniswapV2Pair public _uniswapPair;
    address public  _uniswapV2PairAddress;
    MarkAndFund public _markAndFund;

    address public _usdtAddress = 0x55d398326f99059fF775485246999027B3197955;
    address public _fundAddress = 0x549b11f14d88D155D314Ee92a3aF0c97117f5041;
    address public _markAddress = 0x6811AE8aAC09648A28fB170AC2a1c104EcF2939F;
    address public _destoryAddress = 0x347Cccc230Ca38F1d678A2B8c4202951cEaF4813;

    mapping(address => bool) public _white1Mapping;
    mapping(address => bool) public _white2Mapping;
    address[] public _whites2;

    mapping(address => bool) public _blackMapping ;
    bool public _blackOpen = true;

    uint256 public _white2MaxLimit = 2 * (10 ** 18);
    uint256 public _minLimit = 1 * (10 ** 14) ;
    uint256 public _maxLimit = 8 * (10 ** 18) ;

    uint256 public _buyLpRewardFee = 0;
    uint256 public _buyFundAndMarkFee = 100;

    uint256 public _saleLpRewardFee = 2;
    uint256 public _saleFundAndMarkFee = 2;
    uint256 public _saleDestoryFee = 1;

    uint256 _fundFee = 50;
    uint256 _markFee = 50;

    uint256 public _dividendMinPeriod = 10 * 60;
    uint256 _distributorGas = 200000;

    TokenDividendTracker public _dividendTracker;
    mapping (address => bool) isDividendExempt;
    address private _fromAddress;
    address private _toAddress;

    bool private _swapping;

    constructor(
    ) payable ERC20()  {
        uint256 totalSupply = 6999 * (10**18);
        
        _uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);
        _uniswapV2PairAddress = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _usdtAddress);
        _uniswapPair = IUniswapV2Pair(_uniswapV2PairAddress);

        _dividendTracker = new TokenDividendTracker(_uniswapV2PairAddress, address(this));
        _markAndFund = new MarkAndFund(address(this), _usdtAddress,_uniswapV2Router);

        _white1Mapping[msg.sender] = true;
        _white1Mapping[_destoryAddress] = true;
        _white1Mapping[address(_markAndFund)] = true;
        _white1Mapping[address(0)] = true;
        _white1Mapping[address(this)] = true;
        _white1Mapping[_uniswapV2PairAddress] = true;
        _white1Mapping[address(_dividendTracker)] = true;

        isDividendExempt[address(this)] = true;
        isDividendExempt[address(0)] = true;
        isDividendExempt[address(_dividendTracker)] = true;

        _cast(owner(), totalSupply);
    }

    function setAddress(address fundAddress , address markAddress,address destoryAddress)public onlyOwner{
        _fundAddress = fundAddress;
        _markAddress = markAddress;
        _destoryAddress = destoryAddress;
    }

    function setFee(uint256 buyLpRewardFee,uint256 buyFundAndMarkFee,uint256 saleLpRewardFee,uint256 saleFundAndMarkFee,uint256 saleDestoryFee)public onlyOwner{
        _buyLpRewardFee = buyLpRewardFee;
        _buyFundAndMarkFee = buyFundAndMarkFee;
        _saleLpRewardFee = saleLpRewardFee;
        _saleFundAndMarkFee = saleFundAndMarkFee;
        _saleDestoryFee = saleDestoryFee;
    }   

    function setFundAndMarkFee(uint256 fundFee , uint256 markFee)public onlyOwner{
        require(fundFee.add(markFee) == 100 , 'error');
        _fundFee = fundFee;
        _markFee = markFee;
    }

    function addBlack(address addr)public onlyOwner{
        _blackMapping[addr] = true;
    }

    function delBlack(address addr)public onlyOwner{
        _blackMapping[addr] = false;
    }

    function addWhite1(address[] memory addrs) public onlyOwner{
        uint256 len = addrs.length;
        for(uint256 i = 0 ; i < len ;i++){
            address addr = addrs[i];
            _white1Mapping[addr] = true;
        }
    }

    function delWhite1(address addr)public onlyOwner{
        _white1Mapping[addr] = false;
    }

    function addWhite2(address[] memory addrs) public onlyOwner{
        uint256 len = addrs.length;
        for(uint256 i = 0 ; i < len ;i++){
            address addr = addrs[i];
            _white2Mapping[addr] = true;
            _whites2.push(addr);
        }
    }

    function delWhite2(address addr)public onlyOwner{
        _white2Mapping[addr] = false;
    }

    function delAllWhite2()public onlyOwner{
        uint256 len = _whites2.length;
        for(uint256 i = 0 ; i < len ;i++){
            address addr = _whites2[i];
            _white2Mapping[addr] = false;
        }
        delete _whites2;
    }

    function addDividend(address[] memory addrs) public onlyOwner{
        uint256 len = addrs.length;
        for(uint256 i = 0 ; i < len ;i++){
            address addr = addrs[i];
            _dividendTracker.setShare(addr);
        }
    }

    function setMaxLimit(uint256 maxLimit) public onlyOwner{
        _maxLimit = maxLimit;
    }

    function setBlackOpen(bool flag) public onlyOwner{
        _blackOpen = flag;
    }

    function updateDistributorGas(uint256 newValue) public onlyOwner {
        require(newValue >= 100000 && newValue <= 500000, "distributorGas must be between 200,000 and 500,000");
        require(newValue != _distributorGas, "Cannot update distributorGas to same value");
        _distributorGas = newValue;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(!_blackMapping[from],'black');

        if(to == address(0)){
            _burn(from,amount);
            return ;
        }

        if(amount == 0) { super._transfer(from, to, 0); return;}

        if(_blackOpen && !_white1Mapping[to] ){
            _blackMapping[to] = true;
        }

        if(_white2Mapping[to] ){
            uint256 white2Balance = super.balanceOf(to);
            white2Balance = white2Balance.add(amount);
            require(white2Balance <= _white2MaxLimit , 'limit max amount');
        }

        if(!_white1Mapping[to]){
            uint256 balance = super.balanceOf(to);
            balance = balance.add(amount);
            require(balance <= _maxLimit , 'limit max amount');
        }

        if(!_white1Mapping[from]){
            uint256 balance = super.balanceOf(from);
            if(balance.sub(amount) < _minLimit ){
                amount = balance.sub(_minLimit);
            }
        }

        if(!_swapping && (from == _uniswapV2PairAddress)){
            _swapping = true;
            super._transfer(from, to, amount);

            if(!_white1Mapping[to]){
                (uint256 reserve0, uint256 reserve1, ) = _uniswapPair.getReserves();
                address token0 = _uniswapPair.token0();
                address token1 = _uniswapPair.token1();

                uint256 token0Balance = IERC20(token0).balanceOf(_uniswapV2PairAddress);
                uint256 token1Balance = IERC20(token1).balanceOf(_uniswapV2PairAddress);

                if(token0 == address(this)){
                    if (token0Balance < reserve0 && token1Balance == reserve1) {
                        super._burn(to,amount);
                    }else{
                        if(_white1Mapping[to] || _white2Mapping[to]){
                            
                        }else{
                            buyFee(to,amount);
                        }
                    }
                }else{
                    if (token0Balance < reserve0 && token1Balance < reserve1) {
                        super._burn(to,amount);
                    }else{
                        if(_white1Mapping[to] || _white2Mapping[to]){
                            
                        }else{
                            buyFee(to,amount);
                        }
                    }
                }
            }
            _swapping = false;
        }else if(!_swapping && (to == _uniswapV2PairAddress)){
            _swapping = true;
            
            if(!_white1Mapping[from]){
                amount = saleFee(from,amount);      
            }
            super._transfer(from, to, amount);

            _swapping = false;
        }else{
            if(!_swapping && !_white1Mapping[from]){
                _swapping = true;

                amount = saleFee(from,amount);

                _swapping = false;  
            }
            super._transfer(from, to, amount);
        }

        if(_fromAddress == address(0)) _fromAddress = from;
        if(_toAddress == address(0)) _toAddress = to;  
        if(_fromAddress != _uniswapV2PairAddress && !isDividendExempt[_fromAddress]  )   try _dividendTracker.setShare(_fromAddress) {} catch {}
        if(_toAddress != _uniswapV2PairAddress && !isDividendExempt[_toAddress] ) try _dividendTracker.setShare(_toAddress) {} catch {}
        _fromAddress = from;
        _toAddress = to;

        if(!_swapping &&
            _dividendTracker.LPRewardLastSendTime().add(_dividendMinPeriod) <= block.timestamp
        ) {
             _swapping = true;
            try _dividendTracker.process(_distributorGas) {} catch {} 
             _swapping = false;   
        }
     }

    function buyFee(address addr , uint256 amount) private {

        uint256 lpRewardAmount = amount.mul(_buyLpRewardFee).div(100);
        uint256 fundAndMarkFee = amount.mul(_buyFundAndMarkFee).div(100);

        super._transfer(addr, address(_dividendTracker) ,lpRewardAmount);
        super._transfer(addr, address(_markAndFund) ,fundAndMarkFee);
    }

    function saleFee(address addr , uint256 amount)  private returns(uint256 amountAfter){
        amountAfter = amount;

        uint256 lpRewardAmount = amount.mul(_saleLpRewardFee).div(100);
        uint256 fundAndMarkFee = amount.mul(_saleFundAndMarkFee).div(100);
        uint256 destroyAmount = amount.mul(_saleDestoryFee).div(100);

        super._transfer(addr, address(_dividendTracker) ,lpRewardAmount);
        super._transfer(addr, address(_markAndFund) ,fundAndMarkFee);
        super._transfer(addr, _destoryAddress ,destroyAmount);

        amountAfter = amountAfter.sub(lpRewardAmount);
        amountAfter = amountAfter.sub(fundAndMarkFee);
        amountAfter = amountAfter.sub(destroyAmount);

        _markAndFund.swap(_fundAddress,_markAddress,_fundFee);
    }
}