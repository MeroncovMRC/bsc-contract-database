// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CPIToken {
    string public name = "CPI Token";
    string public symbol = "CPI";
    uint8 public decimals = 18;
    uint256 public totalSupply = 100000000 * 10**uint256(decimals);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public buyTaxPercentage = 1;
    uint256 public sellTaxPercentage = 1;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "Invalid sender address");
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 buyTax = 0;
        uint256 sellTax = 0;

        if (sender != address(this)) {
            // Check if it's a buy or transfer from the contract
            buyTax = (msg.sender == address(this)) ? (amount * buyTaxPercentage) / 100 : 0;
        }

        if (recipient != address(this)) {
            // Check if it's a sell or transfer to the contract
            sellTax = (recipient == address(this)) ? (amount * sellTaxPercentage) / 100 : 0;
        }

        uint256 tokensToTransfer = amount - buyTax - sellTax;

        balanceOf[sender] -= amount;
        balanceOf[recipient] += tokensToTransfer;

        emit Transfer(sender, recipient, tokensToTransfer);
        if (buyTax > 0) {
            emit Transfer(address(this), address(0), buyTax);
        }
        if (sellTax > 0) {
            emit Transfer(recipient, address(this), sellTax);
        }
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        require(amount <= allowance[sender][msg.sender], "Allowance exceeded");
        allowance[sender][msg.sender] -= amount;
        _transfer(sender, recipient, amount);
        return true;
    }
}