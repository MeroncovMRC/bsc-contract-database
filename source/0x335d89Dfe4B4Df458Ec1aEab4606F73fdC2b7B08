pragma solidity >=0.4.21 <0.6.0;

contract ESmartCode {
  //ownership
  address public owner;
  mapping(string => string) private idHash;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  event IdHashRecorded(string id, string hash);

  constructor() public {
      owner = msg.sender;
  }

  modifier onlyOwner() {
      require(msg.sender == owner, "Only the owner can call this function");
      _;
  }

  function recordIdHash(string memory _id, string memory _hash) public onlyOwner {
      idHash[_id] = _hash;
      emit IdHashRecorded(_id, _hash);
  }

  function transferOwnership(address newOwner) public onlyOwner {
      require(newOwner != address(0), "Cannot transfer ownership to zero address");
      emit OwnershipTransferred(owner, newOwner);
      owner = newOwner;
  }

  function getIdHash(string memory _id) public view returns (string memory) {
      return idHash[_id];
  }
}