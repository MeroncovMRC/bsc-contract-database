pragma solidity ^0.8.1;

contract ZXCV {
    string public name     = "Keyboard Token";
    string public symbol   = "ZXCV";
    uint   public totalSupply = 100_000_000 * 10**18;
    uint8  public decimals = 18;

    event  Approval(address indexed src, address indexed guy, uint wad);
    event  Transfer(address indexed src, address indexed dst, uint wad);

    mapping (address => uint)                       public  balanceOf;
    mapping (address => mapping (address => uint))  public  allowance;

    constructor() payable {
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function approve(address guy, uint wad) public returns (bool) {
        allowance[msg.sender][guy] = wad;
        emit Approval(msg.sender, guy, wad);
        return true;
    }

    function transfer(address dst, uint wad) public returns (bool) {
        return _transfer(msg.sender, dst, wad);
    }

    function transferFrom(address src, address dst, uint wad) external returns (bool) {
        return _transfer(src, dst, wad);
    }

    function _transfer(address src, address dst, uint wad) internal returns(bool) {
        require(balanceOf[src] >= wad);

        if (src != msg.sender && allowance[src][msg.sender] != type(uint).max) {
            allowance[src][msg.sender] -= wad;
        }

        unchecked {
            balanceOf[src] -= wad; 
        }
        balanceOf[dst] += wad;

        emit Transfer(src, dst, wad);

        return true;
    }
}