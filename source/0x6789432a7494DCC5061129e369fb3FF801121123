{"Address.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\nlibrary Address {\r\n\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IXUSD.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * Exempt Surge Interface\r\n */\r\ninterface IXUSD is IERC20 {\r\n    function sell(uint256 amount) external;\r\n    function getUnderlyingAsset() external returns(address);\r\n    function stakeUnderlyingAsset(uint256 numTokens) external returns(bool);\r\n    function stakeUnderlyingAsset(address recipient, uint256 numTokens) external returns (bool);\r\n    function eraseHoldings(uint256 nHoldings) external;\r\n    function transferOwnership(address newOwner) external;\r\n    function volumeFor(address wallet) external view returns (uint256);\r\n    function calculatePrice() external view returns (uint256);\r\n}"},"IXUSDFarm.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * xUSD Farm\r\n */\r\ninterface IXUSDFarm {\r\n    function deposit(uint256 amountXUSD) external;\r\n    function depositPairing(uint256 amountPairing) external;\r\n}"},"IXUSDFarmManager.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * xUSD Farm Manager\r\n */\r\ninterface IXUSDFarmManager {\r\n    function deposit(uint256 amountXUSD) external;\r\n    function claim() external;\r\n}"},"ReentrantGuard.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"XUSDFarm.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./ReentrantGuard.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IXUSD.sol\";\r\nimport \"./IXUSDFarmManager.sol\";\r\nimport \"./IXUSDFarm.sol\";\r\n\r\n/**\r\n *\r\n * xUSD-BNB Farm Contract\r\n * Developed by DeFi Mark\r\n *\r\n */\r\ncontract XUSDFarm is ReentrancyGuard, IERC20, IXUSDFarm {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    // xUSD\r\n    address constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address constant DEX = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address constant xUSD = 0x254246331cacbC0b2ea12bEF6632E4C6075f60e2;\r\n    \r\n    // Farm\r\n    IXUSDFarmManager public FarmManager;\r\n    \r\n    // precision factor\r\n    uint256 constant precision = 10**36;\r\n    \r\n    // Total Dividends Per Farm\r\n    uint256 dividendsPerToken;\r\n    \r\n    // Total Rewards Given\r\n    uint256 _totalRewards;\r\n    \r\n    // Liquidity Pool Address for xUSD + BNB\r\n    address immutable pair;\r\n    \r\n    // Router\r\n    IUniswapV2Router02 router;\r\n    \r\n    // BNB -\u003e xUSD\r\n    address[] path;\r\n    \r\n    // BUSD -\u003e BNB\r\n    address[] busdBNBPath;\r\n    \r\n    // Contract To Buy And Burn XUSD With LP Tokens Received\r\n    address public liquidityBuyAndBurner = 0xB4B91605947d056167a5221C9876bb70337aa048;\r\n    \r\n    // if withdrawal occurs before lock period\r\n    uint256 public earlyFee = 95;\r\n    \r\n    // 3 days\r\n    uint256 public lockTime = 86400;\r\n    \r\n    // 30 second intervals\r\n    uint256 claimWaitTime = 10;\r\n    \r\n    // Locker Structure \r\n    struct Locker {\r\n        uint256 tokensLocked;\r\n        uint256 timeLocked;\r\n        uint256 lastClaim;\r\n        uint256 totalExcluded;\r\n    }\r\n    \r\n    // Users -\u003e Lockers\r\n    mapping ( address =\u003e Locker ) lockers;\r\n    \r\n    // total reward claims\r\n    mapping ( address =\u003e uint256 ) totalClaims;\r\n    \r\n    // total locked across all lockers\r\n    uint256 totalLocked;\r\n    \r\n    // disables BNB Receive logic\r\n    bool receiveDisabled;\r\n    bool refundEnabled;\r\n    bool masterDisable;\r\n    \r\n    // Ownership\r\n    address _owner;\r\n    modifier onlyOwner(){require(_owner == msg.sender, \u0027Only Owner\u0027); _;}\r\n    \r\n    constructor() {\r\n        \r\n        router = IUniswapV2Router02(DEX);\r\n        FarmManager = IXUSDFarmManager(0xA874E63A5288A98f1ed2EbbF8653acDC9ee3e910);\r\n        \r\n        pair = IUniswapV2Factory(router.factory()).getPair(xUSD, router.WETH());\r\n        path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = xUSD;\r\n        \r\n        busdBNBPath = new address[](2);\r\n        busdBNBPath[0] = BUSD;\r\n        busdBNBPath[1] = router.WETH();\r\n        \r\n        _owner = msg.sender;\r\n        refundEnabled = true;\r\n    }\r\n    \r\n    \r\n    function totalSupply() external view override returns (uint256) { return totalLocked; }\r\n    function balanceOf(address account) public view override returns (uint256) { return lockers[account].tokensLocked; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return balanceOf(holder) + balanceOf(spender); }\r\n    function name() public pure override returns (string memory) {\r\n        return \"FARM: BNB-xUSD\";\r\n    }\r\n    function symbol() public pure override returns (string memory) {\r\n        return \"BNB-xUSD FARM\";\r\n    }\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function approve(address spender, uint256 amount) public view override returns (bool) {\r\n        return lockers[msg.sender].tokensLocked \u003e= amount \u0026\u0026 spender != msg.sender;\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        // ensure claim requirements\r\n        if (recipient == address(this)) {\r\n            _reinvestEarnings(msg.sender);\r\n        } else {\r\n            _makeClaim(recipient);\r\n        }\r\n        return true || amount \u003e 0;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (recipient == address(this)) {\r\n            _reinvestEarnings(msg.sender);\r\n        } else {\r\n            _makeClaim(recipient);\r\n        }\r\n        return true || amount \u003e 0 || sender == recipient;\r\n    }\r\n    \r\n    \r\n    ///////////////////////////////////\r\n    //////    OWNER FUNCTIONS   ///////\r\n    ///////////////////////////////////\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setFarmManager(address newManager) external onlyOwner {\r\n        FarmManager = IXUSDFarmManager(newManager);\r\n    }\r\n    \r\n    function setLockTime(uint256 newTime) external onlyOwner {\r\n        lockTime = newTime;\r\n    }\r\n    \r\n    function setClaimWaitTime(uint256 newTime) external onlyOwner {\r\n        claimWaitTime = newTime;\r\n    }\r\n    \r\n    function setLiquidityBuyAndBurner(address newBurner) external onlyOwner {\r\n        liquidityBuyAndBurner = newBurner;\r\n    }\r\n    \r\n    function setRefundEnabled(bool enabled) external onlyOwner {\r\n        refundEnabled = enabled;\r\n    }\r\n    \r\n    function setMasterDisable(bool masterDisabled) external onlyOwner {\r\n        masterDisable = masterDisabled;\r\n    }\r\n    \r\n    function withdraw(bool bnb, address token, uint256 amount, address recipient) external onlyOwner {\r\n        if (bnb) {\r\n            require(address(this).balance \u003e= amount, \u0027Zero BNB\u0027);\r\n            (bool s,) = payable(recipient).call{value: amount}(\"\");\r\n            require(s, \u0027ERR BNB Withdrawal\u0027);\r\n        } else {\r\n            require(token != pair, \u0027ERR No LP Tokens\u0027);\r\n            IERC20(token).transfer(recipient, amount);\r\n        }\r\n    }\r\n    \r\n    \r\n    ///////////////////////////////////\r\n    //////   PUBLIC FUNCTIONS   ///////\r\n    ///////////////////////////////////\r\n\r\n    function deposit(uint256 amountXUSD) external override {\r\n        _deposit(amountXUSD);\r\n    }\r\n    \r\n    function depositPairing(uint256 amountXUSD) external override {\r\n        _deposit(amountXUSD);\r\n    }\r\n    \r\n    function _deposit(uint256 amount) internal {\r\n        uint256 received = _transferIn(xUSD, amount);\r\n        dividendsPerToken += received.mul(precision).div(totalLocked);\r\n        _totalRewards += received;\r\n    }\r\n    \r\n    function claimReward() external nonReentrant {\r\n        _makeClaim(msg.sender);      \r\n    }\r\n    \r\n    function claimRewardForUser(address user) external nonReentrant {\r\n        _makeClaim(user);\r\n    }\r\n    \r\n    function unlock(uint256 amount) external nonReentrant {\r\n        _unlock(msg.sender, msg.sender, amount, false);\r\n    }\r\n    \r\n    function unlockAll() external nonReentrant {\r\n        _unlock(msg.sender, msg.sender, lockers[msg.sender].tokensLocked, false);\r\n    }\r\n    \r\n    \r\n    function unstake(uint256 amount) external nonReentrant {\r\n        _unlock(msg.sender, msg.sender, amount, true);\r\n    }\r\n    \r\n    function unstakeAll() external nonReentrant {\r\n        _unlock(msg.sender, msg.sender, lockers[msg.sender].tokensLocked, true);\r\n    }\r\n    \r\n    function unstakeFor(uint256 amount, address recipient) external nonReentrant {\r\n        _unlock(msg.sender, recipient, amount, true);\r\n    }\r\n    \r\n    \r\n    function stakeLP(uint256 nLPTokens) external nonReentrant {\r\n        \r\n        uint256 balBefore = IERC20(pair).balanceOf(address(this));\r\n        \r\n        bool s = IERC20(pair).transferFrom(msg.sender, address(this), nLPTokens);\r\n        require(s, \u0027Failure on TransferFrom\u0027);\r\n        \r\n        uint256 received = IERC20(pair).balanceOf(address(this)).sub(balBefore);\r\n        require(received \u003c= nLPTokens, \u0027Failure On Transfer\u0027);\r\n        \r\n        _lock(msg.sender, received);\r\n    }\r\n    \r\n    function reinvestEarnings() external {\r\n        require(lockers[msg.sender].tokensLocked \u003e 0, \u0027Zero Tokens Locked\u0027);\r\n        _reinvestEarnings(msg.sender);\r\n    }\r\n    \r\n    ///////////////////////////////////\r\n    //////  INTERNAL FUNCTIONS  ///////\r\n    ///////////////////////////////////\r\n    \r\n    function _makeClaim(address user) internal {\r\n        // ensure claim requirements\r\n        require(lockers[user].tokensLocked \u003e 0, \u0027Zero Tokens Locked\u0027);\r\n        require(lockers[user].lastClaim + claimWaitTime \u003c= block.number, \u0027Not Claim Time\u0027);\r\n        \r\n        uint256 amount = pendingRewards(user);\r\n        require(amount \u003e 0,\u0027Zero Rewards\u0027);\r\n        _claimReward(user);\r\n    }\r\n    \r\n    function _claimReward(address user) internal {\r\n        \r\n        // claim dividends\r\n        try FarmManager.claim() {} catch {}\r\n        \r\n        if (lockers[user].tokensLocked == 0) return;\r\n        \r\n        uint256 amount = pendingRewards(user);\r\n        if (amount \u003e 0) {\r\n            // update claim stats \r\n            lockers[user].lastClaim = block.number;\r\n            totalClaims[user] += amount;\r\n            lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\r\n            // transfer tokens\r\n            bool s = IERC20(xUSD).transfer(user, amount);\r\n            require(s,\u0027Failure On Token Transfer\u0027);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function _transferIn(address token, uint256 amount) internal returns (uint256) {\r\n        uint256 before = IERC20(token).balanceOf(address(this));\r\n        \r\n        bool s = IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        \r\n        uint256 difference = IERC20(token).balanceOf(address(this)).sub(before);\r\n        require(s \u0026\u0026 difference \u003c= amount \u0026\u0026 difference \u003e 0, \u0027Err Transfer In\u0027);\r\n        return difference;\r\n    }\r\n    \r\n    function _pairAndLock(uint256 xUSDAmount, uint256 bnbAmount) internal {\r\n        \r\n        // balance of LP Tokens Before\r\n        uint256 lpBalanceBefore = IERC20(pair).balanceOf(address(this));\r\n        \r\n        // approve router to move tokens\r\n        IERC20(xUSD).approve(address(router), xUSDAmount);\r\n        \r\n        // check slippage\r\n        (uint256 minAmountXUSD, uint256 minBNB) = (xUSDAmount.mul(75).div(100), bnbAmount.mul(75).div(100));\r\n        \r\n        // Disable Receive \r\n        receiveDisabled = true;\r\n        \r\n        // Calculated Expected Amounts After LP Pairing\r\n        uint256 expectedXUSD = IERC20(xUSD).balanceOf(address(this)).sub(xUSDAmount, \u0027ERR XUSD Amount\u0027);\r\n        uint256 expectedBNB = address(this).balance.sub(bnbAmount, \u0027ERR BNB Amount\u0027);\r\n        \r\n        // add liquidity\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            xUSD,\r\n            xUSDAmount,\r\n            minAmountXUSD,\r\n            minBNB,\r\n            address(this),\r\n            block.timestamp.add(30)\r\n        );\r\n        \r\n        // Re Enable Receive\r\n        receiveDisabled = false;\r\n        \r\n        // Track Balances After Liquidity Pairing \r\n        uint256 xusdAfter = IERC20(xUSD).balanceOf(address(this));\r\n        uint256 bnbAfter = address(this).balance;\r\n\r\n        // Note LP Tokens Received\r\n        uint256 lpReceived = IERC20(pair).balanceOf(address(this)).sub(lpBalanceBefore);\r\n        require(lpReceived \u003e 0, \u0027Zero LP Received\u0027);\r\n        \r\n        // Lock LP Tokens Received\r\n        _lock(msg.sender, lpReceived);\r\n        \r\n        if (refundEnabled) {\r\n            if (xusdAfter \u003e expectedXUSD) {\r\n                uint256 diff = xusdAfter.sub(expectedXUSD);\r\n                IERC20(xUSD).transfer(msg.sender, diff);\r\n            }\r\n        \r\n            if (bnbAfter \u003e expectedBNB) {\r\n                uint256 diff = bnbAfter.sub(expectedBNB);\r\n                (bool s,) = payable(msg.sender).call{value: diff}(\"\");\r\n                require(s, \u0027ERR BNB Transfer\u0027);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _stakeXUSD() internal {\r\n        \r\n        // balance of xUSD before purchase\r\n        uint256 before = IERC20(xUSD).balanceOf(address(this));\r\n        \r\n        // divvy up BNB\r\n        uint256 xUSDValue = msg.value.mul(5075).div(10000);\r\n        uint256 stakeValue = msg.value.sub(xUSDValue);\r\n        \r\n        // purchase xUSD with half the BNB\r\n        (bool s,) = payable(xUSD).call{value: xUSDValue}(\"\");\r\n        require(s, \u0027Failure on xUSD Purchase\u0027);\r\n        \r\n        // xUSD Received from  purchase\r\n        uint256 received = IERC20(xUSD).balanceOf(address(this)).sub(before);\r\n        require(received \u003e 0, \u0027Too Few Surge Received\u0027);\r\n        \r\n        // burn supply to keep up with mint fee\r\n        uint256 burnAmount = received.mul(75).div(10**4);\r\n        IERC20(xUSD).transfer(xUSD, burnAmount);\r\n        \r\n        // Pair + Lock Liquidity For Token Pair\r\n        uint256 pairAmount = received.sub(burnAmount);\r\n        _pairAndLock(pairAmount, stakeValue);\r\n    }\r\n    \r\n    function stakeInXUSD(uint256 amountXUSD) external payable {\r\n        \r\n        // xUSD received from purchase\r\n        uint256 received = _transferIn(xUSD, amountXUSD);\r\n        require(received \u003e 0, \u0027Too Few Surge Received\u0027);\r\n        \r\n        // Pair + Lock Liquidity For Token Pair\r\n        _pairAndLock(received, msg.value);\r\n    }\r\n\r\n    \r\n    function _lock(address user, uint256 lpReceived) private {\r\n        \r\n        if (lockers[user].tokensLocked \u003e 0) {\r\n            _claimReward(user);\r\n        }\r\n        \r\n        // add locker data\r\n        lockers[user].tokensLocked += lpReceived;\r\n        lockers[user].timeLocked = block.number;\r\n        lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\r\n        \r\n        // increment total locked\r\n        totalLocked += lpReceived;\r\n        \r\n        emit Locked(user, lpReceived, block.number + lockTime);\r\n        emit Transfer(address(0), user, lpReceived);\r\n    }\r\n\r\n    function _unlock(address user, address lpRecipient, uint256 nTokens, bool removeLiquidity) private {\r\n        \r\n        // Ensure Lock Requirements\r\n        require(lockers[user].tokensLocked \u003e 0, \u0027Zero Tokens Locked\u0027);\r\n        require(lockers[user].tokensLocked \u003e= nTokens, \u0027Insufficient Tokens\u0027);\r\n        \r\n        bool takeLeaveEarlyFee = (lockers[user].timeLocked + lockTime) \u003e block.number;\r\n        \r\n        if (lockers[user].tokensLocked \u003e 0) {\r\n            _claimReward(user);\r\n        }\r\n        \r\n        // update storage\r\n        if (lockers[user].tokensLocked == nTokens) {\r\n            delete lockers[user]; // Free Storage\r\n        } else {\r\n            lockers[user].tokensLocked = lockers[user].tokensLocked.sub(nTokens); // decrement amount locked\r\n            lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\r\n        }\r\n        \r\n        // Update Total Locked\r\n        totalLocked = totalLocked.sub(nTokens);\r\n        \r\n        uint256 sendTokens = takeLeaveEarlyFee ? nTokens.mul(earlyFee).div(100) : nTokens;\r\n        require(sendTokens \u003e 0, \u0027Zero Send Amount\u0027);\r\n        \r\n        if (removeLiquidity) {\r\n            // Remove LP Send To User\r\n            _removeLiquidity(sendTokens, lpRecipient);\r\n        } else {\r\n            // Transfer LP Tokens To User\r\n            bool s = IERC20(pair).transfer(lpRecipient, sendTokens);\r\n            require(s, \u0027Failure on LP Token Transfer\u0027);\r\n        }\r\n        \r\n        if (takeLeaveEarlyFee) {\r\n            uint256 dif = nTokens.sub(sendTokens);\r\n            if (dif \u003e 0) {\r\n                IERC20(pair).transfer(liquidityBuyAndBurner, dif);\r\n            }\r\n        }\r\n\r\n        // tell Blockchain\r\n        emit Unlocked(user, nTokens);\r\n        emit Transfer(user, address(0), nTokens);\r\n    }\r\n    \r\n    function _removeLiquidity(uint256 nLiquidity, address recipient) private {\r\n        \r\n        IERC20(pair).approve(address(router), 2*nLiquidity);\r\n        \r\n        router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            xUSD,\r\n            nLiquidity,\r\n            0,\r\n            0,\r\n            recipient,\r\n            block.timestamp.add(30)\r\n        );\r\n        \r\n    }\r\n    \r\n    /** Reinvests XUSD Rewards Back Into The Farm */\r\n    function _reinvestEarnings(address user) internal {\r\n        \r\n        // claim dividends\r\n        try FarmManager.claim() {} catch {}\r\n\r\n        uint256 amount = pendingRewards(user);\r\n        require(amount \u003e 0, \u0027Zero Rewards Pending\u0027);\r\n            \r\n        // optimistically set storage\r\n        lockers[user].lastClaim = block.number;\r\n        totalClaims[user] += amount;\r\n        lockers[user].totalExcluded = currentDividends(lockers[user].tokensLocked);\r\n            \r\n        // split XUSD Amount in half\r\n        uint256 half = amount.div(2);\r\n        uint256 pairHalf = amount.sub(half);\r\n            \r\n        // sell half for BUSD\r\n        uint256 busdBefore = IERC20(BUSD).balanceOf(address(this));\r\n        IXUSD(xUSD).sell(half);\r\n        uint256 received = IERC20(BUSD).balanceOf(address(this)).sub(busdBefore);\r\n            \r\n        // convert BUSD into BNB\r\n        IERC20(BUSD).approve(address(router), received);\r\n        uint256 before = address(this).balance;\r\n        receiveDisabled = true;\r\n        router.swapExactTokensForETH(\r\n            received,\r\n            0,\r\n            busdBNBPath,\r\n            address(this),\r\n            block.timestamp + 30\r\n        );\r\n        receiveDisabled = false;\r\n        uint256 bnbReceived = address(this).balance.sub(before);\r\n            \r\n        // Pair BNB Received with other half of XUSD\r\n        _pairAndLock(pairHalf, bnbReceived);\r\n        \r\n    }\r\n    \r\n    ///////////////////////////////////\r\n    //////    READ FUNCTIONS    ///////\r\n    ///////////////////////////////////\r\n    \r\n    function getTotalQuantitiesInLP() public view returns (uint256, uint256) {\r\n        return (IERC20(xUSD).balanceOf(pair), IERC20(router.WETH()).balanceOf(pair));\r\n    }\r\n    \r\n    function getRedeemableValue(address user) external view returns (uint256, uint256) {\r\n        (uint256 usd, uint256 bnb) = getTotalQuantitiesInLP();\r\n        uint256 share = getLPShareForHolder(user);\r\n        \r\n        return (share.mul(usd).div(precision),share.mul(bnb).div(precision));\r\n    }\r\n    \r\n    function getLPShareForHolder(address user) public view returns (uint256) {\r\n        return lockers[user].tokensLocked.mul(precision).div(IERC20(pair).totalSupply());\r\n    }\r\n    \r\n    function getTimeUntilUnlock(address user) external view returns (uint256) {\r\n        uint256 endTime = lockers[user].timeLocked + lockTime;\r\n        return endTime \u003e block.number ? endTime.sub(block.number) : 0;\r\n    }\r\n    \r\n    function getTimeUntilNextClaim(address user) external view returns (uint256) {\r\n        uint256 endTime = lockers[user].lastClaim + claimWaitTime;\r\n        return endTime \u003e block.number ? endTime.sub(block.number) : 0;\r\n    }\r\n    \r\n    function currentDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerToken).div(precision);\r\n    }\r\n    \r\n    function pendingRewards(address user) public view returns (uint256) {\r\n        uint256 amount = lockers[user].tokensLocked;\r\n        if(amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = currentDividends(amount);\r\n        uint256 shareholderTotalExcluded = lockers[user].totalExcluded;\r\n\r\n        if(shareholderTotalDividends \u003c= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n    \r\n    function totalRewardsClaimedForUser(address user) external view returns (uint256) {\r\n        return totalClaims[user];\r\n    }\r\n    \r\n    function totalRewards() external view returns (uint256) {\r\n        return _totalRewards;\r\n    }\r\n    \r\n    function calculateUserLPBalance(address user) external view returns (uint256) {\r\n        return IERC20(pair).balanceOf(user);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(!masterDisable, \u0027Master Disabled\u0027);\r\n        if (receiveDisabled || msg.sender == DEX || msg.sender == pair) {\r\n            return;\r\n        }\r\n        _stakeXUSD();\r\n    }\r\n    \r\n    event Locked(address staker, uint256 numTokens, uint256 blockUnlocked);\r\n    event Unlocked(address staker, uint256 tokensRedeemed);\r\n    event RewardClaimed(address user, uint256 amountClaimed);\r\n\r\n}"}}