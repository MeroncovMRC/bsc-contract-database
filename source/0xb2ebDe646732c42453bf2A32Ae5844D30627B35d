// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.19;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract BabyKrakensBNBBuy is Ownable {

    address public bbksWallet;
    mapping(address => bool) private hasPurchased;
    mapping(address => bool) private hasReceived;

    mapping(address => uint) private purchaseAmountBNB;
    mapping(address => uint) private purchasePriceBBKS;

    event BBKSPurchase(address buyer, uint amountBNB, uint amountBBKS, uint priceBBKS);

    constructor (address bbks) {
        bbksWallet = bbks;
    }

    function getWalletInfo(address _wallet) public view returns (bool purchased, bool received, uint amountBNB, uint priceBBKS){
        purchased = hasPurchased[_wallet];
        received = hasReceived[_wallet];
        amountBNB = purchaseAmountBNB[_wallet];
        priceBBKS = purchasePriceBBKS[_wallet];
    }

    function setBbksWallet(address newAddress) public onlyOwner {
        bbksWallet = newAddress;
    }

    function setReceived(address _wallet) public onlyOwner {
        hasReceived[_wallet] = true;
    }

    function purchase(uint price) public payable {
        require(!hasPurchased[_msgSender()], "This address has already purchased");

        (bool sent, bytes memory data) = payable(bbksWallet).call{value: msg.value}("");
        require(sent, "Failed to send BNB");

        hasPurchased[_msgSender()] = true;
        purchaseAmountBNB[_msgSender()] = msg.value;
        purchasePriceBBKS[_msgSender()] = price;

        emit BBKSPurchase(_msgSender(), msg.value, 100, price);
    }

}