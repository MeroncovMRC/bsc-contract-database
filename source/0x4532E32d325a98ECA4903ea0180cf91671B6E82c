// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract MyContract {
    address public owner;
    uint public transactionFeeRate;  // 交易费率，单位是百分比
    uint public loanInterestRate;  // 贷款利息率，单位是百分比
    uint public miningDifficulty;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function.");
        _;
    }

    constructor() {
        owner = msg.sender;  // 设置部署者为合约的所有者
    }

    // 极高风险：直接操作用户资产的函数
    // ETH 转账
    function transferETH(uint _amount) external onlyOwner {
        uint fee = _amount * transactionFeeRate / 100;  // 计算交易费
        uint totalAmount = _amount;  // 计算需要的总金额（包括费用）

        require(address(this).balance >= totalAmount, "Insufficient contract balance.");
        
        payable(owner).transfer(_amount);  // 转账给目标地址
    }

    // 极高风险：直接操作用户资产的函数
    // ERC20 转账
    function transferERC20(IERC20 _token, address _to, uint _amount) external onlyOwner {
        uint fee = _amount * loanInterestRate / 100;  // 计算贷款利息
        uint totalAmount = _amount + fee;  // 计算需要的总金额（包括利息）

        uint balance = _token.balanceOf(address(this));
        require(balance >= totalAmount, "Insufficient contract balance.");

        _token.transfer(_to, _amount);  // 转账给目标地址
        _token.transfer(owner, fee);  // 转账利息给合约所有者
    }

    // 高风险：间接影响用户资产的函数
    function setTransactionFeeRate(uint _rate) external onlyOwner {
        transactionFeeRate = _rate;
    }

    // 高风险：间接影响用户资产的函数
    function setLoanInterestRate(uint _rate) external onlyOwner {
        loanInterestRate = _rate;
    }

    // 中风险：直接影响合约关键规则的函数
    function setMiningDifficulty(uint _difficulty) external onlyOwner {
        miningDifficulty = _difficulty;
    }

    // 低风险：读取类函数
    function getBalance() public view onlyOwner returns (uint) {
        return address(this).balance;
    }
}