// SPDX-License-Identifier: MIT

pragma solidity ^0.6.12;
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) public {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

contract PumpIT is ERC20, Ownable {
    using SafeMath for uint256;

    bool private swapping;

    bool public isTradingEnabled;
    bool public isFeeDisabled;
    bool public instantReleaseEnabled;

    uint256 public startTime;
    uint256 public maxTxEnforceTime = 14 days;

    uint256 public maxWalletSize = 72 * 10**8 * (10**18); //1% of total supply
    uint256 public maxSellAmt = 36 * 10**7 * (10**18);
    uint256 public maxBuyAmt = 72 * 10**5 * (10**18);

    uint256 public swapTokensAtAmount = 144 * 10**5 * (10**18); // 0.002% of total supply

    IUniswapV2Router02 public uniswapV2Router;
    address public immutable uniswapV2Pair;

    mapping (address => bool) private _isExcluded;

    uint256 public buybackBuyFee;
    uint256 public liquidityBuyFee;
    uint256 public marketingBuyFee;
    uint256 public totalBuyFees;

    uint256 public buybackSellFee;
    uint256 public liquiditySellFee;
    uint256 public marketingSellFee;
    uint256 public totalSellFees;

    uint256 public buybackTokens;
    uint256 public liquidityTokens;
    uint256 public marketingTokens;

    address payable constant buybackWallet = 0x550C4eB48d912fe57908B7B4463A54410Fca7A03;
    address payable constant marketingWallet = 0x8959b04505393645422F0A6509EAEF8f941Ad67c;
    address payable constant presaleWallet = 0x556E372c9BB852358bbc21724C281717Ce14f091;
    address constant deadAddress = 0x000000000000000000000000000000000000dEaD;
    address constant foundersWallet = 0xc87c535cbc1d564DFc9e3582362c4270E2ACf9c7;
    address constant communityWallet = 0x56c7Cb4bBdaa6F1ec1F78d2d062C9Eb1aAe5B603;
    address constant exchangeWallet = 0x8317c15C7C34a552B3ffbeF18653e705aC15C60C;
    address constant devWallet = 0xAD2490e03ECC837ae4fF862353a6FC3843a0F681;
    address constant pancakeswapWallet = 0x7971BdEDDff681aD35bB11904c8F214e68eddAbc;

    struct Beneficiary {
        uint256 startTime;
        uint256 vestDuration;
        uint256 vestPeriod;
        uint256 amountLocked;
        uint256 amountReleased;
    }

    address[] public bfList;

    mapping(address => Beneficiary) private beneficiaries;

    event TokensReleased(address token, uint256 amount);
    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);


    constructor() public ERC20("PumpIT", "PumpIT") {
    	IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;

        _isExcluded[owner()] = true;
        _isExcluded[address(this)] = true;
        _isExcluded[presaleWallet] = true;
        _isExcluded[buybackWallet] = true;
        _isExcluded[marketingWallet] = true;
        _isExcluded[foundersWallet] = true;
        _isExcluded[devWallet] = true;
        _isExcluded[deadAddress] = true;
        _isExcluded[communityWallet] = true;
        _isExcluded[exchangeWallet] = true;
        _isExcluded[pancakeswapWallet] = true;
        _isExcluded[0xe82440F8466DC5E478b8c633Fd116112D32E61E9] = true;

        buybackBuyFee = 500;
        liquidityBuyFee;
        marketingBuyFee;
        totalBuyFees = 500;

        buybackSellFee = 800;
        liquiditySellFee = 500;
        marketingSellFee = 700;
        totalSellFees = 2000;

        _mint(address(this), 72 * 10**10 * (10**18));
        // Founder's Wallet
        addBeneficiary(foundersWallet, block.timestamp, 390 days, 90 days, 432 * 10**8 * (10**18)); //6%
        // Dev Wallet
        addBeneficiary(devWallet, block.timestamp, 360 days, 90 days, 36 * 10**9 * (10**18)); //5%
        // Marketing Wallet
        super._transfer(address(this), marketingWallet, 36 * 10**9 * (10**18)); //5%
        // Presale Wallet
        super._transfer(address(this), presaleWallet, 72 * 10**9 * (10**18)); // 10%
        // Community Wallet
        addBeneficiary(communityWallet, block.timestamp, 600 days, 30 days, 108 * 10**9 * (10**18)); // 15%
        // Burn Wallet
        addBeneficiary(deadAddress, 1649030400, ~uint(0), 30 days, 144 * 10**9 * (10**18)); // 20%
        // Pancakeswap Wallet
        super._transfer(address(this), pancakeswapWallet, 36 * 10**9 * (10**18)); // 5%
        // Exchange Wallet
        super._transfer(address(this), exchangeWallet, 2448 * 10**8 * (10**18)); // 34%
    }

    receive() external payable {

  	}

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0) && to != address(0));

        if(amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (!isTradingEnabled) {
            require(_isExcluded[to] || _isExcluded[from], "Trading is not yet enabled. Be patient!");
            if (to == uniswapV2Pair) {
                isTradingEnabled = true;
                startTime = block.timestamp;
            }
        } else if (!_isExcluded[to] && !_isExcluded[from]) {
            if (block.timestamp.sub(startTime) < maxTxEnforceTime) {
                if (to == uniswapV2Pair) {
                    require(amount <= maxSellAmt, "Over the max sell amount."); //0.05% of total supply
                } else if (from == uniswapV2Pair) {
                    require(amount <= maxBuyAmt, "Over the max buy amount."); //0.1% of total supply
                }
            }
            if (to != address(uniswapV2Router) && to != uniswapV2Pair) {
                require(balanceOf(to) + amount <= maxWalletSize, "Transfer amount too high. Cannot exceed max wallet size.");
            }
        }

        bool canSwap = buybackTokens.add(liquidityTokens).add(marketingTokens) >= swapTokensAtAmount;

        if (
            canSwap &&
            !swapping &&
            from != uniswapV2Pair &&
            from != owner() &&
            to != owner()
        ) {

            swapping = true;

            swapAndLiquify(liquidityTokens);
            swapAndSendDividends(buybackTokens.add(marketingTokens));

            swapping = false;
        }

        bool takeFee = !swapping;

        if(_isExcluded[from] || _isExcluded[to] || isFeeDisabled) {
            takeFee = false;
        }

        if(takeFee) {
            uint256 buyback;
            uint256 liquidity;
            uint256 marketing;
            uint256 fees;
            if (to == uniswapV2Pair) { //sell
                buyback = amount.mul(buybackSellFee).div(10000);
                liquidity = amount.mul(liquiditySellFee).div(10000);
                marketing = amount.mul(marketingSellFee).div(10000);
            } else if (from == uniswapV2Pair) { //buy
                buyback = amount.mul(buybackBuyFee).div(10000);
                liquidity = amount.mul(liquidityBuyFee).div(10000);
                marketing = amount.mul(marketingBuyFee).div(10000);
            }
            buybackTokens = buybackTokens.add(buyback);
            liquidityTokens = liquidityTokens.add(liquidity);
            marketingTokens = marketingTokens.add(marketing);
            fees = buyback.add(liquidity).add(marketing);

            amount = amount.sub(fees);
            super._transfer(from, address(this), fees);
        }
        super._transfer(from, to, amount);

        if (instantReleaseEnabled) {
            releaseAll();
        }

    }

    function swapAndLiquify(uint256 tokens) private {
        uint256 half = tokens.div(2);
        uint256 otherHalf = tokens.sub(half);
        uint256 initialBalance = address(this).balance;
        liquidityTokens = 0;
        swapTokensForEth(half);
        uint256 newBalance = address(this).balance.sub(initialBalance);
        addLiquidity(otherHalf, newBalance);
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );

    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            deadAddress,
            block.timestamp
        );
    }

    function swapAndSendDividends(uint256 tokens) private {
        swapTokensForEth(tokens);
        uint256 buyback = (address(this).balance).mul(buybackTokens).div(buybackTokens.add(marketingTokens));
        uint256 marketing = (address(this).balance).sub(buyback);
        buybackTokens = 0;
        marketingTokens = 0;
        buybackWallet.transfer(buyback);
        marketingWallet.transfer(marketing);
    }

    function releaseAll() public {
        uint256 len = bfList.length;
        for (uint256 i = 0; i < len; i++){
            Beneficiary storage bf = beneficiaries[bfList[i]];
            if (bf.amountLocked > bf.amountReleased) {
                release(bfList[i]);
            }
            if (bf.amountLocked == bf.amountReleased) {
                bf.amountLocked = 0;
                bf.amountReleased = 0;
                bfList[i] = bfList[bfList.length - 1];
                bfList.pop();
                len = bfList.length;
                --i;
            }
        }
    }

    function release(address beneficiary) public {
        Beneficiary storage bf = beneficiaries[beneficiary];

        uint256 vestedAmount;
        if (block.timestamp >= bf.startTime) {
              if (beneficiary == deadAddress) {
                uint lockedAmount = bf.amountLocked;
                vestedAmount = lockedAmount.mul(400).div(1000);
                lockedAmount = lockedAmount.sub(vestedAmount);
                uint totalPeriods = (block.timestamp.sub(bf.startTime)).div(bf.vestPeriod);
                for (uint256 i = 0; i < totalPeriods; i++) {
                    uint periodAmount = lockedAmount.mul(100).div(1000);
                    vestedAmount = vestedAmount.add(periodAmount);
                    lockedAmount = lockedAmount.sub(periodAmount);
                }
            } else if (block.timestamp >= bf.startTime.add(bf.vestDuration)) {
                vestedAmount = bf.amountLocked;
            } else if (beneficiary == foundersWallet || beneficiary == communityWallet) {
                    vestedAmount = bf.amountLocked.mul(block.timestamp.sub(bf.startTime)).mul(100).div((bf.vestPeriod).mul(1000));
            } else {
                vestedAmount = bf.amountLocked.mul(((block.timestamp.sub(bf.startTime)).div(bf.vestPeriod))).div(bf.vestDuration.div(bf.vestPeriod));
            }
        }

        uint256 unreleased = vestedAmount.sub(bf.amountReleased);

        if (unreleased > 0) {
            bf.amountReleased = bf.amountReleased.add(unreleased);
            super._transfer(address(this), beneficiary, unreleased);
            emit TokensReleased(beneficiary, unreleased);
        }

    }

    function releaseRemainingBurn() external onlyOwner {
        Beneficiary storage bf = beneficiaries[deadAddress];
        uint256 burnAmount = bf.amountLocked.sub(bf.amountReleased);
        bf.amountReleased = bf.amountLocked;
        super._transfer(address(this), deadAddress, burnAmount);
        emit TokensReleased(deadAddress, burnAmount);
    }

    function airdrop(address[] memory _user, uint256[] memory _amount) external {
        require(msg.sender == presaleWallet);
        uint256 len = _user.length;
        require(len == _amount.length);
        for (uint256 i = 0; i < len; i++) {
            super._transfer(_msgSender(), _user[i], _amount[i]);
        }
    }

    function airdropWithVesting(address[] memory _user, uint256[] memory _amount) external {
        require(msg.sender == presaleWallet);
        uint256 len = _user.length;
        require(len == _amount.length);
        for (uint256 i = 0; i < len; i++) {
            addBeneficiary(_user[i], block.timestamp, 28 days, 14 days, _amount[i]);
            super._transfer(_msgSender(), address(this), _amount[i]);
        }
    }

    function addExactLiquidity(uint256 tokenAmount) external payable {
        require(_isExcluded[msg.sender]);
        super._transfer(msg.sender, address(this), tokenAmount);
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.addLiquidityETH{value: msg.value}(
            address(this),
            tokenAmount,
            msg.value,
            tokenAmount,
            owner(),
            block.timestamp
        );
    }

    function addBeneficiary(address beneficiary, uint256 vestStartTime, uint256 vestDuration, uint256 vestPeriod, uint256 amountLocked) internal {
        if (beneficiaries[beneficiary].amountLocked == 0) {
            beneficiaries[beneficiary] = Beneficiary(vestStartTime, vestDuration, vestPeriod, amountLocked, 0);
            bfList.push(beneficiary);
        }
    }

    function extendVestingDuration(address beneficiary, uint256 timeInSeconds) external onlyOwner {
        Beneficiary storage bf = beneficiaries[beneficiary];
        bf.vestDuration = bf.vestDuration.add(timeInSeconds);
    }

    function setSwapAtAmount(uint256 amount) external onlyOwner {
        swapTokensAtAmount = amount;
    }

    function setFeeDisabled(bool toggle) external onlyOwner {
        isFeeDisabled = toggle;
    }

    function setInstantReleaseEnabled(bool toggle) external onlyOwner {
        instantReleaseEnabled = toggle;
    }

    function setMaxTxEnforceTime(uint256 daysInSeconds) external onlyOwner {
        maxTxEnforceTime = daysInSeconds;
    }

    function setMaxWalletSize(uint256 amount) external onlyOwner {
        maxWalletSize = amount;
    }

    function setMaxSellAmount(uint256 amount) external onlyOwner {
        maxSellAmt = amount;
    }

    function setMaxBuyAmount(uint256 amount) external onlyOwner {
        maxBuyAmt = amount;
    }

    function setSellFees(uint256 buyback, uint256 liquidity, uint256 marketing) external onlyOwner {
        uint256 total = buyback.add(liquidity).add(marketing);
        require(total <= 2000, "The total tax must be lower than 20%.");
        buybackSellFee = buyback;
        liquiditySellFee = liquidity;
        marketingSellFee = marketing;
        totalSellFees = total;
    }

    function setBuyFees(uint256 buyback, uint256 liquidity, uint256 marketing) external onlyOwner {
        uint256 total = buyback.add(liquidity).add(marketing);
        require(total <= 2000, "The total tax must be lower than 20%.");
        buybackBuyFee = buyback;
        liquidityBuyFee = liquidity;
        marketingBuyFee = marketing;
        totalBuyFees = total;
    }

    function transferOwnership(address newOwner) public override onlyOwner {
        _isExcluded[owner()] = false;
        _isExcluded[newOwner] = true;
        super.transferOwnership(newOwner);
    }

    function excludeFromRestrictions(address user, bool toggle) external onlyOwner {
        _isExcluded[user] = toggle;
    }

}