pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

interface IBEP20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract AirDrop {
    address private tokenAddress = 0x83F0Ba49a03A8Bd64459b544a4a030BFac20086C; // DirecciÃ³n del contrato del token M5 (BEP-20)
    IBEP20 private m5Token;
    address private owner;
    
    event TokensClaimed(address indexed user, uint256 amount);
    event BNBWithdrawn(address indexed recipient, uint256 amount);

    constructor() {
        m5Token = IBEP20(tokenAddress);
        owner = msg.sender;
    }

    function claimTokens() external payable {
        require(msg.value >= 0.001 ether, "Insufficient BNB payment"); // Se requiere un pago de al menos 0.001 BNB

        // Transfiere los tokens M5 desde el contrato al usuario
        require(m5Token.transfer(msg.sender, 10 * 10**18), "Token transfer failed"); // 10 M5 (con 18 decimales)

        emit TokensClaimed(msg.sender, 10); // Emite un evento para indicar que se han reclamado 10 tokens M5
    }
    
    function withdrawBNB() external {
        require(msg.sender == owner, "Only the contract owner can withdraw BNB");
        
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "Contract has no BNB balance");
        
        payable(msg.sender).transfer(contractBalance);
        
        emit BNBWithdrawn(msg.sender, contractBalance);
    }
}