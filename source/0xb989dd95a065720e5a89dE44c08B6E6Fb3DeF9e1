
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: contracts/IGOPool20230413.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {SafeMath} from "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {IERC20Metadata as IERC20} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";


interface IERC721Enumerable {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function tokenURI(uint256 tokenId) external view returns (string memory);

    function mintForMiner(address _to) external returns (bool, uint256);

    function balanceOf(address owner) external view returns (uint256 balance);

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function MinerList(address _to) external view returns (bool);

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}

interface structItem {
    struct nftInfo {
        string name;
        string symbol;
        string tokenURI;
        address ownerOf;
        tokenIdInfo statusList;
    }

    struct tokenIdInfo {
        bool mintStatus;
        bool buybackStatus;
        bool swapStatus;
    }

    struct allStakingItem {
        address pool;
        uint256 stakingNum;
        uint256[] stakingList;
    }

    struct multi_item {
        uint256 stakingTotal;
        uint256 whiteListTotal;
    }

    struct orderItem_1 {
        uint256 orderId;
        IERC721Enumerable nftToken;
        uint256 igoTotalAmount;
        address erc20Token;
        uint256 price;
        bool orderStatus;
        uint256 igoOkAmount;
        uint256 startBlock;
        uint256 endBlock;
        uint256 cosoQuote;
        bool useWhiteListCheck;
    }

    struct orderItem_2 {
        IERC20 swapToken;
        uint256 swapPrice;
        uint256 buyBackEndBlock;
        uint256 buyBackNum;
        uint256 swapFee;
        uint256 igoMaxAmount;
        IERC721Enumerable CosoNFT;
        bool useStakingCoso;
        bool useWhiteList;
        IERC20 ETH;
    }

}

interface IgoManager is structItem {
    function getAllStakingNum(address _user) external view returns (uint256 num);

    function massGetStaking(address _user) external view returns (allStakingItem[] memory allStakingList, uint256[] memory tokenIdList);
}

contract IGOPool20230413 is Ownable, ReentrancyGuard, structItem {
    using SafeMath for uint256;
    uint256 public quote;
    uint256 public daoRate;
    uint256 public stakingIgoNum;
    uint256 public whiteListIgoNum;
    address payable public feeAddress;
    address payable public teamAddress;
    address public IGOPoolFactory;
    address public swapPool;
    address public nftOwner;
    address public daoAddress;
    bool public useSwapPool = false;
    IgoManager public igoManager = IgoManager(0x360c35Af6429Ab4B6322eaa77E284fBd58877cd5);
    multi_item public quoteList;
    orderItem_1 public fk1;
    orderItem_2 public fk2;
    mapping(address => mapping(uint256 => bool)) public CanBuyBackList;
    mapping(address => uint256[]) public UserIgoTokenIdList;
    mapping(address => uint256) public UserIgoTokenIdListNum;
    mapping(uint256 => tokenIdInfo) public TokenIdSwapStatusStatusList;
    mapping(address => bool) public whiteList;
    mapping(address => uint256) public whiteQuoteList;

    event igoEvent(address _buyer, uint256 _idoNum, uint256[] _idoIdList, uint256 _amount, uint256 _time, uint256 _cosoID);

    modifier onlyIGOPoolFactory() {
        require(msg.sender == IGOPoolFactory, "e00");
        _;
    }

    modifier onlyBeforeStartBlock() {
        require(block.timestamp < fk1.startBlock || fk1.startBlock == 0, "e01");
        _;
    }

    constructor(IERC721Enumerable _Coso, address _feeAddress, address _teamAddress, IERC20 _ETH, uint256 orderId, IERC721Enumerable _nftToken, uint256 _igoAmount, address _erc20Token, uint256 _price, uint256 _swapRate)  {
        IGOPoolFactory = msg.sender;
        feeAddress = payable(_feeAddress);
        teamAddress = payable(_teamAddress);
        fk2.CosoNFT = _Coso;
        fk2.ETH = _ETH;
        fk1.cosoQuote = 1;
        fk1.orderId = orderId;
        fk1.orderStatus = true;
        fk1.nftToken = _nftToken;
        fk1.igoTotalAmount = _igoAmount;
        fk1.erc20Token = _erc20Token;
        fk1.price = _price;
        fk1.igoOkAmount = 0;
        fk2.swapFee = _swapRate;
        fk2.igoMaxAmount = 0;
        quote = _igoAmount;
    }

    function setNftOwner(address _nftOwner) external onlyOwner {
        nftOwner = _nftOwner;
    }

    function setIgoManager(IgoManager _igoManager) external onlyOwner {
        igoManager = _igoManager;
    }

    // function addWhiteList(address[] memory _addressList) external onlyOwner {
    //     for (uint256 i = 0; i < _addressList.length; i++) {
    //         require(_addressList[i] != address(0), "e03");
    //         whiteList[_addressList[i]] = true;
    //     }
    // }

    //    function addWhiteQuoteList(address[] memory _addressList, uint256[] memory _quoteList) external onlyOwner {
    //        require(_addressList.length == _quoteList.length || _quoteList.length == 1, "e1");
    //        for (uint256 i = 0; i < _addressList.length; i++) {
    //            require(_addressList[i] != address(0), "e02");
    //            whiteList[_addressList[i]] = true;
    //            if (_quoteList.length == 1) {
    //                whiteQuoteList[_addressList[i]] = _quoteList[0];
    //            } else {
    //                whiteQuoteList[_addressList[i]] = _quoteList[i];
    //            }
    //        }
    //    }

    //    function setQuoteList(uint256 _stakingTotal, uint256 _whiteListTotal) external onlyOwner {
    //        quoteList.stakingTotal = _stakingTotal;
    //        quoteList.whiteListTotal = _whiteListTotal;
    //    }

    function enableIgo() external onlyOwner {
        fk1.orderStatus = true;
    }

    function disableIgo() external onlyOwner {
        fk1.orderStatus = false;
    }

    // function setDao(dao _daoAddress, uint256 _daoRate) external onlyOwner {
    //     daoAddress = _daoAddress;
    //     require(_daoRate <= fk2.swapFee.div(2), "e008");
    //     daoRate = _daoRate;
    // }

    function setIgo(address payable _feeAddress, uint256 _fee, IERC721Enumerable _CosoNft, IERC721Enumerable _nftToken) external onlyIGOPoolFactory {
        feeAddress = _feeAddress;
        fk2.swapFee = _fee;
        fk2.CosoNFT = _CosoNft;
        fk1.nftToken = _nftToken;
    }

    function setOrderId(uint256 _orderId) external onlyOwner {
        fk1.orderId = _orderId;
    }

    function setTeamAddress(address payable _teamAddress) external onlyOwner {
        require(_teamAddress != address(0), "e01");
        teamAddress = _teamAddress;
    }

    function setIgoTotalAmount(uint256 _igoTotalAmount) external onlyOwner {
        fk1.igoTotalAmount = _igoTotalAmount;
    }

    function setErc20token(address _token, uint256 _price) external onlyOwner {
        fk1.erc20Token = _token;
        fk1.price = _price;
    }

    function updateBuybackFee(uint256 _swapFee) external onlyOwner {
        fk2.swapFee = _swapFee;
    }

    function setNftToken(IERC721Enumerable _nftToken) external onlyOwner {
        fk1.nftToken = _nftToken;
    }

    function setQuote(uint256 _quote) external onlyOwner {
        quote = _quote;
    }

    function setTaskType(uint256 _igoMaxAmount, bool _useWhiteList, bool _useWhiteListCheck, bool _useStakingCoso, uint256 _CosoQuote, bool _useSwapPool) external onlyOwner onlyBeforeStartBlock {
        fk2.igoMaxAmount = _igoMaxAmount;
        fk1.useWhiteListCheck = _useWhiteListCheck;
        fk2.useWhiteList = _useWhiteList;
        fk2.useStakingCoso = _useStakingCoso;
        fk1.cosoQuote = _CosoQuote;
        useSwapPool = _useSwapPool;
    }

    //    function setSwapPool(address _swapPool) external onlyOwner {
    //        require(_swapPool != address(0));
    //        swapPool = _swapPool;
    //    }

    function setSwapTokenPrice(IERC20 _swapToken, uint256 _swapPrice) external onlyOwner {
        //require(block.timestamp <= fk1.endBlock || address(fk2.swapToken) == address(0), "e06");
        fk2.swapToken = _swapToken;
        fk2.swapPrice = _swapPrice;
    }

    function setTimeLines(uint256 _startBlock, uint256 _endBlock, uint256 _buyBackEndBlock) external onlyOwner {
        //require(_buyBackEndBlock > _endBlock && _endBlock > _startBlock, "e07");
        fk1.startBlock = _startBlock;
        fk1.endBlock = _endBlock;
        fk2.buyBackEndBlock = _buyBackEndBlock;
    }

    function getStakingNum(address _user) external view returns (uint256 stakingNum, uint256 igoMaxAmount) {
        stakingNum = igoManager.getAllStakingNum(_user);
        igoMaxAmount = fk2.igoMaxAmount;
    }

    function getStaking(address _user) external view returns (uint256[] memory idTokenList, uint256 idTokenListNum, nftInfo[] memory nftInfolist2, uint256 igoQuota, uint256 maxIgoNum) {
        (, idTokenList) = igoManager.massGetStaking(_user);
        idTokenListNum = idTokenList.length;
        nftInfolist2 = massGetNftInfo(fk2.CosoNFT, idTokenList);
        igoQuota = (idTokenList.length).sub(UserIgoTokenIdListNum[_user]);
        maxIgoNum = fk2.igoMaxAmount;
    }

    function igo(uint256 idoNum, uint256 _cosoID) external payable nonReentrant {
        if (nftOwner == address(0)) {
            require(fk1.nftToken.MinerList(address(this)), "e12");
        }
        //ido数量要大于0
        require(idoNum > 0, "e13");
        //ido状态要为true
        require(fk1.orderStatus, "e15");
        //时间必须在指定时间之内
        require(block.timestamp >= fk1.startBlock && block.timestamp <= fk1.endBlock, "e16");
        //用户ido之后不能超过总ido量
        require(fk1.igoOkAmount.add(idoNum) <= fk1.igoTotalAmount, "e17");
        uint256 cocoID = _cosoID;
        //require(UserIgoTokenIdListNum[msg.sender].add(idoNum) <= fk2.igoMaxAmount, "e18");
        uint256 _stakingNum = igoManager.getAllStakingNum(msg.sender);
        //用户IDO的总数不能超过质押的2倍加1
        //只使用白名单模式
        if (!fk2.useStakingCoso && fk2.useWhiteList) {
            require(UserIgoTokenIdListNum[msg.sender].add(idoNum) <= 1, "e19");
        }
        //同时使用质押模式和白名单模式
        if (fk2.useStakingCoso && fk2.useWhiteList) {
            require(UserIgoTokenIdListNum[msg.sender].add(idoNum) <= (_stakingNum.mul(2)).add(1), "e19");
        }
        //使用质押模式
        if (fk2.useStakingCoso && !fk2.useWhiteList) {
            require(UserIgoTokenIdListNum[msg.sender].add(idoNum) <= _stakingNum.mul(2), "e19");
        }
        if (!fk2.useStakingCoso && !fk2.useWhiteList) {
            return;
        }
        //总金额
        uint256 allAmount = (fk1.price).mul(idoNum);
        if (fk1.erc20Token == address(0)) {
            require(msg.value == allAmount, "e21");
            teamAddress.transfer(allAmount);
        } else {
            //用户必须有足够的代币
            require(IERC20(fk1.erc20Token).balanceOf(msg.sender) >= allAmount, "e22");
            IERC20(fk1.erc20Token).transferFrom(msg.sender, teamAddress, allAmount);
        }
        uint256[] memory idoIdList = new uint256[](idoNum);
        for (uint256 i = 0; i < idoNum; i++) {
            uint256 _token_id;
            if (nftOwner != address(0)) {
                //从NFT所有者转账NFT给用户
                _token_id = fk1.nftToken.tokenOfOwnerByIndex(nftOwner, 0);
                fk1.nftToken.safeTransferFrom(nftOwner, msg.sender, _token_id);
            } else {
                (bool _mintOk, uint256 _tokenId) = fk1.nftToken.mintForMiner(msg.sender);
                _token_id = _tokenId;
                require(_mintOk, "e24");
            }
            TokenIdSwapStatusStatusList[_token_id].mintStatus = true;
            CanBuyBackList[msg.sender][_token_id] = true;
            UserIgoTokenIdList[msg.sender].push(_token_id);
            fk1.igoOkAmount = fk1.igoOkAmount.add(1);
            UserIgoTokenIdListNum[msg.sender] = UserIgoTokenIdListNum[msg.sender].add(1);
            idoIdList[i] = _token_id;
        }
        emit igoEvent(msg.sender, idoNum, idoIdList, allAmount, block.timestamp, cocoID);
    }

    //     function buyback(uint256[] memory _tokenIdList) external nonReentrant {
    //         require(block.timestamp > fk1.endBlock && block.timestamp < fk2.buyBackEndBlock, "e26");
    //         uint256 buybackNum = _tokenIdList.length;
    //         uint256 leftrate = uint256(100).sub(fk2.swapFee);
    //         uint256 allAmount = (fk1.price).mul(leftrate).mul(buybackNum).div(100);
    //         for (uint256 i = 0; i < _tokenIdList.length; i++) {
    //             require(CanBuyBackList[msg.sender][_tokenIdList[i]], "e27");
    //         }
    //         for (uint256 i = 0; i < _tokenIdList.length; i++) {
    //             fk1.nftToken.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, _tokenIdList[i]);
    //             CanBuyBackList[msg.sender][_tokenIdList[i]] = false;
    //             fk2.buyBackNum = fk2.buyBackNum.add(1);
    //             TokenIdSwapStatusStatusList[_tokenIdList[i]].buybackStatus = true;
    //         }
    //         if (fk1.erc20Token != address(0)) {
    //             IERC20(fk1.erc20Token).safeTransfer(msg.sender, allAmount);
    //         } else {
    //             msg.sender.transfer(allAmount);
    //         }
    //     }

    function takeTokens(address _token, uint256 _amount) external onlyOwner returns (bool){
        if (_token == address(0) && address(this).balance > 0) {
            payable(msg.sender).transfer(address(this).balance);
            return true;
        } else if (_token != address(0) && IERC20(_token).balanceOf(address(this)) > 0) {
            IERC20(_token).transfer(msg.sender, _amount);
            return true;
        } else {
            return false;
        }
    }

    function getTimeStatus(uint256 _time) external view returns (bool canStaking, bool canIgo, bool canBuyBack, bool canWithDraw, bool canSwapToken) {
        if (_time < fk1.startBlock) {
            return (true, false, false, false, false);
        } else if (fk1.startBlock <= _time && _time <= fk1.endBlock) {
            return (false, true, false, false, true);
        } else if (fk1.endBlock < _time && _time <= fk2.buyBackEndBlock) {
            return (false, false, true, true, true);
        } else if (_time > fk2.buyBackEndBlock) {
            return (false, false, false, true, true);
        }
    }

    function getTokenInfoByIndex() external view returns (orderItem_1 memory orderItem1, orderItem_2 memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2, string memory nftName, string memory nftSymbol){
        orderItem1 = fk1;
        orderItem2 = fk2;
        if (orderItem1.erc20Token == address(0)) {
            name2 = fk2.ETH.name();
            symbol2 = fk2.ETH.symbol();
            decimals2 = fk2.ETH.decimals();
        } else {
            name2 = IERC20(orderItem1.erc20Token).name();
            symbol2 = IERC20(orderItem1.erc20Token).symbol();
            decimals2 = IERC20(orderItem1.erc20Token).decimals();
        }
        price2 = orderItem1.price.mul(1e18).div(10 ** decimals2);
        nftName = orderItem1.nftToken.name();
        nftSymbol = orderItem1.nftToken.symbol();
    }

    function getUserIdoTokenIdList(address _address) external view returns (uint256[] memory) {
        return UserIgoTokenIdList[_address];
    }

    function getNftInfo(IERC721Enumerable _nftToken, uint256 _tokenId) public view returns (nftInfo memory nftInfo2) {
        nftInfo2 = nftInfo(_nftToken.name(), _nftToken.symbol(), _nftToken.tokenURI(_tokenId), _nftToken.ownerOf(_tokenId), TokenIdSwapStatusStatusList[_tokenId]);
    }

    function massGetNftInfo(IERC721Enumerable _nftToken, uint256[] memory _tokenIdList) public view returns (nftInfo[] memory nftInfolist2) {
        nftInfolist2 = new nftInfo[](_tokenIdList.length);
        for (uint256 i = 0; i < _tokenIdList.length; i++) {
            nftInfolist2[i] = getNftInfo(_nftToken, _tokenIdList[i]);
        }
    }

    receive() payable external {}
}

