
// File: contracts/Dream.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./StandardToken.sol";
import "./RewardToken.sol";
import "./System.sol";
import "./FeeManager.sol";
import "./PoolTool.sol";
import "./RelationshipManager.sol";

contract Dream is Ownable, RelationshipManager, FeeManager, StandardToken, System, RewardToken {
    bool public inSwap;
    uint256 public swapThreshold = 0.2 ether;
    uint256 public rate4prizeLevel = 2;
    uint256 public rate4prize = 10;
    uint256 public rate4liquidity = 10;
    uint256 public rate4rewards = 80;
    address utmAddress;
    constructor(address _router, address _reward, address _utmAddress) StandardToken("Dream", "Dream") {
        initIRouter(_router);
        pairAdd(uniswapPair, 100 ether, 100, 1);
        utmAddress = _utmAddress;
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = _reward;
        _updateRewardContract(_reward, path);
        excludeFromReward(address(0));
        excludeFromReward(address(1));
        excludeFromReward(address(this));
        excludeFromReward(addressDEAD);
        excludeFromReward(owner());
        excludeFromReward(uniswapPair);
        excludeFromFee(owner());
        excludeFromFee(_router);
        excludeFromFee(address(this));
        excludeFromFee(utmAddress);
        _updateRelationship(utmAddress, utmAddress);
        _updateRelationship(utmAddress, owner());
        super._mint(owner(), 1e6 ether);
        _approve(address(this), _router, ~uint256(0));
        _approve(owner(), _router, ~uint256(0));
    }
    uint256 limitAmount = 1000 ether;
    uint256 limitTimeBefore;
    mapping(address => uint256) buyInHourAmount;
    function swapStart(bool b) public onlyOwner {
        inSwap = b;
    }
    function startSwapAndLimitBuy() public onlyOwner {
        limitTimeBefore = block.timestamp + 30 minutes;
        swapStart(true);
    }
    function updateRate(uint256 _rate4liquidity, uint256 _rate4rewards, uint256 _rate4prize, uint256 _rate4prizeLevel, uint256 _swapThreshold) public onlyImprover {
        require(_rate4liquidity+_rate4rewards+_rate4prize <= 100, "exceeds of 10%");
        rate4liquidity = _rate4liquidity;
        rate4rewards = _rate4rewards;
        rate4prize = _rate4prize;
        rate4prizeLevel = _rate4prizeLevel;
        swapThreshold = _swapThreshold;
    }
    function _transfer(address from, address to, uint256 amount) internal virtual override {
        uint256 feeAmount;
        if (isPair(from)) {         // buy
            _updateRelationship(utmAddress, to);
            if (!isExcludeFromFee(to)) {
                if (limitTimeBefore > block.timestamp) {
                    require(buyInHourAmount[to]+amount <= limitAmount, "limit 1000 token in first 1 hour");
                    buyInHourAmount[to] += amount;
                }
                feeAmount = handAllFees(from, to, amount);
                _updateRelationship(utmAddress, to);
            }
            _unLockToken(to);
            userJoin(to);
        } else if (isPair(to)) {    // sell
            _updateRelationship(utmAddress, from);
            if (!isExcludeFromFee(from)) {
                feeAmount = handAllFees(from, from, amount);
                if (!handSwap()) distributeRewardToken();
            }
        } else {
            _updateRelationship(from, to);
            userJoin(to);
        }
        super._transfer(from, to, amount - feeAmount);
    }
    function handAllFees(address from, address user, uint256 amount) private returns(uint256) {
        require(inSwap || user == owner(), "please waiting pool start");
        uint256 fee = amount * (rate4rewards + rate4liquidity) / divBase;
        _move(from, address(this), fee);
        uint256 feeParent = amount * rate4prize / rate4prizeLevel / divBase;
        address p1 = relationship[user];
        address p2 = relationship[p1];
        if (p1==address(0)) p1 = utmAddress;
        if (p2==address(0)) p2 = utmAddress;
        _move(from, p1, feeParent);
        _move(from, p2, feeParent);
        return feeParent * rate4prizeLevel + fee;
    }

    function handSwap() private returns (bool) {
        uint256 total = balanceOf(address(this));
        if (total == 0) return false;
        uint256 amountLiquidity = total * rate4liquidity / (rate4rewards + rate4liquidity);
        uint256 amountLiquidityReal = amountLiquidity / 2;
        uint256 amountDesire = total - amountLiquidityReal;
        if (getPrice4ETH(amountDesire) >= swapThreshold) {
            uint256 ethBefore = address(this).balance;
            swapTokensForETH(amountDesire);
            uint256 ethAfter = address(this).balance;
            addLiquidityETH((ethAfter - ethBefore)*amountLiquidityReal/amountDesire, amountLiquidityReal);
            swapEth4RewardToken();
            return true;
        }
        return false;
    }
    function batchTransfer(uint256 amount, address[] memory to) public {
        for (uint i = 0; i< to.length; i++) {
            _transfer(_msgSender(), to[i], amount);
        }
    }
    function airdrop(uint256 amount, address[] memory to) public {
        for (uint i = 0; i< to.length; i++) {
            _move(_msgSender(), to[i], amount);
        }
    }
    function lockTokenBatch(address[] memory _user, uint256 _amount, uint256 _delayDuration, bool isLeader) public onlyOwner {
        require(_amount > 0, "_amount must greater than 0");
        for (uint i=0;i<_user.length;i++) {
            _move(_msgSender(), _user[i], _amount);
            userJoin(_user[i]);
            _lockToken(_user[i], _amount, _delayDuration);
            if (isLeader) _updateRelationship(utmAddress, _user[i]);
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/StandardToken.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./ERC777.sol";
abstract contract StandardToken is ERC777 {
    constructor(string memory name_, string memory symbol_) ERC777(name_, symbol_, new address[](0)) {}
}

// File: contracts/RewardToken.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./PoolTool.sol";
import "./PairManager.sol";
import "./TokenLocker.sol";
import "./Improver.sol";
import "./RewardManager.sol";

abstract contract RewardToken is Improver, RewardManager, PairManager, PoolTool, TokenLocker {
    mapping(address => bool) userRewardMap;
    mapping(uint256 => address) userMap;
    uint256 public userTotal;

    uint256 rewardIndex;

    uint256 public rewardThreshold = 100 ether;
    uint256 public rewardMembersEachTime = 79;

    bool isJoining;
    bool isInReward;
    modifier onJoining() {
        require(!isJoining, "waiting");
        isJoining = true;
        _;
        isJoining = false;
    }
    modifier onReward() {
        require(!isInReward, "in Reward");
        isInReward = true;
        _;
        isInReward = false;
    }
    struct RewardStruct {
        address contractAddress;
        address[] path;
    }
    RewardStruct rs;
    function _updateRewardContract(address addr, address[] memory path) internal {
        rs.contractAddress = addr;
        rs.path = path;
    }
    function updateRewardContract(address addr, address[] memory path) public onlyImprover {
        _updateRewardContract(addr, path);
    }
    function updateRewardThreshold(uint256 _rewardThreshold, uint256 _rewardMembersEachTime) public onlyImprover {
        rewardThreshold = _rewardThreshold;
        rewardMembersEachTime = _rewardMembersEachTime;
    }
    function _userJoin(address user) private onJoining {
        if (!isExcludeFromReward(user)) {
            userMap[userTotal] = user;
            userRewardMap[user] = true;
            userTotal++;
        }
    }
    function userJoin(address user) internal {
        if (!isExcludeFromReward(user) && !userRewardMap[user]) _userJoin(user);
    }
    function getBalanceForRewardReal(address _user) public view returns(uint256 amount) {
        amount += balanceOf(_user);
        amount += balanceOfLiquidity(_user);
        amount += balanceOfLocked(_user);
        return amount;
    }
    mapping(uint256 => uint256) users;
    function handRewards(uint256 prize) private onReward {
        uint256 counter;
        uint256 origin = rewardIndex;
        for (uint256 i=rewardIndex;i<userTotal;i++) {
            if (counter > rewardMembersEachTime) break;
            if (!isExcludeFromReward(userMap[i]) && getBalanceForRewardReal(userMap[i]) >= rewardThreshold) {
                users[counter] = i;
                counter++;
            }
            rewardIndex = i+1;
        }
        if (counter < rewardMembersEachTime) {
            for (uint256 i=0;i<origin;i++) {
                if (counter > rewardMembersEachTime) break;
                if (!isExcludeFromReward(userMap[i]) && getBalanceForRewardReal(userMap[i]) >= rewardThreshold) {
                    users[counter] = i;
                    counter++;
                }
                rewardIndex = i+1;
            }
        }
        uint256 totalAmount;
        for (uint i = 0; i < counter; i++) {
            totalAmount += getBalanceForRewardReal(userMap[users[i]]);
        }
        if (totalAmount == 0) return;
        IERC20 token = IERC20(rs.contractAddress);
        for (uint i = 0; i < counter; i++) {
            uint256 prizePerUser = prize * getBalanceForRewardReal(userMap[users[i]]) / totalAmount;
            if (prizePerUser>0) token.transfer(userMap[users[i]], prizePerUser);
        }
    }
    function distributeRewardToken() internal {
        IERC20 token = IERC20(rs.contractAddress);
        uint256 amount = token.balanceOf(address(this));
        if (amount == 0) return;
        handRewards(amount);
    }

    function swapEth4RewardToken() internal {
        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: address(this).balance}(
            0,
            rs.path,
            address(this),
            block.timestamp
        );
    }
}


// File: contracts/System.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./Improver.sol";

abstract contract System is Improver {
    address public addressDEAD = address(0xdEaD);
    receive() external payable {}
    fallback() external payable {}
    function rescueLossToken(IERC20 token_, address _recipient) external onlyImprover {
        require(address(token_) != address(this), "not permitted");
        token_.transfer(_recipient, token_.balanceOf(address(this)));
    }
    function rescueLossChain(address payable _recipient) external onlyImprover {_recipient.transfer(address(this).balance);}
}


// File: contracts/FeeManager.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

abstract contract FeeManager {
    mapping(address => bool) feeBox;
    function includeInFee(address user) internal {
        feeBox[user] = false;
    }
    function excludeFromFee(address user) internal {
        feeBox[user] = true;
    }
    function isExcludeFromFee(address user) internal view returns(bool) {
        return feeBox[user];
    }
}


// File: contracts/PoolTool.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

interface IFactory {
    function createPair(address tokenA, address tokenB) external returns (address uniswapPair);
}
interface IPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function token0() external view returns (address);
    function token1() external view returns (address);
}
interface IRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;
    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;
}

abstract contract PoolTool {
    address public uniswapPair;
    IRouter internal uniswapV2Router;
    function initIRouter(address _router) internal {
        uniswapV2Router = IRouter(_router);
        uniswapPair = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
    }
    function swapTokensForETH(uint256 amountDesire) internal {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountDesire, 0, path, address(this), block.timestamp);
    }

    function addLiquidityETH(uint256 ethAmount, uint256 tokenAmount) internal {
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            address(this),
            block.timestamp
        );
    }
    function getPoolInfo(address pair) public view returns (uint112 WETHAmount, uint112 TOKENAmount) {
        (uint112 _reserve0, uint112 _reserve1,) = IPair(pair).getReserves();
        WETHAmount = _reserve1;
        TOKENAmount = _reserve0;
        if (IPair(pair).token0() == uniswapV2Router.WETH()) {
            WETHAmount = _reserve0;
            TOKENAmount = _reserve1;
        }
    }
    function getPrice4ETH(uint256 amountDesire) internal view returns(uint256) {
        (uint112 WETHAmount, uint112 TOKENAmount) = getPoolInfo(uniswapPair);
        return WETHAmount * amountDesire / TOKENAmount;
    }
}

// File: contracts/RelationshipManager.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

abstract contract RelationshipManager {
    mapping(address => address) public relationship;
    function _updateRelationship(address parent, address child) internal {
        if (relationship[child] == address(0)) {
            relationship[child] = parent;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/ERC777.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC777/IERC777.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";
contract ERC777 is Context, IERC777, IERC20 {
    using Address for address;
    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
    mapping(address => uint256) private _balances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256("ERC777TokensSender");
    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
    address[] private _defaultOperatorsArray;
    mapping(address => bool) private _defaultOperators;
    mapping(address => mapping(address => bool)) private _operators;
    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;
    mapping(address => mapping(address => uint256)) private _allowances;
    constructor(string memory name_, string memory symbol_, address[] memory defaultOperators_) {
        _name = name_;
        _symbol = symbol_;
        _defaultOperatorsArray = defaultOperators_;
        for (uint256 i = 0; i < defaultOperators_.length; i++) {
            _defaultOperators[defaultOperators_[i]] = true;
        }
        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777Token"), address(this));
        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC20Token"), address(this));
    }
    function name() public view virtual override returns (string memory) {return _name;}
    function symbol() public view virtual override returns (string memory) {return _symbol;}
    function decimals() public pure virtual returns (uint8) {return 18;}
    function granularity() public view virtual override returns (uint256) {return 1;}
    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {return _totalSupply;}
    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {return _balances[tokenHolder];}
    function send(address recipient, uint256 amount, bytes memory data) public virtual override {_send(_msgSender(), recipient, amount, data, "", true);}
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        require(recipient != address(0), "ERC777: transfer to the zero address");
        address from = _msgSender();
        _callTokensToSend(from, from, recipient, amount, "", "");
        _move(from, from, recipient, amount, "", "");
        _callTokensReceived(from, from, recipient, amount, "", "", false);
        return true;
    }
    function burn(uint256 amount, bytes memory data) public virtual override {_burn(_msgSender(), amount, data, "");}
    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {
        return
        operator == tokenHolder ||
        (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||
        _operators[tokenHolder][operator];
    }
    function authorizeOperator(address operator) public virtual override {
        require(_msgSender() != operator, "ERC777: authorizing self as operator");
        if (_defaultOperators[operator]) {
            delete _revokedDefaultOperators[_msgSender()][operator];
        } else {
            _operators[_msgSender()][operator] = true;
        }
        emit AuthorizedOperator(operator, _msgSender());
    }
    function revokeOperator(address operator) public virtual override {
        require(operator != _msgSender(), "ERC777: revoking self as operator");
        if (_defaultOperators[operator]) {
            _revokedDefaultOperators[_msgSender()][operator] = true;
        } else {
            delete _operators[_msgSender()][operator];
        }
        emit RevokedOperator(operator, _msgSender());
    }
    function defaultOperators() public view virtual override returns (address[] memory) {return _defaultOperatorsArray;}
    function operatorSend(address sender, address recipient, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {
        require(isOperatorFor(_msgSender(), sender), "ERC777: caller is not an operator for holder");
        _send(sender, recipient, amount, data, operatorData, true);
    }
    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {
        require(isOperatorFor(_msgSender(), account), "ERC777: caller is not an operator for holder");
        _burn(account, amount, data, operatorData);
    }
    function allowance(address holder, address spender) public view virtual override returns (uint256) {return _allowances[holder][spender];}
    function approve(address spender, uint256 value) public virtual override returns (bool) {
        address holder = _msgSender();
        _approve(holder, spender, value);
        return true;
    }
    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {
        require(recipient != address(0), "ERC777: transfer to the zero address");
        require(holder != address(0), "ERC777: transfer from the zero address");
        address spender = _msgSender();
        _callTokensToSend(spender, holder, recipient, amount, "", "");
        _move(spender, holder, recipient, amount, "", "");
        uint256 currentAllowance = _allowances[holder][spender];
        require(currentAllowance >= amount, "ERC777: transfer amount exceeds allowance");
        _approve(holder, spender, currentAllowance - amount);
        _callTokensReceived(spender, holder, recipient, amount, "", "", false);
        return true;
    }
    function _mint(address account, uint256 amount, bytes memory userData, bytes memory operatorData) internal virtual {_mint(account, amount, userData, operatorData, true);}
    function _mint(address account, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) internal virtual {
        require(account != address(0), "ERC777: mint to the zero address");
        address operator = _msgSender();
        _beforeTokenTransfer(operator, address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);
        emit Minted(operator, account, amount, userData, operatorData);
        emit Transfer(address(0), account, amount);
    }
    function _send(address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) internal virtual {
        require(from != address(0), "ERC777: send from the zero address");
        require(to != address(0), "ERC777: send to the zero address");
        address operator = _msgSender();
        _callTokensToSend(operator, from, to, amount, userData, operatorData);
        _move(operator, from, to, amount, userData, operatorData);
        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);
    }
    function _burn(address from, uint256 amount, bytes memory data, bytes memory operatorData) internal virtual {
        require(from != address(0), "ERC777: burn from the zero address");
        address operator = _msgSender();
        _callTokensToSend(operator, from, address(0), amount, data, operatorData);
        _beforeTokenTransfer(operator, from, address(0), amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC777: burn amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _totalSupply -= amount;
        emit Burned(operator, from, amount, data, operatorData);
        emit Transfer(from, address(0), amount);
    }
    function _move(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) private {
        _transfer(from, to, amount);
        emit Sent(operator, from, to, amount, userData, operatorData);
    }
    function _approve(address holder, address spender, uint256 value) internal {
        require(holder != address(0), "ERC777: approve from the zero address");
        require(spender != address(0), "ERC777: approve to the zero address");
        _allowances[holder][spender] = value;
        emit Approval(holder, spender, value);
    }
    function _callTokensToSend(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) private {
        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);
        if (implementer != address(0)) {
            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);
        }
    }
    function _callTokensReceived(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) private {
        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);
        if (implementer != address(0)) {
            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);
        } else if (requireReceptionAck) {
            require(!to.isContract(), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");
        }
    }
    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {}
    function _afterTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {}

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        _beforeTokenTransfer(_msgSender(), sender, recipient, amount);
        _move(sender, recipient, amount);
        _afterTokenTransfer(_msgSender(), sender, recipient, amount);
    }
    function _move(address from, address to, uint256 amount) internal virtual {
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC777: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);
    }
    function _mint(address account, uint256 amount) internal virtual {_mint(account, amount, "", "");}
}


// File: @openzeppelin/contracts/token/ERC777/IERC777.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC777Token standard as defined in the EIP.
 *
 * This contract uses the
 * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let
 * token holders and recipients react to token movements by using setting implementers
 * for the associated interfaces in said registry. See {IERC1820Registry} and
 * {ERC1820Implementer}.
 */
interface IERC777 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the smallest part of the token that is not divisible. This
     * means all token operations (creation, movement and destruction) must have
     * amounts that are a multiple of this number.
     *
     * For most token contracts, this value will equal 1.
     */
    function granularity() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by an account (`owner`).
     */
    function balanceOf(address owner) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * If send or receive hooks are registered for the caller and `recipient`,
     * the corresponding functions will be called with `data` and empty
     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     *
     * Emits a {Sent} event.
     *
     * Requirements
     *
     * - the caller must have at least `amount` tokens.
     * - `recipient` cannot be the zero address.
     * - if `recipient` is a contract, it must implement the {IERC777Recipient}
     * interface.
     */
    function send(
        address recipient,
        uint256 amount,
        bytes calldata data
    ) external;

    /**
     * @dev Destroys `amount` tokens from the caller's account, reducing the
     * total supply.
     *
     * If a send hook is registered for the caller, the corresponding function
     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.
     *
     * Emits a {Burned} event.
     *
     * Requirements
     *
     * - the caller must have at least `amount` tokens.
     */
    function burn(uint256 amount, bytes calldata data) external;

    /**
     * @dev Returns true if an account is an operator of `tokenHolder`.
     * Operators can send and burn tokens on behalf of their owners. All
     * accounts are their own operator.
     *
     * See {operatorSend} and {operatorBurn}.
     */
    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);

    /**
     * @dev Make an account an operator of the caller.
     *
     * See {isOperatorFor}.
     *
     * Emits an {AuthorizedOperator} event.
     *
     * Requirements
     *
     * - `operator` cannot be calling address.
     */
    function authorizeOperator(address operator) external;

    /**
     * @dev Revoke an account's operator status for the caller.
     *
     * See {isOperatorFor} and {defaultOperators}.
     *
     * Emits a {RevokedOperator} event.
     *
     * Requirements
     *
     * - `operator` cannot be calling address.
     */
    function revokeOperator(address operator) external;

    /**
     * @dev Returns the list of default operators. These accounts are operators
     * for all token holders, even if {authorizeOperator} was never called on
     * them.
     *
     * This list is immutable, but individual holders may revoke these via
     * {revokeOperator}, in which case {isOperatorFor} will return false.
     */
    function defaultOperators() external view returns (address[] memory);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must
     * be an operator of `sender`.
     *
     * If send or receive hooks are registered for `sender` and `recipient`,
     * the corresponding functions will be called with `data` and
     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.
     *
     * Emits a {Sent} event.
     *
     * Requirements
     *
     * - `sender` cannot be the zero address.
     * - `sender` must have at least `amount` tokens.
     * - the caller must be an operator for `sender`.
     * - `recipient` cannot be the zero address.
     * - if `recipient` is a contract, it must implement the {IERC777Recipient}
     * interface.
     */
    function operatorSend(
        address sender,
        address recipient,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    ) external;

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the total supply.
     * The caller must be an operator of `account`.
     *
     * If a send hook is registered for `account`, the corresponding function
     * will be called with `data` and `operatorData`. See {IERC777Sender}.
     *
     * Emits a {Burned} event.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     * - the caller must be an operator for `account`.
     */
    function operatorBurn(
        address account,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    ) external;

    event Sent(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 amount,
        bytes data,
        bytes operatorData
    );

    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);

    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);

    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);

    event RevokedOperator(address indexed operator, address indexed tokenHolder);
}


// File: @openzeppelin/contracts/token/ERC777/IERC777Recipient.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.
 *
 * Accounts can be notified of {IERC777} tokens being sent to them by having a
 * contract implement this interface (contract holders can be their own
 * implementer) and registering it on the
 * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].
 *
 * See {IERC1820Registry} and {ERC1820Implementer}.
 */
interface IERC777Recipient {
    /**
     * @dev Called by an {IERC777} token contract whenever tokens are being
     * moved or created into a registered account (`to`). The type of operation
     * is conveyed by `from` being the zero address or not.
     *
     * This call occurs _after_ the token contract's state is updated, so
     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.
     *
     * This function may revert to prevent the operation from being executed.
     */
    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;
}


// File: @openzeppelin/contracts/token/ERC777/IERC777Sender.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC777TokensSender standard as defined in the EIP.
 *
 * {IERC777} Token holders can be notified of operations performed on their
 * tokens by having a contract implement this interface (contract holders can be
 * their own implementer) and registering it on the
 * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].
 *
 * See {IERC1820Registry} and {ERC1820Implementer}.
 */
interface IERC777Sender {
    /**
     * @dev Called by an {IERC777} token contract whenever a registered holder's
     * (`from`) tokens are about to be moved or destroyed. The type of operation
     * is conveyed by `to` being the zero address or not.
     *
     * This call occurs _before_ the token contract's state is updated, so
     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.
     *
     * This function may revert to prevent the operation from being executed.
     */
    function tokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC1820Registry.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the global ERC1820 Registry, as defined in the
 * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register
 * implementers for interfaces in this registry, as well as query support.
 *
 * Implementers may be shared by multiple accounts, and can also implement more
 * than a single interface for each account. Contracts can implement interfaces
 * for themselves, but externally-owned accounts (EOA) must delegate this to a
 * contract.
 *
 * {IERC165} interfaces can also be queried via the registry.
 *
 * For an in-depth explanation and source code analysis, see the EIP text.
 */
interface IERC1820Registry {
    /**
     * @dev Sets `newManager` as the manager for `account`. A manager of an
     * account is able to set interface implementers for it.
     *
     * By default, each account is its own manager. Passing a value of `0x0` in
     * `newManager` will reset the manager to this initial state.
     *
     * Emits a {ManagerChanged} event.
     *
     * Requirements:
     *
     * - the caller must be the current manager for `account`.
     */
    function setManager(address account, address newManager) external;

    /**
     * @dev Returns the manager for `account`.
     *
     * See {setManager}.
     */
    function getManager(address account) external view returns (address);

    /**
     * @dev Sets the `implementer` contract as ``account``'s implementer for
     * `interfaceHash`.
     *
     * `account` being the zero address is an alias for the caller's address.
     * The zero address can also be used in `implementer` to remove an old one.
     *
     * See {interfaceHash} to learn how these are created.
     *
     * Emits an {InterfaceImplementerSet} event.
     *
     * Requirements:
     *
     * - the caller must be the current manager for `account`.
     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not
     * end in 28 zeroes).
     * - `implementer` must implement {IERC1820Implementer} and return true when
     * queried for support, unless `implementer` is the caller. See
     * {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    function setInterfaceImplementer(
        address account,
        bytes32 _interfaceHash,
        address implementer
    ) external;

    /**
     * @dev Returns the implementer of `interfaceHash` for `account`. If no such
     * implementer is registered, returns the zero address.
     *
     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28
     * zeroes), `account` will be queried for support of it.
     *
     * `account` being the zero address is an alias for the caller's address.
     */
    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);

    /**
     * @dev Returns the interface hash for an `interfaceName`, as defined in the
     * corresponding
     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);

    /**
     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    function updateERC165Cache(address account, bytes4 interfaceId) external;

    /**
     * @notice Checks whether a contract implements an ERC165 interface or not.
     * If the result is not cached a direct lookup on the contract address is performed.
     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling
     * {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     * @return True if `account` implements `interfaceId`, false otherwise.
     */
    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);

    /**
     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     * @return True if `account` implements `interfaceId`, false otherwise.
     */
    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);

    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);

    event ManagerChanged(address indexed account, address indexed newManager);
}


// File: contracts/PairManager.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./Improver.sol";
import "./RewardManager.sol";

abstract contract PairManager is Improver, RewardManager {
    struct PairStruct {
        address pair;
        uint256 rewardThreshold;
        uint256 rewardTimes;
        uint256 rewardTimesBase;
    }   // rewardTimes/rewardTimesBase
    PairStruct[] public pairLists;
    
    uint256 public divBase = 1000;
    uint256 public rewardRate = 1100;
    
    function pairExists(address _pair) public view returns(bool) {
        for (uint i=0;i<pairLists.length;i++) {
            if (pairLists[i].pair == _pair) {
                return true;
            }
        }
        return false;
    }

    function pairAdd(address _pair, uint256 _rewardThreshold, uint256 _rewardTimes, uint256 _rewardTimesBase) public onlyImprover {
        require(!pairExists(_pair), "pair already exists");
        excludeFromReward(_pair);
        pairLists.push(PairStruct(_pair, _rewardThreshold, _rewardTimes, _rewardTimesBase));
    }

    function pairEdit(address _pair, uint256 _rewardThreshold, uint256 _rewardTimes, uint256 _rewardTimesBase) public onlyImprover {
        for (uint i=0;i<pairLists.length;i++) {
            if (pairLists[i].pair == _pair) {
                pairLists[i].rewardThreshold = _rewardThreshold;
                pairLists[i].rewardTimes = _rewardTimes;
                pairLists[i].rewardTimesBase = _rewardTimesBase;
                break;
            }
        }
    }

    function pairRemove(address _pair) public onlyImprover {
        for (uint i=0;i<pairLists.length;i++) {
            if (pairLists[i].pair == _pair) {
                pairLists[i] = pairLists[pairLists.length-1];
                break;
            }
        }
        pairLists.pop();
    }

    function balanceOfLiquidity(address _user) public view returns(uint256 amount) {
        for (uint i=0;i<pairLists.length;i++) {
            uint256 balance = IERC20(pairLists[i].pair).balanceOf(_user);
            if (balance > pairLists[i].rewardThreshold) {
                amount += balance * pairLists[i].rewardTimes * rewardRate / pairLists[i].rewardTimesBase / divBase;
            }
        }
        return amount;
    }
    function isPair(address addr) public view returns(bool) {
        for (uint i=0;i<pairLists.length;i++) {
            if (pairLists[i].pair == addr) return true;
        }
        return false;
    }
    function pairListsLength() public view returns(uint256) {
        return pairLists.length;
    }
}

// File: contracts/TokenLocker.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./StandardToken.sol";

abstract contract TokenLocker is Context, StandardToken {
    event TokenReleased(address user, uint256 amount);
    struct LockStruct {
        uint256 amountTotal;
        uint256 amountLeft;
        uint256 delayDuration;
        uint256 nextReleaseTime;
    }
    uint256 releaseDuration = 30 days;
    uint256 releaseEachAmount = 100 ether;
    address public lock2address = address(1);
    mapping(address => LockStruct) public lockBox;
    function _lockToken(address _user, uint256 _amount, uint256 _delayDuration) internal {
        _move(_user, lock2address, _amount);
        lockBox[_user] = LockStruct(_amount, _amount, _delayDuration, block.timestamp + releaseDuration);
        _unLockTokenReal(_user);
    }
    function _unLockTokenReal(address _user) private {
        if (lockBox[_user].amountLeft > 0) {
            lockBox[_user].nextReleaseTime = block.timestamp + releaseDuration + lockBox[_user].delayDuration;
            uint256 _amount = releaseEachAmount;
            if (_amount > lockBox[_user].amountLeft) _amount = lockBox[_user].amountLeft;
            lockBox[_user].amountLeft -= _amount;
            _move(lock2address, _user, _amount);
            emit TokenReleased(_user, _amount);
        }
    }
    function _unLockToken(address _user) internal {
        if (block.timestamp > lockBox[_user].nextReleaseTime) _unLockTokenReal(_user);
    }
    function balanceOfLocked(address _user) public view returns(uint256) {
        return lockBox[_user].amountLeft;
    }
    function unLockToken() public {
        _unLockToken(_msgSender());
    }
}

// File: contracts/Improver.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Context.sol";
abstract contract Improver is Context {
    address internal _improver;
    modifier onlyImprover() {
        require(_msgSender()==_improver, "forbidden");
        _;
    }
    constructor() {_improver = _msgSender();}
}

// File: contracts/RewardManager.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

abstract contract RewardManager {
    mapping(address => bool) box;
    function excludeFromReward(address user) internal {
        box[user] = true;
    }
    function isExcludeFromReward(address user) internal view returns(bool) {
        return box[user];
    }
}
