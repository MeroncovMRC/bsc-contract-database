pragma solidity ^0.5.10;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b <= a);
        c = a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b > 0);
        c = a / b;
    }
}

contract BEP20Interface {
    function totalSupply() public view returns (uint256);

    function balanceOf(address tokenOwner)
        public
        view
        returns (uint256 balance);

    function allowance(address tokenOwner, address spender)
        public
        view
        returns (uint256 remaining);

    function transfer(address to, uint256 tokens) public returns (bool success);

    function approve(address spender, uint256 tokens)
        public
        returns (bool success);

    function transferFrom(
        address from,
        address to,
        uint256 tokens
    ) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint256 tokens);
    event Approval(
        address indexed tokenOwner,
        address indexed spender,
        uint256 tokens
    );
}

contract ApproveAndCallFallBack {
    function receiveApproval(
        address from,
        uint256 tokens,
        address token,
        bytes memory data
    ) public;
}

contract Owned {
    address public owner;
    address public newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address _newOwner) public onlyOwner {
        newOwner = _newOwner;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}

contract TokenBEP20 is BEP20Interface, Owned {
    using SafeMath for uint256;

    string public symbol;
    string public name;
    uint8 public decimals;
    uint256 _totalSupply;

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    constructor() public {
        symbol = "BEE";
        name = "CoolBee";
        decimals = 0;
        _totalSupply = 1000000000000e0;
        balances[owner] = _totalSupply;
        emit Transfer(address(0), owner, _totalSupply);
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply.sub(balances[address(0)]);
    }

    function balanceOf(address tokenOwner)
        public
        view
        returns (uint256 balance)
    {
        return balances[tokenOwner];
    }

    function transfer(address to, uint256 tokens)
        public
        returns (bool success)
    {
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }

    function approve(address spender, uint256 tokens)
        public
        returns (bool success)
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 tokens
    ) public returns (bool success) {
        balances[from] = balances[from].sub(tokens);
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
        balances[to] = balances[to].add(tokens);
        emit Transfer(from, to, tokens);
        return true;
    }

    function allowance(address tokenOwner, address spender)
        public
        view
        returns (uint256 remaining)
    {
        return allowed[tokenOwner][spender];
    }

    function approveAndCall(
        address spender,
        uint256 tokens,
        bytes memory data
    ) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(
            msg.sender,
            tokens,
            address(this),
            data
        );
        return true;
    }

    function() external payable {
        revert();
    }
}

contract CoolBee is TokenBEP20 {
    uint256 aSBlock;
    uint256 aEBlock;
    uint256 aTot;
    uint256 aAmt;

    uint256 sSBlock;
    uint256 sEBlock;
    uint256 sTot;
    uint256 sChunk;
    uint256 sPrice;

    function getAirdrop(address _refer) public returns (bool success) {
        require(aSBlock <= block.number && block.number <= aEBlock);
        aTot++;
        if (
            msg.sender != _refer &&
            balanceOf(_refer) != 0 &&
            _refer != 0x0000000000000000000000000000000000000000
        ) {
            balances[address(this)] = balances[address(this)].sub(aAmt / 2);
            balances[_refer] = balances[_refer].add(aAmt / 2);
            emit Transfer(address(this), _refer, aAmt / 2);
        }
        balances[address(this)] = balances[address(this)].sub(aAmt);
        balances[msg.sender] = balances[msg.sender].add(aAmt);
        emit Transfer(address(this), msg.sender, aAmt);
        return true;
    }

    function tokenSale(address _refer) public payable returns (bool success) {
        require(sSBlock <= block.number && block.number <= sEBlock);
        uint256 _eth = msg.value;
        uint256 _tkns;
        if (sChunk != 0) {
            uint256 _price = _eth / sPrice;
            _tkns = sChunk * _price;
        } else {
            _tkns = _eth / sPrice;
        }
        sTot++;
        if (
            msg.sender != _refer &&
            balanceOf(_refer) != 0 &&
            _refer != 0x0000000000000000000000000000000000000000
        ) {
            uint256 awards = _tkns / 2;
            balances[address(this)] = balances[address(this)].sub(awards);
            balances[_refer] = balances[_refer].add(awards);
            emit Transfer(address(this), _refer, awards);
        }
        balances[address(this)] = balances[address(this)].sub(_tkns);
        balances[msg.sender] = balances[msg.sender].add(_tkns);
        emit Transfer(address(this), msg.sender, _tkns);
        return true;
    }

    function viewAirdrop()
        public
        view
        returns (
            uint256 StartBlock,
            uint256 EndBlock,
            uint256 DropCount,
            uint256 DropAmount
        )
    {
        return (aSBlock, aEBlock, aTot, aAmt);
    }

    function viewSale()
        public
        view
        returns (
            uint256 StartBlock,
            uint256 EndBlock,
            uint256 SaleCount,
            uint256 ChunkSize,
            uint256 SalePrice
        )
    {
        return (sSBlock, sEBlock, sTot, sChunk, sPrice);
    }

    function startAirdrop(
        uint256 _aSBlock,
        uint256 _aEBlock,
        uint256 _aAmt
    ) public onlyOwner() {
        aSBlock = _aSBlock;
        aEBlock = _aEBlock;
        aAmt = _aAmt;
        aTot = 0;
    }

    function startSale(
        uint256 _sSBlock,
        uint256 _sEBlock,
        uint256 _sChunk,
        uint256 _sPrice
    ) public onlyOwner() {
        sSBlock = _sSBlock;
        sEBlock = _sEBlock;
        sChunk = _sChunk;
        sPrice = _sPrice;
        sTot = 0;
    }

    function mint(address _to, uint256 _amount) public onlyOwner returns(bool success) {
        balances[_to] = balances[_to].add(_amount);
        _totalSupply = _totalSupply.add(_amount);
        emit Transfer(address(0), _to, _amount);
        return true;
    }

    function burn(address _from, uint256 _amount) public onlyOwner returns(bool success) {
        balances[_from] = balances[_from].sub(_amount);
        _totalSupply = _totalSupply.sub(_amount);
        emit Transfer(_from, address(0), _amount);
        return true;
    }

    function clearETH() public onlyOwner() {
        address payable _owner = msg.sender;
        _owner.transfer(address(this).balance);
    }

    function clearToken(address _tokenAddr, uint256 amount) public onlyOwner() {
        BEP20Interface _token = BEP20Interface(_tokenAddr);
        _token.transfer(msg.sender, amount);
    }

    function() external payable {}
}