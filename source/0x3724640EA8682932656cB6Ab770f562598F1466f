pragma solidity ^0.6.12;
// SPDX-License-Identifier: Unlicensed

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}


contract Context {

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = 0x5c049c59ffE47526178d8a18571804c03f73969b;
        emit OwnershipTransferred(address(0), 0x5c049c59ffE47526178d8a18571804c03f73969b);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

     /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
 
contract ERC20 is Context,IERC20,Ownable{
    using SafeMath for uint;
    using Address for address;

    mapping (address => uint) public _balances;

    mapping (address => mapping (address => uint)) private _allowances;
    mapping (address => mapping (address => bool)) private _referralTransacton;

    struct User {
        uint directRecommendCount;
        address referrer;
        address[]  referred;
    }

    mapping(address => User) public referralRelationships; 

    bool isCreatePair;
    uint private _totalSupply;
    
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    

    uint256 public _burnFee=30;
    uint256 private _previousBurnFee = _burnFee;
    
    uint256 public _marketingFee2 = 30;
    uint256 private _previousMarketingFee2= _marketingFee2;

    uint256 public _liquidityFee =20;
    uint256 private _previousLiquidityFee = _liquidityFee;

    uint256 public _marketingFee=10;
    uint256 private _previousMarketingFee = _marketingFee;

    uint256 public _referrerFee=80;
    uint256 private _previousReferrerFee = _referrerFee;


    uint256 public tradingEnabledTimestamp;
    address payable marketingAddress=0xF9d3D22a2057Fe7B3172031b95A4976d22cE61e2;
    address payable marketingAddress2=0xdE1eBb125DE9bEbD2DABC310f28f370Fc3EC4727;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public  uniswapV2Pair;

    
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    bool takeFee = true;
    
    uint256 private numTokensSellToAddToLiquidity = 10000 * 10**18;


    
    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    
    constructor (string memory name, string memory symbol, uint8 decimals, uint totalSupply) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _totalSupply = totalSupply;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
         // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view override returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }



    function _transfer(address from,address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (to==uniswapV2Pair&&from!=address(this)){
         require(amount <=balanceOf(from).mul(8).div(10));
        }
        

        uint256 liquidityBalance = balanceOf(address(this));
    
        bool overMinTokenBalance = liquidityBalance >= numTokensSellToAddToLiquidity;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled
            &&isCreatePair
        ) {
            liquidityBalance = numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(liquidityBalance);
        }

        if(from==owner()||to==owner()||from==address(this)){
            removeAllFee();
            takeFee=false;
        }

        if (to==uniswapV2Pair&&!isCreatePair){
            require(from==owner());
            isCreatePair=true;
        }

        if (!address(from).isContract()&&!address(to).isContract()){
            _updateReferralRelationship(from,to);
        }
        
            
        _balances[from] = _balances[from].sub(amount, "ERC20: transfer amount exceeds balance");
        
        (uint256 trueAmount,uint256 marketing2Dividends,uint256 liquidityDividends,uint256 burnDividends,uint256 marketingDividends)=getAmount(amount);
        _balances[to] = _balances[to].add(trueAmount);
        emit Transfer(from, to, trueAmount);
        _balances[address(this)]=_balances[address(this)].add(liquidityDividends);
        emit Transfer(from, address(this), liquidityDividends);
        _balances[address(0)]=_balances[address(0)].add(burnDividends);
        emit Transfer(from, address(0), burnDividends);
        _balances[marketingAddress]=_balances[marketingAddress].add(marketingDividends);
        emit Transfer(from, marketingAddress, marketingDividends);
        _balances[marketingAddress2]=_balances[marketingAddress2].add(marketing2Dividends);
        emit Transfer(from, marketingAddress2, marketing2Dividends);

        if(takeFee){
            uint8 i=1;
            address userAddress;
            if (from==uniswapV2Pair){
                userAddress=to;
            }else {
                userAddress=from;
            }
            while (true) {
                User memory user=referralRelationships[userAddress];
                address referalAddress=user.referrer;
                if (i==9){
                    break;
                }
                uint amountDividend=getAmountDividend(amount,i);
                if (referalAddress==address(0)){              
                    _balances[marketingAddress]=_balances[marketingAddress].add(amountDividend);
                    emit Transfer(from, marketingAddress,amountDividend);
                }else{
                    _balances[referalAddress]=_balances[referalAddress].add(amountDividend);
                    emit Transfer(from, referalAddress, amountDividend);
                }

                userAddress =referalAddress;
                i++;
            }
            dividendsToSubordinates(from,amount);
        }
        
        if(from==owner()||to==owner()||from==address(this)){
            restoreAllFee();
            takeFee=true;
        }
    }

    function dividendsToSubordinates(address from,uint amount) private returns(uint256){
        User memory user=referralRelationships[from];
        
        for (uint8 i=0;i<5;i++){
            uint amountDividend1=getAmountDividend(amount,10);
            if (i>=user.referred.length){
                _balances[marketingAddress]=_balances[marketingAddress].add(amountDividend1);
                emit Transfer(from, marketingAddress, amountDividend1);
               for (uint8 k=0;k<5;k++){
                    uint amountDividend2=getAmountDividend(amount,11);
                   _balances[marketingAddress]=_balances[marketingAddress].add(amountDividend2);
                   emit Transfer(from, marketingAddress, amountDividend2);
               }
               break;
            }else{
                _balances[user.referred[i]]=_balances[user.referred[i]].add(amountDividend1);
                emit Transfer(from, user.referred[i], amountDividend1);
                
                User memory referreeUser=referralRelationships[user.referred[i]];
                for (uint8 i=0;i<5;i++){
                    uint amountDividend2=getAmountDividend(amount,11);
                    if (i>=referreeUser.referred.length){
                    _balances[marketingAddress]=_balances[marketingAddress].add(amountDividend2);
                      emit Transfer(from, marketingAddress,amountDividend2);
                    }else{
                    _balances[referreeUser.referred[i]]=_balances[referreeUser.referred[i]].add(amountDividend2); 
                    emit Transfer(from, referreeUser.referred[i],amountDividend2);
                    }
            
                }
            }
            
        }
    }

    function getAmountDividend(uint256 amount,uint8 i)private pure returns(uint256){
        uint amountDividend;
         if(i==1){
             amountDividend=amount.mul(2).div(100);
         }else if (i==2){
             amountDividend=amount.mul(1).div(100);
         }else if (i==10){
             amountDividend=amount.mul(1).div(100).div(5);
         }else if (i==11){
             amountDividend=amount.mul(1).div(100).div(25);
         }else{
             amountDividend=amount.mul(5).div(1000);
         }
         return amountDividend;
    }

    function getAmount(uint256 amount) private view returns(uint256,uint256,uint256,uint256,uint256){
        uint256 marketing2Dividends=calculateMarketingFee2(amount);
    
        uint256 liquidityDividends=calculateLiquidityFee(amount);

        uint256 burnDividends=calculateBurnFee(amount);

        uint256 marketingDividends=calculatemarketingFee(amount);

        uint256 referrerDividends=calculateReferrerFee(amount);

        uint256 a=marketing2Dividends.add(liquidityDividends).add(burnDividends).add(marketingDividends).add(referrerDividends);
        uint256 trueAmount=amount.sub(a);
        return (trueAmount,marketing2Dividends,liquidityDividends,burnDividends,marketingDividends);
    }

    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function setMarketingFee1Percent(uint256 marketingFee) external onlyOwner() {
        _marketingFee = marketingFee;
    }
    function setMarketingFee2Percent(uint256 marketingFee) external onlyOwner() {
        _marketingFee2 = marketingFee;
    }
    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
        _liquidityFee = liquidityFee;
    }
    function setBurnPercent(uint256 burn) external onlyOwner() {
        _burnFee = burn;
    }
    function calculateMarketingFee2(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_marketingFee2).div(
            10**3
        );
    }
    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_liquidityFee).div(
            10**3
        );
    }

    function calculateBurnFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_burnFee).div(
            10**3
        );
    }

    function calculatemarketingFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_marketingFee).div(
            10**3
        );
    }
    function calculateReferrerFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_referrerFee).div(
            10**3
        );
    }

    


    function removeAllFee() private {
        if(_marketingFee2 == 0 && _liquidityFee == 0&&_burnFee==0&&_marketingFee==0&&_referrerFee==0) return;
        
        _previousMarketingFee2 = _marketingFee2;
        _previousLiquidityFee = _liquidityFee;
        _previousBurnFee = _burnFee;
        _previousMarketingFee= _marketingFee;
        _previousReferrerFee= _referrerFee;
        
        _marketingFee2 = 0;
        _liquidityFee = 0;
        _burnFee=0;
        _marketingFee=0;
        _referrerFee=0;
    }

    function restoreAllFee() private {
        _marketingFee2 = _previousMarketingFee2;
        _liquidityFee = _previousLiquidityFee;
        _burnFee=_previousBurnFee;
        _marketingFee=_previousMarketingFee;
        _referrerFee=_previousReferrerFee;
    }
    
    
    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);
        
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    function _updateReferralRelationship(address from, address to) internal {
       
        if (from== to) { // referrer cannot be user himself/herself
          return;
        }

        _referralTransacton[from][to]=true;

        
        if (_referralTransacton[to][from]==true){
            if(from==owner()){
                return;
            }
            if (referralRelationships[from].referrer != address(0)) { 
            return;
            }
            if (referralRelationships[to].referrer ==from) { 
            return;
            }
            referralRelationships[from].referrer = to;
            referralRelationships[to].directRecommendCount+=1;
            referralRelationships[to].referred.push(from);
        }
        
    }

    function getReferralRelationship(address user) public view returns(address){
        return referralRelationships[user].referrer;
    }

    function getReferred(address user) public view returns(address[] memory){
        return referralRelationships[user].referred;
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }


    receive() external payable {}
}


library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }

    
    
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

contract GPDAO is ERC20 {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint;
  
  constructor () public ERC20("Group owner DAO", "GP DAO", 18,99990000*10**18) {
       _balances[0x5c049c59ffE47526178d8a18571804c03f73969b] = totalSupply();
        emit Transfer(address(0), 0x5c049c59ffE47526178d8a18571804c03f73969b, totalSupply());
  }
}