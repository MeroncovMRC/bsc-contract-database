// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

library SafeMath {
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    modifier nonReentrant() {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        _status = _ENTERED;

        _;

        _status = _NOT_ENTERED;
    }
}

contract WithdrawableOwnable is Ownable, ReentrancyGuard {
    using Address for address;

    function withdraw(uint256 amount) external virtual onlyOwner nonReentrant {
        uint256 balance = address(this).balance;

        require(
            amount <= balance,
            "Withdrawable: you cannot remove this total amount"
        );

        Address.sendValue(payable(_msgSender()), amount);

        emit Withdraw(_msgSender(), amount);
    }

    event Withdraw(address sender, uint256 value);

    function withdrawERC20(address tokenAddress, uint256 amount)
        external
        virtual
        nonReentrant
        onlyOwner
    {
        require(
            tokenAddress.isContract(),
            "Withdrawable: ERC20 token address must be a contract"
        );

        IERC20 tokenContract = IERC20(tokenAddress);

        uint256 balance = tokenContract.balanceOf(address(this));
        require(
            amount <= balance,
            "Withdrawable: you cannot remove this total amount"
        );

        require(
            tokenContract.transfer(_msgSender(), amount),
            "Withdrawable: Fail on transfer"
        );

        emit WithdrawERC20(_msgSender(), tokenAddress, amount);
    }

    event WithdrawERC20(address sender, address token, uint256 value);

    function withdrawERC721(address tokenAddress, uint256[] memory tokenIds)
        external
        virtual
        onlyOwner
        nonReentrant
    {
        require(
            tokenAddress.isContract(),
            "ERC721 token address must be a contract"
        );

        IERC721 tokenContract = IERC721(tokenAddress);
        for (uint256 i = 0; i < tokenIds.length; i++) {
            require(
                tokenContract.ownerOf(tokenIds[i]) == address(this),
                "This contract doesn't own the NFT you are trying to withdraw"
            );
            tokenContract.safeTransferFrom(
                address(this),
                _msgSender(),
                tokenIds[i]
            );
        }
        emit WithdrawERC721(tokenAddress, tokenIds);
    }

    event WithdrawERC721(address tokenAddress, uint256[] tokenIds);

    function withdrawERC1155(
        address tokenAddress,
        uint256 id,
        uint256 amount
    ) external virtual onlyOwner nonReentrant {
        require(
            tokenAddress.isContract(),
            "ERC1155 token address must be a contract"
        );

        IERC1155 tokenContract = IERC1155(tokenAddress);
        require(
            tokenContract.balanceOf(address(this), id) >= amount,
            "this contract doesn't own the amount of tokens to withdraw"
        );

        tokenContract.safeTransferFrom(
            address(this),
            _msgSender(),
            id,
            amount,
            ""
        );
    }

    event WithdrawERC1155(address tokenAddress, uint256 id, uint256 amount);
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

interface IERC165 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

interface IERC721 is IERC165 {
    event Transfer(
        address indexed from,
        address indexed to,
        uint256 indexed tokenId
    );

    event Approval(
        address indexed owner,
        address indexed approved,
        uint256 indexed tokenId
    );

    event ApprovalForAll(
        address indexed owner,
        address indexed operator,
        bool approved
    );

    function balanceOf(address owner) external view returns (uint256 balance);

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function approve(address to, uint256 tokenId) external;

    function setApprovalForAll(address operator, bool _approved) external;

    function getApproved(uint256 tokenId)
        external
        view
        returns (address operator);

    function isApprovedForAll(address owner, address operator)
        external
        view
        returns (bool);
}

interface IERC1155 is IERC165 {
    event TransferSingle(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 id,
        uint256 value
    );

    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    event ApprovalForAll(
        address indexed account,
        address indexed operator,
        bool approved
    );

    event URI(string value, uint256 indexed id);

    function balanceOf(address account, uint256 id)
        external
        view
        returns (uint256);

    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)
        external
        view
        returns (uint256[] memory);

    function setApprovalForAll(address operator, bool approved) external;

    function isApprovedForAll(address account, address operator)
        external
        view
        returns (bool);

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes calldata data
    ) external;

    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) external;
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address to, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

contract DDCToken is ERC20, WithdrawableOwnable {
    using SafeMath for uint256;

    bool public tradingIsEnabled = false;

    IUniswapV2Router02 public dexRouter;
    address public dexPair;

    address public constant burnAddress =
        0x000000000000000000000000000000000000dEaD;

    uint256 public burnSellFee = 1;
    uint256 public reserveSellFee = 0;
    uint256 public rewardsSellFee = 1;
    uint256 public teamSellFee = 1;
    uint256 public ecossSellFee = 2;
    uint256 public marketingSellFee = 2;

    uint256 public constant maxSellFee = 10; // 10%

    address public rewardsWallet =
        address(0xD561c2d98DDA4013BC1fbA62B8f647575854294d);
    address public constant ongWallet =
        address(0x7Ea72ac93473b826240A06D5B45BbD4aFc617812);
    address public teamWallet =
        address(0x6F6b24fbC730f0b43c9Ee48c39fa82dd3ba9269a);
    address public constant teamOneWallet =
        address(0x926aFAfdEaB58893895c97c52976f267D0082281);
    address public constant teamTwoWallet =
        address(0x908f9c233A6f612768B6435BA68ADF6692A8a116);
    address public marketingWallet =
        address(0xeeb5c6C2aaFB25b705334aF74A358cA60AEFCf72);
    address public reserveWallet =
        address(0xC1001C3A6d3bFd49bD8650477501a2E2CA41194C);
    address public ecossWallet =
        address(0xd438CeA107d30c596623eEE23e10C314C259D612);
    address public constant investidorWallet =
        address(0xB01042F9469c97EEbA1f7230C6a60BC34a39265C);
    address public constant privateSaleWallet =
        address(0x468e3dd585705dca681818c6C5baeFC7D94D6A24);
    address public constant liquidityWallet =
        address(0x5529443c19E2821eE1fc758e14DF49b525FD3Db2);

    uint256 public totalSellFee = 7;

    uint256 public constant maxSellAmount = 100000 * 10**18;

    mapping(address => bool) public isExcludedFromFees;
    mapping(address => bool) public isExcludedFromPause;
    mapping(address => bool) public automatedMarketMakerPairs;

    uint256 public totalTokens;

    constructor() ERC20("Dig Dog Crypto", "DDC") {
        excludeFromFees(address(this), true);
        excludeFromFees(owner(), true);

        excludeFromPause(address(this), true);
        excludeFromPause(owner(), true);

        totalTokens = 100000000 * 10**decimals(); // Total supply of 100 Million tokens.

        _mint(rewardsWallet, totalTokens.mul(500).div(1000));
        _mint(ongWallet, totalTokens.mul(100).div(1000));
        _mint(teamWallet, totalTokens.mul(20).div(1000));
        _mint(teamOneWallet, totalTokens.mul(40).div(1000));
        _mint(teamTwoWallet, totalTokens.mul(40).div(1000));
        _mint(marketingWallet, totalTokens.mul(60).div(1000));
        _mint(reserveWallet, totalTokens.mul(60).div(1000));
        _mint(ecossWallet, totalTokens.mul(50).div(1000));
        _mint(investidorWallet, totalTokens.mul(50).div(1000));
        _mint(privateSaleWallet, totalTokens.mul(45).div(1000));
        _mint(liquidityWallet, totalTokens.mul(35).div(1000));

        dexRouter = IUniswapV2Router02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );

        dexPair = IUniswapV2Factory(dexRouter.factory()).createPair(
            address(this),
            dexRouter.WETH()
        );
        _setAutomatedMarketMakerPair(dexPair, true);
    }

    function getBurnedAmountTotal() external view returns (uint256 _amount) {
        return balanceOf(burnAddress);
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
        external
        onlyOwner
    {
        require(pair != dexPair, "cannot be removed");

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value)
        private
        onlyOwner
    {
        automatedMarketMakerPairs[pair] = value;

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    receive() external payable {}

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        require(isExcludedFromFees[account] != excluded, "Already excluded");
        isExcludedFromFees[account] = excluded;

        emit ExcludeFromFees(account, excluded);
    }

    function excludeFromPause(address account, bool excluded) public onlyOwner {
        require(isExcludedFromPause[account] != excluded, "Already excluded");
        isExcludedFromPause[account] = excluded;

        emit ExcludeFromPause(account, excluded);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override nonReentrant {
        require(from != address(0), "Transfer from zero address");
        require(to != address(0), "Transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(
            tradingIsEnabled ||
                (isExcludedFromPause[from] || isExcludedFromPause[to]),
            "Trading not started"
        );

        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {
            super._transfer(from, to, amount);
        } else {
            uint256 tokensToBurnOrReserve = 0;
            uint256 tokensToRewards = 0;
            uint256 tokensToTeam = 0;
            uint256 tokensToEcoss = 0;
            uint256 tokensToMarketing = 0;
            uint256 finalAmount = 0;

            if (automatedMarketMakerPairs[to]) {
                require(amount <= maxSellAmount, "Max sell amount exceeded");

                uint256 burnFee = burnSellFee;
                if (burnFee > 0) {
                    uint256 burnedTokens = balanceOf(burnAddress);
                    if (burnedTokens >= (totalTokens / 2)) {
                        setReserveFee(burnFee);
                        setBurnFee(0);
                    } else {
                        tokensToBurnOrReserve = (amount * burnFee) / 100;
                        super._transfer(
                            from,
                            burnAddress,
                            tokensToBurnOrReserve
                        );
                    }
                }

                uint256 reserveFee = reserveSellFee;
                if (reserveFee > 0) {
                    tokensToBurnOrReserve = (amount * reserveFee) / 100;
                    super._transfer(from, reserveWallet, tokensToBurnOrReserve);
                }

                uint256 rewardsFee = rewardsSellFee;
                if (rewardsFee > 0) {
                    tokensToRewards = (amount * rewardsFee) / 100;
                    super._transfer(from, rewardsWallet, tokensToRewards);
                }

                uint256 teamFee = teamSellFee;
                if (teamFee > 0) {
                    tokensToTeam = (amount * teamFee) / 100;
                    super._transfer(from, teamWallet, tokensToTeam);
                }

                uint256 ecossFee = ecossSellFee;
                if (ecossFee > 0) {
                    tokensToEcoss = (amount * ecossFee) / 100;
                    super._transfer(from, ecossWallet, tokensToEcoss);
                }

                uint256 marketingFee = marketingSellFee;
                if (marketingFee > 0) {
                    tokensToMarketing = (amount * marketingFee) / 100;
                    super._transfer(from, marketingWallet, tokensToMarketing);
                }
            }

            finalAmount =
                amount -
                tokensToBurnOrReserve -
                tokensToRewards -
                tokensToTeam -
                tokensToEcoss -
                tokensToMarketing;
            super._transfer(from, to, finalAmount);
        }
    }

    function setReserveWallet(address _newWallet) external onlyOwner {
        reserveWallet = _newWallet;

        emit ReserveWalletUpdated(_newWallet);
    }

    function setRewardsWallet(address _newWallet) external onlyOwner {
        rewardsWallet = _newWallet;

        emit RewardsWalletUpdated(_newWallet);
    }

    function setTeamWallet(address _newWallet) external onlyOwner {
        teamWallet = _newWallet;

        emit TeamWalletUpdated(_newWallet);
    }

    function setEcossWallet(address _newWallet) external onlyOwner {
        ecossWallet = _newWallet;

        emit EcossWalletUpdated(_newWallet);
    }

    function setMarketingWallet(address _newWallet) external onlyOwner {
        marketingWallet = _newWallet;

        emit MarketingWalletUpdated(_newWallet);
    }

    function setBurnFee(uint256 _newFee) public onlyOwner {
        uint256 newTotalSellFee = _newFee +
            reserveSellFee +
            rewardsSellFee +
            teamSellFee +
            ecossSellFee +
            marketingSellFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        burnSellFee = _newFee;

        emit BurnFeeUpdated(_newFee);
    }

    function setReserveFee(uint256 _newFee) public onlyOwner {
        uint256 newTotalSellFee = burnSellFee +
            _newFee +
            rewardsSellFee +
            teamSellFee +
            ecossSellFee +
            marketingSellFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        reserveSellFee = _newFee;

        emit ReserveFeeUpdated(_newFee);
    }

    function setRewardsFee(uint256 _newFee) external onlyOwner {
        uint256 newTotalSellFee = burnSellFee +
            reserveSellFee +
            _newFee +
            teamSellFee +
            ecossSellFee +
            marketingSellFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        rewardsSellFee = _newFee;

        emit RewardsFeeUpdated(_newFee);
    }

    function setTeamFee(uint256 _newFee) external onlyOwner {
        uint256 newTotalSellFee = burnSellFee +
            reserveSellFee +
            rewardsSellFee +
            _newFee +
            ecossSellFee +
            marketingSellFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        teamSellFee = _newFee;

        emit TeamFeeUpdated(_newFee);
    }

    function setEcossFee(uint256 _newFee) external onlyOwner {
        uint256 newTotalSellFee = burnSellFee +
            reserveSellFee +
            rewardsSellFee +
            teamSellFee +
            _newFee +
            marketingSellFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        ecossSellFee = _newFee;

        emit EcossFeeUpdated(_newFee);
    }

    function setMarketingFee(uint256 _newFee) external onlyOwner {
        uint256 newTotalSellFee = burnSellFee +
            reserveSellFee +
            rewardsSellFee +
            teamSellFee +
            ecossSellFee +
            _newFee;
        require(
            newTotalSellFee <= maxSellFee,
            "Maximum total sell fee exceeded"
        );
        setTotalFee(newTotalSellFee);
        marketingSellFee = _newFee;

        emit MarketingFeeUpdated(_newFee);
    }

    function setTotalFee(uint256 _newFee) internal onlyOwner {
        totalSellFee = _newFee;

        emit MaxSellFeeUpdated(_newFee);
    }

    function startTrading() external onlyOwner {
        tradingIsEnabled = true;
    }

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeFromPause(address indexed account, bool isExcluded);
    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event ReserveWalletUpdated(address indexed wallet);
    event RewardsWalletUpdated(address indexed wallet);
    event TeamWalletUpdated(address indexed wallet);
    event EcossWalletUpdated(address indexed wallet);
    event MarketingWalletUpdated(address indexed wallet);

    event BurnFeeUpdated(uint256 indexed fee);
    event ReserveFeeUpdated(uint256 indexed fee);
    event RewardsFeeUpdated(uint256 indexed fee);
    event TeamFeeUpdated(uint256 indexed fee);
    event EcossFeeUpdated(uint256 indexed fee);
    event MarketingFeeUpdated(uint256 indexed fee);

    event MaxSellFeeUpdated(uint256 indexed amount);
}