// File: contracts/libraries/TransferHelper.sol


pragma solidity =0.6.12;

// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeApprove: approve failed'
        );
    }

    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeTransfer: transfer failed'
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::transferFrom: transferFrom failed'
        );
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
    }
}

// File: contracts/interfaces/ICoinSwapV1Pair.sol


pragma solidity =0.6.12;

interface ICoinSwapV1Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data, address from) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address , address)external;
}

// File: contracts/interfaces/IFeeManager.sol


pragma solidity =0.6.12;

interface IFeeManager {
    function feeToRate() external view returns (uint256);

    function isOpenSwapMining() external view returns (uint8);

    function supportDeductionFeeValue() external view returns (uint256);

    function supportDeductionFeeSwitches(address from) external view returns (uint8);

    function defaultFeeAddress() external view returns (address);

    function feeToken() external view returns (address);

    function blackHoleAddress() external view returns (address);

    function router() external view returns (address);

    function isWhitelist(address _token) external view returns (bool);

    function feeSplit(address from, uint256 feeValue) external returns (uint[] memory valueData, address[] memory addressData);

    function getTokenQuantity(address tokenIn, address tokenOut, uint256 tokenAmount) external view returns (uint256);
}

// File: contracts/libraries/SafeMath.sol


pragma solidity =0.6.12;

// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)

library SafeMath {
    function add(uint x, uint y) internal pure returns (uint z) {
        require((z = x + y) >= x, 'ds-math-add-overflow');
    }

    function sub(uint x, uint y) internal pure returns (uint z) {
        require((z = x - y) <= x, 'ds-math-sub-underflow');
    }

    function mul(uint x, uint y) internal pure returns (uint z) {
        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

// File: contracts/interfaces/IERC20.sol


pragma solidity =0.6.12;

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function burn(uint256 amount) external;

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

// File: contracts/libraries/CoinSwapV1Library.sol


pragma solidity =0.6.12;





library CoinSwapV1Library {
    using SafeMath for uint;

    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, 'CoinSwapV1Library: IDENTICAL_ADDRESSES');
        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), 'CoinSwapV1Library: ZERO_ADDRESS');
    }

    // calculates the CREATE2 address for a pair without making any external calls
    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(uint(keccak256(abi.encodePacked(
                hex'ff',
                factory,
                keccak256(abi.encodePacked(token0, token1)),
                hex'e7ff72c0256b183c54523faca44414712d6fd65a03baa024a23b8eb68f5e6d1c' // init code hash
            ))));
    }

    // fetches and sorts the reserves for a pair
    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
        (address token0,) = sortTokens(tokenA, tokenB);
        (uint reserve0, uint reserve1,) = ICoinSwapV1Pair(pairFor(factory, tokenA, tokenB)).getReserves();
        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
    }

    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
        require(amountA > 0, 'CoinSwapV1Library: INSUFFICIENT_AMOUNT');
        require(reserveA > 0 && reserveB > 0, 'CoinSwapV1Library: INSUFFICIENT_LIQUIDITY');
        amountB = amountA.mul(reserveB) / reserveA;
    }

    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
        require(amountIn > 0, 'CoinSwapV1Library: INSUFFICIENT_INPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'CoinSwapV1Library: INSUFFICIENT_LIQUIDITY');
        uint amountInWithFee = amountIn.mul(997);
        uint numerator = amountInWithFee.mul(reserveOut);
        uint denominator = reserveIn.mul(1000).add(amountInWithFee);
        amountOut = numerator / denominator;
    }

    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
    function getAmountOutNoFee1(uint amountIn, uint reserveIn, uint reserveOut, address feeManager, address inToken, address outToken) internal view returns (uint amountOut, uint fee) {
        require(amountIn > 0, 'CoinSwapV1Library: INSUFFICIENT_INPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'CoinSwapV1Library: INSUFFICIENT_LIQUIDITY');
        uint realAmountIn = amountIn.mul(1000) / 997;
        fee = realAmountIn .sub(amountIn);
        uint numerator = amountIn.mul(reserveOut);
        uint denominator = reserveIn.add(amountIn);
        amountOut = numerator / denominator;
        fee = IFeeManager(feeManager).getTokenQuantity(inToken, outToken, fee);
    }

    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
        require(amountOut > 0, 'CoinSwapV1Library: INSUFFICIENT_OUTPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'CoinSwapV1Library: INSUFFICIENT_LIQUIDITY');
        uint numerator = reserveIn.mul(amountOut).mul(1000);
        uint denominator = reserveOut.sub(amountOut).mul(997);
        amountIn = (numerator / denominator).add(1);
    }

    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
    function getAmountInNoFee1(uint amountOut, uint reserveIn, uint reserveOut, address feeManager, address inToken, address outToken) internal view returns (uint amountIn, uint fee) {
        require(amountOut > 0, 'CoinSwapV1Library: INSUFFICIENT_OUTPUT_AMOUNT');
        require(reserveIn > 0 && reserveOut > 0, 'CoinSwapV1Library: INSUFFICIENT_LIQUIDITY');
        uint numerator = reserveIn.mul(amountOut).mul(1000);
        uint denominator = reserveOut.sub(amountOut).mul(997);
        uint realAmountIn = (numerator / denominator).add(1);
        fee = realAmountIn.mul(3) / 1000;
        amountIn = realAmountIn.sub(fee);
        fee = IFeeManager(feeManager).getTokenQuantity(inToken, outToken, fee);
    }

    // performs chained getAmountOut calculations on any number of pairs
    function getAmountsOut1(address factory, uint amountIn, address[] memory path, address feeManager, address from) internal view returns (uint[] memory amounts, uint[] memory feeAmounts) {
        require(path.length >= 2, 'CoinSwapV1Library: INVALID_PATH');
        amounts = new uint[](path.length);
        feeAmounts = new uint[](path.length);
        amounts[0] = amountIn;
        uint needCoinsNum;
        for (uint i; i < path.length - 1; i++) {
            (amounts[i + 1], feeAmounts[i], needCoinsNum) = feeConsult(factory, amounts[i], feeManager, path[i], path[i + 1], false, from, needCoinsNum, i);
        }
    }

    // performs chained getAmountIn calculations on any number of pairs
    function getAmountsIn1(address factory, uint amountOut, address[] memory path, address feeManager, address from) internal view returns (uint[] memory amounts, uint[] memory feeAmounts) {
        require(path.length >= 2, 'CoinSwapV1Library: INVALID_PATH');
        amounts = new uint[](path.length);
        feeAmounts = new uint[](path.length);
        amounts[amounts.length - 1] = amountOut;
        uint needCoinsNum;
        for (uint i = path.length - 1; i > 0; i--) {
            (amounts[i - 1], feeAmounts[i - 1], needCoinsNum) = feeConsult(factory, amounts[i], feeManager, path[i - 1], path[i], true, from, needCoinsNum, i);
        }
    }

    function isSupportSwitch(address feeManager, address from) internal view returns (bool){
        return IFeeManager(feeManager).supportDeductionFeeSwitches(from) == 1;
    }

    struct Params {
        uint amount;
        uint fee;
        uint tempNum;
        uint reserveIn;
        uint reserveOut;
        uint newNeedCoinsNum;
    }

    function feeConsult(address factory, uint amountInput, address feeManager, address path, address path1, bool isIn, address from, uint needCoinsNum, uint i) internal view returns (uint, uint, uint){
        Params memory params = Params(0, 0, 0, 0, 0, 0);
        (params.reserveIn, params.reserveOut) = getReserves(factory, path, path1);
        if (isSupportSwitch(feeManager, from)) {
            if (isIn) {
                (params.amount, params.fee) = getAmountInNoFee1(amountInput, params.reserveIn, params.reserveOut, feeManager, path, path1);
                if (i == 1) params.tempNum = params.tempNum.add(params.amount);
            } else {
                (params.amount, params.fee) = getAmountOutNoFee1(amountInput, params.reserveIn, params.reserveOut, feeManager, path, path1);
                if (i == 0) params.tempNum = params.tempNum.add(amountInput);
            }
            if (path != IFeeManager(feeManager).feeToken()) {
                params.tempNum = 0;
            }
            params.newNeedCoinsNum = params.tempNum.add(needCoinsNum).add(params.fee);
            if (params.fee > 0 && IERC20(IFeeManager(feeManager).feeToken()).balanceOf(from) >= params.newNeedCoinsNum) {
                return (params.amount, params.fee, params.newNeedCoinsNum);
            }
        }
        params.fee = 0;
        params.tempNum = 0;
        if (isIn) {
            (params.amount) = getAmountIn(amountInput, params.reserveIn, params.reserveOut);
            if (i == 1) params.tempNum = params.tempNum.add(params.amount);
        } else {
            (params.amount) = getAmountOut(amountInput, params.reserveIn, params.reserveOut);
            if (i == 0) params.tempNum = params.tempNum.add(amountInput);
        }
        if (path != IFeeManager(feeManager).feeToken()) {
            params.tempNum = 0;
        }
        return (params.amount, params.fee, params.tempNum.add(needCoinsNum));
    }
}

// File: contracts/interfaces/IWETH.sol


pragma solidity =0.6.12;

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}

// File: contracts/interfaces/IOracle.sol


pragma solidity =0.6.12;

interface IOracle {
    function update(address tokenA, address tokenB) external;

    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);

    function consultPriceDecPercent() external view returns (uint);
}

// File: contracts/CoinSwapV1Router02.sol


pragma solidity =0.6.12;






interface ICoinSwapV1Factory1 {
    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface ISwapMining {
    function swap(address account, address input, address output, uint256 amount) external returns (bool);
}

contract CoinSwapV1Router02 {
    using SafeMath for uint;

    address public owner;
    address public immutable factory;//
    address public immutable WETH;
    address public swapMining;
    address public feeManager;
    IOracle public oracle;

    event FeeSplit(address src, uint256 _tokenId, address _token, address _to, uint256 _value);
    event FeeBurn(address _token, address _to, uint256 _value);
    event SetOwner(address _owner);
    event SetSwapMining(address _swapMining);
    event SetFeeManager(address _feeManager);
    event SetOracle(address _oracle);

    modifier ensure(uint deadline) {
        require(deadline >= block.timestamp, 'CoinSwapV1Router02: EXPIRED');
        _;
    }

    constructor(address _factory, address _WETH) public {
        factory = _factory;
        WETH = _WETH;
        owner = msg.sender;
    }

    receive() external payable {
        assert(msg.sender == WETH);
        // only accept ETH via fallback from the WETH contract
    }

    modifier onlyOwner() {
        require(owner == msg.sender, "manger: caller is not the manger");
        _;
    }

    function setOwner(address _owner) external onlyOwner {
        require(_owner != address(0), "_owner is zero address");
        owner = _owner;
        emit SetOwner( _owner);
    }

    function setSwapMining(address _swapMining) public onlyOwner {
        swapMining = _swapMining;
        emit SetSwapMining(_swapMining);
    }

    function setFeeManager(address _feeManager) public onlyOwner {
        require(_feeManager != address(0), "_feeManager is zero address");
        feeManager = _feeManager;
        emit SetFeeManager(_feeManager);
    }

    function setOracle(IOracle _oracle) public onlyOwner {
        oracle = _oracle;
        emit SetOracle(address(_oracle));
    }

    // **** ADD LIQUIDITY ****
    function _addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin
    ) internal virtual returns (uint amountA, uint amountB) {
        // create the pair if it doesn't exist yet
        if (ICoinSwapV1Factory1(factory).getPair(tokenA, tokenB) == address(0)) {
            ICoinSwapV1Factory1(factory).createPair(tokenA, tokenB);
        }
        (uint reserveA, uint reserveB) = CoinSwapV1Library.getReserves(factory, tokenA, tokenB);
        if (reserveA == 0 && reserveB == 0) {
            (amountA, amountB) = (amountADesired, amountBDesired);
        } else {
            uint amountBOptimal = CoinSwapV1Library.quote(amountADesired, reserveA, reserveB);
            if (amountBOptimal <= amountBDesired) {
                require(amountBOptimal >= amountBMin, 'CoinSwapV1Router02: INSUFFICIENT_B_AMOUNT');
                (amountA, amountB) = (amountADesired, amountBOptimal);
            } else {
                uint amountAOptimal = CoinSwapV1Library.quote(amountBDesired, reserveB, reserveA);
                assert(amountAOptimal <= amountADesired);
                require(amountAOptimal >= amountAMin, 'CoinSwapV1Router02: INSUFFICIENT_A_AMOUNT');
                (amountA, amountB) = (amountAOptimal, amountBDesired);
            }
        }
    }

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external virtual ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
        address pair = CoinSwapV1Library.pairFor(factory, tokenA, tokenB);
        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
        liquidity = ICoinSwapV1Pair(pair).mint(to);
        updatePrice(tokenA, tokenB);
    }

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external virtual payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
        (amountToken, amountETH) = _addLiquidity(
            token,
            WETH,
            amountTokenDesired,
            msg.value,
            amountTokenMin,
            amountETHMin
        );
        address pair = CoinSwapV1Library.pairFor(factory, token, WETH);
        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
        IWETH(WETH).deposit{value : amountETH}();
        assert(IWETH(WETH).transfer(pair, amountETH));
        liquidity = ICoinSwapV1Pair(pair).mint(to);
        // refund dust eth, if any
        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
        updatePrice(token, WETH);
    }

    // **** REMOVE LIQUIDITY ****
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) public virtual ensure(deadline) returns (uint amountA, uint amountB) {
        address pair = CoinSwapV1Library.pairFor(factory, tokenA, tokenB);
        ICoinSwapV1Pair(pair).transferFrom(msg.sender, pair, liquidity);
        // send liquidity to pair
        (uint amount0, uint amount1) = ICoinSwapV1Pair(pair).burn(to);
        (address token0,) = CoinSwapV1Library.sortTokens(tokenA, tokenB);
        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
        require(amountA >= amountAMin, 'CoinSwapV1Router02: INSUFFICIENT_A_AMOUNT');
        require(amountB >= amountBMin, 'CoinSwapV1Router02: INSUFFICIENT_B_AMOUNT');
        updatePrice(tokenA, tokenB);
    }

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) public virtual ensure(deadline) returns (uint amountToken, uint amountETH) {
        (amountToken, amountETH) = removeLiquidity(
            token,
            WETH,
            liquidity,
            amountTokenMin,
            amountETHMin,
            address(this),
            deadline
        );
        TransferHelper.safeTransfer(token, to, amountToken);
        IWETH(WETH).withdraw(amountETH);
        TransferHelper.safeTransferETH(to, amountETH);
        updatePrice(token, WETH);
    }

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual returns (uint amountA, uint amountB) {
        address pair = CoinSwapV1Library.pairFor(factory, tokenA, tokenB);
        uint value = approveMax ? uint(- 1) : liquidity;
        ICoinSwapV1Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
        updatePrice(tokenA, tokenB);
    }

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual returns (uint amountToken, uint amountETH) {
        address pair = CoinSwapV1Library.pairFor(factory, token, WETH);
        uint value = approveMax ? uint(- 1) : liquidity;
        ICoinSwapV1Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
        updatePrice(token, WETH);
    }

    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) public virtual ensure(deadline) returns (uint amountETH) {
        (, amountETH) = removeLiquidity(
            token,
            WETH,
            liquidity,
            amountTokenMin,
            amountETHMin,
            address(this),
            deadline
        );
        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
        IWETH(WETH).withdraw(amountETH);
        TransferHelper.safeTransferETH(to, amountETH);
        updatePrice(token, WETH);
    }

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual returns (uint amountETH) {
        address pair = CoinSwapV1Library.pairFor(factory, token, WETH);
        uint value = approveMax ? uint(- 1) : liquidity;
        ICoinSwapV1Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(
            token, liquidity, amountTokenMin, amountETHMin, to, deadline
        );
        updatePrice(token, WETH);
    }

    // **** SWAP ****
    // requires the initial amount to have already been sent to the first pair
    function _swap(uint[] memory amounts, uint[] memory feeAmounts, address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = CoinSwapV1Library.sortTokens(input, output);
            uint amountOut = amounts[i + 1];
            bool can = false;
            if (CoinSwapV1Library.isSupportSwitch(feeManager, msg.sender) && feeAmounts[i] > 0) {
                feeTransFer(msg.sender, feeAmounts[i]);
                can = IFeeManager(feeManager).isOpenSwapMining() == 0;
            }
            if ((swapMining != address(0)) && !can) {
                ISwapMining(swapMining).swap(msg.sender, input, output, amountOut);
            }
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
            address to = i < path.length - 2 ? CoinSwapV1Library.pairFor(factory, output, path[i + 2]) : _to;
            ICoinSwapV1Pair(CoinSwapV1Library.pairFor(factory, input, output)).swap(
                amount0Out, amount1Out, to, new bytes(0), msg.sender
            );
            updatePrice(path[i], path[i + 1]);
        }
    }

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual ensure(deadline) returns (uint[] memory amounts) {
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsOut1(factory, amountIn, path, feeManager, msg.sender);
        require(amounts[amounts.length - 1] >= amountOutMin, 'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, feeAmounts, path, to);
    }

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual ensure(deadline) returns (uint[] memory amounts) {
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsIn1(factory, amountOut, path, feeManager, msg.sender);
        require(amounts[0] <= amountInMax, 'CoinSwapV1Router02: EXCESSIVE_INPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, feeAmounts, path, to);
    }

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual payable ensure(deadline) returns (uint[] memory amounts){
        require(path[0] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsOut1(factory, msg.value, path, feeManager, msg.sender);
        require(amounts[amounts.length - 1] >= amountOutMin, 'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).deposit{value : amounts[0]}();
        assert(IWETH(WETH).transfer(CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]));
        _swap(amounts, feeAmounts, path, to);
    }

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual ensure(deadline) returns (uint[] memory amounts){
        require(path[path.length - 1] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsIn1(factory, amountOut, path, feeManager, msg.sender);
        require(amounts[0] <= amountInMax, 'CoinSwapV1Router02: EXCESSIVE_INPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, feeAmounts, path, address(this));
        IWETH(WETH).withdraw(amounts[amounts.length - 1]);
        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
    }

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual ensure(deadline) returns (uint[] memory amounts){
        require(path[path.length - 1] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsOut1(factory, amountIn, path, feeManager, msg.sender);
        require(amounts[amounts.length - 1] >= amountOutMin, 'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, feeAmounts, path, address(this));
        IWETH(WETH).withdraw(amounts[amounts.length - 1]);
        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
    }

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual payable ensure(deadline) returns (uint[] memory amounts){
        require(path[0] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        require(feeManager != address(0), "ROUTER:feeManager is not zero address");
        uint[] memory feeAmounts;
        (amounts, feeAmounts) = CoinSwapV1Library.getAmountsIn1(factory, amountOut, path, feeManager, msg.sender);
        require(amounts[0] <= msg.value, 'CoinSwapV1Router02: EXCESSIVE_INPUT_AMOUNT');
        IWETH(WETH).deposit{value : amounts[0]}();
        assert(IWETH(WETH).transfer(CoinSwapV1Library.pairFor(factory, path[0], path[1]), amounts[0]));
        _swap(amounts, feeAmounts, path, to);
        // refund dust eth, if any
        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
    }

    struct Params {
        uint amountInput;
        uint amountOutput;
        uint feeAmount;
        uint reserve0;
        uint reserve1;
        uint reserveInput;
        uint reserveOutput;
    }
    // **** SWAP (supporting fee-on-transfer tokens) ****
    // requires the initial amount to have already been sent to the first pair
    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = CoinSwapV1Library.sortTokens(input, output);
            ICoinSwapV1Pair pair = ICoinSwapV1Pair(CoinSwapV1Library.pairFor(factory, input, output));
            Params memory params = Params(0, 0, 0, 0, 0, 0, 0);
            bool can = false;
            {// scope to avoid stack too deep errors
                (params.reserve0, params.reserve1,) = pair.getReserves();
                (params.reserveInput, params.reserveOutput) = input == token0 ? (params.reserve0, params.reserve1) : (params.reserve1, params.reserve0);
                params.amountInput = IERC20(input).balanceOf(address(pair)).sub(params.reserveInput);

                (params.amountOutput) = CoinSwapV1Library.getAmountOut(params.amountInput, params.reserveInput, params.reserveOutput);

                if (CoinSwapV1Library.isSupportSwitch(feeManager, msg.sender)) {
                    uint256 outValue;
                    (outValue, params.feeAmount) = CoinSwapV1Library.getAmountOutNoFee1(params.amountInput, params.reserveInput, params.reserveOutput, feeManager, path[i], path[i + 1]);
                    if (params.feeAmount > 0 && IERC20(IFeeManager(feeManager).feeToken()).balanceOf(msg.sender) >= params.feeAmount) {
                        params.amountOutput = outValue;
                        feeTransFer(msg.sender, params.feeAmount);
                        can = IFeeManager(feeManager).isOpenSwapMining() == 0;
                    }
                }
            }
            if ((swapMining != address(0)) && !can) {
                ISwapMining(swapMining).swap(msg.sender, input, output, params.amountOutput);
            }
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), params.amountOutput) : (params.amountOutput, uint(0));
            address to = i < path.length - 2 ? CoinSwapV1Library.pairFor(factory, output, path[i + 2]) : _to;
            pair.swap(amount0Out, amount1Out, to, new bytes(0), msg.sender);
            updatePrice(path[i], path[i + 1]);
        }
    }

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual ensure(deadline) {
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amountIn
        );
        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual payable ensure(deadline) {
        require(path[0] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        uint amountIn = msg.value;
        IWETH(WETH).deposit{value : amountIn}();
        assert(IWETH(WETH).transfer(CoinSwapV1Library.pairFor(factory, path[0], path[1]), amountIn));
        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual ensure(deadline) {
        require(path[path.length - 1] == WETH, 'CoinSwapV1Router02: INVALID_PATH');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, CoinSwapV1Library.pairFor(factory, path[0], path[1]), amountIn
        );
        _swapSupportingFeeOnTransferTokens(path, address(this));
        uint amountOut = IERC20(WETH).balanceOf(address(this));
        require(amountOut >= amountOutMin, 'CoinSwapV1Router02: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).withdraw(amountOut);
        TransferHelper.safeTransferETH(to, amountOut);
    }

    function feeTransFer(address from, uint feeValue) internal {
        address burnAddress = IFeeManager(feeManager).blackHoleAddress();
        TransferHelper.safeTransferFrom(IFeeManager(feeManager).feeToken(), from, burnAddress, feeValue);
        emit FeeBurn(IFeeManager(feeManager).feeToken(), burnAddress, feeValue);
    }

    function updatePrice(address tokenA, address tokenB) internal {
        if (address(oracle) != address(0)) {
            oracle.update(tokenA, tokenB);
        }
    }

    // **** LIBRARY FUNCTIONS ****
    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual returns (uint amountB) {
        return CoinSwapV1Library.quote(amountA, reserveA, reserveB);
    }

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountOut){
        (amountOut) = CoinSwapV1Library.getAmountOut(amountIn, reserveIn, reserveOut);
    }

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual returns (uint amountIn){
        (amountIn) = CoinSwapV1Library.getAmountIn(amountOut, reserveIn, reserveOut);
    }

    function getAmountsOut(uint amountIn, address[] memory path) public view virtual returns (uint[] memory amounts){
        (amounts,) = CoinSwapV1Library.getAmountsOut1(factory, amountIn, path, feeManager, msg.sender);
    }

    function getAmountsIn(uint amountOut, address[] memory path) public view virtual returns (uint[] memory amounts){
        (amounts,) = CoinSwapV1Library.getAmountsIn1(factory, amountOut, path, feeManager, msg.sender);
    }
}