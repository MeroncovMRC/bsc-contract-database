// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract TokenDistribution {
    address public tokenAddress;
    address public newTokenAddress;

    constructor(address _tokenAddress, address _newTokenAddress) {
        tokenAddress = _tokenAddress; 
        newTokenAddress = _newTokenAddress;
    }

    function distributeNewTokens() public {
        IERC20 token = IERC20(tokenAddress);
        IERC20 newToken = IERC20(newTokenAddress);

        for (uint256 i = 0; i < token.balanceOf(address(this)); i++) {
            address holder = address(this);
            uint256 balance = token.balanceOf(holder);

            if (balance > 0) {
                newToken.transfer(holder, balance);
            }
        }
    }
}