// SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.8.0;

interface IERC20{
    function decimals() external view returns (uint8);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract NFTDropContract{

    address public owner;

    address public AIAddress;

    event NFTDropAIEvent(address[] _adrs,uint[] _amounts);

    constructor() payable{
        owner = msg.sender;
    }


   receive() external payable {}

    modifier isOnwer(){
        require(msg.sender == owner,"not contract owner");
        _;
    }

    function setOwner(address own) public isOnwer{
        owner = own;
    }

    function setAITokenAddress(address _token)public isOnwer returns(bool){
        AIAddress = _token;
        return true;
    }

    function width(address to,uint256 value) public isOnwer{
        require(address(this).balance >= value,"no enough balance");
        
        IERC20(AIAddress).transfer(to,value);
    }

    function nodeDropAIAction(address[] memory _adrs,uint[] memory _amounts) public isOnwer {
        require(_adrs.length == _amounts.length,"not equal");

        for(uint i = 0;i<_adrs.length;i++){
            IERC20(AIAddress).transfer(_adrs[i],_amounts[i]);
        }
        emit NFTDropAIEvent(_adrs,_amounts);
    }

    function getBalance() public view returns(uint256){
        return IERC20(AIAddress).balanceOf(address(this));
    }
    

}