{"2_Owner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set \u0026 change owner\r\n */\r\ncontract Owner {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"Stake.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.8;\r\n\r\nimport \"./2_Owner.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\ninterface Params {\r\n    struct Type {\r\n        uint256 tier;\r\n        uint256 count;\r\n        uint256 generation;\r\n        bytes data;\r\n    }\r\n}\r\n\r\ninterface IERC1155 is Params{\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function getTypeOf(uint256 _id) external view returns(Type memory);\r\n\r\n}\r\n\r\n/**\r\n * @dev Contract for Staking ERC-20 Tokens and pay interest on real time\r\n */\r\ncontract StakeContract is Owner, ReentrancyGuard, Params {\r\n\r\n    address[] public NFT_contracts;\r\n\r\n    address public feeWallet;\r\n    address public rewardWallet;\r\n\r\n    // the token to be used for staking\r\n    ERC20 public token;\r\n\r\n    // the token to be used for buy power spice and energy shield\r\n    ERC20 public feeToken;\r\n    uint256 public feeMul; // example x5 = 500\r\n\r\n    // Annual Percentage Yield\r\n    uint8 public APY;\r\n\r\n    // minimum stake time in seconds\r\n    uint256 public constant minimumStakeTime_7 = 604800; // 7 days in seconds\r\n    uint256 public constant minimumStakeTime_15 = 1296000; // 15 days in seconds\r\n    uint256 public constant minimumStakeTime_30 = 2592000; // 30 days in seconds\r\n\r\n    // properties used to get fee\r\n    uint256 private feePercentage = 2000; //2000 = 20%\r\n    uint256 private constant amountDivToGetFee = 10**4;\r\n\r\n    // the Stake\r\n    struct Stake {\r\n        // opening timestamp\r\n        uint256 startDate;\r\n        // amount staked\r\n    \tuint256 amount;\r\n        // stake type ( 1 = character+weapon ), ( 2 = land)\r\n        uint256 stakeType;\r\n        // mst = minimun stake time\r\n        uint256 mst;\r\n        uint256 characterId;\r\n        uint256 weaponId;\r\n        uint256 landId;\r\n        // is active or not\r\n    \tbool active;\r\n        address characterAddress;\r\n        address weaponAddress;\r\n        address landAddress;\r\n    }\r\n\r\n    // NFT characters price\r\n    uint256 private constant CommonCharacterPrice = 40 * 10**18;\r\n    uint256 private constant rareCharacterPrice = 80 * 10**18;\r\n    uint256 private constant legendaryCharacterPrice = 400 * 10**18;\r\n    uint256 private constant mythicalCharacterPrice = 2000 * 10**18;\r\n\r\n    // NFT weapons price\r\n    uint256 private constant CommonWeaponPrice = 20 * 10**18;\r\n    uint256 private constant rareWeaponPrice = 40 * 10**18;\r\n    uint256 private constant legendaryWeaponPrice = 200 * 10**18;\r\n    uint256 private constant mythicalWeaponPrice = 1000 * 10**18;\r\n\r\n    // NFT lands price\r\n    uint256 private constant CommonLandPrice = 1000 * 10**18;\r\n    uint256 private constant rareLandPrice = 1400 * 10**18;\r\n    uint256 private constant legendaryLandPrice = 2000 * 10**18;\r\n    uint256 private constant mythicalLandPrice = 3000 * 10**18;\r\n\r\n    // stakes that the owner have\r\n    mapping(address =\u003e Stake[10]) public stakesOfOwner;\r\n\r\n    // @param _apy: APY\r\n    // @_token: the ERC20 token to be used\r\n    constructor(uint8 _apy, ERC20 _token, ERC20 _feeToken, uint256 _feeMul) {\r\n        token = _token;\r\n        feeToken = _feeToken;\r\n        feeMul = _feeMul;\r\n\r\n        APY = _apy;\r\n\r\n        feeWallet = getOwner();\r\n        rewardWallet = getOwner();\r\n    }\r\n\r\n    function addNFTContracts(address[] memory _contracts) external isOwner {\r\n        for (uint256 i=0; i\u003c_contracts.length; i++) {\r\n            NFT_contracts.push(_contracts[i]);\r\n        }\r\n    }\r\n    function modifyNFTContracts(uint256 index, address _contract) external isOwner {\r\n        NFT_contracts[index] = _contract;        \r\n    }\r\n\r\n    function checkContractAddress(address _contractAddress) private view returns(bool){\r\n        bool checkedIn = false;\r\n        for (uint256 i=0; i\u003cNFT_contracts.length; i++) {\r\n            if(NFT_contracts[i] == _contractAddress \u0026\u0026 _contractAddress != address(0)){\r\n                checkedIn = true;\r\n                break;\r\n            }\r\n        }\r\n        return checkedIn;\r\n    }\r\n    \r\n    // owner can change the basic parameters of the contract\r\n    // interest will be recalculated in real time for all accounts if changed\r\n    function modifyAnnualInterestRatePercentage(uint8 _newVal) external isOwner {\r\n        APY = _newVal;\r\n    }\r\n    function modifyFeePercentage(uint256 _newVal) external isOwner {\r\n        require(_newVal \u003c= 9000, \"the new value should range from 0 to 9000\");\r\n        feePercentage = _newVal;\r\n    }\r\n    function modifyFeeWallet(address _newVal) external isOwner {\r\n        feeWallet = _newVal;\r\n    }\r\n    function modifyRewardWallet(address _newVal) external isOwner {\r\n        rewardWallet = _newVal;\r\n    }\r\n    function modifyTokens(ERC20 _token, ERC20 _feeToken) external isOwner {\r\n        token = _token;\r\n        feeToken = _feeToken;\r\n    }\r\n    function modifyFeeMul(uint256 _newVal) external isOwner {\r\n        feeMul = _newVal;\r\n    }\r\n\r\n    function getMinimunStakeTime(uint256 _mstType) private pure returns (uint256){\r\n        require(_mstType \u003e= 1 \u0026\u0026 _mstType \u003c= 3, \"invalid _mstType\");\r\n        uint256  mst;\r\n        if(_mstType == 1){\r\n            mst = minimumStakeTime_7; // 7 days in seconds\r\n        }else if(_mstType == 2){\r\n            mst = minimumStakeTime_15; // 15 days in seconds\r\n        }else if(_mstType == 3){\r\n            mst = minimumStakeTime_30; // 30 days in seconds\r\n        }\r\n        return mst;\r\n    }\r\n\r\n    function getMstType(uint256 _mst) private pure returns (uint256){\r\n        uint256 mstType = 1;\r\n        if(_mst \u003e= minimumStakeTime_15){\r\n            mstType = 2;\r\n        }\r\n        if(_mst \u003e= minimumStakeTime_30){\r\n            mstType = 3;\r\n        }\r\n        return mstType;\r\n    }\r\n\r\n    function calculateInterest(uint256 _stakeAmount, uint256 _mstType) private view returns (uint256) { //CHANGE TO PRIVATE LUEGO DE PROBAR\r\n        uint256 mst = getMinimunStakeTime(_mstType);\r\n\r\n        // APY per year = amount * APY / 100 / seconds of the year\r\n        uint256 interest_per_year = (_stakeAmount * APY) / 100;\r\n\r\n        // number of seconds since opening date\r\n        // uint256 num_seconds = block.timestamp - stakesOfOwner[_ownerAccount][i].startDate;\r\n        uint256 num_seconds = mst;\r\n\r\n        // calculate interest by a rule of three\r\n        //  seconds of the year: 31536000 = 365*24*60*60\r\n        //  interest_per_year   -   31536000\r\n        //  interest            -   num_seconds\r\n        //  interest = num_seconds * interest_per_year / 31536000\r\n        return (num_seconds * interest_per_year) / 31536000;\r\n    }\r\n\r\n    function getIndexToCreateStake(address _account) private view returns (uint256) {\r\n        uint256 index = 10;\r\n        for(uint256 i=0; i\u003cstakesOfOwner[_account].length; i++){\r\n            if(!stakesOfOwner[_account][i].active){\r\n                index = i;\r\n            }\r\n        }\r\n        // if (index \u003c 10)  = limit not reached\r\n        // if (index == 10) = limit reached\r\n        return index; \r\n    }\r\n\r\n    function getNFTPrice(uint256 _type_nft, uint256 _tokenId, address _contractAddress) private view returns (uint256) {\r\n        require(_type_nft \u003e= 1 \u0026\u0026 _type_nft \u003c= 3, \"invalid _type_nft\");\r\n        Type memory t = IERC1155(_contractAddress).getTypeOf(_tokenId);\r\n        uint256 price = 0;\r\n        if(_type_nft == 1){\r\n            if(t.tier == 1){\r\n                price = CommonCharacterPrice;\r\n            }else if(t.tier == 2){\r\n                price = rareCharacterPrice;\r\n            }else if(t.tier == 3){\r\n                price = legendaryCharacterPrice;\r\n            }else if(t.tier == 4){\r\n                price = mythicalCharacterPrice;\r\n            }\r\n        }else if(_type_nft == 2){\r\n            if(t.tier == 1){\r\n                price = CommonWeaponPrice;\r\n            }else if(t.tier == 2){\r\n                price = rareWeaponPrice;\r\n            }else if(t.tier == 3){\r\n                price = legendaryWeaponPrice;\r\n            }else if(t.tier == 4){\r\n                price = mythicalWeaponPrice;\r\n            }\r\n        }else if(_type_nft == 3){\r\n            if(t.tier == 1){\r\n                price = CommonLandPrice;\r\n            }else if(t.tier == 2){\r\n                price = rareLandPrice;\r\n            }else if(t.tier == 3){\r\n                price = legendaryLandPrice;\r\n            }else if(t.tier == 4){\r\n                price = mythicalLandPrice;\r\n            }\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function getMulFee(uint256 _amount) public view returns(uint256) {\r\n        return (_amount * feeMul) / (100);\r\n    }\r\n\r\n    function calculateFee(uint256 _amount, uint256 _mstType) public view returns (uint256){\r\n        uint256 interest = calculateInterest(_amount, _mstType);\r\n        return (interest * feePercentage) / amountDivToGetFee;\r\n    }\r\n    \r\n    // anyone can create a stake\r\n    function createStake(uint256 _stakeType, uint256 _mstType, uint256 _characterId, uint256 _weaponId, uint256 _landId, address _characterAddress, address _weaponAddress, address _landAddress) external {\r\n        require(_stakeType \u003e= 1 \u0026\u0026 _stakeType \u003c= 2, \"invalid _stakeType\");\r\n        uint256 index = getIndexToCreateStake(msg.sender);\r\n        require(index \u003c 10, \"stakes limit reached\");\r\n        uint256 mst = getMinimunStakeTime(_mstType);\r\n        uint256 stakeAmount = 0;\r\n        // store the tokens of the user in the contract\r\n        // requires approve\r\n        if(_stakeType == 1){\r\n            require(checkContractAddress(_characterAddress), \"_characterAddress not valid\");\r\n            require(checkContractAddress(_weaponAddress), \"_weaponAddress not valid\");\r\n            IERC1155(_characterAddress).safeTransferFrom(msg.sender, address(this), _characterId, 1, \"\");\r\n            IERC1155(_weaponAddress).safeTransferFrom(msg.sender, address(this), _weaponId, 1, \"\");\r\n            stakeAmount = getNFTPrice(1, _characterId, _characterAddress);\r\n            stakeAmount += getNFTPrice(2, _weaponId, _weaponAddress);\r\n        }else if(_stakeType == 2){\r\n            require(checkContractAddress(_landAddress), \"_landAddress not valid\");\r\n            IERC1155(_landAddress).safeTransferFrom(msg.sender, address(this), _landId, 1, \"\");\r\n            stakeAmount = getNFTPrice(3, _landId, _landAddress);\r\n        }\r\n        uint256 fee = getMulFee(calculateFee(stakeAmount, _mstType));\r\n        feeToken.transferFrom(msg.sender, feeWallet, fee);\r\n\r\n        // create the stake\r\n        stakesOfOwner[msg.sender][index] = Stake(block.timestamp, stakeAmount, _stakeType, mst, _characterId, _weaponId, _landId, true, _characterAddress, _weaponAddress, _landAddress);\r\n    }\r\n\r\n    // finalize the stake and pay interest accordingly\r\n    // arrayIndex: is the id of the stake to be finalized\r\n    function withdrawStake(uint256 arrayIndex) external nonReentrant {\r\n\r\n        // Stake should exists and opened\r\n        require(arrayIndex \u003c stakesOfOwner[msg.sender].length, \"Stake does not exist\");\r\n        require(stakesOfOwner[msg.sender][arrayIndex].active == true, \"This stake is not active\");\r\n        require((block.timestamp - stakesOfOwner[msg.sender][arrayIndex].startDate) \u003e= stakesOfOwner[msg.sender][arrayIndex].mst, \"the minimum stake time has not been completed yet\");\r\n\r\n        // get the interest\r\n        uint256 mstType = getMstType(stakesOfOwner[msg.sender][arrayIndex].mst);\r\n        uint256 interest = calculateInterest(stakesOfOwner[msg.sender][arrayIndex].amount, mstType);\r\n\r\n        // transfer the interes from owner account, it has to have enough funds approved\r\n        token.transferFrom(rewardWallet, msg.sender, interest);\r\n\r\n        // transfer the NFTs from the contract itself\r\n        if(stakesOfOwner[msg.sender][arrayIndex].stakeType == 1){\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].characterAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].characterId, 1, \"\");\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].weaponAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].weaponId, 1, \"\");\r\n        }else if(stakesOfOwner[msg.sender][arrayIndex].stakeType == 2){\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].landAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].landId, 1, \"\");\r\n        }\r\n        \r\n        // stake closing\r\n        stakesOfOwner[msg.sender][arrayIndex].active = false;\r\n    }\r\n\r\n    function cancelStake(uint256 arrayIndex) external nonReentrant {\r\n        // Stake should exists and opened\r\n        require(arrayIndex \u003c stakesOfOwner[msg.sender].length, \"Stake does not exist\");\r\n        require(stakesOfOwner[msg.sender][arrayIndex].active == true, \"This stake is not active\");\r\n\r\n        // transfer the NFTs from the contract itself\r\n        if(stakesOfOwner[msg.sender][arrayIndex].stakeType == 1){\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].characterAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].characterId, 1, \"\");\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].weaponAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].weaponId, 1, \"\");\r\n        }else if(stakesOfOwner[msg.sender][arrayIndex].stakeType == 2){\r\n            IERC1155(stakesOfOwner[msg.sender][arrayIndex].landAddress).safeTransferFrom(address(this), msg.sender, stakesOfOwner[msg.sender][arrayIndex].landId, 1, \"\");\r\n        }\r\n        \r\n        // stake closing\r\n        stakesOfOwner[msg.sender][arrayIndex].active = false;\r\n    }\r\n    \r\n}"}}