// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }
}

contract BettingGame {
    using SafeMath for uint256;

    address public owner;
    bool public isPhase1Active;
    bool public isPhase2Active;
    uint256 public phase1EndTime;
    uint256 public phase2EndTime;
    uint256 public phase1Duration;
    uint256 public phase2Duration;
    uint256 public minimumBet;
    uint256 public maximumBet;
    mapping(address => uint256) public userBetsOnSideA;
    mapping(address => uint256) public userBetsOnSideB;
    address[] private _userList;

    event RoundStarted();
    event Phase1Ended();
    event Phase2Started();
    event Phase2Ended();
    event WinnerDeclared(string side, uint256 totalPrize);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(uint256 _phase1Duration, uint256 _phase2Duration, uint256 _minimumBet, uint256 _maximumBet) {
        owner = msg.sender;
        phase1Duration = _phase1Duration;
        phase2Duration = _phase2Duration;
        minimumBet = _minimumBet;
        maximumBet = _maximumBet;
    }

    function startRound() external onlyOwner {
        require(!isPhase1Active && !isPhase2Active, "A round is already active");
        isPhase1Active = true;
        phase1EndTime = block.timestamp.add(phase1Duration);
        emit RoundStarted();
    }

    function declarePhase1End() external onlyOwner {
        require(isPhase1Active, "Phase 1 is not active");
        isPhase1Active = false;
        isPhase2Active = true;
        phase2EndTime = block.timestamp.add(phase2Duration);
        emit Phase1Ended();
    }

    function declarePhase2End() external onlyOwner {
        require(isPhase2Active, "Phase 2 is not active");
        isPhase2Active = false;
        emit Phase2Ended();
    }

    function placeBetA(uint256 amount) external payable {
        require(isPhase1Active, "Phase 1 is not active");
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Invalid bet amount");
        userBetsOnSideA[msg.sender] = userBetsOnSideA[msg.sender].add(amount);
        if (userBetsOnSideA[msg.sender] > 0) {
            _addUserToList(msg.sender);
        }
    }

    function placeBetB(uint256 amount) external payable {
        require(isPhase1Active, "Phase 1 is not active");
        require(msg.value >= minimumBet && msg.value <= maximumBet, "Invalid bet amount");
        userBetsOnSideB[msg.sender] = userBetsOnSideB[msg.sender].add(amount);
        if (userBetsOnSideB[msg.sender] > 0) {
            _addUserToList(msg.sender);
        }
    }

    function _addUserToList(address user) private {
        for (uint256 i = 0; i < _userList.length; i++) {
            if (_userList[i] == user) {
                return;
            }
        }
        _userList.push(user);
    }

    function claimWinnings() external {
        require(!isPhase1Active && !isPhase2Active, "Round is still active");
        uint256 userBetA = userBetsOnSideA[msg.sender];
        uint256 userBetB = userBetsOnSideB[msg.sender];
        userBetsOnSideA[msg.sender] = 0;
        userBetsOnSideB[msg.sender] = 0;

        uint256 totalASide = address(this).balance.sub(totalBetsOnSideA());
        uint256 totalBSide = address(this).balance.sub(totalBetsOnSideB());

        // Check if the user has winnings to claim
        uint256 userPrize;
        if (totalASide < totalBSide) {
            userPrize = (userBetB.mul(totalASide)).div(totalBetsOnSideB());
        } else if (totalBSide < totalASide) {
            userPrize = (userBetA.mul(totalBSide)).div(totalBetsOnSideA());
        } else {
            userPrize = userBetA.add(userBetB);
        }

        require(userPrize > 0, "You have no winnings to claim");
        payable(msg.sender).transfer(userPrize);
    }

    function claimBalance() external {
        require(!isPhase1Active && !isPhase2Active, "Round is still active");
        uint256 userBetA = userBetsOnSideA[msg.sender];
        uint256 userBetB = userBetsOnSideB[msg.sender];
        userBetsOnSideA[msg.sender] = 0;
        userBetsOnSideB[msg.sender] = 0;

        uint256 balanceOnA = totalBetsOnSideA();
        uint256 balanceOnB = totalBetsOnSideB();
        uint256 totalBets = balanceOnA.add(balanceOnB);

        uint256 userPrize;
        if (balanceOnA < balanceOnB) {
            userPrize = userBetB.mul(totalBets).div(balanceOnB);
        } else if (balanceOnB < balanceOnA) {
            userPrize = userBetA.mul(totalBets).div(balanceOnA);
        } else {
            userPrize = userBetA.add(userBetB);
        }

        require(userPrize > 0, "You have no winnings to claim");
        payable(msg.sender).transfer(userPrize);
    }

    function totalBetsOnSideA() internal view returns (uint256) {
        uint256 totalBets = 0;
        for (uint256 i = 0; i < _userList.length; i++) {
            totalBets = totalBets.add(userBetsOnSideA[_userList[i]]);
        }
        return totalBets;
    }

    function totalBetsOnSideB() internal view returns (uint256) {
        uint256 totalBets = 0;
        for (uint256 i = 0; i < _userList.length; i++) {
            totalBets = totalBets.add(userBetsOnSideB[_userList[i]]);
        }
        return totalBets;
    }

    function getPhase1StartTime() external view returns (uint256) {
        return phase1EndTime.sub(phase1Duration);
    }

    function getPhase1EndTime() external view returns (uint256) {
        return phase1EndTime;
    }

    function getPhase1TimeCountdown() external view returns (uint256) {
        int256 countdown = int256(phase1EndTime) - int256(block.timestamp);
        return countdown > 0 ? uint256(countdown) : 0;
    }

    function getPhase2StartTime() external view returns (uint256) {
        return phase2EndTime.sub(phase2Duration);
    }

    function getPhase2EndTime() external view returns (uint256) {
        return phase2EndTime;
    }

    function getPhase2TimeCountdown() external view returns (uint256) {
        int256 countdown = int256(phase2EndTime) - int256(block.timestamp);
        return countdown > 0 ? uint256(countdown) : 0;
    }

    function getWinnerSide() external view returns (string memory) {
        uint256 totalASide = address(this).balance.sub(totalBetsOnSideA());
        uint256 totalBSide = address(this).balance.sub(totalBetsOnSideB());

        if (totalASide < totalBSide) {
            return "Side A";
        } else if (totalBSide < totalASide) {
            return "Side B";
        } else {
            return "Draw";
        }
    }

    function claimStuckEth() external onlyOwner {
        require(!isPhase1Active && !isPhase2Active, "Round is still active");
        uint256 totalBalance = address(this).balance;
        require(totalBalance > 0, "Contract balance is empty");
        payable(msg.sender).transfer(totalBalance);
    }
}