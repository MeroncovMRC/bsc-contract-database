pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract FOMCToken is IERC20 {
    string public constant name = "FOMC";
    string public constant symbol = "FOMC";
    uint8 public constant decimals = 18;

    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private constant taxReceiver = 0xaa0E2c997af0048ea896c055F8133457E92E9a9F;
    uint256 private constant buyTax = 1;
    uint256 private constant sellTax = 5;

    constructor() {
        uint256 initialSupply = 420 * (10 ** 6) * (10 ** uint256(decimals));
        uint256 burnedTokens = (initialSupply * 80) / 100;
        uint256 initialTokens = initialSupply - burnedTokens;

        _totalSupply = initialSupply;
        _balances[taxReceiver] = initialTokens;

        emit Transfer(address(0), taxReceiver, initialTokens);
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount, sellTax);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        uint256 taxPercentage = (recipient == taxReceiver) ? buyTax : sellTax;
        _transfer(sender, recipient, amount, taxPercentage);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Insufficient allowance");
        _allowances[sender][msg.sender] = currentAllowance - amount;

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount, uint256 taxPercentage) internal {
        require(_balances[sender] >= amount, "Insufficient balance");

        uint256 taxAmount = (amount * taxPercentage) / 100;
        uint256 netAmount = amount - taxAmount;

        _balances[sender] -= amount;
        _balances[recipient] += netAmount;
        _balances[taxReceiver] += taxAmount;

        emit Transfer(sender, recipient, netAmount);
        emit Transfer(sender, taxReceiver, taxAmount);
    }
}