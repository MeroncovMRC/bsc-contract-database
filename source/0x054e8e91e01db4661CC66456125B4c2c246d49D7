pragma solidity 0.5.8;
library SafeMath {
    /**
    * @dev Multiplies two numbers, reverts on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b);
        return c;
    }
 
    /**
    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0); // Solidity only automatically asserts when dividing by 0
        uint256 c = a / b;
        return c;
    }
 
    /**
    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;
        return c;
    }
 
    /**
    * @dev Adds two numbers, reverts on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);
        return c;
    }
 
    /**
    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
    * reverts when dividing by zero.
    */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}
 
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    event Transfer(address indexed from,address indexed to,uint256 value);
    event Approval(address indexed owner,address indexed spender,uint256 value);
}
 
contract PhsToken is IERC20 {
    using SafeMath for uint256;
    uint256 public totalSupply;
    string public name = 'Phospherus';
    string public symbol = 'PHS';
    uint8 public decimals = 18;
    address public owner;
    address public destoryAddress;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowed;
    uint256 public transferRate;

    mapping(address=>bool) userAccountMap;
    address[] userAccounts;
    
    modifier OnlyOwner {
        require(msg.sender == owner, "only owner operator");
        _;
    }

    constructor() public {
        owner = msg.sender;
        totalSupply = uint(80000000).mul(1e18);
        _balances[msg.sender] = totalSupply;
        destoryAddress = address(0);
        setUserAccount();
    }
    
    function setTradeFreeRate(uint256 _transferRate) OnlyOwner public  {
        transferRate = _transferRate;
    }
    
    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= _balances[msg.sender]);
        _transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public returns (bool) {
        require(value <= _allowed[from][msg.sender]);
        require(value <= _balances[from]);
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        _transfer(from, to, value);
        return true;
    }

    function _transfer(address from, address to, uint256 value) private {
        _balances[from] = _balances[from].sub(value);
        uint256 transferFee =  value.mul(transferRate).div(1e18);
        uint256 realValue  =  value.sub(transferFee);
        _balances[to] = _balances[to].add(realValue);
        emit Transfer(from, to, realValue);
        uint256 half = transferFee.div(2);
        dividends(half);
        burn(msg.sender, half);
    }

    function setUserAccount() private  {
        if(!userAccountMap[msg.sender]){
            userAccountMap[msg.sender] = true;
            userAccounts.push(msg.sender);
        }
    }

    function dividends(uint256 amount) private {
        if(amount > 0){
            for(uint i = 0; i<userAccounts.length;i++){
                address user = userAccounts[i];
                uint256 userDividends = amount.mul(_balances[user]).div(totalSupply);
                _balances[user] = _balances[user].add(userDividends);
            }
        }
    }
    
    function burn(address from, uint256 destroyAmount) private {
         if(destroyAmount > 0) {
            _balances[destoryAddress] = _balances[destoryAddress].add(destroyAmount);
            emit Transfer(from, destoryAddress, destroyAmount);
         }
    }
    
    function balanceOf(address user) public view returns (uint256) {
        return _balances[user];
    }
 
    function allowance(address user,address spender) public view returns (uint256) {
        return _allowed[user][spender];
    }
 
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
 
    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
 
    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {
        require(spender != address(0));
        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
        return true;
    }
}