{"Owned.sol":{"content":"pragma solidity ^0.5;\n\ncontract Owned{\n    address public owner;\n    \n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Invalid Owner\");\n        _;\n    }\n\n    // to transfer contract owenership \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}"},"StandardProduct.sol":{"content":"pragma solidity ^0.5;\n\nimport \u0027./Owned.sol\u0027;\n\ncontract ProductStore is Owned{\n    struct productDetails{\n        string productData;\n        string extraData;\n    }\n    \n    mapping(bytes32 =\u003e productDetails) Product;\n    mapping(address =\u003e bool) authorizedCaller;\n    \n    // To store product data \n    event StoreProduct(bytes32 indexed proudctHash, string productData, string extraData);\n    // Set the authorized user to access to this contract flag to true\n    event AuthorizedCaller(address _caller);\n    // Set the authorized user to access to this contract flag to false\n    event DeAuthorizedCaller(address _caller);\n    \n    function authorizeCaller(address _caller) public onlyOwner returns (bool) {\n        authorizedCaller[_caller] = true;\n        emit AuthorizedCaller(_caller);\n        return true;\n    }\n\n    function deAuthorizeCaller(address _caller) public onlyOwner returns (bool)\n    {\n        authorizedCaller[_caller] = false;\n        emit DeAuthorizedCaller(_caller);\n        return true;\n    }\n    \n    function storeProduct(bytes32 _productHash, string memory _productData, string memory _extraData) public returns(bool){\n        Product[_productHash].productData = _productData;\n        Product[_productHash].extraData = _extraData;\n        \n        emit StoreProduct(_productHash, _productData, _extraData);\n        return true;\n    }\n    \n    function getProduct(bytes32 _productHash) public view returns(string memory productData, string memory extraData){\n        return(Product[_productHash].productData, Product[_productHash].extraData);\n    }\n    \n}"}}