// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 value) external;

    function transfer(address to, uint256 value) external;

    function transferFrom(address from, address to, uint256 value) external;
}

contract PepegaStaking is Ownable {
    using SafeMath for uint256;
    IERC20 public mainToken;

    uint256 public constant PERCENT_DENOMINATOR = 100;
    uint256 public constant YEAR = 360 * 1 days; // 30 days for 1 Month
    uint256 public constant DAY = 1 days;

    uint256 public totalStakedToken;
    uint256 public totalUnstakedToken;
    uint256 public totalClaimedRewardToken;
    uint256 public totalStakers;

    uint256 public currentAPR = 1200;
    uint256 public aprDecreasingFactor = 10;
    uint256 public duration = 90 days; // lock duration
    uint256 public perDayPenalty = 1;
    uint256 public maxPenaltyDays = 15;

    struct Stake {
        uint256 amount;
        uint256 reward;
        uint256 stakeTime;
        uint256 unlockTime;
        uint256 unstakedAt;
        uint256 rewardedAt;
        uint256 rewardPerDay;
        uint256 rewardPerWeek;
        uint256 rewardPerSecond;
    }

    struct User {
        uint256 totalStakedTokens;
        uint256 totalUnstakedTokens;
        uint256 totalClaimedRewardTokens;
        uint256 stakeCount;
        mapping(uint256 => Stake) stakingInfo;
    }
    mapping(address => User) public userInfo;

    event STAKE(address Staker, uint256 amount);
    event UNSTAKE(address Staker, uint256 amount, uint256 planID);
    event WITHDRAW(address Staker, uint256 reward, uint256 planID);

    constructor(address _token) {
        mainToken = IERC20(_token);
    }

    function adjustAPR() internal {
        if (aprDecreasingFactor != 0) {
            uint256 tempApr = currentAPR;
            currentAPR = currentAPR.sub(
                tempApr.mul(aprDecreasingFactor).div(PERCENT_DENOMINATOR)
            );
        }
    }

    // ========================== Public Functions ==========================

    /// @notice Stake amount
    /// @param amount Amount which need to be staked
    function stake(uint256 amount) public {
        require(amount != 0, "Invalid amount");

        if (userInfo[msg.sender].stakeCount == 0) {
            totalStakers++;
        }
        adjustAPR();
        mainToken.transferFrom(msg.sender, address(this), amount);

        uint256 index = ++userInfo[msg.sender].stakeCount;
        Stake storage userStakeInfo = userInfo[msg.sender].stakingInfo[index];

        // update stake record by plan
        userStakeInfo.amount = amount;
        userStakeInfo.stakeTime = block.timestamp;
        userStakeInfo.unlockTime = block.timestamp.add(duration);

        userStakeInfo.reward = (amount.mul(currentAPR).div(PERCENT_DENOMINATOR))
            .div(YEAR.div(duration));
        userStakeInfo.rewardPerSecond = userStakeInfo.reward.div(duration);
        userStakeInfo.rewardPerDay = userStakeInfo.reward.mul(DAY).div(
            duration
        );

        // per plan info
        userInfo[msg.sender].totalStakedTokens = userInfo[msg.sender]
            .totalStakedTokens
            .add(amount);

        // Total record
        totalStakedToken = totalStakedToken.add(amount);

        emit STAKE(msg.sender, amount);
    }

    /// @notice Unstake from specific stake
    /// @param index Index id in which need to be unstaked.
    function unstake(uint256 index) public {
        require(
            index > 0 && index <= userInfo[msg.sender].stakeCount,
            "Invalid index"
        );

        Stake storage userStakeInfo = userInfo[msg.sender].stakingInfo[index];
        require(userStakeInfo.unstakedAt == 0, "Already unstaked");

        userStakeInfo.unstakedAt = block.timestamp;

        (uint256 currentReward, uint256 penalty) = calculateRemainingReward(
            msg.sender,
            index
        );

        uint256 totalPenalty = (
            userStakeInfo.amount.mul(penalty).div(PERCENT_DENOMINATOR)
        );
        mainToken.transfer(msg.sender, userStakeInfo.amount - totalPenalty);
        if (totalPenalty != 0) {
            mainToken.transfer(owner(), totalPenalty);
        }

        userInfo[msg.sender].totalUnstakedTokens = userInfo[msg.sender]
            .totalUnstakedTokens
            .add(userStakeInfo.amount);

        totalUnstakedToken = totalUnstakedToken.add(userStakeInfo.amount);

        if (userStakeInfo.rewardedAt == 0) {
            mainToken.transferFrom(owner(), msg.sender, currentReward);
            userInfo[msg.sender].totalClaimedRewardTokens = userInfo[msg.sender]
                .totalClaimedRewardTokens
                .add(currentReward);
            totalClaimedRewardToken = totalClaimedRewardToken.add(
                currentReward
            );
        }

        emit UNSTAKE(msg.sender, userStakeInfo.amount, index);
    }

    /// @notice Withdraw reward from specific stake
    /// @param index Index id in which need to be unstaked.
    function withdraw(uint256 index) public {
        require(
            index > 0 && index <= userInfo[msg.sender].stakeCount,
            "Invalid index"
        );

        Stake storage userStakeInfo = userInfo[msg.sender].stakingInfo[index];
        require(userStakeInfo.unstakedAt == 0, "Already unstaked");
        require(userStakeInfo.rewardedAt == 0, "Already withdrawn");
        require(block.timestamp > userStakeInfo.unlockTime, "Not unlocked");

        userStakeInfo.rewardedAt = block.timestamp;

        (uint256 currentReward, ) = calculateRemainingReward(msg.sender, index);
        mainToken.transferFrom(owner(), msg.sender, currentReward);

        userInfo[msg.sender].totalClaimedRewardTokens = userInfo[msg.sender]
            .totalClaimedRewardTokens
            .add(currentReward);

        totalClaimedRewardToken = totalClaimedRewardToken.add(currentReward);

        emit WITHDRAW(msg.sender, currentReward, index);
    }

    // ========================== View Functions ==========================

    function calculateRemainingReward(
        address _usr,
        uint256 index
    ) public view returns (uint256 reward, uint256 penalty) {
        Stake storage userStakeInfo = userInfo[_usr].stakingInfo[index];

        if (block.timestamp < userStakeInfo.unlockTime) {
            uint256 elapsedTime = block.timestamp.sub(userStakeInfo.stakeTime);
            uint256 elapsedDays = elapsedTime.div(DAY);
            if (elapsedDays <= maxPenaltyDays) {
                uint256 penaltyCount = maxPenaltyDays - elapsedDays;
                penalty = penaltyCount.mul(perDayPenalty);
            } else {
                reward = userStakeInfo.rewardPerSecond.mul(elapsedTime);
            }
        } else {
            reward = userStakeInfo.reward;
        }
    }

    function realtimeReward(address user) public view returns (uint256 ret) {
        User storage _user = userInfo[user];
        for (uint256 i = 1; i <= _user.stakeCount; i++) {
            if (_user.stakingInfo[i].unstakedAt == 0) {
                uint256 durs = block.timestamp - _user.stakingInfo[i].stakeTime;
                uint256 currentReward = durs.mul(
                    _user.stakingInfo[i].rewardPerSecond
                );
                if (currentReward < _user.stakingInfo[i].reward) {
                    ret += currentReward;
                } else {
                    ret += _user.stakingInfo[i].reward;
                }
            }
        }
    }

    function getUserInfo(
        address _usr,
        uint256 index
    )
        public
        view
        returns (uint256[4] memory arrData, bool unstaked, bool rewarded)
    {
        arrData = [
            userInfo[_usr].stakingInfo[index].amount,
            userInfo[_usr].stakingInfo[index].reward,
            userInfo[_usr].stakingInfo[index].stakeTime,
            userInfo[_usr].stakingInfo[index].unlockTime
        ];

        return (
            arrData,
            userInfo[_usr].stakingInfo[index].unstakedAt == 0 ? false : true,
            userInfo[_usr].stakingInfo[index].rewardedAt == 0 ? false : true
        );
    }

    // ========================== Owner's Functions ==========================
    function setStakeDuration(uint256 _duration) external onlyOwner {
        duration = _duration;
    }

    function setStakeBonus(uint256 _bonuse) external onlyOwner {
        currentAPR = _bonuse;
    }

    function setToken(IERC20 _token) external onlyOwner {
        mainToken = _token;
    }

    function setAPRDecreasingFactor(uint256 _factor) external onlyOwner {
        aprDecreasingFactor = _factor;
    }

    function withdrawStuckTokens(
        IERC20 _token,
        uint256 _amount
    ) external onlyOwner {
        _token.transfer(owner(), _amount);
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}