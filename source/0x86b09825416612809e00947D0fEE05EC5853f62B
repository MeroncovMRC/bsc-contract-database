{"ChillieToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// Creator: Chillieman\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2Pair.sol\";\r\nimport \"./IUniswapV2Router.sol\";\r\n\r\n/*\r\n\tCheck us out at https://chillieman.com!\r\n\r\n\tName: ChillieWallet (CHLL)\r\n\tTotal Supply: 1,000,000,000,000 (1 Trillion)\r\n\tMaximum Wallet Amount: 10,000,000 (1% of supply) (10 Billion)\r\n\tTokens to Liquidity: 100% (All)\r\n\tInitial Liquidity: 1 BNB\r\n\tStarting Price: 0.000000001 BNB\r\n\tTaxes: 1% for Development Stash (Will be discontinued once the wallet begins generating taxes)\r\n\tTaxes: 9% for Liquidity Stash\r\n\r\n\tLiquidity Stash is processed when it reaches 1% of total supply.\r\n\tThe LP Token is automatically locked into ChillieToken for 1 year when generated.\r\n\tEvery time the Liquidity Stash is processed, this 1 year timer is reset.\r\n\r\n\tThe true purpose of this token is to be used by a mobile application called ChillieWallet!\r\n\tChillieWallet povides the ability to use Limit Orders, and preprogrammed execution of trades. \r\n\tFees are generated by ChillieWallet and sent to Token. When those Fees are processed:\r\n\t- 50% of the Wallet Taxes goes to Chillieman, to continue Development on the wallet.\r\n\t- 50% of the Wallet Taxes goes to adding more liquidity\r\n\t\r\n\tThe Chillie Wallet is a separate Smart Contract, Which addess will be posted on our website, so give us a look!\r\n*/\r\n\r\ncontract ChillieToken is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    //We have to allow Exchange Wallets to hold more than 1% of the supply\r\n\tmapping (address =\u003e bool) private _isExcludedFromTokenLimit;\r\n\t\r\n\t// Taxes will Only change if Chillieman turns off the Dev Taxes (In this case, all Taxes will goto Liquidity Stash)\r\n\t// - The taxes can also be disabled across the whole network, for special events, holidays, and migrations.\r\n    uint256 private _devTax = 1;\r\n    uint256 private _liquidityTax = 9;\r\n    uint256 constant private _percentageAfterTax = 90;\r\n    address constant private _chillieman = 0x775E3bBFb07496dB8ed33A86Df0e41345f11Ea21;\r\n\taddress constant private _chillieBakedAddress = 0x00000000000000000000000000000000000fAdED;\r\n\r\n\t// Chillie Wallet Contact Address - Will be set by Chillieman once the Wallet Contract is created.\r\n\taddress private _chillieWalletAddress;\r\n\r\n    // Fees are either on or off, if this is false, taxes will not be collected.\r\n\t// Consider doing Special Events where there are NO taxes for Holidays!\r\n\tbool private _isTaxEnabled = true;\r\n\r\n\t // This will get set to true once Chillie calls chillieRemoveExemptions()\r\n\tbool private _isChilliemanRequiredToPayTax = false;\r\n\r\n    // Running Amount of how much taxes have been collected.\r\n    uint256 private _liquidityStash = 0;\r\n    uint256 private _devStash = 0;\r\n\t\r\n\t// All the liquidity is locked up for a full year, every time new Liquidity is auto generated.\r\n\tuint constant YEAR_IN_SECONDS = 31536000;\r\n\tuint256 private _liquidityUnlockTime = block.timestamp + YEAR_IN_SECONDS;\r\n\r\n\t// Prevents multiple transactions from attempting to generate liquidity at the same time\r\n    bool private _isLiquidityBeingGenerated = false;\r\n\r\n\tstring private constant _name = \"ChillieWallet\";\r\n    string private constant _symbol = \"CHLL\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 10**12 * 10**_decimals; // 1 Trillion Tokens\r\n    uint256 private _maxTokenAmount = 10**10 * 10**_decimals; // 10 Billion Tokens\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    IUniswapV2Pair private _uniswapV2Pair;\r\n\t\r\n\t//Emitted when an exchange is added or removed to the _isExcludedFromTokenLimit list.\r\n\tevent ExchangeAdded(address exchangeAddress);\r\n\tevent ExchangeRemoved(address exchangeAddress);\r\n\r\n\t//Emitted when the contract is adding Liquidity.\r\n\tevent LiqudidityPurchased(uint256 liquidityTokensReceived, uint256 ethRemaining,  uint256 tokensRemaining);\r\n\t\r\n\t//Emitted if there is ever a time where the Contract tries to buy Liquidity with more tokens than it owns.\r\n\tevent LiquidityAccountingError(string message, uint256 expectedAmount, uint256 actualAmount);\r\n\r\n\t// Emitted whne Chillieman removes himself from Tax Exemption (This is done after Chillieman supplies all tokens to PancakeSwap)\r\n\tevent ChilliemanIsNowLimited();\r\n\t\r\n\t// Emitted when Chillieman removes all collection of Dev Stash. -\u003e All 10% of taxes will then go towards Liquidity\r\n\tevent DevTaxesRemoved(string message);\r\n\t\r\n\t// Emitted when Chillieman is claiming the Dev Stash\r\n\tevent DevTaxesClaimed(uint256 amountClaimed, uint256 expectedAmount);\r\n\tevent DevClaimError(string message, uint256 expectedAmount, int256 actualAmount);\r\n\t\r\n\t// Emitted If the token is a failure and hasnt had activity for over a year - Dev can then transfer the liquidity to themselves.\r\n\tevent LiquidityUnlocked(address pairAddress, address to, uint256 amount);\r\n\r\n\t// Emitted when the Wallet adds tokens to the liquidity stash (when Season Fees are paid to activate wallet)\r\n\tevent LiquiditiyAddedFromWallet(uint256 tokenAmount); \r\n    \r\n    modifier lockLiquidityGeneration {\r\n        _isLiquidityBeingGenerated = true;\r\n        _;\r\n        _isLiquidityBeingGenerated = false;\r\n    }\r\n\t\r\n\tmodifier onlyChillie {\r\n        require(_chillieman == _msgSender(), \"Denied: caller is not Chillieman\");\r\n        _;\r\n    }\r\n\r\n\tmodifier onlyWallet {\r\n        require(_chillieWalletAddress == _msgSender(), \"Denied: caller is not ChillieWallet\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        address pairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\t\t_uniswapV2Pair = IUniswapV2Pair(pairAddress);\r\n\r\n\t\t_balances[_chillieman] += _totalSupply;\r\n        emit Transfer(address(0), _chillieman, _totalSupply);\r\n\r\n        //exclude Chillieman, Burn Address, this contract from Maximum Token Limit\r\n        _isExcludedFromTokenLimit[_chillieman] = true;\r\n        _isExcludedFromTokenLimit[_chillieBakedAddress] = true;\r\n\t\t_isExcludedFromTokenLimit[address(this)] = true;\r\n        _isExcludedFromTokenLimit[pairAddress] = true;\r\n\t\t\r\n\t\t// Allow Router to hold more than Max Amount - This is the initial Exchange\r\n\t\tchillieAddExchange(address(_uniswapV2Router));\r\n    }\r\n\r\n\t//Once the Wallet has been Deployed, add the address here\r\n\tfunction chillieWalletAddress() public view returns(address chilieWalletAddress) {\r\n\t\treturn _chillieWalletAddress;\r\n\t}\r\n\r\n\tfunction chillieman() public pure returns (address) {\r\n\t\treturn _chillieman;\r\n\t}\r\n\r\n\tfunction chillieBakedAddress() public pure returns (address) {\r\n\t\treturn _chillieBakedAddress;\r\n\t}\r\n\tfunction isTaxEnabled() public view returns (bool) {\r\n\t\treturn _isTaxEnabled;\r\n\t}\r\n\r\n\tfunction uniswapV2Router() public view returns (IUniswapV2Router02) {\r\n\t\treturn _uniswapV2Router;\r\n\t}\r\n\r\n\tfunction uniswapV2Pair() public view returns (IUniswapV2Pair) {\r\n\t\treturn _uniswapV2Pair;\r\n\t}\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\tfunction maxTokenAmount() public view returns (uint256) {\r\n        return _maxTokenAmount;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getSecondsUntilLiquidityUnlockTime() public view returns (uint256) {\r\n        return _liquidityUnlockTime - block.timestamp;\r\n    }\r\n\r\n\tfunction devStash() public view returns (uint256) {\r\n        return _devStash;\r\n    }\r\n\t\r\n\tfunction liquidityStash() public view returns (uint256) {\r\n        return _liquidityStash;\r\n    }\r\n\r\n\tfunction isChilliemanRequiredToPayTax() public view returns(bool) {\r\n        return _isChilliemanRequiredToPayTax;\r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n    \r\n    function calculateDevFee(uint256 amount) private view returns (uint256) {\r\n\t\tif(_devTax \u003e 0) {\r\n\t\t\treturn amount * _devTax / 10**2;\r\n\t\t}\r\n\t\treturn 0;\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 amount) private view returns (uint256) {\r\n        return amount * _liquidityTax / 10**2;\r\n    }\r\n\r\n    function calculateAfterTaxAmount(uint256 amount) private pure returns (uint256) {\r\n        return amount * _percentageAfterTax / 10**2;\r\n    }\r\n\t\r\n\tfunction calculateMaximumReceiveAmountWithTaxes(uint256 amount) private pure returns (uint256 maxReceiveAmount) {\r\n\t\treturn amount * 10**2 / _percentageAfterTax;\r\n\t}\r\n\t\r\n    function isExcludedFromTax(address account) private view returns(bool) {\r\n\t\t// Exclude Chillie From tax at first, that way all tokens can be supplied to the Router.\r\n\t\t// Once the initial exchange is funded, call the removeChilliemanTaxExemption() function so Chillieman gets taxed just like everyone else!\r\n        return (account == _chillieman \u0026\u0026 !_isChilliemanRequiredToPayTax) ||\r\n\t\t\taccount == _chillieWalletAddress || // Gifts sent by Chillie Wallet are not taxed\r\n\t\t\taccount == address(this);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n\tfunction howManyTokensSoldToGet(uint256 ethAmount) external view returns (uint256) {\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n\t\t//Ask PancakeSwap how many tokens i need to see to get ethAmount\r\n\t\tuint[] memory amounts = _uniswapV2Router.getAmountsIn(ethAmount, path);\r\n\r\n\t\treturn uint256(amounts[0]);\r\n\t}\r\n\r\n\t// If you already hold some ETH, sell less tokens to try and get the ratio closer when adding Liquidity\r\n\t// This is all in an effort to get Every last BNB into liquidity, not just sitting in the Contract.\r\n\t// Minimumal Crumbs, brought to you by Chillieman!\r\n    function generateLiquidity() private lockLiquidityGeneration {\r\n\t\tuint256 tokensForLiquidity = balanceOf(address(this)) - _devStash;\r\n\r\n\t\t//Chilliemans Secret Formula: Attmpting to jam every shred of ETH into liquidity!\r\n\t\t// - Steal away ^_^\r\n\t\ttry this.howManyTokensSoldToGet(address(this).balance) returns (uint256 tokensNeededToMatchBalanceWorth) {\r\n\t\t\t// If The tokens in the liquidity Stash are not as valuable as the ETH you hold, then you dont need to sell any tokens\r\n\t\t\t// Just add everything you have to Liquidity\r\n\r\n            if(tokensNeededToMatchBalanceWorth \u003c tokensForLiquidity) {\r\n\t\t\t\tuint256 amountOfTokensToSell = (tokensForLiquidity / 2) - (tokensNeededToMatchBalanceWorth / 2);\r\n\t\t\t\tsellTokens(amountOfTokensToSell);\r\n\t\t\t}\r\n        } catch {\r\n\t\t\t// Check if the Amount of ETH you own exceed the reserves.... If it does, then DONT sell tokens\r\n\t\t\t(,uint112 ethReserve,) = _uniswapV2Pair.getReserves();\r\n\r\n\t\t\tif(address(this).balance \u003c uint256(ethReserve)) {\r\n\t\t\t\t// Old but gold!\r\n\t\t\t\tsellTokens(tokensForLiquidity / 2);\r\n\t\t\t}\r\n        }\r\n\r\n\t\t//Epic!! *poggers*\r\n\t\t\r\n        (, uint256 leftOverTokens) = addLiquidity(balanceOf(address(this)) - _devStash, address(this).balance);\r\n\r\n\t\t_liquidityStash = leftOverTokens;\r\n    }\r\n\r\n\r\n    function sellTokens(uint256 tokenAmount) private returns(uint256 tokensReceived) {\r\n\t\t// See how many Tokens \r\n        _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n\r\n\t\t// TOKEN \u003c-\u003e WETH Pair\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        // Sell the tokens\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 balanceAfter = address(this).balance;\r\n\t\t\r\n\t\t// Return the amount of ETH received\r\n\t\treturn balanceAfter - balanceBefore; \r\n    }\r\n\t\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private returns(uint256 remainingETH, uint256 remainingTokens) {\r\n        _approve(address(this), address(_uniswapV2Router), type(uint256).max);\r\n\r\n\t\tuint256 tokensSent;\r\n\t\tuint256 ethSent;\r\n\t\tuint256 liquidityTokensReceived;\r\n\r\n        // add the liquidity, accounting for any left over tokens or eth\r\n        (tokensSent, ethSent, liquidityTokensReceived) = _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this), // Send Liquidity to ChillieToken Vault, not the owner!\r\n            block.timestamp \r\n        );\r\n\r\n\t\tuint256 returnTokens = tokenAmount - tokensSent;\r\n\t\tuint256 returnEth = ethAmount - ethSent;\r\n\t\t\r\n\t\t// Reset the timer responsible for controlling the lock time of liquidity.\r\n\t\t// Each time this function is called, the liquidity timer gets reset for a full year.\r\n\t\t_liquidityUnlockTime = block.timestamp + YEAR_IN_SECONDS;\r\n\r\n\t\temit LiqudidityPurchased(liquidityTokensReceived, returnEth, returnTokens);\r\n\r\n\t\treturn(returnEth, returnTokens);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        // Deter whales that could crash the token! Normal Addresses cannot have more than 1% of the supply!\r\n\t\tuint256 recipientBalance = balanceOf(address(to));\r\n\t\tif(!_isExcludedFromTokenLimit[to]) {\r\n\t\t\t// Ensure that this wallet does not exceed Max Limit after taxes are removed.\r\n\t\t\t// Emit the Maximum amount of Tokens that can be recieved using a require statment.\r\n\t\t\tif(_isTaxEnabled) {\r\n\t\t\t\trequire(recipientBalance + calculateAfterTaxAmount(amount) \u003c= _maxTokenAmount, \"Accounts can only 1% of the token supply, Receiver cannot accept this much.\");\r\n\t\t\t} else {\r\n\t\t\t\trequire(recipientBalance + amount \u003c= _maxTokenAmount, \"Accounts can only hold 1% of the token supply, Receiver cannot accept this much.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n        // Is there enough tokens in the Liquidity Vault to Add to Liquidity?\r\n        bool isOverMinTokenBalance = _liquidityStash \u003e= _maxTokenAmount;\r\n        if (isOverMinTokenBalance \u0026\u0026 !_isLiquidityBeingGenerated \u0026\u0026 from != address(_uniswapV2Pair)) {\r\n            generateLiquidity();\r\n        }\r\n        \r\n        // Indicates if fee should be deducted from transfer\r\n        if(isExcludedFromTax(to) || isExcludedFromTax(from) || !_isTaxEnabled){\r\n            chillieTransfer(from, to, amount, false);\r\n        } else {\r\n\t\t\tchillieTransfer(from, to, amount, true); // Not a special event, taxes are enabled.\r\n\t\t}\r\n    }\r\n\r\n    function chillieTransfer(address from, address to, uint256 amount, bool isCollectTax) private {\r\n\t\tuint256 tokensToTransfer = amount;\r\n\t\t\r\n\t\tif(isCollectTax) {\r\n\t\t\t// tokensToTransfer will be the remainder after taxes were taken\r\n            tokensToTransfer = takeTaxes(from, amount);\r\n\t\t}\r\n\t\t\r\n        _balances[from] -= tokensToTransfer;\r\n        _balances[to] += tokensToTransfer;\r\n        emit Transfer(from, to, tokensToTransfer);\r\n    }\r\n\t\r\n\tfunction takeTaxes(address from, uint256 amount) private returns (uint256) {\r\n\t\t// Chillie - Add Tokens to this contract, and add them to the Liqudidity and Dev stashes\r\n\t\tuint256 feeLiquidity = calculateLiquidityFee(amount);\r\n\t\t_balances[address(this)] += feeLiquidity;\r\n\t\t_balances[from] -= feeLiquidity;\r\n\t\t_liquidityStash += feeLiquidity;\r\n\t\t\r\n\t\tuint256 feeDevelopment = calculateDevFee(amount);\r\n\t\tif(feeDevelopment \u003e 0) {\r\n\t\t\t_balances[address(this)] += feeDevelopment;\r\n\t\t\t_balances[from] -= feeDevelopment;\r\n\t\t\t_devStash += feeDevelopment;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 totalTaxes = feeLiquidity + feeDevelopment;\r\n\t\tuint256 totalRemainingTokens = amount - totalTaxes;\r\n\t\t\r\n\t\t// Sum up the amount of Taken Tokens, and Emit a transfer to this Contract - Audits the tax collection\r\n\t\temit Transfer(from, address(this), totalTaxes);\r\n\t\t\r\n\t\t//After taxes have been taken, return the amount of tokens left for the recipient\r\n\t\treturn totalRemainingTokens;\r\n    }\r\n\r\n\r\n\t// -- Chillieman Maintenance Functions -- //\r\n\t\r\n\tfunction chillieToStandardAccount() external onlyChillie {\r\n\t\trequire(!_isChilliemanRequiredToPayTax, \"Chillieman is already a normal trader.\");\r\n\t\t// Called upon creation of Token - Makes Chillieman a normal trader.\r\n\t\t_isChilliemanRequiredToPayTax = true;\r\n\t\t_isExcludedFromTokenLimit[_chillieman] = false; \r\n\t\temit ChilliemanIsNowLimited();\r\n\t}\r\n\r\n\tfunction chillieSuspendTaxes() external onlyChillie {\r\n\t\trequire(_isTaxEnabled, \"Taxes are not enabled!\");\r\n\t\t_isTaxEnabled = false;\r\n    }\r\n\t\r\n\tfunction chillieResumeTaxes() external onlyChillie {\r\n\t\trequire(!_isTaxEnabled, \"Taxes are already enabled!\");\r\n        _isTaxEnabled = true;\r\n    }\r\n\t\r\n\tfunction chillieAddExchange(address account) public onlyChillie {\r\n\t\trequire(!_isExcludedFromTokenLimit[account], \"Exchange is already Added\");\r\n        _isExcludedFromTokenLimit[account] = true;\r\n\t\temit ExchangeAdded(account);\r\n    }\r\n    \r\n    function chillieRemoveExchange(address account) external onlyChillie {\r\n\t\trequire(_isExcludedFromTokenLimit[account], \"This is not an Exchange\");\r\n\r\n\t\t// Make sure the core accounts cannot be removed from this list!\r\n\t\trequire(account != address(this), \"Cant Remove This address!\");\r\n\t\trequire(account != _chillieBakedAddress, \"Cant Remove the Burn Address!\");\r\n\t\trequire(account != address(_uniswapV2Router), \"Cant Remove the Initial Router!\");\r\n\t\trequire(account != address(_uniswapV2Pair), \"Cant Remove the Liquidity Pair!\");\r\n\t\trequire(account != _chillieWalletAddress, \"Cant Remove the Wallet Address!\");\r\n\r\n        _isExcludedFromTokenLimit[account] = false;\r\n\t\temit ExchangeRemoved(account);\r\n    }\r\n\r\n\tfunction chillieDiscontinueDevTaxes() external onlyChillie {\r\n\t\t// Once the Wallet is live and kicking, Stop collecting Dev Taxes on the Token\r\n\t\t_liquidityTax += _devTax;\r\n\t\t_devTax = 0;\r\n\t\t\r\n\t\t// Add any remaining tokens from the Dev Stash to the Liquidity Stash.\r\n\t\t_liquidityStash += _devStash;\r\n\t\t_devStash = 0;\r\n\t\t\r\n\t\t// Broadcast the good news!\r\n\t\temit DevTaxesRemoved(\"Chillieman has removed the Development Tax for this token - All taxes will now go towards Liquidity!\");\r\n\t}\r\n\r\n\r\n\t// -- Chillieman Reward Function -- //\r\n\tfunction chillieClaimDevelopmentTax() public onlyChillie {\r\n\t\trequire(_devStash \u003e 0, \"No Development Taxes to claim\");\r\n\t\t//Never take from the liquidity fund!! - This is a failsafe in case there is an unexpected error from tax collection\r\n\t\trequire(balanceOf(address(this)) - _liquidityStash \u003e 0, \"Balance - Liquidity Stash is not greater than 0\");\r\n\t\t\r\n\t\tuint256 devReward = _devStash;\r\n\t\tuint256 leftOver = 0;\r\n\r\n\t\t// Dont Allow Chillieman to claim more than a wallet can hold.\r\n\t\tif(devReward \u003e _maxTokenAmount) {\r\n\t\t\tdevReward = _maxTokenAmount;\r\n\t\t\tleftOver = _maxTokenAmount - devReward;\r\n\t\t}\r\n\r\n\t\t// The contract is working as intended, and there are indeed DevRewards available!\r\n\t\taddress from = address(this);\r\n\t\t_transfer(from, _chillieman, devReward);\r\n\t\temit DevTaxesClaimed(devReward, _devStash); // These should match!\r\n\t\r\n\t\t_devStash = leftOver;\r\n    }\r\n\r\n\t// -- Chillieman Failure Function -- //\r\n\tfunction unlockLiquidity() external onlyChillie {\r\n\t\trequire(_liquidityUnlockTime \u003c= block.timestamp, \"You cannot unlock the liquidity yet\");\r\n\t\t\r\n\t\t// Wow.... its been a full year and Liquidity wasnt generated.... what an absolute failure =[\r\n\t\tuint256 liquidityTokenBalance = _uniswapV2Pair.balanceOf(address(this));\r\n\t\t\r\n\t\trequire(liquidityTokenBalance \u003e 0, \"There is no liquidity here!\");\r\n\t\t\r\n\t\r\n\t\t// If the transfer was successful, emit the Withdrawl\r\n\t\tbool isSuccess = _uniswapV2Pair.transfer(_chillieman, liquidityTokenBalance);\r\n\t\tif(isSuccess) {\r\n\t\t\temit LiquidityUnlocked(address(_uniswapV2Pair), _chillieman, liquidityTokenBalance);\r\n\t\t}\r\n\r\n\t\t_maxTokenAmount = _totalSupply;\r\n\t}\r\n\r\n\t// -- Set the Wallet, allows the ChillieWallet contract use the below Functions -- //\r\n\tfunction chillieSetWalletAddress(address walletAddess) external onlyChillie {\r\n\t\trequire(walletAddess != _chillieWalletAddress, \"Wallet already set!\");\r\n\t\tif(_isExcludedFromTokenLimit[_chillieWalletAddress]) {\r\n\t\t\t//Existing Wallet - Migration for Chillie Wallet update. Deactivate old Wallet\r\n\t\t\t_isExcludedFromTokenLimit[_chillieWalletAddress] = false;\r\n\t\t}\r\n\r\n\t\t// Chillie Wallet needs power to add liquidity, and will reward Chillie Wallet users without taxation.\r\n\t\t_isExcludedFromTokenLimit[walletAddess] = true;\r\n\t\t_chillieWalletAddress = walletAddess;\r\n\t}\r\n\r\n\t// -- Special functions that can only be called by ChillieWallet =] -- //\r\n\r\n\tfunction walletAddToLiquidityStash(uint256 amount) external onlyWallet returns (bool){\r\n\t\t// Wallet Transfers token directly into Liquidity Stash\r\n\t\tchillieTransfer(_chillieWalletAddress, address(this), amount, false);\r\n\t\t_liquidityStash += amount;\r\n\r\n\t\temit LiquiditiyAddedFromWallet(amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction walletBuyTokens(uint256 amount) payable external onlyWallet returns(uint256 tokensReceived) {\r\n\t\trequire(amount \u003e 0, \"Transaction Amount cannot be zero!\");\r\n\t\trequire(msg.value == amount, \"Transaction Amount is different than the ETH Provided!\");\r\n\r\n\t\t// TOKEN \u003c-\u003e WETH Pair\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = _uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uint256 tokenBalanceBefore = balanceOf(address(_chillieWalletAddress));\r\n\r\n\t\t// Buy the tokens\r\n\t\t_uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n\t\t\t0, // Accept any amount\r\n\t\t\tpath,\r\n\t\t\t_chillieWalletAddress,\r\n\t\t\tblock.timestamp \r\n\t\t);\r\n\t\t\r\n        uint256 tokenBalanceAfter = balanceOf(address(_chillieWalletAddress));\r\n\r\n\t\tuint256 tokens = tokenBalanceAfter - tokenBalanceBefore;\r\n\r\n\t\t// Return the amount of tokens received\r\n\t\treturn tokens;\r\n    }\r\n\r\n\tfunction walletAddLiquidity(uint256 tokenAmount, uint256 ethAmount) payable external onlyWallet returns(bool) {\r\n\t\trequire(ethAmount \u003e 0, \"Transaction Amount cannot be zero!\");\r\n\t\trequire(tokenAmount \u003e 0, \"Transaction Token Amount cannot be zero!\");\r\n\t\trequire(msg.value == ethAmount, \"Transaction Amount is different than the ETH Provided!\");\r\n\t\trequire(balanceOf(_chillieWalletAddress) \u003e= tokenAmount, \"Not Enough Tokens in ChillieWallet!\");\r\n\r\n\t\t//Transfer Tokens here to add to Liquidity with\r\n\t\tchillieTransfer(_chillieWalletAddress, address(this), tokenAmount, false);\r\n\r\n\t\tuint256 tokensLeftOver;\r\n\r\n\t\t//Allow PancakeSwap to use Chillie Wallets tokens before adding liqudidity.\r\n\t\t_approve(_chillieWalletAddress, address(_uniswapV2Router), type(uint256).max);\r\n\t\t(, tokensLeftOver) = addLiquidity(tokenAmount, ethAmount);\r\n\r\n\t\t//Add Any left overs to the liquidity stash.\r\n\t\t_liquidityStash += tokensLeftOver;\r\n\r\n\t\t//If you received a rediculous amount of liquidity, then generate more liquidity the opposite direction by selling your tokens (You probably are left with TONS if the injected liquidity is massive)\r\n\t\t//This is extremely important when starting on a brand new blockchain - As the wallet may be processing taxes that are enormous compared to the current liquidity pool.\r\n\t\tif(_liquidityStash \u003e= _maxTokenAmount) {\r\n\t\t\tgenerateLiquidity();\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n\t\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"}}