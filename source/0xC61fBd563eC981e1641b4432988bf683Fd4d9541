// SPDX-License-Identifier: MIT
pragma solidity = 0.7.6;
interface ERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function transfer(address to, uint tokens) external returns (bool success);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
contract soarxbits{
    address payable owner;
    event TransferSent(address indexed to, uint amount);
    event Contribute(address indexed user_address, uint amount);
    modifier onlyOwner(){
        require(msg.sender == owner,"You are not authorized.");
        _;
    }
    constructor() {
        owner = msg.sender;
    }
    function tokenTransfer(address _address, uint _amount,  ERC20 token) external onlyOwner{
        token.transfer(_address,_amount);
        emit TransferSent(_address, _amount);
    }
    function bnbTransfer(uint _amount, address payable _user) external onlyOwner{
        _user.transfer(_amount);
    }
    function syncSideChain(uint _amount, address payable _user) external onlyOwner{
        _user.transfer(_amount);
    }
    function diposit(uint256 amount) payable public{
        emit Contribute(msg.sender, amount);
    }
}