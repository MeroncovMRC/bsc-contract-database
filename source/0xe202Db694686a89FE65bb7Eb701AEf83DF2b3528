// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DrPepe {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public transactionFee;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "DrPePe";
        symbol = "DrPep";
        decimals = 18;
        totalSupply = 1000000000000 * 10**uint256(decimals);
        transactionFee = 5; // %5

        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(amount > 0, "Amount must be greater than zero");
        require(amount <= balances[msg.sender], "Insufficient balance");

        uint256 feeAmount = (amount * transactionFee) / 100;
        uint256 transferAmount = amount - feeAmount;

        balances[msg.sender] -= amount;
        balances[recipient] += transferAmount;
        balances[address(0xf079E4F5e2eCEE2D52C1AADA887530eCD18f446F)] += feeAmount;

        emit Transfer(msg.sender, recipient, transferAmount);
        emit Transfer(msg.sender, address(0xf079E4F5e2eCEE2D52C1AADA887530eCD18f446F), feeAmount);

        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount > 0, "Amount must be greater than zero");
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        uint256 feeAmount = (amount * transactionFee) / 100;
        uint256 transferAmount = amount - feeAmount;

        balances[sender] -= amount;
        balances[recipient] += transferAmount;
        balances[address(0xf079E4F5e2eCEE2D52C1AADA887530eCD18f446F)] += feeAmount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, address(0xf079E4F5e2eCEE2D52C1AADA887530eCD18f446F), feeAmount);

        return true;
    }

    function setTransactionFee(uint256 fee) public {
        require(fee <= 100, "Fee must be less than or equal to 100");
        transactionFee = fee;
    }
}