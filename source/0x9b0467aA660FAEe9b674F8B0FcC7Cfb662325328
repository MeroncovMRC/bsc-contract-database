// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VisionaryToken {
    string public name = "Visionary";
    string public symbol = "VSY";
    uint256 public totalSupply = 100000000000 * 10**18; // 100,000,000,000 tokens con 18 decimales
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public lockupPeriod;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        require(lockupPeriod[msg.sender] <= block.timestamp, "Token locked");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function burn(uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");

        balanceOf[msg.sender] -= value;
        totalSupply -= value;
        emit Burn(msg.sender, value);
        return true;
    }

    function setLockupPeriod(uint256 daysToLock) public {
        require(daysToLock >= 1 && daysToLock <= 365, "Invalid lockup period");

        lockupPeriod[msg.sender] = block.timestamp + (daysToLock * 1 days);
    }
}