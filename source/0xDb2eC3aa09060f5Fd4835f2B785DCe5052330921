
// File: contracts/nodeLp/interfaces/ILock.sol
// SPDX-License-Identifier: MIT
interface ILock {
    function locking(address account, uint256 lock) external;
}


// File: contracts/nodeLp/interfaces/IMosNftPool.sol
// SPDX-License-Identifier: MIT
interface IMosNftPool {
    function getSuperior(address _account) external returns (address);
}


// File: contracts/nodeLp/interfaces/IMosPool.sol
// SPDX-License-Identifier: MIT
interface IMosPool {
    function balanceOf(address _account) external returns (uint);
}


// File: contracts/nodeLp/nodeLp.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "contracts/util/IERC20.sol";
import "contracts/util/SafeMath.sol";
import "./interfaces/ILock.sol";
import "./interfaces/IMosPool.sol";
import "./interfaces/IMosNftPool.sol";

contract TokenReceiver {
    //回流
    constructor(address token) {
        IERC20(token).approve(msg.sender, type(uint256).max);
    }
}

contract NODELP {
    using SafeMath for uint;
    enum opreate {
        stake,
        upStake,
        claim
    }

    struct StakedInfo {
        uint index;
        uint stakedAmount;
        uint updateTime;
        uint available;
        uint accruedReward;
        uint inviteReward;
    }

    StakedInfo public globalStakedInfo;
    mapping(address => StakedInfo) public userStakedInfos;

    uint public startTime;
    uint public yearHalfCount;
    uint public yearHalfAmount = 8000000e18;
    uint public subHalfTime = 365 days;
    uint public backFlowAmount;

    address public tokenReceiver;
    address public owner;
    IERC20 public asdic;

    ILock public lock;
    ILock public lockInvite;
    IMosPool public mosPool;
    IMosNftPool public mosNftPool;

    constructor(
        address _mosPool,
        address _mosNftPool,
        address _asdic,
        address _lock,
        address _lockInvite
    ) {
        owner = msg.sender;
        asdic = IERC20(_asdic);
        lock = ILock(_lock);
        lockInvite = ILock(_lockInvite);
        mosPool = IMosPool(_mosPool);
        mosNftPool = IMosNftPool(_mosNftPool);
        IERC20(asdic).approve(address(lock), type(uint).max);
        IERC20(asdic).approve(address(lockInvite), type(uint).max);
        tokenReceiver = address(new TokenReceiver(_asdic));
    }

    function async() external returns (string memory) {
        address sender = msg.sender;
        uint newAmount = IMosPool(mosPool).balanceOf(sender);
        uint temp;

        StakedInfo memory userInfo = userStakedInfos[sender];

        if (newAmount == userInfo.stakedAmount) return "invalid async";

        if (newAmount > userInfo.stakedAmount) {
            temp = newAmount.sub(userInfo.stakedAmount);
            updateIndex(opreate.stake, temp);
            updateUserIndex(msg.sender, opreate.stake, temp);
        }
        if (newAmount < userInfo.stakedAmount) {
            temp = newAmount.sub(userInfo.stakedAmount);
            updateIndex(opreate.upStake, temp);
            updateUserIndex(msg.sender, opreate.upStake, temp);
        }
        return "async successful";
    }

    function setOwner(address _owner) external {
        require(msg.sender == owner, "Not owner!");
        owner = _owner;
    }

    function setSubHalfTime(uint _time) external {
        require(msg.sender == owner, "No owner to set the time");
        subHalfTime = _time;
    }

    function halfYear() internal returns (uint) {
        require(subHalfTime > 0, "SubHalf time error");
        startTime = startTime == 0 ? block.timestamp : startTime;
        uint yearCount = (block.timestamp - startTime).div(subHalfTime);
        uint value;
        if (yearHalfCount <= yearCount) {
            yearHalfCount = yearCount + 1;
            uint backflow = IERC20(asdic).balanceOf(address(tokenReceiver));
            if (backflow > 0) {
                IERC20(asdic).transferFrom(
                    tokenReceiver,
                    address(this),
                    backflow.div(2)
                );
                backFlowAmount = backflow.div(2);
            }

            yearHalfAmount = yearHalfAmount.div(2);
        }
        value = backFlowAmount + yearHalfAmount;
        return value.div(subHalfTime);
    }

    function getHalfYear() internal view returns (uint) {
        if (yearHalfAmount == 0) {
            return 0;
        }
        uint value = backFlowAmount + yearHalfAmount;
        return value.div(subHalfTime);
    }

    function claim() external {
        address sender = msg.sender;
        updateIndex(opreate.claim, 0);
        updateUserIndex(sender, opreate.claim, 0);

        StakedInfo storage userStakedInfo = userStakedInfos[sender];

        if (userStakedInfo.available > 0) {
            uint temp = userStakedInfo.available;
            address superior = IMosNftPool(mosNftPool).getSuperior(sender);
            if (superior != address(0)) {
                userStakedInfos[superior].inviteReward += temp.mul(30).div(100);

                IERC20(asdic).transfer(
                    sender,
                    temp.mul(70).div(100).mul(30).div(100)
                );
                ILock(lock).locking(
                    sender,
                    temp.mul(70).div(100).mul(70).div(100)
                );
                userStakedInfo.accruedReward += temp;
                userStakedInfo.available = 0;
            }
        }
        if (userStakedInfo.inviteReward > 0) {
            uint temp = userStakedInfo.inviteReward;
            IERC20(asdic).transfer(sender, temp.mul(30).div(100));
            ILock(lockInvite).locking(sender, temp.mul(70).div(100));
            userStakedInfo.inviteReward = 0;
            userStakedInfo.accruedReward += temp;
        }
    }

    function updateIndex(opreate _oprea, uint lpAmount) internal {
        StakedInfo storage info = globalStakedInfo;
        if (info.updateTime == 0 || info.stakedAmount == 0) {
            info.updateTime = block.timestamp;
            info.stakedAmount += lpAmount;
            halfYear();
            return;
        }
        uint release = halfYear();

        release = release.mul(block.timestamp - info.updateTime);

        release = release.mul(1e18);

        release = release.div(info.stakedAmount);

        info.index += release;

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.updateTime = block.timestamp;
    }

    function awaitGetAmount(address user) external view returns (uint) {
        StakedInfo memory infoGlo = globalStakedInfo;
        StakedInfo memory infoUser = userStakedInfos[user];

        uint secRelease = getHalfYear();

        if (infoGlo.stakedAmount == 0 || infoUser.stakedAmount == 0) return 0;

        uint _time = block.timestamp.sub(infoGlo.updateTime);

        uint _amount = _time.mul(secRelease);

        _amount = _amount.mul(1e18);

        _amount = _amount.div(infoGlo.stakedAmount);

        uint _gloIndex = infoGlo.index.add(_amount);

        uint value = _gloIndex.sub(infoUser.index);

        value = value.mul(infoUser.stakedAmount);
        value = value.div(1e18);
        value = value.add(infoUser.available);
        value = value.mul(70).div(100);
        return (value);
    }

    function updateUserIndex(
        address user,
        opreate _oprea,
        uint lpAmount
    ) internal {
        StakedInfo storage info = userStakedInfos[user];
        info.updateTime = block.timestamp;
        uint value = info.stakedAmount.mul(globalStakedInfo.index - info.index);

        value = value / 1e18;

        if (value != 0) {
            info.available += value;
        }

        if (_oprea == opreate.stake) {
            info.stakedAmount += lpAmount;
        }
        if (_oprea == opreate.upStake) {
            info.stakedAmount -= lpAmount;
        }

        info.index = globalStakedInfo.index;
    }
}


// File: contracts/util/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/util/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}
