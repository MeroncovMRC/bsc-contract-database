// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface BEP20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

contract TokenLocker {
    BEP20 public token;
    address public owner;
    uint256 public unlockTime;

    constructor(address _token, uint256 _unlockTime) {
        token = BEP20(_token);
        owner = msg.sender;
        unlockTime = _unlockTime;
    }

    function lockTokens(uint256 amount) public {
        require(token.transferFrom(msg.sender, address(this), amount), "Transfer failed");
        require(token.approve(msg.sender, amount), "Approval failed");
        unlockTime = block.timestamp + 1 days; // Lock tokens for 1 day
    }

    function unlockTokens() public {
        require(msg.sender == owner, "Only owner can unlock tokens");
        require(block.timestamp >= unlockTime, "Tokens are still locked");
        uint256 balance = token.balanceOf(address(this));
        require(token.transfer(owner, balance), "Transfer failed");
    }
}