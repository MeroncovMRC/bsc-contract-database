// Wrapped GALA. WGALA.
// wrapped gala contract address = 0x2BbC15B6D5dD00778267c4321E100007eEDfcA8B;
// Ratio 1:1

// To Receive GALA For WGALA, Send your WGALA to GALA Contract.
// GALA Contract = 0x7dDEE176F665cD201F93eEDE625770E2fD911990;



interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.8.0;




contract TokenBatchTransfer {
    address public admin;
    IERC20 public token;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function setAdmin(address _admin) external {
        require(admin == address(0), "Admin has already been set");
        admin = _admin;
    }

    function setToken(address _token) external onlyAdmin {
        token = IERC20(_token);
    }

    function batchTransfer(address[] memory recipients, uint256[] memory amounts) external onlyAdmin {
        require(recipients.length == amounts.length, "Invalid input");

        for (uint256 i = 0; i < recipients.length; i++) {
            token.transfer(recipients[i], amounts[i]);
        }
    }
}