pragma solidity ^0.4.11;


contract Ownable {
    address public owner;

    function Ownable() {
        owner = "0x6d3124eC802C9502Db6FFa1d9bd5b0069F701e5f";
    }

    modifier onlyOwner() {
        if (msg.sender != owner){
            throw ;
        }
        _;
    }

    function transferWoner(address newOwner) onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }
}

contract Token {
    function transfer(address to, uint value) returns (bool);
}

contract GrowMultisender is Ownable {
    function multisend(address _tokenAddr,address[] _to, uint256[] _value)
    returns (bool _success) {
        assert(_to.length == _value.length);
        assert(_to.length<=1000);
        for(uint256 i=0; i< _to.length;i++){
            assert((Token(_tokenAddr).transfer(_to[i], _value[i]))==true);
        }
        return true;
    }
}