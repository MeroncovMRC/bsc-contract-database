// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract BATEAirdrop {
    
    IERC20 public constant BATE_TOKEN = IERC20(0x9516899A72DD690191715876b5903757Fe76a473);
    address payable public constant COMMISSION_ADDRESS = payable(0xDfd6dFa51A9f6d33F841a3d046eb6E8EbE0537EA);
    
    uint256 public constant TOTAL_AIRDROP_AMOUNT = 50000000 * 10**18; // 50 million BATE tokens
    uint256 public constant CLAIM_AMOUNT = 1000 * 10**18; // 1000 BATE tokens per claim
    uint256 public constant COMMISSION_AMOUNT = 64000000000000000; // 0.064 BNB
    
    uint256 public totalClaims;
    mapping(address => bool) public claimed;
    
    event AirdropClaimed(address recipient, uint256 amount);
    
    function claimAirdrop() external {
        require(BATE_TOKEN.balanceOf(address(this)) >= CLAIM_AMOUNT, "Insufficient balance in contract");
        require(!claimed[msg.sender], "Already claimed");
        claimed[msg.sender] = true;
        require(BATE_TOKEN.transfer(msg.sender, CLAIM_AMOUNT), "Transfer failed");
        require(BATE_TOKEN.transfer(COMMISSION_ADDRESS, COMMISSION_AMOUNT), "Commission transfer failed");
        totalClaims++;
        emit AirdropClaimed(msg.sender, CLAIM_AMOUNT);
    }
    
    function remainingAirdropBalance() external view returns (uint256) {
        return BATE_TOKEN.balanceOf(address(this));
    }
}