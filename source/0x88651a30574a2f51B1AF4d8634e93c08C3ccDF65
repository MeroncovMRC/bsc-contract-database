// SPDX-License-Identifier: none
pragma solidity ^0.8.12;

interface ERC20 {
    function totalSupply() external view returns (uint theTotalSupply);
    function balanceOf(address _owner) external view returns (uint balance);
    function transfer(address _to, uint _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);
    function approve(address _spender, uint _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint remaining);
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
}

contract MultiSenderYesWorld{
  
  address public owner = msg.sender;
  address public contractAddr = address(this);
  address public tokenAddr = 0xB9d35811424600fa9E8cD62A0471fBd025131cb8;
  event Withdraw(address user, uint amount);
  event sendMultiTokenEv(address caller, uint addrCnt);
  event OwnershipTransferred(address user);
  

    constructor() {
    
    }



    //Multi send different token amount from contract
    function sendMultiToken(address[] memory recipients, uint256[] memory amounts) external {
        require(msg.sender == owner, "Only owner");
        ERC20 tokenAddrObj    = ERC20(tokenAddr);
        require(recipients.length > 0,"Invalid recipients");
        require(recipients.length == amounts.length,"amount and recipients count should be same");
        
        uint256 length = recipients.length;
        uint256 currentSum = 0;
        uint256 currentTokenBalance = tokenAddrObj.balanceOf(contractAddr);
        
        for (uint256 i = 0; i < length; i++) {
            uint256 amount = amounts[i];
            amount = amount*(10**10);
            currentSum = currentSum + amount;
        }
        
        require(currentTokenBalance >= currentSum, "Insufficient Fund");
        
        for (uint256 i = 0; i < length; i++) {
            uint256 amount = amounts[i];
            amount = amount*(10**10);
            tokenAddrObj.transfer(recipients[i], amount);
        }

        emit sendMultiTokenEv(msg.sender, recipients.length);
    }
    
    // Owner Token Withdraw    
    // Only owner can withdraw token 
    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {
        require(msg.sender == owner, "Only owner");
        require(to != address(0), "Cannot send to zero address");
        ERC20 _token = ERC20(tokenAddress);
        _token.transfer(to, amount);
        return true;
    }


    
    // Ownership Transfer
    // Only owner can call this function
    function transferOwnership(address to) public returns(bool) {
        require(msg.sender == owner, "Only owner");
        require(to != address(0), "Cannot transfer ownership to zero address");
        owner = to;
        emit OwnershipTransferred(to);
        return true;
    }

}