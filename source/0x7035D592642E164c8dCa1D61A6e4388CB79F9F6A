pragma experimental ABIEncoderV2;
pragma solidity ^0.8.0;

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract MultiTransfer {
    function transferV1(address caddress, address[] calldata tos,uint256 amount) public {
        require(tos.length > 0);
        for(uint i =0;i<tos.length;i++){
             IERC20(caddress).transferFrom(msg.sender,tos[i],amount);
        }
    }

    function transferV2(address caddress, address[] calldata tos,uint256[] calldata amounts) public {
        require(tos.length > 0);
        require(tos.length == amounts.length);
        for(uint i =0;i<tos.length;i++){
            IERC20(caddress).transferFrom(msg.sender,tos[i],amounts[i]);
        }
    }
}