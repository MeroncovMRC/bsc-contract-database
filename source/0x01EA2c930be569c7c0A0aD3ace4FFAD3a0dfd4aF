// Sources flattened with hardhat v2.13.0 https://hardhat.org

// File @openzeppelin/contracts/utils/Context.sol@v4.8.2

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File @openzeppelin/contracts/access/Ownable.sol@v4.8.2


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.2


// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.8.2


// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File contracts/RoziRewardTracker.sol


pragma solidity ^0.8.19;



contract RoziRewardTracker is Ownable, ReentrancyGuard {
    event LeaderBoardUpdated();

    using SafeMath for uint256;

    struct Tracked {
        address actorAddress;
        uint256 amount;
        uint256 reward;
    }

    uint256 constant FIRST_PRIZE_BPS = 5000;
    uint256 constant SECOND_PRIZE_BPS = 3000;
    uint256 constant THIRD_PRIZE_BPS = 2000;
    uint256 private constant _SEND_REWARD_NOT_ENTERED = 1;
    uint256 private constant _SEND_REWARD_ENTERED = 2;

    uint256 public currentCycle;

    uint256 public lastTimestamp;

    address public tokenContract;

    // remaining rewards of the cycle  goes to this wallet if we dont have 3 winners
    address public remainingWalletAddress;

    mapping(uint256 => Tracked[]) public trackingHistory;

    mapping(address => bool) public exemptContest;

    uint256 contestDuration = 48 * 60 * 60;

    uint256 private _sendRewardstatus;

    constructor(address _tokenContract, address _remainingWalletAddress) {
        tokenContract = _tokenContract;
        remainingWalletAddress = _remainingWalletAddress;
        _sendRewardstatus = _SEND_REWARD_NOT_ENTERED;
        lastTimestamp = 0;
    }

    function trackTransfer(
        address actorAddress,
        uint256 amount,
        bool buy
    ) public payable onlyTokenContract nonReentrant {
        if (exemptContest[actorAddress]) {
            return;
        }

        if (currentCycle == 0) {
            currentCycle = 1;
        }
        if (lastTimestamp == 0) {
            lastTimestamp = block.timestamp;
        }
        if (amount > 0 && actorAddress != address(0)) {
            checkCycleAndSendRewards();
            (
                Tracked memory actorAddressTracking,
                bool exists,
                uint256 position
            ) = getTrackedActor(actorAddress);
            if (actorAddressTracking.amount == 0) {
                if (buy) {
                    actorAddressTracking.amount = actorAddressTracking
                        .amount
                        .add(amount);
                }
            } else {
                if (buy) {
                    actorAddressTracking.amount = actorAddressTracking
                        .amount
                        .add(amount);
                } else if (amount > actorAddressTracking.amount) {
                    actorAddressTracking.amount = 0;
                } else {
                    actorAddressTracking.amount = actorAddressTracking
                        .amount
                        .sub(amount);
                }
            }
            addOrUpdateTracked(actorAddressTracking, exists, position);
        }
    }

    function checkCycleAndSendRewards() public noSendRewards {
        uint256 diff = block.timestamp.sub(lastTimestamp);
        if (diff > contestDuration) {
            sendRewardsOfTheLastDayCycle();
            uint256 multiplier = diff.div(contestDuration);
            lastTimestamp = lastTimestamp.add(multiplier.mul(contestDuration));
            currentCycle = currentCycle.add(multiplier);
        }
    }

    function bulkExemptContest(
        address[] memory accounts,
        bool state
    ) external onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            exemptContest[accounts[i]] = state;
        }
    }

    function currentRewards() external view returns (uint256) {
        uint256 diff = block.timestamp.sub(lastTimestamp);
        if (
            diff > contestDuration &&
            trackingHistory[currentCycle.add(1)].length == 0
        ) {
            return uint256(0);
        }
        return address(this).balance;
    }

    function getCurrentLeaderBoard() external view returns (Tracked[] memory) {
        uint256 diff = block.timestamp.sub(lastTimestamp);
        if (
            diff > contestDuration &&
            trackingHistory[currentCycle.add(1)].length == 0
        ) {
            return trackingHistory[currentCycle.add(1)];
        }
        Tracked[] memory currentTracked = trackingHistory[currentCycle];
        if (currentTracked.length > 1) {
            quickSortDesc(
                currentTracked,
                int(0),
                int(currentTracked.length - 1)
            );
        }
        return currentTracked;
    }

    function getLeaderBoard(
        uint256 cycle
    ) external view returns (Tracked[] memory) {
        uint256 targetedCycle = cycle > currentCycle ? currentCycle : cycle;
        Tracked[] memory leaderBoard = trackingHistory[targetedCycle];
        if (leaderBoard.length > 1) {
            quickSortDesc(leaderBoard, int(0), int(leaderBoard.length - 1));
        }
        return leaderBoard;
    }

    function getPreviousWinners() external view returns (Tracked[] memory) {
        uint256 cycle = currentCycle;
        uint256 diff = block.timestamp.sub(lastTimestamp);
        if (diff < contestDuration && cycle > 0) {
            cycle = cycle.sub(1);
        }
        Tracked[] memory previousWinnersAddresses = new Tracked[](cycle.mul(3));
        uint256 z = 0;
        for (uint256 i = cycle; i > 0; i--) {
            Tracked[] memory currentTracked = trackingHistory[i];
            uint256 max = currentTracked.length > 3 ? 3 : currentTracked.length;
            if (max > 1) {
                quickSortDesc(
                    currentTracked,
                    int(0),
                    int(currentTracked.length - 1)
                );
            }
            for (uint256 j = 0; j < max; j++) {
                if (currentTracked[j].actorAddress != address(0)) {
                    previousWinnersAddresses[z] = currentTracked[j];
                    z = z.add(1);
                }
            }
        }
        return previousWinnersAddresses;
    }

    function getCurrentCycleInfos()
        external
        view
        returns (
            uint256 cycle,
            uint256 startTimestamp,
            uint256 currentBlockTimestamp
        )
    {
        cycle = currentCycle;
        startTimestamp = lastTimestamp;
        currentBlockTimestamp = block.timestamp;
    }

    function getMyTrackingInfos() external view returns (Tracked memory) {
        (Tracked memory tracked, , ) = getTrackedActor(msg.sender);
        return tracked;
    }

    function updateTokenContractAddress(address a) external onlyOwner {
        require(a != address(0), "Zero address");
        tokenContract = a;
    }

    function updateRemainingWalletAddress(address a) external onlyOwner {
        require(a != address(0), "Zero address");
        remainingWalletAddress = a;
    }

    function updateContestDuration(uint256 newDuration) external onlyOwner {
        require(newDuration > 6 * 60 * 60, "Contest duration too low");
        contestDuration = newDuration;
    }

    /** INTERNALS METHODS */
    function getTrackedActor(
        address actorAddress
    )
        internal
        view
        returns (Tracked memory returnValue, bool exists, uint256 position)
    {
        Tracked[] storage currentTracked = trackingHistory[currentCycle];
        returnValue = Tracked(actorAddress, 0, 0);
        exists = false;
        for (uint256 i = 0; i < currentTracked.length; i++) {
            if (currentTracked[i].actorAddress == actorAddress) {
                returnValue = currentTracked[i];
                exists = true;
                position = i;
                break;
            }
        }
    }

    function addOrUpdateTracked(
        Tracked memory newTrackedCaculation,
        bool exists,
        uint256 position
    ) internal {
        bool winnersUpdate = !exists || position < 3;
        Tracked[] storage currentTracked = trackingHistory[currentCycle];
        if (currentTracked.length == 0 || !exists) {
            currentTracked.push(
                Tracked(
                    newTrackedCaculation.actorAddress,
                    newTrackedCaculation.amount,
                    0
                )
            );
        } else {
            Tracked storage tracked = currentTracked[position];
            tracked.amount = newTrackedCaculation.amount;
        }

        if (winnersUpdate) {
            emit LeaderBoardUpdated();
        }
    }

    function sendRewardsOfTheLastDayCycle() internal {
        Tracked[] memory currentTracked = trackingHistory[currentCycle];
        if (currentTracked.length > 1) {
            quickSortDesc(
                currentTracked,
                int(0),
                int(currentTracked.length - 1)
            );
        }
        uint256 balanceAmount = address(this).balance.sub(msg.value);
        if (balanceAmount > 0 && currentTracked.length > 0) {
            uint256 firstPrize = balanceAmount.mul(FIRST_PRIZE_BPS) / 10000;
            uint256 secondPrize = balanceAmount.mul(SECOND_PRIZE_BPS) / 10000;
            uint256 thirdPrize = balanceAmount.mul(THIRD_PRIZE_BPS) / 10000;

            if (currentTracked[0].amount > 0) {
                payable(currentTracked[0].actorAddress).transfer(firstPrize);
                currentTracked[0].reward = firstPrize;
            }
            if (currentTracked.length > 1 && currentTracked[1].amount > 0) {
                payable(currentTracked[1].actorAddress).transfer(secondPrize);
                currentTracked[1].reward = secondPrize;
            }
            if (currentTracked.length > 2 && currentTracked[2].amount > 0) {
                payable(currentTracked[2].actorAddress).transfer(thirdPrize);
                currentTracked[2].reward = thirdPrize;
            }
            if (address(this).balance > 0) {
                payable(remainingWalletAddress).transfer(address(this).balance);
            }
        }
    }

    function quickSortDesc(
        Tracked[] memory arr,
        int left,
        int right
    ) internal view {
        int i = left;
        int j = right;
        if (i == j) return;
        uint256 pivot = arr[uint(left + (right - left) / 2)].amount;
        while (i <= j) {
            while (arr[uint256(i)].amount > pivot) i++;
            while (pivot > arr[uint256(j)].amount) j--;
            if (i <= j) {
                Tracked memory oldTracked = arr[uint256(i)];
                Tracked memory iTracked = Tracked(
                    oldTracked.actorAddress,
                    oldTracked.amount,
                    oldTracked.reward
                );
                Tracked memory jTracked = arr[uint256(j)];
                arr[uint256(i)] = jTracked;
                arr[uint256(j)] = iTracked;
                i++;
                j--;
            }
        }
        if (left < j) quickSortDesc(arr, left, j);
        if (i < right) quickSortDesc(arr, i, right);
    }

    modifier onlyTokenContract() {
        require(msg.sender == tokenContract, "Forbidden");
        _;
    }

    modifier noSendRewards() {
        _noSendRewardsBefore();
        _;
        _noSendRewardsAfter();
    }

    function _noSendRewardsBefore() private {
        require(
            _sendRewardstatus != _SEND_REWARD_ENTERED,
            "ReentrancyGuard: reentrant call"
        );
        _sendRewardstatus = _SEND_REWARD_ENTERED;
    }

    function _noSendRewardsAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _sendRewardstatus = _SEND_REWARD_NOT_ENTERED;
    }

    receive() external payable {}

    function retrieveLostRewards() external onlyOwner {
        payable(remainingWalletAddress).transfer(address(this).balance);
    }
}