{"EarningMoonBSC.sol":{"content":"/*\r\n* TG: https://t.me/EarningMoonBSC\r\n* Website: https://EarningMoon.com\r\n* Author: @DaisyOfficialTG\r\n*/\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./Libraries.sol\";\r\n\r\ncontract EarningMoonBSC is Ownable,IBEP20 {\r\n\r\n    uint256 private constant _totalSupply=1_000_000_000*(10**9);\r\n    //SWAP \u0026 LIQUIFY\\\\\r\n    uint16 public swapThreshold=15;\r\n    bool private _isSwapping;\r\n    bool private _canSwap;\r\n    //LP LOCK\\\\\r\n    uint256 private _LPLockSeconds;\r\n    //STRUCTS\\\\\r\n    Tax private _tax;\r\n    TaxDistribution private _taxDistribution;\r\n    TotalBNB private _totalBNB;\r\n    MaxLimits private _maxLimits;\r\n    struct Tax {uint8 buyTax;uint8 sellTax;}\r\n    struct TaxDistribution {uint16 marketingTax;uint16 rewardsTax;uint16 liquidityTax;}\r\n    struct TotalBNB {uint256 totalMarketingBNB;uint256 totalRewardsBNB;uint256 totalRewardsPayout;uint256 totalLPBNB;}\r\n    struct MaxLimits {uint256 maxWallet;uint256 maxBuyTx;}\r\n    //BOOLS\\\\\r\n    bool private _tradingEnabled;\r\n    bool private _addingLP;\r\n    bool private _removingLP;\r\n    //MAPPINGS\\\\\r\n    mapping(address=\u003euint256) private _balances;\r\n    mapping(address=\u003emapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address=\u003ebool) private _excludedFromFees;\r\n    mapping(address=\u003ebool) private _excludedFromRewards;\r\n    mapping(address=\u003ebool) private _automatedMarketMakers;\r\n    //DISTRIBUTOR\\\\\r\n    uint256 public distributorGas=600000;\r\n    DividendDistributor distributor;\r\n    address public distributorAddress;\r\n    //PANCAKESWAP\\\\\r\n    IPancakeRouter02 private _pancakeRouter;\r\n    address public pancakeRouterAddress=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public pancakePairAddress;\r\n    //MISC.\\\\\r\n    address public burnWallet=0x000000000000000000000000000000000000dEaD;\r\n    //MODIFIERS\\\\\r\n    modifier LockSwap {_isSwapping=true;_;_isSwapping=false;}\r\n    modifier AddingLP {_addingLP=true;_;_addingLP=false;}\r\n    modifier RemovingLP {_removingLP=true;_;_removingLP=false;}\r\n    //EVENTS\\\\\r\n    event OwnerEnableSwap(bool canSwap);\r\n    event OwnerUpdateTax(uint8 buyTax,uint8 sellTax);\r\n    event OwnerUpdateTaxDistribution(uint16 marketingTax,uint16 rewardsTax);\r\n    event OwnerReleaseLP(uint32 LPPercent);\r\n    event OwnerLockLP(uint256 LPLockSeconds);\r\n    event OwnerUpdateMarketMaker(address automatedMarketMaker,bool enabled);\r\n    event OwnerTradingEnabled(bool tradingEnabled);\r\n    event OwnerSetDistributorSettings(uint256 _minPeriod,uint256 _minDistribution,uint256 gas);\r\n    event OwnerWithdrawMarketingBNB(uint256 amountWei);\r\n    event OwnerSwapAndLiquify(uint16 swapThreshold,bool ignoreLimits);\r\n    event OwnerUpdateSwapThreshold(uint16 _swapThreshold);\r\n    constructor() {\r\n        _pancakeRouter = IPancakeRouter02(pancakeRouterAddress);\r\n        pancakePairAddress=IPancakeFactory(_pancakeRouter.factory()).createPair(address(this),_pancakeRouter.WETH());\r\n        _approve(address(this),address(_pancakeRouter),type(uint256).max);\r\n        _automatedMarketMakers[pancakePairAddress]=true;\r\n        distributor=new DividendDistributor(pancakeRouterAddress);\r\n        distributorAddress=address(distributor);\r\n        _excludedFromFees[msg.sender]=_excludedFromFees[address(this)]=true;\r\n        _excludedFromRewards[msg.sender]=_excludedFromRewards[address(this)]=true;\r\n        _excludedFromRewards[pancakePairAddress]=_excludedFromRewards[burnWallet]=true;\r\n        _updateBalance(address(this),_totalSupply);\r\n        emit Transfer(address(0),address(this),_totalSupply);\r\n        _tax.buyTax=10;\r\n        _tax.sellTax=15;\r\n        _taxDistribution.marketingTax=_taxDistribution.rewardsTax=40;\r\n        _taxDistribution.liquidityTax=20;\r\n        _maxLimits.maxWallet=20_000_000*(10**9);\r\n        _maxLimits.maxBuyTx=10_000_000*(10**9);\r\n    }\r\n    //TRANSFER FUNCTIONS\\\\\r\n    function _transfer(address sender,address recipient,uint256 amount) private {\r\n        bool isExcluded=_excludedFromFees[sender]||_excludedFromFees[recipient]||_isSwapping||_addingLP||_removingLP;\r\n        bool isBuy=_automatedMarketMakers[sender];\r\n        bool isSell=_automatedMarketMakers[recipient];\r\n        uint256 taxedTokens=0;\r\n        if(isExcluded)_doTransfer(sender,recipient,amount,taxedTokens);\r\n        else {\r\n            require(_tradingEnabled);\r\n            if(isBuy){require(_balances[recipient]+amount\u003c=_maxLimits.maxWallet);require(amount\u003c=_maxLimits.maxBuyTx);taxedTokens=amount*_tax.buyTax/100;}\r\n            else if(isSell){taxedTokens=amount*_tax.sellTax/100;if(!_isSwapping\u0026\u0026_canSwap){_swapAndLiquify(swapThreshold,false);}}\r\n            _doTransfer(sender,recipient,amount,taxedTokens);\r\n        }\r\n    }\r\n    function _doTransfer(address sender,address recipient,uint256 amount,uint256 taxedTokens) private {\r\n        _updateBalance(sender,_balances[sender]-amount);\r\n        if(taxedTokens\u003e0)_updateBalance(address(this),_balances[address(this)]+taxedTokens);\r\n        _updateBalance(recipient,_balances[recipient]+(taxedTokens\u003e0?(amount-taxedTokens):amount));\r\n        try distributor.process(distributorGas) {} catch {}\r\n        emit Transfer(sender,recipient,(taxedTokens\u003e0?(amount-taxedTokens):amount));\r\n    }\r\n    function _updateBalance(address account,uint256 newBalance) private {\r\n        _balances[account]=newBalance;\r\n        if(!_excludedFromRewards[account])try distributor.setShare(account,_balances[account]) {} catch {}\r\n    }\r\n    //REWARDS FUNCTION\\\\\r\n    function _distributeRewards(uint256 amountWei) private {\r\n        try distributor.deposit{value:amountWei}() {} catch {}\r\n        _totalBNB.totalRewardsPayout+=amountWei;\r\n    }\r\n    //LIQUIDITY FUNCTIONS\\\\\r\n    function _swapAndLiquify(uint16 _swapThreshold,bool ignoreLimits) private LockSwap {\r\n        uint256 contractTokens=_balances[address(this)];\r\n        uint256 toSwap=_swapThreshold*_balances[pancakePairAddress]/1000;\r\n        if(contractTokens\u003ctoSwap)\r\n            if(ignoreLimits)\r\n                toSwap=contractTokens;\r\n            else return;\r\n        uint256 totalLPTokens=toSwap*_taxDistribution.liquidityTax/100;\r\n        uint256 tokensLeft=toSwap-totalLPTokens;\r\n        uint256 LPTokens=totalLPTokens/2;\r\n        uint256 LPBNBTokens=totalLPTokens-LPTokens;\r\n        toSwap=tokensLeft+LPBNBTokens;\r\n        uint256 oldBNB=address(this).balance;\r\n        _swapTokensForBNB(toSwap);\r\n        uint256 newBNB=address(this).balance-oldBNB;\r\n        uint256 LPBNB=(newBNB*LPBNBTokens)/toSwap;\r\n        uint256 remainingBNB=newBNB-LPBNB;\r\n        uint256 marketingBNB=remainingBNB*_taxDistribution.marketingTax/100;\r\n        uint256 rewardsBNB=remainingBNB-marketingBNB;\r\n        _totalBNB.totalMarketingBNB+=marketingBNB;\r\n        _totalBNB.totalRewardsBNB+=rewardsBNB;\r\n        if(rewardsBNB\u003e0)_distributeRewards(rewardsBNB);\r\n        _addLiquidity(LPTokens,LPBNB);\r\n    }\r\n    function _swapTokensForBNB(uint256 amount) private {\r\n        address[] memory path=new address[](2);\r\n        path[0]=address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _addLiquidity(uint256 amountTokens,uint256 amountBNB) private AddingLP {\r\n        _totalBNB.totalLPBNB+=amountBNB;\r\n        _pancakeRouter.addLiquidityETH{value: amountBNB}(\r\n            address(this),\r\n            amountTokens,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _removeLiquidityPercent(uint32 percent) private RemovingLP {\r\n        IPancakeERC20 lpToken=IPancakeERC20(pancakePairAddress);\r\n        uint256 amount=lpToken.balanceOf(address(this))*percent/100;\r\n        lpToken.approve(address(_pancakeRouter),amount);\r\n        _pancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            amount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    //OWNER FUNCTIONS\\\\\r\n    function ownerCreateLP(uint16 teamPercent,uint16 contractPercent) public payable onlyOwner {\r\n        require(IBEP20(pancakePairAddress).totalSupply()==0);\r\n        uint256 contractTokenBalance=_balances[address(this)];\r\n        uint256 teamToken=contractTokenBalance*teamPercent/100;\r\n        uint256 contractToken=contractTokenBalance*contractPercent/100;\r\n        uint256 tokenForLP=contractTokenBalance-(teamToken+contractToken);\r\n        _doTransfer(address(this),msg.sender,teamToken,0); \r\n        _addLiquidity(tokenForLP,msg.value); \r\n        require(IBEP20(pancakePairAddress).totalSupply()\u003e0);\r\n    }\r\n    function ownerLockLP() public onlyOwner {\r\n        _LPLockSeconds=block.timestamp+7 days;\r\n        emit OwnerLockLP(_LPLockSeconds);\r\n    }\r\n    function ownerReleaseLP() public onlyOwner {\r\n        require(block.timestamp\u003e=(_LPLockSeconds+7 days));\r\n        uint256 oldBNB=address(this).balance;\r\n        _removeLiquidityPercent(100);\r\n        uint256 newBNB=address(this).balance-oldBNB;\r\n        require(newBNB\u003eoldBNB);\r\n        _totalBNB.totalMarketingBNB+=newBNB;\r\n        emit OwnerReleaseLP(100);\r\n    }\r\n    function ownerBoostRewards() public payable onlyOwner {\r\n        require(msg.value\u003e0);\r\n        _distributeRewards(msg.value);\r\n    }\r\n    function ownerUpdateAutomatedMarketMaker(address automatedMarketMaker,bool enabled) public onlyOwner {\r\n        _automatedMarketMakers[automatedMarketMaker]=enabled;\r\n        ownerExcludeFromRewards(automatedMarketMaker,true);\r\n        emit OwnerUpdateMarketMaker(automatedMarketMaker,enabled);\r\n    }\r\n    function ownerUpdatePair(address newPair,address newRouter) public onlyOwner {\r\n        pancakePairAddress=newPair;\r\n        pancakeRouterAddress=newRouter;\r\n    }\r\n    function ownerUpdateTax(uint8 buyTax,uint8 sellTax) public onlyOwner {\r\n        require(buyTax\u003c=10\u0026\u0026sellTax\u003c=15);\r\n        _tax.buyTax=buyTax;\r\n        _tax.sellTax=sellTax;\r\n        emit OwnerUpdateTax(buyTax,sellTax);\r\n    }\r\n    function ownerUpdateTaxDistribution(uint16 marketingTax,uint16 rewardsTax,uint16 liquidityTax) public onlyOwner {\r\n        require((marketingTax+rewardsTax+liquidityTax)==100);\r\n        _taxDistribution.marketingTax=marketingTax;\r\n        _taxDistribution.rewardsTax=rewardsTax;\r\n        _taxDistribution.liquidityTax=liquidityTax;\r\n        emit OwnerUpdateTaxDistribution(marketingTax,rewardsTax);\r\n    }\r\n    function ownerEnableSwap(bool canSwap) public onlyOwner {\r\n        _canSwap=canSwap;\r\n        emit OwnerEnableSwap(canSwap);\r\n    }\r\n    function ownerUpdateSwapThreshold(uint16 _swapThreshold) public onlyOwner {\r\n        swapThreshold=_swapThreshold;\r\n        emit OwnerUpdateSwapThreshold(_swapThreshold);\r\n    }\r\n    function ownerTriggerSwap(uint16 _swapThreshold,bool ignoreLimits) public onlyOwner {\r\n        _swapAndLiquify(_swapThreshold,ignoreLimits);\r\n        emit OwnerSwapAndLiquify(swapThreshold,ignoreLimits);\r\n    }\r\n    function ownerEnableTrading(bool tradingEnabled) public onlyOwner {\r\n        _tradingEnabled=tradingEnabled;\r\n        emit OwnerTradingEnabled(tradingEnabled);\r\n    }\r\n    function ownerSetDistributorSettings(uint256 _minPeriod,uint256 _minDistribution,uint256 gas) public onlyOwner {\r\n        require(gas\u003c=1000000);\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n        distributorGas = gas;\r\n        emit OwnerSetDistributorSettings(_minPeriod,_minDistribution,gas);\r\n    }\r\n    function ownerExcludeFromFees(address account,bool excluded) public onlyOwner {\r\n        _excludedFromFees[account]=excluded;\r\n    }\r\n    function ownerExcludeFromRewards(address account,bool excluded) public onlyOwner {\r\n        _excludedFromRewards[account]=excluded;\r\n        try distributor.setShare(account,excluded?0:_balances[account]) {} catch {}\r\n    }\r\n    function ownerWithdrawStrandedToken(address strandedToken) public onlyOwner {\r\n        require(strandedToken!=pancakePairAddress\u0026\u0026strandedToken!=address(this));\r\n        IBEP20 token=IBEP20(strandedToken);\r\n        token.transfer(owner(),token.balanceOf(address(this)));\r\n    }\r\n    function ownerWithdrawBNB() public onlyOwner {\r\n        (bool success,)=msg.sender.call{value:(address(this).balance)}(\"\");\r\n        require(success);\r\n    }\r\n    function ownerWithdrawMarketingBNB(uint256 amountWei) public onlyOwner {\r\n        require(amountWei\u003c=_totalBNB.totalMarketingBNB);\r\n        (bool sent,)=msg.sender.call{value: (amountWei)}(\"\");\r\n        require(sent);\r\n        _totalBNB.totalMarketingBNB-=amountWei;\r\n        emit OwnerWithdrawMarketingBNB(amountWei);\r\n    }\r\n    function claimMyReward() external {\r\n        distributor.claimDividend();\r\n    }\r\n    function showMyDividendRewards(address account) external view returns (uint256) {\r\n        return distributor.getUnpaidEarnings(account);\r\n    }\r\n    //READ FUNCTIONS\\\\\r\n    function showTransactionTax() external view returns(uint8 buyTax,uint8 sellTax) {\r\n        buyTax=_tax.buyTax;\r\n        sellTax=_tax.sellTax;\r\n    }\r\n    function showDistributionTax() external view returns(\r\n        uint16 marketingTax,\r\n        uint16 rewardsTax,\r\n        uint16 liquidityTax) {\r\n            marketingTax=_taxDistribution.marketingTax;\r\n            rewardsTax=_taxDistribution.rewardsTax;\r\n            liquidityTax=_taxDistribution.liquidityTax;\r\n    }\r\n    function ShowLPLockSeconds() external view returns(uint256) {\r\n        return _LPLockSeconds\u003eblock.timestamp?_LPLockSeconds-block.timestamp:0;\r\n    }\r\n    function showContractBNB() external view returns(\r\n        uint256 marketingBNB,\r\n        uint256 rewardsBNB,\r\n        uint256 rewardsPayout,\r\n        uint256 LPBNB) {\r\n            marketingBNB=_totalBNB.totalMarketingBNB;\r\n            rewardsBNB=_totalBNB.totalRewardsBNB;\r\n            rewardsPayout=_totalBNB.totalRewardsPayout;\r\n            LPBNB=_totalBNB.totalLPBNB;\r\n    }\r\n    //IBEP20\\\\\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require((owner != address(0) \u0026\u0026 spender != address(0)), \"Owner/Spender address cannot be 0.\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) external override returns (bool) {\r\n        uint256 allowance_ = _allowances[sender][msg.sender];\r\n        _transfer(sender, recipient, amount);\r\n        require(allowance_ \u003e= amount);\r\n        _approve(sender, msg.sender, allowance_ - amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function approve(address spender,uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner_,address spender) external view override returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function name() external pure override returns (string memory) {\r\n        return \"EarningMoon\";\r\n    }\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"EMOON\";\r\n    }\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function decimals() external pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n    receive() external payable {require(msg.sender==owner());}\r\n}"},"Libraries.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n \r\n\r\n interface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n}\r\n \r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n \r\n    address _token;\r\n \r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n \r\n    IBEP20 MATIC = IBEP20(0xCC42724C6683B7E57334c4E856f4c9965ED682bD);\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    IDEXRouter router;\r\n \r\n    address[] shareholders;\r\n    mapping (address =\u003e uint256) shareholderIndexes;\r\n    mapping (address =\u003e uint256) shareholderClaims;\r\n \r\n    mapping (address =\u003e Share) public shares;\r\n \r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n \r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n \r\n    uint256 currentIndex;\r\n \r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n \r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n \r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n        ? IDEXRouter(_router)\r\n        : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _token = msg.sender;\r\n    }\r\n \r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n \r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount \u003e 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n \r\n        if(amount \u003e 0 \u0026\u0026 shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 \u0026\u0026 shares[shareholder].amount \u003e 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n \r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n \r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = MATIC.balanceOf(address(this));\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(MATIC);\r\n \r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n        uint256 amount = MATIC.balanceOf(address(this)).sub(balanceBefore);\r\n \r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n \r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n \r\n        if(shareholderCount == 0) { return; }\r\n \r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n \r\n        uint256 iterations = 0;\r\n \r\n        while(gasUsed \u003c gas \u0026\u0026 iterations \u003c shareholderCount) {\r\n            if(currentIndex \u003e= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n \r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n \r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod \u003c block.timestamp\r\n        \u0026\u0026 getUnpaidEarnings(shareholder) \u003e minDistribution;\r\n    }\r\n \r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n \r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount \u003e 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            MATIC.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n \r\n    function claimDividend() external {\r\n        distributeDividend(msg.sender);\r\n    }\r\n \r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n \r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n \r\n        if(shareholderTotalDividends \u003c= shareholderTotalExcluded){ return 0; }\r\n \r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n \r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n \r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n \r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}"}}