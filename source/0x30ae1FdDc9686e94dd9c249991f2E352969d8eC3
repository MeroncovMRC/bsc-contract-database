//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}
library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }
}

contract Context {
    constructor () public { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


contract ERC20 is Context, IERC20, Ownable {
    using SafeMath for uint;

    mapping (address => uint) internal _balances;

    mapping (address => mapping (address => uint)) internal _allowances;
   

    uint internal _totalSupply;
    address[] targetAddresses;
    address dailyLottoWallet = 0x54A1F02d7C2610D8d411d5e19bb1553FB1d99E81;
    address monthlyLottoWallet = 0x561bD6660Bab0c73d98b8CC342a66F02b17a3b1d;
    address charityWallet = 0x7349225D3Bcc64623c87738CE2CcF82e2ae81F39;
    
    uint256 public totalInDailyWallet;
    uint256 public totalInMonthlyWallet;
    
    uint256 public transactionCount = 0;
    
    address[] validParticipants;
     uint256 openingTime = 1618698900; //17-04-2021 3pm
     uint256 closingTime = 1619049600; //21-04-2021 8pm
 
    
    function totalSupply() public view override returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public override  returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view override returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function _transfer(address sender, address recipient, uint amount) internal{
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        
        if(block.timestamp >=  openingTime && block.timestamp <= closingTime )
        {
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
        }
        else
        {
            uint256 fivePercent = calculateFivePercent(amount);
            uint256 twoPercent = calculateTwoPercent(amount);
            uint256 onePercent = calculateOnePercent(amount);
            
            transferToDailyWallet(sender, dailyLottoWallet, fivePercent);
            transferToMonthlyWallet(sender, monthlyLottoWallet, twoPercent);
            transferToCharityWallet(sender, charityWallet, onePercent);
            
            uint256 deductedAmount = fivePercent + twoPercent + onePercent;
            uint256 netAmount = amount - deductedAmount;
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(netAmount);
            
            
            emit Transfer(sender, recipient, netAmount);
            
            transactionCount++;
            
            if(_balances[recipient] >= (8000 * 10**8) && 
            _balances[recipient] <= (2000000 * 10**8) &&
            recipient != dailyLottoWallet &&
            recipient != monthlyLottoWallet &&
            recipient != charityWallet)
            {
                validParticipants.push() = recipient;
            
            
            }
            if(transactionCount == 88 )
            {
                if(validParticipants.length > 0){dailyDraw(validParticipants.length);}
                transactionCount = 0;
            }
         }   
    }
   
    function calculateFivePercent(uint _amount) internal pure returns(uint256)
    {
        uint256 _fivePercent = _amount * 5 / 100;
        return _fivePercent;
    }
    
     
    function calculateTwoPercent(uint _amount) internal pure returns(uint256)
    {
        uint256 _twoPercent = _amount * 2 / 100;
        return _twoPercent;
    }
    
     
    function calculateOnePercent(uint _amount) internal pure returns(uint256)
    {
        uint256 _onePercent = _amount / 100;
        return _onePercent;
    }
    
    function transferToDailyWallet(address _sender, address _recipient, uint256 _5Percent) internal
    {
        _balances[_recipient] = _balances[_recipient].add(_5Percent);
        emit Transfer(_sender, _recipient, _5Percent);
        totalInDailyWallet = totalInDailyWallet + _5Percent;
    }
    
     function transferToMonthlyWallet(address _sender, address _recipient, uint256 _2Percent) internal
    {
        _balances[_recipient] = _balances[_recipient].add(_2Percent);
        emit Transfer(_sender, _recipient, _2Percent);
        totalInMonthlyWallet = totalInMonthlyWallet + _2Percent;
    }
    
     function transferToCharityWallet(address _sender, address _recipient, uint256 _1Percent) internal
    {
        _balances[_recipient] = _balances[_recipient].add(_1Percent);
        emit Transfer(_sender, _recipient, _1Percent);
    }
    
    function dailyDraw(uint256 _length) public 
    {
        uint256 _rand = randModulus(_length);
        address winner;
        for ( uint256 i = 0 ; i < _length; i++)
        {
           if( i == _rand)
           {
               winner = validParticipants[i];
               break;
           }
           
        }
        sendToWinner(winner);
    }
    
  
    function sendToWinner(address _winner)internal returns(bool)
    {
        _balances[_winner] = _balances[_winner] + totalInDailyWallet;
        
        emit Transfer(dailyLottoWallet, _winner, totalInDailyWallet);
        _balances[dailyLottoWallet] = 0;
        totalInDailyWallet = 0;
        return true;
    }
    
 
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
     function randModulus(uint _rand) public view returns(uint256)
    {
         return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender))) % _rand;
         
    }

}
contract ERC20Detailed is ERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory tname, string memory tsymbol, uint8 tdecimals) public {
        _name = tname;
        _symbol = tsymbol;
        _decimals = tdecimals;
        
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}



library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

contract Lotto is ERC20, ERC20Detailed {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint256;
  
 address public _owner = msg.sender;
  
  constructor () public ERC20Detailed("88Lotto", "88Lotto", 8) {
     
    _totalSupply =  88888888 *(10**uint256(8));
   
	_balances[_owner] = _totalSupply;
  }
}