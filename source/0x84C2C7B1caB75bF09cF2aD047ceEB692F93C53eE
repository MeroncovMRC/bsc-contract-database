// SPDX-License-Identifier: Unlicensed

/**

WOJEET
We Reward Jeets
We don't jeet, but we love it when you do.

Web: https://wojeet.vip
TG: https://t.me/WojeetBsc
Twitter: https://twitter.com/wojeetbsc

                                                                 
                                              .......                                               
                                        ^7?Y5PPPPPG5??5P7^.                                         
                                  .^7!!5GGGGPPPPGP?7YPGPGGG57.                                      
                                ^JP57JPGPPPPPPGPY7JPGPPPPPPGP..:.                                   
                              !5GP??5GPPPPPPPG57?PGPPPPPPPG5.^G5?!7^                                
                            !PGPJ7YGPPPPPPPG5??5GPPPPPPPPGY ^GGGPY7YPJ~:.                           
                         .7PGPJ?YPGPPPPPPG5??5GPPPPPPPPPG? !J7YPGGP7?GGGP5!                         
                        7PGG57JPGPPPPPPG5??YPGPPPPPPPPPG7 :5GP?75GGPJ75GPGG5                        
                      ~PGGP??5GPPPPPPGPJ7YPGPPPPPPPPPPG!.J?:^JG57?PGG575GPPG:                       
                   .!5GGGY7YGPPPPPPGPJ7YPGPPPPPPPPPPPG~ J55Y!^^JGY7YGGP?YGPP.                       
                 ^YGGGPGJ7PGPPPPPPGY7JPGPPPPPPPPPPPPG^:5PPPPPP?:^JP??PGP?YGJ                        
               :5GGPPPG??PPPPPPPG5??PGPPPPPPPPPPPPPP:.YYJJJYY55P5~^Y5?YGGJY^                        
              .PGPPPPGJ?GPPPPPGPJ75GPPPPPPPPPPPPPGP^~PPPPPPPP55YYY?~!5JJPGY                         
              ?GPPPPGY7PPPPPPGY7JPGPPPPPPPPPPPPPGP:^YYJJJJJJYY5PPPPP?:!5?5?                         
              5PPPPP5!5PPPPG5??PGPPPPPPPPPPPPPPGP^7P5PPPPPP5YYJ?77!!77.7PY.                         
              PPPPPP7YGPPGPJ75GPPPPPPPPPPPPPPPGY.^7!!~~~^^~~!!7??JJYYYJ:J5                          
              JGPPG??GPPG57JPGPPPPPPPPPPPPPPGP~^!7777777???????????7?JYJ^!                          
              .PGGY7PPGP??5GPPPPPPPPPPPPPPGGJ:^????????J??77???7????JJJY^                           
               .5G!5GG57YPPPPPPPPPPPPPPPGGY^^?J?????????JYYJJJJJJ????JJYJ.                          
                 ~?GGY?PGPPPPPPPPPPPPPPG5~:7YYJ7???JJJJJ?JJJJJJJ??JJ?77JYJ                          
                  .YYJPPPPPPPPPPPPPPPGP!^7YYJJJJYJ?JJYYYJ7JJJJJY7?YYYYYJJY.                         
                    .JGGPPPPPPPPPGGP5?^7YYJJJJJY~7G: .~?JYJJJJJJJJ??!^^7YY:                         
                      :?PGGGPPPP5J7!!7JYJJJJJJJY7?P.  .7!YJJJJJJY~JG   7YJ                          
                        .^!7????^7?JYYJJYYJJJJJJYJ?JJJJJJJJJJJJJJJ??77!JJY~                         
                            .^7J!~YYJJJY?!YJJJJJJJJJJJJJJJJJJJY!~YYJYYYJJJY.                        
                                  ^YJJJY~!YJJJJJJJJJJJJJYYJJJJJJ~~?YJJJJJJY.                        
                                   :YJJY!^JJJJJJJJJJJJJJ!!?YYYJYYJ:7YJJJJY7                         
                                    7YJJY^!YJJJJJJJJJJY?:!?J77YJ?!^JJJJJY7                          
                                    !YJJY?^!YYJJJJJJJJJYJ7?J?JYJ!~JYJJJY!                           
                                    !YJJJJ!!~7JYJJJJJJJ??JJJYYYYYYYJJJJ~                            
                                    !YJJJJ~YJ!~7JYYJJY?!!!!!!!!!!~7YJY!                             
                                   .JJJJY?!YJYJ7~~7JYJJYYYJJJJJJJJJYY?.                             
                                   ~YYYJYJJJJJJYY?!~7JYYYYJJJJJYYYYJ:                               
                                    .!JJJ?JYYYYJJYYJ7~!77?JJJJJJ?~:                                 
                                          :!7?JJYYYYYYJ?77!!7:                                      
                                                ...::^~~^!JJJ!                                      
                                                                                                               

**/

pragma solidity ^0.8.13;

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

library Address{
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IFactory{
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;
}

interface IDividendDistributor {
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
    function setShare(address shareholder, uint256 amount) external;
    function deposit() external payable;
    function process(uint256 gas) external;
}

contract DividendDistributor is IDividendDistributor {
    using SafeMath for uint256;
    address _token;
    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }
    IERC20 REWARDS = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8); //BINANCE PEG WETH
    IRouter router;
    address[] shareholders;
    mapping(address => uint256) shareholderIndexes;
    mapping(address => uint256) shareholderClaims;
    mapping(address => Share) public shares;
    uint256 public totalShares;
    uint256 public totalDividends;
    uint256 public totalDistributed;
    uint256 public dividendsPerShare;
    uint256 public dividendsPerShareAccuracyFactor = 10**36;
    uint256 public minPeriod = 10 minutes;  
    uint256 public minDistribution = 1 * (10**9); 
    uint256 currentIndex;
    bool initialized;
    modifier initialization() {
        require(!initialized);
        _;
        initialized = true;
    }
    modifier onlyToken() {
        require(msg.sender == _token);
        _;
    }

    constructor(address _router) {
        router = _router != address(0) ? IRouter(_router) : IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //@setup
        _token = msg.sender;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setShare(address shareholder, uint256 amount) external override onlyToken {
        if (shares[shareholder].amount > 0) {
            distributeDividend(shareholder);
        }
        if (amount > 0 && shares[shareholder].amount == 0) {
            addShareholder(shareholder);
        } else if (amount == 0 && shares[shareholder].amount > 0) {
            removeShareholder(shareholder);
        }
        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
    }

    function deposit() external payable override onlyToken {
        uint256 balanceBefore = REWARDS.balanceOf(address(this));
        address[] memory path = new address[](2);
        path[0] = router.WETH();
        path[1] = address(REWARDS);
        router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: msg.value }(
            0,
            path,
            address(this),
            block.timestamp
        );
        uint256 amount = REWARDS.balanceOf(address(this)).sub(balanceBefore);
        totalDividends = totalDividends.add(amount);
        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
    }

    function process(uint256 gas) external override onlyToken {
        uint256 shareholderCount = shareholders.length;
        if (shareholderCount == 0) {
            return;
        }
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();
        uint256 iterations = 0;
        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            if (shouldDistribute(shareholders[currentIndex])) {
                distributeDividend(shareholders[currentIndex]);
            }
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }

    function shouldDistribute(address shareholder) internal view returns (bool) {
        return
            shareholderClaims[shareholder] + minPeriod < block.timestamp &&
            getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeDividend(address shareholder) internal {
        if (shares[shareholder].amount == 0) {
            return;
        }
        uint256 amount = getUnpaidEarnings(shareholder);
        if (amount > 0) {
            totalDistributed = totalDistributed.add(amount);
            REWARDS.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
        }
    }

    function claimDividend() external {
        distributeDividend(msg.sender);
    }

    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        if (shares[shareholder].amount == 0) {
            return 0;
        }
        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;
        if (shareholderTotalDividends <= shareholderTotalExcluded) {
            return 0;
        }
        return shareholderTotalDividends.sub(shareholderTotalExcluded);
    }

    function getCumulativeDividends(uint256 share) internal view returns (uint256) {
        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];
        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
}

contract Wojeet is Context, IERC20, Ownable {

    using Address for address payable;

    IRouter public router;
    address public pair;
    
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _isExcludedFromFee;
    mapping (address => bool) public _isExcludedFromMaxBalance;


    uint8 private constant _decimals = 9; 
    uint256 private _tTotal = 1_000_000 * (10**_decimals);
    uint256 private maxTxAmount = 20_000 * (10**_decimals);
    uint256 private maxWallet =  20_000 * (10**_decimals);
    uint256 private _swapThreshold = 10_000 * (10**_decimals); 

    string private constant _name = "Wojeet"; 
    string private constant _symbol = "Wojeet";    
    
    uint256 public _buyTax = 15;
    uint256 public _sellTax = 65;
    //ratio should be equal to 10
    uint8 private _treasuryRatio = 2;
    uint8 private _rewardRatio = 7;
    uint8 private _lpRatio = 1; 
    //treasury holds , development and marketing
    address public treasuryWallet = 0x32cA5cE7aD561784Be08a9bA56bcE76AB372cd2a;
    address DEAD = 0x000000000000000000000000000000000000dEaD;
    
    bool private swapping;
    modifier lockTheSwap {
        swapping = true;
        _;
        swapping = false;
    }

    mapping(address => bool) public _isDividendExempt;
    DividendDistributor distributor;
    uint256 distributorGas = 500_000;
    address public distributorAddress;

    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);

    constructor () {
        _tOwned[_msgSender()] = _tTotal;

        IRouter _router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());
        router = _router;
        pair = _pair;
        _approve(address(this), address(router), ~uint256(0));
        _approve(owner(), address(router), ~uint256(0));

        distributor = new DividendDistributor(address(router));
        distributorAddress = address(distributor);

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[treasuryWallet] = true;

        _isExcludedFromMaxBalance[owner()] = true;
        _isExcludedFromMaxBalance[address(this)] = true;
        _isExcludedFromMaxBalance[pair] = true;
        _isExcludedFromMaxBalance[treasuryWallet] = true;
        _isExcludedFromMaxBalance[DEAD] = true;

        _isDividendExempt[pair] = true;
        _isDividendExempt[address(this)] = true;
        _isDividendExempt[DEAD] = true;
        
        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    }
    
    receive() external payable {}

    function _getUnpaidEarnings(address shareholder) public view returns (uint256) {
        return distributor.getUnpaidEarnings(shareholder);
    } 

    function _claimDividend() external {
        distributor.claimDividend();
    }
    
    function owner_setExcludedFromFee(address account,bool isExcluded) public onlyOwner {
        _isExcludedFromFee[account] = isExcluded;
    }

    function owner_setExcludedFromMaxBalance(address account,bool isExcluded) public onlyOwner {
        _isExcludedFromMaxBalance[account] = isExcluded;
    }

    function owner_setTransferTaxes(uint8 buyTax_ , uint8 sellTax_) public onlyOwner{
        require(buyTax_ <= 15 && sellTax_ <= 50,"Invalid Settings");
        _buyTax = buyTax_;
        _sellTax = sellTax_;
    }

    function owner_setTransferLimit(uint maxTX_EXACT, uint maxWallet_EXACT) public onlyOwner{
        uint pointFiveSupply = (_tTotal * 5 / 1000) / (10**_decimals);
        require(maxTX_EXACT >= pointFiveSupply && maxWallet_EXACT >= pointFiveSupply, "Invalid Settings");
        maxTxAmount = maxTX_EXACT * (10**_decimals);
        maxWallet = maxWallet_EXACT * (10**_decimals);
    }

    function ownerSetIsDividendExempt(address holder, bool exempt) external onlyOwner {
        require(holder != address(this) && holder != pair);
        _isDividendExempt[holder] = exempt;
        if (exempt) {
            distributor.setShare(holder, 0);
        } else {
            distributor.setShare(holder, _tOwned[holder]);
        }
    }

    function ownerSetDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {
        distributor.setDistributionCriteria(_minPeriod, _minDistribution);
    }

    function ownerSetDistributorSettings(uint256 gas) external onlyOwner {
        require(gas < 750000);
        distributorGas = gas;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _getTaxValues(uint amount, address from, bool isSell) private returns(uint256){
        uint tmpTaxes = amount * _buyTax / 100;
        if (isSell){
            tmpTaxes = amount * _sellTax / 100;
        }
        _tOwned[address(this)] += tmpTaxes;
        emit Transfer (from, address(this), tmpTaxes);
        return (amount - tmpTaxes);
    }
    
    function _transfer(address from,address to,uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(amount <= maxTxAmount || _isExcludedFromMaxBalance[from], "Transfer amount exceeds the maxTxAmount.");

        if(!_isExcludedFromMaxBalance[to])
            require(balanceOf(to) + amount <= maxWallet, "Transfer amount exceeds the maxWallet.");
            
        if (balanceOf(address(this)) >= _swapThreshold && !swapping && from != pair && from != owner() && to != owner())
            swapAndLiquify();
          
        _tOwned[from] -= amount;
        uint256 transferAmount = amount;
        
        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){
            transferAmount = _getTaxValues(amount, from, to == pair);
        }
            
        _tOwned[to] += transferAmount;

        // Dividend tracker
        if (!_isDividendExempt[from]) {
            try distributor.setShare(from, _tOwned[from]) {} catch {}
        }
        if (!_isDividendExempt[to]) {
            try distributor.setShare(to, _tOwned[to]) {} catch {}
        }
        try distributor.process(distributorGas) {} catch {}

        emit Transfer(from, to, transferAmount);
    }
    
    
    function swapAndLiquify() private lockTheSwap{
        uint caTokens = balanceOf(address(this));
        uint tokenAutoLP = caTokens * _lpRatio / 10;
        uint tokenTreasury = caTokens * _treasuryRatio / 10;
        uint tokenRewards = caTokens * _rewardRatio / 10;

        if(tokenTreasury > 0){
            uint balTreasury = swapTokensForEth(tokenTreasury);
            if (balTreasury > 0) payable(treasuryWallet).transfer(balTreasury);
        }

        if(tokenAutoLP > 0){
            uint half = tokenAutoLP / 2;
            uint otherHalf = tokenAutoLP - half;
            uint balAutoLP = swapTokensForEth(half);
            if (balAutoLP > 0){
                addLiquidity(otherHalf, balAutoLP);
                emit SwapAndLiquify(half, balAutoLP, otherHalf);
            }
        }

        if(tokenRewards > 0){
            uint balRewards = swapTokensForEth(tokenRewards);
            try distributor.deposit{ value: balRewards }() {} catch {}
        }

    }

    function swapTokensForEth(uint256 tokenAmount) private returns (uint256) {
        uint256 initialBalance = address(this).balance;
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tokenAmount);

        // make the swap
        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
        return (address(this).balance - initialBalance);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(router), tokenAmount);

        // add the liquidity
        (,uint256 ethFromLiquidity,) = router.addLiquidityETH {value: ethAmount} (
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            treasuryWallet,
            block.timestamp
        );
        
        if (ethAmount - ethFromLiquidity > 0)
            payable(treasuryWallet).sendValue (ethAmount - ethFromLiquidity);
    }

}