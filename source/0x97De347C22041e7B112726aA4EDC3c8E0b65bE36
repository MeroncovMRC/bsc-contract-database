// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

interface Protector {
    function checkUser(address from, address to, uint256 amt) external returns (bool);
    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;
    function setLpPair(address pair, bool enabled) external;
    function setProtections(bool _as, bool _ab) external;
    function removeSniper(address account) external;
}

contract Protections {
    address deployer;
    Protector protector;
    address tokenContract;
    Protector protections;
    uint256 public launchStamp;

    constructor () payable {
        deployer = msg.sender;
    }

    modifier onlyContract() {
        require(tokenContract == msg.sender, "ERR: OW");
        _;
    }

    function setInitializers(address aInitializer, address tInitializer) external {
        require (msg.sender == deployer && launchStamp ==0);
        protector = Protector(aInitializer);
        tokenContract = tInitializer;
    }

    function checkUser(address from, address to, uint256 amt) external onlyContract returns (bool) {
        bool checked = protector.checkUser(from, to, amt);
        return checked;
    }

    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external onlyContract {
        try protector.setLaunch(_initialLpPair, _liqAddBlock, _liqAddStamp, dec) { launchStamp = _liqAddStamp; } catch {}
    }

    function setLpPair(address pair, bool enabled) external onlyContract {
        protector.setLpPair(pair, enabled);
    }

    function setProtections(bool _antiSnipe, bool _antiBlock) external onlyContract {
        protector.setProtections(_antiSnipe, _antiBlock);
    }

    function removeSniper(address account) external onlyContract {
        protector.removeSniper(account);
    }
}