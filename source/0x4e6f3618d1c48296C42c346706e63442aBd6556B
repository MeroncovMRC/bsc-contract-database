// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MyToken is IBEP20 {
    string private name = "MOE";
    string private symbol = "MoeCoin";
    uint8 private decimals = 18;
    
    uint256 private totalSupply = 1000000420069 * (10 ** uint256(decimals));
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;
    
    address private constant buyTaxAddress = 0x000000000000000000000000000000000000dEaD;
    address private constant salesTaxAddress = 0xc20B9E96a949bDE3Aac3efcF066c59838Dd89361;
    uint256 private constant buyTaxPercentage = 1; // 1% buy tax
    uint256 private constant salesTaxPercentage = 1; // 1% sales tax
    
    constructor() {
        balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    
    function getName() external view returns (string memory) {
        return name;
    }
    
    function getSymbol() external view returns (string memory) {
        return symbol;
    }
    
    function getDecimals() external view returns (uint8) {
        return decimals;
    }
    
    function balanceOf(address account) external view override returns (uint256) {
        return balances[account];
    }
    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) external view override returns (uint256) {
        return allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) external override returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        _transfer(sender, recipient, amount);
        allowances[sender][msg.sender] -= amount;
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Invalid sender address");
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        uint256 buyTaxAmount = (amount * buyTaxPercentage) / 100;
        uint256 salesTaxAmount = (amount * salesTaxPercentage) / 100;
        uint256 transferAmount = amount - (buyTaxAmount + salesTaxAmount);
        
        balances[sender] -= amount;
        balances[recipient] += transferAmount;
        
        balances[buyTaxAddress] += buyTaxAmount;
        balances[salesTaxAddress] += salesTaxAmount;
        
        emit Transfer(sender, recipient, transferAmount);
        emit Transfer(sender, buyTaxAddress, buyTaxAmount);
        emit Transfer(sender, salesTaxAddress, salesTaxAmount);
    }
}