
// File: @openzeppelin/contracts-0.8/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts-0.8/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts-0.8/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts-0.8/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts-0.8/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts-0.8/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
}


// File: src/staking/ArcLPTokenStaking.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.2;

import "@openzeppelin/contracts-0.8/security/Pausable.sol";
import "@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol";

import "../utils/AccessProtected-0.8.sol";

import "./InterestCalculator.sol";

contract ArcLPTokenStaking is
    AccessProtected,
    ReentrancyGuard,
    InterestCalculator
{
    IERC20 public arc;
    uint public stoppedAt;

    mapping(address => mapping(address => Stake)) public stakeOf;

    mapping(address => bool) public isListedLPToken;

    event Staked(address indexed token, address indexed user, uint amount);
    event SetTokenListing(address token, bool enabled);
    event StakingStopped(uint at);

    event UnStaked(
        address indexed user,
        address indexed token,
        uint amount,
        uint rewards
    );

    struct Stake {
        uint amount;
        uint interestGained;
        uint lastStakedAt;
    }

    constructor(address _arc, uint _rate) InterestCalculator(_rate) {
        arc = IERC20(_arc);
    }

    function stake(
        address token,
        uint amount
    ) external whenNotPaused nonReentrant {
        require(isListedLPToken[token], "Stake is not allowed for this token");

        uint time = block.timestamp;
        require(stoppedAt == 0, "Staking is no longer allowed");

        address caller = _msgSender();
        Stake memory s = stakeOf[caller][token];
        uint rewards = calculateRewards(s.lastStakedAt, s.amount);
        IERC20(token).transferFrom(caller, address(this), amount);

        stakeOf[caller][token] = Stake({
            lastStakedAt: time,
            amount: s.amount + amount,
            interestGained: rewards
        });

        emit Staked(token, caller, amount);
    }

    function unstake(
        address token,
        uint amount
    ) external whenNotPaused nonReentrant {
        address caller = _msgSender();

        Stake memory s = stakeOf[caller][token];
        require(s.amount >= amount, "Invalid amount");

        uint rewards = calculateRewards(s.lastStakedAt, amount) +
            s.interestGained;

        stakeOf[caller][token].amount -= amount;
        stakeOf[caller][token].interestGained = 0;

        IERC20 pair = IERC20(token);

        pair.transfer(caller, amount);
        arc.transfer(caller, rewards);

        emit UnStaked(caller, token, amount, rewards);
    }

    function calculateRewards(
        uint time,
        uint amount
    ) internal view returns (uint) {
        uint current = block.timestamp;
        uint ending = (stoppedAt == 0 ? current : stoppedAt);

        return _earned(amount, time, ending);
    }

    function stopStaking() external onlyOwner {
        stoppedAt = block.timestamp;
        emit StakingStopped(block.timestamp);
    }

    function setTokenListing(address token, bool enabled) external onlyAdmin {
        isListedLPToken[token] = enabled;
        emit SetTokenListing(token, enabled);
    }

    function updateInterest(uint rate) external onlyOwner {
        _updateInterest(rate);
    }
}


// File: src/staking/InterestCalculator.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.2;
pragma abicoder v2;

import "@openzeppelin/contracts-0.8/utils/math/Math.sol";

contract InterestCalculator {
    struct InterestRate {
        uint interest;
        uint till;
    }

    InterestRate[] public oldRates;
    uint public currentInterest;

    event InterestRateChanged(uint rate, uint timestamp);

    constructor(uint rate) {
        currentInterest = rate;
    }

    function _updateInterest(uint rate) internal {
        oldRates.push(
            InterestRate({ interest: currentInterest, till: block.timestamp })
        );
        currentInterest = rate;
        emit InterestRateChanged(rate, block.timestamp);
    }

    function _earned(
        uint amount,
        uint begining,
        uint ending
    ) internal view returns (uint) {
        if (oldRates.length == 0)
            return _calculate(ending - begining, amount, currentInterest);

        uint index = findUpperBound(begining);
        uint total;
        InterestRate[] memory array = oldRates;
        for (uint i = index; i < oldRates.length; i += 1) {
            total += _calculate(
                array[i].till - begining,
                amount,
                array[i].interest
            );
            begining = array[i].till;
        }
        total += _calculate(ending - begining, amount, currentInterest);
        return total;
    }

    function _calculate(
        uint time,
        uint amount,
        uint rewardRate
    ) internal pure returns (uint) {
        uint timeCovered = time / 1 days; // Time covered in days

        // rewards =  amount * nominalApy * rewardPercentage
        // nominalApy = rewardPercentage / 365
        return (amount * rewardRate * timeCovered) / (36500);
    }

    // Binary search
    function findUpperBound(uint256 element) internal view returns (uint256) {
        InterestRate[] memory array = oldRates;

        uint256 low = 0;
        uint256 high = array.length;

        while (low < high) {
            uint256 mid = Math.average(low, high);

            if (array[mid].till > element) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if (low > 0 && array[low - 1].till == element) {
            return low - 1;
        } else {
            return low;
        }
    }

    function getOldRates() external view returns (InterestRate[] memory) {
        return oldRates;
    }
}


// File: src/utils/AccessProtected-0.8.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.2;

import "@openzeppelin/contracts-0.8/access/Ownable.sol";
import "@openzeppelin/contracts-0.8/utils/Context.sol";
import "@openzeppelin/contracts-0.8/security/Pausable.sol";

/// @title Access Control
/// @author ArcadeNetwork
/// @notice Provides Admin and Ownership access
/// @dev Extend this contract to take advantage of Owner & Admin roles
abstract contract AccessProtected is Context, Ownable, Pausable {
    mapping(address => bool) internal _admins; // user address => admin? mapping

    event AdminAccessSet(address _admin, bool _enabled);

    /// @notice Set Admin Access
    /// @param admin Address of Admin
    /// @param enabled Enable/Disable Admin Access
    function setAdmin(address admin, bool enabled) public onlyOwner {
        _admins[admin] = enabled;
        emit AdminAccessSet(admin, enabled);
    }

    /// @notice Set Batch Admin Access
    /// @param admins Addresses of Admins
    /// @param enabled Enable/Disable Admin Access
    function batchSetAdmin(address[] memory admins, bool[] memory enabled)
        external
        onlyOwner
    {
        require(admins.length == enabled.length, "Length mismatch");
        for (uint256 i = 0; i < admins.length; i++) {
            setAdmin(admins[i], enabled[i]);
        }
    }

    /// @notice Check Admin Access
    /// @param admin Address of Admin
    /// @return whether minter has access
    function isAdmin(address admin) public view returns (bool) {
        return _admins[admin];
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    /// @dev Throws if called by any account other than the Admin
    modifier onlyAdmin() {
        require(
            _admins[_msgSender()] || _msgSender() == owner(),
            "AccessProtected: Caller does not have Admin or Owner Access"
        );
        _;
    }
}

