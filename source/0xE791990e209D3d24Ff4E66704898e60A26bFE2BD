// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DividendCoinBSC {
    string private _name = "DividendCoin";
    string private _symbol = "Divd";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 0;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private _owner = 0xE4e6c774719Dc844b8557527d31dDbC91617BFb7;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _mint(_owner, 21000000000 * (10**uint256(_decimals)));
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 fee = amount * 6 / 100; // Calculate the transaction fee as 6% of the amount
        uint256 redistributionAmount = fee * 5 / 100; // Calculate the redistribution amount as 5% of the fee

        // Update the balances
        _balances[sender] -= amount;
        _balances[recipient] += amount - fee;
        _balances[_owner] += fee * 1 / 100; // Allocate 1% of the fee to the owner

        // Redistribution of the fee to all holders
        uint256 totalHolders = _totalSupply - _balances[address(0)];
        uint256 redistributionPerHolder = redistributionAmount / totalHolders;

        // Update the balances for all holders
        _balances[address(0)] += redistributionAmount - redistributionPerHolder * totalHolders;
        _totalSupply += redistributionAmount - redistributionPerHolder * totalHolders;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "Mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;

        emit Transfer(address(0), account, amount);
    }

    function burn(uint256 amount) public onlyOwner {
        require(amount > 0, "Burn amount must be greater than zero");
        require(_balances[msg.sender] >= amount, "Burn amount exceeds balance");

        _balances[msg.sender] -= amount;
        _totalSupply -= amount;

        emit Transfer(msg.sender, address(0), amount);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownership transfer to the zero address");

        _owner = newOwner;
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the owner can perform this action");
        _;
    }
}