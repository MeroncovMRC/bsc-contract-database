{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"BinoFarm.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Math.sol\";\nimport \"./Context.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./IMaterials.sol\";\nimport \"./IStakingProof.sol\";\nimport \"./IERC721.sol\";\nimport \"./IHousesNFT.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./RewardsDistributionRecipient.sol\";\n\n\ncontract BinoFarm is Context, Ownable, RewardsDistributionRecipient, ReentrancyGuard, IERC721Receiver {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // BINO token\n    IERC20 public rewardsToken;\n    // This ERC721 token is used to transfer ownership while Staking; methods: ownerOf, safeMint, burn\n    IStakingProof public stakingProof;\n    // Staking ERC721 housesNFT; can not be withdraw but be burned;\n    IERC721 public housesERC721;\n    IHousesNFT public housesNFT;\n    // When housesNFT is burned, 50% of materials will be minted to its stakingProof owner;\n    // Notice: not mint to the original owner of housesNFT, if it was transfered to another address\n    IMaterials public materials;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public rewardsDuration = 14 days;  // default by 2 weeks\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerPointStored;\n    \n    uint256 public constant RENTING_PERIOD = 8 hours;\n    uint256 public constant PROTECTING_PERIOD = 5 minutes;\n    // default for sharing 50%, can be modified by the admin. from 0 to 100\n    uint256 public share = 50;\n    uint256 public collectionCardId = 18;\n    uint256 public collectionCardAmounts = 1;\n    uint256 public binoFee = 0; // defaule 0 Bino\n\n\n    // tokenId =\u003e bool\n    mapping(uint256 =\u003e bool) public isStaked;\n    // tokenId =\u003e harvest time\n    mapping(uint256 =\u003e uint256) public harvestTime;\n    // tokenId =\u003e bino amount\n    mapping(uint256 =\u003e uint256) public userRewardPerPointPaid;\n    // tokenId =\u003e bino amount\n    mapping(uint256 =\u003e uint256) public rewards;\n    // accumulated staking NFT houses points\n    uint256 private _totalSupply;\n    // tokenId =\u003e points for this staking Id house\n    mapping(uint256 =\u003e uint256) private _balances;\n\n    // house\u0027s level =\u003e material\u0027s ids array\n    mapping(uint256 =\u003e uint256[]) private _levelToIds;\n    // house\u0027s level =\u003e material\u0027s amounts array\n    mapping(uint256 =\u003e uint256[]) private _levelToAmounts;\n\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 indexed reward);\n    event Staked(address indexed user, uint256 indexed tokenId, uint256 indexed initialHarvestTime);\n    event Withdrawn(address indexed user, uint256 indexed tokenId, uint256 indexed withdrawTime);\n    event RewardPaid(address indexed user, uint256 indexed reward, uint256 indexed nextHarvestTime);\n    event RewardsDurationUpdated(uint256 indexed newDuration);\n    event Recovered(address token, uint256 amount);\n\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() public {\n        rewardsToken = IERC20(0xA2dF7a11baF8bB555E93b99684A2DE0f105eB592);\n        stakingProof = IStakingProof(0x5b1556212a0B4BE284741165bb93F1189082C54a);\n        housesERC721 = IERC721(0x3158B2432d19287E0166bf87698BFefe89460573);\n        housesNFT = IHousesNFT(0x3158B2432d19287E0166bf87698BFefe89460573);\n        materials = IMaterials(0xeDEe132Fcf90FE3157C389706b30c6A1c7A6C88D);\n        // set the initial distributor as the contract deployer\n        rewardsDistribution = _msgSender();\n\n        _setLevelIds();\n        _setLevelAmounts();\n    }\n\n    function setShare(uint256 _newShare) public onlyOwner {\n        share = _newShare;\n    }\n\n    function setBinoFee(uint256 _newFee) public onlyOwner {\n        binoFee = _newFee;\n    }\n\n\n    /* ========== VIEWS ========== */\n\n    // accumulated points for all staking NFT houses\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // points for each NFT house\n    function balanceOf(uint256 tokenId) external view returns (uint256) {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        return _balances[tokenId];\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerPoint() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerPointStored;\n        }\n        return\n            rewardPerPointStored.add(\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n            );\n    }\n\n    function earned(uint256 tokenId) public view returns (uint256) {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        return _balances[tokenId].mul(rewardPerPoint().sub(userRewardPerPointPaid[tokenId])).div(1e18).add(rewards[tokenId]);\n    }\n\n    function getRewardForDuration() external view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    function isReadyToHarvest(uint256 tokenId) public view returns (bool) {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        return block.timestamp \u003e harvestTime[tokenId] ? true : false;\n    }\n\n    function isReadyToSteal(uint256 tokenId) public view returns (bool) {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        return block.timestamp \u003e harvestTime[tokenId].add(PROTECTING_PERIOD) ? true : false;\n    }\n\n    function checkUserStakedTokenIds(address account) public view returns (uint256[] memory) {\n        uint256 proofBalance = stakingProof.balanceOf(account);\n        uint256[] memory result = new uint256[](proofBalance);\n\n        if (proofBalance \u003e 0) {\n            for(uint256 i = 0; i \u003c proofBalance; ++i) {\n                result[i] = stakingProof.tokenOfOwnerByIndex(account, i);\n            }\n        }\n        return result;\n    }\n\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    // house NFT contract: approve before use this method\n    // this contract must be the Minter of staking proof contract\n    function stake(uint256 tokenId) external nonReentrant {\n        require(!isStaked[tokenId], \"this house NFT has been staked\");\n        // only lv 1-4 houses can be staked in public lands\n        uint256 level = housesNFT.checkHouseLevel(tokenId);\n        require(level \u003c= 4, \"only lv 1-4 houses can be staked in public lands\");\n        // update reward counting for this token\n        rewardPerPointStored = rewardPerPoint();          // add rewards of this period of time to total rewards before\n        lastUpdateTime = lastTimeRewardApplicable();      // reset the update timestamp\n        rewards[tokenId] = 0;\n        userRewardPerPointPaid[tokenId] = rewardPerPointStored;\n\n        // read info for this tokenId\n        uint256 points = housesNFT.checkHouseLuxury(tokenId);\n        _totalSupply = _totalSupply.add(points);\n        _balances[tokenId] = points;\n        // stake house NFT\n        housesERC721.safeTransferFrom(_msgSender(), address(this), tokenId);\n        // send a staking proof(ERC721) to its owner\n        stakingProof.safeMint(_msgSender(), tokenId);\n        harvestTime[tokenId] = block.timestamp.add(RENTING_PERIOD);\n\n        isStaked[tokenId] = true;\n\n        emit Staked(msg.sender, tokenId, harvestTime[tokenId]);\n    }\n\n    // only the staking proof\u0027s owner can trigger this method to burn NFT house\n    // and receive half amounts of materials.\n    // staking proof contract: approve before use this method\n    // this contract must be the Minter of materials contract\n    function withdraw(uint256 tokenId) public nonReentrant {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        require(stakingProof.ownerOf(tokenId) == _msgSender(), \"caller is not the staking proof owner\");\n        _updateReward(tokenId);\n\n        // read info for this tokenId\n        uint256 level = housesNFT.checkHouseLevel(tokenId);\n        uint256 points = housesNFT.checkHouseLuxury(tokenId);\n        _totalSupply = _totalSupply.sub(points);\n        _balances[tokenId] = 0;\n        // burn house NFT and its staking proof\n        housesNFT.burn(tokenId);\n        stakingProof.burn(tokenId);\n        // mint half materials\n        uint256[] memory ids = _levelToIds[level];\n        uint256[] memory amounts = _levelToAmounts[level];\n        materials.mintBatch(_msgSender(), ids, amounts, \"\");\n\n        // reset harvest time to 0?\n        harvestTime[tokenId] = 0;\n\n        // can not getReward anymore after withdraw\n        isStaked[tokenId] = false;\n\n        emit Withdrawn(msg.sender, tokenId, block.timestamp);\n    }\n\n    // Materials: must \"setApprovalForAll\" for non-owners\n    // Bino: must \"approve\" for non-owners\n    function getReward(uint256 tokenId) public nonReentrant {\n        require(isStaked[tokenId], \"this house NFT is not staked yet\");\n        // must reach the 8 hours Renting period\n        require(block.timestamp \u003e harvestTime[tokenId], \"Renting period has not ended yet, try later\");\n        _updateReward(tokenId);\n        \n        // the total rewards until now for this NFT staking house\n        uint256 reward = rewards[tokenId];\n        require(reward \u003e 0, \"Your reward is 0 now, try later\");\n        // read this staking house\u0027s proof owner\n        address proofOwner = stakingProof.ownerOf(tokenId);\n\n        rewards[tokenId] = 0;\n        // within the protecting period: only staking proof owner can getReward\n        if (_msgSender() == proofOwner) {\n            rewardsToken.safeTransfer(proofOwner, reward);\n            // reset 8 hours locking time\n            harvestTime[tokenId] = block.timestamp.add(RENTING_PERIOD);\n        } else { // beyond the protecting period: msgSender shares 50% profits with staking proof owner\n            require(block.timestamp \u003e= harvestTime[tokenId].add(PROTECTING_PERIOD), \"Not allowed: within Protection period\");\n            // consume collectionCard\n            materials.burn(_msgSender(), collectionCardId, collectionCardAmounts);\n            if (binoFee \u003e 0) {\n                // pay binoFee\n                rewardsToken.safeTransferFrom(_msgSender(), address(this), binoFee);\n            }\n            uint256 shareReward = reward.mul(share).div(100);\n            uint256 remaining = reward.sub(shareReward);\n            rewardsToken.safeTransfer(proofOwner, remaining);\n            rewardsToken.safeTransfer(_msgSender(), shareReward);\n            // reset 8 hours locking time\n            harvestTime[tokenId] = block.timestamp.add(RENTING_PERIOD);\n        }\n\n        emit RewardPaid(proofOwner, reward, harvestTime[tokenId]);\n    }\n\n    function getRewardAndWithdraw(uint256 tokenId) external {\n        // change order: getReward first, then withdraw\n        // can not getReward after withdraw, because \"isStaked == false\" after withdraw\n        getReward(tokenId);\n        withdraw(tokenId);\n    }\n\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // 1. trasfer \u0027reward\u0027 amount BINO to this Farm address\n    // 2. Reward Distributor address triggers this function, and START FARMING\n    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution {\n        // updateReward\n        rewardPerPointStored = rewardPerPoint();\n\n        if (block.timestamp \u003e= periodFinish) {\n            rewardRate = reward.div(rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint balance = rewardsToken.balanceOf(address(this));\n        require(rewardRate \u003c= balance.div(rewardsDuration), \"Provided reward too high\");\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardAdded(reward);\n    }\n\n    // Added to support recovering LP Rewards from other systems to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        require(\n            block.timestamp \u003e periodFinish,\n            \"Previous rewards period must be complete before changing the duration for the new period\"\n        );\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function _updateReward(uint256 tokenId) private {\n        rewardPerPointStored = rewardPerPoint();          // add rewards of this period of time to total rewards before\n        lastUpdateTime = lastTimeRewardApplicable();      // reset the update timestamp\n\n        rewards[tokenId] = earned(tokenId);\n        userRewardPerPointPaid[tokenId] = rewardPerPointStored;\n    }\n\n    function _setLevelIds() private {\n        _levelToIds[1] = [1, 2];\n        _levelToIds[2] = [1, 7, 3];\n        _levelToIds[3] = [6, 7, 8, 9];\n        _levelToIds[4] = [6, 7, 8, 9, 10];\n        _levelToIds[5] = [6, 7, 8, 9, 10];\n        _levelToIds[6] = [6, 7, 8, 9, 10];\n    }\n\n    function _setLevelAmounts() private {\n        _levelToAmounts[1] = [2400, 3600];\n        _levelToAmounts[2] = [5000, 3525, 3330];\n        _levelToAmounts[3] = [2750, 3675, 4500, 2100];\n        _levelToAmounts[4] = [4000, 4500, 7650, 6000, 3750];\n        _levelToAmounts[5] = [35000, 18750, 13500, 30000, 47500];\n        _levelToAmounts[6] = [350000, 90000, 90000, 250000, 500000];\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Adds \u0027Mint\u0027 into this ERC20 interface.\n     * in order to use it in other contracts to mint tokens.\n     */\n    function mint(address account, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Adds \u0027burn\u0027 into this ERC20 interface.\n     * in order to use it in other contracts to burn tokens.\n     */\n    function burn(uint256 amount) external returns (bool);\n\n    /**\n     * @dev Adds \u0027burnFrom\u0027 into this ERC20 interface.\n     * in order to use it in other contracts to burn tokens.\n     */\n    function burnFrom(address account, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"},"IHousesNFT.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IHousesNFT {\n\n    function safeMint(address to, uint256 tokenId, uint256 level) external;\n\n    function burn(uint256 tokenId) external;\n\n    function checkHouseLevel(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseBulidingPeriod(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseArea(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseLuxury(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseDurability(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseLuck(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseRentingPeriod(uint256 tokenId) external view returns (uint256);\n\n    function checkHouseProtectingPeriod(uint256 tokenId) external view returns (uint256);\n}"},"IMaterials.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IMaterials {\n    \n    function materialName(uint256 id) external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\n\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\n\n    function burn(address account, uint256 id, uint256 amount) external;\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) external;\n}"},"IStakingProof.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IStakingProof {\n    \n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function safeMint(address to, uint256 tokenId) external;\n\n    function burn(uint256 tokenId) external;\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n}"},"Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"RewardsDistributionRecipient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./Ownable.sol\";\n\ncontract RewardsDistributionRecipient is Ownable {\n    address public rewardsDistribution;\n\n    modifier onlyRewardsDistribution() {\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n        _;\n    }\n\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\n        rewardsDistribution = _rewardsDistribution;\n    }\n}"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}