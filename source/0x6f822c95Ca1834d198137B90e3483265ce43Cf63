
// File: contracts/Uniswapv3Flash.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract UniswapV3Flash {

    function flash(address pool, address token0, address token1, uint amount0, uint amount1) external {
        bytes memory data = abi.encode(pool, token0, token1, amount0, amount1);
        IUniswapV3Pool(pool).flash(address(this), amount0, amount1, data);
    }

    function uniswapV3FlashCallback(bytes calldata data) public {
        (
            address pool,
            address token0,
            address token1,
            uint256 amount0,
            uint256 amount1
        ) = abi.decode(data, (address, address, address, uint256, uint256));
        require(msg.sender == pool, "NOT AUTHORIZED");

        if (amount0 > 0) IERC20(token0).transfer(msg.sender, amount0);
        if (amount1 > 0) IERC20(token1).transfer(msg.sender, amount1);
    }
}

interface IUniswapV3Pool {
    function flash(address recipient, uint amount0, uint amount1, bytes calldata data) external;
}

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

