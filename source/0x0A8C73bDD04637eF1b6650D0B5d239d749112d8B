// File: bitbyte-ido-contracts/interfaces/IIdo.sol



pragma solidity 0.8.4;

interface IIdo {
    function initialize(
        address _creator,
        address _rewardToken,
        address _targetToken,
        uint256[] memory _idolsit,
        address[] memory _actingaddre,
        uint256[] memory _addrerate
    ) external;

    function setCreator(address _creator) external;

    // function setParentRates(uint _parentRate,uint _grandpaRate) external;

    // function takeToken(address token,address to,uint256 amount) external;

    // function takeETH(address to,uint256 amount) external;
}
// File: libs/ReentrancyGuard.sol



pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: libs/IRlinkCore.sol



pragma solidity ^0.8.0;

interface IRlinkCore {
    /**
     * @dev add address relation
     * @param _child: address of the child
     * @param _parent: address of the parent
     * @return reward rlt amount for add relation
     */
    function addRelation(address _child, address _parent) external returns(uint256);

    /**
     * @dev query child and parent is associated
     * @param child: address of the child
     * @param parent: address of the parent
     * @return child and parent is associated
     */
    function isParent(address child,address parent) external view returns(bool);

    /**
     * @dev query parent of address
     * @param account: address of the child
     * @return parent address
     */
    function parentOf(address account) external view returns(address);

    /**
     * @dev distribute token
     * you must approve bigger than 'amount' allowance of token for rlink relation contract before call
     * require (incentiveAmount + parentAmount + grandpaAmount) <= amount
     * @param token: token address to be distributed
     * @param to: to address
     * @param amount: total amount of distribute
     * @param incentiveAmount: amount of incentive reward
     * @param parentAmount: amount of parent reward
     * @param grandpaAmount: amount of grandpa reward
     */
    function distribute(
        address token,
        address to,
        uint256 amount,
        uint256 incentiveAmount,
        uint256 parentAmount,
        uint256 grandpaAmount
    ) external returns(uint256 distributedAmount);
}
// File: libs/TransferHelper.sol



pragma solidity ^0.8.0;

library TransferHelper {
    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value : value}(new bytes(0));
        require(success, 'TransferHelper: BNB_TRANSFER_FAILED');
    }
}
// File: libs/SafeCast.sol



pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. `SafeCast` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 *
 * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing
 * all math on `uint256` and `int256` and then downcasting.
 */
library SafeCast {
    /**
     * @dev Returns the downcasted uint224 from uint256, reverting on
     * overflow (when the input is greater than largest uint224).
     *
     * Counterpart to Solidity's `uint224` operator.
     *
     * Requirements:
     *
     * - input must fit into 224 bits
     */
    function toUint224(uint256 value) internal pure returns (uint224) {
        require(value <= type(uint224).max, "SafeCast: value doesn't fit in 224 bits");
        return uint224(value);
    }

    /**
     * @dev Returns the downcasted uint128 from uint256, reverting on
     * overflow (when the input is greater than largest uint128).
     *
     * Counterpart to Solidity's `uint128` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     */
    function toUint128(uint256 value) internal pure returns (uint128) {
        require(value <= type(uint128).max, "SafeCast: value doesn't fit in 128 bits");
        return uint128(value);
    }

    /**
     * @dev Returns the downcasted uint96 from uint256, reverting on
     * overflow (when the input is greater than largest uint96).
     *
     * Counterpart to Solidity's `uint96` operator.
     *
     * Requirements:
     *
     * - input must fit into 96 bits
     */
    function toUint96(uint256 value) internal pure returns (uint96) {
        require(value <= type(uint96).max, "SafeCast: value doesn't fit in 96 bits");
        return uint96(value);
    }

    /**
     * @dev Returns the downcasted uint64 from uint256, reverting on
     * overflow (when the input is greater than largest uint64).
     *
     * Counterpart to Solidity's `uint64` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     */
    function toUint64(uint256 value) internal pure returns (uint64) {
        require(value <= type(uint64).max, "SafeCast: value doesn't fit in 64 bits");
        return uint64(value);
    }

    /**
     * @dev Returns the downcasted uint32 from uint256, reverting on
     * overflow (when the input is greater than largest uint32).
     *
     * Counterpart to Solidity's `uint32` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     */
    function toUint32(uint256 value) internal pure returns (uint32) {
        require(value <= type(uint32).max, "SafeCast: value doesn't fit in 32 bits");
        return uint32(value);
    }

    /**
     * @dev Returns the downcasted uint16 from uint256, reverting on
     * overflow (when the input is greater than largest uint16).
     *
     * Counterpart to Solidity's `uint16` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     */
    function toUint16(uint256 value) internal pure returns (uint16) {
        require(value <= type(uint16).max, "SafeCast: value doesn't fit in 16 bits");
        return uint16(value);
    }

    /**
     * @dev Returns the downcasted uint8 from uint256, reverting on
     * overflow (when the input is greater than largest uint8).
     *
     * Counterpart to Solidity's `uint8` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits.
     */
    function toUint8(uint256 value) internal pure returns (uint8) {
        require(value <= type(uint8).max, "SafeCast: value doesn't fit in 8 bits");
        return uint8(value);
    }

    /**
     * @dev Converts a signed int256 into an unsigned uint256.
     *
     * Requirements:
     *
     * - input must be greater than or equal to 0.
     */
    function toUint256(int256 value) internal pure returns (uint256) {
        require(value >= 0, "SafeCast: value must be positive");
        return uint256(value);
    }

    /**
     * @dev Returns the downcasted int128 from int256, reverting on
     * overflow (when the input is less than smallest int128 or
     * greater than largest int128).
     *
     * Counterpart to Solidity's `int128` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     *
     * _Available since v3.1._
     */
    function toInt128(int256 value) internal pure returns (int128) {
        require(value >= type(int128).min && value <= type(int128).max, "SafeCast: value doesn't fit in 128 bits");
        return int128(value);
    }

    /**
     * @dev Returns the downcasted int64 from int256, reverting on
     * overflow (when the input is less than smallest int64 or
     * greater than largest int64).
     *
     * Counterpart to Solidity's `int64` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     *
     * _Available since v3.1._
     */
    function toInt64(int256 value) internal pure returns (int64) {
        require(value >= type(int64).min && value <= type(int64).max, "SafeCast: value doesn't fit in 64 bits");
        return int64(value);
    }

    /**
     * @dev Returns the downcasted int32 from int256, reverting on
     * overflow (when the input is less than smallest int32 or
     * greater than largest int32).
     *
     * Counterpart to Solidity's `int32` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     *
     * _Available since v3.1._
     */
    function toInt32(int256 value) internal pure returns (int32) {
        require(value >= type(int32).min && value <= type(int32).max, "SafeCast: value doesn't fit in 32 bits");
        return int32(value);
    }

    /**
     * @dev Returns the downcasted int16 from int256, reverting on
     * overflow (when the input is less than smallest int16 or
     * greater than largest int16).
     *
     * Counterpart to Solidity's `int16` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     *
     * _Available since v3.1._
     */
    function toInt16(int256 value) internal pure returns (int16) {
        require(value >= type(int16).min && value <= type(int16).max, "SafeCast: value doesn't fit in 16 bits");
        return int16(value);
    }

    /**
     * @dev Returns the downcasted int8 from int256, reverting on
     * overflow (when the input is less than smallest int8 or
     * greater than largest int8).
     *
     * Counterpart to Solidity's `int8` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits.
     *
     * _Available since v3.1._
     */
    function toInt8(int256 value) internal pure returns (int8) {
        require(value >= type(int8).min && value <= type(int8).max, "SafeCast: value doesn't fit in 8 bits");
        return int8(value);
    }

    /**
     * @dev Converts an unsigned uint256 into a signed int256.
     *
     * Requirements:
     *
     * - input must be less than or equal to maxInt256.
     */
    function toInt256(uint256 value) internal pure returns (int256) {
        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
        require(value <= uint256(type(int256).max), "SafeCast: value doesn't fit in an int256");
        return int256(value);
    }
}

// File: libs/Address.sol


pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
// File: libs/IERC20.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: libs/SafeERC20.sol



pragma solidity ^0.8.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: libs/SafeMath.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/math/SafeMath.sol
/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * _Available since v2.4.0._
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
// File: libs/Math.sol


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/math/Math.sol
pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute
        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
    }
}
// File: bitbyte-ido-contracts/Ido.sol



pragma solidity 0.8.4;









interface IIdoFactory {
    function rlink() external view returns(address);

    function feeOf(address _ido) external view returns(uint);

    function feeTo() external view returns(address);

    // function isAdmin(address account) external view returns(bool);

    function owner() external view returns(address);
}

contract Ido is ReentrancyGuard,IIdo {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    address public rewardToken;
    uint public rewardAmount;
    address public targetToken;
    uint public targetAmount;
    uint public softTop;
    uint public deadline;
    uint public minPayAmount;
    uint public maxPayAmount;
    address public creator;
    uint public fundAmount;
    uint public parentRate; 
    uint public grandpaRate;
    uint public startTime;

    uint public allPartnerLength;
    mapping(uint => address) public partners;
    mapping(address => uint) public partnerRateOf;
    mapping(address => uint) public partnerPaidOf;
    uint public unusedReserve;
    uint public takedAmount;
    uint public paidFee;

    uint public totalAccount;
    uint public totalClaimedAccount;
    mapping(address => uint) public investOf;
    mapping(address=> uint) public  userPaid;
    
    Release public release;

    address public immutable factory; 

    struct Release {
        uint128  startTime;
        uint64   times;
        uint64   interval;
    }
    
    event PartiCipated(address user,uint256 tokenamount,address tokenaddre);
    event WithDrawedTargetToken(address caller,uint amount);
    event ClaimedRewards(address caller,uint reward,uint parentAmount);
    event TakedRewardToken(address caller,uint amount);
    event WithdrawedInvest(address caller,uint amount);
    event FeePaid(address feeTo,address token, uint amount);

    // receive() external payable {
    // }

    modifier onlyFactoryOwner {
        require(msg.sender == IIdoFactory(factory).owner(),"forbidden");
        _;
    }    
    
    constructor () {
        factory = msg.sender;
    }

    function initialize(
        address _creator,
        address _rewardToken,
        address _targetToken,
        uint256[] memory _idoList,
        address[] memory _partners,
        uint256[] memory _partnerRates
    ) external override {
        require(msg.sender == factory,"initialize: forbidden");       

        IERC20(_rewardToken).safeApprove(IIdoFactory(factory).rlink(),type(uint256).max);

        rewardToken = _rewardToken;                    //  众筹代币类型
        rewardAmount = _idoList[0];                     // 众筹代币数量
        targetToken = _targetToken;                    // 募资目标token
        targetAmount = _idoList[1];                      // 募资token总额
        softTop = _idoList[2];                          // 软顶默认为0
        deadline = _idoList[6].add(_idoList[3]);             //开始时间戳+间隔秒计数 = 结束时间
        minPayAmount = _idoList[4];                           // 设置最低募资
        creator = _creator;                      // 受益人默认是合约的创建者
        parentRate = _idoList[7];        // 邀请返佣百分比 
        maxPayAmount = _idoList[5];                        // 设置最大购买限额
        startTime = _idoList[6];                       // 开始时间
        grandpaRate = _idoList[11];
    
        // 释放数据
        release = Release({
            startTime: SafeCast.toUint128(_idoList[8]),
            times: SafeCast.toUint64(_idoList[9]),
            interval: SafeCast.toUint64(_idoList[10])
        });

        // totalReserve =  _idoList[0].mul(1e18 + _idoList[7] + _idoList[11]).div(1e18);
     
        uint total = 0;
        for(uint i = 0; i < _partners.length; i++){
            total = total.add(_partnerRates[i]);
            require(total <= 1e18,"sum of partner rates must be 1e18");
            partnerRateOf[_partners[i]] = _partnerRates[i];
            partners[i] = _partners[i];                  
        }
        require(total == 1e18,"sum of partner rates must be 1e18");
        allPartnerLength = _partners.length;
    }

    // 当前余量
    function margin() external view returns(uint256){
        return targetAmount.sub(fundAmount);
    }    

    // 参与众筹
    // 是否在有效时间内
    // 参与募资数量不得小于设置数量
    // 参与数量 < 设置最大数
    function partiCipate(uint _tokenAmount) external payable nonReentrant {
        require(_tokenAmount > 0,"amount can not be 0");
        require(block.timestamp >= startTime,"not started"); 
        require(!_isEnded(),"ended");
        uint targetAmount_ = targetAmount;
        uint fundAmount_ = fundAmount;
        require(fundAmount_.add(_tokenAmount) <= targetAmount_,"time is up or the pool is full");  //时间是否结束或者当前数大于硬顶
        require(_tokenAmount >= minPayAmount || _tokenAmount == targetAmount_.sub(fundAmount_),"amount can not less than min pay amount");
        uint investedAmount = investOf[msg.sender];
        uint availQuota = Math.min(maxPayAmount.sub(investedAmount),targetAmount_.sub(fundAmount_));
        require(_tokenAmount <= availQuota,"insufficient available quota");  // 参数数大于最低限额  // 参与数小于设定最大数

        address payToken_ = targetToken;
        uint receivedAmount = _tokenAmount;
        if(payToken_ == address(0)){
            require(msg.value == _tokenAmount,"invalid input value");
        }else{
            uint balanceBefore = IERC20(payToken_).balanceOf(address(this));
            IERC20(payToken_).safeTransferFrom(msg.sender,address(this),_tokenAmount);
            receivedAmount =  IERC20(payToken_).balanceOf(address(this)).sub(balanceBefore);
            require(receivedAmount > 0,"no received token");
        }  

        fundAmount = fundAmount_.add(receivedAmount); 
        investOf[msg.sender] = investedAmount.add(receivedAmount);
        if(investedAmount == 0){
            totalAccount = totalAccount.add(1);
        }

        emit PartiCipated(msg.sender,receivedAmount,payToken_);
    }

    function takeRewardToken() external nonReentrant {
        require(msg.sender == creator,"caller must be creator");
        uint canTakeAmount = creatorCanTakeAmount();
        require(canTakeAmount > 0,"can take amount is 0");

        takedAmount = takedAmount.add(canTakeAmount);
        IERC20 rewardToken_ = IERC20(rewardToken);
        rewardToken_.safeTransfer(msg.sender,canTakeAmount);

        emit TakedRewardToken(msg.sender,canTakeAmount);
    }

    function withdrawInvest() external nonReentrant {
        require(_isEnded() && !_isSuccess(),"not ended or successed"); // 当前数量小于软顶
        require(investOf[msg.sender] > 0,"no invest"); // 筛选未参与者
        //如果为收益人
        uint balance = investOf[msg.sender];
        require(balance > 0,"no balance");
        address payToken_ = targetToken;
        investOf[msg.sender] = 0;
        if(payToken_ == address(0)){
            TransferHelper.safeTransferETH(msg.sender,balance);                
        }else{
            IERC20(payToken_).safeTransfer(msg.sender,balance);
        }

        emit WithdrawedInvest(msg.sender,balance);
    }

    function withdrawTargetToken() external nonReentrant {
        require(_isEnded() && _isSuccess(),"not ended or not successful");
        uint rate = partnerRateOf[msg.sender];
        require(rate > 0,"caller must be partner");
        uint paidAmount = partnerPaidOf[msg.sender];
        uint feeAmount = fundAmount.mul(IIdoFactory(factory).feeOf(address(this))) / 1e18;
        uint amount =  fundAmount.sub(feeAmount).mul(rate).div(1e18).sub(paidAmount);
        partnerPaidOf[msg.sender] = paidAmount.add(amount);

        address targetToken_ = targetToken;
        _payFee(targetToken_,feeAmount);
        if(targetToken_ == address(0)){
            TransferHelper.safeTransferETH(msg.sender,amount);
        }else{
            IERC20(targetToken_).safeTransfer(msg.sender,amount);
        }

        emit WithDrawedTargetToken(msg.sender,amount);    
    }

    function _payFee(address _token,uint _feeAmount) internal {
        if(paidFee == 0){
            paidFee = _feeAmount;
            address feeTo_ = IIdoFactory(factory).feeTo();
            if(_token == address(0)){
                TransferHelper.safeTransferETH(feeTo_,_feeAmount);
            }else{
                IERC20(_token).safeTransfer(feeTo_,_feeAmount);
            }

            emit FeePaid(feeTo_,_token,_feeAmount);
        }
    }

    function _pastTimes(Release memory _release) internal view returns(uint){
        if(_release.interval == 0){
            return _release.times;
        }
        if(block.timestamp < _release.startTime){
            return 0;
        }

        return (Math.min(block.timestamp,_lastReleaseTime(_release)) - _release.startTime) / _release.interval + 1;
    }

    function _lastReleaseTime(Release memory _release) internal pure returns(uint){
        return _release.startTime + _release.times * _release.interval - _release.interval;
    }

    function claim() external nonReentrant {
        Release memory release_ = release;        
        require(_isEnded() && _isSuccess(),"not ended or not successful");
        require(release_.startTime <= block.timestamp,"release not start");

        address caller = msg.sender;
        uint balance = investOf[caller];
        require(balance > 0,"caller not participated");
        uint userTotalReward =  balance.mul(rewardAmount).div(targetAmount);
        uint pastTimes = _pastTimes(release_);

        uint releasedReward = pastTimes == release_.times ? userTotalReward : pastTimes.mul(userTotalReward).div(release_.times);
        uint reward = releasedReward.sub(userPaid[caller]);
        require(reward > 0,"no reward can claim");
        userPaid[caller] = releasedReward;

        uint parentAmount = reward.mul(parentRate) / 1e18;
        uint grandpaAmount = reward.mul(grandpaRate) / 1e18;
        uint distributeAmount = reward.add(parentAmount).add(grandpaAmount);
        address rewardToken_ = rewardToken;
        uint cost = IRlinkCore(IIdoFactory(factory).rlink()).distribute(rewardToken_,caller,reward.add(parentAmount).add(grandpaAmount),0,parentAmount,grandpaAmount);
        require(cost > 0,"distribute failed");
        if(cost < distributeAmount){
            unusedReserve = unusedReserve.add(distributeAmount - cost);
        }

        if(userTotalReward == releasedReward){
            totalClaimedAccount = totalClaimedAccount.add(1);            
            if(totalClaimedAccount == totalAccount){
                uint unusedReserve_ = unusedReserve; 
                if(unusedReserve_ > 0){
                    IERC20(rewardToken_).safeTransfer(creator,unusedReserve_);
                }
            }            
        }

        emit ClaimedRewards(caller,reward,parentAmount);
    }

    function _isSuccess() internal view returns(bool){
        return fundAmount >= softTop;        
    }

    function _isEnded() internal view returns(bool){
        return deadline <= block.timestamp;
    }

    function creatorCanTakeAmount() public view returns(uint){
        if(!_isEnded()){
            return 0;            
        }

        uint rewardAmount_ = rewardAmount;
        uint amount = _isSuccess() ? rewardAmount_ - rewardAmount_ * fundAmount / targetAmount : rewardAmount_;
        amount = amount.add(amount.mul(parentRate).div(1e18)).add(amount.mul(grandpaRate).div(1e18));
        return amount.sub(takedAmount);
    }

    // function _safeTransferETH(address to, uint value) internal {
    //     (bool success,) = to.call{value : value}(new bytes(0));
    //     require(success, 'TransferHelper: BNB_TRANSFER_FAILED');
    // }

    function setParentRates(uint _parentRate,uint _grandpaRate) external {
        require(msg.sender == creator || msg.sender == IIdoFactory(factory).owner(),"setParentRates: forbidden");
        parentRate = _parentRate;
        grandpaRate = _grandpaRate;
    }

    function setCreator(address _creator) external override onlyFactoryOwner {
        address oldCreator = creator;
        creator = _creator;
        partnerRateOf[creator] = partnerRateOf[oldCreator];
    }

    function takeToken(address token,address to,uint256 amount) external onlyFactoryOwner {
        require(token != address(0),"invalid token");
        require(amount > 0,"amount can not be 0");
        require(to != address(0) && !Address.isContract(to),"invalid to address");
        IERC20(token).safeTransfer(to, amount);
    }

    function takeETH(address to,uint256 amount) external onlyFactoryOwner {
        require(amount > 0,"amount can not be 0");
        require(address(this).balance>=amount,"insufficient balance");
        require(to != address(0) && !Address.isContract(to),"invalid to address");
        
        TransferHelper.safeTransferETH(to,amount);
    }

    // FunAmount 集资资金当前数量
    // TargetAmounts 目标集资资金数量(硬顶)
    // _SoftTops 最低投入数
    function getPoolsInfo() public view returns(uint256 _fundAmount,uint256 _targetAmount,uint256 _softTop){
        _fundAmount = fundAmount;
        _targetAmount = targetAmount;
        _softTop = softTop;
    }

    // ido合约基础信息
    function idoInf() public view returns(
        uint TokensAmounts,
        uint TargetAmounts,
        uint SoftTops,
        uint Deadlines,
        uint Lowests,
        uint FunAmounts,
        uint Rebates,
        uint MxaAmounts,
        uint ReleaseTimts,
        uint Frequencys,
        uint freeddays,
        uint CreationTimes,
        address TokenRewards,
        address TargetTokens
    ){
        TokensAmounts = rewardAmount;
        TargetAmounts = targetAmount;
        SoftTops = softTop;
        Deadlines = deadline;
        Lowests = minPayAmount;
        FunAmounts = fundAmount;
        Rebates = parentRate;
        MxaAmounts = maxPayAmount;
        ReleaseTimts = release.startTime;
        Frequencys = release.times;
        freeddays = release.interval;
        CreationTimes = startTime;
        TokenRewards = rewardToken;
        TargetTokens = targetToken;
    }

    function infos(address account) external view returns(uint _unlockedAmount,uint _rewardAmount,uint _lockedAmount,uint _nextUnlockTime,uint _claimedAmount,uint _investAmount){
        _claimedAmount = userPaid[account];
        Release memory release_ = release;
        _investAmount = investOf[account];
        if(_investAmount > 0 && _isEnded() && _isSuccess()){
            uint userTotalReward = _investAmount.mul(rewardAmount).div(targetAmount);
            if(release_.startTime <= block.timestamp){
                uint pastTimes = _pastTimes(release_);
                _unlockedAmount = pastTimes == release_.times ? userTotalReward : pastTimes.mul(userTotalReward).div(release_.times);
                _rewardAmount = _unlockedAmount.sub(_claimedAmount);
            }
            _lockedAmount = userTotalReward - _unlockedAmount;
        }

        _nextUnlockTime = release_.startTime;
        if(block.timestamp > release_.startTime && release_.interval > 0){
            uint lastReleaseTime = _lastReleaseTime(release_);
            if(block.timestamp >= lastReleaseTime){
                _nextUnlockTime = lastReleaseTime;
            }else{
                uint mod = (block.timestamp - release_.startTime) % release_.interval;
                _nextUnlockTime = mod > 0 ? block.timestamp + release_.interval - mod : block.timestamp;
            }
        }        
    }

    function partnerInfos() external view returns(uint256 _fundAmount,uint256 _targetAmount,uint256 _softTop,uint _canTakeAmount, address[] memory _partners,uint[] memory _partnerRates,uint[] memory _paidAmounts) {
        _fundAmount = fundAmount.sub(fundAmount.mul(IIdoFactory(factory).feeOf(address(this))) / 1e18);
        _targetAmount = targetAmount;
        _softTop = softTop;
        _canTakeAmount = creatorCanTakeAmount();

        uint plen = allPartnerLength;
        _partners = new address[](plen);
        _partnerRates = new uint[](plen);
        _paidAmounts = new uint[](plen);
        for(uint i=0;i<plen;i++){
            _partners[i] = partners[i];
            _partnerRates[i] = partnerRateOf[_partners[i]];
            _paidAmounts[i] = partnerPaidOf[_partners[i]];
        }
    }    
}