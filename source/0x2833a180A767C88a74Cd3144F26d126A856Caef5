pragma solidity ^0.8.0;

contract Voting {
    // struct untuk menyimpan data voter
    struct Voter {
        bool isRegistered;
        uint256 votedProposalId;
        string nik;
    }
    
    // struct untuk menyimpan data kandidat
    struct Candidate {
        string name;
        uint256 voteCount;
    }
    
    address public owner;
    mapping(address => Voter) public voters;
    Candidate[] public candidates;
    
    // constructor untuk menginisialisasi pemilik smart contract
    constructor() {
        owner = msg.sender;
    }
    
    // fungsi untuk menambahkan kandidat oleh pemilik smart contract
    function addCandidate(string memory _name) public {
        require(msg.sender == owner, "Only owner can add candidate");
        candidates.push(Candidate(_name, 0));
    }
    
    // fungsi untuk mendaftarkan voter dengan alamat dan NIK
    function registerVoter(address _address, string memory _nik) public {
        require(msg.sender == owner, "Only owner can register voter");
        require(!voters[_address].isRegistered, "Voter already registered");
        voters[_address] = Voter(true, 0, _nik);
    }
    
    // fungsi untuk melakukan voting
    function vote(uint256 _candidateId) public {
        require(voters[msg.sender].isRegistered, "Only registered voters can vote");
        require(voters[msg.sender].votedProposalId == 0, "Already voted");
        require(_candidateId >= 0 && _candidateId < candidates.length, "Invalid candidate");
        
        // update data voter
        voters[msg.sender].votedProposalId = _candidateId + 1;
        
        // update data kandidat
        candidates[_candidateId].voteCount++;
    }
    
    // fungsi untuk mereset data kandidat dan voter oleh pemilik smart contract
    // function reset() public {
    //     require(msg.sender == owner, "Only owner can reset");
    //     for (uint256 i = 0; i < candidates.length; i++) {
    //         candidates[i].voteCount = 0;
    //     }
    //     for (address voterAddress in voters) {
    //         voters[voterAddress].votedProposalId = 0;
    //     }
    // }
}