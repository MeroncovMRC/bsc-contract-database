
// File: contracts/refund.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;
import './ownable.sol';

/**
 * @dev Partial interface of the ERC20 standard.
 */
interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function decimals() external view returns (uint8);
}

/**
 * @dev Partial interface of the Staking contract.
 */
interface IStaking {
    function getTokenAmountLimit (
        address userAddress,
        bool isWhitelisted,
        uint256 maxTokenAmount,
        uint256 threshold,
        uint16[] calldata factors
    ) external view returns (uint256);
}

interface ISale {
    function getPaymentProfile (uint256 paymentProfileIndex) external view returns (
        address contractAddress,
        uint256 usdRate,
        uint256 weight,
        uint256 totalPaid,
        string memory name,
        string memory currency,
        bool active
    );
    function getTokenUsdRate () external view returns (uint256);
    function getPaidTokenAmount (address userAddress) external view returns (uint256);
    function getWithdrawnTokenAmount (address userAddress) external view returns (uint256);
    function isSaleOver () external view returns (bool);
}

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
        _;
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

contract RefundContract is Ownable, ReentrancyGuard {
    modifier onlyManager() {
        require(_managers[msg.sender], 'Caller is not the manager');
        _;
    }

    event UserRefund(
        address indexed saleAddress, address indexed userAddress, uint256 amount
    );

    ISale private _saleContract;
    address private _paymentProfileContractAddress;
    mapping(address => mapping(address => uint256)) private _refunded;
    // sale contract address => user address => refunded amount
    mapping(address => bool) internal _managers;
    uint256 private _paymentProfileUsdRate;
    uint256 private _tokenUsdRate;
    // sale contract payment profile usd rate
    constructor (address newOwner) {
        require(newOwner != address(0), 'Owner address can not be zero');
        _managers[newOwner] = true;
        transferOwnership(newOwner);
    }

    // Admin functions
    function adminWithdraw (
        address tokenAddress, uint256 amount
    ) external onlyOwner returns (bool) {
        _sendAsset(tokenAddress, msg.sender, amount);
        return true;
    }

    function addToManagers (address userAddress) external onlyOwner returns (bool) {
        _managers[userAddress] = true;
        return true;
    }

    function removeFromManagers (address userAddress) external onlyOwner returns (bool) {
        _managers[userAddress] = false;
        return true;
    }

    // managers functions
    function setSaleData (
        address contractAddress
    ) external onlyManager returns (bool) {
        _saleContract = ISale(contractAddress);
        require(_saleContract.isSaleOver(), 'Sale is not over yet for this contract');
        (_paymentProfileContractAddress, _paymentProfileUsdRate,,,,,)
            = _saleContract.getPaymentProfile(1);
        _tokenUsdRate = _saleContract.getTokenUsdRate();
        return true;
    }

    function refund () external returns (bool) {
        uint256 refundAmount = getAvailableAmount(msg.sender);
        require(refundAmount > 0, 'Nothing to refund');
        _refunded[address(_saleContract)][msg.sender] += refundAmount;
        emit UserRefund(address(_saleContract), msg.sender, refundAmount);
        _sendAsset(
            _paymentProfileContractAddress, msg.sender, refundAmount
        );
        return true;
    }

    // internal functions
    function _sendAsset (
        address tokenAddress, address toAddress, uint256 amount
    ) internal nonReentrant returns (bool) {
        if (tokenAddress == address(0)) {
            require(address(this).balance >= amount,
                'Not enough contract balance');
            payable(toAddress).transfer(amount);
        } else {
            IERC20 tokenContract = IERC20(tokenAddress);
            require(
                tokenContract.transfer(toAddress, amount),
                'Transfer does not return true'
            );
        }
        return true;
    }

    // view functions
    function isManager (address userAddress) external view returns (bool) {
        return _managers[userAddress];
    }

    function getAvailableAmount (address userAddress) public view returns (uint256) {
        uint256 tokenAmount = _saleContract.getPaidTokenAmount(userAddress);
        uint256 paidAmount = tokenAmount * _tokenUsdRate / _paymentProfileUsdRate;
        if (paidAmount < _refunded[address(_saleContract)][userAddress]) return 0;
        return paidAmount - _refunded[address(_saleContract)][userAddress];
    }

    function getRefundedAmount (
        address userAddress
    ) external view returns (uint256) {
        return _refunded[address(_saleContract)][userAddress];
    }

    function getRefundedAmount (
        address userAddress,
        address saleContract
    ) external view returns (uint256) {
        return _refunded[saleContract][userAddress];
    }

    function getActiveSaleContract () external view returns (address) {
        return address(_saleContract);
    }
}

// File: contracts/ownable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import './context.sol';

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/context.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
