// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract RoyalDeathClub {
    string public name = "Royal Death Club";
    string public symbol = "RDC";
    uint8 public decimals = 18;
    uint256 public totalSupply = 10000 * 10**uint256(decimals);

    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;
    address private constant MARKETING_ADDRESS = 0xE133Ded5101D6338254274E34258293Fd1869102;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    constructor() {
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(amount <= balances[msg.sender], "Insufficient balance");
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        uint256 burnAmount = amount * 2 / 100;
        uint256 marketingAmount = amount * 3 / 100;
        uint256 netAmount = amount - burnAmount - marketingAmount;

        balances[sender] -= amount;
        balances[recipient] += netAmount;
        balances[BURN_ADDRESS] += burnAmount;
        balances[MARKETING_ADDRESS] += marketingAmount;

        emit Transfer(sender, recipient, netAmount);
        emit Transfer(sender, BURN_ADDRESS, burnAmount);
        emit Transfer(sender, MARKETING_ADDRESS, marketingAmount);
    }

    function _approve(address owner, address spender, uint256 amount) private {
        allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}