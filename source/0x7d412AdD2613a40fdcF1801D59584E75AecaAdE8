pragma solidity ^0.8.0;
interface tokenEx {
    function transfer(address receiver, uint amount) external;
    function transferFrom(address _from, address _to, uint256 _value)external returns (bool);
    function balanceOf(address receiver) external view returns(uint256);
    function approve(address spender, uint amount) external returns (bool);
}
interface qiqi{
    function addressIDO(address,address)external view returns(uint,uint,uint,uint,uint);
}
contract Meta{
    address public owner;
    address public CEO;
    uint public sum;
    bool public start;
    mapping(address=>mapping (address=>User))public addressIDO;
    mapping(address=>bool)public list;
    address public SELLC=0xa645995e9801F2ca6e2361eDF4c2A138362BADe4;
    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }
    struct User{
        uint value;
        uint Dayvalue;
        uint _time;
        uint day;
        uint release;
    }
    constructor () public {
        owner=msg.sender;
        CEO=msg.sender;
        start=true;
    }
    function update(address token,address[] memory addr)public {
        require(msg.sender==owner,"You are not a routing contract administrator"); 
        for(uint i=0;i<addr.length;i++){
            (uint a,uint b,uint c,,uint f)=qiqi(0xee15dcC473838D027a352f01E309aB53321a2c17).addressIDO(token,addr[i]);
            addressIDO[token][addr[i]]._time=a;
            addressIDO[token][addr[i]].Dayvalue=b;
            addressIDO[token][addr[i]].value=c;
            addressIDO[token][addr[i]].release=f;
        }
    }
    function claim(address token)public{
        require(list[token]);
        require(addressIDO[token][msg.sender].value >0);
        require(addressIDO[token][msg.sender].day <35);
        require(block.timestamp > addressIDO[token][msg.sender]._time);
        tokenEx(token).transfer(msg.sender,addressIDO[token][msg.sender].release);
        addressIDO[token][msg.sender]._time+=864000;
        addressIDO[token][msg.sender].day++;
    }
    receive() external payable{ 
    }
    function getBNB(uint a)public {
        require(msg.sender==owner,"You are not a routing contract administrator"); 
        payable(owner).transfer(a);
    }
    function setOwner()public {
        require(msg.sender==owner,"You are not a routing contract administrator"); 
        owner=address(0);
    }
    function getStart(bool a)public {
        require(msg.sender==owner,"You are not a routing contract administrator"); 
        start=a; 
    }
    function setToken(address _token,bool b)public {
        require(msg.sender==CEO,"You are not a routing contract administrator"); 
        list[_token]=b;
    }
    function setToken(address token,uint _token)public {
      require(msg.sender==owner,"You are not a routing contract administrator"); 
      tokenEx(token).transfer(owner,_token);
    }
    function sendToken(address token,uint amount)public{
      require(list[token]);
        require(start);
        require(addressIDO[token][msg.sender].value ==0);
        bool isok=tokenEx(token).transferFrom(msg.sender, address(this), amount);
        require(isok);
        addressIDO[token][msg.sender]._time=block.timestamp + 864000;
        addressIDO[token][msg.sender].Dayvalue=amount;
        addressIDO[token][msg.sender].value=amount*130/100;
        addressIDO[token][msg.sender].release=amount*130/100/35;
    }
    function sendTokenAdmin(address token,address addr,uint amount)public{
      require(list[token]);
      require(msg.sender==owner,"You are not a routing contract administrator"); 
      require(addressIDO[token][addr].value ==0);
        addressIDO[token][addr]._time=block.timestamp + 864000;
        addressIDO[token][addr].Dayvalue=amount;
        addressIDO[token][addr].value=amount*130/100;
        addressIDO[token][addr].release=amount*130/100/35;
        //release
    }
    function getValue(address token,address addr)public view returns(uint,uint,uint,uint,uint,bool){
         return (addressIDO[token][addr]._time,addressIDO[token][addr].Dayvalue,addressIDO[token][addr].value,addressIDO[token][addr].release,addressIDO[token][addr].day,start);
    }
}