// File: @openzeppelin/contracts/utils/math/SafeMath.sol


pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/utils/Counters.sol


pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: contracts/interfaces/IVault.sol

pragma solidity >=0.4.22 <0.9.0;

interface IVault {
    function deposit(address investor, uint256 amount, address referer) external;
    function addFrog(uint256 tokenId) external;
    function claimByMystery(address owner, uint256 tokenId) external;
}

// File: contracts/interfaces/IGenesisFrog.sol

pragma solidity >=0.4.22 <0.9.0;

interface IGenesisFrog {
    function frogGenes(uint256 tokenId) external view returns(uint256);
    function born(address owner, uint256 tokenId, uint256 genes) external;
    function burnFrog(uint256 tokenId) external;
    function upgradeFrog(uint256 tokenId) external;
    function mixPartGenes(address owner, uint256 newTokenId, uint256 tokenId, uint256 partGenes) external returns(uint256);
    function ownerOf(uint256 tokenId) external view returns (address);
}

// File: contracts/interfaces/IGeneScience.sol

pragma solidity >=0.4.22 <0.9.0;

interface IGeneScience {
    function decode(uint256 _genes) external pure returns(uint32[] memory);
    function encode(uint32[] calldata traits) external pure returns (uint256);
    function countPart(uint256 _genes) external pure returns(uint256 count);
    function genesValue(uint256 genes) external view returns(uint256 value);
    function genesMultipleValue(uint256 genes) external view returns(uint256 multipleValue);
    function genesUpgrade(uint256 genes) external pure returns(uint256);
    function encodePacked(
        uint32 talent,
        uint32 body,
        uint32 head,
        uint32 clothes,
        uint32 shoe,
        uint32 hand,
        uint32 value
        ) external pure returns(uint256 _genes);
    function mixGenes(uint256 genes, uint256 partGenes) external view returns(uint256 _genes);
    function valueToAmount(uint256 value) external pure returns(uint256);
    function decodeTokenURI(uint256 genes) external pure returns(string memory);
}

// File: contracts/interfaces/IFrogPart.sol

pragma solidity >=0.4.22 <0.9.0;

interface IFrogPart {
    function born(address owner, uint256 genes) external;
    function burnPartBatch(address from, uint256[] memory ids) external;
    function balanceOf(address account, uint256 id) external view returns (uint256);
}

// File: contracts/MysteryBox.sol

pragma solidity >=0.4.22 <0.9.0;







contract MysteryBox is Ownable, ReentrancyGuard{
    using SafeMath for uint256;

    uint32[8] public SPECIES_LIST = [1, 4, 1, 1, 1, 1, 0, 0];
    IGeneScience public geneScience;
    IFrogPart public frogPart;
    IGenesisFrog public genesisFrog;
    IVault public vault;
    address public freeSigner;
    mapping(uint256 => uint32[]) WEIGHTS;
    uint256 public startDate;

    struct Free {
        uint256 id;
        address owner;
        uint256 value;
        address referer;
    }

    struct Sig {
        uint8 v;
        bytes32 r;
        bytes32 s;
    }

    mapping(uint256 => bool) frees;

    event OpenFrogBox(address indexed owner, uint256 indexed tokenId, uint256 genes);
    event OpenPartBox(address indexed owner, uint256 genes);
    event OpenFreeBox(uint256 indexed id, address owner);
    event MixFrog(address indexed owner, uint256 indexed tokenId, uint256 genes);

    constructor (
        address _freeSigner,
        address _geneScience,
        uint256 _startDate
    ) {
        freeSigner = _freeSigner;
        geneScience = IGeneScience(_geneScience);
        startDate = _startDate;

        WEIGHTS[2]    = [0,   100, 0,  0,  0,  0,  0, 0];
        WEIGHTS[5]    = [50,  100, 5,  0,  0,  0,  0, 0];
        WEIGHTS[50]   = [50,  100, 50, 5,  0,  0,  0, 0];
        WEIGHTS[100]  = [100, 100, 50, 25, 5,  0,  0, 0];
        WEIGHTS[200]  = [100, 100, 75, 50, 25, 5,  0, 0];
        WEIGHTS[500]  = [100, 100, 75, 50, 50, 15, 0, 0];
        WEIGHTS[1000] = [100, 100, 90, 75, 50, 25, 0, 0];
        WEIGHTS[2000] = [100, 100, 90, 75, 75, 40, 0, 0];
        WEIGHTS[5000] = [100, 100, 90, 90, 90, 90, 0, 0];
    }

    function setFreeSigner(address _freeSigner) external onlyOwner {
        freeSigner = _freeSigner;
    }

    function setStartDate(uint256 _startDate) external onlyOwner {
        require(startDate > block.timestamp, "MysteryBox started");
        startDate = _startDate;
    }

    function setVault(address _vault) external onlyOwner {
        vault = IVault(_vault);
    }

    function setGenesisFrog(address _genesisFrog) external onlyOwner {
        genesisFrog = IGenesisFrog(_genesisFrog);
    }

    function setFrogPart(address _frogPart) external onlyOwner {
        frogPart = IFrogPart(_frogPart);
    }

    function openBox(uint256 value, uint256 amount, address referer) external {
        require(block.timestamp >= startDate, "MysteryBox: cannot deposit at this moment");
        uint256 total = value.mul(amount);
        
        vault.deposit(msg.sender, total, referer);

        uint256 weight = convertToWeight(value);
        require(weight > 2, "MysteryBox: weight > 2");
        for(uint i = 0; i < amount; i++){
            open(weight);
        }
    }

    function open(uint256 weight) private {
        uint256 randomGene = _random(msg.sender, weight);
        uint32[] memory weightList = getWeightList(weight);
        _open(randomGene, weight, weightList);
    }

    function _open(uint256 randomGene, uint256 weight, uint32[] memory weightList) private {
        require(weightList.length > 0, "MysteryBox: invalid weight");

        uint32[] memory bit32List = geneScience.decode(randomGene);
        uint256 genes;
        uint32 mod;
        uint32[] memory traits = new uint32[](8);

        for(uint32 i = 0; i < weightList.length; i++){
            if(0 == weightList[i] || 0 == SPECIES_LIST[i]){
                traits[i] = 0;
                continue;
            }
            uint32 bit32 = bit32List[i] % 100;
            if(bit32 >= weightList[i]){
                traits[i] = 0;
                continue;
            }

            mod = bit32 % SPECIES_LIST[i] + 1;
            traits[i] = mod;
            if(i > 1){
                uint32[] memory partTraits = new uint32[](8);
                partTraits[i] = mod;
                genes = geneScience.encode(partTraits);
                frogPart.born(msg.sender, genes);
                emit OpenPartBox(msg.sender, genes);
            }
        }

        genes = geneScience.encodePacked(
            traits[0],
            traits[1],
            traits[2],
            traits[3],
            traits[4],
            traits[5], 
            uint32(weight));
        uint256 tokenId = _getTokenId();
        genesisFrog.born(msg.sender, tokenId, genes);
        emit OpenFrogBox(msg.sender, tokenId, genes);
    }

    function openFreeBox(Free calldata free, Sig calldata sig) external{
        require(block.timestamp >= startDate, "MysteryBox: cannot deposit at this moment");

        require(!frees[free.id], "MysteryBox: invalid free");
        require(address(0) != free.referer, "MysteryBox: invalid referer");
        require(free.owner == msg.sender, "MysteryBox: Not free owner");

        verifyFree(free, sig.v, sig.r, sig.s);

        uint256 value = free.value;
        uint256 randomGene = _random(msg.sender, free.value);
        require(free.value > 0, "MysteryBox: value > 0");

        uint256 weight = convertToWeight(value);
        require(weight <= 100, "MysteryBox: value <= 100");

        uint32[] memory weightList = getWeightList(weight);
        _open(randomGene, weight, weightList);

        vault.deposit(free.owner, 0, free.referer);
        frees[free.id] = true;
        emit OpenFreeBox(free.id, free.owner);
    }

    function mixFrog(uint256 tokenId, uint256[] calldata partList) external {
        require(partList.length > 0, "MysteryBox: partList.length > 0");

        uint256 _genes = mixPartList(partList);
        require(geneScience.countPart(_genes) == partList.length, "MysteryBox: partList exists in the same trait");

        vault.claimByMystery(msg.sender, tokenId);

        uint256 newTokenId = _getTokenId();
        uint256 newGenes = genesisFrog.mixPartGenes(msg.sender, newTokenId, tokenId, _genes);
        frogPart.burnPartBatch(msg.sender, partList);
        emit MixFrog(msg.sender, newTokenId, newGenes);
    }

    function mixPartList(uint256[] calldata partList) public view returns(uint256 _genes) {
        _genes = partList[0];
        for(uint i = 0; i < partList.length; i++){
            require(frogPart.balanceOf(msg.sender, partList[i]) > 0, "MysteryBox: insufficient balance");
            _genes = _genes | partList[i];
        }
    }

    function getWeightList(uint256 weight) public view returns(uint32[] memory weightList){
        weightList = WEIGHTS[weight];
    }

    uint256 private nonce = 0;
    function _random(address sender, uint256 price) private returns (uint256) {
      uint256 num = uint256(keccak256(abi.encodePacked(block.timestamp, sender, block.number, nonce, price)));
      nonce = num;
      return num;
    }

    function random(address sender, uint256 price) public view returns(uint256){
        return uint256(keccak256(abi.encodePacked(sender, nonce, price)));
    }

    using Counters for Counters.Counter;
    Counters.Counter private _tokenId;
    function _getTokenId() private returns(uint256 ){
        _tokenId.increment();
        uint256 tokenId = _tokenId.current();
        return tokenId;
    }

    function verifyFree(Free calldata free, uint8 _v, bytes32 _r, bytes32 _s) public view {
        address _freeSigner = verifyMessage(keccak256(abi.encode(free)), _v, _r, _s);
        require(freeSigner == _freeSigner, "MysteryBox: wrong free signature");
    }

    function verifyMessage(bytes32 message, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {
        bytes memory prefix = "\x19Ethereum Signed Message:\n32";
        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, message));
        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);
        return signer;
    }

    function convertToWeight(uint256 amount) public pure returns(uint256) {
        return amount.div(10 ** 18);
    }
}