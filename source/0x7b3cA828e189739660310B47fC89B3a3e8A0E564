{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.2 \u003c0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\nimport \"./Context.sol\";\nimport \"./IBEP20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n\n\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() public override view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() public override view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() public override view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\n        );\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"ILocker.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ILocker {\r\n    function totalLock() external view returns (uint256);\r\n\r\n    function lockOf(address _account) external view returns (uint256);\r\n\r\n    function released(address _account) external view returns (uint256);\r\n\r\n    function canUnlockAmount(address _account) external view returns (uint256);\r\n\r\n    function lock(address _account, uint256 _amount) external;\r\n\r\n    function unlock() external;\r\n    \r\n    function getStartReleaseBlock() external view returns (uint256);\r\n}"},"IReferral.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IReferral {\n    /**\n     * @dev Record referral.\n     */\n    function recordReferral(address user, address referrer) external;\n\n    /**\n     * @dev Record referral commission.\n     */\n    function recordReferralCommission(address referrer, uint256 commission) external;\n\n    /**\n     * @dev Get the referrer address that referred the user.\n     */\n    function getReferrer(address user) external view returns (address);\n}"},"MasterChef.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n//  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \n// | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n// | |  ___  ____   | || |     ____     | || |      __      | || |   _____      | || |      __      | |\n// | | |_  ||_  _|  | || |   .\u0027    `.   | || |     /  \\     | || |  |_   _|     | || |     /  \\     | |\n// | |   | |_/ /    | || |  /  .--.  \\  | || |    / /\\ \\    | || |    | |       | || |    / /\\ \\    | |\n// | |   |  __\u0027.    | || |  | |    | |  | || |   / ____ \\   | || |    | |   _   | || |   / ____ \\   | |\n// | |  _| |  \\ \\_  | || |  \\  `--\u0027  /  | || | _/ /    \\ \\_ | || |   _| |__/ |  | || | _/ /    \\ \\_ | |\n// | | |____||____| | || |   `.____.\u0027   | || ||____|  |____|| || |  |________|  | || ||____|  |____|| |\n// | |              | || |              | || |              | || |              | || |              | |\n// | \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\n// \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \n\n// website : https://koaladefi.finance/\n// twitter : https://twitter.com/KoalaDefi\n\nimport \"./ReentrancyGuard.sol\";\nimport \"./Context.sol\";\nimport \"./Ownable.sol\";\nimport \"./IReferral.sol\";\nimport \"./ILocker.sol\";\nimport \"./Address.sol\";\nimport \"./SafeBEP20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./BEP20.sol\";\nimport \"./NALISToken.sol\";\n\n\n// MasterChef is the master of Nalis. He can make Nalis and he is a fair guy.\n//\n// Note that it\u0027s ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once NALIS is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it\u0027s bug-free. God bless.\ncontract MasterChef is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;         // How many LP tokens the user has provided.\n        uint256 rewardDebt;     // Reward debt. See explanation below.\n        uint256 rewardLockedUp;  // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n        uint256 noWithdrawalFeeAfter; //No withdrawal fee after this duration\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of NALISs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accNalisPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\n        //   1. The pool\u0027s `accNalisPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User\u0027s `amount` gets updated.\n        //   4. User\u0027s `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBEP20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. NALISs to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that NALISs distribution occurs.\n        uint256 accNalisPerShare;   // Accumulated NALISs per share, times 1e12. See below.\n        uint16 depositFeeBP;      // Deposit fee in basis points\n        uint256 dynamicDepositFeeBP;      // Dynamic deposit fee in basis points\n        uint256 lpPriceMA7;     // LP or token price based on moving avarage price from last 7 days / Regulary updated by the operator\n        uint256 totalBuybackBurnDepFee; // Store the total amount of buyback and burn dep fee in the pool since the last reset\n        uint256 harvestInterval;  // Harvest interval in seconds\n        uint256 withdrawalFeeInterval; // Withdrawal fee minimum interval in seconds\n        uint256 withdrawalFeeBP; // Withdrawal fee in basis points when the withdrawal occurs before the minimum interval\n    }\n\n    // NALIS token\n    NalisToken public nalis;\n    // LYPTUS token\n    IBEP20 public lyptus;\n    // Lyptus price based on moving avarage price from last 7 days / Regulary updated by the operator\n    uint256 public lyptusPriceMA7=0;\n    \n    // Dev address.\n    address public devAddress;\n    // Deposit Fee address\n    address public feeAddress;\n    // Deposit Charity address\n    address public charityAddress;    \n    // Lottery contract address : default address is the burn address and will be updated when lottery release\n    address public lotteryAddress;\n    // NALIS tokens created per block.\n    uint256 public nalisPerBlock;\n    // Bonus muliplier for early nalis makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n    // Max harvest interval: 14 days.\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n    // Max harvest interval: 14 days.\n    uint256 public constant MAXIMUM_WITHDRAWFEE_INTERVAL = 5 days;    \n    // Max deposit fee : 10% (in basis point)\n    uint256 public constant MAXIMUM_DEPOSIT_FEE = 1000;\n    // Max withdrawal fee : 10% (in basis point)\n    uint256 public constant MAXIMUM_WITHDRAWAL_FEE = 1000;   \n    // Lottery mint rate : maximum 4% (in basis point) :  default rate is 0 and will be updated when lottery release\n    uint16 public lotteryMintRate;\n    // Burn address\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;  \n    // Charity fee is a part of deposit fee (in basis point)\n    uint16 public charityFeeBP;\n    // Charity fee is a part of deposit fee (in basis point)\n    uint16 public lyptusDiscountFeeBP;    \n    // Locker interface\n    ILocker nalisLocker;\n    // Locker adresse\n    address public nalisLockerAddress;\n    // Locker rate (in basis point) if = 0 locker desactivated\n    uint16 public lockerRate;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when NALIS mining starts.\n    uint256 public startBlock;\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n\n    // Nalis referral contract address.\n    IReferral public nalisReferral;\n    // Referral commission rate in basis points.\n    uint16 public referralCommissionRate = 100;\n    \n    // The operator can only update the lyptusPriceMA7 + lpPriceMA7 \u0026 reset totaldynamicdepfee \u0026 change operator adresse\n    address private _operator;  \n\n    // Events\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event BurnLyptus(address indexed user,address indexed target, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 newAmount);\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 newAmount);\n    event FeeAddressUpdated(address indexed user, address indexed newAddress);\n    event CharityAddressUpdated(address indexed user, address indexed newAddress);\n    event CharityFeeRateUpdated(address indexed user, uint256 previousAmount, uint16 newAmount);\n    event LyptusDiscountFeeRateUpdated(address indexed user, uint256 previousAmount, uint16 newAmount);\n    event DevAddressUpdated(address indexed user, address indexed newAddress);\n    event NalisReferralUpdated(address indexed user, IReferral newAddress);\n    event NalisLockerUpdated(address indexed user, ILocker newAddress);\n    event LockerRateUpdated(address indexed user, uint256 previousAmount, uint256 newAmount);\n    event ReferralRateUpdated(address indexed user, uint256 previousAmount, uint256 newAmount);\n    event LotteryAddressUpdated(address indexed user, address indexed newAddress);\n    event LotteryMintRateUpdated(address indexed user, uint256 previousAmount, uint16 newAmount);\n    event LyptusPriceMA7Updated(address indexed user, uint256 previousAmount, uint256 newAmount);\n    event LpPriceMA7Updated(address indexed user, uint256 previousAmount, uint256 newAmount);\n    event TotalBuybackBurnDepFeeReseted(address indexed user, uint256 previousAmount, uint256 newAmount);\n    \n    // Modifiers\n    modifier onlyOperator() {\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\n        _;\n    }\n\n    constructor(\n        NalisToken _nalis,\n        IBEP20 _lyptus,\n        uint256 _startBlock,\n        uint256 _nalisPerBlock,\n        address _nalisLockerAddress\n    ) public {\n        _operator = _msgSender();\n        emit OperatorTransferred(address(0), _operator);        \n        nalis = _nalis;\n        lyptus = _lyptus;\n        startBlock = _startBlock;\n        nalisPerBlock = _nalisPerBlock;\n        lotteryAddress = BURN_ADDRESS;\n        lotteryMintRate = 0;\n        charityFeeBP = 1000;\n        lyptusDiscountFeeBP = 5000;\n        lockerRate = 5000;\n\n        devAddress = msg.sender;\n        feeAddress = msg.sender;\n        charityAddress = msg.sender;\n        nalisLockerAddress = _nalisLockerAddress;\n        nalisLocker = ILocker(_nalisLockerAddress);\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n    \n\t// add a check for avoid duplicate lptoken\n    mapping(IBEP20 =\u003e bool) public poolExistence;\n    modifier nonDuplicated(IBEP20 _lpToken) {\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: duplicated\");\n        _;\n    }    \n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, uint256 _dynamicDepositFeeBP, uint256 _lpPriceMA7, uint256 _harvestInterval, uint256 _withdrawalFeeInterval, uint256 _withdrawalFeeBP, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\n        // deposit fee can\u0027t excess more than 10%\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE, \"add: invalid deposit fee basis points\");\n        // dynamic deposit fee can\u0027t excess more than 10%\n        require(_dynamicDepositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE, \"set: invalid dynamic deposit fee basis points\");         \n        // withdrawal fee can\u0027t excess more than 10%\n        require(_withdrawalFeeBP \u003c= MAXIMUM_WITHDRAWAL_FEE, \"add: invalid deposit fee basis points\");      \n        require(_harvestInterval \u003c= MAXIMUM_HARVEST_INTERVAL, \"add: invalid harvest interval\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number \u003e startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolExistence[_lpToken] = true;\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accNalisPerShare: 0,\n            depositFeeBP: _depositFeeBP,\n            dynamicDepositFeeBP: _dynamicDepositFeeBP,\n            lpPriceMA7: _lpPriceMA7,\n            totalBuybackBurnDepFee: 0,\n            harvestInterval: _harvestInterval,\n            withdrawalFeeInterval: _withdrawalFeeInterval,\n            withdrawalFeeBP: _withdrawalFeeBP\n        }));\n    }\n\n    // Update the given pool\u0027s NALIS allocation point and deposit fee. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, uint16 _dynamicDepositFeeBP, uint256 _lpPriceMA7, uint256 _harvestInterval, uint256 _withdrawalFeeInterval, uint256 _withdrawalFeeBP, bool _withUpdate) public onlyOwner {\n        // deposit fee can\u0027t excess more than 10%\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE, \"set: invalid deposit fee basis points\");\n        // dynamic deposit fee can\u0027t excess more than 10%\n        require(_dynamicDepositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE, \"set: invalid dynamic deposit fee basis points\");        \n        // withdrawal fee can\u0027t excess more than 10%\n        require(_withdrawalFeeBP \u003c= MAXIMUM_WITHDRAWAL_FEE, \"add: invalid deposit fee basis points\");         \n        require(_harvestInterval \u003c= MAXIMUM_HARVEST_INTERVAL, \"set: invalid harvest interval\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].dynamicDepositFeeBP = _dynamicDepositFeeBP;\n        poolInfo[_pid].lpPriceMA7 = _lpPriceMA7;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n        poolInfo[_pid].withdrawalFeeInterval = _withdrawalFeeInterval;\n        poolInfo[_pid].withdrawalFeeBP = _withdrawalFeeBP;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n    }\n\n    // View function to see pending NALISs on frontend.\n    function pendingNalis(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accNalisPerShare = pool.accNalisPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 nalisReward = multiplier.mul(nalisPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accNalisPerShare = accNalisPerShare.add(nalisReward.mul(1e12).div(lpSupply));\n        }\n        uint256 pending = user.amount.mul(accNalisPerShare).div(1e12).sub(user.rewardDebt);\n        return pending.add(user.rewardLockedUp);\n    }\n\n    // View function to see if user can harvest NALISs.\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\n        UserInfo storage user = userInfo[_pid][_user];\n        return block.timestamp \u003e= user.nextHarvestUntil;\n    }\n    \n    // View function to see if user withdrawal fees apply to the harvest\n    // return true if time is over\n    function noWithdrawFee(uint256 _pid, address _user) public view returns (bool) {\n        UserInfo storage user = userInfo[_pid][_user];\n        return block.timestamp \u003e= user.noWithdrawalFeeAfter;\n    }    \n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number \u003c= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 nalisReward = multiplier.mul(nalisPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        nalis.mint(devAddress, nalisReward.mul(100).div(1000));\n        // Automatically burn 2% of minted tokens\n        nalis.mint(BURN_ADDRESS, nalisReward.mul(20).div(1000));\n        // Automatically mint some NALIS for the lottery pot\n        if (address(lotteryAddress) != address(0) \u0026\u0026 lotteryMintRate \u003e 0) {\n            nalis.mint(lotteryAddress, nalisReward.mul(lotteryMintRate).div(10000));\n        }        \n        nalis.mint(address(this), nalisReward);\n        pool.accNalisPerShare = pool.accNalisPerShare.add(nalisReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for NALIS allocation.\n    function deposit(uint256 _pid, uint256 _amount, address _referrer, bool _lyptusFee) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        \n        uint256 dynamicDepositFee = 0;\n        \n        // Dynamic deposit fee are only applied if deposit fee are set \u003e 0\n        // dynamic fee type\n        if (_amount \u003e 0 \u0026\u0026 _lyptusFee==true \u0026\u0026 pool.dynamicDepositFeeBP\u003e0 \u0026\u0026 pool.depositFeeBP \u003e 0) {\n            // A Type Fee : part of the fee is payed in LYPTUS token\n            \n            require(lyptusPriceMA7 \u003e 0, \"lyptus price not valid\");\n            require(pool.lpPriceMA7 \u003e 0, \"lp price not valid\");\n            require(lyptusDiscountFeeBP \u003e 0, \"lyptuDiscountFeeBP not valid\");\n            \n            uint256 lyptusAmount = 0;\n            uint256 lyptusFee =  pool.dynamicDepositFeeBP.mul(lyptusDiscountFeeBP).div(10000);\n\n            uint256 amountMulByPrice = _amount.mul(pool.lpPriceMA7);\n            lyptusAmount = ((amountMulByPrice.mul(lyptusFee).div(10000)).mul(1e18)).div(lyptusPriceMA7);\n            lyptusAmount = lyptusAmount.div(1e18);\n            \n            emit BurnLyptus(msg.sender,BURN_ADDRESS, lyptusAmount);\n            \n            lyptus.transferFrom(msg.sender,BURN_ADDRESS,lyptusAmount);\n            dynamicDepositFee = 0;\n        }    \n        else if (_amount \u003e 0 \u0026\u0026 _lyptusFee==false \u0026\u0026 pool.dynamicDepositFeeBP\u003e0 \u0026\u0026 pool.depositFeeBP \u003e 0) {\n            // B Type Fee : all fee is payed in deposit token\n\n            dynamicDepositFee = _amount.mul(pool.dynamicDepositFeeBP).div(10000);\n            // The part which is not payed in LYPTUS will serve for buyback and burn LYPTUS\n            uint256 buybackBurnDepFee = dynamicDepositFee.mul(lyptusDiscountFeeBP).div(10000);\n            pool.totalBuybackBurnDepFee = pool.totalBuybackBurnDepFee.add(buybackBurnDepFee);\n        }\n        \n        updatePool(_pid);\n        \n        if (_amount \u003e 0 \u0026\u0026 address(nalisReferral) != address(0) \u0026\u0026 _referrer != address(0) \u0026\u0026 _referrer != BURN_ADDRESS \u0026\u0026 _referrer != msg.sender) {\n            nalisReferral.recordReferral(msg.sender, _referrer);\n        }\n        payOrLockupPendingNalis(_pid,false);\n        if (_amount \u003e 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            if (address(pool.lpToken) == address(nalis)) {\n                uint256 burnTax = _amount.mul(nalis.burnRateTax()).div(10000);\n                _amount = _amount.sub(burnTax);\n            }\n            if (pool.depositFeeBP \u003e 0) {\n                if (charityFeeBP \u003e 0) {\n                    uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\n                    uint256 charityFee = depositFee.mul(charityFeeBP).div(10000);\n                    user.amount = user.amount.add(_amount).sub(depositFee).sub(dynamicDepositFee);\n                    pool.lpToken.safeTransfer(feeAddress, depositFee.sub(charityFee).add(dynamicDepositFee));\n                    pool.lpToken.safeTransfer(charityAddress, charityFee);\n                } else {\n                    uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\n                    user.amount = user.amount.add(_amount).sub(depositFee).sub(dynamicDepositFee);\n                    pool.lpToken.safeTransfer(feeAddress, depositFee.add(dynamicDepositFee));\n                }  \n            } else {\n                user.amount = user.amount.add(_amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accNalisPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount \u003e= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        payOrLockupPendingNalis(_pid,true);\n        if (_amount \u003e 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accNalisPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.rewardLockedUp = 0;\n        user.nextHarvestUntil = 0;\n        user.noWithdrawalFeeAfter = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Pay or lockup pending NALISs.\n    function payOrLockupPendingNalis(uint256 _pid, bool _isWithdrawal) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        if (user.nextHarvestUntil == 0) {\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n        }\n        \n        if (user.noWithdrawalFeeAfter == 0) {\n            user.noWithdrawalFeeAfter = block.timestamp.add(pool.withdrawalFeeInterval);\n        }        \n\n        // pending reward for user\n        uint256 pending = user.amount.mul(pool.accNalisPerShare).div(1e12).sub(user.rewardDebt);\n        \n        if (_isWithdrawal) {\n             // if user withdrawal before the interval, user get X% less of pending reward               \n            if (noWithdrawFee(_pid, msg.sender)==false) {\n                uint256 withdrawalfeeamount = pending.mul(pool.withdrawalFeeBP).div(10000);\n                pending = pending.sub(withdrawalfeeamount);\n                // tax on withdrawal is send to the burn address\n                safeNalisTransfer(BURN_ADDRESS, withdrawalfeeamount);     \n            }\n            // reset timer at each withdrawal\n            user.noWithdrawalFeeAfter = block.timestamp.add(pool.withdrawalFeeInterval);                \n        }\n        \n        if (canHarvest(_pid, msg.sender)) {\n            if (pending \u003e 0 || user.rewardLockedUp \u003e 0) {\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\n\n                // reset lockup\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\n                user.rewardLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n                \n                if (address(nalisLocker) != address(0)){\n                    uint256 startReleaseBlock = ILocker(nalisLocker).getStartReleaseBlock();\n                    if (lockerRate \u003e 0 \u0026\u0026 block.number \u003c startReleaseBlock) {\n                        uint256 _lockerAmount = totalRewards.mul(lockerRate).div(10000);\n                        totalRewards = totalRewards.sub(_lockerAmount);\n                        IBEP20(nalis).safeIncreaseAllowance(address(nalisLockerAddress), _lockerAmount);\n                        ILocker(nalisLocker).lock(msg.sender, _lockerAmount); \n                    }\n                }\n                \n                // send rewards \n                safeNalisTransfer(msg.sender, totalRewards);\n                payReferralCommission(msg.sender, totalRewards); // extra mint for referral\n            }\n        } else if (pending \u003e 0) {\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\n            emit RewardLockedUp(msg.sender, _pid, pending);\n        }\n    }\n\n    // Safe nalis transfer function, just in case if rounding error causes pool to not have enough NALISs.\n    function safeNalisTransfer(address _to, uint256 _amount) internal {\n        uint256 nalisBal = nalis.balanceOf(address(this));\n        bool transferSuccess = false;\n        if (_amount \u003e nalisBal) {\n            transferSuccess = nalis.transfer(_to, nalisBal);\n        } else {\n            transferSuccess = nalis.transfer(_to, _amount);\n        }\n        require(transferSuccess, \"safeNalisTransfer: transfer failed\");\n    }\n\n    // Update dev address by the previous dev address\n    function setDevAddress(address _devAddress) public {\n        require(msg.sender == devAddress, \"setDevAddress: FORBIDDEN\");\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\n        devAddress = _devAddress;\n        emit DevAddressUpdated(msg.sender, _devAddress);\n    }\n\n    //Update fee address by the previous fee address\n    function setFeeAddress(address _feeAddress) public {\n        require(msg.sender == feeAddress, \"setFeeAddress: FORBIDDEN\");\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\n        feeAddress = _feeAddress;\n        emit FeeAddressUpdated(msg.sender, _feeAddress);\n    }\n    \n    //Update charity address by the previous charity address\n    function setCharityAddress(address _charityAddress) public {\n        require(msg.sender == charityAddress, \"setCharityAddress: FORBIDDEN\");\n        require(_charityAddress != address(0), \"setCharityAddress: ZERO\");\n        charityAddress = _charityAddress;\n        emit CharityAddressUpdated(msg.sender, _charityAddress);\n    }    \n\n    //Update lottery address by the owner\n    function setLotteryAddress(address _lotteryAddress) public onlyOwner {\n        require(_lotteryAddress != address(0), \"setLotteryAddress: ZERO\");\n        lotteryAddress = _lotteryAddress;\n        emit LotteryAddressUpdated(msg.sender, _lotteryAddress);\n    }    \n\n    // Update emission rate by the owner\n    function updateEmissionRate(uint256 _nalisPerBlock) public onlyOwner {\n        massUpdatePools();\n        emit EmissionRateUpdated(msg.sender, nalisPerBlock, _nalisPerBlock);\n        nalisPerBlock = _nalisPerBlock;\n    }\n\n    // Update the nalis referral contract address by the owner\n    function setNalisReferral(IReferral _nalisReferral) public onlyOwner {\n        require(address(_nalisReferral) != address(0), \"setNalisReferral: ZERO\");\n        nalisReferral = _nalisReferral;\n        emit NalisReferralUpdated(msg.sender, _nalisReferral);\n    }\n\n    // Update referral commission rate by the owner\n    function setReferralCommissionRate(uint16 _referralCommissionRate) public onlyOwner {\n        // Max referral commission rate: 10%.\n        require(_referralCommissionRate \u003c= 1000, \"setReferralCommissionRate: invalid referral commission rate basis points\");\n        emit ReferralRateUpdated(msg.sender, referralCommissionRate, _referralCommissionRate);\n        referralCommissionRate = _referralCommissionRate;\n    }\n\n    // Update lottery mint rate by the owner\n    function setLotteryMintRate(uint16 _lotteryMintRate) public onlyOwner {\n        // Max lottery mint rate : 4%.\n        require(_lotteryMintRate \u003c= 400, \"setLotteryMintRate: invalid lottery mint rate basis points\");\n        emit LotteryMintRateUpdated(msg.sender, lotteryMintRate, _lotteryMintRate);\n        lotteryMintRate = _lotteryMintRate;\n    }  \n\n    // Update charity fee rate by the owner\n    function setCharityFeeRate(uint16 _charityFeeBP) public onlyOwner {\n        // Max charity fee rate: 50%\n        // charity fee is a part of deposit fee and not added fee\n        require(_charityFeeBP \u003c= 5000, \"setCharityFeeRate: invalid charity fee rate basis points\");\n        emit CharityFeeRateUpdated(msg.sender, charityFeeBP, _charityFeeBP);\n        charityFeeBP = _charityFeeBP;\n    }\n    \n    // Update lyptus discount fee rate by the owner\n    function setLyptusDiscountFeeRate(uint16 _lyptusDiscountFeeBP) public onlyOwner {\n        // Max lyptus discount fee rate: 50%\n        // lyptus discount fee is a part of dynamic deposit fee and not added fee\n        require(_lyptusDiscountFeeBP \u003c= 5000, \"setLyptusDiscountFeeRate: invalid lyptus discount fee rate basis points\");\n        emit LyptusDiscountFeeRateUpdated(msg.sender, lyptusDiscountFeeBP, _lyptusDiscountFeeBP);\n        lyptusDiscountFeeBP = _lyptusDiscountFeeBP;\n    }        \n\n    // Update the nalis locker contract address by the owner\n    function setNalisLocker(ILocker _nalisLocker) public onlyOwner {\n        nalisLocker = _nalisLocker;\n        emit NalisLockerUpdated(msg.sender, _nalisLocker);\n    }   \n\n    // Update locker rate by the owner\n    function setLockerRate(uint16 _lockerRate) public onlyOwner {\n        // Max locker rate: 50%.\n        require(_lockerRate \u003c= 5000, \"setLockerRate: invalid locker rate basis points\");\n        emit LockerRateUpdated(msg.sender, lockerRate, _lockerRate);\n        lockerRate = _lockerRate;\n    }\n\n    // Pay referral commission to the referrer who referred this user.\n    function payReferralCommission(address _user, uint256 _pending) internal {\n        if (address(nalisReferral) != address(0) \u0026\u0026 referralCommissionRate \u003e 0) {\n            address referrer = nalisReferral.getReferrer(_user);\n            uint256 commissionAmount = _pending.mul(referralCommissionRate).div(10000);\n\n            if (referrer != address(0) \u0026\u0026 referrer != BURN_ADDRESS \u0026\u0026 commissionAmount \u003e 0) {\n                nalis.mint(referrer, commissionAmount);\n                nalisReferral.recordReferralCommission(referrer, commissionAmount);\n                emit ReferralCommissionPaid(_user, referrer, commissionAmount);\n            }\n        }\n    }\n    \n    // Returns the address of the current operator.\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    // Transfers operator of the contract to a new account (`newOperator`). Can only be called by the current operator.\n    function transferOperator(address newOperator) public onlyOperator {\n        require(newOperator != address(0), \"transferOperator: new operator is the zero address\");\n        emit OperatorTransferred(_operator, newOperator);\n        _operator = newOperator;\n    }\n    \n    // Update the lyptus MA 7 price. Can only be called by the current operator.\n    function updateLyptusPriceMA7(uint256 _lyptusPriceMA7) public onlyOperator {\n        require(_lyptusPriceMA7 \u003e 0, \"updateLyptusPriceMA7: value must be higher then 0\");\n        emit LyptusPriceMA7Updated(msg.sender, lyptusPriceMA7, _lyptusPriceMA7);\n        lyptusPriceMA7 = _lyptusPriceMA7;\n    } \n    \n    // Update the LP MA 7 price. Can only be called by the current operator.\n    function updateLpPriceMA7(uint256 _pid, uint256 _lpPriceMA7) public onlyOperator {\n        require(_lpPriceMA7 \u003e 0, \"updateLpPriceMA7: value must be higher then 0\");\n        emit LpPriceMA7Updated(msg.sender, poolInfo[_pid].lpPriceMA7, _lpPriceMA7);\n        poolInfo[_pid].lpPriceMA7 = _lpPriceMA7;\n    }   \n    \n    // Reset amount of totalBuybackBurnDepFee per pool. Can only be called by the current operator.\n    function resetTotalBuybackBurnDepFee(uint256 _pid) public onlyOperator {\n        emit TotalBuybackBurnDepFeeReseted(msg.sender, poolInfo[_pid].totalBuybackBurnDepFee, 0);\n        poolInfo[_pid].totalBuybackBurnDepFee = 0;\n    }      \n}"},"NALISToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n//  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \r\n// | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n// | |  ___  ____   | || |     ____     | || |      __      | || |   _____      | || |      __      | |\r\n// | | |_  ||_  _|  | || |   .\u0027    `.   | || |     /  \\     | || |  |_   _|     | || |     /  \\     | |\r\n// | |   | |_/ /    | || |  /  .--.  \\  | || |    / /\\ \\    | || |    | |       | || |    / /\\ \\    | |\r\n// | |   |  __\u0027.    | || |  | |    | |  | || |   / ____ \\   | || |    | |   _   | || |   / ____ \\   | |\r\n// | |  _| |  \\ \\_  | || |  \\  `--\u0027  /  | || | _/ /    \\ \\_ | || |   _| |__/ |  | || | _/ /    \\ \\_ | |\r\n// | | |____||____| | || |   `.____.\u0027   | || ||____|  |____|| || |  |________|  | || ||____|  |____|| |\r\n// | |              | || |              | || |              | || |              | || |              | |\r\n// | \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\r\n// \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027 \r\n\r\n// website : https://koaladefi.finance/\r\n// twitter : https://twitter.com/KoalaDefi\r\n\r\nimport \"./BEP20.sol\";\r\n\r\n// NalisToken with Governance.\r\ncontract NalisToken is BEP20 {\r\n    \r\n    // Burn tax rate in basis points. (defaut 2%, max 2%)\r\n    // Voted by the community here https://snapshot.org/#/koaladefi.eth/proposal/QmcEFL2Pee5eaLgui4nbCVawR9i4vohchEAU4Sa5mPLKLS\r\n    uint16 public burnRateTax = 200;\r\n    \r\n    // Burn address\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Max transfer amount rate in basis points. (default is 1% of total supply)\r\n    uint16 public maxTransferAmountRate = 100;\r\n    // Addresses that are excluded from antiWhale\r\n    mapping(address =\u003e bool) private _excludedFromAntiWhale;\r\n    // Addresses that are excluded from transfert tax\r\n    mapping(address =\u003e bool) private _excludedFromTrsfTax;    \r\n    \r\n    // The operator can only update the transfer burn tax rate \u0026 update maxTransferAmountRate \u0026 add address to antiWhale and transfer tax whitelist \u0026 change operator adresse\r\n    address private _operator;\r\n    // The super operator can only update the owner adresse : This acces is protected by a 15 days timelock : Super operator address can\u0027t be change in anyway\r\n    address private _superOperator;\r\n\r\n    \r\n\r\n    // Events\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n    event OwnerTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event BurnRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\r\n    event MaxTransferAmountRateUpdated(address indexed operator, uint256 previousRate, uint256 newRate);\r\n    event NalisSwapRouterUpdated(address indexed operator, address indexed router, address indexed pair);\r\n    event ExcludedFromAntiWhale(address indexed exludedAdresse, bool indexed excludedStatut);\r\n    event ExcludedFromTrsfTax(address indexed exludedAdresse, bool indexed excludedStatut);\r\n    \r\n\r\n    // Modifiers\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\r\n        _;\r\n    }\r\n    \r\n    modifier antiWhale(address sender, address recipient, uint256 amount) {\r\n        if (maxTransferAmount() \u003e 0) {\r\n            if (\r\n                _excludedFromAntiWhale[sender] == false\r\n                \u0026\u0026 _excludedFromAntiWhale[recipient] == false\r\n            ) {\r\n                require(amount \u003c= maxTransferAmount(), \"NALIS::antiWhale: Transfer amount exceeds the maxTransferAmount\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Constructs the NalisToken contract.\r\n     */\r\n    constructor() public BEP20(\"Nalis Token\", \"NALIS\") {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n\r\n        _excludedFromAntiWhale[msg.sender] = true;\r\n        _excludedFromAntiWhale[address(0)] = true;\r\n        _excludedFromAntiWhale[address(this)] = true;\r\n        _excludedFromAntiWhale[BURN_ADDRESS] = true;\r\n    }\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n\r\n    /// @dev overrides transfer BEP20 function to meet tokenomics of NALIS\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override antiWhale(sender, recipient, amount) {\r\n        \r\n        if (recipient == BURN_ADDRESS || _excludedFromTrsfTax[sender] == true || _excludedFromTrsfTax[recipient] == true) {            \r\n            super._transfer(sender, recipient, amount);\r\n        } else {\r\n            \r\n            // default burn tax is 1% of every transfer\r\n            uint256 burnAmount = amount.mul(burnRateTax).div(10000);\r\n\r\n            // default 99% of transfer sent to recipient\r\n            uint256 sendAmount = amount.sub(burnAmount);\r\n            \r\n            require(amount == sendAmount + burnAmount, \"NALIS::transfer: Burn value invalid\");\r\n\r\n            super._transfer(sender, BURN_ADDRESS, burnAmount);\r\n            super._transfer(sender, recipient, sendAmount);\r\n            amount = sendAmount;            \r\n\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Returns the max transfer amount.\r\n     */\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return totalSupply().mul(maxTransferAmountRate).div(10000);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address is excluded from antiWhale or not.\r\n     */\r\n    function isExcludedFromAntiWhale(address _account) public view returns (bool) {\r\n        return _excludedFromAntiWhale[_account];\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the address is excluded from transfert tax or not.\r\n     */\r\n    function isExcludedFromTrsfTax(address _account) public view returns (bool) {\r\n        return _excludedFromTrsfTax[_account];\r\n    }    \r\n\r\n    /**\r\n     * @dev Update the burn rate.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateBurnRate(uint16 _burnRateTax) public onlyOperator {\r\n        require(_burnRateTax \u003c= 200, \"NALIS::updateBurnRate: Burn rate must not exceed the maximum rate.\");\r\n        emit BurnRateUpdated(msg.sender, burnRateTax, _burnRateTax);\r\n        burnRateTax = _burnRateTax;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the max transfer amount rate.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateMaxTransferAmountRate(uint16 _maxTransferAmountRate) public onlyOperator {\r\n        require(_maxTransferAmountRate \u003c= 10000, \"NALIS::updateMaxTransferAmountRate: Max transfer amount rate must not exceed the maximum rate.\");\r\n        emit MaxTransferAmountRateUpdated(msg.sender, maxTransferAmountRate, _maxTransferAmountRate);\r\n        maxTransferAmountRate = _maxTransferAmountRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Exclude or include an address from antiWhale.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function setExcludedFromAntiWhale(address _account, bool _excluded) public onlyOperator {\r\n        _excludedFromAntiWhale[_account] = _excluded;\r\n        emit ExcludedFromAntiWhale(_account, _excluded);\r\n    }\r\n    \r\n    /**\r\n     * @dev Exclude or include an address from antiWhale.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function setExcludedFromTrsfTax(address _account, bool _excluded) public onlyOperator {\r\n        _excludedFromTrsfTax[_account] = _excluded;\r\n        emit ExcludedFromTrsfTax(_account, _excluded);\r\n    }    \r\n\r\n    /**\r\n     * @dev Returns the address of the current operator.\r\n     */\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\r\n     * Can only be called by the current operator.\r\n     */\r\n    function transferOperator(address newOperator) public onlyOperator {\r\n        require(newOperator != address(0), \"NALIS::transferOperator: new operator is the zero address\");\r\n        emit OperatorTransferred(_operator, newOperator);\r\n        _operator = newOperator;\r\n    }\r\n    \r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address =\u003e address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address =\u003e mapping (uint32 =\u003e Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address =\u003e uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract\u0027s domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address =\u003e uint) public nonces;\r\n\r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account\u0027s vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"NALIS::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"NALIS::delegateBySig: invalid nonce\");\r\n        require(now \u003c= expiry, \"NALIS::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints \u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber \u003c block.number, \"NALIS::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \u003c= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock \u003e blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper \u003e lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock \u003c blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying NALISs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep \u0026\u0026 amount \u003e 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum \u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum \u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"NALIS::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints \u003e 0 \u0026\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n \u003c 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n    \r\n    //a way to get back other BEP20 tokens sended by error into the NALIS token contract\r\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public onlyOperator {\r\n        IBEP20(_token).transfer(msg.sender, _amount);\r\n    }    \r\n\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n\nimport \"./Context.sol\";\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./IBEP20.sol\";\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeBEP20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.6.0 \u003c0.8.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}\n"}}