/**
SPDX-License-Identifier: MIT
*/

pragma solidity ^0.8.0;

library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint8);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Auth {
    address internal owner;
    mapping (address => bool) internal authorizations;

    constructor(address _owner) {
        owner = _owner;
        authorizations[_owner] = true;
    }

    /**
     * Function modifier to require caller to be contract owner
     */
    modifier onlyOwner() {
        require(isOwner(msg.sender), "!OWNER"); _;
    }

    /**
     * Function modifier to require caller to be authorized
     */
    modifier authorized() {
        require(isAuthorized(msg.sender), "!AUTHORIZED"); _;
    }

    /**
     * Authorize address. Owner only
     */
    function authorize(address adr) public onlyOwner {
        authorizations[adr] = true;
    }

    /**
     * Remove address' authorization. Owner only
     */
    function unauthorize(address adr) public onlyOwner {
        authorizations[adr] = false;
    }

    /**
     * Check if address is owner
     */
    function isOwner(address account) public view returns (bool) {
        return account == owner;
    }

    /**
     * Return address' authorization status
     */
    function isAuthorized(address adr) public view returns (bool) {
        return authorizations[adr];
    }

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    function transferOwnership(address payable adr) public onlyOwner {
        owner = adr;
        authorizations[adr] = true;
        emit OwnershipTransferred(adr);
    }

    event OwnershipTransferred(address owner);
}

interface IDEXFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IDividendDistributor {
    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
    function setShare(address shareholder, uint256 amount) external;
    function deposit() external payable;
    function process(uint256 gas) external;
}

contract DividendDistributor is IDividendDistributor {
    using SafeMath for uint256;

    address _token;

    struct Share {
        uint256 amount;
        uint256 totalExcluded;
        uint256 totalRealised;
    }

    IBEP20 DIVIDEND_TOKEN;
    address WETH;
    address BUSD;
    IDEXRouter router;

    address[] shareholders;
    mapping (address => uint256) shareholderIndexes;
    mapping (address => uint256) shareholderClaims;

    mapping (address => Share) public shares;

    uint256 public totalShares;
    uint256 public totalDividends;
    uint256 public totalDistributed;
    uint256 public dividendsPerShare;
    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;

    uint256 public minPeriod = 1 hours;
    uint256 public minDistribution = 1;

    uint256 currentIndex;

    modifier onlyToken() {
        require(msg.sender == _token); _;
    }

 
    constructor (address _router, address _dividend, address _weth, address _busd) {
        router = IDEXRouter(_router);
        DIVIDEND_TOKEN = IBEP20(_dividend);
        WETH = _weth;
        BUSD = _busd;
        _token = msg.sender;
        minDistribution *= (10 ** DIVIDEND_TOKEN.decimals());
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {
        minPeriod = _minPeriod;
        minDistribution = _minDistribution;
    }

    function setShare(address shareholder, uint256 amount) external override onlyToken {
        if(shares[shareholder].amount > 0){
            distributeDividend(shareholder);
        }

        if (amount > 0 && shares[shareholder].amount == 0) {
            addShareholder(shareholder);
        } else if (amount == 0 && shares[shareholder].amount > 0) {
            removeShareholder(shareholder);
        }

        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
        shares[shareholder].amount = amount;
        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
    }

    function deposit() external payable override onlyToken {
        uint256 balanceBefore = DIVIDEND_TOKEN.balanceOf(address(this));

        address[] memory path = new address[](3);
        path[0] = WETH;
        path[1] = BUSD;
        path[2] = address(DIVIDEND_TOKEN);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amount = DIVIDEND_TOKEN.balanceOf(address(this)).sub(balanceBefore);

        totalDividends = totalDividends.add(amount);
        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
    }

    function process(uint256 gas) external override onlyToken {
        uint256 shareholderCount = shareholders.length;

        if(shareholderCount == 0) { return; }

        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();

        uint256 iterations = 0;

        while(gasUsed < gas && iterations < shareholderCount) {
            if(currentIndex >= shareholderCount){
                currentIndex = 0;
            }

            if(shouldDistribute(shareholders[currentIndex])){
                distributeDividend(shareholders[currentIndex]);
            }

            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }
    }

    function shouldDistribute(address shareholder) internal view returns (bool) {
        return shareholderClaims[shareholder] + minPeriod < block.timestamp
        && getUnpaidEarnings(shareholder) > minDistribution;
    }

    function distributeDividend(address shareholder) public {
        if(shares[shareholder].amount == 0){ return; }

        uint256 amount = getUnpaidEarnings(shareholder);
        if(amount > 0){
            totalDistributed = totalDistributed.add(amount);
            DIVIDEND_TOKEN.transfer(shareholder, amount);
            shareholderClaims[shareholder] = block.timestamp;
            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
        }
    }

    function claimDividend() external {
        distributeDividend(msg.sender);
    }

    function getUnpaidEarnings(address shareholder) public view returns (uint256) {
        if(shares[shareholder].amount == 0){ return 0; }

        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;

        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }

        return shareholderTotalDividends.sub(shareholderTotalExcluded);
    }

    function getCumulativeDividends(uint256 share) internal view returns (uint256) {
        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
    }

    function addShareholder(address shareholder) internal {
        shareholderIndexes[shareholder] = shareholders.length;
        shareholders.push(shareholder);
    }

    function removeShareholder(address shareholder) internal {
        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
        shareholders.pop();
    }
}

contract Emerald is IBEP20, Auth {
    using SafeMath for uint256;

    string constant _name    = "Emerald Protocol";
    string constant _symbol  = "EMRLD";
    uint8 constant _decimals = 9;

    //TOKENOMICS AND FEES
    uint256 _totalSupply = 50_000_000 * (10 ** _decimals);

    uint256 totalFee      = 12; // 12% Tax on all transactions
    uint256 reflectionFee = 8;  //  8% reflects DIVIDEND_TOKEN back to holders
    uint256 liquidityFee  = 2;  //  2% for automatically buying liquidity tokens
    uint256 marketingFee  = 2;  //  2% for Team and Marketing

    uint256 public maxTransactionSize = _totalSupply.div(181); // Maximum size of 0.55% supply in a single transaction
	uint256 public maxWalletBalance   = _totalSupply.div(100); // Maximum of 1% in any given wallet

    uint256 public swapThreshold = _totalSupply / 2000; // Once the collected liquidity fee amounts to 0.005% of supply, swap it for more LP

    address public DIVIDEND_TOKEN;
    address public WETH;
    address public BUSD;

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) public _allowances;

    mapping (address => bool) isFeeExempt;
    mapping (address => bool) isTxLimitExempt;
    mapping (address => bool) isDividendExempt;
    mapping (address => bool) isMaxWalletSizeExempt;

    address public autoLiquidityReceiver;
    address public marketingFeeReceiver;

    uint256 targetLiquidityPct = 25;
 
    IDEXRouter myRouter;
    IDEXRouter rewardRouter;
    address public myRouterAddress;
    address public rewardRouterAddress;
    address public pair;

    DividendDistributor distributor;
    address public distributorAddress;
    uint256 distributorGas = 500000;

    bool public swapEnabled = false;
    bool public feesEnabled = false;
    bool public maxPerTransactionEnabled = false;
    bool public maxPerWalletEnabled = false;
    bool public dividendsEnabled = false;

    bool inSwap = false;
    
    modifier swapping() { inSwap = true; _; inSwap = false; }

    constructor (address _myRouter, address _rewardRouter, address _teamWallet, address _dividend_token, address _busd) Auth(msg.sender) {
        DIVIDEND_TOKEN = _dividend_token;

        myRouter = IDEXRouter(_myRouter);
        rewardRouter = IDEXRouter(_rewardRouter);
        myRouterAddress = address(myRouter);
        rewardRouterAddress = address(rewardRouter);

        isTxLimitExempt[myRouterAddress] = true;
        isDividendExempt[myRouterAddress] = true;
        isMaxWalletSizeExempt[myRouterAddress] = true;
        approve(myRouterAddress, _totalSupply);
        _allowances[address(this)][myRouterAddress] = _totalSupply;

        isTxLimitExempt[rewardRouterAddress] = true;
        isDividendExempt[rewardRouterAddress] = true;
        isMaxWalletSizeExempt[rewardRouterAddress] = true;
        approve(rewardRouterAddress, _totalSupply);
        _allowances[address(this)][rewardRouterAddress] = _totalSupply;

        WETH = myRouter.WETH();
        BUSD = _busd;

        pair = IDEXFactory(myRouter.factory()).createPair(WETH, address(this));

        distributor = new DividendDistributor(rewardRouterAddress, DIVIDEND_TOKEN, WETH, BUSD);
        distributorAddress = address(distributor);

        isTxLimitExempt[pair] = true;
        isDividendExempt[pair] = true;
        isMaxWalletSizeExempt[pair] = true;
        approve(address(pair), _totalSupply);

        isDividendExempt[address(this)] = true;
        isMaxWalletSizeExempt[address(this)] = true;
        isTxLimitExempt[address(this)] = true;

        isDividendExempt[address(0)] = true;
        isMaxWalletSizeExempt[address(0)] = true;

        autoLiquidityReceiver = _teamWallet;
        marketingFeeReceiver = _teamWallet;
        isTxLimitExempt[_teamWallet] = true;
        isMaxWalletSizeExempt[_teamWallet] = true;

        _balances[msg.sender] = _totalSupply;
        isTxLimitExempt[msg.sender] = true;
        isMaxWalletSizeExempt[msg.sender] = true;
        isDividendExempt[msg.sender] = true;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    
    receive() external payable { }

    function totalSupply() external view override returns (uint256) { return _totalSupply; }
    function decimals() external pure override returns (uint8) { return _decimals; }
    function symbol() external pure override returns (string memory) { return _symbol; }
    function name() external pure override returns (string memory) { return _name; }
    function getOwner() external view override returns (address) { return owner; }
    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }

    function getRewardsBalance(address shareholder) external view returns (uint256) {
        return distributor.getUnpaidEarnings(shareholder);
    }

    function claimRewards() external {
        distributor.distributeDividend(msg.sender);
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function approveMax(address spender) external returns (bool) {
        return approve(spender, _totalSupply);
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        return _transferFrom(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        if(_allowances[sender][msg.sender] != _totalSupply){
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
        }

        return _transferFrom(sender, recipient, amount);
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        if (inSwap) { // do a basic transfer with no event, since this is part of a swap
            _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
            _balances[recipient] = _balances[recipient].add(amount);
            return true;
        }
		 
		// Max transaction size check
        if (maxPerTransactionEnabled && !isTxLimitExempt[sender]) {
            require (amount <= maxTransactionSize, "Max amount per transaction exceeded");
        }

        // Max amount per wallet check
		if (maxPerWalletEnabled && !isMaxWalletSizeExempt[recipient]) {
			require ((_balances[recipient] + amount) <= maxWalletBalance, "Max balance per wallet exceeded");
		}
		
        bool isSell = (recipient == pair || recipient == myRouterAddress);

        if (swapEnabled && !inSwap && isSell && msg.sender != pair && _balances[address(this)] >= swapThreshold) {
            //console.log('swapback');
            swapBack();
        }

        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

        uint256 amountReceived = amount;
        
        if (feesEnabled && !isFeeExempt[sender]) {
            uint256 feeAmount = amount.mul(totalFee).div(100);

            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);

            amountReceived = amount.sub(feeAmount);
        }
        
        _balances[recipient] = _balances[recipient].add(amountReceived);

        if (dividendsEnabled) {
            if (!isDividendExempt[sender]) { try distributor.setShare(sender, _balances[sender]) {} catch {} }
            if (!isDividendExempt[recipient]) { try distributor.setShare(recipient, _balances[recipient]) {} catch {} }

            try distributor.process(distributorGas) {} catch {}
        }

        emit Transfer(sender, recipient, amountReceived);
        return true;
    }
    
    function swapBack() internal swapping {
    
        uint256 circulating_supply = _totalSupply.sub(balanceOf(address(0)));
        uint256 total_liquidity_backing = balanceOf(pair).mul(200).div(circulating_supply);
        uint256 dynamicLiquidityFee = (total_liquidity_backing > targetLiquidityPct) ? 0 : liquidityFee;
        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);
        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);
        
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = WETH;
        uint256 balanceBefore = address(this).balance;

        myRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 amountETH = address(this).balance.sub(balanceBefore);

        uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));

        uint256 amountETHLiquidity = amountETH.mul(dynamicLiquidityFee).div(totalETHFee).div(2);
        uint256 amountETHReflection = amountETH.mul(reflectionFee).div(totalETHFee);
        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);

        try distributor.deposit{value: amountETHReflection}() {} catch {}
        payable(marketingFeeReceiver).transfer(amountETHMarketing);
            
        if(amountToLiquify > 0){
            myRouter.addLiquidityETH{value: amountETHLiquidity}(
                address(this),
                amountToLiquify,
                0,
                0,
                autoLiquidityReceiver,
                block.timestamp
            );
            emit AutoLiquify(amountETHLiquidity, amountToLiquify);
        }
    }

    function Sweep() external onlyOwner {
        uint256 balance = address(this).balance;
        payable(msg.sender).transfer(balance);
    }

    function setPresaleAddress(bool _enabled, address presale) external authorized {
        isFeeExempt[presale] = _enabled;
        isTxLimitExempt[presale] = _enabled;
        isMaxWalletSizeExempt[presale] = _enabled;
        isDividendExempt[presale] = _enabled;
    }

    function setIsDividendExempt(address holder, bool exempt) external authorized {
        require (holder != address(this) && holder != pair);
        isDividendExempt[holder] = exempt;
        if (exempt) {
            distributor.setShare(holder, 0);
        } else{
            distributor.setShare(holder, _balances[holder]);
        }
    }

    function setIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
    }

    function setIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
    }
    
    function setIsMaxWalletSizeExempt(address holder, bool exempt) external authorized {
        isMaxWalletSizeExempt[holder] = exempt;
    }

    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external authorized {
        isTxLimitExempt[autoLiquidityReceiver] = false;
        isMaxWalletSizeExempt[autoLiquidityReceiver] = false;
        isTxLimitExempt[marketingFeeReceiver] = false;
        isMaxWalletSizeExempt[marketingFeeReceiver] = false;
        autoLiquidityReceiver = _autoLiquidityReceiver;
        marketingFeeReceiver = _marketingFeeReceiver;
        isTxLimitExempt[autoLiquidityReceiver] = true;
        isMaxWalletSizeExempt[autoLiquidityReceiver] = true;
        isTxLimitExempt[marketingFeeReceiver] = true;
        isMaxWalletSizeExempt[marketingFeeReceiver] = true;
    }

    function setRouters(address _myRouter, address _rewardRouter) external authorized {
        myRouterAddress = _myRouter;
        rewardRouterAddress = _rewardRouter;

        isTxLimitExempt[myRouterAddress] = true;
        isDividendExempt[myRouterAddress] = true;
        isMaxWalletSizeExempt[myRouterAddress] = true;
        approve(myRouterAddress, _totalSupply);
        _allowances[address(this)][myRouterAddress] = _totalSupply;

        isTxLimitExempt[rewardRouterAddress] = true;
        isDividendExempt[rewardRouterAddress] = true;
        isMaxWalletSizeExempt[rewardRouterAddress] = true;
        approve(rewardRouterAddress, _totalSupply);
        _allowances[address(this)][rewardRouterAddress] = _totalSupply;
    }

    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {
        require (_amount > 0, "Swap threshold must be greater than 0");
        swapEnabled = _enabled;
        swapThreshold = _amount;
    }

    function setTargetLiquidityPct(uint256 _target) external authorized {
        require (_target < 99, "Target liquidity percentage can't be 100 or more");
        targetLiquidityPct = _target;
    }

    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {
        distributor.setDistributionCriteria(_minPeriod, _minDistribution);
    }

    function setDistributorSettings(uint256 gas) external authorized {
        require(gas < 750000);
        distributorGas = gas;
    }

    function launch(bool _enabled) external authorized {
        swapEnabled = _enabled;
        feesEnabled = _enabled;
        maxPerTransactionEnabled = _enabled;
        maxPerWalletEnabled = _enabled;
        dividendsEnabled = _enabled;
    }

    function setFeeOptions(bool _enabled, uint256 _reflectionFee, uint256 _liquidityFee, uint256 _marketingFee) external authorized {
        feesEnabled = _enabled;
        reflectionFee = _reflectionFee;
        liquidityFee = _liquidityFee;
        marketingFee = _marketingFee;
        totalFee = reflectionFee + liquidityFee + marketingFee;
        require(totalFee < 25, "Fees too high");
    }

    function setMaxPerTransactionEnabled(bool _enabled) external authorized {
        maxPerTransactionEnabled = _enabled;
    }

    function setMaxPerWalletEnabled(bool _enabled) external authorized {
        maxPerWalletEnabled = _enabled;
    }

    function setDividendsEnabled(bool _enabled) external authorized {
        dividendsEnabled = _enabled;
    }

    event AutoLiquify(uint256 amountETH, uint256 amountDIV);
}