
// File: contracts/unicake.sol
// SPDX-License-Identifier: MIT

/************************************************************************************************************************
*  
*  UniCAKE - Baked With Love
*  https://unicake.co
*  https://twitter.com/unicakeUCT
*  https://t.me/unicakeTokenUCT
*  
*  Tokenomics:
*   
*  Buy Tax: 12%
*  - Cake Rewards 10% ( 7% for all holders with a minimum of 150.000 UniCake Token and an extra 3% for Holders with diamond hands status)
*  - Liquidity Pool 1%
*  - Marketing & Dev 1%
* 
*  Sell Tax: 13%
*  - Cake Rewards 10% ( 7% for all holders with a minimum of 150.000 UniCake Token and an extra 3% for Holders with diamond hands status)
*  - Liquidity Pool 2%
*  - Marketing 1%
*  
*************************************************************************************************************************/
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./lib/DividendPayingToken.sol";
import "./lib/IterableMapping.sol";
import "./external/IUniswapV2Pair.sol";
import "./external/IUniswapV2Factory.sol";
import "./external/IUniswapV2Router.sol";

contract Wallet is Context, Ownable {
    using SafeERC20 for IERC20;
     
    receive() external payable {}
    
    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){
        require(_token != address(this), "Can't let you take all native token");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        _sent = IERC20(_token).transfer(_to, _contractBalance);
    }

    function withdraw(uint256 amount) public onlyOwner returns(bool _sent) {
        uint256 _contractBalance = IERC20(address(this)).balanceOf(address(this));
        require(_contractBalance > amount);
        _sent = IERC20(address(this)).transfer(owner(), amount);
    }
}

contract UniCAKE is Context, ERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    
    DiamondHandsPool public _dhPool;
    bool public isDHpoolActive = true;
    
    IUniswapV2Router02 public pancakeswapV2Router;
    address public pancakeswapV2Pair;
    
    UNICAKEDividendTracker public dividendTracker;
    
    uint256 internal _tokenTotal;
    
    address public _bakeryAddress = 0x000000000000000000000000000000000000dEaD;
    address private CAKE = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); // CAKE MAINNET: 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82
    
    uint256 public maxWalletAmount; // 1% - 1.000.000.000 Token maxWalletAmount
    uint256 public maxTxAmount; // 0.5% - 500.000.000 Max Transaction amount
    
    //Launch/trading variables
    bool public isTradingEnabled = false;
    bool private swapping;
    bool public isSwapEnabled = true;
    bool public swapAndLiquifyEnabled = true;
    bool public launchRestrictionEnabled = true;

    uint256 public _launchedAt;
    uint256 private _restrictionLift;
    uint256 private _restrictionGas;
    uint256 private _maxRestrictAmount;
    uint256 private _tradingPausedTimestamp;
    
    //locktime
    mapping(address => bool) private _lastTx;
    
    mapping(address => bool) private _isBlacklisted;
    mapping(address => bool) private _isWhitelisted;
    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) private _isExcludedFromTxLimit;
    mapping(address => bool) private _isExcludedFromMaxWallet;
    mapping(address => bool) public automatedMarketMakerPairs;
     
    // Tax Fees
    uint256 public CAKERewardsFee = 10;
    uint256 public liquidityFee = 2;
    uint256 public marketingFee = 1;
    uint256 public totalFees = CAKERewardsFee.add(liquidityFee).add(marketingFee);
    
    //Wallets
    address public _marketingWallet = address(0x0986a257c03Edd18c471AE1f5c65dB37B88Fdb54);
    address public _charityWallet   = address(0x6D0d26104e38435d63Fd2a92E1c614Bd6eB6Db71);
    address public _airdropWallet   = address(0xC2d08Eb2C7b87A42EeAc55097bE1e7f591FaeCaB);
    address public _vault; // The treasury Community vault

    // Token distribution percentages
    uint256 public _charityPercentage = 5;
    uint256 public _treasuryPercentage = 20;
    uint256 public _airdropPercentage = 14;
    uint256 public _marketingPercentage = 15;
    
    //Cake Reward Percentages
    uint256 public cakeRewardPerc = 7; // 7% of the cake rewards will be distributed to all holders with a minimum of 150.000 tokens
    uint256 public dhRewardPerc = 3; // 3% of the cake rewards will be distributed to Diamond hands holders.
    
    // the gas for processing auto-claims
    uint256 public gasForProcessing = 3000000;
    
    uint256 public swapTokensAtAmount = 2000000 * (10**18); // swap tokens @ 2.000.000 Tokens
    
    //DiamondHands settings
    struct dhlocker {
    address walletAddr;
    uint256 shares;
    uint256 totalTokens;
    uint256 tokensLocked;
    uint256 unlockedTokens;
    uint256 lockedAt;
    uint256 unLockAt;
    uint256 lastClaim;
    uint256 nextClaim;
    uint256 totalTokensSold;
    bool isLocked;
    bool deleted;
    }
    
    uint256 [] public _bonusLevel;
    uint256 [] public _bonusShares;
    uint256 public minLockDurationForBonus = 14;
    uint256 public claimWaitTime = 86400; // Diamond Holders can claim rewards every 24Hours
    uint256 public _dhMinDeposit = 1000000 * (10**18); // min 1.000.000 tokens need to deposit in to the Diamondhands pool
    uint256 private _maxDHShares = 10000000000; //Max DiamondHand Shares in pool
    mapping(address => dhlocker) public dhLockers; //diamondhands pool locker
    
    event excludedFromFees(address indexed account , bool value );
    event claimWaitTimeChanged(uint256 oldClaimTime, uint256 newClaimTime);
    event minDHDepositChanged(uint256 oldMinDeposit, uint256 newMinDeposit);
    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);
    event UpdatepPancakeswapV2Router(address indexed newAddress, address indexed oldAddress);
    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeFromRewards(address indexed account, bool isExcluded);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);
    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);
    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);
    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);
    event CakeAddressChanged(address indexed oldAddr, address indexed newAddr);
    event setPauseTrading(bool isPaused);
    event BonusLevelChanged(uint256 level1, uint256 level2 , uint256 level3);
    event BonusSharesChanged(uint256 bonus1, uint256 bonus2, uint256 bonus3);
    event ExcludeFromMaxTransfer(address account, bool excluded);
    event ExcludeFromMaxWallet(address account, bool excluded);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    event SwapAndLiquifyEnable(
        bool oldValue,
        bool newValue);
    event SendDividends(
    	uint256 tokensSwapped,
    	uint256 amount
    );
    event ProcessedDividendTracker(
    	uint256 iterations,
    	uint256 claims,
        uint256 lastProcessedIndex,
    	bool indexed automatic,
    	uint256 gas,
    	address indexed processor
    );
    event setFees(
        string feeType,
        uint256[5] _fees
        );
    event transferFees(
        address indexed to,
        uint256 amount
        );

    constructor() ERC20("UniCAKE","UCT") {
        
        dividendTracker = new UNICAKEDividendTracker();
         
         IUniswapV2Router02 _pancakeswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);//Mainnet Router
         
         //Create a pancakeswap pair for UniCAKE
         address _pancakeswapV2Pair = IUniswapV2Factory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());
         
         pancakeswapV2Router = _pancakeswapV2Router; 
         pancakeswapV2Pair = _pancakeswapV2Pair;
         
         _setAutomatedMarketMakerPair(_pancakeswapV2Pair,true);
         
         //initialize Wallets
         _vault = address(new Wallet());
         _dhPool = new DiamondHandsPool();
         
         //Exclude from receiving Dividends
         dividendTracker.excludeFromDividends(address(dividendTracker));
         dividendTracker.excludeFromDividends(address(this));
         dividendTracker.excludeFromDividends(owner());
         dividendTracker.excludeFromDividends(_bakeryAddress);
         dividendTracker.excludeFromDividends(address(pancakeswapV2Router));
         dividendTracker.excludeFromDividends(address(_dhPool));
       
        // exclude from paying fees or having max transaction amount
        setExcludedFromFees(owner(), true);
        setExcludedFromFees(address(this), true);
        
        //maxWalletAmount
        _isExcludedFromMaxWallet[pancakeswapV2Pair] = true;
        _isExcludedFromMaxWallet[address(pancakeswapV2Router)] = true;
        _isExcludedFromMaxWallet[address(this)] = true;
        _isExcludedFromMaxWallet[owner()] = true;
        
        //maxTx
        _isExcludedFromTxLimit[address(dividendTracker)] = true;
        _isExcludedFromTxLimit[address(this)] = true;
        
        setWhiteListedAccount(address(this),true);
        setWhiteListedAccount(owner(),true);
        setWhiteListedAccount(address(pancakeswapV2Router),true);
        setWhiteListedAccount(address(pancakeswapV2Pair),true);
         
         //setting the total supply
        _tokenTotal = 100000000000 * (10**18);
        
        maxWalletAmount = _tokenTotal;
        maxTxAmount = _tokenTotal;
        _maxRestrictAmount = maxTxAmount; 
         
        _mint(owner(), _tokenTotal.mul(46).div(100));
        _mint(address(_vault), _tokenTotal.mul(_treasuryPercentage).div(100));
        _mint(address(_airdropWallet),_tokenTotal.mul(_airdropPercentage).div(100));
        _mint(_marketingWallet,_tokenTotal.mul(_marketingPercentage).div(100));
        _mint(_charityWallet,_tokenTotal.mul(_charityPercentage).div(100));
    }
    
    receive() external payable {
        
    }
    
    function launch(uint256 duration,uint256 _gas) public onlyOwner {
        require(!isTradingEnabled,"UniCAKE: Already launched....");
        _launchedAt = block.timestamp;
        _restrictionLift = block.timestamp.add(duration * 60 seconds);
        _restrictionGas = _gas;
        
        //whitelist
        setWhiteListedAccount(_marketingWallet,true);
        setWhiteListedAccount(_bakeryAddress,true);
        setWhiteListedAccount(address(_dhPool),true);
        
        setExcludedFromFees(_marketingWallet,true);
        setExcludedFromFees(_bakeryAddress, true);
        setExcludedFromFees(address(_dhPool),true);
        
          // set BonusLevels
        _bonusLevel.push(10);
        _bonusLevel.push(100);
        _bonusLevel.push(1000);
        
        //Set bonusShares for bonus levels
         _bonusShares.push(1);
         _bonusShares.push(10);
         _bonusShares.push(100);
         
         maxWalletAmount = _tokenTotal.mul(1).div(100);
        maxTxAmount = _tokenTotal.mul(5).div(1000);
        _maxRestrictAmount = maxTxAmount.mul(10).div(100);
         
        isTradingEnabled = true;
    }
    
    function whitelistPresale(address account,bool value) external onlyOwner {
        setWhiteListedAccount(account,value);
        setExcludedFromFees(account,value);
        _isExcludedFromTxLimit[account] = value;
        _isExcludedFromMaxWallet[account] = value;
    }
    
    //Launch restriction after launch
    function enableLaunchRestriction(bool value) public onlyOwner {
        require(launchRestrictionEnabled != value,"Unicake: Value already set.");
        launchRestrictionEnabled = value;
    }

    /*===============================
     EXTENDED BEP20 Extended functions
    =================================*/
    
    function _transfer(
    address from,
    address to,
    uint256 amount
    ) internal virtual override{
    require(from != address(0), "UniCAKE: transfer from the zero address");
    require(to != address(0),"UniCAKE: transfer from the zero address");
    
    if(amount == 0){
        super._transfer(from, to, 0);
        return;
    }
    
    // Restriction after Pre-sale ( avoid large dumps )
    if(launchRestrictionEnabled){
        launchRestrict(from,to,amount);
    }
    //In someway check if its a buy or sell order and check if the contractBalance is higher or equal to swapTokensAtAmount
    uint256 transferAmount = amount;
    uint256 contractTokenBalance = balanceOf(address(this));
    
    //bool isBuyFromLP = automatedMarketMakerPairs[from];
    bool isSelltoLP  = automatedMarketMakerPairs[to];
    bool isBuyFromLP = automatedMarketMakerPairs[from];
    
    bool canSwap = contractTokenBalance >= swapTokensAtAmount;
    
    //3. if condition block to only run certain function when the contract isn't already swapping
    if(from != owner() && to != owner()){
     require(_isWhitelisted[from] && _isWhitelisted[to] || isTradingEnabled,"UniCAKE: Trading is currently disabled.");
     require(!_isBlacklisted[from] && !_isBlacklisted[to],"UniCAKE: blacklisted.");
     
     //Check the maxTxLimit
    if(!_isExcludedFromTxLimit[to] && !_isExcludedFromTxLimit[from]){
    require(amount <= maxTxAmount,"UniCAKE: Amount exceeds the maxTx amount");
    }
    //Check Max Wallet
    if(!_isExcludedFromMaxWallet[to]){
    require(balanceOf(to).add(amount) <= maxWalletAmount,"UniCAKE: Recipient Wallet exceeds the max wallet amount");
    }  
        
    if(isSwapEnabled && canSwap &&
    !swapping &&
    !automatedMarketMakerPairs[from] && 
    !_isExcludedFromFees[from] &&
    !_isExcludedFromFees[to]) {
    
    swapping = true;

    uint256 FeeForMarketing = contractTokenBalance.mul(marketingFee).div(totalFees);
     
    //Swap and send cake to marketing wallet
    swapAndSendToFee(_marketingWallet,FeeForMarketing);
    
    if(swapAndLiquifyEnabled){
     //We add liquidity
    uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);
    swapAndLiquify(swapTokens);
    }

    // Dividends for our holders
    uint256 dividendTokens = contractTokenBalance.mul(cakeRewardPerc).div(totalFees);
    swapAndSendDividends(dividendTokens);
    
    if(isDHpoolActive){
    // dividends For DiamondHands holders
    uint256 dividendForDH = balanceOf(address(this));
    swapAndSendDHDividends(dividendForDH); 
   
    swapping = false;   
    }
    }
  }
    bool takeFee = !swapping;
    
    //Check if to or from isn't excluded from fee
    if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){
     takeFee = false;
    }
    
    //if takeFree is true than collect the fee and substract it from the order transferAmount
    if(takeFee){
        uint256 fees = amount.mul(totalFees).div(100);
        if(isSelltoLP){
            fees = fees.add(amount.mul(1).div(100));
        }
        
        transferAmount = amount.sub(fees);
        
        super._transfer(from, address(this), fees);
    }
    
    dhlocker storage locker = dhLockers[from];
    
    if(locker.isLocked){
        if(isSelltoLP){
            // if this is a sell order we need to check if the amount not exceeds the to Freely transable token amount
            require(transferAmount <= locker.unlockedTokens,"UniCAKE: The amount you try to transfer exceeds your unlocked tokens.");
            locker.unlockedTokens = locker.unlockedTokens.sub(transferAmount);
        }else if(isBuyFromLP){
            locker.unlockedTokens = locker.unlockedTokens.add(transferAmount);
        }
    
        trackDHSell(from,transferAmount,isBuyFromLP,isSelltoLP);
    }
    
    //Send the tokens to the receiver
    super._transfer(from, to, transferAmount);

    try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}
    try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}

        //check if swapping is not true and than process and send the dividends
        if(!swapping) {
	    	uint256 gas = gasForProcessing;

	    	try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {
	    		emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);
	    	}
	    	catch {

	    	}
        }
    }
    
    function swapAndSendToFee(address _wallet,uint256 tokens) private {
        
        uint256 initialCAKEBalance = IERC20(CAKE).balanceOf(address(this));
        
        swapTokensForCake(tokens);
        uint256 newBalance = (IERC20(CAKE).balanceOf(address(this))).sub(initialCAKEBalance);
        IERC20(CAKE).transfer(_wallet,newBalance);
    }
    
    function swapAndLiquify(uint256 tokens) private {
        // split the tokens in halves
        uint256 half = tokens.div(2);
        uint256 otherHalf = tokens.sub(half);
        
        // check initial BNB balance before swap;
        uint256 initialBalance = address(this).balance;
        
        //swap token for BNB
        swapTokensForBNB(half);
        
        //Check how much bnb we got from the swap;
        uint256 newBalance = address(this).balance.sub(initialBalance);
        
        // add liquidity to pancakeSwap here.
        addLiquidity(otherHalf, newBalance);
        
       emit SwapAndLiquify(half, newBalance,otherHalf);
        
    }
    
    /*Swap tokens for cake and send to dividendTracker*/
    function swapAndSendDividends(uint256 tokens) private {
        swapTokensForCake(tokens);
        uint256 dividends = IERC20(CAKE).balanceOf(address(this));
        bool success = IERC20(CAKE).transfer(address(dividendTracker),dividends);
        
        if(success){
        dividendTracker.distributeCAKEDividends(dividends);
        emit SendDividends(tokens, dividends);
        }
    }
    
    /* Swap Tokens for cake and send to DHPool */
    function swapAndSendDHDividends(uint256 tokens) private {
        swapTokensForCake(tokens);
        uint256 dividends = IERC20(CAKE).balanceOf(address(this));
        bool success = IERC20(CAKE).transfer(address(_dhPool),dividends);
        if(success){
          emit SendDividends(tokens, dividends);
        }
    }
    
 /*====================
  * Setter Functions
  * add emit event to some functions
  =============*/
  function updateDividendTracker(address newAddress) public onlyOwner {
        require(newAddress != address(dividendTracker), "UNICAKE: The dividend tracker already has that address");

        UNICAKEDividendTracker newDividendTracker = UNICAKEDividendTracker(payable(newAddress));

        require(newDividendTracker.owner() == address(this), "UNICAKE: The new dividend tracker must be owned by the UniCAKE token contract");
        
        newDividendTracker.excludeFromDividends(address(dividendTracker));
        newDividendTracker.excludeFromDividends(address(this));
        newDividendTracker.excludeFromDividends(owner());
        newDividendTracker.excludeFromDividends(_bakeryAddress);
        newDividendTracker.excludeFromDividends(address(pancakeswapV2Router));
        newDividendTracker.excludeFromDividends(address(_dhPool));
        
        emit UpdateDividendTracker(newAddress, address(dividendTracker));

        dividendTracker = newDividendTracker;
    }
    
    function setMaxWallet(uint256 perc, uint256 div) external onlyOwner {
      maxWalletAmount = _tokenTotal.mul(perc).div(div);
    }
  
    function setMaxTX(uint256 perc, uint256 div) external onlyOwner {
      maxTxAmount = _tokenTotal.mul(perc).div(div);
    }

    function setExcludedFromFees(address account,bool value) public onlyOwner {
    _isExcludedFromFees[account] = value;
    
    emit excludedFromFees(account,value);
    }
    
    function setRestrictGas(uint256 amount) public onlyOwner {
    _restrictionGas = amount;
    }
      
      // Pause trading in case of emergency
      function deactivateTrading() public onlyOwner {
          isTradingEnabled = false;
          _tradingPausedTimestamp = block.timestamp;
      }
      
      function activateTrading() public onlyOwner {
         isTradingEnabled = true;
      }
      
    function setSwapTokenAtAmount(uint256 amount) public onlyOwner {
    swapTokensAtAmount = amount;
    }
    
    function setDHPoolActive(bool value) public onlyOwner {
     isDHpoolActive = value;
    }
    
    function setSwapAndLiquifyEnabled(bool value) public onlyOwner {
    require(swapAndLiquifyEnabled != value,"UniCAKE: swapAndLiquifyEnabled already set to the value of 'value'");
    bool oldVal = swapAndLiquifyEnabled;
    swapAndLiquifyEnabled = value;
    emit SwapAndLiquifyEnable(oldVal,value);
    }
    
    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {
        for(uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFees[accounts[i]] = excluded;
        }

        emit ExcludeMultipleAccountsFromFees(accounts, excluded);
    }
    
    function excludeAccountFromMaxWallet(address account,bool excluded) public onlyOwner{
        require(_isExcludedFromMaxWallet[account] != excluded,"UniCAKE: Account is already the value of 'excluded'");
        _isExcludedFromMaxWallet[account] = excluded;
        emit ExcludeFromMaxWallet(account,excluded);
    }
    
    function excludeAccountFromMaxTx(address account,bool excluded) public onlyOwner {
         require(_isExcludedFromTxLimit[account] != excluded,"UniCAKE: Account is already the value of 'excluded'");
        _isExcludedFromTxLimit[account] = excluded;
        emit ExcludeFromMaxTransfer(account,excluded);
    }
  
  function setGasForProcessing(uint256 newValue) public onlyOwner() {
    require(newValue >= 200000 && newValue <= 500000, "UniCAKE: gasForProcessing must be between 200,000 and 500,000");
    require(newValue != gasForProcessing, "UniCAKE: Cannot update gasForProcessing to same value");
    emit GasForProcessingUpdated(newValue, gasForProcessing);
    gasForProcessing = newValue;
  }
 
  function setMarketingWallet(address account) public onlyOwner() {
   require(_marketingWallet != account, "UniCAKE: wallet can't be the same as the previous wallet.");
   _marketingWallet = address(account);
  _isExcludedFromFees[account] = true;
  _isWhitelisted[account] = true;
  }
  
    function setVaultWallet(address account) public onlyOwner() {
    require(_vault != account, "UniCAKE: wallet can't be the same as the previous wallet.");
    _vault = address(account);
    _isExcludedFromFees[account] = true;
    _isWhitelisted[account] = true;
    }
    
     function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {
        require(pair != pancakeswapV2Pair, "UniCAKE: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs");

        _setAutomatedMarketMakerPair(pair, value);
    }
 
   function _setAutomatedMarketMakerPair(address pair, bool value) private {
        require(automatedMarketMakerPairs[pair] != value, "UniCAKE: Automated market maker pair is already set to that value");
        automatedMarketMakerPairs[pair] = value;

        if(value) {
            dividendTracker.excludeFromDividends(pair);
        }

        emit SetAutomatedMarketMakerPair(pair, value);
    }
    
 function setWhiteListedAccount(address account,bool value) public onlyOwner(){
     require(_isWhitelisted[account] != value, "Value already set."); 
     _isWhitelisted[account] = value;
 }

 function setSwapEnabled(bool value) external onlyOwner {
    require(isSwapEnabled != value, "Value alread set");
    isSwapEnabled = value;
 }
 
 function updateUniswapV2Router(address newAddress) public onlyOwner {
    require(newAddress != address(pancakeswapV2Router), "UniCAKE: The router already has that address");
    emit UpdatepPancakeswapV2Router(newAddress, address(pancakeswapV2Router));
    pancakeswapV2Router = IUniswapV2Router02(newAddress);
    address _pancakeswapV2Pair = IUniswapV2Factory(pancakeswapV2Router.factory())
        .createPair(address(this), pancakeswapV2Router.WETH());
    pancakeswapV2Pair = _pancakeswapV2Pair;
    dividendTracker.excludeFromDividends(address(pancakeswapV2Router));
}
    
    /*===============================
     DiamondHands system functions
    =================================*/
    
    function claimDHRewards() public returns(uint256){
        dhlocker storage locker = dhLockers[msg.sender];
        //1. check if claimer is a diamondhand
       require(locker.isLocked,"UniCAKE: Only diamondhands can claim this reward.");
       //2. check if lastClaim is greater than or equal to 24hours
       require(locker.nextClaim > 0 && locker.nextClaim <= block.timestamp,"Rewards can't be claimed yet.");
       //3. Withdraw share of the pool
       _dhPool.withDrawDividend(payable(msg.sender));
       
       //reset diamondHand total token balance
       locker.totalTokens = balanceOf(address(msg.sender));
        
       // Reset last claim and next claim
       locker.lastClaim = block.timestamp;
       locker.nextClaim = block.timestamp.add(claimWaitTime);
       
       return locker.nextClaim; // return the next claim date
    }
    
    
    // Locks tokens from transfer and add holder to diamondHand pool
    function LockUpTokens(uint256 shares,uint256 locktime) public {
        dhlocker storage locker = dhLockers[msg.sender];
        require(!locker.isLocked,"UniCAKE: Tokens already locked..");
        require(balanceOf(address(msg.sender)) >= _dhMinDeposit * shares,"UniCAKE: You don't have enough tokens, try less shares.");
        require(!locker.deleted,"UniCAKE: Can't rejoin the diamondhand pool");
        require(locktime >= 7, "UniCAKE: You need to lock your tokens for atleast 7 days minimum");
       
        //Check the amount of tokens you need to buy shares
        uint256 amountOfTokens = _dhMinDeposit * shares;
        uint256 amountOfShares = amountOfTokens / _dhMinDeposit;
        
        //set holder wallet address
        locker.walletAddr = address(msg.sender);
        
        //set Total tokens held by account
        locker.totalTokens = balanceOf(address(msg.sender));
        
        //set initialy locked tokens;
        locker.tokensLocked = amountOfTokens;
        
        //set the amount that is spendable
        locker.unlockedTokens = locker.totalTokens.sub(amountOfTokens);
        
        // set when the tokens where locked
        locker.lockedAt = block.timestamp;
        
        // set when it's possible to unlock the tokens
        locker.unLockAt = block.timestamp.add(locktime * 1 days);
        
        //Set to zero never claimed before
        locker.lastClaim = 0;
        
        //Set to whatever the claimWaitTime value is at this time *24hours
        locker.nextClaim = block.timestamp.add(claimWaitTime);
        
        //Set totalTokensSold for the first time to zero, no tokens sold yet
        locker.totalTokensSold = 0;
        
        //Set isLocked to true
        locker.isLocked = true;
        
        //Set to false, this check if holder is still a diamondhand holder
        locker.deleted = false;
        
        uint256 newShares = amountOfShares;
        
        if(locktime >= minLockDurationForBonus){
            if(shares >= _bonusLevel[0]){
                newShares = amountOfShares.add(_bonusShares[0]);
            }
            
            if(shares >= _bonusLevel[1]) {
               newShares = amountOfShares.add(_bonusShares[1]); 
            }
            
            if(shares >= _bonusLevel[2]){
                newShares = amountOfShares.add(_bonusShares[2]);
            }
        }
        
        locker.shares = newShares;
        
        //Add holder to the DiamondHand Pool
        _dhPool._addDiamondHand(msg.sender, newShares);
    }
    
    // Unlocks tokens and remove holder from DiamondHand Pool
    function unlockTokens() public {
        dhlocker storage locker = dhLockers[msg.sender];
        require(locker.isLocked,"UniCAKE: Tokens are already unlocked..");
        require(locker.unLockAt <= block.timestamp,"UniCAKE: You can't unlock your tokens");
        
        //Calculate shares
        locker.shares = 0;
        
        //How much tokens holds holders in total
        locker.totalTokens = 0;
        
        // how much tokens holder initialy locked
        locker.tokensLocked = 0;
        
        locker.unlockedTokens = 0;
        
        locker.nextClaim = 0;
    
        locker.isLocked = false;
        
        locker.deleted = true;
        
        _dhPool._removeDiamondHand(msg.sender);
    }
    
    //Check how long you have to wait for your next claim
    function getNextClaimTime() public view returns(uint256){
        dhlocker storage locker = dhLockers[msg.sender];
        return locker.nextClaim;
    }
    
    //set BonusLevels
    function setBonusLevels(uint256 level1,uint256 level2, uint256 level3) public onlyOwner(){
        _bonusLevel[0] = level1;
        _bonusLevel[1] = level2;
        _bonusLevel[2] = level3;
        emit BonusLevelChanged(level1,level2,level3);
    }

    //set bonusShares
    function setBonusShares(uint256 bonus1,uint256 bonus2, uint256 bonus3) public onlyOwner(){
        _bonusShares[0] = bonus1;
        _bonusShares[1] = bonus2;
        _bonusShares[2] = bonus3;
        emit BonusSharesChanged(bonus1,bonus2,bonus3);
    }
    
    //set minLockDurationForBonus default 14 days
    function setMinLockDurationForBonus(uint256 duration) public onlyOwner() {
        require(minLockDurationForBonus != duration,"Duration already set");
        minLockDurationForBonus = duration;    
    }
    
    //Set the ClaimWaitTime Seconds
    function setClaimWaitTime(uint256 sec) public onlyOwner(){
        uint256 oldClaimTime = claimWaitTime;
        claimWaitTime = sec;
        emit claimWaitTimeChanged(oldClaimTime,claimWaitTime);
    }
    
    // Get your pool share
    function getShares() public view returns(uint256){
        return _dhPool.shares(msg.sender);
    }
    
    //Check the pool's Cake balance
    function getDHPoolBalance() public view returns(uint256) {
        return _dhPool.getTokenBalance();
    }
    
    //Set pool's Cake address
    function setCakeAddr(address newCakeAddr) public onlyOwner(){
        address oldCake = CAKE;
        CAKE = address(newCakeAddr); //change CAKE address in this contract
        
        _dhPool.setCakeAddress(newCakeAddr); // change Cake address in dhpool
        dividendTracker.setCakeAddress(newCakeAddr); //change Cake address in Dividend tracker
        
        emit CakeAddressChanged(oldCake,newCakeAddr);
    }
    
    // Set min deposit DiamondHand Pool
    function setMinDHDeposit(uint256 amount) public onlyOwner() {
        uint256 oldMinDeposit = _dhMinDeposit;
        _dhMinDeposit = amount;
        emit minDHDepositChanged(oldMinDeposit,amount * (10**18));
    }
    
    //We track our diamondhand sells if a diamondhand sells more than he locked he will be remove from the pool the remaining tokens in the pool stays locked for the remaining time
    function trackDHSell(address account,uint256 amount,bool buy, bool sell) internal {
        dhlocker storage locker = dhLockers[account];
        
        if(!sell && !buy || sell){
        locker.totalTokensSold = locker.totalTokensSold.add(amount);
        
        //Check if holder sold more than the tokens he initialy locked if true than set shares to 0
        if(locker.totalTokensSold > locker.tokensLocked) { 
          locker.shares = 0;
          locker.nextClaim = 0;
          locker.deleted = true;
          locker.totalTokens = balanceOf(address(this));
          
          // remove diamond holder from the pool
          _dhPool._removeDiamondHand(msg.sender);
        }
        
      }
    }
    
    /*===============================
     PancakeSwap functions
    =================================*/
      function swapTokensForBNB(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pancakeswapV2Router.WETH();

        _approve(address(this), address(pancakeswapV2Router), tokenAmount);

        // make the swap
        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
      }
    
      function swapTokensForCake(uint256 tokenAmount) private {
        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = pancakeswapV2Router.WETH();
        path[2] = CAKE;

        _approve(address(this),address(pancakeswapV2Router), tokenAmount);

        // make the swap
        pancakeswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
      }
  
      function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {
    
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(pancakeswapV2Router), tokenAmount);

        // add the liquidity
        pancakeswapV2Router.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(this),
            block.timestamp
        );

      }
    
    // Restriction after pre-sale launch
    function launchRestrict(address from, address to, uint256 amount) internal {
     if(isTradingEnabled && _launchedAt <= block.timestamp && _restrictionLift > block.timestamp) {
           require(amount <= _maxRestrictAmount,"UniCAKE: transfer amount is above limit");
           require(tx.gasprice <= _restrictionGas,"UniCAKE: gas price above limit"); 
           
         if (!_isWhitelisted[from] && !_isWhitelisted[to]) {
                require(!_lastTx[from] && !_lastTx[to], "UniCAKE: only one tx in restricted time");
                _lastTx[from] = true;
                _lastTx[to] = true;
            } else if (!_isWhitelisted[to]){
                require(!_lastTx[to], "UniCAKE: only one tx in restricted time");
                _lastTx[to] = true;
            } else if (!_isWhitelisted[from]) {
                require(!_lastTx[from], "UniCAKE: only one tx in restricted time");
                _lastTx[from] = true;
            }
        
        if(from == pancakeswapV2Pair){
            require(_isWhitelisted[to] || !Address.isContract(to),"UniCAKE: recipient can't be a contract");
        }
    } else if(!isTradingEnabled && _launchedAt == 0) {
        require(_isWhitelisted[from] && _isWhitelisted[to],"UniCAKE: We are not launched yet.");
    }
   }
    /*===============================
     Reward System functions
    =================================*/
    
    function updateGasForProcessing(uint256 newValue) public onlyOwner {
        require(newValue >= 200000 && newValue <= 500000, "UniCAKE: gasForProcessing must be between 200,000 and 500,000");
        require(newValue != gasForProcessing, "UniCAKE: Cannot update gasForProcessing to same value");
        emit GasForProcessingUpdated(newValue, gasForProcessing);
        gasForProcessing = newValue;
    }

    function updateClaimWait(uint256 claimWait) external onlyOwner {
        dividendTracker.updateClaimWait(claimWait);
    }

    function getClaimWait() external view returns(uint256) {
        return dividendTracker.claimWait();
    }

    function getTotalDividendsDistributed() external view returns (uint256) {
        return dividendTracker.totalDividendsDistributed();
    }

    function isExcludedFromFees(address account) public view returns(bool) {
        return _isExcludedFromFees[account];
    }

    function withdrawableDividendOf(address account) public view returns(uint256) {
    	return dividendTracker.withdrawableDividendOf(account);
  	}

	function dividendTokenBalanceOf(address account) public view returns (uint256) {
		return dividendTracker.balanceOf(account);
	}

	function excludeFromDividends(address account) external onlyOwner{
	    dividendTracker.excludeFromDividends(account);
	}

    function getAccountDividendsInfo(address account)
        external view returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256) {
        return dividendTracker.getAccount(account);
    }

	function getAccountDividendsInfoAtIndex(uint256 index)
        external view returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256) {
    	return dividendTracker.getAccountAtIndex(index);
    }

	function processDividendTracker(uint256 gas) external {
		(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);
		emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);
    }

    function claim() external {
		dividendTracker.processAccount(payable(msg.sender), false);
    }

    function getLastProcessedIndex() external view returns(uint256) {
    	return dividendTracker.getLastProcessedIndex();
    }

    function getNumberOfDividendTokenHolders() external view returns(uint256) {
        return dividendTracker.getNumberOfTokenHolders();
    }
    
    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){
        require(_token != address(this), "Can't let you take all native token");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        _sent = IERC20(_token).transfer(_to, _contractBalance);
    }

}

contract DiamondHandsPool is Context,Ownable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    address public CAKE = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); //CAKE Mainnet: 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82
    
    event diamondHandAdded(address account, uint256 shares);
    event diamondHandRemoved(address account, uint256 shares);
    event RewardClaimed(address to, uint256 amount);
    event DividendReceived(address from, uint256 amount);
    event setMaxSharesPerHolder(uint256 oldMax, uint256 newMax);
    event totalSharesChanged(uint256 oldShares, uint256 newShares);
    
    uint256 private _maxSharesPerHolder = 1000; //max 1000 shares per holder;
    uint256 private _totalShares = 10000000000; // 10 billion max shares total;
    uint256 public _outstandingShares; // Total shares held by holders
    uint256 private _totalReleased;
    uint256 public _outstandingpayment;
    
    mapping(address => uint256) private _shares;
    mapping(address => uint256) private _released;
    address[] private _diamondHands;
    
    uint256 diamondHolderCount;
    
    constructor() {}    
    
    receive() external payable virtual {}
    
    function totalShares() public view returns (uint256){
        return _totalShares;
    }
    
    function totalReleased() public view returns (uint256){
        return _totalReleased;
    }
    
    function shares(address account) external view returns (uint256){
        return _shares[account];
    }
    
    function released(address account) public view returns (uint256){
        return _released[account];
    }
    
    function diamondhand(uint256 index) public view returns (address) {
        return _diamondHands[index];
    }
    
    
    function setCakeAddress(address _cake) external onlyOwner() {
        CAKE = address(_cake);
    }
    
    function getTokenBalance() external view returns(uint256){
        return IERC20(CAKE).balanceOf(address(this));
    }
    
    function withDrawDividend(address account) public virtual {
        require(_shares[account] > 0, "DiamondHand Pool: account has no shares");
        
        uint256 totalReceived = IERC20(CAKE).balanceOf(address(this)) + _totalReleased;
        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];
       
        require(payment != 0, "DiamondHandPool: account is not due payment");
        
        _released[account] = _released[account] + payment;
        _totalReleased = _totalReleased + payment;
        
        IERC20(CAKE).safeTransfer(account,payment);
        
        emit RewardClaimed(account, payment);
    }
    
    function _addDiamondHand(address account, uint256 shares_) external onlyOwner() {
        require(account != address(0), "DiamondHandPool: account is the zero address");
        require(shares_ > 0, "DiamondHandPool: shares are 0");
        require(_shares[account] == 0, "DiamondHandPool: account already has shares");
        require(_outstandingShares.add(shares_) <= _totalShares,"DiamondHand Pool: No more shares available");
        
        _diamondHands.push(account);
        diamondHolderCount = diamondHolderCount.add(1);
        _shares[account] = shares_;
        _outstandingShares = _outstandingShares.add(shares_);
        emit diamondHandAdded(account, shares_);
    }
    
    function _removeDiamondHand(address account) external onlyOwner() {
        uint256 rShares = _shares[account];
        _shares[account] = 0;
        _totalShares = _totalShares.sub(rShares);
        _outstandingShares = _outstandingShares.sub(rShares);
        diamondHolderCount = diamondHolderCount.sub(1);
        emit diamondHandRemoved(account, rShares);
    } 
    
    function _setTotalShares(uint256 amount) external onlyOwner() {
        uint256 oldShares = _totalShares;
        _totalShares = amount;
        emit totalSharesChanged(oldShares,amount);
    }
    
    function _setMaxSharesPerHolder(uint256 maxShares) external onlyOwner() {
        uint256 oldMax = _maxSharesPerHolder;
        
        _maxSharesPerHolder = maxShares;
        
        emit setMaxSharesPerHolder(oldMax,maxShares);
    }
    
}

   /*===============================
     UniCAKE DividendTracker
    =================================*/
 contract UNICAKEDividendTracker is Ownable, DividendPayingToken {
    using SafeMath for uint256;
    using SafeMathInt for int256;
    using IterableMapping for IterableMapping.Map;

    IterableMapping.Map private tokenHoldersMap;
    uint256 public lastProcessedIndex;

    mapping (address => bool) public excludedFromDividends;

    mapping (address => uint256) public lastClaimTimes;

    uint256 public claimWait;
    uint256 public immutable minimumTokenBalanceForDividends;

    event ExcludeFromDividends(address indexed account);
    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);

    event Claim(address indexed account, uint256 amount, bool indexed automatic);

    constructor() DividendPayingToken("UNICAKE_Dividen_Tracker", "UNICAKE_Dividend_Tracker") {
    	claimWait = 3600;
        minimumTokenBalanceForDividends = 150000 * (10**18); //must hold 150.000+ tokens
    }

    function _transfer(address, address, uint256) internal override pure {
        require(false, "UNICAKE_Dividend_Tracker: No transfers allowed");
    }

    function withdrawDividend() public override pure {
        require(false, "UNICAKE_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main UNICAKE contract.");
    }

    function excludeFromDividends(address account) external onlyOwner {
    	require(!excludedFromDividends[account],"Account already excluded from dividends");
    	excludedFromDividends[account] = true;

    	_setBalance(account, 0);
    	tokenHoldersMap.remove(account);

    	emit ExcludeFromDividends(account);
    }
    
    function setCakeAddr(address newCakeAddr) external onlyOwner {
        setCakeAddress(newCakeAddr);
    }

    function updateClaimWait(uint256 newClaimWait) external onlyOwner {
        require(newClaimWait >= 3600 && newClaimWait <= 86400, "UNICAKE_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours");
        require(newClaimWait != claimWait, "UNICAKE_Dividend_Tracker: Cannot update claimWait to same value");
        emit ClaimWaitUpdated(newClaimWait, claimWait);
        claimWait = newClaimWait;
    }

    function getLastProcessedIndex() external view returns(uint256) {
    	return lastProcessedIndex;
    }

    function getNumberOfTokenHolders() external view returns(uint256) {
        return tokenHoldersMap.keys.length;
    }



    function getAccount(address _account)
        public view returns (
            address account,
            int256 index,
            int256 iterationsUntilProcessed,
            uint256 withdrawableDividends,
            uint256 totalDividends,
            uint256 lastClaimTime,
            uint256 nextClaimTime,
            uint256 secondsUntilAutoClaimAvailable) {
        account = _account;

        index = tokenHoldersMap.getIndexOfKey(account);

        iterationsUntilProcessed = -1;

        if(index >= 0) {
            if(uint256(index) > lastProcessedIndex) {
                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));
            }
            else {
                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?
                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :
                                                        0;


                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));
            }
        }


        withdrawableDividends = withdrawableDividendOf(account);
        totalDividends = accumulativeDividendOf(account);

        lastClaimTime = lastClaimTimes[account];

        nextClaimTime = lastClaimTime > 0 ?
                                    lastClaimTime.add(claimWait) :
                                    0;

        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?
                                                    nextClaimTime.sub(block.timestamp) :
                                                    0;
    }

    function getAccountAtIndex(uint256 index)
        public view returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256) {
    	if(index >= tokenHoldersMap.size()) {
            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);
        }

        address account = tokenHoldersMap.getKeyAtIndex(index);

        return getAccount(account);
    }

    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {
    	if(lastClaimTime > block.timestamp)  {
    		return false;
    	}

    	return block.timestamp.sub(lastClaimTime) >= claimWait;
    }

    function setBalance(address payable account, uint256 newBalance) external onlyOwner {
    	if(excludedFromDividends[account]) {
    		return;
    	}

    	if(newBalance >= minimumTokenBalanceForDividends) {
            _setBalance(account, newBalance);
    		tokenHoldersMap.set(account, newBalance);
    	}
    	else {
            _setBalance(account, 0);
    		tokenHoldersMap.remove(account);
    	}

    	processAccount(account, true);
    }

    function process(uint256 gas) public returns (uint256, uint256, uint256) {
    	uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;

    	if(numberOfTokenHolders == 0) {
    		return (0, 0, lastProcessedIndex);
    	}

    	uint256 _lastProcessedIndex = lastProcessedIndex;

    	uint256 gasUsed = 0;

    	uint256 gasLeft = gasleft();

    	uint256 iterations = 0;
    	uint256 claims = 0;

    	while(gasUsed < gas && iterations < numberOfTokenHolders) {
    		_lastProcessedIndex++;

    		if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {
    			_lastProcessedIndex = 0;
    		}

    		address account = tokenHoldersMap.keys[_lastProcessedIndex];

    		if(canAutoClaim(lastClaimTimes[account])) {
    			if(processAccount(payable(account), true)) {
    				claims++;
    			}
    		}

    		iterations++;

    		uint256 newGasLeft = gasleft();

    		if(gasLeft > newGasLeft) {
    			gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));
    		}

    		gasLeft = newGasLeft;
    	}

    	lastProcessedIndex = _lastProcessedIndex;

    	return (iterations, claims, lastProcessedIndex);
    }

    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {
        uint256 amount = _withdrawDividendOfUser(account);

    	if(amount > 0) {
    		lastClaimTimes[account] = block.timestamp;
            emit Claim(account, amount, automatic);
    		return true;
    	}

    	return false;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/lib/DividendPayingToken.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "./SafeMathUint.sol";
import "./SafeMathInt.sol";
import "./DividendPayingTokenInterface.sol";
import "./DividendPayingTokenOptionalInterface.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


/// @title Dividend-Paying Token
/// @author Roger Wu (https://github.com/roger-wu)
/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether
///  to token holders as dividends and allows token holders to withdraw their dividends.
///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code
contract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {
  using SafeMath for uint256;
  using SafeMathUint for uint256;
  using SafeMathInt for int256;

  address public CAKE = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);


  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.
  // For more discussion about choosing the value of `magnitude`,
  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728
  uint256 constant internal magnitude = 2**128;

  uint256 internal magnifiedDividendPerShare;

  // About dividendCorrection:
  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:
  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.
  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),
  //   `dividendOf(_user)` should not be changed,
  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.
  // To keep the `dividendOf(_user)` unchanged, we add a correction term:
  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,
  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:
  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.
  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.
  mapping(address => int256) internal magnifiedDividendCorrections;
  mapping(address => uint256) internal withdrawnDividends;

  uint256 public totalDividendsDistributed;

  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}


  function distributeCAKEDividends(uint256 amount) public onlyOwner{
    require(totalSupply() > 0);

    if (amount > 0) {
      magnifiedDividendPerShare = magnifiedDividendPerShare.add(
        (amount).mul(magnitude) / totalSupply()
      );
      emit DividendsDistributed(msg.sender, amount);

      totalDividendsDistributed = totalDividendsDistributed.add(amount);
    }
  }

  /// @notice Withdraws the ether distributed to the sender.
  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.
  function withdrawDividend() public virtual override {
    _withdrawDividendOfUser(msg.sender);
  }
  
  //Change Cake address
    function setCakeAddress(address _cake) public onlyOwner() {
        CAKE = address(_cake);
    }

  /// @notice Withdraws the ether distributed to the sender.
  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.
 function _withdrawDividendOfUser(address user) internal returns (uint256) {
    uint256 _withdrawableDividend = withdrawableDividendOf(user);
    if (_withdrawableDividend > 0) {
      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);
      emit DividendWithdrawn(user, _withdrawableDividend);
      bool success = IERC20(CAKE).transfer(user, _withdrawableDividend);

      if(!success) {
        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);
        return 0;
      }

      return _withdrawableDividend;
    }

    return 0;
  }


  /// @notice View the amount of dividend in wei that an address can withdraw.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` can withdraw.
  function dividendOf(address _owner) public view override returns(uint256) {
    return withdrawableDividendOf(_owner);
  }

  /// @notice View the amount of dividend in wei that an address can withdraw.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` can withdraw.
  function withdrawableDividendOf(address _owner) public view override returns(uint256) {
    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);
  }

  /// @notice View the amount of dividend in wei that an address has withdrawn.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` has withdrawn.
  function withdrawnDividendOf(address _owner) public view override returns(uint256) {
    return withdrawnDividends[_owner];
  }


  /// @notice View the amount of dividend in wei that an address has earned in total.
  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)
  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` has earned in total.
  function accumulativeDividendOf(address _owner) public view override returns(uint256) {
    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()
      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;
  }

  /// @dev Internal function that transfer tokens from one address to another.
  /// Update magnifiedDividendCorrections to keep dividends unchanged.
  /// @param from The address to transfer from.
  /// @param to The address to transfer to.
  /// @param value The amount to be transferred.
  function _transfer(address from, address to, uint256 value) internal virtual override {
    require(false);

    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();
    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);
    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);
  }

  /// @dev Internal function that mints tokens to an account.
  /// Update magnifiedDividendCorrections to keep dividends unchanged.
  /// @param account The account that will receive the created tokens.
  /// @param value The amount that will be created.
  function _mint(address account, uint256 value) internal override {
    super._mint(account, value);

    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]
      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );
  }

  /// @dev Internal function that burns an amount of the token of a given account.
  /// Update magnifiedDividendCorrections to keep dividends unchanged.
  /// @param account The account whose tokens will be burnt.
  /// @param value The amount that will be burnt.
  function _burn(address account, uint256 value) internal override {
    super._burn(account, value);

    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]
      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );
  }

  function _setBalance(address account, uint256 newBalance) internal {
    uint256 currentBalance = balanceOf(account);

    if(newBalance > currentBalance) {
      uint256 mintAmount = newBalance.sub(currentBalance);
      _mint(account, mintAmount);
    } else if(newBalance < currentBalance) {
      uint256 burnAmount = currentBalance.sub(newBalance);
      _burn(account, burnAmount);
    }
  }
}

// File: contracts/lib/IterableMapping.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

library IterableMapping {
    // Iterable mapping from address to uint;
    struct Map {
        address[] keys;
        mapping(address => uint) values;
        mapping(address => uint) indexOf;
        mapping(address => bool) inserted;
    }

    function get(Map storage map, address key) public view returns (uint) {
        return map.values[key];
    }

    function getIndexOfKey(Map storage map, address key) public view returns (int) {
        if(!map.inserted[key]) {
            return -1;
        }
        return int(map.indexOf[key]);
    }

    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {
        return map.keys[index];
    }

    function size(Map storage map) public view returns (uint) {
        return map.keys.length;
    }

    function set(Map storage map, address key, uint val) public {
        if (map.inserted[key]) {
            map.values[key] = val;
        } else {
            map.inserted[key] = true;
            map.values[key] = val;
            map.indexOf[key] = map.keys.length;
            map.keys.push(key);
        }
    }

    function remove(Map storage map, address key) public {
        if (!map.inserted[key]) {
            return;
        }

        delete map.inserted[key];
        delete map.values[key];

        uint index = map.indexOf[key];
        uint lastIndex = map.keys.length - 1;
        address lastKey = map.keys[lastIndex];

        map.indexOf[lastKey] = index;
        delete map.indexOf[key];

        map.keys[index] = lastKey;
        map.keys.pop();
    }
}


// File: contracts/external/IUniswapV2Pair.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: contracts/external/IUniswapV2Factory.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

// File: contracts/external/IUniswapV2Router.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: contracts/lib/SafeMathUint.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

/**
 * @title SafeMathUint
 * @dev Math operations with safety checks that revert on error
 */
library SafeMathUint {
  function toInt256Safe(uint256 a) internal pure returns (int256) {
    int256 b = int256(a);
    require(b >= 0);
    return b;
  }
}


// File: contracts/lib/SafeMathInt.sol
// SPDX-License-Identifier: MIT

/*
MIT License

Copyright (c) 2018 requestnetwork
Copyright (c) 2018 Fragments, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

pragma solidity ^0.8.2;

/**
 * @title SafeMathInt
 * @dev Math operations for int256 with overflow safety checks.
 */
library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);

    /**
     * @dev Multiplies two int256 variables and fails on overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    /**
     * @dev Division of two int256 variables and fails on overflow.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != -1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }

    /**
     * @dev Subtracts two int256 variables and fails on overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    /**
     * @dev Adds two int256 variables and fails on overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    /**
     * @dev Converts to absolute value, and fails on overflow.
     */
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? -a : a;
    }


    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}


// File: contracts/lib/DividendPayingTokenInterface.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;


/// @title Dividend-Paying Token Interface
/// @author Roger Wu (https://github.com/roger-wu)
/// @dev An interface for a dividend-paying token contract.
interface DividendPayingTokenInterface {
  /// @notice View the amount of dividend in wei that an address can withdraw.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` can withdraw.
  function dividendOf(address _owner) external view returns(uint256);


  /// @notice Withdraws the ether distributed to the sender.
  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.
  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.
  function withdrawDividend() external;

  /// @dev This event MUST emit when ether is distributed to token holders.
  /// @param from The address which sends ether to this contract.
  /// @param weiAmount The amount of distributed ether in wei.
  event DividendsDistributed(
    address indexed from,
    uint256 weiAmount
  );

  /// @dev This event MUST emit when an address withdraws their dividend.
  /// @param to The address which withdraws ether from this contract.
  /// @param weiAmount The amount of withdrawn ether in wei.
  event DividendWithdrawn(
    address indexed to,
    uint256 weiAmount
  );
}

// File: contracts/lib/DividendPayingTokenOptionalInterface.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;


/// @title Dividend-Paying Token Optional Interface
/// @author Roger Wu (https://github.com/roger-wu)
/// @dev OPTIONAL functions for a dividend-paying token contract.
interface DividendPayingTokenOptionalInterface {
  /// @notice View the amount of dividend in wei that an address can withdraw.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` can withdraw.
  function withdrawableDividendOf(address _owner) external view returns(uint256);

  /// @notice View the amount of dividend in wei that an address has withdrawn.
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` has withdrawn.
  function withdrawnDividendOf(address _owner) external view returns(uint256);

  /// @notice View the amount of dividend in wei that an address has earned in total.
  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)
  /// @param _owner The address of a token holder.
  /// @return The amount of dividend in wei that `_owner` has earned in total.
  function accumulativeDividendOf(address _owner) external view returns(uint256);
}
