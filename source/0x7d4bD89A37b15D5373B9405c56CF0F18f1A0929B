//SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;

contract DoubleOrNothing {
    address payable public owner;
    address payable public payer;

    event PaymentReceived(address payer, uint256 amount);
    event PaymentReturned(address payer, uint256 amount);
    event FundsWithdrawn(address owner, uint256 amount);

    constructor() {
        owner = payable(msg.sender);
        payer = payable(address(0));  
    }

    

    function topUp() external payable {
        require(msg.value > 0, "Amount should be greater than zero.");
        emit PaymentReceived(msg.sender, msg.value);
    }

    


    function play() external payable {
    require(msg.value > 0, "Amount should be greater than zero.");

    uint256 amount = msg.value;

    emit PaymentReceived(msg.sender, amount);

    if (random() % 100 < 49) {
        uint256 payout = amount * 2;

        require(address(this).balance >= payout, "The contract doesn't have enough funds to pay out the winnings.");

        payer = payable(msg.sender);

        // transfer the payout to the payer
        (bool success, ) = payer.call{value: payout}("");
        require(success, "Transfer failed.");

        emit PaymentReturned(payer, payout);
    }
}


    function withdraw() external {
        require(msg.sender == owner, "Only the owner can withdraw funds.");
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds available for withdrawal.");
        owner.transfer(balance);
        emit FundsWithdrawn(owner, balance);
    }

    function random() private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, payer.balance))) % 100;
    }
}