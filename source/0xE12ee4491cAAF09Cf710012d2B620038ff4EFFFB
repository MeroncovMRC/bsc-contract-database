// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

contract token {
    string public name; // Name of Token
    string public symbol; // Symbol of Token
    uint8 public decimals; // Decimal places of Token
    uint256 public totalSupply; // Total supply of Token
    address payable public owner; // Holds Owner of the Token

    /* This creates a mapping with all balances*/
    mapping (address => uint256) public balanceOf;

    /* This creates a mapping of accounts with allowances*/
    mapping (address => mapping (address => uint256)) public allowance;

    /* This event is always fired on a successful call of: "transfer", "tranferFrom", "mint", and "burn" methods*/
    event Transfer(address indexed from, address indexed to, uint256 value);
    /* This event is always fired on a successful call ot the "approve" method*/
    event Approve(address indexed owner, address indexed spender, uint256 value);

    /* Construtor definition*/
    constructor() {
        name = "Trebre Coin"; // sets Token Name
        symbol = "TBC"; // sets Token Symbol
        decimals = 18; // sets Number of Decimals
        uint256 _initialSupply = 1000000000; // Holds an initial supply
        
        /* Sets the owner of the token to whoever deployed it */
        owner = payable(msg.sender);

        balanceOf[owner] = _initialSupply; // Transfer all tokens to owner
        totalSupply = _initialSupply; // Sets the total supply of tokens

        /* Whenever tokens are 'created', 'burnt', or 'transfered', the Transfer event is fired */
        emit Transfer(address(0), msg.sender, _initialSupply); 
    }

    //get owner
    function getOwner() public view returns (address) {
        return owner;
    }
    /* Transfers specified amount of tokens to an address. Deducting '_value' from address that called the function
        then added to address in '_to' argument. */
    function transfer(address _to, uint256 _value) public returns (bool success) {
        uint256 senderBalance = balanceOf[msg.sender];
        uint256 receiverBalance = balanceOf[_to];

        require(_to != address(0), "Receiver address invalid");
        require(_value >= 0, "Value must be greater or equal to 0");
        require(senderBalance > _value, "Not enough balance");

        balanceOf[msg.sender] = senderBalance - _value;
        balanceOf[_to] = receiverBalance + _value;

        emit Transfer(msg.sender, _to, _value);
        return true; 
    }

    /* transferFrom function, allowance is approved by recipient '_to' for token transfer */
    function transferFrom(address _from, address _to, uint256 _value)
        public returns (bool success) {
            uint256 senderBalance = balanceOf[msg.sender];
            uint256 fromAllowance = allowance[_from][msg.sender];
            uint256 receiverBalance = balanceOf[_to];

            require(_to != address(0), "Receiver address invalid");
            require(_value >=0, "Value must be greater or equal to 0");
            require(senderBalance > _value, "Not enough balance");
            require(fromAllowance >= _value, "Not enough allowance");

            balanceOf[_from] = senderBalance - _value;
            balanceOf[_to] = receiverBalance + _value;
            allowance[_from][msg.sender] = fromAllowance - _value;

            emit Transfer(_from, _to, _value);
            return true;
        }

    /* approve function to allow '_spender' to withdraw from caller account up to a '_value' amount*/
    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_value >0, "Value must be greater than 0");

        allowance[msg.sender][_spender] = _value;

        emit Approve(msg.sender, _spender, _value);
        return true;
    }

    /* mint function*/
    function mint(uint256 _amount) public returns (bool success) {
        require(msg.sender == owner, "Operation unauthorised");

        totalSupply += _amount;
        balanceOf[msg.sender] += _amount;

        emit Transfer(address(0), msg.sender, _amount);
        return true;
    }

    /* burn function*/
    function burn(uint256 _amount) public returns (bool success) {
        require(msg.sender != address(0), "Invalid burn recipient");

        uint256 accountBalance = balanceOf[msg.sender];
        require(accountBalance > _amount, "Burn amount exceeds balance");

        balanceOf[msg.sender] -= _amount;
        totalSupply -= _amount;

        emit Transfer(msg.sender, address(0), _amount);
        return true;
    }
}