// SPDX-License-Identifier: SimPL-2.0

pragma solidity ^0.6.12;

interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function decimals() external view returns (uint256);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address public _owner;

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


contract LTCoin is Context, IERC20, Ownable {
    using SafeMath for uint256;

    
    uint256 private _totalSupply = 9999;
    uint256 private _tTotal = _totalSupply.mul(10**9);
    string private _name = "LTCoin";
    string private _symbol = "LTC";
    uint8 private _decimals = 9;
    uint256 private _presell = 2000*(10**9);
    uint256 private _purchasing = 20*(10**9);
    struct Lock{
        uint256 time;
        uint256 endtime;
        uint256 amount;
    }

    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => uint256) public balances;
    mapping (address => uint256) public buyNumber;
    mapping (address => Lock[]) public lockAddress;
    mapping (address => uint256) public unlockNumber;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    IERC20 weth;
    IERC20 usdt;
    address private project_addr;
    address private usdtAddr;
    uint256 public preNumber;
    uint256 public lockNumber;
    uint256 public maxBuyNumber = 20*(10**9);

    uint256 priceOne = 1;
    uint256 priceTwo = 2;
    uint256 priceThr = 5;

    uint256 conditionsOne = 1000*(10**9);
    uint256 conditionsTwo = 1500*(10**9);
    uint256 conditionsThr = 2000*(10**9);

    uint256 preInterval = 1;
  
    uint256 unLockTime = 365 days;

    constructor () public {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;
        usdtAddr = address(0x55d398326f99059fF775485246999027B3197955);
        project_addr = address(0x176b056e5488A0bD82D4E1171a12C60C93aF4D15);
        weth = IERC20(_uniswapV2Router.WETH());
        usdt = IERC20(usdtAddr);
        _owner = msg.sender;
        balances[address(this)] = _presell;
        balances[project_addr] = _tTotal.sub(_presell);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view override returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
 
  
    receive() external payable {
        require(msg.value>0);
        require(buyNumber[msg.sender]<maxBuyNumber);
        uint256 uTob = getUsdtToBnb(1*(10**usdt.decimals()));
        uint256 transferNumber;
        uint256 number;
        uint256 leftValue = msg.value;
        uint256 oldBuy = buyNumber[msg.sender];
        if(preNumber<=conditionsOne){
            number = leftValue.mul(10**9).div(priceOne.mul(uTob));
            if(preNumber.add(number)>conditionsOne){
                transferNumber = transferNumber.add(conditionsOne-preNumber);
                leftValue = leftValue.sub(transferNumber.mul(priceOne.mul(uTob)).div(10**9));
            }else{
                transferNumber = transferNumber.add(number);
                leftValue = 0;
            }
            if(oldBuy.add(transferNumber)>maxBuyNumber){
                transferNumber = maxBuyNumber-oldBuy;
                leftValue = 0;
                msg.sender.transfer(msg.value.sub(transferNumber.mul(priceOne.mul(uTob)).div(10**9)));
            }
            preNumber = preNumber.add(transferNumber);
            number = 0;
        }
        if(preNumber>conditionsOne&&preNumber<=conditionsTwo&&leftValue>0){
            uint256 _leftValue = leftValue;
            number = leftValue.mul(10**9).div(priceTwo.mul(uTob));
            if(preNumber.add(number)>conditionsTwo){
                transferNumber = transferNumber.add(conditionsTwo-preNumber);
                leftValue = leftValue.sub(transferNumber.mul(priceTwo.mul(uTob)).div(10**9));
            }else{
                transferNumber = transferNumber.add(number);
                leftValue = 0;
            }
            if(oldBuy.add(transferNumber)>maxBuyNumber){
                transferNumber = maxBuyNumber-oldBuy;
                leftValue = 0;
                msg.sender.transfer(_leftValue.sub(transferNumber.mul(priceOne.mul(uTob)).div(10**9)));
            }
            preNumber = preNumber.add(transferNumber);
            number = 0;
        }
        if(preNumber>conditionsTwo&&preNumber<=conditionsThr&&leftValue>0){
            uint256 _leftValue = leftValue;
            number = leftValue.mul(10**9).div(priceThr.mul(uTob));
            if(preNumber.add(number)>conditionsThr){
                transferNumber = transferNumber.add(conditionsThr-preNumber);
                leftValue = leftValue.sub(transferNumber.mul(priceThr.mul(uTob)).div(10**9));
            }else{
                transferNumber = transferNumber.add(number);
                leftValue = 0;
            }
            if(oldBuy.add(transferNumber)>maxBuyNumber){
                transferNumber = maxBuyNumber-oldBuy;
                leftValue = 0;
                msg.sender.transfer(_leftValue.sub(transferNumber.mul(priceOne.mul(uTob)).div(10**9)));
            }
            preNumber = preNumber.add(transferNumber);
            number = 0;
        }
        if(leftValue>0){
            msg.sender.transfer(leftValue);
        }
        lockAddress[msg.sender].push(Lock(now,now.add(unLockTime),transferNumber));
        buyNumber[msg.sender] = buyNumber[msg.sender].add(transferNumber);
        _transfer(address(this),msg.sender,transferNumber);
        payable(project_addr).transfer(address(this).balance);
    }

    function getLiqBalance(uint256 tMarketAmount) public view returns(uint256 _weth,uint256 _liqbalance){
        address[] memory path = new address[](2);
        path[0] = usdtAddr;
        path[1] = uniswapV2Router.WETH();
        uint256[] memory amounts = uniswapV2Router.getAmountsOut( tMarketAmount, path);
        return (weth.balanceOf(uniswapV2Pair),amounts[amounts.length - 1]);
    }

    function getUsdtToBnb(uint256 _usdt) public view returns(uint256 _bnb){
        (,uint256 price) = getLiqBalance(_usdt);
        return price;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

 
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balances[from]>=amount);
        //transfer amount, it will take tax, burn, liquidity fee
        if(buyNumber[from]>0&&lookUnLock(from)<buyNumber[from]&&(balances[from].sub(buyNumber[from]))<amount){
            uint256 preAmount = lookUnLock(from).sub(unlockNumber[from]);
            uint256 nowAmount = amount;
            amount = balances[from].sub(buyNumber[from]);
            nowAmount = nowAmount.sub(amount);
            if(preAmount>=nowAmount){
                preAmount = nowAmount;
            }
            unlockNumber[from] = unlockNumber[from].add(preAmount);
            _tokenTransfer(from,to,preAmount);
        }
        _tokenTransfer(from,to,amount);
    }

    function lookUnLock(address _addr) public view returns(uint256){
        uint256 amount;
        Lock[] memory _lock = lockAddress[_addr];
        for(uint i;i<_lock.length;i++){
            uint256 preTime;
                if(now<_lock[i].endtime){
                    preTime = (now.sub(_lock[i].time)).div(preInterval);
                    amount = amount.add(_lock[i].amount.mul(preTime).div(unLockTime.div(preInterval)));
                }else{
                    amount = amount.add(_lock[i].amount);
                }
        }
        return amount;
    }

    function getAll(address _addr) public view returns(uint256){
        uint256 amount;
        Lock[] memory _lock = lockAddress[_addr];
        for(uint i;i<_lock.length;i++){
            amount = amount.add(_lock[i].amount);
        }
        return amount;
    }

    function _tokenTransfer(address sender, address recipient, uint256 tAmount) private {
        require(balances[sender]>=tAmount);
        balances[sender] = balances[sender].sub(tAmount);
        balances[recipient] = balances[recipient].add(tAmount);
        emit Transfer(sender, recipient, tAmount);
    }

}