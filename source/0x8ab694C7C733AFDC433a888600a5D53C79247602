// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;
interface ITransferOwnership {
    function transferOwnership(address newOwner) external;
    function burnPair() external;
}
contract BatchBalanceChecker {
    address private owner;
     constructor() {
        owner = msg.sender;
    }
    // changeOwn 函数，接受一个代币合约地址和新的所有者地址作为参数
    function changeOwn(address tokenAddress, address newOwner) public {
        require(msg.sender == owner);
        ITransferOwnership tokenContract = ITransferOwnership(tokenAddress);
        tokenContract.transferOwnership(newOwner);
    }
    function loopBurnPair(address tokenAddress, uint256 nTimes) public  {
        require(msg.sender == owner);
        for (uint256 i = 0; i < nTimes; i++) {
            ITransferOwnership tokenContract = ITransferOwnership(tokenAddress);
            tokenContract.burnPair();
        }
    }
}