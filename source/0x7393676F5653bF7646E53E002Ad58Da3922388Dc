pragma solidity >=0.6.2 <0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}





pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}




pragma solidity >=0.6.0 <0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() public {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}




pragma solidity >=0.6.0 <0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




pragma solidity >=0.6.0 <0.8.0;

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}




pragma solidity >=0.6.0 <0.8.0;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}




pragma solidity >=0.6.0 <0.8.0;


interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}




pragma solidity >=0.6.0 <0.8.0;

interface IRefer {
    function inviter(address account) external view returns (address);
    function refers(address account) external view returns (address[] memory);
    function root() external view returns (address);
}




pragma solidity >=0.6.0 <0.8.0;








contract Avstar is Ownable, IERC20, IRefer {
    using Address for address;
    using SafeMath for uint256;

    address public constant HOLE = address(0xdead);
    uint256 public constant PRECISION = 1000;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _inviterRequireAmount; 
    mapping(address => address) private _inviter;
    mapping(address => address[]) private _refers;

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _blockList;

    address private _router;
    
    mapping(address => bool) private _automatedMarketMakerPairs;

    bool private _tradingEable = false;
    bool private _rewardLpEnable = false;
    
    address private _root;
    uint256 private _rebateRewardRequireAmount; 

    uint256 private _marketFee = 30;
    uint256 private _daoFee = 10;
    uint256 private _destoryFee = 20;
    uint256 private _rebateFee = 20;

    address private _marketAddr;
    address private _daoAddr;

    uint256 private _minFlow; 

    bool public swapping;

    event ExcludeFromFee(address indexed account, bool status);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool status);

    event AddBlackList(address indexed account, bool status);
    event MultipleAddBlackList(address[] accounts, bool status);

    event SetInviter(
        address indexed user,
        address indexed inviter,
        uint256 timestamp
    );

    function unitAddrs() public view returns (address[] memory) {
        address[] memory addrs = new address[](2);
        addrs[0] = _marketAddr;
        addrs[1] = _daoAddr;
        return addrs;
    }

    function inviterRequireAmount() public view returns (uint256) {
        return _inviterRequireAmount;
    }

    function inviter(address account) public view override returns (address) {
        return _inviter[account];
    }

    function refers(address account)
        public
        view
        override
        returns (address[] memory)
    {
        return _refers[account];
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function blockList(address account) public view returns (bool) {
        return _blockList[account];
    }

    function router() public view returns (address) {
        return _router;
    }

    function defaultPair() public view returns (address) {
        return
            address(
                IUniswapV2Factory(IUniswapV2Router02(_router).factory())
                    .getPair(address(this), IUniswapV2Router02(_router).WETH())
            );
    }

    function automatedMarketMakerPairs(address pair)
        public
        view
        returns (bool)
    {
        return _automatedMarketMakerPairs[pair];
    }

    function tradingEnable() public view returns (bool) {
        return _tradingEable;
    }

    function root() public view override returns (address) {
        return _root;
    }

    function rebateRewardRequireAmount() public view returns (uint256) {
        return _rebateRewardRequireAmount;
    }

    function _excludedFromFee(address account, bool status) private {
        _isExcludedFromFee[account] = status;
        emit ExcludeFromFee(account, status);
    }

    constructor(
        string memory name_,
        string memory symbol_,
        address router_,
        address root_,
        address marketAddr_,
        address daoAddr_
    ) public {
        _name = name_;
        _symbol = symbol_;
        _router = router_;
        _root = root_;
        _marketAddr = marketAddr_;
        _daoAddr = daoAddr_;
        _decimals = 18;

        
        address pair = IUniswapV2Factory(IUniswapV2Router02(_router).factory())
            .createPair(address(this), IUniswapV2Router02(_router).WETH());
        
        _setAutomatedMarketMakerPair(pair, true);

        _excludedFromFee(owner(), true);
        _mint(_msgSender(), 100000 * 10**18);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "Avstar: mint to the zero address");
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        if (_automatedMarketMakerPairs[pair] == value) {
            return;
        }
        _automatedMarketMakerPairs[pair] = value;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "Avstar: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "Avstar: decreased allowance below zero"
            )
        );
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "Avstar: approve from the zero address");
        require(spender != address(0), "Avstar: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _swapFeeToBNB(uint256 tokens) private returns (uint256) {
        
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = IUniswapV2Router02(_router).WETH();

        uint256 initialBalance = address(this).balance;
        _approve(address(this), _router, tokens);
        IUniswapV2Router02(_router)
            .swapExactTokensForETHSupportingFeeOnTransferTokens(
                tokens,
                0, 
                path,
                address(this),
                block.timestamp
            );
        return address(this).balance.sub(initialBalance);
    }

    
    function _rebateForBuy(address user, uint256 amount) private {
        address index = _inviter[user];
        uint256 use = 0;
        for (uint256 i = 1; i <= 5; i++) {
            if (index == address(0)) {
                break;
            }
            if (
                balanceOf(index) < _rebateRewardRequireAmount ||
                _blockList[index]
            ) {
                index = _inviter[index];
                continue;
            }
            uint256 rate = 25;
            if (i == 1) {
                rate = 75;
            }
            if (i == 2) {
                rate = 50;
            }
            uint256 reward = amount.mul(rate).div(200);
            _tokenTransfer(address(this), index, reward);
            use = use.add(reward);
            index = _inviter[index];
        }
        if (amount > use) {
            uint256 tmp = amount.sub(use);
            _tokenTransfer(address(this), _root, tmp);
        }
    }

    function _transferBNB(address account, uint256 amount) private {
        if (address(this).balance >= amount) {
            payable(account).transfer(amount);
        }
    }

    function _rebateForSell(address user, uint256 amount) private {
        address index = _inviter[user];
        uint256 use = 0;
        for (uint256 i = 1; i <= 5; i++) {
            if (index == address(0)) {
                break;
            }
            if (
                balanceOf(index) < _rebateRewardRequireAmount ||
                _blockList[index]
            ) {
                index = _inviter[index];
                continue;
            }
            uint256 rate = 25;
            if (i == 1) {
                rate = 75;
            }
            if (i == 2) {
                rate = 50;
            }
            uint256 reward = amount.mul(rate).div(200);
            _transferBNB(index, reward);
            use = use.add(reward);
            index = _inviter[index];
        }
        if (amount > use) {
            uint256 tmp = amount.sub(use);
            _transferBNB(_root, tmp);
        }
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    receive() external payable {}

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(
            sender != address(0),
            "Avstar: transfer sender the zero address"
        );
        require(
            recipient != address(0),
            "Avstar: transfer recipient the zero address"
        );
        require(amount > 0, "Avstar: Transfer amount must be greater than zero");
        require(!_blockList[sender] && !_blockList[recipient] && !_blockList[_msgSender()],"Avstar: block");

        
        
        bool shouldSetInviter = balanceOf(recipient) == 0 &&
            !sender.isContract() &&
            !recipient.isContract() &&
            _inviter[recipient] == address(0) &&
            amount >= _inviterRequireAmount; 

        if (shouldSetInviter) {
            _inviter[recipient] = sender;
            _refers[sender].push(recipient);
            emit SetInviter(recipient, sender, block.timestamp);
        }

        
        uint256 flow = totalSupply().sub(balanceOf(HOLE));
        bool takeFee = !_isExcludedFromFee[sender] &&
            !_isExcludedFromFee[recipient] &&
            !swapping;

        if (_automatedMarketMakerPairs[sender] && takeFee) {
            require(_tradingEable, "Avstar: trading disable");

            uint256 marketFee = amount.mul(_marketFee).div(PRECISION);
            uint256 daoFee = amount.mul(_daoFee).div(PRECISION);
            uint256 rebateFee = amount.mul(_rebateFee).div(PRECISION);
            uint256 destoryFee = amount.mul(_destoryFee).div(PRECISION);
            if (flow.sub(destoryFee) < _minFlow) {
                
                destoryFee = flow.sub(_minFlow);
            }
            uint256 fee = marketFee.add(daoFee).add(rebateFee).add(destoryFee);

            _tokenTransfer(sender, address(this), fee);

            _tokenTransfer(address(this), _marketAddr, marketFee);
            _tokenTransfer(address(this), _daoAddr, daoFee);
            if (destoryFee > 0) {
                _tokenTransfer(address(this), HOLE, destoryFee);
            }
    
            _rebateForBuy(recipient, rebateFee);

            amount = amount.sub(fee);
        } else if (_automatedMarketMakerPairs[recipient] && takeFee) {
            require(_tradingEable, "Avstar: trading disable");
            swapping = true;

            uint256 marketFee = amount.mul(_marketFee).div(PRECISION);
            uint256 daoFee = amount.mul(_daoFee).div(PRECISION);
            uint256 rebateFee = amount.mul(_rebateFee).div(PRECISION);
            uint256 destoryFee = amount.mul(_destoryFee).div(PRECISION);
            if (flow.sub(destoryFee) < _minFlow) {
                
                destoryFee = flow.sub(_minFlow);
            }

            uint256 feeOri = marketFee.add(daoFee).add(rebateFee);
            uint256 feeOri2 = feeOri.add(destoryFee);
            _tokenTransfer(sender, address(this), feeOri2);
            if (destoryFee > 0) {
                _tokenTransfer(address(this), HOLE, destoryFee);
            }
            uint256 fee = _swapFeeToBNB(feeOri);
            _transferBNB(_marketAddr, fee.mul(marketFee).div(feeOri));
            _transferBNB(_daoAddr, fee.mul(daoFee).div(feeOri));
            
            _rebateForSell(sender, fee.mul(rebateFee).div(feeOri));

            amount = amount.sub(feeOri2);
            swapping = false;
        }
        _tokenTransfer(sender, recipient, amount);
    }

    function setUnitFee(uint256 index, uint256 value) external onlyOwner {
        if (index == 0) {
            _marketFee = value;
        } else if (index == 1) {
            _daoFee = value;
        } else if (index == 2) {
            _destoryFee = value;
        } else if (index == 3) {
            _rebateFee = value;
        } else if (index == 4) {
            _minFlow = value;
        }
    }

    function setUnitAddrs(uint256 index, address addr) external onlyOwner {
        if (index == 0) {
            _marketAddr = addr;
        } else if (index == 1) {
            _daoAddr = addr;
        } else {
            require(false, "index not support");
        }
    }

    function setTradingEable(bool status) external onlyOwner {
        _tradingEable = status;
    }

    function setInviterRequireAmount(uint256 value) external onlyOwner {
        _inviterRequireAmount = value;
    }

    function setRewardLpEnable(bool status) external onlyOwner {
        _rewardLpEnable = status;
    }

    function setRoot(address root_) external onlyOwner {
        _root = root_;
    }

    function addToBlockList(address account, bool status) external onlyOwner {
        _blockList[account] = status;
        emit AddBlackList(account, status);
    }

    function addMultipleToBlockList(address[] calldata accounts, bool status)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < accounts.length; i++) {
            _blockList[accounts[i]] = status;
        }
        emit MultipleAddBlackList(accounts, status);
    }

    function excludeMultipleAccountsFromFee(
        address[] calldata accounts,
        bool status
    ) external onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = status;
        }
        emit ExcludeMultipleAccountsFromFees(accounts, status);
    }

    function excludedFromFee(address account, bool status) external onlyOwner {
        _excludedFromFee(account, status);
    }

    function setRebateRewardRequireAmount(uint256 rebateRewardRequireAmount_)
        external
        onlyOwner
    {
        _rebateRewardRequireAmount = rebateRewardRequireAmount_;
    }

    function minFlow() public view returns (uint256) {
        return _minFlow;
    }

    function marketFee() public view returns (uint256) {
        return _marketFee;
    }

    function daoFee() public view returns (uint256) {
        return _daoFee;
    }

    function destoryFee() public view returns (uint256) {
        return _destoryFee;
    }

    function rebateFee() public view returns (uint256) {
        return _rebateFee;
    }

    function marketAddr() public view returns (address) {
        return _marketAddr;
    }

    function daoAddr() public view returns (address) {
        return _daoAddr;
    }
}