// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
 
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);

    function inviter(address to) external view returns (address);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library Address {

    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract TOVtoken is Context, IERC20, Ownable {
	using SafeMath for uint256;
	using Address  for address;

	string private _name    = "TOVToken";
    string private _symbol  = "TOV";
    uint8  private _decimals = 18;
	address      private _uniswapV2Pair;
    address[2][] public  invitaArray;
    address      private LpAddress;
    address      private Backflow;
    address      private Address15;
    address      private Address5;
    address      private addressInviter;
    address      private Address0;
    IERC20       private  USDT   = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20       private  TOVOld = IERC20(0x8c20DC91724B176273506536Cfbe7A35f8416560);

	uint256 private price;
	uint256 private  _tTotal    = 1000000000 * 10**18;
	uint256 private _MinSupply  =      10000 * 10**18;
	uint256 private _maxWallet  =     100000 * 10**18;
    uint256 public  depoBurnMax =  680000000 * 10**18;
    uint256 public  depositBurn;  
	uint256 private _burnFee     = 400;
	uint256 private _LPFeeBuy    = 200;
	uint256 private _BackflowFee = 200;
	uint256 private _inviterFee1 = 200;
	uint256 private _LPFeeSale2  = 200;
    uint256 private _LPFeeSale1  = 100;
    bool    private canDeposit   = true;
    uint256 private StartTime    = 1649591760;

    struct DeopHistory {
        uint256 t;
        uint256 amount;
        uint256 EqUSDT;
        uint256 price;
    }

	mapping(address => address)                     public  inviter;
	mapping(address => mapping(address => uint256)) private _allowances;
	mapping(address => uint256)                     private _balanceOf;
    mapping(address => bool)                        private unlimitedWallet;
    mapping(address => uint256)                     public  accelerateReleased;
    mapping(address => uint256)                     public  stakingBalance;
    mapping(address => uint256)                     public  coinReleased;
    mapping(address => uint256)                     public  stakingBalanceAdd;
    mapping(address => DeopHistory[])               private  deopsitList;

	constructor(
            address  _LpAddress,
            address  _Backflow,
            address  _Address15,
            address  _Address5,
            address  _addressInviter,
            address  _Address0,
            //address  _Address10yi,
            address _USDT, 
            uint _amount, 
            uint _eqUSDT,
            uint _usdtprice){
        LpAddress = _LpAddress;
        Backflow  = _Backflow;
        Address15 = _Address15;
        Address5  = _Address5;
        addressInviter =  _addressInviter;
        Address0 =  _Address0;

        unlimitedWallet[LpAddress] = true;
        unlimitedWallet[Backflow] = true;
        unlimitedWallet[Address15] = true;
        unlimitedWallet[Address5] = true;
        unlimitedWallet[addressInviter] = true;
        unlimitedWallet[Address0] = true;

        inviter[Address0] = address(this);
	    invitaArray.push([address(this),Address0]);
        _balanceOf[msg.sender] = 40*10**18;
        _balanceOf[Address0] = 95601*10**18;
        _balanceOf[address(this)] = 1464*10**18;
        emit Transfer(address(0), Address0, 95601*10**18);
        emit Transfer(address(0), msg.sender, 40*10**18);
        emit Transfer(address(0), address(this), 1464*10**18);

        DeopHistory memory depotemp = DeopHistory({
            t: block.timestamp,
            amount: _amount,
            EqUSDT: _eqUSDT,
            price:  _usdtprice
        });
        deopsitList[_USDT].push(depotemp);
        stakingBalance[_USDT] = _eqUSDT;
        stakingBalanceAdd[_USDT] = _eqUSDT;
    }
 
	function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balanceOf[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool){
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(address sender,address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)public virtual returns (bool) {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }
	function _approve( address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
	function _transfer(address from, address to, uint256 amount ) private {
        require(amount>0,"Transfer amount must be more than zero");
        require(from != address(0), "ERC20: transfer from the zero address");
		require(from != to, "ERC20: transfer from self address");
        require(_balanceOf[from] >= amount, "Transfer amount must be less than balance");
		if(from!=owner() && to!=_uniswapV2Pair && !unlimitedWallet[to] && balanceOf(address(0))<=_MinSupply){
            require(balanceOf(to).add(amount)<_maxWallet,"Wallet balance is exceeds the maxWalletAmount");
        }
		_balanceOf[from] = _balanceOf[from].sub(amount);
		bool shouldSetInviter = (inviter[to] == address(0) && !from.isContract() && amount >= 1 * 10 **18);

        if (shouldSetInviter && to != address(0) && !to.isContract()) {
            inviter[to] = from;  
			invitaArray.push([from,to]);
        }
        if (inviter[from] == address(0) && !from.isContract()){
            inviter[from] = addressInviter;
            invitaArray.push([addressInviter,from]);
        }
		if (to == address(0)){
			_takeburnFee(from,amount);
		}
		if (from != _uniswapV2Pair && to != _uniswapV2Pair && to != address(0)) {
			_takeTransfer(from,to,amount);
		}
		if (from == _uniswapV2Pair && to != _uniswapV2Pair){ 
			if( _tTotal >  _MinSupply){
				_takeburnFee(from,amount.div(10000).mul(_burnFee));
			}
            if( _tTotal <= _MinSupply){
                _burnFee = 0;
            }
			_takeLPFee(from,amount.div(10000).mul(_LPFeeBuy));
			_takeBackflowFee(from,amount.div(10000).mul(_BackflowFee));
			_takeInviterFee(from,to,amount);	
		}
		if(from !=_uniswapV2Pair && to == _uniswapV2Pair){
            _balanceOf[from] = _balanceOf[from].add(amount);
            require(amount<=_balanceOf[from].mul(99).div(100),"ERR: More than 99% of the balance");
            _balanceOf[from] = _balanceOf[from].sub(amount);
			uint256 rate = 10000 - _LPFeeSale1 - _LPFeeSale2;	
			_takeLPFee(from,amount.div(10000).mul(_LPFeeSale1));
            _takeBackflowFee(from,amount.div(10000).mul(_LPFeeSale2));
			_takeTransfer(from,to,amount.div(10000).mul(rate));			
		}
		
	}
	
    function _takeburnFee(address sender,uint256 tAmount) private {
        _balanceOf[address(0)] = _balanceOf[address(0)].add(tAmount);
        _tTotal = _tTotal.sub(tAmount);
        emit Transfer(sender, address(0), tAmount);
    }

    function _takeLPFee(address sender,uint256 tAmount) private {
        _balanceOf[LpAddress] = _balanceOf[LpAddress].add(tAmount);
        emit Transfer(sender, LpAddress, tAmount);
    }
	function _takeBackflowFee(address sender,uint256 tAmount) private {
        _balanceOf[Backflow] = _balanceOf[Backflow].add(tAmount);
        emit Transfer(sender, Backflow, tAmount);
    }

    function _takeInviterFee(address sender,address recipient, uint256 tAmount) private {
        address cur = recipient;
        uint256 rateAdd = 0;

        for (int256 i = 0; i < 8; i++) {
            uint256 rate;
            if (i == 0) {
                rate = _inviterFee1;
            } else if(i == 1){
                rate = _inviterFee1.div(2);
            } else if(i == 2){
                rate = _inviterFee1.div(4);
            } else if(i == 3){
                rate = _inviterFee1.div(8);
            } else if(i == 4){
                rate = _inviterFee1.div(16);
            } else if(i == 5){
                rate = _inviterFee1.div(32);
            } else if(i == 6){
                rate = _inviterFee1.div(64);
            } else if(i == 7){
                rate = _inviterFee1.div(128);
            } 
            cur = inviter[cur];
            if (cur == address(0) || cur.isContract() ) {
                break;
            }

            uint256 curTAmount = tAmount.div(10000).mul(rate);
            rateAdd = rateAdd.add(rate);

            _balanceOf[cur] = _balanceOf[cur].add(curTAmount);
            emit Transfer(sender, cur, curTAmount);
        }
        uint256 rateFinal = 10000 - _burnFee - _LPFeeBuy - rateAdd  - _BackflowFee;
        _takeTransfer(sender,recipient,tAmount.div(10000).mul(rateFinal));	
  
    }

    function _takeTransfer(address sender,address to,uint256 rAmount) private {
        _balanceOf[to] = _balanceOf[to].add(rAmount);
        emit Transfer(sender, to, rAmount);
    }
	
	function setLpAddress(address _address) public virtual onlyOwner {
        require(_address != address(0), "Ownable: new addess is the zero address");
        _uniswapV2Pair = _address;
    }
    function setStartTime(uint256 _time) public virtual onlyOwner {
        StartTime = _time;
    }
    
    function setUnlimitedWallet(address _wallet) public virtual onlyOwner{
        require(_wallet != address(0), "Ownable: new address is the zero address");
        unlimitedWallet[_wallet]=true;
    }

    function getTeamsOnlyOne(address _address) public view returns(uint) {
        uint one; 
        for(uint i=0; i < invitaArray.length; i++){
            if(invitaArray[i][0] == _address){
                one++;
            }
        }
        return one;
    }
    function getBouns(address _address) public view returns(uint,uint,uint){
        uint sum;
        uint Bouns;
        for(uint i=0; i < invitaArray.length; i++){
            if(invitaArray[i][0] == _address){
                sum += stakingBalanceAdd[invitaArray[i][1]];
                Bouns++;
            }
        }
        return (sum,invitaArray.length,Bouns);
    }
    function getPrice() public view returns(uint256){
        uint256 TOVPrice;
        if(block.timestamp < StartTime){
            TOVPrice = 20*10**18;
        }
        if(block.timestamp > StartTime){
            uint256 TOVAmount  = balanceOf(_uniswapV2Pair);
            uint256 USDTAmount = USDT.balanceOf(_uniswapV2Pair);
            TOVPrice = TOVAmount.mul(10**18).div(USDTAmount);
        }
        return TOVPrice;
    }
    function setDeposit(bool _can) public virtual onlyOwner{
        canDeposit = _can;
    }
    function deposit(uint256 amount) external{
        require(canDeposit == true,"Cannot deposit");
        require(amount>0,"Deposit amount must be more than zero");
        require(_tTotal > _MinSupply,"totalSupply already less than minSupply");
        require(depositBurn < depoBurnMax,"0.68B token already burn");
        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(amount);
        _balanceOf[Address15] = _balanceOf[Address15].add(amount.div(100).mul(15));
        _balanceOf[Address5] = _balanceOf[Address5].add(amount.div(100).mul(5));
        emit Transfer(msg.sender, Address15, amount.div(100).mul(15));
        emit Transfer(msg.sender, Address5, amount.div(100).mul(5));
        _takeburnFee(msg.sender,amount.div(100).mul(80));
        depositBurn += amount.div(100).mul(80);

        uint eqUSDT = amount.div(getPrice()).mul(10**18);//wei
        stakingBalanceAdd[msg.sender] = stakingBalanceAdd[msg.sender].add(eqUSDT);
        if(eqUSDT>= 1*10**18 && eqUSDT<98*10**18){
            eqUSDT =eqUSDT;
        }else if(eqUSDT>= 98*10**18 && eqUSDT<299*10**18){
            eqUSDT =eqUSDT.mul(150).div(100);
        }else if(eqUSDT>=299*10**18 && eqUSDT<499*10**18){
            eqUSDT =eqUSDT.mul(480).div(300);
        }else if(eqUSDT>=499*10**18 && eqUSDT<999*10**18){
            eqUSDT =eqUSDT.mul(900).div(500);
        }else if(eqUSDT>=999*10**18 && eqUSDT<1999*10**18){
            eqUSDT =eqUSDT.mul(2000).div(1000);
        }else if(eqUSDT>=1999*10**18){
            eqUSDT =eqUSDT.mul(4400).div(2000);
        }
        stakingBalance[msg.sender] = stakingBalance[msg.sender].add(eqUSDT);
        DeopHistory memory depo = DeopHistory({
            t: block.timestamp,
            amount: amount,
            EqUSDT: eqUSDT,
            price:  getPrice()
        });
        deopsitList[msg.sender].push(depo);
        if(inviter[msg.sender] == address(0)){
            inviter[msg.sender] = addressInviter;  
            invitaArray.push([addressInviter, msg.sender]);
        }
        address cur = msg.sender;
        for (int256 i = 0; i < 8; i++) {
            uint256 rate;
            if (i == 0) {
                rate = amount.div(100000000).mul(10000000);
            } else if(i == 1){
                rate = amount.div(100000000).mul(5000000);
            } else if(i == 2){
                rate = amount.div(100000000).mul(2500000);
            } else if(i == 3){
                rate = amount.div(100000000).mul(1250000);
            } else if(i == 4){
                rate = amount.div(100000000).mul(625000);
            } else if(i == 5){
                rate = amount.div(100000000).mul(312500);
            } else if(i == 6){
                rate = amount.div(100000000).mul(156250);
            } else if(i == 7){
                rate = amount.div(100000000).mul(78125);
            } 
            cur = inviter[cur];
            if (cur == address(0) || cur.isContract()) {
                break;
            }
           inviterReleaseCoinAndWithdraw(cur,rate);
        }

    }
    function inviterReleaseCoinAndWithdraw(address _cur,uint256 _rateRelease) private {
        uint256 withdrawASUsdt = _rateRelease.div(getPrice()).mul(10**18); 
        if(stakingBalance[_cur] >= withdrawASUsdt){
            uint256 flag = stakingBalance[_cur] - withdrawASUsdt;
            coinReleased[_cur]   += withdrawASUsdt; 
            stakingBalance[_cur] = flag;  
            accelerateReleased[_cur] += withdrawASUsdt;
            _balanceOf[address(this)] = _balanceOf[address(this)].sub(_rateRelease);
            _takeTransfer(address(this), _cur,_rateRelease);
        }
        if(stakingBalance[_cur] < withdrawASUsdt && stakingBalance[_cur] > 0){
            coinReleased[_cur]   += stakingBalance[_cur]; 
            accelerateReleased[_cur] += stakingBalance[_cur];
            _balanceOf[address(this)] = _balanceOf[address(this)].sub(stakingBalance[_cur]);
            _takeTransfer(address(this), _cur,stakingBalance[_cur]);
            stakingBalance[_cur] = 0;
        }
    }
    function canWithdrawCoinNumber() public view returns(uint) {
        uint256 Released = 0;
        uint256 totalRelease = 0;
        uint256 dayRelease =0;
        if(stakingBalance[msg.sender] > 0){
            for (uint256 i = 0; i<deopsitList[msg.sender].length; i++)  {
                uint256 createTime = deopsitList[msg.sender][i].t;
                uint256 sinceDays = ((block.timestamp.sub(createTime)).div(24).div(3600));
                dayRelease = deopsitList[msg.sender][i].EqUSDT.div(60);
                if (sinceDays <= 60) {
                    totalRelease += sinceDays.mul(dayRelease);
                }
                if(sinceDays > 60){
                    totalRelease += dayRelease.mul(60);
                }
            }
            if(totalRelease + accelerateReleased[msg.sender] > coinReleased[msg.sender]){
                Released = totalRelease + accelerateReleased[msg.sender] - coinReleased[msg.sender];
            }else {
                Released = 0;
            }           
        }
        if(stakingBalance[msg.sender] == 0){
            Released = 0;
        }
        return Released;
    }

    function canReleaseCoinNumber(uint num) private returns(uint256) {
        uint256 Released = 0;
        uint256 totalRelease = 0;
        uint256 dayRelease =0;
        if(stakingBalance[msg.sender] > 0){ 
            for (uint256 i = 0; i<deopsitList[msg.sender].length; i++) {
                uint256 createTime = deopsitList[msg.sender][i].t;
                uint256 sinceDays = ((block.timestamp.sub(createTime)).div(24).div(3600));
                dayRelease = deopsitList[msg.sender][i].EqUSDT.div(60);
                if (sinceDays <= 60) {
                    totalRelease += sinceDays.mul(dayRelease);
                }
                if(sinceDays > 60){
                    totalRelease += dayRelease.mul(60);
                }
            }
            if(totalRelease + accelerateReleased[msg.sender] > coinReleased[msg.sender]){
                Released = totalRelease + accelerateReleased[msg.sender] - coinReleased[msg.sender];
                if (num <= Released){
                    coinReleased[msg.sender] += num;
                    stakingBalance[msg.sender] -= num;
                    return num;
                }
                else{
                    Released = 0;
                } 
            }
            if(totalRelease + accelerateReleased[msg.sender] <= coinReleased[msg.sender]) {
                Released = 0;
            }    
        } 
        if(stakingBalance[msg.sender] == 0){
            Released = 0;
        }
        return Released;
    }
    
	function withdrawCoin(uint num) public  {
        uint256 amount = canReleaseCoinNumber(num);
        uint256 withdrawAmount = amount.mul(getPrice()).div(10**18);
        require(amount > 0, "no withdraw coin");
        require(_balanceOf[address(this)] > withdrawAmount, "low balance of this address");
        _balanceOf[address(this)] = _balanceOf[address(this)].sub(withdrawAmount);
        _takeTransfer(address(this), msg.sender,withdrawAmount.div(100).mul(97));
    }	

    function getOldDate(address to,address to1,address to2,address to3) public virtual onlyOwner{
        require(!to.isContract());
        require(!to1.isContract());
        require(!to2.isContract());
        require(!to3.isContract());

        address from = TOVOld.inviter(to);
        uint256 Oldbalance = TOVOld.balanceOf(to);
        inviter[to] = from;
        _balanceOf[to] =  Oldbalance;
        invitaArray.push([from,to]);
        emit Transfer(address(0), to, Oldbalance);

        address from1 = TOVOld.inviter(to1);
        uint256 Oldbalance1 = TOVOld.balanceOf(to1);
        inviter[to1] = from1;
        _balanceOf[to1] =  Oldbalance1;
        invitaArray.push([from1,to1]);
        emit Transfer(address(0), to1, Oldbalance1);

        address from2 = TOVOld.inviter(to2);
        uint256 Oldbalance2 = TOVOld.balanceOf(to2);
        inviter[to2] = from2;
        _balanceOf[to2] =  Oldbalance2;
        invitaArray.push([from2,to2]);
        emit Transfer(address(0), to2, Oldbalance2);

        address from3 = TOVOld.inviter(to3);
        uint256 Oldbalance3 = TOVOld.balanceOf(to3);
        inviter[to3] = from3;
        _balanceOf[to3] =  Oldbalance3;
        invitaArray.push([from3,to3]);
        emit Transfer(address(0), to3, Oldbalance3);

    }

    function getInvitaArrayLength()public view returns(uint){
        return invitaArray.length;
    }

    function getInvitaArray(uint a, uint b) public view returns( address[2][1000] memory){
        address[2][1000]  memory bounsArray;
        for (uint i=a;i<b;i++){
            bounsArray[i][0] = invitaArray[i][0];
            bounsArray[i][1] = invitaArray[i][1];
        }
        return bounsArray;
    }
}