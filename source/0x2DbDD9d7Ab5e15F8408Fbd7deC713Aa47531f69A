
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @pancakeswap/v3-periphery/contracts/libraries/TransferHelper.sol
// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.6.0;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

library TransferHelper {
    /// @notice Transfers tokens from the targeted address to the given destination
    /// @notice Errors with 'STF' if transfer fails
    /// @param token The contract address of the token to be transferred
    /// @param from The originating address from which the tokens will be transferred
    /// @param to The destination address of the transfer
    /// @param value The amount to be transferred
    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');
    }

    /// @notice Transfers tokens from msg.sender to a recipient
    /// @dev Errors with ST if transfer fails
    /// @param token The contract address of the token which will be transferred
    /// @param to The recipient of the transfer
    /// @param value The value of the transfer
    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');
    }

    /// @notice Approves the stipulated contract to spend the given allowance in the given token
    /// @dev Errors with 'SA' if transfer fails
    /// @param token The contract address of the token to be approved
    /// @param to The target of the approval
    /// @param value The amount of the given token the target will be allowed to spend
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');
    }

    /// @notice Transfers ETH to the recipient address
    /// @dev Fails with `STE`
    /// @param to The destination of the transfer
    /// @param value The value to be transferred
    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'STE');
    }
}


// File: contracts/CandaoInfinityPass.sol
// SPDX-License-Identifier: UNLISTED

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import '@pancakeswap/v3-periphery/contracts/libraries/TransferHelper.sol';

contract CandaoInfinityPass is Ownable, Pausable {

    struct InfinityPass {
        uint256 blockNumber;

        uint256 price;

        bool valid;
    }
    
    IERC20 public token;

    address public feeAddress = 0x053c18453fAb787F87462Bc2Ec4AAf5428c4916A;
    address public fee2Address = 0x053c18453fAb787F87462Bc2Ec4AAf5428c4916A;
    address public fee3Address = 0x053c18453fAb787F87462Bc2Ec4AAf5428c4916A;

    mapping (address => InfinityPass) private _userInfo;

    uint256 public passPrice = 200 * 10**18;
    uint256 public swapAmount = 15 * 10**18;
    uint256 public wallet2Fee = 15 * 10**18;

    mapping (uint256 => uint256) public _domainPricing;
    mapping (uint256 => uint256) public _additionalDomainPricing;

    event InfinityPassBrought(address buyer, string reservationToken, uint256 price, uint256 domainLength, bool automatic);
    event TokenAddressUpdated(address newAddress);
    event DomainBought(address buyer, string[] reservationToken, uint256 price, bool automatic);
    event CDOBought(address buyer, uint256 amount, bool automatic);

    constructor(address _token) {
        token = IERC20(_token);
    }

    function buyInfinityPass(string memory domain, string memory reservationToken) external {
        uint256 characterCount = bytes(domain).length;
        require(characterCount != 0, "CandaoInfinityPass: Incorrect domainLength.");

        // 200 = 200 + 0
        uint256 amount = passPrice + _domainPricing[characterCount];
        require(amount != 0, "CandaoInfinityPass: package totalPrice not found.");

        // 185 = 200 - 15
        TransferHelper.safeTransferFrom(address(token), msg.sender, fee2Address, wallet2Fee);
        amount = amount - wallet2Fee;

        // 170 = 185 - 15
        TransferHelper.safeTransferFrom(address(token), msg.sender, fee3Address, swapAmount);
        amount = amount - swapAmount;
        
        TransferHelper.safeTransferFrom(address(token), msg.sender, feeAddress, amount);

        _userInfo[msg.sender] = InfinityPass(block.number, amount, true);
        emit InfinityPassBrought(msg.sender, reservationToken, amount, characterCount, false);
    }

    function buyCDO(uint256 amount) external {
        require(_userInfo[msg.sender].valid, "CandaoInfinityPass: Address isn't allowed to buy CDO tokens.");

        token.transferFrom(msg.sender, feeAddress, amount);
        emit CDOBought(msg.sender, amount, false);
    }

    function buyAdditionalDomain(string[] memory domains, string[] memory reservationTokens) external {
        require(_userInfo[msg.sender].valid, "CandaoInfinityPass: Address isn't allowed to buy domain.");
        uint256 totalPrice = 0;

        for (uint256 i = 0; i < domains.length; i++) {
            uint256 characterCount = bytes(domains[i]).length;
            require(characterCount != 0, "CandaoInfinityPass: Incorrect domainLength.");
            uint256 domainPrice = _additionalDomainPricing[characterCount];
            require(domainPrice != 0, "CandaoInfinityPass: Domain pricing not set.");
            totalPrice += domainPrice;
        }

        token.transferFrom(msg.sender, feeAddress, totalPrice);
        emit DomainBought(msg.sender, reservationTokens, totalPrice, false);
    }

    function addInfinityPass(address _initialBuyer, address _successor) external onlyOwner {
        InfinityPass memory initialBuyerPP = _userInfo[_initialBuyer];
        _userInfo[_successor] = InfinityPass(initialBuyerPP.blockNumber, initialBuyerPP.price, true);
    }

    function addDomainPrice(uint256 domainLength, uint256 price) external onlyOwner {
        _domainPricing[domainLength] = price;
    }

    function additionalDomainPrice(uint256 domainLength, uint256 price) external onlyOwner {
        _additionalDomainPricing[domainLength] = price;
    }

    function setTokenAddress(address newAddress) external onlyOwner {
        require(address(token) != newAddress, "CandaoInfinityPass: newAddress can't same as prev.");
        token = IERC20(newAddress);
        emit TokenAddressUpdated(newAddress); 
    }

    function removeInfinityPass() external {
        delete _userInfo[msg.sender];
    }

    function setFeeAddress(address newAddress) external onlyOwner {
        feeAddress = newAddress;
    }

    function setFee2Address(address newAddress) external onlyOwner {
        fee2Address = newAddress;
    }

    function setFee3Address(address newAddress) external onlyOwner {
        fee3Address = newAddress;
    }

    function setPassPrice(uint256 newPrice) external onlyOwner {
        passPrice = newPrice;
    }

    function setWallet2Fee(uint256 newFee) external onlyOwner {
        wallet2Fee = newFee;
    }

    function setSwapAmount(uint256 newAmount) external onlyOwner {
        swapAmount = newAmount;
    }

    function userInfo(address _wallet) public view returns (InfinityPass memory) {
        return _userInfo[_wallet];
    }

    function getDomainPrice(string memory domain) public view returns (uint256) {
        uint256 characterCount = bytes(domain).length;
        return _domainPricing[characterCount];
    }

    function getAdditionalDomainPrice(string memory domain) public view returns (uint256) {
        uint256 characterCount = bytes(domain).length;
        return _additionalDomainPricing[characterCount];
    }

    function getTotalPrice(string memory domain) public view returns (uint256) {
        uint256 characterCount = bytes(domain).length;
        return passPrice + _domainPricing[characterCount];
    }
}
