pragma solidity ^0.8.0;


contract TokenERC20{
    string public name; //代币名称
    string public symbol; //代币简称
    uint8 public decimals = 10;
    uint256 public totalSupply;
    uint256 public minTotal;
    address public ascription;
    
    mapping(address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    mapping(address => bool) public blacklist;
    // 事件，用来通知客户端交易发生 ERC20标准
    event Transfer(address indexed from, address indexed to, uint256 value);

    // 事件，用来通知客户端代币被授权 ERC20标准
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    constructor(string memory _name,string memory _symbol,uint256 _totalSupply,uint256 _minTotal,address Genesis){
        ascription=Genesis;
        minTotal = _minTotal * 10 ** 10;
        totalSupply = _totalSupply  * 10 ** 10; 
        name=_name;
        symbol= _symbol;
        balanceOf[Genesis] = _totalSupply * 10 ** 10;
    }
    function transfer(address to,uint value) public {
        require(blacklist[msg.sender] != true);
       _transfer(msg.sender,to,value);
    }
    function _transfer(address _from, address _to, uint256 _value) internal{
        require(_to !=address(0x0));
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value > balanceOf[_to]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from,_to,_value);
    }
    function approve(address _spender,uint _value)public returns(bool success){
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender,_spender,_value);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){
        require(_value <= allowance[_from][msg.sender]);
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    function block(address blockUser) public {
        require(ascription== msg.sender,"Not the owner of the contract");
        blacklist[blockUser] = true;
    }
}