pragma solidity ^0.8.0;
// SPDX-License-Identifier: Unlicensed

    library SafeMath {//konwnsec//IERC20 接口
        function mul(uint256 a, uint256 b) internal pure returns (uint256) {
            if (a == 0) {
                return 0; 
            }
            uint256 c = a * b;
            assert(c / a == b);
            return c; 
        }
        function div(uint256 a, uint256 b) internal pure returns (uint256) {
// assert(b > 0); // Solidity automatically throws when dividing by 0
            uint256 c = a / b;
// assert(a == b * c + a % b); // There is no case in which this doesn't hold
            return c; 
        }
        function sub(uint256 a, uint256 b) internal pure returns (uint256) {
            assert(b <= a);
            return a - b; 
        }

        function add(uint256 a, uint256 b) internal pure returns (uint256) {
            uint256 c = a + b;
            assert(c >= a);
            return c; 
        }
    }

    interface Erc20Token {//konwnsec//ERC20 接口
        function totalSupply() external view returns (uint256);
        function balanceOf(address _who) external view returns (uint256);
        function transfer(address _to, uint256 _value) external;
        function allowance(address _owner, address _spender) external view returns (uint256);
        function transferFrom(address _from, address _to, uint256 _value) external;
        function approve(address _spender, uint256 _value) external; 
        function burnFrom(address _from, uint256 _value) external; 
            function mint(uint256 amount) external  returns (bool);

        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
        

    }
    
 
 
    

    contract Base {
        using SafeMath for uint;


        Erc20Token constant internal _USDTIns = Erc20Token(0x55d398326f99059fF775485246999027B3197955); 
        Erc20Token constant internal _PICCIns = Erc20Token(0x63714C713bF14de1bF1CC9503a8b8Bae8071169A); 
        // Erc20Token constant internal _USDTIns = Erc20Token(0xc6Ac86DD42E9678962AC196cFe0A1a495989e5c7); 
        // Erc20Token constant internal _PICCIns = Erc20Token(0xfb1CF61C54F65382276B2736350C4d9D759a1385); 
        address  _owner;
        address  _operator;

        modifier onlyOwner() {
            require(msg.sender == _owner, "Permission denied"); _;
        }
        modifier isZeroAddr(address addr) {
            require(addr != address(0), "Cannot be a zero address"); _; 
        }

        modifier only_operator() {
            require(msg.sender == _operator, "Permission denied"); _;
        }

        function transferOwnership(address newOwner) public onlyOwner {
            require(newOwner != address(0));
            _owner = newOwner;
        }

        function transferOperatorship(address newOperator) public onlyOwner {
            require(newOperator != address(0));
            _operator = newOperator;
        }

        receive() external payable {}  
}
 
 
    using SafeMath for uint;

contract DataPlayer is Base{
  
 
    mapping(uint256 => uint256)  public PackagePrice;
    address public ProjectPartyWallet = 0x4594da1f1e4D9e0935F82541C81b1613709d90C9; 
    address public RewardWallet = 0xB57D15263e7c139F2D50a9418123758318589847;
 
    function setaddress(address addr,uint256 WalletType) public onlyOwner  { 
         if(WalletType == 1){
            ProjectPartyWallet = addr;
        }else if(WalletType == 2){
            RewardWallet = addr;
        }
   
    }
}
contract PICCPackage is DataPlayer {
    using SafeMath for uint;
     constructor()
     {
        _owner = msg.sender; 
        _operator = msg.sender; 
    }
 
    function BUYPackage(uint256 ID,uint256 PackageType ) public{
        require(ID > 0, "Package sell out");  
        require( PackagePrice[ID] > 0, "Package sell out");  
        uint256 USDTBalance = 0;
        if(PackageType == 0){
            uint256   Price =  PackagePrice[ID].div(2);
            USDTBalance =   Price;
            _USDTIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTBalance);
        }else if(PackageType == 1)
        {
             USDTBalance = PackagePrice[ID];
            _USDTIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTBalance);
        } 
    }
 
    function setPICCPackagePrice(uint256 ID,uint256 Price) public only_operator  { 
        PackagePrice[ID] = Price;
    }
 
   function TransactionRequest(uint256 USDTNumber ) public    {
        _USDTIns.transferFrom(msg.sender, address(RewardWallet),USDTNumber);
    } 
 
   function PICCRecharge(uint256 USDTNumber ) public    {
        _PICCIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTNumber);
    }
 
    function Withdrawal(uint256 USDTNumber,address PlayerAddress ) public  only_operator  {
        _USDTIns.transferFrom(RewardWallet, PlayerAddress,USDTNumber);
    }     
      
     function setSecurityPassword(uint256 ID) public    { 
         
    }


  
   
}