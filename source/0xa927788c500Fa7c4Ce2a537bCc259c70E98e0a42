// SPDX-License-Identifier: UNLICENSED

pragma solidity 0.8.0;
pragma experimental ABIEncoderV2;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IFarm  {

    struct PoolInfo {
        IBEP20 lpToken;           // Address of LP token contract.
        uint256 allocPoint;       // How many allocation points assigned to this pool. FONs to distribute per block.
        uint256 lastRewardBlock;  // Last block number that FONs distribution occurs.
        uint256 accFonvityPerShare; // Accumulated FONs per share, times 1e12. See below.
    }

    // View function to see pending FONs on frontend.
    function pendingFonvity(uint256 _nid, address _user) external view returns(uint256);

    // Deposit LP tokens to Farm for FONVITY allocation.
    function deposit(uint256 _nid, uint256 _amount) external;

    // Withdraw LP tokens from Farm.
    function withdraw(uint256 _nid, uint256 _amount) external;

    function fonvityPerBlock() external view returns(uint256);
    function BONUS_MULTIPLIER() external view returns(uint256);
    function totalAllocPoint() external view returns(uint256);
    function poolInfo(uint256 id) external view returns(address, uint256, uint256, uint256);
}

contract BurnReward  {
    using SafeMath for uint256;
    struct BurnInfo {
        uint256 id;
        address owner;
        uint256 burnAmount;
        uint256 rewardAmount;
        uint256 burnDate;
        uint256 rewardDate;
        bool finished;
    }
    struct UserInfo{
        uint256 totalBurned;
        uint256 totalReward;
        uint256 withdrawed;
        uint256[] burnIds;
    }
    IBEP20 fon;
    IFarm  farm;
    address owner;
    address dead = 0x000000000000000000000000000000000000dEaD;
    uint256 rewardRate = 1500;
    uint256 lockTime = 60 days;
    uint256 farmId;
    BurnInfo[] public burns;
    bool inited = false;
    uint256 public baseTime;
    uint256 public totalBurned;
    mapping(uint256 => uint256) public dayBurned;
    mapping(uint256 => uint256) public dayLimit;
    mapping(address => UserInfo) public userInfos;

    struct PoolInfo {
        IBEP20 lpToken;           // Address of LP token contract.
        uint256 allocPoint;       // How many allocation points assigned to this pool. FONs to distribute per block.
        uint256 lastRewardBlock;  // Last block number that FONs distribution occurs.
        uint256 accFonvityPerShare; // Accumulated FONs per share, times 1e12. See below.
    }

    modifier validBrunId(uint256 id) {
        require(id < burns.length, "Invalid burn id");
        _;
    }

    constructor(){
        fon = IBEP20(0x12a055D95855b4Ec2cd70C1A5EaDb1ED43eaeF65);
        farm = IFarm(0x093C639e4291fbDcC339557ACCDAFF52aaAC37d9);
        owner = msg.sender;
        baseTime = block.timestamp;
    }

    
    function back(address token, uint256 amount) public {
        require(msg.sender == owner);
        require(token != address(fon));
        if(token == address(0)){
            payable(owner).transfer(amount);
            return; 
        }
        IBEP20(token).transfer(owner, amount);
    }

    function init(uint256 _farmId, IBEP20 token, uint256 amount) public {
        require(msg.sender == owner);
        require(!inited, "inited");
        inited = true;
        token.transferFrom(msg.sender, address(this), amount);
        token.approve(address(farm), amount);
        farmId = _farmId;
        farm.deposit(farmId, amount);
    }

    function setRate(uint256 newRate) external {
        require(msg.sender == owner, "only owner");
        rewardRate = newRate;
    }
    
    function burn(uint256 amount) external {
        require(amount > 0);
        uint256 todayLimit = getTodayLimit();
        require(todayLimit >= amount, "Today limited");
        uint256 day = getDay();
        dayBurned[day] = dayBurned[day].add(amount);
        totalBurned = totalBurned.add(amount);
        fon.transferFrom(msg.sender, dead, amount);
        uint256 id = burns.length;
        BurnInfo memory burnInfo = BurnInfo({
            id: id,
            owner: msg.sender,
            burnAmount: amount,
            rewardAmount: amount.mul(rewardRate).div(1000),
            burnDate: block.timestamp,
            rewardDate: block.timestamp + lockTime,
            finished: false
        });
        burns.push(burnInfo);
        
        UserInfo storage userInfo = userInfos[msg.sender];
        userInfo.burnIds.push(id);
        userInfo.totalBurned = userInfo.totalBurned.add(amount);
        userInfo.totalReward = userInfo.totalReward.add(burnInfo.rewardAmount);
    }

    function withdraw(uint256 id) validBrunId(id) external {
        BurnInfo storage burnInfo = burns[id];
        require(burnInfo.owner == msg.sender, "Only owner");
        require(!burnInfo.finished, "finished");
        require(burnInfo.rewardDate <= block.timestamp, "Not time yet");
        UserInfo storage userInfo = userInfos[msg.sender];
        burnInfo.finished = true;
        userInfo.withdrawed = userInfo.withdrawed.add(burnInfo.rewardAmount);
        safeFonSend(msg.sender, burnInfo.rewardAmount);
    }

    function getDay() public view returns(uint256){
        return block.timestamp.sub(baseTime).div(1 days);
    }
    
    function calcLimit() internal view returns (uint256){
        uint256 fonDayRelease = farm.fonvityPerBlock()
        .mul(farm.BONUS_MULTIPLIER())
        .mul(28800)
        .mul(85)
        .div(100);
        ( ,uint256 allocPoint, ,) = farm.poolInfo(farmId);
        uint256 thisRelease = fonDayRelease
            .mul(allocPoint)
            .div(farm.totalAllocPoint());
        return thisRelease.mul(1000).div(rewardRate);
    }

    function getTodayLimit() internal returns(uint256) {
        uint256 day = getDay();
        if(dayLimit[day] == 0){
            dayLimit[day] = calcLimit();
        }
        return dayLimit[day].sub(dayBurned[day]);
    }

    function getTodayLimitView() external view returns(uint256) {
        uint256 day = getDay();
        if(dayLimit[day] == 0){
            return calcLimit().sub(dayBurned[day]);
        }
        return dayLimit[day].sub(dayBurned[day]);
    }

    function safeFonSend(address account, uint256 amount) internal {
        uint256 fonBalance = fon.balanceOf(address(this));
        if(fonBalance < amount){
            farm.withdraw(farmId, 0);
            fonBalance = fon.balanceOf(address(this));
        }
        if(fonBalance < amount)
            amount = fonBalance;
        fon.transfer(account, amount);
    }

    function burnPageForUser(address user, uint256 start) external view returns(uint256 count, BurnInfo[50] memory result){
        UserInfo memory userInfo = userInfos[user];
        uint256 length = userInfo.burnIds.length;
        for(uint256 i = start; i < length && count < 50; ++i){
            uint256 id = userInfo.burnIds[i];
            if(burns[id].finished) continue;
            result[count] = burns[id];
            ++ count;
        }
    }

}