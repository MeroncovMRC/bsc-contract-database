// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12;
interface IAutoMvM {
    function setAisle(uint256 p1,uint256 p3, uint256 t1, uint256 rateOfincrease) external;
}
interface TokenLike {
    function transfer(address,uint256) external;
}
contract setAutoMvM{

        // --- Auth ---
    mapping (address => uint256) public wards;
    function rely(address usr) external  auth { wards[usr] = 1; }
    function deny(address usr) external  auth { wards[usr] = 0; }
    modifier auth {
        require(wards[msg.sender] == 1, "not-authorized");
        _;
    }

    IAutoMvM avm = IAutoMvM(0xf3c8Bca8F65979d55179754c05DA19C879312926);

    constructor(){
        wards[msg.sender] = 1;
    }
    //向合约地址转入任意数量bnb，自动设置初始值
    receive() external payable {
        autoSetAisle();
    }
   //通过调用函数自动设置初始值
    function autoSetAisle() public {
        avm.setAisle(10000,100000,block.timestamp,101);
    }
   //通过调用函数自动设置护盘价为0
    function unconstraint() public {
        avm.setAisle(0,100000,block.timestamp,101);
    }
   //手动设置护盘价格及计算周期
    function setAisle(uint256 p1,uint256 p3, uint256 t1, uint256 rateOfincrease) public auth {
        avm.setAisle(p1,p3,t1,rateOfincrease);
    }
    
    function withdraw(address asses, uint256 amount, address ust) public auth {
        TokenLike(asses).transfer(ust, amount);
    }

    function withdrawBnB(address payable ust) public auth {
        (bool success, ) = ust.call{value:address(this).balance}("");
        require(success, "Transfer failed.");
    }

}