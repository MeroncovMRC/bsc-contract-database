/// SPDX-License-Identifier: GPLv3
pragma solidity ^0.8.19; 
interface IERC20 { 
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
library SafeMath { 
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
contract oliviainternational {
    using SafeMath for uint256; 
address  payable public owner;
 bool private _paused;
IERC20 public Token;
address payable public paymentWallet;
    constructor (IERC20 _Token)  
    {
          owner=payable(msg.sender);
          Token = _Token;
        
    }
     modifier onlyOwner() {
        require(msg.sender==owner, "Only Call by Owner");
        _;
    }
  function paused() public view virtual returns (bool) {
        return _paused;
    }
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        
    }
    function _unpause() internal virtual whenPaused {
        _paused = false;
        
    }
    function pauseContract() public onlyOwner{
        _pause();

    }
    function unpauseContract() public onlyOwner{
        _unpause();

    }
    function ChangeWallet(address payable add) public onlyOwner{
    paymentWallet = add;

    }     
    function register(address _address)public pure returns(address)
    {
        return _address;
    }   
    function multisendToken(address[] calldata _contributors, uint256[] calldata __balances) external whenNotPaused  onlyOwner
        {

            uint8 i = 0;
            for (i; i < _contributors.length; i++) 
            {
              Token.transfer(_contributors[i], __balances[i]);
            }
        }  
    function sendMultiMatic(address payable[]  memory  _contributors, uint256[] memory __balances) public  payable whenNotPaused
    {
        uint256 i = 0;
        for (i; i < _contributors.length; i++) 
        {
            _contributors[i].transfer(__balances[i]);
        }
    }
    function GetPayment_in_Matic() external payable whenNotPaused
    {
        require(msg.value>0,"Select amount first");
        
    }
    function getpayment_in_token(uint256 _token) external payable whenNotPaused
    {
        Token.transferFrom(msg.sender,address(this),_token);
      
    }  
    function ClaimBNB (uint256 _amount) onlyOwner public whenNotPaused
    {
        payable(msg.sender).transfer(_amount);
    } 
    function claimToken (uint256 _amount) onlyOwner public whenNotPaused
    {
        Token.transfer(msg.sender,_amount);
    }

}