{"CareyLocker.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n\n    Carey Locker\n        - GitHub: https://github.com/JorgeRZT/carey_locker\n        - Contact: locker@careytoken.com\n        - Website: https://www.careylocker.com\n        - Twitter: https://twitter.com/TheCareyLocker\n\n    Parent Project: \n        - Carey Token\n        - BSCScan Link: https://bscscan.com/token/0xea4F1BeFa2382E7705ABE464f0d54410b2cBfEcC\n        - GitHub: https://github.com/JorgeRZT/carey_token\n        - Twitter: https://twitter.com/TheCareyToken\n        - Telegram: https://t.me/carey_token\n        - Contact: carey@careytoken.com\n        - Website: https://www.careytoken.com\n\n    Developer:\n        - Jorge LÃ³pez Pellicer, from Spain\n        - https://www.linkedin.com/in/jorge-lopez-pellicer/\n        - Contact: jorge@careytoken.com\n\n    Description:\n        - Token Locker for ERC20 \u0026 BEP20 Tokens\n\n*/\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract CareyLocker is Ownable {\n\n    uint8 fee;\n    address feeWallet;\n\n    constructor (uint8 _fee, address _feeWallet) {\n        fee = _fee;\n        feeWallet = _feeWallet;\n    }\n\n    struct Lock {\n        uint256 amount;\n        uint256 unlockTime;\n        address tokenAddress;\n    }\n\n    mapping(address =\u003e Lock[]) private _locks;\n\n    event TokensLocked(address indexed user, uint256 amount, uint256 unlockTime, address tokenAddress);\n    event TokensUnlocked(address indexed user, uint256 amount, address tokenAddress);\n    event TokensLockedIncreased(address indexed user, uint256 unlockTime);\n\n    function lockTokens(address tokenAddress, uint256 amount, uint256 unlockTime) external {\n        require(unlockTime \u003e block.timestamp, \"TokenLocker: unlock time must be in the future\");\n        IERC20 token = IERC20(tokenAddress);\n        require(token.allowance(msg.sender, address(this)) \u003e= amount, \"TokenLocker: token allowance too low\");\n\n        uint feeAmount = amount/1000 * fee;\n        if(feeAmount \u003e 0){\n            require(token.transferFrom(msg.sender, feeWallet, feeAmount), \"TokenLocker: token transfer failed\");\n        }\n        require(token.transferFrom(msg.sender, address(this), amount - feeAmount), \"TokenLocker: token transfer failed\");\n        _locks[msg.sender].push(Lock(amount - feeAmount, unlockTime, tokenAddress));\n        emit TokensLocked(msg.sender, amount - feeAmount, unlockTime, tokenAddress);\n    \n    }\n\n    function increaseLockTime(uint256 lockIndex, uint256 newUnlockTime) external {\n        Lock storage lock = _locks[msg.sender][lockIndex];\n        require(newUnlockTime \u003c= lock.unlockTime, \"TokenLocker: unlock time must be after previous lock time\");\n        lock.unlockTime = newUnlockTime;\n        emit TokensLockedIncreased(msg.sender, newUnlockTime);\n    }\n\n    function unlockTokens(uint256 lockIndex) external {\n        Lock storage lock = _locks[msg.sender][lockIndex];\n        require(lock.unlockTime \u003c= block.timestamp, \"TokenLocker: tokens are still locked\");\n        uint256 amount = lock.amount;\n        _locks[msg.sender][lockIndex] = _locks[msg.sender][_locks[msg.sender].length - 1];\n        _locks[msg.sender].pop();\n        IERC20 token = IERC20(owner());\n        require(token.balanceOf(address(this)) \u003e= amount, \"TokenLocker: insufficient balance\");\n        require(token.transfer(msg.sender, amount), \"TokenLocker: token transfer failed\");\n        emit TokensUnlocked(msg.sender, amount, lock.tokenAddress);\n    }\n\n    function getLocksOfSender() external view returns (Lock[] memory) {\n        return _locks[msg.sender];\n    }\n\n    function getLocks(address user) external view returns (Lock[] memory) {\n        return _locks[user];\n    }\n\n    function updateFee(uint8 _fee) public onlyOwner {\n        fee = _fee;\n    }\n\n    function updateWalletFee(address _feeWallet) public onlyOwner {\n        feeWallet = _feeWallet;\n    }\n\n    function getFee() external view returns (uint8) {\n        return fee;\n    }\n    \n    function getFeeWallet() external view returns (address) {\n        return feeWallet;\n    }\n    \n}"},"Context.sol":{"content":"// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"Ownable.sol":{"content":"// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n\nimport \"./Context.sol\";\n\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}}