// SPDX-License-Identifier: MIT

pragma solidity ^0.8.15;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface INFTDividend {
    function addTokenReward(uint256 rewardAmount) external;
}

contract TokenDistributor {
    constructor (address token) {
        IERC20(token).approve(msg.sender, uint(~uint256(0)));
    }
}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => mapping(address => uint256)) private _allowances;

    address public fundAddress;
    address public receivedAddress;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    uint256 public _buyInviteFee = 15;

    uint256 public _sellLPFee = 2;
    uint256 public _sellDestroyFee = 3;
    uint256 public _sellNodeNFTFee = 6;
    uint256 public _sellPartnerNFTFee = 4;

    uint256 public _transferFee = 8;

    uint256 public startTradeBlock;

    mapping(address => bool) public _feeWhiteList;
    mapping(address => bool) public _excludeRewardList;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal;
    uint256 public _rTotal;

    mapping(address => bool) public _swapPairList;

    uint256  public apr15Minutes = 21447;
    uint256 private constant AprDivBase = 100000000;
    uint256 public _lastRewardTime;
    bool public _autoApy;
    uint256 public _invitorHoldCondition;

    bool private inSwap;

    address public _usdt;
    ISwapRouter public _swapRouter;

    address public _nodeNFTAddress;
    address public _partnerNFTAddress;

    TokenDistributor public _tokenDistributor;

    constructor (address RouteAddress, address USDTAddress,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address ReceivedAddress, address FundAddress, address NodeNFTAddress, address PartnerNFTAddress){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        ISwapRouter swapRouter = ISwapRouter(RouteAddress);
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;
        IERC20(USDTAddress).approve(address(swapRouter), MAX);

        _usdt = USDTAddress;
        address swapPair = ISwapFactory(swapRouter.factory()).createPair(address(this), USDTAddress);
        _swapPairList[swapPair] = true;
        _excludeRewardList[swapPair] = true;

        uint256 tTotal = Supply * 10 ** Decimals;
        uint256 base = AprDivBase * 100;
        uint256 rTotal = MAX / base - (MAX / base % tTotal);
        _rOwned[ReceivedAddress] = rTotal;
        _tOwned[ReceivedAddress] = tTotal;
        emit Transfer(address(0), ReceivedAddress, tTotal);
        _rTotal = rTotal;
        _tTotal = tTotal;

        receivedAddress = ReceivedAddress;
        fundAddress = FundAddress;
        _nodeNFTAddress = NodeNFTAddress;
        _partnerNFTAddress = PartnerNFTAddress;

        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[NodeNFTAddress] = true;
        _feeWhiteList[PartnerNFTAddress] = true;
        _feeWhiteList[ReceivedAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(swapRouter)] = true;

        _inProject[msg.sender] = true;

        _tokenDistributor = new TokenDistributor(USDTAddress);
    }

    uint256 public  calApyTimes;

    function calApy() public {
        if (!_autoApy) {
            return;
        }
        uint256 total = _tTotal;
        uint256 maxTotal = _rTotal;
        if (total == maxTotal) {
            return;
        }
        uint256 blockTime = block.timestamp;
        uint256 lastRewardTime = _lastRewardTime;
        if (blockTime < lastRewardTime + 15 minutes) {
            return;
        }
        uint256 deltaTime = blockTime - lastRewardTime;
        uint256 times = deltaTime / 15 minutes;

        for (uint256 i; i < times;) {
            total = total * (AprDivBase + apr15Minutes) / AprDivBase;
            if (total > maxTotal) {
                total = maxTotal;
                break;
            }
        unchecked{
            calApyTimes++;
            if (calApyTimes == 8640) {
                calApyTimes = 0;
                apr15Minutes = apr15Minutes / 2;
                if (apr15Minutes == 0) {
                    _autoApy = false;
                }
            }
            ++i;
        }
        }
        _tTotal = total;
        _lastRewardTime = lastRewardTime + times * 15 minutes;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_excludeRewardList[account]) {
            return _tOwned[account];
        }
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function tokenFromReflection(uint256 rAmount) public view returns (uint256){
        uint256 currentRate = _getRate();
        return rAmount / currentRate;
    }

    function _getRate() public view returns (uint256) {
        if (_rTotal < _tTotal) {
            return 1;
        }
        return _rTotal / _tTotal;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        calApy();

        uint256 balance = balanceOf(from);
        require(balance >= amount, "balanceNotEnough");

        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
            uint256 maxSellAmount = balance * 99999 / 100000;
            if (amount > maxSellAmount) {
                amount = maxSellAmount;
            }
        }

        if (_swapPairList[from] || _swapPairList[to]) {
            if (0 == startTradeBlock) {
                if (_feeWhiteList[from] && _swapPairList[to] && IERC20(to).totalSupply() == 0) {
                    startTradeBlock = block.number;
                    _startAutoApy();
                }
            }

            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                require(0 < startTradeBlock, "!trade");
                if (block.number < startTradeBlock + 4) {
                    _fundTransfer(from, to, amount, 90);
                    return;
                }
            }
        }
        _tokenTransfer(from, to, amount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        if (_feeWhiteList[sender] || _feeWhiteList[recipient]) {
            _fundTransfer(sender, recipient, tAmount, 0);
            return;
        }

        uint256 currentRate = _getRate();
        _subToken(sender, tAmount, currentRate);

        uint256 feeAmount;
        if (_swapPairList[sender]) {//Buy
            uint256 totalInviteAmount = tAmount * _buyInviteFee / 100;
            feeAmount += totalInviteAmount;
            uint256 fundAmount = totalInviteAmount;
            if (totalInviteAmount > 0) {
                address current = recipient;
                address invitor;
                uint256 inviterAmount;
                uint256 perInviteAmount = totalInviteAmount / 30;
                uint256 invitorHoldCondition = _invitorHoldCondition;
                for (uint256 i; i < 10;) {
                    invitor = _inviter[current];
                    if (address(0) == invitor) {
                        break;
                    }
                    if (0 == i) {
                        inviterAmount = perInviteAmount * 10;
                    } else if (1 == i) {
                        inviterAmount = perInviteAmount * 6;
                    } else if (2 == i) {
                        inviterAmount = perInviteAmount * 3;
                    } else if (i <= 6) {
                        inviterAmount = perInviteAmount + perInviteAmount;
                    } else {
                        inviterAmount = perInviteAmount;
                    }
                    if (0 == invitorHoldCondition || balanceOf(invitor) >= invitorHoldCondition) {
                        fundAmount -= inviterAmount;
                        _addToken(sender, invitor, inviterAmount, currentRate);
                    }
                    current = invitor;
                unchecked{
                    ++i;
                }
                }
            }
            if (fundAmount > 1000) {
                _addToken(sender, fundAddress, fundAmount, currentRate);
            }
        } else if (_swapPairList[recipient]) {//Sell
            uint256 lpAmount = tAmount * _sellLPFee / 100;
            if (lpAmount > 0) {
                feeAmount += lpAmount;
                _addToken(sender, address(this), lpAmount, currentRate);
            }

            uint256 destroyAmount = tAmount * _sellDestroyFee / 100;
            if (destroyAmount > 0) {
                feeAmount += destroyAmount;
                _addToken(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount, currentRate);
            }

            uint256 sellNodeNFTAmount = tAmount * _sellNodeNFTFee / 100;
            if (sellNodeNFTAmount > 0) {
                feeAmount += sellNodeNFTAmount;
                _addToken(sender, _nodeNFTAddress, sellNodeNFTAmount, currentRate);
                INFTDividend(_nodeNFTAddress).addTokenReward(sellNodeNFTAmount);
            }

            uint256 sellPartnerNFTAmount = tAmount * _sellPartnerNFTFee / 100;
            if (sellPartnerNFTAmount > 0) {
                feeAmount += sellPartnerNFTAmount;
                _addToken(sender, _partnerNFTAddress, sellPartnerNFTAmount, currentRate);
                INFTDividend(_partnerNFTAddress).addTokenReward(sellPartnerNFTAmount);
            }

            if (!inSwap) {
                inSwap = true;
                uint256 swapAmount = lpAmount;
                if (swapAmount > 0) {
                    address tokenDistributor = address(_tokenDistributor);
                    address[] memory path = new address[](2);
                    path[0] = address(this);
                    path[1] = _usdt;
                    _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                        swapAmount / 2,
                        0,
                        path,
                        tokenDistributor,
                        block.timestamp
                    );
                    uint256 usdtBalance = IERC20(_usdt).balanceOf(tokenDistributor);
                    IERC20(_usdt).transferFrom(tokenDistributor, address(this), usdtBalance);
                    _swapRouter.addLiquidity(
                        address(this), _usdt, swapAmount / 2, usdtBalance, 0, 0, receivedAddress, block.timestamp
                    );
                }
                inSwap = false;
            }
        } else {//Transfer
            uint256 transferFeeAmount = tAmount * _transferFee / 100;
            if (transferFeeAmount > 0) {
                feeAmount += transferFeeAmount;
                _addToken(sender, address (0x000000000000000000000000000000000000dEaD), transferFeeAmount, currentRate);
            }
        }

        _addToken(sender, recipient, tAmount - feeAmount, currentRate);
    }

    function _fundTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 fundFee
    ) private {
        uint256 currentRate = _getRate();
        _subToken(sender, tAmount, currentRate);
        uint256 fundAmount = tAmount * fundFee / 100;
        if (fundAmount > 0) {
            _addToken(sender, fundAddress, fundAmount, currentRate);
        }
        _addToken(sender, recipient, tAmount - fundAmount, currentRate);
    }

    function _subToken(address sender, uint256 tAmount, uint256 currentRate) private {
        if (_tOwned[sender] > tAmount) {
            _tOwned[sender] -= tAmount;
        } else {
            _tOwned[sender] = 0;
        }
        uint256 rAmount = tAmount * currentRate;
        _rOwned[sender] = _rOwned[sender] - rAmount;
    }

    function _addToken(
        address sender,
        address to,
        uint256 tAmount,
        uint256 currentRate
    ) private {
        _tOwned[to] += tAmount;

        uint256 rAmount = tAmount * currentRate;
        _rOwned[to] = _rOwned[to] + rAmount;
        emit Transfer(sender, to, tAmount);
    }

    receive() external payable {}

    function claimBalance() external onlyFunder {
        payable(receivedAddress).transfer(address(this).balance);
    }

    function claimToken(address token, uint256 amount, address to) external onlyFunder {
        IERC20(token).transfer(to, amount);
    }

    function setFundAddress(address addr) external onlyFunder {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setReceivedAddress(address addr) external onlyFunder {
        receivedAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setNodeNFTAddress(address addr) external onlyOwner {
        _nodeNFTAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setPartnerNFTAddress(address addr) external onlyOwner {
        _partnerNFTAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setFeeWhiteList(address addr, bool enable) external onlyFunder {
        _feeWhiteList[addr] = enable;
    }

    function setSwapPairList(address addr, bool enable) external onlyFunder {
        _swapPairList[addr] = enable;
        if (enable) {
            _excludeRewardList[addr] = true;
        }
    }

    function setExcludeReward(address addr, bool enable) external onlyFunder {
        _tOwned[addr] = balanceOf(addr);
        _rOwned[addr] = _tOwned[addr] * _getRate();
        _excludeRewardList[addr] = enable;
    }

    function startAutoApy() external onlyFunder {
        require(!_autoApy, "autoAping");
        _startAutoApy();
    }

    function _startAutoApy() private {
        _autoApy = true;
        _lastRewardTime = block.timestamp;
    }

    function emergencyCloseAutoApy() external onlyFunder {
        _autoApy = false;
    }

    function closeAutoApy() external onlyFunder {
        calApy();
        _autoApy = false;
    }

    function setApr15Minutes(uint256 apr) external onlyFunder {
        calApy();
        apr15Minutes = apr;
    }

    function setInvitorHoldCondition(uint256 amount) external onlyFunder {
        _invitorHoldCondition = amount * 10 ** _decimals;
    }

    modifier onlyFunder() {
        require(_owner == msg.sender || receivedAddress == msg.sender, "!Funder");
        _;
    }

    mapping(address => address) public _inviter;
    mapping(address => address[]) public _binders;
    mapping(address => uint256) public _teamNum;
    mapping(address => bool) public _inProject;
    
    function bindInvitor(address account, address invitor) public {
        address caller = msg.sender;
        require(_inProject[caller], "notInProj");
        _bindInvitor(account, invitor);
    }

    function bindInvitor(address invitor) public {
        address account = msg.sender;
        _bindInvitor(account, invitor);
    }

    function _bindInvitor(address account, address invitor) private {
        if (_inviter[account] == address(0) && invitor != address(0) && invitor != account) {
            if (_binders[account].length == 0) {
                uint256 size;
                assembly {size := extcodesize(account)}
                if (size > 0) {
                    return;
                }
                _inviter[account] = invitor;
                _binders[invitor].push(account);
                _teamNum[invitor] += 1;
                for (uint256 i = 1; i < 10;) {
                    invitor = _inviter[invitor];
                    if (address(0) == invitor) {
                        break;
                    }
                unchecked{
                    _teamNum[invitor] += 1;
                    ++i;
                }
                }
            }
        }
    }

    function setInProject(address adr, bool enable) external onlyFunder {
        _inProject[adr] = enable;
    }

    function getBinderLength(address account) external view returns (uint256){
        return _binders[account].length;
    }
}

contract SunGod is AbsToken {
    constructor() AbsToken(
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
        address(0x55d398326f99059fF775485246999027B3197955),
        "SUN GOD",
        "SG",
        6,
        1000000000,
        address(0x62B5AEa2A5807A6784893D8d5972D7e65Ea515F0),
        address(0xB20114EaEdb3cbFa8348f1C88458EAE4b791dFaC),
        address(0xBB9797b90a1b5A2a03cBA1007B9642783a1924d8),
        address(0x300080F25926BE53C1b4Ca473a8907CDf2607D7F)
    ){

    }
}