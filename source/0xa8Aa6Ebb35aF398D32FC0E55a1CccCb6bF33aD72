{"DENv2.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface IPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\ncontract DENv2 is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // Fee Taken On Swaps (e.g., 15/10000 = 0.0015 = 0.15%)\r\n    uint256 public systemFee      = 15;\r\n    uint256 public referralFee    = 20;\r\n    uint256 public feeDenominator = 10000;\r\n\r\n    // Fee Recipient\r\n    address public systemFeeReceiver;   //0x0aaA18c723B3e57df3988c4612d4CC7fAdD42a34 (Eclipse DAO Multisig)\r\n    address public referralFeeReceiver; //0x091dD81C8B9347b30f1A4d5a88F92d6F2A42b059 (Useless Deployer)\r\n\r\n    // Wrapped Native Coin\r\n    // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 (Wrapped ETH)\r\n    // 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c (Wrapped BSC)\r\n    // 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270 (Wrapped MATIC)\r\n    // 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7 (Wrapped AVAX)\r\n    // 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83 (Wrapped FTM)\r\n    // 0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a (Wrapped ONE)\r\n    // 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1 (Wrapped Arbitrum)\r\n    address public WETH;\r\n\r\n    // Create a struct to group local variables together to avoid stack too deep errors\r\n    struct SwapVars {\r\n        address token0;\r\n        uint amountInput;\r\n        uint amountOutput;\r\n        uint reserve0;\r\n        uint reserve1;\r\n        uint reserveInput;\r\n        uint reserveOutput;\r\n    }\r\n\r\n    constructor(address WETH_, address systemFeeReceiver_, address referralFeeReceiver_) {\r\n        require(WETH_ != address(0), \u0027Zero Address\u0027);\r\n        require(systemFeeReceiver_ != address(0), \u0027Zero Address\u0027);\r\n        require(referralFeeReceiver_ != address(0), \u0027Zero Address\u0027);\r\n        WETH = WETH_;\r\n        systemFeeReceiver = systemFeeReceiver_;\r\n        referralFeeReceiver = referralFeeReceiver_;\r\n    }\r\n\r\n    function setSystemFee(uint newSystemFee) external onlyOwner {\r\n        require((newSystemFee + referralFee) \u003c= 200, \u0027System fee with referral fee too high\u0027);\r\n        systemFee = newSystemFee;\r\n    }\r\n\r\n    function setReferralFee(uint newReferralFee) external onlyOwner {\r\n        require((newReferralFee + systemFee) \u003c= 200, \u0027Referral fee with system fee too high\u0027);\r\n        referralFee = newReferralFee;\r\n    }\r\n\r\n    function setSystemFeeRecipient(address newSystemFeeRecipient) external onlyOwner {\r\n        require(newSystemFeeRecipient != address(0), \u0027Zero Address\u0027);\r\n        systemFeeReceiver = newSystemFeeRecipient;\r\n    }\r\n\r\n    function setReferralFeeRecipient(address newReferralFeeRecipient) external onlyOwner {\r\n        require(newReferralFeeRecipient != address(0), \u0027Zero Address\u0027);\r\n        referralFeeReceiver = newReferralFeeRecipient;\r\n    }\r\n\r\n    function swapETHForToken(address DEX, address token, uint amountOutMin) external payable {\r\n        // input validation\r\n        require(DEX != address(0), \u0027Zero Address\u0027);\r\n        require(token != address(0), \u0027Zero Address\u0027);\r\n        require(msg.value \u003e 0, \u0027Zero Value\u0027);\r\n\r\n        // determine and collect fees\r\n        uint _systemFeeAmount = getSystemFeeAmount(msg.value);\r\n        uint _referralFeeAmount = getReferralFeeAmount(msg.value);\r\n        _sendETH(systemFeeReceiver, _systemFeeAmount);\r\n        _sendETH(referralFeeReceiver, _referralFeeAmount);\r\n\r\n        // instantiate router\r\n        IUniswapV2Router02 router = IUniswapV2Router02(DEX);\r\n\r\n        // define swap path\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = token;\r\n\r\n        // make the swap\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value - (_systemFeeAmount + _referralFeeAmount)\r\n        } (amountOutMin, path, msg.sender, block.timestamp + 300);\r\n\r\n        // save memory\r\n        delete path;\r\n    }\r\n\r\n    function swapTokenForETH(address DEX, address token, uint amount, uint amountOutMin) external {\r\n        require(DEX != address(0), \u0027Zero Address\u0027);\r\n        require(token != address(0), \u0027Zero Address\u0027);\r\n        require(amount \u003e 0, \u0027Zero Value\u0027);\r\n\r\n        // liquidity pool\r\n        IPair pair = IPair(IUniswapV2Factory(IUniswapV2Router02(DEX).factory()).getPair(token, WETH));\r\n        _transferIn(msg.sender, address(pair), token, amount);\r\n\r\n        // handle swap logic\r\n        (address input, address output) = (token, WETH);\r\n\r\n        SwapVars memory vars;\r\n        (vars.token0,) = sortTokens(input, output);\r\n        (vars.reserve0, vars.reserve1,) = pair.getReserves();\r\n        (vars.reserveInput, vars.reserveOutput) = input == vars.token0 ? (vars.reserve0, vars.reserve1) : (vars.reserve1, vars.reserve0);\r\n        vars.amountInput = IERC20(input).balanceOf(address(pair)).sub(vars.reserveInput);\r\n        vars.amountOutput = getAmountOut(vars.amountInput, vars.reserveInput, vars.reserveOutput);\r\n        (uint amount0Out, uint amount1Out) = input == vars.token0 ? (uint(0), vars.amountOutput) : (vars.amountOutput, uint(0));\r\n\r\n        // make the swap\r\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\r\n\r\n        // check output amount\r\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\r\n        require(amountOut \u003e= amountOutMin, \u0027INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        IWETH(WETH).withdraw(amountOut);\r\n\r\n        // take fee in bnb\r\n        uint _systemFeeAmount = getSystemFeeAmount(amountOut);\r\n        uint _referralFeeAmount = getReferralFeeAmount(amountOut);\r\n        _sendETH(systemFeeReceiver, _systemFeeAmount);\r\n        _sendETH(referralFeeReceiver, _referralFeeAmount);\r\n        \r\n        // send rest to sender\r\n        _sendETH(msg.sender, amountOut - (_systemFeeAmount + _referralFeeAmount));\r\n    }\r\n\r\n    function swapTokenForToken(address DEX, address tokenIn, address tokenOut, uint amountIn, uint amountOutMin) external {\r\n        require(DEX != address(0), \u0027Zero Address\u0027);\r\n        require(tokenIn != address(0), \u0027Zero Address\u0027);\r\n        require(tokenOut != address(0), \u0027Zero Address\u0027);\r\n        require(amountIn \u003e 0, \u0027Zero Value\u0027);\r\n\r\n        // fetch fee and transfer in to receiver\r\n        uint _systemFeeAmount = getSystemFeeAmount(amountIn);\r\n        uint _referralFeeAmount = getReferralFeeAmount(amountIn);\r\n        _transferIn(msg.sender, systemFeeReceiver, tokenIn, _systemFeeAmount);\r\n        _transferIn(msg.sender, referralFeeReceiver, tokenIn, _referralFeeAmount);\r\n\r\n        // transfer rest into liquidity pool\r\n        IPair pair = IPair(IUniswapV2Factory(IUniswapV2Router02(DEX).factory()).getPair(tokenIn, tokenOut));\r\n        _transferIn(\r\n            msg.sender, \r\n            address(pair), \r\n            tokenIn,\r\n            amountIn - (_systemFeeAmount + _referralFeeAmount)\r\n        );\r\n\r\n        // handle swap logic\r\n        (address input, address output) = (tokenIn, tokenOut);\r\n\r\n        SwapVars memory vars;\r\n        (vars.token0,) = sortTokens(input, output);\r\n        (vars.reserve0, vars.reserve1,) = pair.getReserves();\r\n        (vars.reserveInput, vars.reserveOutput) = input == vars.token0 ? (vars.reserve0, vars.reserve1) : (vars.reserve1, vars.reserve0);\r\n        vars.amountInput = IERC20(input).balanceOf(address(pair)).sub(vars.reserveInput);\r\n        vars.amountOutput = getAmountOut(vars.amountInput, vars.reserveInput, vars.reserveOutput);\r\n        (uint amount0Out, uint amount1Out) = input == vars.token0 ? (uint(0), vars.amountOutput) : (vars.amountOutput, uint(0));\r\n\r\n        // make the swap\r\n        uint before = IERC20(tokenOut).balanceOf(msg.sender);\r\n        pair.swap(amount0Out, amount1Out, msg.sender, new bytes(0));\r\n        uint received = IERC20(tokenOut).balanceOf(msg.sender).sub(before);\r\n\r\n        // check output amount\r\n        require(received \u003e= amountOutMin, \u0027INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint amountInWithFee = amountIn.mul(9970); // hardcoded DEX fee estimate\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027PancakeLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n    function getSystemFeeAmount(uint amount) public view returns (uint) {\r\n        return (amount * systemFee) / feeDenominator;\r\n    }\r\n\r\n    function getReferralFeeAmount(uint amount) public view returns (uint) {\r\n        return (amount * referralFee) / feeDenominator;\r\n    }\r\n\r\n    function _sendETH(address receiver, uint amount) internal {\r\n        (bool s,) = payable(receiver).call{value: amount}(\"\");\r\n        require(s, \u0027Failure On ETH Transfer\u0027);\r\n    }\r\n\r\n    function _transferIn(address fromUser, address toUser, address token, uint amount) internal returns (uint) {\r\n        uint before = IERC20(token).balanceOf(toUser);\r\n        bool s = IERC20(token).transferFrom(fromUser, toUser, amount);\r\n        uint received = IERC20(token).balanceOf(toUser) - before;\r\n        require(s \u0026\u0026 received \u003e 0 \u0026\u0026 received \u003c= amount, \u0027Error On Transfer From\u0027);\r\n        return received;\r\n    }\r\n\r\n    receive() external payable {}\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set \u0026 change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}