{"BEP20.sol":{"content":"pragma solidity 0.5.16;\nimport \"./SafeMath.sol\";\nimport \"./IBEP20.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\n \ncontract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\n \ncontract Pausable is Ownable {\n    event Paused(address account);\n\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ncontract BEP20Token is Context, IBEP20, Ownable, Pausable {\n  using SafeMath for uint256;\n\n  mapping (address =\u003e uint256) private _balances;\n\n  mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n  uint8 private _decimals;\n  string private _symbol;\n  string private _name;\n\n  constructor(string memory name,string memory symbol, uint256 supply, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n    _totalSupply = supply * (10 ** uint256(_decimals)) ;\n    _balances[msg.sender] = _totalSupply;\n\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address) {\n    return owner();\n  }\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {BEP20-totalSupply}.\n   */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {BEP20-balanceOf}.\n   */\n  function balanceOf(address account) public view returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {BEP20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount) public returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {BEP20-allowance}.\n   */\n  function allowance(address owner, address spender) public whenNotPaused view returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {BEP20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount) external whenNotPaused returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n  \n  /**\n   * @dev See {BEP20-burn}.\n   */\n   \n  function burn(address account, uint256 amount) public whenNotPaused onlyOwner  returns (bool) {\n    _burn(account, amount);\n    return true;\n  }\n  \n  /**\n   * @dev See {BEP20-burnFrom}.\n   */\n   \n  function burnFrom(address account, uint256 amount) public whenNotPaused onlyOwner  returns (bool) {\n    _burnFrom(account, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {BEP20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {BEP20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for `sender`\u0027s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {BEP20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {BEP20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n    return true;\n  }\n\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(address owner, address spender, uint256 amount) internal {\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n   * from the caller\u0027s allowance.\n   *\n   * See {_burn} and {_approve}.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    _burn(account, amount);\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\n  }\n}\n"},"DLC.sol":{"content":"pragma solidity 0.5.16;\nimport \"./SafeMath.sol\";\nimport \"./IBEP20.sol\";\nimport \"./BEP20.sol\";\n\n/**\n * @dev Implementation of DLC TOKEN\n * This contract is base on the Implementation of BEP20Token and 5ROI TOKEN\n * src: https://github.com/binance-chain/BEPs/blob/master/BEP20.md\n * src: https://github.com/5roiglobal/smartcontract\n */\n \n\ncontract DLCToken is BEP20Token{\n    using SafeMath for uint256;\n/**\n * @dev Time Unit constant\n * convert second into human readable time unit\n */\n    //Timeline\n    uint constant MONTH = 2629743;\n\n    /**\n     * @dev total coin supply and decimals\n     * @var DLCSUPPLY total DLC coin supply\n     * @var DECIMALS Decimals of DLC TOKEN\n     */\n\n    uint256 constant DLCSUPPLY = 2500000000;\n    uint8 constant DECIMALS = 18;\n\n    /**\n     * @dev ultils for Transfer and Lock\n     */\n    \n    struct LockItem {\n        uint256  releaseDate;\n        uint256  amount;\n    }\n    \n    /**\n     * @dev add address of fund receiver for the initial fund allocation \n    */\n    \n    address private marketingWallet =   0x4fcD01Edf05b1EBD8f66638f6C9d0312Df8af4ce;\n    address private teamWallet =        0xB1C594206145e3401e4005A69114134c2E2a3fB3;\n    address private partnerWallet =     0x4E47FCf5908F5f88F33E7b0f558e234ABAA7C246;\n    address private serviceWallet =     0x6ecaCced313Bc500aBE6E1ec34BE23888a8E777A;\n    \n\n    mapping(address =\u003e uint256) private privateSale;\n    mapping (address =\u003e LockItem[]) private lockList;\n   \n    address[] private lockedAddressList; // list of addresses that have some fund currently or previously locked\n     \n    //Date map\n    uint[] private quarterPublic;\n    \n    uint256 amount;\n    uint period;\n    uint unit;\n    uint256 amountWithDecimal = 10 ** uint256(DECIMALS);\n    constructor() public payable BEP20Token(\"DLCTOKEN\",\"DLC\", DLCSUPPLY, DECIMALS) {\n        \n        //Private sale allocation\n        \n        /**\n         * @dev modified the amount that want to transfer \n         * @var amount enter a human friendly amount \n         */\n\n        //Partner allocation\n        amount = 250000000;         // partner wallet, 250 million coins\n        BEP20Token.transfer(partnerWallet, amount * amountWithDecimal);\n        \n        //Team allocation\n        amount = 250000000;         // team wallet, 250 million coins\n        BEP20Token.transfer(teamWallet, amount * amountWithDecimal);\n        \n        //Marketing wallet allocation\n        amount = 250000000;         // marketing wallet, 250 million coins\n        BEP20Token.transfer(marketingWallet, amount * amountWithDecimal);\n        \n        amount = 175000000;         //unlock first 2 quarters for serviceWallet, 175 million coins \n        BEP20Token.transfer(serviceWallet, amount * amountWithDecimal);\n\n        /**\n         * @dev transfer amount according to the frequency period of a time unit\n         * @var period total period repeat overtime\n         * @var unit hour, month, year - could use these base constant unit declare at constant list to generate custom unit such as quarter, bi-annual,etc\n         * @var percentage sent certain % fund each time\n         * Total time period = period * unit\n         */\n\n        period = 20;            //Timeline for serviceWalletallocation - 20 quarters\n        unit =  3* MONTH;        // 3 months = a quarter\n        amount = 87500000;       // 87.5 million tokens unlocked to serviceWallet \n\n        for(uint i = 0; i \u003c period; i ++) {\n            quarterPublic.push(block.timestamp + i * unit);\n        }\n        \n\n        //Transfer locked tokens from quarter 3 to quarter 20\n    \n        for(uint i = 2; i \u003c quarterPublic.length; i ++) {\n            transferAndLock(serviceWallet, amount * amountWithDecimal, quarterPublic[i]);\n        }\n    }\n    \n    /**\n     * @dev transfer of token to another address.\n     * always require the sender has enough balance\n     * @return the bool true if success. \n     * @param _receiver The address to transfer to.\n     * @param _amount The amount to be transferred.\n     */\n\n    function transfer(address _receiver, uint256 _amount) public whenNotPaused returns (bool success) {\n        require(_receiver != address(0)); \n        require(_amount \u003c= getAvailableBalance(msg.sender));\n        return BEP20Token.transfer(_receiver, _amount);\n    }\n\n    /**\n     * @dev transfer of token on behalf of the owner to another address. \n     * always require the owner has enough balance and the sender is allowed to transfer the given amount\n     * @return the bool true if success. \n     * @param _from The address to transfer from.\n     * @param _receiver The address to transfer to.\n     * @param _amount The amount to be transferred.\n     */\n    \n     \n    function transferFrom(address _from, address _receiver, uint256 _amount) public whenNotPaused returns (bool) {\n        require(_from != address(0));\n        require(_receiver != address(0));\n        require(_amount \u003c= BEP20Token.allowance(_from, msg.sender));\n        require(_amount \u003c= getAvailableBalance(_from));\n        return BEP20Token.transferFrom(_from, _receiver, _amount);\n    }\n\n    /**\n     * @dev transfer of token on behalf of the owner to another address. \n     * always require the owner has enough balance and the sender is allowed to transfer the given amount\n     * @return the bool true if success. \n     * @param _receiver The address to transfer to.\n     * @param _amount The amount to be transferred.\n     */\n\n    function transferAndLock(address _receiver, uint256 _amount, uint256 _releaseDate) public returns (bool success) {\n        //Require the transferAndLock for only few wallet address\n        require(msg.sender == teamWallet || msg.sender == serviceWallet || msg.sender ==   marketingWallet || msg.sender == owner() || msg.sender == partnerWallet);\n        BEP20Token._transfer(msg.sender,_receiver,_amount);\n        \n        if (lockList[_receiver].length==0) lockedAddressList.push(_receiver);\n        \n        LockItem memory item = LockItem({amount:_amount, releaseDate:_releaseDate});\n        lockList[_receiver].push(item);\n    \n        return true;\n    }\n   \n    // Dapp Functionality\n\n   /**\n     * @dev querry the list of address that have at least a fund locked currently or in the past\n     * @return the list of all addresses \n     */\n\n    function getLockedAddresses() public view returns (address[] memory) {\n        return lockedAddressList;\n    }\n    \n   /**\n     * @dev count the number of account that have at least a fund locked currently or in the past\n     * @return the number of addresses \n     */\n\n    function getNumberOfLockedAddresses() public view returns (uint256 _count) {\n        return lockedAddressList.length;\n    }\n        \n        \n   /**\n     * @dev check the number address that have at least a fund locked currently\n     * @return the number of addresses \n     */\n\n    function getNumberOfLockedAddressesCurrently() public view returns (uint256 _count) {\n        uint256 count=0;\n        for(uint256 i = 0; i\u003clockedAddressList.length; i++) {\n            if (getLockedAmount(lockedAddressList[i])\u003e0) count++;\n        }\n        return count;\n    }\n        \n   /**\n     * @dev check the list of address that have at least a fund locked currently\n     * @return the list of all addresses \n     */\n\n    function getLockedAddressesCurrently() public view returns (address[] memory) {\n        address [] memory list = new address[](getNumberOfLockedAddressesCurrently());\n        uint256 j = 0;\n        for(uint256 i = 0; i\u003clockedAddressList.length; i++) {\n            if (getLockedAmount(lockedAddressList[i])\u003e0) {\n                list[j] = lockedAddressList[i];\n                j++;\n            }\n        }\n        \n        return list;\n    }\n\n   /**\n     * @dev check locked funds of a given address.\n     * @return the total amount of locked fund in an address\n     * @param lockedAddress The address to check.\n     */\n     \n    function getLockedAmount(address lockedAddress) public view returns(uint256 _amount) {\n        uint256 lockedAmount =0;\n        for(uint256 j = 0; j\u003clockList[lockedAddress].length; j++) {\n            if(block.timestamp \u003c lockList[lockedAddress][j].releaseDate) {\n                uint256 temp = lockList[lockedAddress][j].amount;\n                lockedAmount += temp;\n            }\n        }\n        return lockedAmount;\n    }\n    \n   /**\n     * @dev  check the total of locked funds at the current time\n     * @return the total amount of locked fund\n     */\n     \n    function getLockedAmountTotal() public view returns(uint256 _amount) {\n        uint256 sum =0;\n        for(uint256 i = 0; i\u003clockedAddressList.length; i++) {\n            uint256 lockedAmount = getLockedAmount(lockedAddressList[i]);\n            sum = sum.add(lockedAmount);\n        }\n        return sum;\n    }\n    \n   /**\n     * @dev check of locked funds of a given address.\n     * @return the total amount \n     * @param lockedAddress The address to check.\n     */\n     \n    function getAvailableBalance(address lockedAddress) public view returns(uint256 _amount) {\n        uint256 bal = BEP20Token.balanceOf(lockedAddress);\n        uint256 locked = getLockedAmount(lockedAddress);\n        return bal.sub(locked);\n    }\n    \n   /**\n     * @dev  check amount circulating coins that are not locked at the current time\n     * @return the total amount\n     */\n     \n    function getCirculatingSupplyTotal() public view returns(uint256 _amount) {\n        return BEP20Token.totalSupply().sub(getLockedAmountTotal());\n    }\n}"},"IBEP20.sol":{"content":"pragma solidity 0.5.16;\n\n//Reference: https://github.com/binance-chain/BEPs/blob/master/BEP20.md\ninterface IBEP20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n  // Empty internal constructor, to prevent people from mistakenly deploying\n  // an instance of this contract, which should be used via inheritance.\n  constructor () internal { }\n\n  function _msgSender() internal view returns (address payable) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode\n    return msg.data;\n  }\n}\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.16;\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\n\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n"}}