// SPDX-License-Identifier: MIT


pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

pragma solidity ^0.8.0;


interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


pragma solidity ^0.8.0;



contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    mapping(address => bool) admin;

    uint256 public _swapRate_to_burn = 5;
    uint256 public _swapRate_to_NFt = 5;
    address public _NFt_address;
    uint256 public _swapRate_to_Tsr = 3;
    address public _swapRate_to_Tsr_address;
    uint256 public _swapRate_to_marketing = 2;
    address public _marketing_to_splitter_address;
    uint256 public _total_swapSell_amount;
    uint256 public _total_swapBuy_amount;
    uint256 public _total_swapT_amount;
    uint256 public _total_swap_amount_to_burn;
    uint256 public _total_swap_amount_to_NFt;
    uint256 public _total_swap_amount_to_Tsr;
    uint256 public _total_swap_amount_to_marketing;
    uint256 public _underlying_Supply =10000000 * 100000000;


    mapping(address => bool) private _isSwapInclude;


    function set_swapRate_to_Tsr_address(address _address) public virtual {
        require(admin[_msgSender()], "Only admin can set swapRate_to_Tsr_address");
        _swapRate_to_Tsr_address = _address;
    }

    function get_underlying_Supply() public view returns (uint256){
        return _underlying_Supply;
    }

    function set_marketing_to_splitter_address(address _address) public virtual {
        require(admin[_msgSender()], "Only admin can set swapRate_to_marketing_address");
        _marketing_to_splitter_address = _address;
    }

    function set_NFt_address(address _address) public virtual {
        require(admin[_msgSender()], "Only admin can set NFt_address");
        _NFt_address = _address;
    }

    function v_isSwapInclude(address _address) public view returns (bool){
        return _isSwapInclude[_address];
    }

    function add_isSwapInclude(address sender, bool isSwapInclude) public virtual {
        require(admin[_msgSender()], "Only admin can add isSwapInclude");
        _isSwapInclude[sender] = isSwapInclude;

    }

    function set_admin(address sender, bool isAdmin) public virtual {
        require(admin[_msgSender()], "Only admin can add admin");
        admin[sender] = isAdmin;
    }



    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        uint256 _remainingBalance = amount / 1000;
        amount = amount - _remainingBalance;
    unchecked {
        _balances[from] = fromBalance - amount;
    }


        uint256 _Tsr_amount = amount * _swapRate_to_Tsr / 100;
        uint256 _marketing_amount = amount * _swapRate_to_marketing / 100;

        if(_totalSupply > _underlying_Supply){


            if (_isSwapInclude[from]) {
                uint256 _burn_amount = amount * _swapRate_to_burn / 100;
                _total_swapBuy_amount = _total_swapBuy_amount + amount;
                _total_swap_amount_to_burn = _total_swap_amount_to_burn + _burn_amount;
                _total_swap_amount_to_Tsr = _total_swap_amount_to_Tsr + _Tsr_amount;
                _total_swap_amount_to_marketing = _total_swap_amount_to_marketing + _marketing_amount;
                _totalSupply -= _burn_amount;
                _total_swapT_amount = _total_swapT_amount + amount;
                _balances[address(0)] += _burn_amount;
                _balances[_swapRate_to_Tsr_address] += _Tsr_amount;
                _balances[_marketing_to_splitter_address] += _marketing_amount;
                _balances[to] += amount - _burn_amount - _Tsr_amount - _marketing_amount;


            } else if (_isSwapInclude[to]) {
                _total_swapSell_amount = _total_swapSell_amount + amount;
                uint256 _NFt_amount = amount * _swapRate_to_NFt / 100;
                _total_swap_amount_to_NFt = _total_swap_amount_to_NFt + _NFt_amount;
                _total_swap_amount_to_Tsr = _total_swap_amount_to_Tsr + _Tsr_amount;
                _total_swap_amount_to_marketing = _total_swap_amount_to_marketing + _marketing_amount;
                _balances[_NFt_address] += _NFt_amount;
                _total_swapT_amount = _total_swapT_amount + amount;
                _balances[_swapRate_to_Tsr_address] += _Tsr_amount;
                _balances[_marketing_to_splitter_address] += _marketing_amount;
                _balances[to] += amount - _NFt_amount - _Tsr_amount - _marketing_amount;

            } else
            {
                uint256 _burn_amount = amount * _swapRate_to_burn / 100;
                _total_swap_amount_to_burn = _total_swap_amount_to_burn + _burn_amount;
                _totalSupply -= _burn_amount;
                _balances[address(0)] += _burn_amount;
                _balances[to] += amount - _burn_amount;

            }
        }else
        {
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }






    constructor(string memory name_, string memory symbol_)  {
        _name = name_;
        _symbol = symbol_;
        admin[msg.sender] = true;
    }


    function name() public view virtual override returns (string memory) {
        return _name;
    }


    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }


    function decimals() public view virtual override returns (uint8) {
        return 8;
    }

  
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }


    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }


    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }


    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }


    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }


    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(owner, spender, currentAllowance - subtractedValue);
    }

        return true;
    }




    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }


    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {
        _balances[account] = accountBalance - amount;
    }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }


    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }


    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
        unchecked {
            _approve(owner, spender, currentAllowance - amount);
        }
        }
    }


    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}


    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}


}

pragma solidity ^0.8.0;


abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}

pragma solidity ^0.8.0;


contract ERC20PresetFixedSupply is ERC20Burnable {
    /**
     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.
     *
     * See {ERC20-constructor}.
     */

    constructor(
        string memory name,
        string memory symbol,
        uint256 initialSupply,
        address owner,
        address _liquidity_address
    ) ERC20(name, symbol) {
        uint256 liquidity = initialSupply /100;
        initialSupply = initialSupply - liquidity;
        _mint(_liquidity_address, liquidity);
        _mint(owner, initialSupply);
    }
}