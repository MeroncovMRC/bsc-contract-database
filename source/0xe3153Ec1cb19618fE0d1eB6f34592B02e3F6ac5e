/**
 *Submitted for verification at BscScan.com on 2023-07-06
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ownable {
    address public _owner;
    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }
}

contract ADEX2Token is IERC20 , Ownable{
    string public constant name = "ADEX2 Token";
    string public constant symbol = "ADEX2";
    uint8 public constant decimals = 18;
    uint256 private _totalSupply = 10500000 * 10 ** uint256(decimals);
    address public constant BURN_ADDRESS = 0xF2e74229738E687E8c6F9350ED6D8f845630Dda1;
    address public uniswapV2Pair;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor() {
        _balances[msg.sender] = _totalSupply;
        _owner = msg.sender;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender,recipient,amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: insufficient balance");
        bool sxf = true;
        // buy
		if(sender == uniswapV2Pair || recipient == uniswapV2Pair) {
            sxf = true;
        }else{
            sxf = false;
        }
        _balances[sender] -= amount;
        if(sxf){
            uint256 fee = (amount * 10) / 1000; // 0.1% fee
            uint256 newAmount = amount - fee;
            _balances[recipient] += newAmount;
            _balances[BURN_ADDRESS] += fee;
            emit Transfer(sender, recipient, newAmount);
            emit Transfer(sender, BURN_ADDRESS, fee);
        }else{
            _balances[recipient] += amount;
            emit Transfer(sender, recipient, amount);
        }

    }
    function changeRouter(address router) public onlyOwner {
        uniswapV2Pair = router;
    }
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}