// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract NehilFlatEarth5DToken {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address public admin;
    address public marketing;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        name = "Nehil Flat Earth 5D Token";
        symbol = "5D";
        decimals = 9;
        totalSupply = 8000000000 * 10**decimals;
        balanceOf[msg.sender] = totalSupply;
        admin = 0xc2A112cE327d0A08A2465b2Ae4955D782CBF0bbe;
        marketing = 0x22b2ff61284c07A49b0434F7c153f37B0D13e0f8;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_spender != address(0));
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function burn(uint256 _value) public {
        require(msg.sender == admin);
        uint256 burnAmount = (_value * 69) / 100;
        require(balanceOf[msg.sender] >= burnAmount);
        balanceOf[msg.sender] -= burnAmount;
        totalSupply -= burnAmount;
        emit Transfer(msg.sender, address(0), burnAmount);
    }

    function marketingWithdraw(uint256 _value) public {
        require(msg.sender == marketing);
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[address(this)] += _value;
        emit Transfer(msg.sender, address(this), _value);
    }

    function relinquishOwnership() public {
        require(msg.sender == admin);
        admin = address(0);
    }

    function isContract(address _address) public view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(_address)
        }
        return size > 0;
    }
}