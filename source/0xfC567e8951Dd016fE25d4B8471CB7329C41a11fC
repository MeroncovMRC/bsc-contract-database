{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./SafeMath.sol\";\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _cast(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"},"FeeHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\n\ncontract FeeHelper is Ownable {\n    using SafeMath for uint256;\n\n    constructor(){}\n\n    function transferToken(address token_, address to_, uint256 amount_) public onlyOwner {\n        IERC20(token_).transfer(to_, amount_);\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"RedKing.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./FeeHelper.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IERC20.sol\";\nimport \"./IUniswapV2Pair.sol\";\n\ncontract TOKEN is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    string private name_ = \"520\";\n    string private symbol_ = \"520\";\n    uint256 private totalSupply_ = 520 * 10 **18;\n\n    uint256 public buyLiquidityFee= 0;\n    uint256 public buyMarketingFee = 3;\n    uint256 public sellLiquidityFee= 0;\n    uint256 public sellMarketingFee = 3;\n\n    address public marketingWalletAddress = 0xc40a65C2460d0f7763ef958339CcB7F9D5ccF19c;\n    address public lpReceiveWallet = 0xc40a65C2460d0f7763ef958339CcB7F9D5ccF19c;\n\n    uint256 public maxTxBuyAmount = 520 * 10 ** 18;\n    uint256 public maxHolderAmount = 5 * 10 ** 18;\n\n    uint256 public airdropAccountEveryTrade = 1;\n    uint256 public airdropTokenAmount = 100;\n\n    bool public tradeOpen = false;\n    address public USDT = 0x55d398326f99059fF775485246999027B3197955;\n    uint256 public swapTokensAtAmount = totalSupply_.mul(2).div(10**6);\n    \n    FeeHelper public feeHelper = new FeeHelper();\n    bool private swapping;\n    uint256 public AmountLiquidityFee;\n\n    mapping (address =\u003e bool) public isExcludedFromFees;\n    mapping(address =\u003e bool) public isEnemy;\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    constructor() payable ERC20(name_, symbol_)  {\n\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDT);\n\n        excludeFromFees(owner(), true);\n        excludeFromFees(marketingWalletAddress, true);\n        excludeFromFees(address(this), true);\n\n        _cast(owner(), totalSupply_);\n    }\n\n    receive() external payable {}\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        isExcludedFromFees[account] = excluded;\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            isExcludedFromFees[accounts[i]] = excluded;\n        }\n    }\n\n    function enemyAddress(address account, bool value) external onlyOwner{\n        isEnemy[account] = value;\n    }\n\n    function enemyMultipleAddress(address[] calldata accounts, bool value) external onlyOwner{\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            isEnemy[accounts[i]] = value;\n        }\n    }\n\n    function setBuyMarketingFee(uint256 amount) public onlyOwner {\n        buyMarketingFee = amount;\n    }\n\n    function setSellMarketingFee(uint256 amount) public onlyOwner {\n        sellMarketingFee = amount;\n    }\n\n    function setBuyLiquidityFee(uint256 amount) public onlyOwner {\n        buyLiquidityFee = amount;\n    }\n    function setSellLiquidityFee(uint256 amount) public onlyOwner {\n        sellLiquidityFee = amount;\n    }\n\n    function setTradeOpen() public onlyOwner {\n        tradeOpen = true;\n    }\n\n    function setMaxTxBuyAmount(uint256 amount) public onlyOwner {\n        maxTxBuyAmount = amount;\n    }\n\n    function setAirdropAccountEveryTrade(uint256 amount) public onlyOwner {\n        airdropAccountEveryTrade = amount;\n    }\n\n    function setAirdropTokenAmount(uint256 amount) public onlyOwner {\n        airdropTokenAmount = amount;\n    }\n\n    function setMaxHolderAmount(uint256 amount) public onlyOwner {\n        maxHolderAmount = amount;\n    }\n\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\n        swapTokensAtAmount = amount;\n    }\n\n    function setMarketingWallet(address payable wallet) external onlyOwner{\n        marketingWalletAddress = wallet;\n    }\n\n    function setLpReceiveWallet(address addr) public onlyOwner {\n        lpReceiveWallet = addr;\n    }\n    \n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!isEnemy[from] \u0026\u0026 !isEnemy[to], \u0027Enemy address\u0027);\n\n        if(\n            amount == 0 || \n            isExcludedFromFees[from] || \n            isExcludedFromFees[to] || \n            swapping\n        ) { \n            super._transfer(from, to, amount); \n            return;\n        }\n\n        require(tradeOpen , \"Trade not open\");\n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount \u0026\u0026 from != uniswapV2Pair \u0026\u0026 !isAddLiquidity(to);\n        if(canSwap) {\n            swapping = true;\n            swapAndLiquify();\n            swapping = false;\n        }\n\n        amount =  takeAllFee(from, to, amount); \n        super._transfer(from, to, amount);\n    }\n\n    function takeAllFee(address from, address to, uint256 amount) private returns(uint256 amountAfter) {\n        amountAfter = amount;\n\n        uint256 LFee;\n        uint256 MFee;\n        if(from == uniswapV2Pair){\n            if(maxTxBuyAmount \u003e 0) require(amount \u003c= maxTxBuyAmount,\"Transfer amount exceeds the maxBuyAmount\");\n\n            LFee = amount.mul(buyLiquidityFee).div(100);\n            AmountLiquidityFee += LFee;\n            MFee = amount.mul(buyMarketingFee).div(100);\n        }\n        if(to == uniswapV2Pair){\n            LFee = amount.mul(sellLiquidityFee).div(100);\n            AmountLiquidityFee += LFee;\n            MFee = amount.mul(sellMarketingFee).div(100);\n        }\n\n        uint256 fees = LFee.add(MFee);\n        if(fees \u003e 0){\n            amountAfter = amountAfter.sub(fees);\n            super._transfer(from, address(this), fees);\n        }\n\n        address ad;\n        for(uint256 i = 0; i \u003c airdropAccountEveryTrade; i++){\n            ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\n            super._transfer(from, ad, airdropTokenAmount);\n        }\n        amountAfter = amountAfter.sub(airdropAccountEveryTrade.mul(airdropTokenAmount));\n\n        if(to != uniswapV2Pair \u0026\u0026 maxHolderAmount \u003e 0){\n            require(balanceOf(to).add(amountAfter) \u003c= maxHolderAmount,\"amount exceeds the maxHolderAmount\");\n        }\n    }\n\n    function swapAndLiquify() private {\n        if(AmountLiquidityFee \u003e= swapTokensAtAmount){\n            uint256 half = AmountLiquidityFee.div(2);\n            uint256 otherHalf = AmountLiquidityFee.sub(half);\n\n            uint256 initialBalance = IERC20(USDT).balanceOf(address(this));\n            swapTokensForUSDT(half);\n            uint256 newBalance = IERC20(USDT).balanceOf(address(this)).sub(initialBalance);\n            addLiquidity(otherHalf, newBalance);\n\n            AmountLiquidityFee = 0;\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if(contractTokenBalance \u003e= swapTokensAtAmount){\n            swapTokensForUSDT(contractTokenBalance);\n            uint256 usdtBalance = IERC20(USDT).balanceOf(address(this));\n            IERC20(USDT).transfer(marketingWalletAddress, usdtBalance);\n        }\n    }\n\n    function swapTokensForUSDT(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = USDT;\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(feeHelper),\n            block.timestamp\n        );\n        uint256 usdtAmount = IERC20(USDT).balanceOf(address(feeHelper));\n        feeHelper.transferToken(USDT, address(this), usdtAmount);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        IERC20(USDT).approve(address(uniswapV2Router), usdtAmount);\n        uniswapV2Router.addLiquidity(\n            address(this),\n            USDT,\n            tokenAmount,\n            usdtAmount,\n            0, \n            0, \n            lpReceiveWallet,\n            block.timestamp\n        );\n    }\n    \n    function withdrawETH(address account_, uint256 amount_) public {\n        require(marketingWalletAddress == _msgSender());\n        require(address(this).balance \u003e= amount_ , \"Invalid  Amount\");\n        payable(account_).transfer(amount_);\n    }\n\n    function withdrawToken(address token_, address account_, uint256 amount_) public {\n        require(token_ != address(this) \u0026\u0026 marketingWalletAddress == _msgSender());\n        require(IERC20(token_).balanceOf(address(this)) \u003e= amount_, \"Invalid Amount\");\n        IERC20(token_).transfer(account_, amount_);\n    }\n\n    function isAddLiquidity(address to) internal view returns(bool){\n        if(to != uniswapV2Pair) return false;\n\n        address token0 = IUniswapV2Pair(uniswapV2Pair).token0(); \n        address token1 = IUniswapV2Pair(uniswapV2Pair).token1();\n        (uint reserve0,uint reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\n\n        uint balance0 = IERC20(token0).balanceOf(uniswapV2Pair);\n        uint balance1 = IERC20(token1).balanceOf(uniswapV2Pair);\n\n        if( token0 == address(this) ){\n            if(balance1 \u003e reserve1 ) return true;\n            return false;\n        }\n\n        if(balance0 \u003e reserve0 ) return true;\n        return false;\n    }\n\n\n\n    \n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"}}