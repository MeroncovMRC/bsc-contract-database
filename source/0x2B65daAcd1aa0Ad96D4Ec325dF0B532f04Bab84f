// SPDX-License-Identifier: MIT

pragma solidity =0.7.6;


contract EquitableLPTimeLock {

    address public Owner;
    address public constant Token = 0x46Ef1c720a9e91C53c394d5A5Ba603b468B103D3;

    uint256 public constant StartLock = 1635270040;   //  Tuesday 26 October 2021 17:40:40 GMT
    uint256 public constant LockedUntil = 1950802840; //  Sunday 26 October 2031 17:40:40 GMT

	uint256 constant Decimals = 18;
	uint256 constant incrementAmount = 10 ** (5 + Decimals);
	
    
    // Constructor. 
   constructor() payable {  
		Owner = payable(msg.sender);
    }  
    

    // Modifiers
    modifier checkRequirements {
        require(StartLock < block.timestamp, "Time travel is not allowed!");
		require(LockedUntil > block.timestamp, "Locking period is not over!");
		require(msg.sender == Owner, "Admin function!");
        _;
    }
    

    function payOutIncrementToken() external checkRequirements {
        TIMELOCK(Token).transfer(Owner, incrementAmount);
    }
    
    
    function payOutTotalToken() external checkRequirements {
        uint256 balance = TIMELOCK(Token).balanceOf(address(this));
		TIMELOCK(Token).transfer(Owner, balance);
    }

}

// Interface for TIMELOCK
abstract contract TIMELOCK {
    function balanceOf(address tokenOwner) virtual external view returns (uint256);
    function transfer(address receiver, uint256 numTokens) virtual public returns (bool);
}