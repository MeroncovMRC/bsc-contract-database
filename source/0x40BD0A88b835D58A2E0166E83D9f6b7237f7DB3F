pragma solidity >=0.8.0;

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function router() external view returns (address);
    function routerAddress() external view returns (address);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function swap(uint amount0Out, uint amount1Out, address to) external;
    function skim(address to) external;
    function sync() external;

    function fee() external view returns (uint fee);
    function feeSwap() external view returns (uint fee);

    function initialize(address, address) external;
}

interface IArbitrager {
    function arbitrage(address to, uint16 fee, address[] calldata pairsPath, uint16[] calldata fees, uint8[] calldata tokensIndexPath, uint8[] calldata pairTypes) external;
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

library TransferHelper {
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeApprove: approve failed'
        );
    }

    function safeTransfer(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeTransfer: transfer failed'
        );
    }

    function safeTransferFrom(
        address token,
        address from,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::transferFrom: transferFrom failed'
        );
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}(new bytes(0));
        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
    }
}

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

contract MevSwapRouter {
    using SafeMath for uint;

    modifier ensure(uint deadline) {
        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');
        _;
    }

    modifier onlyOwner () {
        require(msg.sender == owner, "unauthorized");
        _;
    }

    struct SwapEnvelope {
        uint amountIn;
        uint amountOut;

        address tokenIn;
        address tokenOut;
        address to;

        uint8 arbitragingIndex;
        uint16 arbitrageMeanFee;

        address[] swapPairs;
        uint16[] fees;
        uint8[] tokenInIndexes;
        uint8[] pairTypes;
    }

    address public immutable WETH;
    address public immutable owner;
    address public arbitrager;
    address public feeTaker;
    mapping(address => bool) private feeTokenWhitelist;

    constructor(address _feeTaker, address _weth) {
        owner = msg.sender;
        feeTaker = _feeTaker;
        WETH = _weth;

        // weth whitelisted by default for fee
        whitelistFeeToken(WETH, true);
    }

    receive() external payable {
        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract
    }

    function setFeeTokenWhitelist(address[] calldata tokens, bool[] calldata enabled) external onlyOwner {
        require(tokens.length == enabled.length, "invalid length");
        for (uint i = 0; i < tokens.length; i++) {
            whitelistFeeToken(tokens[i], enabled[i]);
        }
    }

    function whitelistFeeToken(address token, bool enabled) internal {
        feeTokenWhitelist[token] = enabled;
    }

    function setFeeTaker(address newFeeTaker) external onlyOwner {
        feeTaker = newFeeTaker;
    }

    function setArbitrager(address newArbitrager) external onlyOwner {
        arbitrager = newArbitrager;
    }

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint pairFee) internal pure returns (uint amountOut) {
        amountOut = (amountIn * pairFee * reserveOut) / ((reserveIn * 10000) + amountIn * pairFee);
    }

    function haveMultiSwapFee(SwapEnvelope calldata swapEnvelope) internal returns (bool) {
        if (swapEnvelope.swapPairs.length == 1) {
            return false;
        }

        address currentFactory = IUniswapV2Pair(swapEnvelope.swapPairs[0]).factory();
        uint i = 1;
        for (i; i < swapEnvelope.arbitragingIndex;) {
            if (IUniswapV2Pair(swapEnvelope.swapPairs[i]).factory() != currentFactory) {
                return true;
            }
            unchecked { ++i; }
        }

        return false;
    }

    function swap(bool _haveMultiSwapFee, SwapEnvelope calldata swapEnvelope) internal virtual {
        (uint amount0Out, uint amount1Out) = (0, 0);
        (uint reserve0, uint reserve1) = (0, 0);
        uint amountIn = 0;
        uint i = 0;
        uint routerFeeBalance = 0;
        address _to;
        address currentPair;
        address tokenIn;
        uint8 tokenInIndex;

        for (i; i < swapEnvelope.arbitragingIndex;) {
            tokenInIndex = swapEnvelope.tokenInIndexes[i];
            currentPair = swapEnvelope.swapPairs[i];

            (reserve0, reserve1,) = IUniswapV2Pair(currentPair).getReserves();

            tokenIn = tokenInIndex == 0 ?
                IUniswapV2Pair(currentPair).token0() : 
                IUniswapV2Pair(currentPair).token1();

            // this will handle any fee on transfer
            amountIn = IERC20(tokenIn).balanceOf(currentPair).sub(
                tokenInIndex == 0 ? reserve0 : reserve1
            );

            // becomes amount out - calculate the amount out on the real tokens amount received by the pair
            amountIn = getAmountOut(
                amountIn,
                tokenInIndex == 0 ? reserve0 : reserve1,
                tokenInIndex == 0 ? reserve1 : reserve0,
                swapEnvelope.fees[i]
            );

            (amount0Out, amount1Out) = tokenInIndex == 0 ? (uint(0), amountIn) : (amountIn, uint(0));

            bool lastPathPair = i == swapEnvelope.arbitragingIndex - 1;
            bool handleFee = false;

            if (_haveMultiSwapFee) {
                // recycle tokenIn var to become tokenOut
                tokenIn = swapEnvelope.tokenInIndexes[i] == 0 ?
                    IUniswapV2Pair(currentPair).token1() : 
                    IUniswapV2Pair(currentPair).token0();
                
                handleFee = feeTokenWhitelist[tokenIn] || lastPathPair;
                if (handleFee) {
                    _haveMultiSwapFee = false;
                    _to = address(this);
                    routerFeeBalance = IERC20(tokenIn).balanceOf(address(this));
                } else {
                    _to = lastPathPair ? swapEnvelope.to : swapEnvelope.swapPairs[i + 1];
                }
            } else {
                _to = lastPathPair ? swapEnvelope.to : swapEnvelope.swapPairs[i + 1];
            }

            if (swapEnvelope.pairTypes[i] == 0) {
                IUniswapV2Pair(currentPair).swap(
                    amount0Out, amount1Out, _to, new bytes(0)
                );
            } else if (swapEnvelope.pairTypes[i] == 1) {
                IUniswapV2Pair(currentPair).swap(
                    amount0Out, amount1Out, _to
                );
            } else {
                revert("unknown pair type");
            }

            if (handleFee) {
                // at this point, the router is holding the amountOut
                // forward the fee to the feeTaker and proceed to the next step of the path

                // check the router balance to prevent weird scenario where the router actually hold some of the tokens received
                routerFeeBalance = IERC20(tokenIn).balanceOf(address(this)).sub(routerFeeBalance);
                // forward fee and amount
                uint feeAmount = routerFeeBalance.sub(routerFeeBalance.mul(9990).div(10000));
                TransferHelper.safeTransfer(tokenIn, feeTaker, feeAmount);
                _to = lastPathPair ? swapEnvelope.to : swapEnvelope.swapPairs[i + 1];
                TransferHelper.safeTransfer(tokenIn, _to, routerFeeBalance.sub(feeAmount));
            }

            unchecked { ++i; }
        }
    }

    function performArbitrage(SwapEnvelope calldata swapEnvelope) internal {
        if (swapEnvelope.arbitragingIndex >= swapEnvelope.swapPairs.length) {
            return;
        }

        if (arbitrager == address(0)) {
            return;
        }

        try IArbitrager(arbitrager).arbitrage(
            swapEnvelope.to,
            swapEnvelope.arbitrageMeanFee,
            swapEnvelope.swapPairs[swapEnvelope.arbitragingIndex:],
            swapEnvelope.fees[swapEnvelope.arbitragingIndex:],
            swapEnvelope.tokenInIndexes[swapEnvelope.arbitragingIndex:],
            swapEnvelope.pairTypes[swapEnvelope.arbitragingIndex:]
        ) {} catch {}
    }
    
    function checkOutputAndPerformArbitrages(uint balanceBefore, SwapEnvelope calldata swapEnvelope) internal {
        uint balanceAfter = IERC20(swapEnvelope.tokenOut).balanceOf(swapEnvelope.to);
        if (msg.sender == swapEnvelope.to && swapEnvelope.tokenIn == swapEnvelope.tokenOut) {
            // need to take amountIn into account for this scenario
            balanceAfter = balanceAfter.add(swapEnvelope.amountIn);
        }
        require(
            balanceAfter.sub(balanceBefore) >= swapEnvelope.amountOut,
            'Router: INSUFFICIENT_OUTPUT_AMOUNT'
        );

        performArbitrage(swapEnvelope);
    }

    function swapExactTokensForTokens(
        uint deadline,
        SwapEnvelope calldata swapEnvelope
    ) external virtual ensure(deadline) {
        uint balanceBefore = IERC20(swapEnvelope.tokenOut).balanceOf(swapEnvelope.to);

        bool _haveMultiSwapFee = haveMultiSwapFee(swapEnvelope);
        uint amountIn = swapEnvelope.amountIn;

        if (_haveMultiSwapFee && feeTokenWhitelist[swapEnvelope.tokenIn]) {
            uint feeAmount = amountIn.sub(amountIn.mul(9990).div(10000));
            amountIn = amountIn.sub(feeAmount);

            TransferHelper.safeTransferFrom(
                swapEnvelope.tokenIn, msg.sender, swapEnvelope.swapPairs[0], amountIn
            );
            TransferHelper.safeTransferFrom(
                swapEnvelope.tokenIn, msg.sender, feeTaker, feeAmount
            );

            // mark as taken
            _haveMultiSwapFee = false;
        } else {
            TransferHelper.safeTransferFrom(
                swapEnvelope.tokenIn, msg.sender, swapEnvelope.swapPairs[0], amountIn
            );
        }

        swap(_haveMultiSwapFee, swapEnvelope);
        
        checkOutputAndPerformArbitrages(balanceBefore, swapEnvelope);
    }

    function swapExactETHForTokens(
        uint deadline,
        SwapEnvelope calldata swapEnvelope
    ) external virtual payable ensure(deadline) {
        require(swapEnvelope.tokenIn == WETH, 'Router: INVALID_PATH');

        uint amountIn = swapEnvelope.amountIn;
        uint balanceBefore = IERC20(swapEnvelope.tokenOut).balanceOf(swapEnvelope.to);
        IWETH(WETH).deposit{value: amountIn}();

        bool _haveMultiSwapFee = haveMultiSwapFee(swapEnvelope);
        if (_haveMultiSwapFee) {
            // take multiswap fee as WETH
            uint feeAmount = amountIn.sub(amountIn.mul(9990).div(10000));
            amountIn = amountIn.sub(feeAmount);

            assert(IWETH(WETH).transfer(swapEnvelope.swapPairs[0], amountIn));
            assert(IWETH(WETH).transfer(feeTaker, feeAmount));

            // mark as taken
            _haveMultiSwapFee = false;
        } else {
            assert(IWETH(WETH).transfer(swapEnvelope.swapPairs[0], amountIn));
        }

        swap(_haveMultiSwapFee, swapEnvelope);

        checkOutputAndPerformArbitrages(balanceBefore, swapEnvelope);
    }

    // just in case ETH is sent to the contract for some weird reasons
    function emergencyWithdrawETH() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    // just in case tokens are sent to the contract for some weird reasons
    function emergencyWithdraw(address token) external onlyOwner {
        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));
    }
}