// SPDX-License-Identifier: CC-BY-4.0
// 2021 Kitty Research Labs

// solhint-disable compiler-version
// solhint-disable const-name-snakecase
// solhint-disable func-visibility

pragma solidity ^0.8.1;

library SafeMath {
    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {
        require(b > 0);
        c = a / b;
    }

    function subtractToZero(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (b > a) c = 0; else c = a - b;
    }
}

library Math {
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a < b) return a;
        return b;
    }

    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a > b) return a;
        return b;
    }
}

interface ERC20Interface {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20Constants {
    string  public constant name = "KittyCoin";
    string  public constant symbol = "KITTY";
    uint256 public constant decimals = 18;
}

contract TokenConstants is ERC20Constants {
    uint256 public constant MAX_SUPPLY  = 69420 * (10 ** decimals);
    uint256 public constant MAX_AIRDROP =    32 * (10 ** decimals);
    uint256 public constant MIN_AIRDROP =     1 * (10 ** decimals);    
}

contract ERC20Token is ERC20Interface, TokenConstants {
    using SafeMath for uint;
    
    mapping (address => uint256) internal balances;
    mapping (address => mapping(address => uint256)) internal allowances;
    
    function _isValidRecipient(address recipient) internal view returns (bool) {
        return recipient != address(0x0) && recipient != address(this);
    }    
    
    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        require(balances[sender] >= amount, "Insufficient balance amount");
        balances[sender] = balances[sender].safeSub(amount);
        balances[recipient] = balances[recipient].safeAdd(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
        uint256 currentAllowance = allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Insufficient allowance amount");
        allowances[sender][msg.sender] = currentAllowance.safeSub(amount);
        return _transfer(sender, recipient, amount);
    }

    function totalSupply() external override view returns (uint256) {
        return MAX_SUPPLY.safeSub(balances[address(0x0)]);
    }

    function balanceOf(address account) external override view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(_isValidRecipient(recipient), "Invalid recipient");
        return _transfer(msg.sender, recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0x0), "Invalid sender");
        require(_isValidRecipient(recipient), "Invalid recipient");
        return _transferFrom(sender, recipient, amount);
    }

    function allowance(address owner, address spender) external override view returns (uint256) {
        return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
}

contract Kitty is ERC20Token {
    mapping (address => bool) internal claims;

    constructor() {
        balances[address(this)] = MAX_SUPPLY;
    }

    function contractBalance() external view returns (uint256) {
        return balances[address(this)];
    }
    
    function myBalance() external view returns (uint256) {
        return balances[msg.sender];
    }
    
    function alreadyClaimed() external view returns (bool) {
        return claims[msg.sender];
    }
    
    function claimAirdrop() external {
        uint256 remainingSupply = balances[address(this)];
        require(remainingSupply > 0, "Airdrop finished");
        require(claims[msg.sender] == false, "Stop being greedy!");
        claims[msg.sender] = true;
        uint256 amount = (MAX_AIRDROP * ((remainingSupply * 1000) / MAX_SUPPLY)) / 1000;
        amount = Math.min(remainingSupply, Math.max(MIN_AIRDROP, amount));
        _transfer(address(this), msg.sender, amount);
    }
    
    receive() external payable {
        revert("No thanks!");
    }
}