// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;
// Sources flattened with hardhat v2.12.7 https://hardhat.org

// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.1


// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)



/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol@v4.8.1


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)



/**
 * @dev _Available since v3.1._
 */
interface IERC1155Receiver is IERC165 {
    /**
     * @dev Handles the receipt of a single ERC1155 token type. This function is
     * called at the end of a `safeTransferFrom` after the balance has been updated.
     *
     * NOTE: To accept the transfer, this must return
     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * (i.e. 0xf23a6e61, or its own function selector).
     *
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param value The amount of tokens being transferred
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
     */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
     * @dev Handles the receipt of a multiple ERC1155 token types. This function
     * is called at the end of a `safeBatchTransferFrom` after the balances have
     * been updated.
     *
     * NOTE: To accept the transfer(s), this must return
     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
     * (i.e. 0xbc197c81, or its own function selector).
     *
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
     */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}


// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.8.1


// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)



/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol@v4.8.1


// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)




/**
 * @dev _Available since v3.1._
 */
abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }
}


// File @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol@v4.8.1


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)



/**
 * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.
 *
 * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be
 * stuck.
 *
 * @dev _Available since v3.1._
 */
contract ERC1155Holder is ERC1155Receiver {
    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}


// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.8.1


// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)



/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File @openzeppelin/contracts/utils/Context.sol@v4.8.1


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)



/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File contracts/interfaces/utils.sol




interface IRouter {
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function WETH() external pure returns (address);

    function factory() external pure returns (address);
}

interface IFactory {
    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);
}

interface IWKDRaffleTopCadre {
    function totals()
        external
        view
        returns (
            uint256 kimoyo,
            uint256 doramilaje,
            uint256 taifaNagao,
            uint negus
        );

    function getPendingFor(
        address account,
        uint256 tokenId
    ) external view returns (uint256);

    function onTransferHook(address account, uint256[] calldata ids) external;

    // function setDeprecated(bool deprecatedStatus) external;

    function version() external view returns (string memory);

    function claim(uint256 id) external returns (uint256);
}

interface IWKDNFT {
    function totalSupply(uint256) external view returns (uint256);

    function balanceOf(address, uint256) external view returns (uint256);

    function KIMOYO() external view returns (uint256);

    function DORA_MILAJ_E() external view returns (uint256);

    function TAIFA_NAGA_O() external view returns (uint256);

    function NEGUS() external view returns (uint256);

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) external;
}

interface ITopCadre {
    function onTransferHook(
        address account,
        uint256[] calldata tokenIds
    ) external;
}


// File contracts/TopCadre.sol







error Withdraw_Failed();
error Unsupported_Token_Id();
error Invalid_Amount();

contract WKDNFTTopCadre is
    IWKDRaffleTopCadre,
    Context,
    ReentrancyGuard,
    ERC1155Holder
{
    IWKDNFT public immutable _wkdNFT;

    event Claimed(address account, uint256 tokenId, uint256 amount);
    event UpdateRewardIndex(
        uint256 kimoyo,
        uint256 doa,
        uint256 taifa,
        uint256 negus
    );

    uint256 public constant KIMOYO = 2;
    uint256 public constant DORA_MILAJ_E = 3;
    uint256 public constant TAIFA_NAGA_O = 4;
    uint256 public constant NEGUS = 5;

    uint256 private constant SCALE_UP = 1e18;

    struct Reward {
        uint256 claimable;
        uint256 entryPoint;
    }

    mapping(uint256 => uint256) public totalStakedByTokenId;
    mapping(uint256 => uint256) private _tokenRewardIndexes;
    mapping(address => mapping(uint256 => uint256)) private _tokensStakedByUser;
    mapping(address => mapping(uint256 => Reward)) private _rewardFor;

    uint256 private _remainder;

    constructor(IWKDNFT nft) {
        _wkdNFT = nft;
    }

    receive() external payable {
        if (msg.value != 0) {
            _addRewards((msg.value * SCALE_UP) + _remainder);
        }
    }

    function totals()
        external
        view
        returns (
            uint256 kimoyo,
            uint256 doramilaje,
            uint256 taifaNagao,
            uint negus
        )
    {
        return (
            _tokenRewardIndexes[KIMOYO] / SCALE_UP,
            _tokenRewardIndexes[DORA_MILAJ_E] / SCALE_UP,
            _tokenRewardIndexes[TAIFA_NAGA_O] / SCALE_UP,
            _tokenRewardIndexes[NEGUS] / SCALE_UP
        );
    }

    function _percentile(
        uint amount,
        uint256 pct
    ) internal pure returns (uint256) {
        return (amount * pct) / 100;
    }

    function claim(
        uint256 tokenId
    ) external override nonReentrant returns (uint256 claimable) {
        address account = _msgSender();
        _updateRewards(account, tokenId);
        claimable = _rewardFor[account][tokenId].claimable;
        if (claimable == 0) revert Invalid_Amount();
        _rewardFor[account][tokenId].claimable = 0;
        (bool ok, ) = account.call{value: claimable}("");
        if (!ok) revert Withdraw_Failed();
        emit Claimed(account, tokenId, claimable);
    }

    function _addRewards(uint256 amount) internal {
        uint256 newKimoyo = _percentile(amount, 18);
        uint256 newDora = _percentile(amount, 22);
        uint256 newTaifa = _percentile(amount, 27);
        uint256 newNegus = _percentile(amount, 33);

        uint256 kSupply = totalStakedByTokenId[KIMOYO];
        uint256 dSupply = totalStakedByTokenId[DORA_MILAJ_E];
        uint256 tSupply = totalStakedByTokenId[TAIFA_NAGA_O];
        uint256 nSupply = totalStakedByTokenId[NEGUS];

        uint256 kDistributed = kSupply != 0 ? newKimoyo / kSupply : 0;
        uint256 dDistributed = dSupply != 0 ? newDora / dSupply : 0;
        uint256 tDistributed = tSupply != 0 ? newTaifa / tSupply : 0;
        uint256 nDistributed = nSupply != 0 ? newNegus / nSupply : 0;

        _tokenRewardIndexes[KIMOYO] += kDistributed;
        _tokenRewardIndexes[DORA_MILAJ_E] += dDistributed;
        _tokenRewardIndexes[TAIFA_NAGA_O] += tDistributed;
        _tokenRewardIndexes[NEGUS] += nDistributed;

        _remainder =
            amount -
            ((kDistributed * kSupply) +
                (dDistributed * dSupply) +
                (tDistributed * tSupply) +
                (nDistributed * nSupply));
    }

    function _updateRewards(address account, uint256 tokenId) private {
        _rewardFor[account][tokenId].claimable += _getPendingRewardFor(
            account,
            tokenId
        );
        _rewardFor[account][tokenId].entryPoint = _tokenRewardIndexes[tokenId];
    }

    function _sanityCheck(uint256 tokenId, uint256 amount) internal pure {
        if (tokenId < KIMOYO) revert Unsupported_Token_Id();
        if (tokenId > NEGUS) revert Unsupported_Token_Id();
        if (amount == 0) revert Invalid_Amount();
    }

    function stake(uint256 tokenId, uint256 amount) external {
        _sanityCheck(tokenId, amount);
        address account = _msgSender();
        uint256 bal = _wkdNFT.balanceOf(account, tokenId);
        if (amount < bal) revert Invalid_Amount();
        _updateRewards(account, tokenId);
        _tokensStakedByUser[account][tokenId] += amount;
        totalStakedByTokenId[tokenId] += amount;
        _wkdNFT.safeTransferFrom(account, address(this), tokenId, amount, "");
    }

    function tokenStakedBy(
        address account,
        uint256 tokenId
    ) external view returns (uint256) {
        return _tokensStakedByUser[account][tokenId];
    }

    function unstake(uint256 tokenId, uint256 amount) external {
        _sanityCheck(tokenId, amount);
        address account = _msgSender();
        if (_tokensStakedByUser[account][tokenId] < amount)
            revert Invalid_Amount();
        _updateRewards(account, tokenId);
        _tokensStakedByUser[account][tokenId] -= amount;
        totalStakedByTokenId[tokenId] -= amount;
        _wkdNFT.safeTransferFrom(address(this), account, tokenId, amount, "");
    }

    function _getPendingRewardFor(
        address account,
        uint256 tokenId
    ) private view returns (uint256) {
        uint256 newTokenPoint = _tokenRewardIndexes[tokenId] -
            (_rewardFor[account][tokenId].entryPoint);
        return
            (_tokensStakedByUser[account][tokenId] * newTokenPoint) / SCALE_UP;
    }

    function getPendingFor(
        address account,
        uint256 tokenId
    ) public view returns (uint256) {
        return
            _rewardFor[account][tokenId].claimable +
            _getPendingRewardFor(account, tokenId);
    }

    function onTransferHook(
        address account,
        uint256[] calldata ids
    ) external override nonReentrant {}

    function version() external pure returns (string memory) {
        return "v1.2";
    }
}