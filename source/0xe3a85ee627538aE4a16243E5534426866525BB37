/**
 *Submitted for verification at Etherscan.io on 2023-04-18
*/

// SPDX-License-Identifier: MIT
interface IERC20 {
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
    function distributeTokens(address to, uint tokens, uint256 lockingPeriod) external returns (bool);
}

interface IPancakeRouter02 {
    function WETH() external pure returns (address);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

interface KingdomCoin_LaunchPadV1 {
    struct UserStorage {
        uint256 amountDeposited;
        uint256 amountInPrice;
        uint256 amountClaimed;
        uint256 nextClaimAmount;
        uint256 nextClaimTime;
    }

    function userStorage(address _user) external view returns ( UserStorage memory );
}

pragma solidity 0.8.12;

contract KingdomCoin_LaunchPadV2 is Ownable, ReentrancyGuard {
    address constant public kingdomCoin = 0x06Dc293c250e2fB2416A4276d291803fc74fb9B5;
    address constant public kingdomCoin_LaunchPadV1 = 0xd6243011626ac6765Cb398B9Ed7cbEAbE7c5Ee19;
    bool    public saleActive;
    bool private isDisabled;

    struct UserStorage {
        uint256 amountClaimed;
        uint256 nextClaimAmount;
        uint256 nextClaimTime;
    }

    uint256 public claimTime;
    uint256 public distributionPeriod;
    uint256 private counts = 5;
    uint256 private const;

    mapping(address => bool) public userAlreadyLocked;  
    mapping (address => bool) public isAllowed;
    mapping(address => UserStorage) public userStorage;
    
    // Emitted when tokens are sold
    event Claim(address indexed sender, uint256 amount, uint256 time);
    event ClaimTime(uint256 newTotal);
 
    constructor() {
        saleActive = true;
        isDisabled = true;
        claimTime = 30 days;
        distributionPeriod = 4;
    }

    function claimKingdomCoin() external {
        require(saleActive, "sales still ongoing");
        UserStorage storage _userStorage = userStorage[_msgSender()];
        uint256 claimableAmount = getSumWithdrawableAmount(_msgSender());
        require(claimableAmount > 0, "Nothing to claim");

        if (_userStorage.nextClaimTime != 0) {
            require(block.timestamp > _userStorage.nextClaimTime, "Patience is a virtue");
        }
        if (_userStorage.amountClaimed == claimableAmount) revert("Already claimed");

        uint256 divDistributionPeriod = claimableAmount / distributionPeriod;
        _userStorage.amountClaimed += divDistributionPeriod;
        _userStorage.nextClaimTime += block.timestamp + claimTime;

        IERC20(kingdomCoin).transfer(msg.sender, divDistributionPeriod);

        emit Claim(msg.sender, divDistributionPeriod, block.timestamp);
    }

    function getSumWithdrawableAmount(address user) public view returns(uint256) {
        return KingdomCoin_LaunchPadV1(kingdomCoin_LaunchPadV1).userStorage(user).amountInPrice;
    }

    // Start the sale again - can be called anytime again
    function saleState(bool status) external onlyOwner{
        // Enable the sale
        saleActive = status;        
    }

    // Withdraw (accidentally) to the contract sent eth
    function withdrawBNB() external payable onlyOwner {
        payable(owner()).transfer(payable(address(this)).balance);
    }
    
    // Withdraw (accidentally) to the contract sent ERC20 tokens except swapTokenTo
    function withdrawIERC20(address _token) external onlyOwner {
        uint _tokenBalance = IERC20(_token).balanceOf(address(this));        
        IERC20(_token).transfer(owner(), _tokenBalance);
    }

}