{"APRA.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"./BEP20.sol\";\n\ncontract APRA is BEP20{\n\n  /**\n  * @param wallet Address of the wallet, where tokens will be transferred to\n  */\n  constructor(address wallet, address feeWallet) BEP20(\"Apraemio\", \"APRA\", 1, feeWallet){\n    _mint(wallet, uint256(1_000_000_000) * 1 ether);\n  }\n}"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"./IBEP20.sol\";\nimport \"./Ownable.sol\";\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is IBEP20, Ownable {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    uint8 private _tokenFee;\n    address private _feeWallet;\n    bool private _takeFee;\n    mapping (address =\u003e bool) private _isExcludedFromFee;\n\n    /**\n     * @dev Sets the values for {name}, {symbol} and {tokenFee}, {} initializes {decimals} with\n     * a default value of 18, {takeFee} to true and sets the {feeWallet}.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     * \n     * {name}, {symbol}, {tokenFee} and {decimals} are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_, uint8 tokenFee_, address feeWallet_) {\n        require(tokenFee_\u003c100, \"BEP20: invalid token fee\");\n        require(feeWallet_ != address(0), \"BEP20: fee wallet is the zero address\");\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n        _tokenFee = tokenFee_;\n        _takeFee = true;\n        _feeWallet = feeWallet_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external override view returns (string memory) {\n        return _name;\n    }\n\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external override view returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenFee() external view returns (uint8) {\n        return _tokenFee;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {BEP20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\n     */\n    function decimals() external override view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IBEP20-totalSupply}.\n     */\n    function totalSupply() external override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IBEP20-balanceOf}.\n     */\n    function balanceOf(address account) external override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IBEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-allowance}.\n     */\n    function allowance(address owner_, address spender) external virtual view override returns (uint256) {\n        return _allowances[owner_][spender];\n    }\n\n    /**\n     * @dev See {IBEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        require(_allowances[sender][_msgSender()] \u003e= amount, \"BEP20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n        unchecked {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\n        require(_allowances[_msgSender()][spender] \u003e= subtractedValue, \"BEP20: Decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n        require(_balances[sender] \u003e= amount, \"BEP20: transfer amount exceeds balance\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        bool takeFee = _takeFee \u0026\u0026 sender != owner() \u0026\u0026 sender != _feeWallet \u0026\u0026 recipient != owner() \n        \u0026\u0026 recipient != _feeWallet \u0026\u0026 !_isExcludedFromFee[sender] \u0026\u0026 !_isExcludedFromFee[recipient];\n\n        uint256 fee;\n\n        unchecked {\n            fee = takeFee ? amount * _tokenFee / 100 : 0;\n            _balances[sender] -= amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[recipient] = _balances[recipient] + (amount - fee);\n            _balances[_feeWallet] = _balances[_feeWallet] + fee;\n        }\n        emit Transfer(sender, recipient, amount);\n        if(takeFee) emit Transfer(sender, _feeWallet, fee);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply + amount;\n        unchecked {\n            if(_tokenFee\u003e0 ) {\n                require(_totalSupply*_tokenFee \u003e= _totalSupply, \"BEP20: possible fee calculation overflow\");\n            }\n        }\n        _balances[account] = _balances[account] + amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) external virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\u0027s\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``\u0027s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) external virtual {\n        require(_allowances[account][_msgSender()] \u003e= amount, \"BEP20: burn amount exceeds allowance\");\n        unchecked{\n            _approve(account, _msgSender(), _allowances[account][_msgSender()] - amount);\n        }\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner_, address spender, uint256 amount) internal virtual {\n        require(owner_ != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner_][spender] = amount;\n        emit Approval(owner_, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Change the fee wallet to a new account (`newFeeWallet`).\n     * Can only be called by the current owner.\n     */\n    function changeFeeWallet(address newFeeWallet) external virtual onlyOwner {\n        require(newFeeWallet != address(0), \"BEP20: new fee wallet is the zero address\");\n        address oldFeeWallet = _feeWallet;\n        _feeWallet = newFeeWallet;\n        emit FeeWalletChanged(oldFeeWallet, newFeeWallet);\n    }\n\n    event FeeWalletChanged(address indexed oldFeeWallet, address indexed newFeeWallet);\n\n    /**\n     * @dev Enable or disable fee taking for transactions according to (`takeFee`).\n     * Can only be called by the current owner.\n     */\n    function setTakeFee(bool takeFee) external virtual onlyOwner {\n        require(takeFee != _takeFee, \"BEP20: taking fee is already set\");\n        _takeFee = takeFee;\n        emit FeeTakingEnabled(takeFee, owner());\n    }\n    event FeeTakingEnabled(bool indexed takeFee, address indexed owner);\n\n    /**\n     * @dev Exclude (`account`) from fee payment.\n     * Can only be called by the current owner.\n     */\n    function excludeFromFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    \n    /**\n     * @dev Include (`account`) in fee payment.\n     * Can only be called by the current owner.\n     */\n    function includeInFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    /**\n     * @dev Check if (`account`) must pay fees.\n     * Can only be called by the current owner.\n     */\n    function isExcludedFromFee(address account) external view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity 0.8.7;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}}