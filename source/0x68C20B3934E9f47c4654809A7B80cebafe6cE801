{"BEP20.sol":{"content":"// * SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./interfaceIBEP20.sol\";\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\n\n\n\n\n\n contract BEP20 is Context, IBEP20 {\n    using SafeMath for uint256;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_)  {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {BEP20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IBEP20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IBEP20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IBEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IBEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IBEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IBEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.16;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"DividendsNFT.sol":{"content":"// * SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./SafeMath.sol\"; \nimport \"./Ownable.sol\";\nimport \"./SafeMathUint.sol\";\nimport \"./SafeMathInt.sol\";\nimport \"./interfaceIBEP20.sol\";\nimport \"./BEP20.sol\";\n\n\n\n\ncontract DividendsPaying is BEP20, Ownable {\n\n    using SafeMath for uint256;\n    using SafeMathUint for uint256;\n    using SafeMathInt for int256;\n    \n\n    // Magnitude consegue pagar a quantidade de Recompensa mesmo que seja um Saldo Pequeno\n    uint256  private  magnitude = 2**128;\n    // Multiplicador de Dividendos\n    uint256 private magnifiedDividendPerShare;\n    // Minimo para Distribuição\n    uint256 public minimumDistribute;\n    // Distribuição Total\n    uint256 public totalDividendsDistributed;\n    // Decimal\n    uint8 private _decimals = 18;\n    // Nome \n    string private _name = \"Arcane Dividends\";\n    // Symbolo\n    string private _symbol = \"ARCD\";\n    // Utilizado para Evitar Bugs, Gera um grande Numero (magnifiedDividendCorrections / magnitude)\n    mapping(address =\u003e int256) private magnifiedDividendCorrections;\n    // Armazena Saldo de Retirada dos Dividendos\n    mapping(address =\u003e uint256) private withdrawnDividends;\n    // Tempo de Claim\n    mapping(address =\u003e uint256) private claimWait;\n    // Exclui dos Dividendos\n    mapping (address =\u003e bool) public excludeDividends; \n    // last claim\n    mapping (address =\u003e uint256) public lastClaimTimes;\n    constructor()  BEP20(_name, _symbol, _decimals) {\n        minimumDistribute = 100 * 10**18;\n    }\n\n    // Eventos\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n    receive() external payable {\n        distributeDividends();\n    }\n        function distributeDividends() public  payable {\n        if(totalSupply() \u003e 0) {\n            if(msg.value \u003e 0) {\n                // Faz a soma dos Dividendos\n                magnifiedDividendPerShare += (msg.value).mul(magnitude).div(totalSupply());\n                // Pega o Total de Dividendos já distribuidos\n                totalDividendsDistributed += msg.value;\n            }\n        }\n    }\n    /*=== Public View ===*/\n    function withdrawableDividendOf(address owner) public view returns(uint256) {\n        return accumulativeDividendOf(owner).sub(withdrawnDividends[owner]);\n    }\n    function accumulativeDividendOf(address owner) public view returns(uint256) {\n        // Estrutura owner\n        uint256 balance = balanceOf(owner);\n        return magnifiedDividendPerShare.mul(balance).toInt256Safe().add(magnifiedDividendCorrections[owner]).toUint256Safe().div(magnitude);\n    }\n    \n    /*=== Private/Internal ===*/\n    function _transfer(address , address , uint256 ) internal virtual override  {\n        require(false, \"Nao pode Transfer\");\n    }\n    function _mint(address account, uint256 amount) internal override  {\n        super._mint(account, amount);\n  \n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account].sub((magnifiedDividendPerShare.mul(amount)).toInt256Safe());\n         emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal override {\n        super._burn(account, amount);\n \n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account].sub((magnifiedDividendPerShare.mul(amount)).toInt256Safe());\n        emit Transfer(account, address(0), amount);\n    }\n    function _setBalance(address account, uint256 newBalance) internal {\n        uint256 currentBalance = balanceOf(account);\n        if(newBalance \u003e currentBalance) {\n            uint256 mintAmount = newBalance.sub(currentBalance);\n            _mint(account, mintAmount);\n        } else if (newBalance \u003c= currentBalance) {\n            uint256 burnAmount = currentBalance.sub(newBalance);\n            _burn(account, burnAmount);\n        }\n    }\n\n    function withdrawMyReward(address user) public  {\n        uint256 balance =  withdrawableDividendOf(user);\n        if(balance \u003e 0) {\n            withdrawnDividends[user] += balance;\n            (bool success, ) = user.call{ value: balance }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n    /*=== Funções Administrativas ===*/\n    function setBalance(address payable account, uint256 newBalance) public onlyOwner {\n        if(excludeDividends[account]) {\n            return;\n        }\n        if(newBalance \u003e= minimumDistribute) {\n            _setBalance(account, newBalance);\n        }\n        else {\n            _setBalance(account, 0);\n        }\n\n       \n    }\n    function sendValue(address account) public payable onlyOwner {\n        uint256 send = msg.value;\n        if(send \u003e 0) {\n            (bool success, ) = account.call{ value: send }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n    function excludeFromDividends(address account, bool isTrue) external onlyOwner {\n        require(!excludeDividends[account], \"Ja excluido dos Dividendos\");\n        excludeDividends[account] = isTrue;\n        _setBalance(account, 0);\n    }\n    function getLostBNB(address admin)external onlyOwner {\n        uint256 balance = address(this).balance;\n        if(balance \u003e 0) {\n            (bool success, ) = admin.call{ value: balance }(\"\");\n            require(success, \"Address: unable to send value, recipient may have reverted\");\n        }\n    }\n    \n\n}\n    \n"},"ERC1155URIStorage.sol":{"content":"// * SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"./Context.sol\";\n\n\n\n// File: .deps/npm/@openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.16;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: .deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.16;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: .deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.16;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: .deps/npm/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\n\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.16;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: .deps/npm/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.16;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller\u0027s tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``\u0027s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``\u0027s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n// File: .deps/npm/@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.16;\n\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n\n// File: .deps/npm/@openzeppelin/contracts/token/ERC1155/ERC1155.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.16;\n\n\n\n\n\n\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i \u003c accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i \u003c ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i \u003c ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance \u003e= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i \u003c ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance \u003e= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n\n// File: .deps/npm/@openzeppelin/contracts/utils/Strings.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.16;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n// File: .deps/npm/@openzeppelin/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\n\npragma solidity ^0.8.16;\n\n\n\n/**\n * @dev ERC1155 token with storage based token URI management.\n * Inspired by the ERC721URIStorage extension\n *\n * _Available since v4.6._\n */\nabstract contract ERC1155URIStorage is ERC1155 {\n    using Strings for uint256;\n\n    // Optional base URI\n    string private _baseURI = \"\";\n\n    // Optional mapping for token URIs\n    mapping(uint256 =\u003e string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\n        return bytes(tokenURI).length \u003e 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\n    }\n\n    /**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n    function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }\n}\n\n"},"GenerateRand.sol":{"content":"\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16; \n\nimport \"./SafeMath.sol\"; // Importa SafeMath\nimport \"./Ownable.sol\"; // Importa Owner\n\ncontract Random is Ownable {\n    using SafeMath for uint256;\n\n    uint256 private randNonce;\n\n\n\n    function randMod(uint256 modulus) private returns(uint256) {\n        randNonce++;\n        return uint256(keccak256(abi.encodePacked(block.number, _msgSender(), randNonce))) % modulus;\n    }\n    function generateRandMod() external onlyOwner returns(uint256) {\n        uint256 rand = randMod(60);\n        uint256 result;\n        if (rand \u003c= 40) {\n            if(rand \u003c 10) {\n                result = 10;\n            }\n            else {\n                result = rand;\n            }\n        }\n        else if (rand \u003e 40 \u0026\u0026 rand \u003c= 45 ) {\n            result = rand;\n        }\n        else if (rand \u003e 45 \u0026\u0026 rand \u003c= 50) {\n            result = rand;\n        }\n        else if (rand \u003e 50 \u0026\u0026 rand \u003c= 55) {\n            result = rand;\n        }\n        else if (rand \u003e 55 \u0026\u0026 rand \u003c= 58) {\n            result = rand;\n        }\n        else if (rand \u003e 58 \u0026\u0026 rand \u003c= 60) {\n            result = rand;\n        }\n        return result;\n    }\n}\n"},"interfaceIBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.16;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"LibraryStruct.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nlibrary NFTStruct {\n    /*=== Structs ===*/\n    struct CreateNFT {\n        address payable userAdmin; // Dono da NFT\n        uint256 idNFT; // ID da NFT\n        uint256 initialValue; // Valor Inicial Aportado na NFT\n        uint256 percentBoost; // Porcentagem de Boost da NFT\n        uint256 valueBoost; // Valor Inicial + Boost\n        uint256 startVesting; // Bloco Inicial do Periodo de Vesting\n        uint256 endVesting; // Bloco Final do Periodo de Vesting\n        uint256 startBlock; // Bloco Inicial do Stake\n        string nameNFT; // Define o Nome da NFT\n        bool isUser; // Verifica se é Dono dessa NFT\n        bool isStaking; // Verifica se está em Staking\n        bool isPrivateSale; // Verifica se está na Private-Sale\n        bool isPreSale; // Verifica se está na Pre-Venda\n        bool isShareholder; // Verifica se é Cotista\n    }\n    struct CountNFT {\n        uint256 counter; \n    }\n    \n\n\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.16;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.16;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.16;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n"},"SafeMathInt.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\nMIT License\n\nCopyright (c) 2018 requestnetwork\nCopyright (c) 2018 Fragments, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\npragma solidity ^0.8.16;\n\n/**\n * @title SafeMathInt\n * @dev Math operations for int256 with overflow safety checks.\n */\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) \u003c\u003c 255;\n    int256 private constant MAX_INT256 = ~(int256(1) \u003c\u003c 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a \u0026 MIN_INT256) != (b \u0026 MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b \u003e= 0 \u0026\u0026 c \u003c= a) || (b \u003c 0 \u0026\u0026 c \u003e a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b \u003e= 0 \u0026\u0026 c \u003e= a) || (b \u003c 0 \u0026\u0026 c \u003c a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a \u003c 0 ? -a : a;\n    }\n\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a \u003e= 0);\n        return uint256(a);\n    }\n}\n"},"SafeMathUint.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\n/**\n * @title SafeMathUint\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b \u003e= 0);\n    return b;\n  }\n}\n"},"StakeNFT.sol":{"content":"/**\n * Develop by CPTRedHawk\n * @ Esse contrato Foi desenvolvido por https://t.me/redhawknfts\n * Caso queira ter uma plataforma similar, gentileza chamar no Telegram!\n * SPDX-License-Identifier: MIT\n * Entrega teu caminho ao senhor, e tudo ele o fará! Salmos 37\n */\npragma solidity ^0.8.16; \n\nimport \"./SafeMath.sol\"; // Importa SafeMath\nimport \"./Ownable.sol\"; // Importa Owner\nimport \"./ERC1155URIStorage.sol\"; // Importa o ERC1155\nimport \"./StakingRewards.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./LibraryStruct.sol\";\nimport \"./GenerateRand.sol\";\nimport \"./DividendsNFT.sol\";\nimport \"./StringNFT.sol\";\nimport \"./interfaceIBEP20.sol\";\n\n\n\ncontract ArcaneNFT is ERC1155URIStorage, Ownable, StakeSystem, isStone, ReentrancyGuard {\n    using SafeMath for uint256; // SafeMath para uint256\n    using NFTStruct for NFTStruct.CreateNFT; // Estrutura NFT\n    using NFTStruct for NFTStruct.CountNFT; // EStrutura ID \n    /*=== Mapping ===*/\n    mapping (uint256 =\u003e NFTStruct.CreateNFT) public createNFT; // Mapeamento das NFTs\n    mapping (address =\u003e uint256) public balanceShareHolder;\n    /*=== Address ===*/\n    IBEP20 public token; // Endereço BEP20\n    Random public randons; // Endereço RandMod\n    DividendsPaying public dividends; // Endereço Dividendos\n    address private receiveAddress;\n    address private burnAddress = 0x000000000000000000000000000000000000dEaD;\n    /*=== Uints ===*/\n    uint256 public counterNFT; // Contador NFT\n    uint256 private feeBNB; // Taxa em BNB\n    uint256 public totalValueLocked; // Valor total em Stake\n    uint256 public totalLiquidity; // Liquidez total na Pool\n    uint256 private feeTax; // Taxa em ARC\n    uint256 public totalFee; // Taxas Arrecadadas\n    uint256 public timeOne = 1900000; //  21 Dias\n    uint256 public timeTwo = 3100000; // 35 Dias\n    /*=== Booleano ===*/\n    bool private activeStake; // Ativa ou Desativa o Stake\n    /*=== Constructor ===*/\n    constructor(IBEP20 _token, uint256 _feeBNB) ERC1155(\"\") {\n        token = _token; // Define Endereço BEP20\n        feeBNB = _feeBNB; // Define Taxa BNB\n        randons = new Random(); // Define Endereço de Random\n        dividends = new DividendsPaying(); // Define Endereço de Dividendos\n    }\n    /*=== Event ===*/\n    event NewMint(address indexed from, address indexed to, uint256 indexed id);\n    event NewStake(address indexed sender, uint256 indexed sAmount, uint256 indexed bAmount);\n    event UriNFT(uint256 indexed id, string indexed newUri);\n    /*=== Receive ===*/\n    receive() external payable {}\n    /*=== Modifier ===*/\n    modifier decompose(uint256 id, address account) {\n        require(vestingTime(id) == 0, \"Tempo de Bloqueio precisa estar Zerado\");\n        NFTStruct.CreateNFT storage nft = createNFT[id];\n         require(nft.userAdmin == account, \"Voce precisa ser dono dessa NFT\");\n         if(nft.isShareholder) {\n             revert(\"Cotista nao pode Desfazer NFT\");\n         }\n        if(nft.isPreSale || nft.isPrivateSale) {\n            revert(\"Voce nao pode desfazer essa NFT\");\n        }\n        if(nft.isStaking) {\n            revert(\"Precisa sair do Stake para Decompor essa NFT\");\n        }\n        _;\n    }\n    /*=== Private/Internal ===*/\n    function generateID() internal returns(uint256) {\n        return counterNFT += 1; // Gera um novo ID \n    }\n    function generateBlockTime(uint256 boost) internal view returns(uint256) {\n        if(boost \u003c= 40) {\n            return timeOne;\n        }\n        else {\n            return timeTwo;\n        }\n    }\n    function vestingTime(uint256 id) public view returns(uint256) {\n        NFTStruct.CreateNFT storage nft = createNFT[id];\n        uint256 currentTimes = block.timestamp;\n        uint256 endBlock = nft.endVesting;\n        if(currentTimes \u003e= endBlock) {\n            return 0;\n        }\n        else {\n            return endBlock - currentTimes;\n        }\n    }\n    function randomOwner() public view returns(address) {\n        return randons.owner();\n    }\n    function dividendsOwner() public view returns(address) {\n        return dividends.owner();\n    }\n    function withdrawableDividendOf(address sender) public view returns(uint256) {\n        return dividends.withdrawableDividendOf(sender);\n    }\n    function accumulativeDividendOf(address sender) public view returns(uint256) {\n        return dividends.accumulativeDividendOf(sender);\n    }\n    function fetchMyNfts(address account) public view returns(NFTStruct.CreateNFT[] memory) {\n        // Pega o Ultimo NFT mintado\n        uint256 totalNft = counterNFT;\n        // Cria o sistema de Iteração\n        uint256 itemCount = 0;\n        // Pega o Ultimo ID do _msgSender()\n        uint256 currentIndex = 0;\n        // Cria uma Iteração para o LOOP FOR pegando todas as Ids do OwnerNFT\n        for (uint i = 0; i \u003c totalNft; i++) {\n            if (createNFT[i + 1].userAdmin == account) {\n            itemCount += 1;\n            }\n        }\n        // Gera uma Nova Iteração com os IDs já definidos de cada _msgSender()\n        NFTStruct.CreateNFT[] memory items = new NFTStruct.CreateNFT[](itemCount);\n        for (uint i = 0; i \u003c totalNft; i++) {\n            if (createNFT[i + 1].userAdmin == account) {\n            uint currentId = i + 1;\n            NFTStruct.CreateNFT storage currentItem = createNFT[currentId];\n            items[currentIndex] = currentItem;\n            currentIndex += 1;\n            }\n        }\n        return items;\n    }\n    function stringCallData(uint256 id, string memory nftUri) private  {\n        _setURI(id, nftUri); // Armazena URI\n        emit UriNFT(id, nftUri); // Emite um Evento\n    }\n    // function stringsEquals(string memory s1, string memory s2) private pure returns (bool) {\n    // bytes memory b1 = bytes(s1);\n    // bytes memory b2 = bytes(s2);\n    // uint256 l1 = b1.length;\n    // if (l1 != b2.length) return false;\n    // for (uint256 i=0; i\u003cl1; i++) {\n    //     if (b1[i] != b2[i]) return false;\n    // }\n    // return true;\n    // }\n    /*=== External/Public ===*/\n    function castingNFT(uint256 tAmount, uint256 idStone) external payable nonReentrant {\n        if(feeBNB \u003e 0) {\n            require(msg.value == feeBNB, \"Saldo em BNB nao definido\");\n        }\n        require(activeStake, \"Stake precisa ser ativado\");\n        require(tAmount \u003e 0, \"Amount precisa ser maior do que Zero\");\n        totalValueLocked += tAmount;\n        uint256 initialTime = block.timestamp; \n        uint256 newID = generateID(); \n        uint256 autoBoost = randons.generateRandMod();\n        NFTStruct.CreateNFT storage nft = createNFT[newID];\n        nft.userAdmin = payable(_msgSender()); \n        nft.idNFT = newID; \n        nft.initialValue = tAmount;\n        nft.percentBoost = autoBoost; \n        nft.valueBoost = (tAmount.mul(autoBoost).div(100)).add(tAmount);\n        nft.startVesting = initialTime;\n        nft.endVesting = initialTime.add(generateBlockTime(autoBoost));\n        nft.isUser = true;\n        IBEP20(token).transferFrom(_msgSender(), address(this), tAmount);\n        require(idStone == 1 || idStone == 2 || idStone == 3 || idStone == 3 || idStone == 4,\"Precisa definir String\");\n        if (idStone == 1){\n            nft.nameNFT = \"Fire Stone\";\n            stringCallData(newID, fireStone);\n        }\n        if (idStone == 2){\n            nft.nameNFT = \"Water Stone\";\n            stringCallData(newID, waterStone);\n        }\n        if (idStone == 3){\n            nft.nameNFT = \"Soul Stone\";\n            stringCallData(newID, soulStone);\n        }\n        if (idStone == 4){\n            nft.nameNFT = \"Life Stone\";\n            stringCallData(newID, lifeStone);\n        }\n        _mint(_msgSender(), newID, 1, \"\" );\n        emit NewMint(address(0), _msgSender(), newID); // emite um evento\n    }\n    function startStake(uint256 id) external payable updateReward(_msgSender()) nonReentrant{\n        if(feeBNB \u003e 0) {\n            require(msg.value == feeBNB, \"Saldo em BNB nao definido\");\n        }\n        require(activeStake, \"Stake precisa ser ativado\");\n        NFTStruct.CreateNFT storage nft = createNFT[id];\n        if(nft.userAdmin == _msgSender()) {\n            bool isTrue = nft.isStaking;\n            uint256 sAmount = nft.initialValue;\n            uint256 bAmount = nft.valueBoost;\n            require(!isTrue, \"NFT Ja esta em Staking\");\n            nft.isStaking = true;\n            balanceUser[_msgSender()] += bAmount;\n            totalSupplyRewards += sAmount;\n            emit NewStake(_msgSender(), sAmount, bAmount);\n        }\n        else {\n            revert(\"Voce precisa ser Dono da NFT\");\n        }\n    }\n    function stopStake(uint256 id) external payable updateReward(_msgSender()) nonReentrant{\n        if(feeBNB \u003e 0) {\n            require(msg.value == feeBNB, \"Saldo em BNB nao definido\");\n        }\n        NFTStruct.CreateNFT storage nft = createNFT[id];\n        if(nft.userAdmin == _msgSender()) {\n            bool isTrue = nft.isStaking;\n            uint256 sAmount = nft.initialValue;\n            uint256 bAmount = nft.valueBoost;\n            require(isTrue, \"NFT nao esta em Staking\");\n            nft.isStaking = false;\n            balanceUser[_msgSender()] -= bAmount;\n            totalSupplyRewards -= sAmount;\n        }\n        else {\n            revert(\"Voce precisa ser Dono da NFT\");\n        }\n    }\n    function takeMyRewards() external payable updateReward(_msgSender())  nonReentrant{\n        if(feeBNB \u003e 0) {\n            require(msg.value == feeBNB, \"ARC:Taxa Precisa ser Cobrada\");\n        }\n        require(harvestUser() == 0, \"Tempo de Colheita nao liberado\");\n        blockHarvest();\n        uint256 reward = rewards[_msgSender()];\n        if (reward \u003e 0) {\n            uint256 fee = reward.mul(feeTax).div(100);\n            reward = reward.sub(fee);\n            totalFee += fee;\n            totalLiquidity -= reward;\n            rewards[_msgSender()] = 0;\n            IBEP20(token).transfer(_msgSender(), reward);\n        }\n        else {\n            revert(\"ARC:Voce nao Possui Saldo de Recompensa\");\n        }\n    }\n    function decomposeNFT(uint256 id) external payable decompose(id, _msgSender()) nonReentrant{\n        if(feeBNB \u003e 0) {\n            require(msg.value == feeBNB, \"ARC:Taxa Precisa ser Cobrada\");\n        }\n        NFTStruct.CreateNFT storage nft = createNFT[id];        \n        nft.userAdmin = payable(address(0)); \n        nft.percentBoost = 0; \n        nft.valueBoost = 0;\n        uint256 value = nft.initialValue;\n        totalValueLocked -= value;\n        IBEP20(token).transfer(_msgSender(), value);\n        nft.initialValue = 0;\n        _safeTransferFrom(_msgSender(), burnAddress, id, 1, \"\");\n    }\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount\n    ) public virtual  {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        NFTStruct.CreateNFT storage nft = createNFT[id];\n        if(nft.userAdmin == _msgSender()) {\n            if(nft.isStaking) revert(\"Precisa sair do Stake\");\n            nft.userAdmin = payable(to);\n            if(nft.isShareholder) {\n                balanceShareHolder[from] -= nft.valueBoost;\n                balanceShareHolder[to] += nft.valueBoost;\n                uint256 balanceFrom =  balanceShareHolder[from];\n                uint256 balanceTo = balanceShareHolder[to];\n\n                try dividends.setBalance(payable(from),balanceFrom) {} catch {}\n                try dividends.setBalance(payable(to), balanceTo) {} catch {}\n            }\n            _safeTransferFrom(from, to, id, amount, \"\");\n        }\n        else {\n            revert(\"Precisa ser o Dono dessa NFT\");\n        }\n    }\n    function getBNBShareHolder() public {\n        dividends.withdrawMyReward(_msgSender());\n    }\n    /*=== Administrativo ===*/\n    function ownerNFT(address recipient, uint256 idStone, uint256 tAmount, uint256 endBlocks, uint256 boost, bool presale, bool privatesale, bool shareholder) external onlyOwner {\n        uint256 newID = generateID();\n        uint256 autoBoost = boost;\n        uint256 initialTime = block.timestamp;\n        NFTStruct.CreateNFT storage nft = createNFT[newID];\n        nft.userAdmin = payable(recipient); \n        nft.idNFT = newID;\n        nft.initialValue = tAmount; \n        nft.percentBoost = autoBoost; \n        nft.valueBoost = (tAmount.mul(autoBoost).div(100)).add(tAmount);\n        nft.startVesting = initialTime;\n        nft.endVesting = initialTime + endBlocks;\n        nft.isUser = true;\n        nft.isPreSale = presale;\n        nft.isPrivateSale = privatesale;\n        nft.isShareholder = shareholder;\n        if(shareholder) {\n            uint256 balance = balanceShareHolder[recipient];\n            if(balance \u003e 0) {\n                balance += nft.valueBoost;\n                dividends.setBalance(payable(recipient), balance);\n            }\n            else {\n                balanceShareHolder[recipient] = nft.valueBoost;\n                dividends.setBalance(payable(recipient), nft.valueBoost);\n            }\n            \n        }\n        require(idStone == 1 || idStone == 2 || idStone == 3 || idStone == 3 || idStone == 4,\"Precisa definir String\");\n        if (idStone == 1){\n            nft.nameNFT = \"Fire Stone\";\n            stringCallData(newID, fireStone);\n        }\n        if (idStone == 2){\n            nft.nameNFT = \"Water Stone\";\n            stringCallData(newID, waterStone);\n        }\n        if (idStone == 3){\n            nft.nameNFT = \"Soul Stone\";\n            stringCallData(newID, soulStone);\n        }\n        if (idStone == 4){\n            nft.nameNFT = \"Life Stone\";\n            stringCallData(newID, lifeStone);\n        }\n        _mint(recipient, newID, 1, \"\" );\n    }\n    function manualDecompose(uint256 percent, uint256 id) external onlyOwner {\n        NFTStruct.CreateNFT storage nft = createNFT[id];    \n        require(nft.isPreSale || nft.isPrivateSale, \"Essa NFT nao esta em private ou pre-sale\");    \n        uint256 oldValue = nft.initialValue;\n        uint256 newValue = nft.initialValue.mul(percent).div(100);\n        nft.initialValue = oldValue.sub(newValue);\n        nft.valueBoost -= newValue;\n        totalValueLocked -= newValue;\n        IBEP20(token).transfer(_msgSender(), newValue);\n    }\n    function setUri(uint256 tokenId, string calldata tokenURI, string calldata idStone) external onlyOwner {\n        NFTStruct.CreateNFT storage nft = createNFT[tokenId];\n        _setURI(tokenId, tokenURI);\n        nft.nameNFT = idStone;\n    }\n    function setFeeBNB(uint256 _feeBNB) external onlyOwner {\n        feeBNB = _feeBNB;\n    }\n    function addPoolRewards(uint256 lAmount) external onlyOwner {\n        uint256 liquidityAmount = lAmount * 10**18;\n        totalLiquidity += liquidityAmount;\n        IBEP20(token).transferFrom(_msgSender(), address(this), liquidityAmount);\n    }\n    function removePoolRewards() external onlyOwner {\n        uint256 removeLiquidity = totalLiquidity;\n        totalLiquidity -= removeLiquidity;\n        IBEP20(token).transfer(_msgSender(), removeLiquidity);\n    }\n    function removeTotalValueLocked() external onlyOwner {\n        uint256 locked = totalValueLocked;\n        totalValueLocked -= locked;\n        IBEP20(token).transfer(_msgSender(), locked);\n    }\n    function emergencialWithdraw(uint256 eAmount) external onlyOwner {\n        IBEP20(token).transfer(_msgSender(), eAmount);\n    }\n    function withdrawBNBManually() external onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(receiveAddress).transfer(balance);\n    }\n    function setFeeTax(uint256 _feeTax) external onlyOwner {\n        feeTax = _feeTax;\n    }\n    function setBlockTime(uint256 _timeOne, uint256 _timeTwo) external onlyOwner {\n        timeOne = _timeOne;\n        timeTwo = _timeTwo;\n    }\n    function changeToken(address _token) external onlyOwner {\n        token = IBEP20(_token);\n    }\n    function changeReceive(address _receiveAddress) external onlyOwner {\n        receiveAddress = _receiveAddress;\n    }\n    function statusStake(bool _activeStake) external onlyOwner {\n        activeStake = _activeStake;\n    }\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n    function updateRandom(address newAddress) external onlyOwner {\n      Random newRandom = Random(payable(newAddress));\n      randons = newRandom;\n    }\n    function updateDividends(address newAddress) external onlyOwner {\n      DividendsPaying newDividends = DividendsPaying(payable(newAddress));\n      dividends = newDividends;\n    }\n    function getLostBNB() external payable onlyOwner {\n        dividends.getLostBNB(_msgSender());\n    }\n    function changeStoneURI(string calldata _fireStone, string calldata _waterStone, string calldata _soulStone, string calldata _lifeStone) external onlyOwner {\n        fireStone = _fireStone;\n        waterStone = _waterStone;\n        soulStone = _soulStone;\n        lifeStone = _lifeStone;\n    }\n}\n"},"StakingRewards.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"./SafeMath.sol\"; // Importa SafeMath\nimport \"./Ownable.sol\"; // Importa Owner\n\nabstract contract StakeSystem is Ownable {\n    using SafeMath for uint256; // SafeMath para uint256\n    /*=== Mapping ===*/\n    mapping (address =\u003e uint256) public balanceUser; // Saldo \n    mapping (address =\u003e uint256) public rewards; // Recompensa\n    mapping (address =\u003e uint256) public userRewardPerTokenPaid; // Recompensa Paga\n    mapping (address =\u003e uint256) public harvestTime; // Tempo de Colheita\n    /*=== Uints ===*/\n    uint256 public lastUpdateTime; // Tempo Stake\n    uint256 public periodFinish; // Encerramento Stake\n    uint256 public rewardRate; // Gera a Recompensa por Token\n    uint256 public rewardsDuration; // Duração da Pool\n    uint256 public rewardPerTokenStored; // Armazena Recompensa Por Token\n    uint256 private stakingDecimalRate = 10**18; // Fator Decimal\n    uint256 public totalSupplyRewards; // Total Aportado dos Usuarios\n    uint256 public harvTime; // Tempo entre Colheita\n    /*=== Modifier ===*/\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastRewardTimeApplied();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n    /*=== Private/Internal/Public ===*/\n    function blockHarvest() internal {\n        harvestTime[_msgSender()] = block.timestamp + harvTime;\n    }\n    function min(uint256 a, uint256 b) internal pure returns(uint256) {\n        return a \u003c b ? a : b;\n    }\n    function lastRewardTimeApplied() public view returns(uint256) {\n        return min(block.timestamp, periodFinish);\n    }\n    function rewardPerToken() public view returns(uint256) {\n        if(totalSupplyRewards == 0) {\n            return rewardPerTokenStored;\n        }\n        return \n            rewardPerTokenStored.add(lastRewardTimeApplied()\n            .sub(lastUpdateTime)\n            .mul(rewardRate)\n            .mul(stakingDecimalRate)\n            .div(totalSupplyRewards));\n    }\n    function earned(address account) public view returns (uint256) {\n        return         \n            balanceUser[account]\n            .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n            .div(stakingDecimalRate)\n            .add(rewards[account]);\n    }\n    function harvestUser() public view returns(uint256) {\n        uint256 currentTimes = block.timestamp;\n        uint256 userHarv = harvestTime[_msgSender()];\n        if(currentTimes \u003e= userHarv) {\n            return 0;\n        }\n        else {\n            return userHarv - currentTimes;\n        }\n    }\n    function getRewardForDuration() public view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n    /*=== Administrativo ===*/\n    function initRewards(uint256 rAmount, uint256 tDurantion) external onlyOwner updateReward(address(0)) {\n        rewardRate = (rAmount * 10**18).div(tDurantion);\n        periodFinish = block.timestamp + tDurantion;\n        rewardsDuration = tDurantion;\n        lastUpdateTime = block.timestamp;\n    }\n    function setHarvest(uint256 _harvTime) external onlyOwner {\n        harvTime = _harvTime;\n    }\n}\n"},"StringNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nabstract contract isStone {\n    /*=== Strings ===*/\n    string public fireStone = \"https://bafybeigwfydbmmzdqvi6c5zuocpwegabnhtoki7qxrvk7kvdr6ey5mfd3e.ipfs.nftstorage.link/\";\n    string public waterStone = \"https://bafybeieyx6iavex5butju6wiqwtqcgqbchilovx47pwv7mvg6v2wnwk72q.ipfs.nftstorage.link/\";\n    string public soulStone = \"https://bafybeihbbzdhy3s7mda2chhb4mtvq4rj2eo4jqc2lnvxdkvdvc66voi6mu.ipfs.nftstorage.link/\";\n    string public lifeStone = \"https://bafybeifkfjkw7s5ht3rtckvdtl5cng7r6ugcrdlbzuf5fenmbvlxv7a3pu.ipfs.nftstorage.link/\";\n}\n"}}