// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\IERC20.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)

// pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\extensions\IERC20Metadata.sol

// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)

// pragma solidity ^0.8.0;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Context.sol

// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

// pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\ERC20.sol

// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)

// pragma solidity ^0.8.0;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\IERC20.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\extensions\IERC20Metadata.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\IAccessControl.sol

// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)

// pragma solidity ^0.8.0;

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Strings.sol

// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)

// pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\introspection\IERC165.sol

// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)

// pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\introspection\ERC165.sol

// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)

// pragma solidity ^0.8.0;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\introspection\IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\AccessControl.sol

// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)

// pragma solidity ^0.8.0;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\IAccessControl.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Context.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Strings.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\introspection\ERC165.sol";

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}


// Dependency file: C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\Ownable.sol

// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

// pragma solidity ^0.8.0;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\utils\Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// Dependency file: contracts\interfaces\IUniswapV2Factory.sol

// Uniswap V2
// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}


// Dependency file: contracts\interfaces\IUniswapV2Router02.sol

// Uniswap V2
// pragma solidity 0.8.10;

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}


// Root file: contracts\THN.sol

pragma solidity 0.8.10;

// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\token\ERC20\ERC20.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\AccessControl.sol";
// import "C:\Blockchain\thundernode\node_modules\@openzeppelin\contracts\access\Ownable.sol";
// import "contracts\interfaces\IUniswapV2Factory.sol";
// import "contracts\interfaces\IUniswapV2Router02.sol";

contract THN is ERC20, Ownable, AccessControl {
  bytes32 public constant DAO = keccak256("DAO");
  // Maximum fee that can be set. Only here for safety reasons
  uint256 public constant MAXIMUM_FEE = 300; // 300/1000 = 30%

  IUniswapV2Router02 public pancakeRouter;

  address public ThundernodeDAO;
  uint256 public initialSupply = 20_456_743e18;
  address public pancakeThnBnbPair;

  mapping(address => bool) private _blacklist;
  mapping(address => bool) private _exemptFromFees;
  mapping(address => bool) public _automatedMarketMakerPairs;

  address payable public feeSafe; // The safe that stores the BNB made from the fees
  uint256 public safeFeeBalance = 0; // THN balance accumulated from fee safe fees
  uint256 public liquidityFeeBalance = 0; // THN balance accumulated from liquidity fees
  uint256 public minimumSafeFeeBalanceToSwap = 100e18; // THN balance required to perform a swap
  uint256 public minimumLiquidityFeeBalanceToSwap = 100e18; // THN balance required to add liquidity
  bool public swapEnabled = true;

  // Swapping booleans. Here to avoid having two swaps in the same block
  bool private swapping = false;
  bool private swapLiquify = false;

  // Buying and selling fees
  uint256 public buyingFee = 0; // (/1000)
  uint256 public sellingFee = 100; // (/1000)

  // Part (/1000) of the fees that will be sent to the safe fee. The rest will be sent to the liquidity fee
  uint256 public safeFeePercentage = 900;
  // Not needed because safeFeePercentage + liquidityFeePercentage = 1000
  // uint256 public liquidityFeePercentage = 100;

  event SwappedSafeFeeBalance(uint256 amount);
  event AddedLiquidity(uint256 thnAmount, uint256 bnbAmount);

  /** CONSTRUCTOR */

  constructor(address _pancakeRouter, address payable _feeSafe) ERC20("Thundernode", "THN") {
    feeSafe = _feeSafe;
    _mint(msg.sender, initialSupply);
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    grantRole(DAO, msg.sender);
    pancakeRouter = IUniswapV2Router02(_pancakeRouter);
    pancakeThnBnbPair = IUniswapV2Factory(pancakeRouter.factory()).createPair(
      address(this),
      pancakeRouter.WETH()
    );

    // Exempt some addresses from fees
    _exemptFromFees[msg.sender] = true;
    _exemptFromFees[address(this)] = true;
    _exemptFromFees[address(0)] = true;

    _setAutomatedMarketMakerPair(address(pancakeThnBnbPair), true);
  }

  /** MAIN METHODS */

  receive() external payable {}

  /** INTERNAL METHODS */

  // Overrides ERC20 to implement the blacklist
  function _beforeTokenTransfer(
    address _from,
    address _to,
    uint256 _amount
  ) internal virtual override(ERC20) {
    require(!isBlacklisted(_from), "Token transfer refused. Sender is blacklisted");
    require(!isBlacklisted(_to), "Token transfer refused. Recipient is blacklisted");
    super._beforeTokenTransfer(_from, _to, _amount);
  }

  // Transfers THN from _from to _to, collects relevant fees, and performs a swap if needed
  function _transfer(
    address _from,
    address _to,
    uint256 _amount
  ) internal override {
    require(_from != address(0), "Cannot transfer from the zero address");
    require(_amount > 0, "Cannot transfer 0 tokens");
    uint256 fees = 0;

    // Only take fees on buys / sells, do not take on wallet transfers
    if (!_exemptFromFees[_from] && !_exemptFromFees[_to]) {
      // On sell
      if (_automatedMarketMakerPairs[_to] && sellingFee > 0) {
        fees = (_amount * sellingFee) / 1000;
      }
      // On buy
      else if (_automatedMarketMakerPairs[_from] && buyingFee > 0) {
        fees = (_amount * buyingFee) / 1000;
      }

      // Send fees to the THN contract
      if (fees > 0) {
        // Send the THN tokens to the contract
        super._transfer(_from, address(this), fees);

        // Keep track of the THN that were sent
        uint256 safeFees = (fees * safeFeePercentage) / 1000;
        safeFeeBalance += safeFees;
        liquidityFeeBalance += fees - safeFees;
      }

      _amount -= fees;
    }

    // Swapping logic
    if (swapEnabled) {
      // If the one of the fee balances is above a certain amount, swap it for BNB and transfer it to the fee safe
      // Do not do both in one transaction
      if (!swapping && !swapLiquify && safeFeeBalance > minimumSafeFeeBalanceToSwap) {
        // Forbid swapping node creation fees
        swapping = true;

        // Perform the swap
        _swapSafeFeeBalance();

        // Allow swapping again
        swapping = false;
      } else if (!swapping && !swapLiquify && liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap) {
        // Forbid swapping liquidity fees
        swapLiquify = true;

        // Perform the swap
        _liquify();

        // Allow swapping again
        swapLiquify = false;
      }
    }

    super._transfer(_from, _to, _amount);
  }

  // Swaps safe fee balance for BNB and sends it to the fee safe
  function _swapSafeFeeBalance() internal {
    require(safeFeeBalance > minimumSafeFeeBalanceToSwap, "Not enough THN tokens to swap for safe fee");

    uint256 oldBalance = address(this).balance;

    // Swap
    _swapThnForBnb(safeFeeBalance);

    // Update nodeCreationFeeBalance
    safeFeeBalance = 0;

    // Send BNB to fee safe
    uint256 toSend = address(this).balance - oldBalance;
    feeSafe.transfer(toSend);

    emit SwappedSafeFeeBalance(toSend);
  }

  // Swaps "_thnAmount" THN for BNB
  function _swapThnForBnb(uint256 _thnAmount) internal {
    address[] memory path = new address[](2);
    path[0] = address(this);
    path[1] = pancakeRouter.WETH();

    _approve(address(this), address(pancakeRouter), _thnAmount);

    pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
      _thnAmount,
      0, // accept any amount of BNB
      path,
      address(this),
      block.timestamp
    );
  }

  // Swaps liquidity fee balance for BNB and adds it to the THN / BNB pool
  function _liquify() internal {
    require(
      liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap,
      "Not enough THN tokens to swap for adding liquidity"
    );

    uint256 oldBalance = address(this).balance;

    // Sell half of the THN for BNB
    uint256 lowerHalf = liquidityFeeBalance / 2;
    uint256 upperHalf = liquidityFeeBalance - lowerHalf;

    // Swap
    _swapThnForBnb(lowerHalf);

    // Update liquidityFeeBalance
    liquidityFeeBalance = 0;

    // Add liquidity
    _addLiquidity(upperHalf, address(this).balance - oldBalance);
  }

  // Adds liquidity to the THN / BNB pair on Pancakeswap
  function _addLiquidity(uint256 _thnAmount, uint256 _bnbAmount) internal {
    // Approve token transfer to cover all possible scenarios
    _approve(address(this), address(pancakeRouter), _thnAmount);

    // Add the liquidity
    pancakeRouter.addLiquidityETH{value: _bnbAmount}(
      address(this),
      _thnAmount,
      0, // Slippage is unavoidable
      0, // Slippage is unavoidable
      address(0),
      block.timestamp
    );

    emit AddedLiquidity(_thnAmount, _bnbAmount);
  }

  // Marks an address as an automated market pair / removes that mark
  function _setAutomatedMarketMakerPair(address _pair, bool _value) internal {
    _automatedMarketMakerPairs[_pair] = _value;
  }

  /** VIEW METHODS */

  // Returns true if "_user" is blacklisted, false instead
  function isBlacklisted(address _user) public view returns (bool) {
    return _blacklist[_user];
  }

  /** DAO METHODS */

  // Mint new THN tokens to the given address
  function mintDAO(address _to, uint256 _amount) public onlyRole(DAO) {
    _mint(_to, _amount);
  }

  // Burns THN tokens from a given address
  function burnDAO(address _from, uint256 _amount) public onlyRole(DAO) {
    _burn(_from, _amount);
  }

  // Withdraws an amount of BNB stored on the contract
  function withdrawDAO(uint256 _amount) external onlyRole(DAO) {
    payable(msg.sender).transfer(_amount);
  }

  // Withdraws an amount of ERC20 tokens stored on the contract
  function withdrawERC20DAO(address _erc20, uint256 _amount) external onlyRole(DAO) {
    IERC20(_erc20).transfer(msg.sender, _amount);
  }

  // Manually swaps the safe fees
  function manualSafeFeeSwapDAO() external onlyRole(DAO) {
    // Forbid swapping node creation fees
    swapping = true;

    // Perform the swap
    _swapSafeFeeBalance();

    // Allow swapping again
    swapping = false;
  }

  // Manually adds liquidity
  function manualLiquifyDAO() external onlyRole(DAO) {
    // Forbid swapping liquidity fees
    swapLiquify = true;

    // Perform the swap
    _liquify();

    // Allow swapping again
    swapLiquify = false;
  }

  /** SETTERS */

  function changeDAO(address _newDAO) external onlyRole(DAO) {
    revokeRole(DAO, ThundernodeDAO);
    ThundernodeDAO = _newDAO;
    grantRole(DAO, _newDAO);
  }

  function revokeDAO(address _DaoToRevoke) external onlyRole(DAO) {
    revokeRole(DAO, _DaoToRevoke);
  }

  function blacklistDAO(address _user, bool _state) external onlyRole(DAO) {
    _blacklist[_user] = _state;
  }

  function setFeeSafeDAO(address payable _feeSafe) external onlyRole(DAO) {
    feeSafe = _feeSafe;
  }

  function setAutomatedMarketMakerPairDAO(address _pair, bool _value) external onlyRole(DAO) {
    require(
      _pair != pancakeThnBnbPair,
      "The THN / BNB pair cannot be removed from _automatedMarketMakerPairs"
    );
    _setAutomatedMarketMakerPair(_pair, _value);
  }

  function excludeFromFeesDAO(address _account, bool _state) external onlyRole(DAO) {
    _exemptFromFees[_account] = _state;
  }

  function setMinimumSafeFeeBalanceToSwapDAO(uint256 _minimumSafeFeeBalanceToSwap) external onlyRole(DAO) {
    minimumSafeFeeBalanceToSwap = _minimumSafeFeeBalanceToSwap;
  }

  function setMinimumLiquidityFeeBalanceToSwapDAO(uint256 _minimumLiquidityFeeBalanceToSwap) external onlyRole(DAO) {
    minimumLiquidityFeeBalanceToSwap = _minimumLiquidityFeeBalanceToSwap;
  }

  function enableSwappingDAO() external onlyRole(DAO) {
    swapEnabled = true;
  }

  function stopSwappingDAO() external onlyRole(DAO) {
    swapEnabled = false;
  }

  function setBuyingFeeDAO(uint256 _buyingFee) external onlyRole(DAO) {
    require(_buyingFee <= MAXIMUM_FEE, "New fee is higher than the maximum fee");
    buyingFee = _buyingFee;
  }

  function setSellingFeeDAO(uint256 _sellingFee) external onlyRole(DAO) {
    require(_sellingFee <= MAXIMUM_FEE, "New fee is higher than the maximum fee");
    sellingFee = _sellingFee;
  }

  function setSafeFeePercentageDAO(uint256 _safeFeePercentage) external onlyRole(DAO) {
    safeFeePercentage = _safeFeePercentage;
  }
}