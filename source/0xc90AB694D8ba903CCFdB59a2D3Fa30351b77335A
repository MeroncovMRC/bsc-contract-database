// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name = "LogicAI";
    string public symbol = "LogAI";
    uint256 public totalSupply = 100000000 * 10**18;
    uint8 public decimals = 18;
    address public owner;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Mint(address indexed to, uint256 value);
    event Withdraw(address indexed from, address indexed to, uint256 value);

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Transfer to zero address");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        uint256 commission = _value * 2 / 100;
        balanceOf[msg.sender] -= _value;
        balanceOf[address(this)] += commission;
        balanceOf[_to] += (_value - commission);

        emit Transfer(msg.sender, _to, (_value - commission));
        emit Transfer(msg.sender, address(this), commission);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Transfer to zero address");
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance");

        uint256 commission = _value * 2 / 100;
        balanceOf[_from] -= _value;
        balanceOf[address(this)] += commission;
        balanceOf[_to] += (_value - commission);
        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, (_value - commission));
        emit Transfer(_from, address(this), commission);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function burn(uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        totalSupply -= _value;
        emit Burn(msg.sender, _value);
        return true;
    }

    function mint(address _to, uint256 _value) public returns (bool success) {
        require(msg.sender == owner, "Only owner can call this function");
        balanceOf[_to] += _value;
        totalSupply += _value;
        emit Mint(_to, _value);
        return true;
    }

    function mintTo(address _to, uint256 _value) public returns (bool success) {
        require(msg.sender == owner, "Only owner can call this function");
        balanceOf[_to] += _value;
        totalSupply += _value;
        emit Mint(_to, _value);
        return true;
    }

function withdraw() public {
    require(msg.sender == owner, "Only owner can withdraw");
    
    uint256 balance = address(this).balance;
    payable(owner).transfer(balance);
    
    emit Withdraw(msg.sender, owner, balance);
}

}