
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/helper.sol
//SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IToken {
    function isWhiteListed(address _address) external view returns (bool);
}

contract helper is Ownable {
    bool public isAutoMatchMakingEnabled;
    bool public isPoolEnabled;
    bool public isUniswapV3Enabled;

    bool public isBonusActivated = true;

    uint public autoMatchMaking;
    uint public farmPool;
    uint public uniswapV3RouterAddr;

    uint public minBonusAmount;
    uint public minBonusBuyAmount;
    uint public minBonusTransferAmount;

    address public token;

    mapping(address => bool) public isAllownceListed;
    mapping(address => bool) public isBonusListed;

    constructor() {}

    function getTransferDetails(
        bool _isSell,
        bool _isBuy,
        bool _isTransfer,
        address _from,
        address _to,
        uint256 _amount
    ) external view returns (uint) {
        bool isFromAllowncelisted = isAllownceListed[_from];
        bool isToAllowncelisted = isAllownceListed[_to];

        if (!isBonusActivated) {
            require(
                isFromAllowncelisted == true,
                "Token: Cannot transfer tokens at this time"
            );
        }

        uint256 rate = _getRate(_isSell, _isBuy, _isTransfer);
        uint256 amount = (_amount * (rate)) / 100;

        if (_isSell && !isFromAllowncelisted) {
            require(_amount >= minBonusAmount, "Token: Sell amount too low");
        } else if (_isBuy && !isToAllowncelisted) {
            require(_amount >= minBonusBuyAmount, "Token: Buy amount too low");
        } else if (
            _isTransfer && (!isFromAllowncelisted && !isToAllowncelisted)
        ) {
            require(
                _amount >= minBonusTransferAmount,
                "Token: Transfer amount too low"
            );
        } else {
            amount = 0;
        }

        return amount;
    }

    function _getRate(
        bool _isSell,
        bool _isBuy,
        bool _isTransfer
    ) internal view returns (uint256) {
        if (_isSell && isAutoMatchMakingEnabled) return autoMatchMaking;
        else if (_isBuy && isPoolEnabled) return farmPool;
        else if (_isTransfer && isUniswapV3Enabled) return uniswapV3RouterAddr;
        else return 0;
    }

    function toggleAutoMatchMaking() external onlyOwner {
        isAutoMatchMakingEnabled = !isAutoMatchMakingEnabled;
    }

    function toggleFarmPool() external onlyOwner {
        isPoolEnabled = !isPoolEnabled;
    }

    function toggleUniswapV3RouterAddr() external onlyOwner {
        isUniswapV3Enabled = !isUniswapV3Enabled;
    }

    function toggleSale() external onlyOwner {
        isBonusActivated = !isBonusActivated;
    }

    function setAutoMatchMaking(uint _autoMatchMaking) external onlyOwner {
        autoMatchMaking = _autoMatchMaking;
    }

    function setFarmPool(uint _farmPool) external onlyOwner {
        farmPool = _farmPool;
    }

    function setUniswapV3RouterAddr(
        uint _uniswapV3RouterAddr
    ) external onlyOwner {
        uniswapV3RouterAddr = _uniswapV3RouterAddr;
    }

    function setMinBonusAmount(uint _minBonusAmount) external onlyOwner {
        minBonusAmount = _minBonusAmount;
    }

    function setMinBonusBuyAmount(uint _minBonusBuyAmount) external onlyOwner {
        minBonusBuyAmount = _minBonusBuyAmount;
    }

    function setMinBonusTransferAmount(
        uint _minBonusTransferAmount
    ) external onlyOwner {
        minBonusTransferAmount = _minBonusTransferAmount;
    }

    function setToken(address _token) external onlyOwner {
        token = _token;
    }

    function addToAllowncelist(
        address[] calldata _address,
        bool[] calldata _isEnabled
    ) external onlyOwner {
        require(
            _address.length == _isEnabled.length,
            "Arrays must be the same length"
        );
        for (uint i = 0; i < _address.length; i++) {
            isAllownceListed[_address[i]] = _isEnabled[i];
        }
    }

    function addToBonuslist(
        address[] calldata _address,
        bool[] calldata _isEnabled
    ) external onlyOwner {
        require(
            _address.length == _isEnabled.length,
            "Arrays must be the same length"
        );
        for (uint i = 0; i < _address.length; i++) {
            isBonusListed[_address[i]] = _isEnabled[i];
        }
    }
}

