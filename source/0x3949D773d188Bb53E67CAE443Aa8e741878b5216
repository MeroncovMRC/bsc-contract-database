{"ABDKMath64x64.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: BSD-4-Clause\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov \u003cmikhail.vladimirov@gmail.com\u003e\r\n */\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003e= -0x8000000000000000 \u0026\u0026 x \u003c= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (x \u003c\u003c 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    unchecked {\r\n      return int64 (x \u003e\u003e 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003c= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (int256 (x \u003c\u003c 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    unchecked {\r\n      require (x \u003e= 0);\r\n      return uint64 (uint128 (x \u003e\u003e 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = x \u003e\u003e 64;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    unchecked {\r\n      return int256 (x) \u003c\u003c 64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) + y;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) - y;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) * y \u003e\u003e 64;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    unchecked {\r\n      if (x == MIN_64x64) {\r\n        require (y \u003e= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \u0026\u0026\r\n          y \u003c= 0x1000000000000000000000000000000000000000000000000);\r\n        return -y \u003c\u003c 63;\r\n      } else {\r\n        bool negativeResult = false;\r\n        if (x \u003c 0) {\r\n          x = -x;\r\n          negativeResult = true;\r\n        }\r\n        if (y \u003c 0) {\r\n          y = -y; // We rely on overflow behavior here\r\n          negativeResult = !negativeResult;\r\n        }\r\n        uint256 absoluteResult = mulu (x, uint256 (y));\r\n        if (negativeResult) {\r\n          require (absoluteResult \u003c=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000);\r\n          return -int256 (absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n          require (absoluteResult \u003c=\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n          return int256 (absoluteResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    unchecked {\r\n      if (y == 0) return 0;\r\n\r\n      require (x \u003e= 0);\r\n\r\n      uint256 lo = (uint256 (int256 (x)) * (y \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) \u003e\u003e 64;\r\n      uint256 hi = uint256 (int256 (x)) * (y \u003e\u003e 128);\r\n\r\n      require (hi \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      hi \u003c\u003c= 64;\r\n\r\n      require (hi \u003c=\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n      return hi + lo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      int256 result = (int256 (x) \u003c\u003c 64) / y;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      bool negativeResult = false;\r\n      if (x \u003c 0) {\r\n        x = -x; // We rely on overflow behavior here\r\n        negativeResult = true;\r\n      }\r\n      if (y \u003c 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult \u003c= 0x80000000000000000000000000000000);\r\n        return -int128 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (absoluteResult); // We rely on overflow behavior here\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      uint128 result = divuu (x, y);\r\n      require (result \u003c= uint128 (MAX_64x64));\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return -x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return x \u003c 0 ? -x : x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != 0);\r\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      return int128 ((int256 (x) + int256 (y)) \u003e\u003e 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 m = int256 (x) * int256 (y);\r\n      require (m \u003e= 0);\r\n      require (m \u003c\r\n          0x4000000000000000000000000000000000000000000000000000000000000000);\r\n      return int128 (sqrtu (uint256 (m)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      bool negative = x \u003c 0 \u0026\u0026 y \u0026 1 == 1;\r\n\r\n      uint256 absX = uint128 (x \u003c 0 ? -x : x);\r\n      uint256 absResult;\r\n      absResult = 0x100000000000000000000000000000000;\r\n\r\n      if (absX \u003c= 0x10000000000000000) {\r\n        absX \u003c\u003c= 63;\r\n        while (y != 0) {\r\n          if (y \u0026 0x1 != 0) {\r\n            absResult = absResult * absX \u003e\u003e 127;\r\n          }\r\n          absX = absX * absX \u003e\u003e 127;\r\n\r\n          if (y \u0026 0x2 != 0) {\r\n            absResult = absResult * absX \u003e\u003e 127;\r\n          }\r\n          absX = absX * absX \u003e\u003e 127;\r\n\r\n          if (y \u0026 0x4 != 0) {\r\n            absResult = absResult * absX \u003e\u003e 127;\r\n          }\r\n          absX = absX * absX \u003e\u003e 127;\r\n\r\n          if (y \u0026 0x8 != 0) {\r\n            absResult = absResult * absX \u003e\u003e 127;\r\n          }\r\n          absX = absX * absX \u003e\u003e 127;\r\n\r\n          y \u003e\u003e= 4;\r\n        }\r\n\r\n        absResult \u003e\u003e= 64;\r\n      } else {\r\n        uint256 absXShift = 63;\r\n        if (absX \u003c 0x1000000000000000000000000) { absX \u003c\u003c= 32; absXShift -= 32; }\r\n        if (absX \u003c 0x10000000000000000000000000000) { absX \u003c\u003c= 16; absXShift -= 16; }\r\n        if (absX \u003c 0x1000000000000000000000000000000) { absX \u003c\u003c= 8; absXShift -= 8; }\r\n        if (absX \u003c 0x10000000000000000000000000000000) { absX \u003c\u003c= 4; absXShift -= 4; }\r\n        if (absX \u003c 0x40000000000000000000000000000000) { absX \u003c\u003c= 2; absXShift -= 2; }\r\n        if (absX \u003c 0x80000000000000000000000000000000) { absX \u003c\u003c= 1; absXShift -= 1; }\r\n\r\n        uint256 resultShift = 0;\r\n        while (y != 0) {\r\n          require (absXShift \u003c 64);\r\n\r\n          if (y \u0026 0x1 != 0) {\r\n            absResult = absResult * absX \u003e\u003e 127;\r\n            resultShift += absXShift;\r\n            if (absResult \u003e 0x100000000000000000000000000000000) {\r\n              absResult \u003e\u003e= 1;\r\n              resultShift += 1;\r\n            }\r\n          }\r\n          absX = absX * absX \u003e\u003e 127;\r\n          absXShift \u003c\u003c= 1;\r\n          if (absX \u003e= 0x100000000000000000000000000000000) {\r\n              absX \u003e\u003e= 1;\r\n              absXShift += 1;\r\n          }\r\n\r\n          y \u003e\u003e= 1;\r\n        }\r\n\r\n        require (resultShift \u003c 64);\r\n        absResult \u003e\u003e= 64 - resultShift;\r\n      }\r\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\r\n      require (result \u003e= MIN_64x64 \u0026\u0026 result \u003c= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x \u003c 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003e= 0);\r\n      return int128 (sqrtu (uint256 (int256 (x)) \u003c\u003c 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x \u003c= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003e 0);\r\n\r\n      int256 msb = 0;\r\n      int256 xc = x;\r\n      if (xc \u003e= 0x10000000000000000) { xc \u003e\u003e= 64; msb += 64; }\r\n      if (xc \u003e= 0x100000000) { xc \u003e\u003e= 32; msb += 32; }\r\n      if (xc \u003e= 0x10000) { xc \u003e\u003e= 16; msb += 16; }\r\n      if (xc \u003e= 0x100) { xc \u003e\u003e= 8; msb += 8; }\r\n      if (xc \u003e= 0x10) { xc \u003e\u003e= 4; msb += 4; }\r\n      if (xc \u003e= 0x4) { xc \u003e\u003e= 2; msb += 2; }\r\n      if (xc \u003e= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 result = msb - 64 \u003c\u003c 64;\r\n      uint256 ux = uint256 (int256 (x)) \u003c\u003c uint256 (127 - msb);\r\n      for (int256 bit = 0x8000000000000000; bit \u003e 0; bit \u003e\u003e= 1) {\r\n        ux *= ux;\r\n        uint256 b = ux \u003e\u003e 255;\r\n        ux \u003e\u003e= 127 + b;\r\n        result += bit * int256 (b);\r\n      }\r\n\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x \u003c= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003e 0);\r\n\r\n      return int128 (int256 (\r\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF \u003e\u003e 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003c 0x400000000000000000); // Overflow\r\n\r\n      if (x \u003c -0x400000000000000000) return 0; // Underflow\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n\r\n      if (x \u0026 0x8000000000000000 \u003e 0)\r\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E \u003e\u003e 128;\r\n      if (x \u0026 0x4000000000000000 \u003e 0)\r\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC \u003e\u003e 128;\r\n      if (x \u0026 0x2000000000000000 \u003e 0)\r\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F \u003e\u003e 128;\r\n      if (x \u0026 0x1000000000000000 \u003e 0)\r\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 \u003e\u003e 128;\r\n      if (x \u0026 0x800000000000000 \u003e 0)\r\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD \u003e\u003e 128;\r\n      if (x \u0026 0x400000000000000 \u003e 0)\r\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 \u003e\u003e 128;\r\n      if (x \u0026 0x200000000000000 \u003e 0)\r\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F \u003e\u003e 128;\r\n      if (x \u0026 0x100000000000000 \u003e 0)\r\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 \u003e\u003e 128;\r\n      if (x \u0026 0x80000000000000 \u003e 0)\r\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B \u003e\u003e 128;\r\n      if (x \u0026 0x40000000000000 \u003e 0)\r\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F \u003e\u003e 128;\r\n      if (x \u0026 0x20000000000000 \u003e 0)\r\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF \u003e\u003e 128;\r\n      if (x \u0026 0x10000000000000 \u003e 0)\r\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 \u003e\u003e 128;\r\n      if (x \u0026 0x8000000000000 \u003e 0)\r\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D \u003e\u003e 128;\r\n      if (x \u0026 0x4000000000000 \u003e 0)\r\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 \u003e\u003e 128;\r\n      if (x \u0026 0x2000000000000 \u003e 0)\r\n        result = result * 0x1000162E525EE054754457D5995292026 \u003e\u003e 128;\r\n      if (x \u0026 0x1000000000000 \u003e 0)\r\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC \u003e\u003e 128;\r\n      if (x \u0026 0x800000000000 \u003e 0)\r\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB \u003e\u003e 128;\r\n      if (x \u0026 0x400000000000 \u003e 0)\r\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 \u003e\u003e 128;\r\n      if (x \u0026 0x200000000000 \u003e 0)\r\n        result = result * 0x10000162E43F4F831060E02D839A9D16D \u003e\u003e 128;\r\n      if (x \u0026 0x100000000000 \u003e 0)\r\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 \u003e\u003e 128;\r\n      if (x \u0026 0x80000000000 \u003e 0)\r\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 \u003e\u003e 128;\r\n      if (x \u0026 0x40000000000 \u003e 0)\r\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B \u003e\u003e 128;\r\n      if (x \u0026 0x20000000000 \u003e 0)\r\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 \u003e\u003e 128;\r\n      if (x \u0026 0x10000000000 \u003e 0)\r\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE \u003e\u003e 128;\r\n      if (x \u0026 0x8000000000 \u003e 0)\r\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF \u003e\u003e 128;\r\n      if (x \u0026 0x4000000000 \u003e 0)\r\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A \u003e\u003e 128;\r\n      if (x \u0026 0x2000000000 \u003e 0)\r\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 \u003e\u003e 128;\r\n      if (x \u0026 0x1000000000 \u003e 0)\r\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 \u003e\u003e 128;\r\n      if (x \u0026 0x800000000 \u003e 0)\r\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 \u003e\u003e 128;\r\n      if (x \u0026 0x400000000 \u003e 0)\r\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 \u003e\u003e 128;\r\n      if (x \u0026 0x200000000 \u003e 0)\r\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF \u003e\u003e 128;\r\n      if (x \u0026 0x100000000 \u003e 0)\r\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 \u003e\u003e 128;\r\n      if (x \u0026 0x80000000 \u003e 0)\r\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD \u003e\u003e 128;\r\n      if (x \u0026 0x40000000 \u003e 0)\r\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC \u003e\u003e 128;\r\n      if (x \u0026 0x20000000 \u003e 0)\r\n        result = result * 0x100000000162E42FEFB2FED257559BDAA \u003e\u003e 128;\r\n      if (x \u0026 0x10000000 \u003e 0)\r\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE \u003e\u003e 128;\r\n      if (x \u0026 0x8000000 \u003e 0)\r\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE \u003e\u003e 128;\r\n      if (x \u0026 0x4000000 \u003e 0)\r\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D \u003e\u003e 128;\r\n      if (x \u0026 0x2000000 \u003e 0)\r\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 \u003e\u003e 128;\r\n      if (x \u0026 0x1000000 \u003e 0)\r\n        result = result * 0x10000000000B17217F7D20CF927C8E94C \u003e\u003e 128;\r\n      if (x \u0026 0x800000 \u003e 0)\r\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D \u003e\u003e 128;\r\n      if (x \u0026 0x400000 \u003e 0)\r\n        result = result * 0x100000000002C5C85FDF477B662B26945 \u003e\u003e 128;\r\n      if (x \u0026 0x200000 \u003e 0)\r\n        result = result * 0x10000000000162E42FEFA3AE53369388C \u003e\u003e 128;\r\n      if (x \u0026 0x100000 \u003e 0)\r\n        result = result * 0x100000000000B17217F7D1D351A389D40 \u003e\u003e 128;\r\n      if (x \u0026 0x80000 \u003e 0)\r\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE \u003e\u003e 128;\r\n      if (x \u0026 0x40000 \u003e 0)\r\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E \u003e\u003e 128;\r\n      if (x \u0026 0x20000 \u003e 0)\r\n        result = result * 0x100000000000162E42FEFA39FE95583C2 \u003e\u003e 128;\r\n      if (x \u0026 0x10000 \u003e 0)\r\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 \u003e\u003e 128;\r\n      if (x \u0026 0x8000 \u003e 0)\r\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 \u003e\u003e 128;\r\n      if (x \u0026 0x4000 \u003e 0)\r\n        result = result * 0x10000000000002C5C85FDF473E242EA38 \u003e\u003e 128;\r\n      if (x \u0026 0x2000 \u003e 0)\r\n        result = result * 0x1000000000000162E42FEFA39F02B772C \u003e\u003e 128;\r\n      if (x \u0026 0x1000 \u003e 0)\r\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A \u003e\u003e 128;\r\n      if (x \u0026 0x800 \u003e 0)\r\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E \u003e\u003e 128;\r\n      if (x \u0026 0x400 \u003e 0)\r\n        result = result * 0x100000000000002C5C85FDF473DEA871F \u003e\u003e 128;\r\n      if (x \u0026 0x200 \u003e 0)\r\n        result = result * 0x10000000000000162E42FEFA39EF44D91 \u003e\u003e 128;\r\n      if (x \u0026 0x100 \u003e 0)\r\n        result = result * 0x100000000000000B17217F7D1CF79E949 \u003e\u003e 128;\r\n      if (x \u0026 0x80 \u003e 0)\r\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 \u003e\u003e 128;\r\n      if (x \u0026 0x40 \u003e 0)\r\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA \u003e\u003e 128;\r\n      if (x \u0026 0x20 \u003e 0)\r\n        result = result * 0x100000000000000162E42FEFA39EF366F \u003e\u003e 128;\r\n      if (x \u0026 0x10 \u003e 0)\r\n        result = result * 0x1000000000000000B17217F7D1CF79AFA \u003e\u003e 128;\r\n      if (x \u0026 0x8 \u003e 0)\r\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D \u003e\u003e 128;\r\n      if (x \u0026 0x4 \u003e 0)\r\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 \u003e\u003e 128;\r\n      if (x \u0026 0x2 \u003e 0)\r\n        result = result * 0x1000000000000000162E42FEFA39EF358 \u003e\u003e 128;\r\n      if (x \u0026 0x1 \u003e 0)\r\n        result = result * 0x10000000000000000B17217F7D1CF79AB \u003e\u003e 128;\r\n\r\n      result \u003e\u003e= uint256 (int256 (63 - (x \u003e\u003e 64)));\r\n      require (result \u003c= uint256 (int256 (MAX_64x64)));\r\n\r\n      return int128 (int256 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x \u003c 0x400000000000000000); // Overflow\r\n\r\n      if (x \u003c -0x400000000000000000) return 0; // Underflow\r\n\r\n      return exp_2 (\r\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 \u003e\u003e 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      uint256 result;\r\n\r\n      if (x \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        result = (x \u003c\u003c 64) / y;\r\n      else {\r\n        uint256 msb = 192;\r\n        uint256 xc = x \u003e\u003e 192;\r\n        if (xc \u003e= 0x100000000) { xc \u003e\u003e= 32; msb += 32; }\r\n        if (xc \u003e= 0x10000) { xc \u003e\u003e= 16; msb += 16; }\r\n        if (xc \u003e= 0x100) { xc \u003e\u003e= 8; msb += 8; }\r\n        if (xc \u003e= 0x10) { xc \u003e\u003e= 4; msb += 4; }\r\n        if (xc \u003e= 0x4) { xc \u003e\u003e= 2; msb += 2; }\r\n        if (xc \u003e= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n        result = (x \u003c\u003c 255 - msb) / ((y - 1 \u003e\u003e msb - 191) + 1);\r\n        require (result \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 hi = result * (y \u003e\u003e 128);\r\n        uint256 lo = result * (y \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 xh = x \u003e\u003e 192;\r\n        uint256 xl = x \u003c\u003c 64;\r\n\r\n        if (xl \u003c lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n        lo = hi \u003c\u003c 128;\r\n        if (xl \u003c lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n\r\n        assert (xh == hi \u003e\u003e 128);\r\n\r\n        result += xl / y;\r\n      }\r\n\r\n      require (result \u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return uint128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    unchecked {\r\n      if (x == 0) return 0;\r\n      else {\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx \u003e= 0x100000000000000000000000000000000) { xx \u003e\u003e= 128; r \u003c\u003c= 64; }\r\n        if (xx \u003e= 0x10000000000000000) { xx \u003e\u003e= 64; r \u003c\u003c= 32; }\r\n        if (xx \u003e= 0x100000000) { xx \u003e\u003e= 32; r \u003c\u003c= 16; }\r\n        if (xx \u003e= 0x10000) { xx \u003e\u003e= 16; r \u003c\u003c= 8; }\r\n        if (xx \u003e= 0x100) { xx \u003e\u003e= 8; r \u003c\u003c= 4; }\r\n        if (xx \u003e= 0x10) { xx \u003e\u003e= 4; r \u003c\u003c= 2; }\r\n        if (xx \u003e= 0x8) { r \u003c\u003c= 1; }\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return uint128 (r \u003c r1 ? r : r1);\r\n      }\r\n    }\r\n  }\r\n}"},"Address.sol":{"content":"pragma solidity ^0.8.1;\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"FortunaLedger.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: Unlicense\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./ABDKMath64x64.sol\";\r\n\r\ncontract FortunaLedger is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public passiveRewardTime;\r\n    \r\n    uint256 public multiplierForPassiveReward;\r\n\r\n    uint256 public passiveRewardPercentage;\r\n    uint256 public passiveRewardPercentagePerCycle;\r\n\r\n    // mappings\r\n\r\n    mapping (address =\u003e uint256) private _lastUpdate;\r\n    mapping (address =\u003e uint256) private _totalPassiveRewards;\r\n\r\n    // constructor\r\n\r\n    constructor() {\r\n        passiveRewardTime = 1800;\r\n\r\n        multiplierForPassiveReward = 10 ** 9;\r\n\r\n        passiveRewardPercentage = 2500000;\r\n        passiveRewardPercentagePerCycle = 52083;\r\n    }\r\n\r\n    // getters\r\n\r\n    function getLastUpdate(address account) external view returns (uint256) {\r\n        return _lastUpdate[account];\r\n    }\r\n\r\n    function getTotalPassiveRewards(address account) external view returns (uint256) {\r\n        return _totalPassiveRewards[account];\r\n    }\r\n\r\n    // functions\r\n\r\n    function updatePassiveRewards(address account, uint256 balance) public onlyOwner returns (uint256, bool) {\r\n        uint256 tempTotalPassiveRewards = _totalPassiveRewards[account];\r\n        uint256 tempLastUpdate = _lastUpdate[account];\r\n\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        bool isFirstTransaction = tempLastUpdate == 0;\r\n\r\n        if (isFirstTransaction) {\r\n            _lastUpdate[account] = currentTime;\r\n            return (0, true);\r\n        }\r\n\r\n        if (\r\n            balance == 0 \u0026\u0026\r\n            tempTotalPassiveRewards == 0 \u0026\u0026\r\n            !isFirstTransaction\r\n        ) {\r\n            return (0, false);\r\n        }\r\n\r\n        bool isValid = currentTime \u003e tempLastUpdate.add(passiveRewardTime);\r\n\r\n        if (isValid) {\r\n            uint256 timeToConsider = currentTime.sub(tempLastUpdate);\r\n\r\n            uint256 rewardCycles = timeToConsider.div(passiveRewardTime);\r\n\r\n            uint256 ratio = passiveRewardPercentagePerCycle.mul(10 ** 18).div(multiplierForPassiveReward);\r\n\r\n            uint256 compoundReward = _compound(\r\n                balance.add(tempTotalPassiveRewards),\r\n                ratio,\r\n                rewardCycles\r\n            );\r\n            tempTotalPassiveRewards += compoundReward;\r\n\r\n            _totalPassiveRewards[account] = tempTotalPassiveRewards;\r\n            _lastUpdate[account] += rewardCycles.mul(passiveRewardTime);\r\n        }\r\n\r\n        return (_totalPassiveRewards[account], false);\r\n    }\r\n\r\n    function claimPassiveRewards(address account, uint256 balance) external onlyOwner returns (uint256) {\r\n        (uint256 updatedPassiveRewards, ) = updatePassiveRewards(account, balance);\r\n\r\n        bool isClaimable = updatedPassiveRewards \u003e 0;\r\n\r\n        if (isClaimable) {\r\n            _totalPassiveRewards[account] = 0;\r\n        }\r\n\r\n        return updatedPassiveRewards;\r\n    }\r\n\r\n    function getCurrentLedgerStatus(address account, uint256 balance) external view returns (uint256) {\r\n        uint256 tempTotalPassiveRewards = _totalPassiveRewards[account];\r\n        uint256 tempLastUpdate = _lastUpdate[account];\r\n\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        if (\r\n            balance == 0 \u0026\u0026\r\n            tempTotalPassiveRewards == 0\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        bool isValid = currentTime \u003e tempLastUpdate.add(passiveRewardTime);\r\n\r\n        uint256 ratio = passiveRewardPercentagePerCycle.mul(10 ** 18).div(multiplierForPassiveReward);\r\n        uint256 compoundReward;\r\n\r\n        if (isValid) {\r\n            uint256 timeToConsider = currentTime.sub(tempLastUpdate);\r\n\r\n            uint256 rewardCycles = timeToConsider.div(passiveRewardTime);\r\n\r\n            compoundReward = _compound(\r\n                balance.add(tempTotalPassiveRewards),\r\n                ratio,\r\n                rewardCycles\r\n            );\r\n            tempTotalPassiveRewards += compoundReward;\r\n        }\r\n\r\n        return tempTotalPassiveRewards;\r\n    }\r\n\r\n    function _compound(uint256 _principal, uint256 _ratio, uint256 _exponent) internal pure returns (uint256) {\r\n        if (_exponent == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 accruedReward = ABDKMath64x64.mulu(ABDKMath64x64.pow(ABDKMath64x64.add(ABDKMath64x64.fromUInt(1), ABDKMath64x64.divu(_ratio,10**18)), _exponent), _principal);\r\n\r\n        return accruedReward.sub(_principal);\r\n    }\r\n}"},"FortunaToken.sol":{"content":"pragma solidity ^0.8.0;\n// SPDX-License-Identifier: Unlicense\n\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./MathUpgradeable.sol\";\n\nimport \"./ERC20.sol\";\nimport \"./FortunaLedger.sol\";\n\nimport \"./IPancakeFactory.sol\";\nimport \"./IPancakeRouter02.sol\";\nimport \"./IPancakePair.sol\";\n\ncontract FortunaToken is ERC20, Ownable {\n    using SafeMath for uint256;\n    using MathUpgradeable for uint256;\n\n    // BUSD mainnet\n    address public BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n\n    // PancakeSwap\n    IPancakeRouter02 public pancakeRouter;\n    address public immutable pancakePair;\n\n    bool private transferring;\n\n    // Ledger for all FRTNA holders\n    FortunaLedger public fortunaLedger;\n\n    // Battling contract address\n    address public battling;\n\n    // Liquidity wallet\n    address public liquidityWallet;\n\n    // Treasury wallet\n    address public treasuryWallet;\n\n    // Reward wallet\n    address public rewardWallet;\n\n    // Buy fees\n    uint256 public liquidityBuyingFee;\n    uint256 public treasuryBuyingFee;\n    uint256 public burnBuyingFee;\n\n    // Sell fees\n    uint256 public liquiditySellingFee;\n    uint256 public treasurySellingFee;\n    uint256 public burnSellingFee;\n\n    uint256 public maxBuyingFee;\n    uint256 public maxSellingFee;\n    uint256 public multiplierForTotalFee;\n\n    uint256 public totalSellingFeesAccumulated;\n\n    uint256 public transferTokensAtAmount = 1000 * (10**18);\n\n    // mappings\n\n    // Addresses that are excluded from buying and selling fees\n    mapping (address =\u003e bool) private isExcludedFromFees;\n\n    // Addresses that are excluded from FRTNA holder\u0027s rewards\n    mapping (address =\u003e bool) private isExcludedFromPassiveRewards;\n\n    // Store addresses that are automatic market maker pairs\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\n\n    // events\n\n    event UpdatedBuyingFees(uint256 newLiquidityBuyingFee, uint256 newTreasuryBuyingFee, uint256 newBurnBuyingFee);\n    \n    event UpdatedSellingFees(uint256 newLiquiditySellingFee, uint256 newTreasurySellingFee, uint256 newBurnSellingFee);\n\n    event UpdatedPancakeRouter(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludedFromFees(address indexed account, bool isExcluded);\n\n    event ExcludedMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n\n    event ExcludedFromPassiveRewards(address indexed account, bool isExcluded);\n\n    event ExcludedMultipleAccountsFromPassiveRewards(address[] accounts, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event UpdatedLiquidityWallet(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event UpdatedTreasuryWallet(address indexed newTreasuryWallet, address indexed oldTreasuryWallet);\n\n    event UpdatedRewardWallet(address indexed newRewardWallet, address indexed oldRewardWallet);\n\n    event CreatedLedger(address indexed account);\n\n    event ClaimedLedger(address indexed account, uint256 totalPassiveRewards);\n\n    // constructor\n\n    constructor() ERC20(\"Fortuna\", \"FRTNA\") {\n        // PancakeRouter02 mainnet\n    \tIPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        address _pancakePair = IPancakeFactory(_pancakeRouter.factory())\n            .createPair(address(this), BUSD);\n\n        pancakeRouter = _pancakeRouter;\n        pancakePair = _pancakePair;\n\n        _setAutomatedMarketMakerPair(_pancakePair, true);\n\n        fortunaLedger = new FortunaLedger();\n\n    \tliquidityWallet = address(owner());\n\n        treasuryWallet = 0x8E98A208b3128066b8e1BA46BD8e34Dc09F8bf4f;\n\n        rewardWallet = 0x6429B65da9EEE43ECE3771c5A840145fddcd95bd;\n\n        uint256 _liquidityBuyingFee = 25;\n        uint256 _treasuryBuyingFee = 75;\n        uint256 _burnBuyingFee = 0;\n\n        uint256 _liquiditySellingFee = 50;\n        uint256 _treasurySellingFee = 25;\n        uint256 _burnSellingFee = 25;\n\n        liquidityBuyingFee = _liquidityBuyingFee;\n        treasuryBuyingFee = _treasuryBuyingFee;\n        burnBuyingFee = _burnBuyingFee;\n\n        liquiditySellingFee = _liquiditySellingFee;\n        treasurySellingFee = _treasurySellingFee;\n        burnSellingFee = _burnSellingFee;\n\n        maxBuyingFee = _liquidityBuyingFee.add(_treasuryBuyingFee).add(_burnBuyingFee);\n        maxSellingFee = _liquiditySellingFee.add(_treasurySellingFee).add(_burnSellingFee);\n\n        multiplierForTotalFee = 10 ** 3;\n\n        // exclude from receiving passive holding rewards\n        excludeFromPassiveRewards(address(this), true);\n        excludeFromPassiveRewards(address(_pancakeRouter), true);\n        excludeFromPassiveRewards(liquidityWallet, true);\n        excludeFromPassiveRewards(treasuryWallet, true);\n        excludeFromPassiveRewards(rewardWallet, true);\n        excludeFromPassiveRewards(address(0), true);\n\n        // exclude from paying fees\n        excludeFromFees(address(this), true);\n        excludeFromFees(liquidityWallet, true);\n        excludeFromFees(treasuryWallet, true);\n        excludeFromFees(rewardWallet, true);\n\n        _mint(rewardWallet, 50000000 * (10 ** 18));\n    }\n\n    // getters and setters\n\n    function initializeBattling(address battlingContractAddress) external onlyOwner {\n        require(battling == address(0), \"FRTNA::Battling has already been initialized\");\n        battling = battlingContractAddress;\n\n        excludeFromPassiveRewards(battling, true);\n\n        excludeFromFees(battling, true);\n    }\n\n    function updateBuyingFees(uint256 newLiquidityBuyingFee, uint256 newTreasuryBuyingFee, uint256 newBurnBuyingFee) public onlyOwner {\n        uint256 totalInputFee = newLiquidityBuyingFee.add(newTreasuryBuyingFee).add(newBurnBuyingFee);\n        require(totalInputFee \u003c= maxBuyingFee, \"FRTNA::Cannot exceed total Buying fees\");\n\n        liquidityBuyingFee = newLiquidityBuyingFee;\n        treasuryBuyingFee = newTreasuryBuyingFee;\n        burnBuyingFee = newBurnBuyingFee;\n\n        emit UpdatedBuyingFees(newLiquidityBuyingFee, newTreasuryBuyingFee, newBurnBuyingFee);\n    }\n\n    function updateSellingFees(uint256 newLiquiditySellingFee, uint256 newTreasurySellingFee, uint256 newBurnSellingFee) public onlyOwner {\n        uint256 totalInputFee = newLiquiditySellingFee.add(newTreasurySellingFee).add(newBurnSellingFee);\n        require(totalInputFee \u003c= maxSellingFee, \"FRTNA::Cannot exceed total selling fees\");\n\n        liquiditySellingFee = newLiquiditySellingFee;\n        treasurySellingFee = newTreasurySellingFee;\n        burnSellingFee = newBurnSellingFee;\n\n        emit UpdatedSellingFees(newLiquiditySellingFee, newTreasurySellingFee, newBurnSellingFee);\n    }\n\n    function updatePancakeRouter(address router) public onlyOwner {\n        require(router != address(pancakeRouter), \"FRTNA::The router already has that address\");\n        emit UpdatedPancakeRouter(router, address(pancakeRouter));\n        pancakeRouter = IPancakeRouter02(router);\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        require(isExcludedFromFees[account] != excluded, \"FRTNA::Account is already the value of \u0027excluded\u0027\");\n        isExcludedFromFees[account] = excluded;\n\n        emit ExcludedFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            isExcludedFromFees[accounts[i]] = excluded;\n        }\n\n        emit ExcludedMultipleAccountsFromFees(accounts, excluded);\n    }\n\n    function excludeFromPassiveRewards(address account, bool excluded) public onlyOwner {\n        require(isExcludedFromPassiveRewards[account] != excluded, \"FRTNA::Account is already the value of \u0027excluded\u0027\");\n\n        isExcludedFromPassiveRewards[account] = excluded;\n\n        emit ExcludedFromPassiveRewards(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromPassiveRewards(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            isExcludedFromPassiveRewards[accounts[i]] = excluded;\n        }\n\n        emit ExcludedMultipleAccountsFromPassiveRewards(accounts, excluded);\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != pancakePair, \"FRTNA::The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(automatedMarketMakerPairs[pair] != value, \"FRTNA::Automated market maker pair is already set to that value\");\n        automatedMarketMakerPairs[pair] = value;\n\n        if (automatedMarketMakerPairs[pair]) {\n            excludeFromPassiveRewards(pair, true);\n        }\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateLiquidityWallet(address newLiquidityWallet) public onlyOwner {\n        require(newLiquidityWallet != liquidityWallet, \"FRTNA::The liquidity wallet is already this address\");\n        excludeFromFees(liquidityWallet, false);\n        excludeFromFees(newLiquidityWallet, true);\n        emit UpdatedLiquidityWallet(newLiquidityWallet, liquidityWallet);\n        liquidityWallet = newLiquidityWallet;\n    }\n\n    function updateTreasuryWallet(address newTreasuryWallet) public onlyOwner {\n        require(newTreasuryWallet != treasuryWallet, \"FRTNA::The treasury wallet is already this address\");\n        excludeFromFees(treasuryWallet, false);\n        excludeFromFees(newTreasuryWallet, true);\n        emit UpdatedTreasuryWallet(newTreasuryWallet, treasuryWallet);\n        treasuryWallet = newTreasuryWallet;\n    }\n\n    function updateRewardWallet(address newRewardWallet) public onlyOwner {\n        require(newRewardWallet != rewardWallet, \"FRTNA::The staking wallet is already this address\");\n        excludeFromFees(rewardWallet, false);\n        excludeFromFees(newRewardWallet, true);\n        emit UpdatedRewardWallet(newRewardWallet, rewardWallet);\n        rewardWallet = newRewardWallet;\n    }\n\n    // functions\n\n    function _isBuy(address from) internal view returns (bool) {\n        // Transfer from pair is a buy swap\n        return automatedMarketMakerPairs[from];\n    }\n\n    function _isSell(address from, address to) internal view returns (bool) {\n        // Transfer to pair from non-router address is a sell swap\n        return from != address(pancakeRouter) \u0026\u0026 automatedMarketMakerPairs[to];\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20::transfer from the zero address\");\n        require(to != address(0), \"ERC20::transfer to the zero address\");\n\n        if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canTransfer = contractTokenBalance \u003e= transferTokensAtAmount;\n\n        if (\n            canTransfer \u0026\u0026\n            !transferring \u0026\u0026\n            from != liquidityWallet \u0026\u0026\n            to != liquidityWallet\n        ) {\n            transferring = true;\n\n            uint256 totalBuyingFeesAccumulated = contractTokenBalance;\n            uint256 toLiquidityAmount;\n            uint256 toTreasuryAmount;\n            uint256 toBurnAmount;\n\n            if (totalSellingFeesAccumulated \u003e 0) {\n                totalBuyingFeesAccumulated -= totalSellingFeesAccumulated;\n\n                toLiquidityAmount += totalSellingFeesAccumulated\n                    .mul(liquiditySellingFee).roundDiv(100);\n\n                toTreasuryAmount += totalSellingFeesAccumulated\n                    .mul(treasurySellingFee).roundDiv(100);\n\n                toBurnAmount += totalSellingFeesAccumulated\n                    .mul(burnSellingFee).roundDiv(100);\n\n                totalSellingFeesAccumulated = 0;\n            }\n\n            if (totalBuyingFeesAccumulated \u003e 0) {\n                toLiquidityAmount += totalBuyingFeesAccumulated\n                    .mul(liquidityBuyingFee).roundDiv(100);\n                \n                toTreasuryAmount += totalBuyingFeesAccumulated\n                    .mul(treasuryBuyingFee).roundDiv(100);\n\n                toBurnAmount += totalBuyingFeesAccumulated\n                    .mul(burnBuyingFee).roundDiv(100);\n            }\n\n            super._transfer(address(this), liquidityWallet, toLiquidityAmount);\n\n            super._transfer(address(this), treasuryWallet, toTreasuryAmount);\n\n            _burn(address(this), toBurnAmount);\n\n            transferring = false;\n        }\n\n        if (\n            _isBuy(from) \u0026\u0026\n            !isExcludedFromFees[to]\n        ) {\n            uint256 totalBuyingFee = liquidityBuyingFee.add(treasuryBuyingFee).add(burnBuyingFee);\n\n            uint256 buyingFee = amount.mul(totalBuyingFee).div(multiplierForTotalFee);\n            amount -= buyingFee;\n\n            super._transfer(from, address(this), buyingFee);\n        }\n\n        if (\n            _isSell(from, to) \u0026\u0026\n            !isExcludedFromFees[from]\n        ) {\n            uint256 totalSellingFee = liquiditySellingFee.add(treasurySellingFee).add(burnSellingFee);\n\n            uint256 sellingFee = amount.mul(totalSellingFee).div(multiplierForTotalFee);\n            totalSellingFeesAccumulated += sellingFee;\n            amount -= sellingFee;\n\n            super._transfer(from, address(this), sellingFee);\n        }\n\n        super._transfer(from, to, amount);\n\n        if (!isExcludedFromPassiveRewards[from]) {\n            _updateLedger(from);\n        }\n \n        if (!isExcludedFromPassiveRewards[to]) {\n            _updateLedger(to);\n        }\n    }\n\n    function updateLedger(address account) external {\n        require(!isExcludedFromPassiveRewards[account], \"FRTNA::Account is excluded from passive rewards\");\n\n        _updateLedger(account);\n    }\n\n    function _updateLedger(address account) internal {\n        (, bool isFirstTransaction) =\n            fortunaLedger.updatePassiveRewards(account, balanceOf(account));\n\n        if (isFirstTransaction) {\n            emit CreatedLedger(\n                account\n            );\n        }\n    }\n\n    function claimLedger() external {\n        require(!isExcludedFromPassiveRewards[msg.sender], \"FRTNA::Account is excluded from passive rewards\");\n\n        uint256 totalPassiveRewards =\n            fortunaLedger.claimPassiveRewards(msg.sender, balanceOf(msg.sender));\n\n        if (totalPassiveRewards == 0) {\n            require(false, \"FRTNA::No rewards to claim\");\n        }\n\n        uint256 rewardWalletBalance = balanceOf(rewardWallet);\n\n        bool isMint = totalPassiveRewards \u003e rewardWalletBalance;\n\n        if (isMint) {\n            if (rewardWalletBalance != 0) {\n                _transfer(rewardWallet, msg.sender, rewardWalletBalance);\n            }\n\n            _mint(msg.sender, totalPassiveRewards.sub(rewardWalletBalance));\n        }\n        else {\n            _transfer(rewardWallet, msg.sender, totalPassiveRewards);\n        }\n\n        emit ClaimedLedger(\n            msg.sender,\n            totalPassiveRewards\n        );\n    }\n\n    function viewLedger(address account) external view returns (uint256) {\n        require(!isExcludedFromPassiveRewards[account], \"FRTNA::Account is excluded from passive rewards\");\n\n        uint256 totalPassiveRewards =\n            fortunaLedger.getCurrentLedgerStatus(account, balanceOf(account));\n\n        return totalPassiveRewards;\n    }\n\n    function mint(address account, uint256 amount) external onlyContract {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external onlyContract {\n        _burn(account, amount);\n    }\n\n    // modifiers\n\n    modifier onlyContract {\n        require(msg.sender == battling, \"FRTNA::Only Fortuna Battling Contract can call this function\");\n        _;\n    }\n}"},"IERC20.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}"},"IERC20Metadata.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"IPancakeFactory.sol":{"content":"pragma solidity \u003e=0.5.0;\r\n// SPDX-License-Identifier: Unlicense\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}"},"IPancakePair.sol":{"content":"pragma solidity \u003e=0.5.0;\r\n// SPDX-License-Identifier: Unlicense\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"IPancakeRouter02.sol":{"content":"pragma solidity \u003e=0.6.2;\r\n// SPDX-License-Identifier: Unlicense\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"MathUpgradeable.sol":{"content":"pragma solidity ^0.8.0;\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003c b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a \u0026 b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n\n    /**\n     * @dev Returns the current rounding of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it can round up and\n     * down depending on the floating point.\n     */\n    function roundDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 result = a * 10 / b;\n        if (result % 10 \u003e= 5) {\n            result = a / b + 1;\n        }\n        else {\n            result = a / b;\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers and returns zero if\n     * overflow occurs\n     */\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            if (b \u003e a) return 0;\n            return a - b;\n        }\n    }\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: Unlicense\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.8.0;\n// SPDX-License-Identifier: Unlicense\n\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity\u0027s `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity\u0027s `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}"}}