pragma solidity ^0.8.12;
//SPDX-License-Identifier: UNLICENSE
interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address account) external view returns (uint256);
  function transfer(address recipient, uint256 amount) external returns (bool);
  function allowance(address _owner, address spender) external view returns (uint256);
  function approve(address spender, uint256 amount) external returns (bool);
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

 abstract contract Context {
  constructor ()  { }
  function _msgSender() internal view returns (address payable) {
    return payable(msg.sender);
  }
  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}
abstract contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  constructor ()  {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }
  function owner() public view returns (address) {
    return _owner;
  }
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

 
library SafeMath {
   
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library SafeMathUint {
    function toInt256Safe(uint256 a) internal pure returns (int256) {
        int256 b = int256(a);
        require(b >= 0);
        return b;
    }
}

library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }
    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != -1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? -a : a;
    }

    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}




library Address {
   
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


library EnumerableSet {
  

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

   
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    struct Bytes32Set {
        Set _inner;
    }

   
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    struct AddressSet {
        Set _inner;
    }

    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

   
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

   
    struct UintSet {
        Set _inner;
    }

   
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}

 
library EnumerableMap {
    using EnumerableSet for EnumerableSet.Bytes32Set;

    
    struct Map {
        // Storage of keys
        EnumerableSet.Bytes32Set _keys;
        mapping(bytes32 => bytes32) _values;
    }

    function _set(
        Map storage map,
        bytes32 key,
        bytes32 value
    ) private returns (bool) {
        map._values[key] = value;
        return map._keys.add(key);
    }

    function _remove(Map storage map, bytes32 key) private returns (bool) {
        delete map._values[key];
        return map._keys.remove(key);
    }

    function _contains(Map storage map, bytes32 key) private view returns (bool) {
        return map._keys.contains(key);
    }

    function _length(Map storage map) private view returns (uint256) {
        return map._keys.length();
    }

   
    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
        bytes32 key = map._keys.at(index);
        return (key, map._values[key]);
    }

    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
        bytes32 value = map._values[key];
        if (value == bytes32(0)) {
            return (_contains(map, key), bytes32(0));
        } else {
            return (true, value);
        }
    }

    function _get(Map storage map, bytes32 key) private view returns (bytes32) {
        bytes32 value = map._values[key];
        require(value != 0 || _contains(map, key), "EnumerableMap: nonexistent key");
        return value;
    }

    function _get(
        Map storage map,
        bytes32 key,
        string memory errorMessage
    ) private view returns (bytes32) {
        bytes32 value = map._values[key];
        require(value != 0 || _contains(map, key), errorMessage);
        return value;
    }

  
    struct UintToAddressMap {
        Map _inner;
    }

    
    function set(
        UintToAddressMap storage map,
        uint256 key,
        address value
    ) internal returns (bool) {
        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
    }

    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
        return _remove(map._inner, bytes32(key));
    }

    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
        return _contains(map._inner, bytes32(key));
    }

  
    function length(UintToAddressMap storage map) internal view returns (uint256) {
        return _length(map._inner);
    }

    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
        (bytes32 key, bytes32 value) = _at(map._inner, index);
        return (uint256(key), address(uint160(uint256(value))));
    }

   
    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
        return (success, address(uint160(uint256(value))));
    }

    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
        return address(uint160(uint256(_get(map._inner, bytes32(key)))));
    }

    
    function get(
        UintToAddressMap storage map,
        uint256 key,
        string memory errorMessage
    ) internal view returns (address) {
        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
    }

   
    struct AddressToUintMap {
        Map _inner;
    }

 
    function set(
        AddressToUintMap storage map,
        address key,
        uint256 value
    ) internal returns (bool) {
        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));
    }

    function remove(AddressToUintMap storage map, address key) internal returns (bool) {
        return _remove(map._inner, bytes32(uint256(uint160(key))));
    }

    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {
        return _contains(map._inner, bytes32(uint256(uint160(key))));
    }

   
    function length(AddressToUintMap storage map) internal view returns (uint256) {
        return _length(map._inner);
    }

    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {
        (bytes32 key, bytes32 value) = _at(map._inner, index);
        return (address(uint160(uint256(key))), uint256(value));
    }

    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {
        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));
        return (success, uint256(value));
    }

   
    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {
        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));
    }
}




library Queue {
    struct AddressDeque {
        int128 _begin;
        int128 _end;
        mapping(int128 => address) _data;
    }
    function pushBack(AddressDeque storage deque, address value) internal {
        int128 backIndex = deque._end;
        deque._data[backIndex] = value;
        unchecked {
            deque._end = backIndex + 1;
        }
    }
    function popFront(AddressDeque storage deque) internal returns (address value) {
        if (empty(deque)) return address(0);
        int128 frontIndex = deque._begin;
        value = deque._data[frontIndex];
        delete deque._data[frontIndex];
        unchecked {
            deque._begin = frontIndex + 1;
        }
    }
    function clear(AddressDeque storage deque) internal {
        deque._begin = 0;
        deque._end = 0;
    }
    function length(AddressDeque storage deque) internal view returns (uint256) {
        unchecked {
            return uint256(int256(deque._end) - int256(deque._begin));
        }
    }
    function empty(AddressDeque storage deque) internal view returns (bool) {
        return deque._end <= deque._begin;
    }
}


// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}




contract HN  is Context, IBEP20, Ownable  {
    using SafeMath for uint256;
    using SafeMathUint for uint256;
    using SafeMathInt for int256;
    using Address for address;
    using EnumerableMap for EnumerableMap.AddressToUintMap;
    using Queue for Queue.AddressDeque;
    event Parent(address to,address parent); 

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    uint256 private _totalSupply;
    uint8 private _decimals = 18;
    string private _symbol = "HN";
    string private _name="HN";


    uint256 constant magnitude = 2**128;
    uint256 private _totalLiquiditySupply;
    uint256 private _totalGudong;
    Queue.AddressDeque private _liquidityQueue;
    EnumerableMap.AddressToUintMap private _liquidityBalancesMap;
    EnumerableMap.AddressToUintMap private _gudongListMap;
      
   
      
    uint256 private dividendPerTime = 600;
    uint256 private maxProcessFh = 10;
    uint256 private processStaticNum = 10;
   
    uint256 private _tmp_amount_hn;
    uint256 private _tmp_amount_luna ;
    uint256 private _tmp_amount_gudong ;
  
      
    uint256 private _magnifiedHnPerOne ;
    uint256 private _magnifiedLunaPerOne ;
    uint256 private _magnifiedGudongPerOne;

      
    mapping(address=>int256) private _hn_fh_correctionsMap;
    mapping(address=>int256) private _luna_fh_correctionsMap;
    mapping(address=>int256) private _gudong_fh_correctionsMap;

    
    mapping(address=>uint256) private _hn_fh_sendedMap;
    mapping(address=>uint256) private _luna_fh_sendedMap;
    mapping(address=>uint256) private _gudong_fh_sendedMap;

      
    mapping(address=>uint256) private _hn_fh_timeMap;
    mapping(address=>uint256) private _luna_fh_timeMap;
    mapping(address=>uint256) private _gudong_fh_timeMap;

    uint256 private hn_fh_index;
    uint256 private luna_fh_index;
    uint256 private gudong_fh_index;

    address private  addressHn = address(0x1);
    address private  addressGudong = address(0x2);
    address private  addressMarket;


     
     uint256 private lockRelationNum = 100 *10**_decimals;
     uint256 private mintMinNum = 1000 *10**_decimals;
     uint256 private static_sy = 150;
     uint256 private dynamic_sy = 9;
     uint256 private layerMax = 8;

     uint256 private minShareNum = 200 * 10**18;

     uint256 private staticSendTime = 24*3600;


     mapping(address=>address) public relationMap; 
     mapping(address=>uint256) public buyTokenMap; 
     
     EnumerableMap.AddressToUintMap private _lastBuyTimeMap;
     
     uint256 private staticIndex = 0;
     uint256 public poolMaxUsdt = 0;
     uint256 private poolminFhNum = 100000 *10**_decimals;

     uint256 private _buyTaxFee = 3;
     address private addressBuyTax;
     uint256 private _sellTaxFee = 3;
     address private addressSellTax;


     uint256 public swapMaxNum = 1000000 * 10**_decimals;

     uint256 private fh_gudong_percent = 20;
     uint256 private fh_luna_percent = 20;
     uint256 private fh_market_percent = 10;
     uint256 private fh_hn_percent = 50;
     
     uint256 private fh_usdt_Rate = 10;
     uint256 private fh_min_hn = 10**_decimals;
     uint256 private fh_min_luna = 10**6;
     
    bool private processing;
    bool public openReward = true;
    bool public openSwap = true;
   
    IUniswapV2Router02 public immutable uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address public uniswapV2Pair;
    address public token_USDT = 0x55d398326f99059fF775485246999027B3197955;
    address public token_LUNA = 0x156ab3346823B651294766e23e6Cf87254d68962;



  constructor()   {
    uniswapV2Pair =  IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),token_USDT);
    _mint(owner(),750000000 * 10**_decimals);
    _mint(address(this),9250000000 * 10**_decimals);
    relationMap[owner()] = address(this);
  }
  
    function setSwapMaxNum(uint256 amount) public onlyOwner{
        swapMaxNum = amount * 10 **_decimals;
    }
    function setMinFhNum(uint256 amount) public onlyOwner{
        poolminFhNum = amount * 10 **_decimals;
    }
    function setMinShareNum(uint256 amount) public onlyOwner{
        minShareNum = amount * 10 ** _decimals;
    }
    function setStaticSendTime(uint256 time) public onlyOwner{
        staticSendTime = time * 60;
    }
    function setMaxProcessFh(uint256 fh_num,uint256 static_num) public onlyOwner{
        maxProcessFh = fh_num;
        processStaticNum = static_num;
    }
    function setPoolMaxUsdt(uint256 pool_usdt) public onlyOwner{
        poolMaxUsdt = pool_usdt;
    }
    function setFhPerTime(uint256 time) public onlyOwner{
        dividendPerTime = time;
    }
    function setTaxFee(uint256 feeBuy,uint256 feeSell) public onlyOwner{
        _buyTaxFee = feeBuy;
        _sellTaxFee = feeSell;
    }
    
   
    function setFees(uint256 static_fee,uint256 dynamic_fee,uint256 _layer) public onlyOwner {
       static_sy = static_fee;
       dynamic_sy = dynamic_fee;
       layerMax = _layer;
    }
    function setLunaToken(address addr) public onlyOwner{
        token_LUNA = addr;
    }
    function setFhFees(uint256 gudong_fee,uint256 fh_fee,uint256 luna_fee,uint256 market_fee,uint256 usdt_rate) public onlyOwner{
        fh_gudong_percent = gudong_fee;
        fh_hn_percent = fh_fee;
        fh_luna_percent = luna_fee;
        fh_market_percent =market_fee;
        fh_usdt_Rate = usdt_rate;
    }
    function setFhMinNum(uint256 min_hn,uint256 min_luna) public onlyOwner{
        fh_min_hn = min_hn;
        fh_min_luna  = min_luna;
    }
    function setOpenReward(bool opened) public onlyOwner{
        openReward = opened;
    }
    function setOpenSwap(bool opened) public onlyOwner{
        openSwap  = opened;
    }
    
    function setTaxAddress(address addrBuy,address addrSell) public onlyOwner{
        addressBuyTax = addrBuy;
        addressSellTax = addrSell;
    }
    function setMarketAddress(address addr) public onlyOwner{
        addressMarket = addr;
    }
  
   function setGudongAddress(address account,uint256 _fh_num) public onlyOwner{
        require(account!= address(0),"address empty ");
        (bool ret,uint256 old_num) = _gudongListMap.tryGet(account);
         if(ret){
            if(_fh_num>0){
               _gudongListMap.set(account, _fh_num);
               if(old_num>_fh_num){
                 uint256 span_num = old_num.sub(_fh_num);
                _totalGudong = _totalGudong.sub(span_num);
               }else{
                uint256 span_num = _fh_num.sub(old_num);
                _totalGudong = _totalGudong.add(span_num);   
               }
            }else{
               _gudongListMap.remove(account);
              _totalGudong = _totalGudong.sub(old_num);   
            }
         }else if(_fh_num>0){
               _gudongListMap.set(account, _fh_num);
               _totalGudong = _totalGudong.add(_fh_num);
         }
        
    }
    function hn_fh_of(address account) public view returns(uint256){

      return (_liquidityBalancesMap.get(account).mul(_magnifiedHnPerOne).toInt256Safe().add(_hn_fh_correctionsMap[account])).toUint256Safe().div(magnitude).sub(_hn_fh_sendedMap[account]);
    }
    function luna_fh_of(address account) public view returns(uint256){

      return (_liquidityBalancesMap.get(account).mul(_magnifiedLunaPerOne).toInt256Safe().add(_luna_fh_correctionsMap[account])).toUint256Safe().div(magnitude).sub(_luna_fh_sendedMap[account]);
    }
    function gudong_fh_of(address account) public view returns(uint256){

      return (_gudongListMap.get(account).mul(_magnifiedGudongPerOne).toInt256Safe().add(_gudong_fh_correctionsMap[account])).toUint256Safe().div(magnitude).sub(_gudong_fh_sendedMap[account]);
    }

  function getOwner() external view returns (address) {
    return owner();
  }

  
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  function symbol() external view returns (string memory) {
    return _symbol;
  }

  
  function name() external view returns (string memory) {
    return _name;
  }

  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }

 
  function balanceOf(address account) external view returns (uint256) {
    return _balances[account];
  }
  

 
  function transfer(address recipient, uint256 amount) external returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) external returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
    return true;
  }

  
  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
    return true;
  }

  function _send(address sender, address recipient, uint256 amount) internal{
       _balances[sender] = _balances[sender].sub(amount);
       _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
  }
  function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "BEP20: transfer from the zero address");
      require(recipient != address(0), "BEP20: transfer to the zero address");
      
   
     if(sender==uniswapV2Pair || recipient == uniswapV2Pair){
          require(openSwap,"swap not opened");
         if(sender != owner() && recipient !=owner() && sender != address(this) ){
           require(amount<=swapMaxNum,"Amount is too large");
         }
     }
     
      
       if(amount>=lockRelationNum){//lock relation
        if(!recipient.isContract() && !sender.isContract() && relationMap[recipient] == address(0)){
             relationMap[recipient] = sender;
             emit Parent(recipient,sender); 
          }
      }
       uint256 tax;
       address addressTax;
       if(recipient == uniswapV2Pair ){//sell
          tax = amount.mul(_sellTaxFee).div(1000);
          addressTax = addressSellTax;
       }else {//buy or transfer
         tax = amount.mul(_buyTaxFee).div(1000);
         addressTax = addressBuyTax;
       }

       _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
       _balances[recipient] = _balances[recipient].add(amount.sub(tax));
        emit Transfer(sender, recipient, amount.sub(tax));
       if(tax>0){
       _balances[addressTax] = _balances[addressTax].add(tax); 
        emit Transfer(sender, addressTax, tax);
       }
       
          if(!processing && openReward){
             processing = true;
           _process_static_sy();
            uint256 success01 = _process_fh_hn(maxProcessFh);
            uint256 success02 = _process_fh_luna(maxProcessFh-success01);
                                _process_fh_gudong(maxProcessFh-success01-success02);

             if(!_liquidityQueue.empty()){
               _saveLpBalance(_liquidityQueue.popFront());  
            }  
           if(sender == uniswapV2Pair && !recipient.isContract()){
                 _liquidityQueue.pushBack(recipient);
             }else if(recipient == uniswapV2Pair && !sender.isContract()){
                _liquidityQueue.pushBack(sender);
             }

             if(sender == uniswapV2Pair){
              _saveBuyTime(recipient,amount,1);
           }else if(recipient == uniswapV2Pair){
              _saveBuyTime(sender,amount,2);
           }else if(sender !=  uniswapV2Pair && recipient !=uniswapV2Pair){
             _saveLpUsdt();
           }
             processing = false;
          }
  }
  function _saveBuyTime(address account,uint256 amount,uint256 _type) internal {
      if(!account.isContract()){
         if(_type == 1){
           buyTokenMap[account] = buyTokenMap[account].add(amount);
         }else if(buyTokenMap[account]>amount){
            buyTokenMap[account] = buyTokenMap[account].sub(amount); 
         }else if(buyTokenMap[account]>0){
            buyTokenMap[account] = 0;
         }
       if(buyTokenMap[account]>= mintMinNum && _balances[account]>= mintMinNum){
         _lastBuyTimeMap.set(account,block.timestamp);
       }
      }
  }
  function _saveLpUsdt() internal {
      uint256 poolUsdt = IBEP20(token_USDT).balanceOf(address(uniswapV2Pair));
      if(poolUsdt>poolMaxUsdt){
       uint256 getHnNum = (poolUsdt.sub(poolMaxUsdt)).mul(fh_usdt_Rate);
       if( getHnNum >= poolminFhNum && _balances[address(this)]>=getHnNum){
           poolMaxUsdt = poolUsdt;
          _takeFhHN(getHnNum.mul(fh_hn_percent).div(100));
          _takeFhGudong(getHnNum.mul(fh_gudong_percent).div(100));
          _takeMarket(getHnNum.mul(fh_market_percent).div(100));
          _takeFhLUNA(getHnNum.mul(fh_luna_percent).div(100));
       }
     }
  }
  function _takeMarket(uint256 amount_market) internal{
        _send(address(this),addressMarket,amount_market);
   }
  function _takeFhGudong(uint256 amount_gudong) internal{
        if(_totalGudong>0){
            uint256 new_amount_gudong = _tmp_amount_gudong.add(amount_gudong);
            if(_tmp_amount_gudong>0){
                _tmp_amount_gudong = 0;
            }
           _magnifiedGudongPerOne =  _magnifiedGudongPerOne.add(new_amount_gudong.mul(magnitude).div(_totalGudong));
        }else {
             _tmp_amount_gudong = _tmp_amount_gudong.add(amount_gudong);
        }
         _send(address(this),addressGudong,amount_gudong);
  }
  function swapHnToLuna(uint256 amount) internal {
        address[] memory path = new address[](4);
        path[0] = address(this);
        path[1] = token_USDT;
        path[2] = uniswapV2Router.WETH();
        path[3] = token_LUNA;
        _approve(address(this), address(uniswapV2Router),amount);
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    
    }
    
 function _takeFhLUNA(uint256 amount_luna) internal{//20%
        if(amount_luna>0){

       uint256 lunaBalance = IBEP20(token_LUNA).balanceOf(address(this));
       swapHnToLuna(amount_luna);
       uint256 lunaCurrent = IBEP20(token_LUNA).balanceOf(address(this));
       uint256 swapLuna = lunaCurrent.sub(lunaBalance);
       
      if(_totalLiquiditySupply>0){
            uint256 new_amount_luna = _tmp_amount_luna.add(swapLuna);
            if(_tmp_amount_luna>0){
                _tmp_amount_luna = 0;
            }
           _magnifiedLunaPerOne =  _magnifiedLunaPerOne.add(new_amount_luna.mul(magnitude).div(_totalLiquiditySupply));
        }else {
             _tmp_amount_luna = _tmp_amount_luna.add(swapLuna);
        }
                    
        }
 }

 
    function _takeFhHN(uint256 amount_hn) internal {//50%
    
        if(_totalLiquiditySupply>0){
            uint256 new_amount_hn = _tmp_amount_hn.add(amount_hn);
            if(_tmp_amount_hn>0){
                _tmp_amount_hn = 0;
            }
           _magnifiedHnPerOne =  _magnifiedHnPerOne.add(new_amount_hn.mul(magnitude).div(_totalLiquiditySupply));
        }else {
             _tmp_amount_hn = _tmp_amount_hn.add(amount_hn);
        }
         _send(address(this),addressHn,amount_hn);
     }
  


  function _process_static_sy() internal returns(uint256){
      uint256 _lastIndex = staticIndex;
          uint256 num = 0;
          if(_lastIndex>=_lastBuyTimeMap.length()){
              _lastIndex = 0;
          }
         uint256 success;
         address token0 = IUniswapV2Pair(uniswapV2Pair).token0();
        (uint256 num01,uint256 num02,) = IUniswapV2Pair(uniswapV2Pair).getReserves();
        (uint256 tokenUsdtNum, uint256 tokenHNNum) = token_USDT == token0 ? (num01, num02) : (num02, num01);
        
           while(num < processStaticNum && _lastIndex < _lastBuyTimeMap.length()){
               (address account,uint256 buytime) = _lastBuyTimeMap.at(_lastIndex);
               uint256 spantime = block.timestamp- buytime;
               if( buyTokenMap[account]>= mintMinNum &&  spantime >= staticSendTime ){
                    _send_static_sy(account,tokenUsdtNum,tokenHNNum);
                    success++;
               }else if (spantime >= staticSendTime ){
                   _lastBuyTimeMap.remove(account);
               }
                _lastIndex++;
                num++;
           }
           staticIndex = _lastIndex;
           return success;
  }
  function _send_static_sy(address account,uint256 tokenUsdtNum,uint256 tokenHNNum) internal {
          uint256 amount = _balances[account]>buyTokenMap[account]?buyTokenMap[account]:_balances[account];
          buyTokenMap[account] = 0;
          _lastBuyTimeMap.remove(account);
          if(amount>0){
          uint256 static_bonus = amount.mul(static_sy).div(10000);
          uint256 dynamic_bonus = amount.mul(dynamic_sy).div(10000);
         
         _send(address(this),account,static_bonus);
         
         for(uint256 index;index<layerMax;index++){
             account = relationMap[account];
             if(account == address(0)){
                 break;
             }else if(_tokenForUsdtNum(account,tokenUsdtNum,tokenHNNum)>= minShareNum && account != address(this)){
                _send(address(this),account,dynamic_bonus); 
             }
             
         }
          }
    
  }
  
  function _tokenForUsdtNum(address account,uint256 tokenUsdtNum,uint256 tokenHNNum)  internal view   returns(uint256){
    
      return _balances[account].mul(tokenUsdtNum).div(tokenHNNum);
  } 
 


  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: mint to the zero address");
    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: burn from the zero address");
    _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  
  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "BEP20: approve from the zero address");
    require(spender != address(0), "BEP20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  function _burnFrom(address account, uint256 amount) internal {
    _burn(account, amount);
    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "BEP20: burn amount exceeds allowance"));
  }
 

     function _check_hn_fh_time(address account,uint256 amount) internal view returns(bool){
          if(_hn_fh_timeMap[account]==0){
              return amount>=fh_min_hn?true:false;
          }
          uint256 time = block.timestamp-_hn_fh_timeMap[account];
          return (time>= dividendPerTime && amount>=fh_min_hn)? true:false;
      }
      function _check_luna_fh_time(address account,uint256 amount) internal view returns(bool){
          if(_luna_fh_timeMap[account]==0){
             return amount>=fh_min_luna?true:false;
          }
          uint256 time = block.timestamp-_luna_fh_timeMap[account];
           return (time>= dividendPerTime && amount>=fh_min_luna)? true:false;
      }
      function _check_gudong_fh_time(address account,uint256 amount) internal view returns(bool){
          if(_gudong_fh_timeMap[account]==0){
              return amount>=fh_min_hn?true:false;
          }
          uint256 time = block.timestamp-_gudong_fh_timeMap[account];
          return (time>= dividendPerTime && amount>=fh_min_hn)? true:false;
      }
    
    function _send_hn_fh(address account,uint256 amount,uint256 liquidity) internal{
        if(_balances[addressHn] >= amount){
          _hn_fh_timeMap[account] = block.timestamp;
          _hn_fh_sendedMap[account] = _hn_fh_sendedMap[account].add(amount);
          _send(addressHn,account,amount);
          uint256 liquidityPool = IUniswapV2Pair(uniswapV2Pair).balanceOf(account);
           if(liquidityPool<liquidity){
             _saveLpBalance(account);
          }
         }
      }
      function _send_luna_fh(address account,uint256 amount) internal{
         if(IBEP20(token_LUNA).balanceOf(address(this)) >= amount){
          _luna_fh_timeMap[account] = block.timestamp;
          _luna_fh_sendedMap[account] = _luna_fh_sendedMap[account].add(amount);
           IBEP20(token_LUNA).transfer(account,amount);
           
           
         }
      }

      function _send_gudong_fh(address account,uint256 amount) internal{
        if(_balances[addressGudong] >= amount){
          _gudong_fh_timeMap[account] = block.timestamp;
          _gudong_fh_sendedMap[account] = _gudong_fh_sendedMap[account].add(amount);
          _send(addressGudong,account,amount);
         }
      }

    function _process_fh_hn(uint256 processNum) internal returns(uint256)  {
          uint256 _lastIndex = hn_fh_index;
          uint256 num = 0;
          if(_lastIndex >= _liquidityBalancesMap.length()){
              _lastIndex = 0;
          }
          uint256 success;
           while(num < processNum && _lastIndex < _liquidityBalancesMap.length()){
               (address account,uint256 liquidity) = _liquidityBalancesMap.at(_lastIndex);
               uint256  amount = hn_fh_of(account);
               if(_check_hn_fh_time(account,amount)){
                  _send_hn_fh(account,amount,liquidity);
                  success++;
               }
               _lastIndex++;
               num++;
           }
           hn_fh_index = _lastIndex;
           return success;
      }

      function _process_fh_luna(uint256 processNum) internal returns(uint256){
          uint256 _lastIndex = luna_fh_index;
          uint256 num = 0;
          if(_lastIndex >= _liquidityBalancesMap.length()){
              _lastIndex = 0;
          }
          uint256 success;
          while(num < processNum && _lastIndex < _liquidityBalancesMap.length()){
                 (address account,) = _liquidityBalancesMap.at(_lastIndex);
                 uint256  amount = luna_fh_of(account);
                if( _check_luna_fh_time(account,amount)){
                 _send_luna_fh(account,amount);
                  success++;
               }
                _lastIndex++;
                 num++;
           }
        luna_fh_index = _lastIndex;
           return success;
      }

      function _process_fh_gudong(uint256 processNum) internal returns(uint256){
         
          uint256 _lastIndex = gudong_fh_index;
          uint256 num = 0;
          if(_lastIndex >= _gudongListMap.length()){
              _lastIndex = 0;
          }
          uint256 success ;
           while(num < processNum && _lastIndex < _gudongListMap.length()){
                (address account,) = _gudongListMap.at(_lastIndex);
                uint256  amount =  gudong_fh_of(account);
               if(_check_gudong_fh_time(account,amount)){
                  _send_gudong_fh(account,amount);
                  success++;
               }
               _lastIndex++;
                num++;
           }
           gudong_fh_index = _lastIndex;
           return success;
      }

      function _saveLpBalance(address account ) internal  returns(bool){
           if(account == address(0) ){
               return false ;
           }
          uint256 liquidity = IUniswapV2Pair(uniswapV2Pair).balanceOf(account);
          (bool ret,uint256 liquidityBalance) = _liquidityBalancesMap.tryGet(account);
          
          if(liquidity>0){
             if(!ret){
                 _totalLiquiditySupply = _totalLiquiditySupply.add(liquidity);

                 _hn_fh_correctionsMap[account] = _hn_fh_correctionsMap[account].sub(_magnifiedHnPerOne.mul(liquidity).toInt256Safe());
                 _luna_fh_correctionsMap[account] = _luna_fh_correctionsMap[account].sub(_magnifiedLunaPerOne.mul(liquidity).toInt256Safe());
               
                return _liquidityBalancesMap.set(account, liquidity);
                
             }else if( liquidityBalance>liquidity){
               uint256 decNum = liquidityBalance.sub(liquidity);
               _totalLiquiditySupply = _totalLiquiditySupply.sub(decNum);
               
               _hn_fh_correctionsMap[account] = _hn_fh_correctionsMap[account].add(_magnifiedHnPerOne.mul(decNum).toInt256Safe());
                 _luna_fh_correctionsMap[account] = _luna_fh_correctionsMap[account].add(_magnifiedLunaPerOne.mul(decNum).toInt256Safe());
                
               return _liquidityBalancesMap.set(account, liquidity);
               
             }else if( liquidityBalance <liquidity){
                 uint256 incNum = liquidity.sub(liquidityBalance);
                _totalLiquiditySupply = _totalLiquiditySupply.add(incNum);  
               
                _hn_fh_correctionsMap[account] = _hn_fh_correctionsMap[account].sub(_magnifiedHnPerOne.mul(incNum).toInt256Safe());
                 _luna_fh_correctionsMap[account] = _luna_fh_correctionsMap[account].sub(_magnifiedLunaPerOne.mul(incNum).toInt256Safe());
               


              return _liquidityBalancesMap.set(account,liquidity);
              
            }
          }else if(ret){
              _liquidityBalancesMap.remove(account);
              _totalLiquiditySupply = _totalLiquiditySupply.sub(liquidityBalance);
            
              _hn_fh_correctionsMap[account] = _hn_fh_correctionsMap[account].add(_magnifiedHnPerOne.mul(liquidityBalance).toInt256Safe());
              _luna_fh_correctionsMap[account] = _luna_fh_correctionsMap[account].add(_magnifiedLunaPerOne.mul(liquidityBalance).toInt256Safe());
            
          }
           return true;
      }


}