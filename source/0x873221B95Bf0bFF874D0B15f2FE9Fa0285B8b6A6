// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.9;

// File: contracts/core/access/Roadmap/Phase 1.5/MoonTokenRoles.sol

abstract contract MoonTokenRoles
{
    //========================
    // ATTRIBUTES
    //========================

    //roles
    bytes32 public constant ROLE_SUPER_ADMIN = keccak256("ROLE_SUPER_ADMIN"); //role management + admin
    bytes32 public constant ROLE_ADMIN = keccak256("ROLE_ADMIN"); //highest security. required to change important settings (security risk)
    bytes32 public constant ROLE_MANAGER = keccak256("ROLE_MANAGER"); //required to change settings to optimize behaviour (no security risk, but trust is required)
    bytes32 public constant ROLE_SECURITY_ADMIN = keccak256("ROLE_SECURITY_ADMIN"); //can pause and unpause (no security risk, but trust is required)
    bytes32 public constant ROLE_SECURITY_MOD = keccak256("ROLE_SECURITY_MOD"); //can pause but not unpause (no security risk, minimal trust required)
    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER"); //can mint tokens (high security risk, even admins are not allowed to do this!)
}

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/utils/introspection/ERC165.sol

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// File: @openzeppelin/contracts/utils/Strings.sol

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// File: @openzeppelin/contracts/utils/Context.sol

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/AccessControl.sol

/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    function hasRole(bytes32 role, address account) external view returns (bool);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function grantRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;

    function renounceRole(bytes32 role, address account) external;
}

/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role, _msgSender());
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/
     */
    function _checkRole(bytes32 role, address account) internal view {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);
        _roles[role].adminRole = adminRole;
    }

    function _grantRole(bytes32 role, address account) private {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    function _revokeRole(bytes32 role, address account) private {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

// File: contracts/core/access/Roadmap/Phase 1.5/MoonAccessManager.sol

abstract contract MoonAccessManager is MoonTokenRoles
{
    //========================
    // ATTRIBUTES
    //========================
    
    IMoonToken private immutable moonToken;

    //========================
    // CONSTRUCT
    //========================

    constructor(
        IMoonToken _moonToken
    )
    {   
        moonToken = _moonToken;
    }

    //========================
    // SECURITY FUNCTIONS
    //========================

    function requireAdmin() internal view
    {
        moonToken.requireAdmin(msg.sender);
    }

    function requireManager() internal view
    {
        moonToken.requireManager(msg.sender);
    }

    function requireMinter() internal view
    {
        moonToken.requireMinter(msg.sender);
    }

    function requireSecurityAdmin() internal view
    {
        moonToken.requireSecurityAdmin(msg.sender);
    }

    function requireSecurityMod() internal view
    {
        moonToken.requireSecurityMod(msg.sender);
    }
}

// File: contracts/interfaces/IBonusRewardManager.sol

interface IBonusRewardManager
{
    //========================
    // ATTRIBUTES
    //========================

    function pool() external view returns(IMoonPool);
    function rewardToken() external view returns(IToken);

    //========================
    // USER FUNCTIONS
    //========================

    function claim() external;
    function register() external;

    //========================
    // DEPOSIT / WITHDRAW FUNCTIONS
    //========================

    function deposit(address _user, uint256 _amount) external;
	function withdraw(address _user, uint256 _amount) external;    
}

// File: contracts/interfaces/IMoonPool.sol

interface IMoonPool
{
	//========================
    // ATTRIBUTES
    //========================

    function stakedToken() external view returns (IToken);  
    function rewardToken() external view returns (IToken);    
  
    function startTime() external view returns (uint256);    
    function endTime() external view returns (uint256);    
    function lastRewardTime() external view returns (uint256); 

    function totalClaimed() external view returns (uint256); 
    function totalReservedReward() external view returns (uint256); 
    function refilledReward() external view returns (uint256); 
    function remainingReward() external view returns (uint256); 
    function rewardPerSecond() external view returns (uint256); 
    function rewardPerTime(uint256 _time) external view returns (uint256);
    function getCurrentRemainingReward() external view returns (uint256);

	//========================
    // INFO FUNCTIONS
    //========================

    function balance() external view returns (uint256);    
    function balanceOf(address _user) external view returns (uint256);
    function wrappedBalance() external view returns (uint256);

	function totalReward() external view returns (uint256);
    function pendingReward(address _user) external view returns (uint256);
    function rewardPerMoon(uint256 _passedTime) external view returns (uint256);    
    
    function unclaimedReward() external view returns (uint256);
    function totalLockedReward() external view returns (uint256);

    function checkApproved(address _user) external view returns (bool);
    function getUserInfo(address _user) external view returns (uint256, uint256);
	
	//========================
    // DEPOSIT / WITHDRAW / CLAIM FUNCTIONS
    //========================

    function claim() external;	
	function deposit(uint256 _amount) external;
	function withdraw(uint256 _amount) external;
    function emergencyWithdraw() external;

    //========================
    // REFILL FUNCTIONS
    //========================

    function endEarly() external;
    function refill(uint256 _increaseDuration) external;
    function refillAtTime(uint256 _newStartTime, uint256 _newEndTime) external;
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol



pragma solidity ^0.8.0;



/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: contracts/interfaces/IToken.sol

interface IToken is IERC20
{
	function decimals() external view returns (uint8);	
	function symbol() external view returns (string memory);
	function name() external view returns (string memory);
}

// File: contracts/interfaces/IMoonToken.sol

interface IMoonToken is IToken
{
    //========================
    // TOKEN FUNCTIONS
    //========================

    function mint(address _receiver, uint256 _amount) external;

    //========================
    // SECURITY FUNCTIONS
    //========================

    function requireAdmin(address _user) external view;
    function requireManager(address _user) external view;
    function requireMinter(address _user) external view;
    function requireSecurityAdmin(address _user) external view;
    function requireSecurityMod(address _user) external view;
}

// File: contracts/interfaces/IRouter.sol

interface IUniRouterV1
{
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniRouterV2 is IUniRouterV1
{
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/utils/Address.sol

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: contracts/Roadmap/Phase 1.5/MoonPoolV1.sol

contract MoonPoolV1 is IMoonPool, MoonAccessManager
{
    //========================
    // LIBS
    //========================

	using SafeMath for uint256;
    using SafeERC20 for IToken;
    using SafeERC20 for IMoonToken;

    //========================
    // STRUCTS
    //========================

    struct UserInfo
    {
        uint256 amount; //staked amount
        uint256 rewardDebt; //reward offset: pending reward = (user.amount * accumulatedRewardPerStaked) - user.rewardDebt
        uint256 claimed; //total claimed amout
    }
    
    //========================
    // CONSTANTS
    //========================
    
    string public constant VERSION = "1.0";    
    uint256 public constant PERCENT_FACTOR = 1000000; //100%
    uint256 public constant ACCUMULATED_PRECISION = 1e18;
    IMoonToken public constant MOON_TOKEN = IMoonToken(0x7de7653717F987E5166b665CEA880aeEffF21DE4);

	//========================
    // ATTRIBUTES
    //========================
    
    IToken public immutable override stakedToken; //staked token
	IToken public immutable override rewardToken; //reward token
	IToken public constant wrappedCoin = IToken(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); //wBNB
	IUniRouterV2 public router = IUniRouterV2(0x10ED43C718714eb63d5aA57B78B54704E256024E); //initial router

    mapping(address => UserInfo) public userMap;
	
    uint256 public accumulatedRewardPerStaked; //accumulated reward per staked
	uint256 public override startTime; //start time of current reward
    uint256 public override endTime; //end time of current reward    
    uint256 public override lastRewardTime; //last time reward was given
    uint256 public override totalClaimed; //total claimed amount
    uint256 public override totalReservedReward; //total required reward
    uint256 public override refilledReward; //last refill amount
    uint256 public override remainingReward; //last refill amount

    IBonusRewardManager public bonusRewardManager; //manager for bonus rewards
	
	//========================
    // EVENTS
    //========================
	
	event Deposit(address indexed _user, uint256 _amount);
	event Withdraw(address indexed _user, uint256 _amount);
    event Claim(address indexed _user, uint256 _amount);
    event Refill(uint256 _rewardBalance, uint256 _startTime, uint256 _endTime);
    event AddLiquidity(address indexed _user, uint256 _amount, uint256 _balance);
	event ConfigChanged(string indexed _key, uint256 _value);

	//========================
    // CREATE
    //========================
    
    constructor(
        IToken _stakedToken,
        IToken _rewardToken,
        uint256 _startTime
    )
    MoonAccessManager(MOON_TOKEN)
    {
        stakedToken = _stakedToken;
        rewardToken = _rewardToken;
        startTime = _startTime;
        endTime = startTime;
        refilledReward = 0;
        totalClaimed = 0;
        totalReservedReward = 0;
    }

    //========================
    // CONFIG FUNCTIONS
    //========================   

	function setRouter(IUniRouterV2 _router) external
	{
        requireManager();
		router = _router;
		emit ConfigChanged("Router", uint256(uint160(address(router))));
	}

    function setBonusRewardManager(IBonusRewardManager _manager) external
	{
        requireManager();
		bonusRewardManager = _manager;
		emit ConfigChanged("BonusRewardManager", uint256(uint160(address(bonusRewardManager))));
	}    

	//========================
    // INFO FUNCTIONS
    //========================

    function balance() public view override returns (uint256)
    {
        return stakedToken.balanceOf(address(this));
    }    

    function balanceOf(address _user) external view override returns (uint256)
    {
        UserInfo storage user = userMap[_user];
        return user.amount;
    }

	function totalReward() public view override returns (uint256)
	{
		return rewardToken.balanceOf(address(this));	
	}

    function unclaimedReward() public view override returns (uint256)
	{
		return totalReservedReward.sub(totalClaimed);
	}

    function totalLockedReward() public view override returns (uint256)
	{
		return unclaimedReward().add(remainingReward);	
	}

    function wrappedBalance() external view override returns (uint256)
	{
		return wrappedCoin.balanceOf(address(this));
	}

    //========================
    // USER INFO FUNCTIONS
    //========================

    function checkApproved(address _user) external view override returns (bool)
    {
        return (stakedToken.allowance(_user, address(this)) != 0);
    }   

    function getUserInfo(address _user) external view override returns (uint256, uint256)
    {
        UserInfo storage user = userMap[_user];
        return (user.amount, user.claimed);
    }

    function pendingReward(address _user) external view override returns (uint256)
    {        
        uint256 staked = balance();
        uint256 currentAccumulatedRewardPerStaked = accumulatedRewardPerStaked;
        if (block.timestamp > lastRewardTime
            && staked != 0)
        {
            uint256 tokenReward = rewardPerTime(timeSinceLastReward());
            currentAccumulatedRewardPerStaked = currentAccumulatedRewardPerStaked.add(tokenReward.mul(ACCUMULATED_PRECISION).div(staked));
        }

        //get user reward
        UserInfo storage user = userMap[_user];
        uint256 totalUserReward = user.amount.mul(currentAccumulatedRewardPerStaked).div(ACCUMULATED_PRECISION);
        return totalUserReward.sub(user.rewardDebt);
    }

    function getCurrentRemainingReward() external view override returns (uint256)
    {
        uint256 tokenReward = rewardPerTime(timeSinceLastReward());
        return remainingReward.sub(tokenReward);
    }

    //========================
    // REWARD INFO FUNCTIONS
    //========================

    function rewardPerSecond() public view override returns (uint256)
    {
        return rewardPerTime(1);        
    }

    function rewardPerTime(uint256 _time) public view override returns (uint256)
    {
        //duration
        uint256 duration = endTime.sub(startTime);
        if (duration == 0)
        {
            return 0;
        }
        return refilledReward.mul(_time).div(duration);                
    }

    function rewardPerMoon(uint256 _passedTime) public view override returns (uint256)
    {
        //reward amount
        uint256 currentBalance = balance();
        if (currentBalance == 0)
        {
            return 0;
        }
        return rewardPerTime(_passedTime).mul(10 ** rewardToken.decimals()).div(currentBalance);
    }
	
	//========================
    // LIQUIDITY FUNCTIONS
    //========================

	function swapForLiquidity(IToken _token) external
	{
        requireManager();

		//swap
		uint256 balanceBefore = totalReward();
		uint256 amount = _token.balanceOf(address(this));
		_token.safeIncreaseAllowance(address(router), amount);
        router.swapExactTokensForTokens(
            amount,
            0,
            makeSwapPath(_token, rewardToken),
            address(this),
            block.timestamp);

		//event
		uint256 balanceAfter = totalReward();
		uint256 added = balanceAfter.sub(balanceBefore);
		emit AddLiquidity(address(this), added, totalReward());
	}

	function makeSwapPath(IToken _from, IToken _to) internal pure returns (address[] memory)
	{
	    address[] memory path;
		if (_from == wrappedCoin
			|| _to == wrappedCoin)
		{
			path = new address[](2);
			path[0] = address(_from);
			path[1] = address(_to);
		}
		else
		{
			path = new address[](3);
			path[0] = address(_from);
			path[1] = address(wrappedCoin);
			path[2] = address(_to);
		}
		
		return path;
	}
	
	//========================
    // DEPOSIT / WITHDRAW / CLAIM FUNCTIONS
    //========================

    function claim() public override
    {
        //update
        update();

        //get pending amount
        UserInfo storage user = userMap[msg.sender];
        uint256 pending = user.amount.mul(accumulatedRewardPerStaked).div(ACCUMULATED_PRECISION).sub(user.rewardDebt);
        if (pending == 0)
        {
            return;
        }

        //transfer
        rewardToken.safeTransfer(msg.sender, pending);        

        //update claimed
        user.claimed = user.claimed.add(pending);
        totalClaimed = totalClaimed.add(pending);

        //update debt
        updateUserRewardDebt(msg.sender);

        //event
        emit Claim(msg.sender, pending);
    }
	
	function deposit(uint256 _amount) external override
	{
        //check
        require(_amount > 0, "0 amount");
        require(stakedToken.balanceOf(msg.sender) >= _amount, "Insufficient balance");

        //update & claim
        claim();
        
        //transfer            
        stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);

        //increase staked & update debt
        UserInfo storage user = userMap[msg.sender];
        user.amount = user.amount.add(_amount);        
        updateUserRewardDebt(msg.sender);

        //additional rewards
        if (address(bonusRewardManager) != address(0))
        {
            bonusRewardManager.deposit(msg.sender, _amount);
        }

        //event
		emit Deposit(msg.sender, _amount);
	}

	function withdraw(uint256 _amount) external override
	{	
        UserInfo storage user = userMap[msg.sender];
        if (_amount > user.amount)
        {
            _amount = user.amount;
        }

        //check        
        require(_amount > 0, "0 amount");        

        //update & claim
        claim();

        //transfer        
        stakedToken.safeTransfer(address(msg.sender), _amount);

        //decrease deposit & update debt
        user.amount = user.amount.sub(_amount);
        updateUserRewardDebt(msg.sender);

        //additional rewards
        if (address(bonusRewardManager) != address(0))
        {
            bonusRewardManager.withdraw(msg.sender, _amount);
        }

        //event
        emit Withdraw(msg.sender, _amount);		
	}

    function emergencyWithdraw() external override
	{	
        UserInfo storage user = userMap[msg.sender];

        //check
        require(user.amount > 0, "Insufficient staked");

        //transfer
        uint256 staked = user.amount;
        uint256 currentBalance = balance();
        uint256 available = (staked > currentBalance ? currentBalance : staked);
        stakedToken.safeTransfer(address(msg.sender), available);

        //decrease deposit & update debt
        user.amount = 0;
        user.rewardDebt = 0;

        //additional rewards
        if (address(bonusRewardManager) != address(0))
        {
            bonusRewardManager.withdraw(msg.sender, staked);
        }

        //event
        emit Withdraw(msg.sender, staked);		
	}

    //========================
    // REFILL FUNCTIONS
    //========================

    function endEarly() external override
    {
        requireManager();
        update();
        refilledReward = 0;
        remainingReward = 0;
        endTime = block.timestamp;
    }

    function refill(uint256 _increaseDuration) external override
    {
        requireManager();
        refillRewardBalance(block.timestamp, endTime + _increaseDuration);
    }

    function refillAtTime(uint256 _newStartTime, uint256 _newEndTime) external override
    {
        //check
        requireManager();
        require(startTime > block.timestamp || endTime < block.timestamp, "Reward period still running");

        refillRewardBalance(_newStartTime, _newEndTime);
    }

    function refillRewardBalance(uint256 _newStartTime, uint256 _newEndTime) internal
    {
        //check
        require(_newStartTime < _newEndTime, "End time is before start time");
        require(_newStartTime >= block.timestamp, "Start time is in past");
        require(_newEndTime > block.timestamp, "End time is in past");

        //update
        update();

        //refill      
        startTime = _newStartTime;
        endTime = _newEndTime;
        lastRewardTime = startTime;
        refilledReward = totalReward().sub(unclaimedReward());
        remainingReward = refilledReward;

        //event
        emit Refill(refilledReward, startTime, endTime);
    }
    
    //========================
    // HELPER FUNCTIONS
    //========================	

    function updateUserRewardDebt(address _user) internal
    {
        UserInfo storage user = userMap[_user];
        user.rewardDebt = user.amount.mul(accumulatedRewardPerStaked).div(ACCUMULATED_PRECISION);
    }

    function timeSinceLastReward() internal view returns (uint256)
    {
        if (startTime > block.timestamp)
        {
            return 0;
        }

        //either use end time or now, whatever is earlier
        uint256 end = (endTime < block.timestamp ? endTime : block.timestamp);
        return end.sub(lastRewardTime);
    }

    function update() internal
    {  
        //check staked
        uint256 staked = balance();
        if (staked == 0)
        {
            return;
        }

        //update
        uint256 tokenReward = rewardPerTime(timeSinceLastReward());
        totalReservedReward = totalReservedReward.add(tokenReward);
        remainingReward = remainingReward.sub(tokenReward);
        accumulatedRewardPerStaked = accumulatedRewardPerStaked.add(tokenReward.mul(ACCUMULATED_PRECISION).div(staked));
        lastRewardTime = (block.timestamp > endTime ? endTime : block.timestamp);
    }

    //========================
    // SECURITY FUNCTIONS
    //========================	

    function withdrawUnusedRewards() external
    {
        //check
        requireAdmin();

        //transfer out
        uint256 accessible = totalReward().sub(totalLockedReward());
        rewardToken.safeTransfer(msg.sender, accessible);
    }
}