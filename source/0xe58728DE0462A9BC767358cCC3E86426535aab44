{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint256);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"TokenDistributor.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\n\r\n/*\r\n * @title TokenDistributor\r\n * @dev Token distributer tool contract mainly includes the following functions:\r\n * 1. Batch distribute tokens to the specified wallet address.\r\n * 2. The user who triggers token distribution must have contract ownership.\r\n * 3. Support the claim of any  ERC20 token to the contract ownership address.\r\n * 4. Add and remove wallet addresses to the  issuers array.\r\n * 5. Must match the specified contract address.\r\n * 6. Cooling time is less than 200 blocks.\r\n * 7. Quantitative distribution\r\n **/\r\n\r\ncontract TokenDistributor is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public fundAddress;\r\n    address public issuedToken;\r\n\r\n    address[] private issuers;\r\n    mapping(address =\u003e uint256) issuerIndex;\r\n    mapping(address =\u003e bool) excludeIssuer;\r\n\r\n    uint256 private rationCounts;\r\n    uint256 private rationPerissuer;\r\n    uint256 private percentPerCount;\r\n    uint256 private startRationInitBlock;\r\n    uint256 private startPercentInitBlock;\r\n    uint256 private maxgas = 1000000;\r\n    uint256 private maxissuer = 1000;\r\n    uint256 private rationCurrentIndex;\r\n    uint256 private percentCurrentIndex;\r\n    uint256 private cleanCurrentIndex;\r\n    uint256 private rationProgressIssuedBlock;\r\n    uint256 private percentProgressIssuedBlock;\r\n\r\n    bool private rationSuperPercent = true;\r\n\r\n    event DistributeRation(address from, uint256 value, address token);\r\n    event DistributePercent(address from, uint256 value, address token);\r\n    event ClaimBalance(address fundAddress, uint256 value);\r\n    event ClaimToken(address to, uint256 value, address token);\r\n    event CleanAllIssuer(address msgSender, uint256 length);\r\n    event RationSuperPercentUpdated(bool enabled);\r\n\r\n    constructor (\r\n        address FundAddress,\r\n        address IssuedToken,\r\n        uint256 RationCounts,\r\n        uint256 PercentPerCount\r\n    ) {\r\n        rationCounts = RationCounts;\r\n        percentPerCount = PercentPerCount;\r\n        fundAddress = FundAddress;\r\n        issuedToken = IssuedToken;\r\n        excludeIssuer[address(0)] = true;\r\n        excludeIssuer[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startRationInit() external onlyOwner {\r\n        require(startRationInitBlock == 0, \"BEP20: RationInitialization has been completed\");\r\n        require(rationSuperPercent, \"BEP20: Current mode is not ration\");\r\n\r\n        uint256 balance = IERC20(issuedToken).balanceOf(address(this));\r\n        rationPerissuer = balance.div(rationCounts).div(issuers.length);\r\n        startRationInitBlock = block.number;\r\n    }\r\n\r\n    function closeRationInit() external onlyOwner {\r\n        require(startRationInitBlock \u003e 0, \"BEP20: RationInitialization has not been completed\");\r\n        startRationInitBlock = 0;\r\n    }\r\n\r\n    function getStartRationInitBlock() public view returns (uint256) {\r\n        return startRationInitBlock;\r\n    }\r\n\r\n    function startPercentInit() external onlyOwner {\r\n        require(startPercentInitBlock == 0, \"BEP20: PercentInitialization has been completed\");\r\n        require(!rationSuperPercent, \"BEP20: Current mode is not percent\");\r\n\r\n        startPercentInitBlock = block.number;\r\n    }\r\n\r\n    function closePercentInit() external onlyOwner {\r\n        require(startPercentInitBlock \u003e 0, \"BEP20: PercentInitialization has not been completed\");\r\n        startPercentInitBlock = 0;\r\n    }\r\n\r\n    function getStartPercentInitBlock() public view returns (uint256) {\r\n        return startPercentInitBlock;\r\n    }\r\n\r\n    function distributeRation () external onlyOwner {\r\n        require(startRationInitBlock \u003e 0, \"BEP20: RationInitialization has not been completed\");\r\n        if (rationProgressIssuedBlock.add(200) \u003e block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 TOKEN = IERC20(issuedToken);\r\n        uint256 balance = TOKEN.balanceOf(address(this));\r\n        if (balance \u003c rationPerissuer) {\r\n            return;\r\n        }\r\n\r\n        uint256 total;\r\n        address shareIssuer;\r\n        uint256 shareIssuerCount = issuers.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed \u003c maxgas \u0026\u0026 iterations \u003c shareIssuerCount) {\r\n            if (rationCurrentIndex \u003e= shareIssuerCount) {\r\n                rationCurrentIndex = 0;\r\n            }\r\n            shareIssuer = issuers[rationCurrentIndex];\r\n            if (!excludeIssuer[shareIssuer] \u0026\u0026 balance \u003e= rationPerissuer) {\r\n                TOKEN.transfer(shareIssuer, rationPerissuer);\r\n                balance = balance.sub(rationPerissuer);\r\n                total = total.add(rationPerissuer);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            rationCurrentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        rationProgressIssuedBlock = block.number;\r\n        emit DistributeRation(address(this), total, issuedToken);\r\n    }\r\n\r\n    function distributePercent () external onlyOwner {\r\n        require(startPercentInitBlock \u003e 0, \"BEP20: PercentInitialization has not been completed\");\r\n        if (percentProgressIssuedBlock.add(200) \u003e block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 TOKEN = IERC20(issuedToken);\r\n        uint256 balance = TOKEN.balanceOf(address(this));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 total;\r\n        address shareIssuer;\r\n        uint256 shareIssuerCount = issuers.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 percentPerissuer = balance.mul(percentPerCount).div(10000).div(shareIssuerCount);\r\n\r\n        while (gasUsed \u003c maxgas \u0026\u0026 iterations \u003c shareIssuerCount) {\r\n            if (percentCurrentIndex \u003e= shareIssuerCount) {\r\n                percentCurrentIndex = 0;\r\n            }\r\n            shareIssuer = issuers[percentCurrentIndex];\r\n            if (!excludeIssuer[shareIssuer] \u0026\u0026 balance \u003e= percentPerissuer) {\r\n                TOKEN.transfer(shareIssuer, percentPerissuer);\r\n                balance = balance.sub(percentPerissuer);\r\n                total = total.add(percentPerissuer);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            percentCurrentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        percentProgressIssuedBlock = block.number;\r\n        emit DistributePercent(address(this), total, issuedToken);\r\n    }\r\n\r\n    function claimBalance() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(fundAddress).transfer(balance);\r\n        emit ClaimBalance(fundAddress,balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        require(token != issuedToken, \"BEP20: issuedToken has been initialized and cannot be claimed\");\r\n        IERC20(token).transfer(to, amount);\r\n        emit ClaimToken(to, amount, token);\r\n    }\r\n\r\n    function addIssuer(address adr) external onlyOwner {\r\n        require(issuers.length \u003c= maxissuer, \"BEP20: issuers length exceeds the specified value\");\r\n        _addIssuer(adr);\r\n    }\r\n\r\n    function batchAddIssuer(address[] calldata adres) external onlyOwner {\r\n        require(issuers.length \u003c= maxissuer, \"BEP20: issuers length exceeds the specified value\");\r\n        for(uint256 i = 0; i \u003c adres.length; i++) {\r\n            _addIssuer(adres[i]);\r\n        }\r\n    }\r\n\r\n    function _addIssuer(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size \u003e 0) {\r\n            return;\r\n        }\r\n        if (0 == issuerIndex[adr]) {\r\n            if (0 == issuers.length || issuers[0] != adr) {\r\n                issuerIndex[adr] = issuers.length;\r\n                issuers.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isIssuer(address addr) public view returns (bool) {\r\n        require(addr != address(0), \"BEP20: addr is zero address\");\r\n        for(uint256 i = 0; i \u003c issuers.length; i++) {\r\n            if(issuers[i] == addr) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getIssuerCount() public view returns (uint256) {\r\n        return issuers.length;\r\n    }\r\n\r\n    function cleanAllIssuer() external onlyOwner {\r\n        require(issuers.length \u003e 0, \"BEP20: issuers length equal zero\");\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        bool cleanDone;\r\n        address cleanIssuer;\r\n        uint256 shareIssuerCount = issuers.length;\r\n        uint256 gasLeft = gasleft();\r\n        while (gasUsed \u003c maxgas \u0026\u0026 iterations \u003c shareIssuerCount) {\r\n            if (cleanCurrentIndex \u003e= shareIssuerCount) {\r\n                cleanCurrentIndex = 0;\r\n                cleanDone = true;\r\n                break;\r\n            }\r\n            //revertIndex = issuers.length.sub(cleanCurrentIndex).sub(1);\r\n            cleanIssuer = issuers[cleanCurrentIndex];\r\n            issuerIndex[cleanIssuer] = 0;\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            cleanCurrentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        if(cleanDone) {\r\n            delete issuers;\r\n        }\r\n        \r\n        emit CleanAllIssuer(msg.sender, shareIssuerCount);\r\n    }\r\n\r\n    function setExcludeIssuer(address addr, bool enable) external onlyOwner {\r\n        require(excludeIssuer[addr] != enable, \"BEP20: address has been set enable\");\r\n        require(issuers[issuerIndex[addr]] == addr, \"BEP20: address is not included in issuers\");\r\n        excludeIssuer[addr] = enable;\r\n    }\r\n\r\n    function isExcludeIssuer(address addr) public view returns (bool) {\r\n        return excludeIssuer[addr];\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n    }\r\n\r\n    function setIssuedToken(address addr) external onlyOwner {\r\n        issuedToken = addr;\r\n    }\r\n\r\n    function setMaxGas(uint256 gas) external onlyOwner {\r\n        maxgas = gas;\r\n    }\r\n\r\n    function setRationCounts(uint256 count) external onlyOwner {\r\n        rationCounts = count;\r\n    }\r\n    \r\n    function getRationCounts() public view returns (uint256) {\r\n        return rationCounts;\r\n    }\r\n\r\n    function getRationPerissuer() public view returns (uint256) {\r\n        return rationPerissuer;\r\n    }\r\n\r\n    function setPercentPerCount(uint256 percent) external onlyOwner {\r\n        percentPerCount = percent;\r\n    }\r\n\r\n    function getPercentPerCount() public view returns (uint256) {\r\n        return percentPerCount;\r\n    }\r\n\r\n    function setRationSuperPercent (bool enable) external onlyOwner {\r\n        rationSuperPercent = enable;\r\n        emit RationSuperPercentUpdated(enable);\r\n    }\r\n\r\n    function getRationSuperPercent() public view returns (bool) {\r\n        return rationSuperPercent;\r\n    }\r\n\r\n}"}}