// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SpodMoon {
    string public name = "SpodMoon";
    string public symbol = "SPOD";
    uint256 public totalSupply = 250000000 * 10**18; // 250 million tokens with 18 decimal places

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    uint256 public sellTaxPercentage = 20;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(to != address(0), "Invalid address");

        uint256 taxAmount = 0;
        if (msg.sender != address(this)) {
            taxAmount = (value * sellTaxPercentage) / 100;
            _transfer(msg.sender, address(this), taxAmount); // Transfer tax to contract
        }

        _transfer(msg.sender, to, value - taxAmount); // Transfer remaining amount

        return true;
    }

    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        require(to != address(0), "Invalid address");
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Insufficient allowance");

        uint256 taxAmount = 0;
        if (from != address(this)) {
            taxAmount = (value * sellTaxPercentage) / 100;
            _transfer(from, address(this), taxAmount); // Transfer tax to contract
        }

        _transfer(from, to, value - taxAmount); // Transfer remaining amount
        _approve(from, msg.sender, allowance[from][msg.sender] - value);

        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        _approve(msg.sender, spender, value);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(balanceOf[from] >= value, "Insufficient balance");

        balanceOf[from] -= value;
        balanceOf[to] += value;

        emit Transfer(from, to, value);
    }

    function _approve(address owner, address spender, uint256 value) internal {
        allowance[owner][spender] = value;
        emit Approval(owner, spender, value);
    }
}