// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    //放弃权限
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    //转移权限
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract TokenDistributor {

}

contract MintPool {

}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address private fundAddress;//营销钱包地址

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping(address => bool) private _feeWhiteList;//交易税白名单

    mapping(address => address) private _invitor;//邀请者，即上级

    uint256 private _tTotal;

    ISwapRouter private _swapRouter;
    address private _mainPair;

    bool private inSwap;
    uint256 private numTokensSellToFund;

    uint256 private constant MAX = ~uint256(0);
    TokenDistributor private _tokenDistributor;
    uint256 private _txFee = 4;

    uint256 private limitAmount;//限购数量

    MintPool private _mintPool;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address FundAddress){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        //BSC PancakeSwap 路由地址
        ISwapRouter swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        _swapRouter = swapRouter;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        _mainPair = swapFactory.createPair(address(this), swapRouter.WETH());

        _allowances[address(this)][address(swapRouter)] = MAX;

        //总量
        uint256 total = Supply * 10 ** Decimals;
        _tTotal = total;

        //营销钱包加池子
        uint256 init = 10000 * 10 ** Decimals;
        _balances[FundAddress] = init;
        emit Transfer(address(0), FundAddress, init);

        //矿池
        MintPool mintPool = new MintPool();
        _mintPool = mintPool;
        _balances[address(mintPool)] = total - init;
        emit Transfer(address(0), address(mintPool), total - init);

        //营销钱包，暂时设置为合约部署的开发者地址
        fundAddress = FundAddress;

        //营销地址为手续费白名单
        _feeWhiteList[FundAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;

        //营销钱包卖出条件 1
        numTokensSellToFund = 10 ** Decimals;
        _tokenDistributor = new TokenDistributor();

        lpRewardCondition = 10 * 10 ** Decimals;
        //排除 LP 分红
        excludeLpProvider[address(0)] = true;
        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;
        //粉红锁LP合约地址
        excludeLpProvider[address(0x7ee058420e5937496F5a2096f04caA7721cF70cc)] = true;

        //限购 50
        limitAmount = 50 * 10 ** Decimals;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        //交易税
        uint256 txFee;

        //交易扣税，from == _mainPair 表示买入，to == _mainPair 表示卖出
        if (_mainPair == from || _mainPair == to) {
            //不在手续费白名单，需要扣交易税
            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                //交易税
                txFee = _txFee;

                //兑换代币
                uint256 contractTokenBalance = balanceOf(address(_tokenDistributor));
                if (
                    contractTokenBalance >= numTokensSellToFund &&
                    !inSwap &&
                    to == _mainPair
                ) {
                    swapTokenForFund(numTokensSellToFund);
                }
            }

            //加入LP分红列表
            if (_mainPair == from) {
                addLpProvider(to);
            } else {
                addLpProvider(from);
            }
        } else {
            //普通转账，并且接收者不是手续费白名单，绑定上下级，即不能绑定营销钱包，绑定的下级必须没有币
            if (address(0) == _invitor[to] && !_feeWhiteList[to] && 0 == _balances[to]) {
                _invitor[to] = from;
            }
        }
        _tokenTransfer(from, to, amount, txFee);

        //单钱包限制持有
        if (_mainPair != to && !_feeWhiteList[to]) {
            require(limitAmount >= balanceOf(to), "exceed LimitAmount");
        }

        //LP 分红
        if (from != address(this) && to != address(0x000000000000000000000000000000000000dEaD)) {
            processLP(500000);
        }
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 fee
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount;
        //交易
        if (fee > 0) {
            feeAmount = tAmount * fee / 100;
            //累计在合约里，给 LP 分红
            _takeTransfer(
                sender,
                address(this),
                feeAmount / 2
            );
            //累计到代币接收地址，达到一定数量后，卖出
            _takeTransfer(
                sender,
                address(_tokenDistributor),
                feeAmount / 2
            );
        }
        //接收者增加余额
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        _tokenTransfer(address(_tokenDistributor), address(this), tokenAmount, 0);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _swapRouter.WETH();
        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            fundAddress,
            block.timestamp
        );
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }

    //设置营销钱包
    function setFundAddress(address addr) external onlyOwner {
        fundAddress = addr;
        _feeWhiteList[addr] = true;
    }

    //设置营销卖出条件及数量，具体数量就行，不需要精度
    function setFundSellAmount(uint256 amount) external onlyOwner {
        numTokensSellToFund = amount * 10 ** _decimals;
    }

    //修改交易滑点
    function setTxFee(uint256 fee) external onlyOwner {
        _txFee = fee;
    }

    //设置交易手续费白名单
    function setFeeWhiteList(address addr, bool enable) external onlyOwner {
        _feeWhiteList[addr] = enable;
    }

    //领取主链币余额
    function claimBalance() external {
        payable(fundAddress).transfer(address(this).balance);
    }

    //领取代币余额
    function claimToken(address token, uint256 amount) external {
        IERC20(token).transfer(fundAddress, amount);
    }

    //查看上级
    function getInviter(address account) external view returns (address){
        return _invitor[account];
    }


    //加LP 分红
    address[] private lpProviders;
    mapping(address => uint256) lpProviderIndex;
    //排除LP分红
    mapping(address => bool) excludeLpProvider;

    //加入LP持有列表，发生交易就加入
    function addLpProvider(address adr) private {
        if (0 == lpProviderIndex[adr]) {
            if (0 == lpProviders.length || lpProviders[0] != adr) {
                lpProviderIndex[adr] = lpProviders.length;
                lpProviders.push(adr);
            }
        }
    }

    uint256 private currentIndex;
    uint256 private lpRewardCondition;
    uint256 private progressLPBlock;

    //执行LP分红，使用 gas gasLimit 去执行LP分红
    //间隔 10 分钟分红一次
    function processLP(uint256 gas) private {
        if (progressLPBlock + 200 > block.number) {
            return;
        }
        IERC20 mainpair = IERC20(_mainPair);
        uint totalPair = mainpair.totalSupply();
        if (0 == totalPair) {
            return;
        }

        uint256 tokenBalance = balanceOf(address(this));
        if (tokenBalance < lpRewardCondition) {
            return;
        }

        address shareHolder;
        uint256 pairBalance;
        uint256 amount;

        uint256 shareholderCount = lpProviders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentIndex >= shareholderCount) {
                currentIndex = 0;
            }
            shareHolder = lpProviders[currentIndex];
            pairBalance = mainpair.balanceOf(shareHolder);
            //不在排除列表，才分红
            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {
                amount = tokenBalance * pairBalance / totalPair;
                if (amount > 0) {
                    _tokenTransfer(address(this), shareHolder, amount, 0);
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentIndex++;
            iterations++;
        }

        progressLPBlock = block.number;
    }

    //设置LP分红的代币数量条件
    function setLPRewardCondition(uint256 amount) external onlyOwner {
        lpRewardCondition = amount * 10 ** _decimals;
    }

    //是否排除LP分红
    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {
        excludeLpProvider[addr] = enable;
    }

    //设置钱包限购数量，设置为总量就是解除限购
    function setLimitAmount(uint256 amount) external onlyOwner {
        limitAmount = amount * 10 ** _decimals;
    }


    //往合约转币挖矿
    struct UserInfo {
        uint256 amount;
        uint256 time;
    }

    mapping(address => UserInfo) private _userInfoList;
    //卖的总数量
    uint256 public soldAmount;

    address[] private presaleBuyList;
    //用于捐赠分发代币
    receive() external payable {
        address to = msg.sender;
        //合约调用
        if (to != tx.origin) {
            return;
        }
        UserInfo memory userInfo = _userInfoList[to];
        uint256 timestamp = block.timestamp;
        //已经买过了
        if (userInfo.amount > 0) {
            //不到24小时
            if (timestamp < userInfo.time + 1 days) {
                return;
            }
            //超过24小时提币
            _tokenTransfer(address(_mintPool), to, userInfo.amount, 0);
        }

        uint256 value = msg.value;
        //0.1
        uint256 perValue = 100000000000000000;
        if (value >= perValue) {
            //每层数量
            uint256 layerAmount = 1050000 * 10 ** _decimals;
            //每卖一层，每份数量减半
            uint256 perAmount = 525 * 10 ** _decimals / (2 ** (soldAmount / layerAmount));
            //总卖出
            soldAmount += perAmount;
            //记录购买数量
            _userInfoList[to].amount = perAmount;
            //记录购买时间
            _userInfoList[to].time = timestamp;
            //上级提成
            address current = to;
            uint256 perInviteValue = perValue / 20;
            for (uint256 i; i < 2; ++i) {
                address inviter = _invitor[current];
                //没有上级了
                if (address(0) == inviter) {
                    break;
                }
                if (0 == i) {
                    payable(inviter).transfer(perInviteValue + perInviteValue);
                } else {
                    payable(inviter).transfer(perInviteValue);
                }
                current = inviter;
            }
            //购买代币拉盘
            address[] memory path = new address[](2);
            path[0] = _swapRouter.WETH();
            path[1] = address(this);
            _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : perInviteValue * 5}(
                0,
                path,
                address(0x000000000000000000000000000000000000dEaD),
                timestamp
            );
            return;
        }
        _userInfoList[to].amount = 0;
    }

    function getUserInfo(address user) external view returns (uint256, uint256){
        UserInfo memory info = _userInfoList[user];
        return (info.amount, info.time);
    }
}

contract FTTS20 is AbsToken {
    constructor() AbsToken(
        "FTTS 2.0",
        "FTTS 2.0",
        18,
        21000000,
    //
        address(0x17b271046202e7D3250bb7504E49d5598cd3A999)
    ){

    }
}