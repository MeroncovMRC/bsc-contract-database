pragma solidity ^0.5.0;

contract IERC20 {
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
contract MyscarInterface {
    function _mint(address to, uint tokens) external returns(bool success);
    function mint(address to) external returns (uint liquidity);
    function getAlluser() public view returns (uint id);
}

contract ExhangeMYSCAR{
    address public Pair;
    address public MYSCAR;
    address public USDT;
    address public owner;
    address public system;

    constructor(address _USDT ) public {
    owner = msg.sender;
    USDT = _USDT;
    }

    modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }

    modifier onlySystem() {
    require(msg.sender == system);
    _;
    }

    function changeOwner(address newOwner) public onlyOwner{
    require(newOwner != address(0));
    owner = newOwner;
    }

    function changeSystem(address newSystem) public onlyOwner{
    require(newSystem != address(0));
    system = newSystem;
    }

    function changePair(address newPair) public onlyOwner{
    require(newPair != address(0));
    Pair = newPair;
    }

        function changeMYSCAR(address newMYSCAR) public onlyOwner{
    require(newMYSCAR != address(0));
    MYSCAR = newMYSCAR;
    }

    function exchange(address challenger) external onlySystem{
       transferForOwner();
       uint reserve0 = IERC20(MYSCAR).balanceOf(Pair);
       uint reserve1 = IERC20(USDT).balanceOf(Pair);
       uint ratio = IERC20(USDT).balanceOf(address(this));
       uint ratioMYSCAR = ratio*reserve0/reserve1;
       MyscarInterface(MYSCAR)._mint(Pair, ratioMYSCAR);
       IERC20(USDT).transfer(Pair, ratio);     
       MyscarInterface(Pair).mint(owner);
       uint reserve2 = (ratioMYSCAR * 30)/100;
       MyscarInterface(MYSCAR)._mint(challenger, reserve2);
    }

    function transferForOwner() internal{
        uint ratioUSDT = IERC20(USDT).balanceOf(address(this)) / 5;
        IERC20(USDT).transfer(owner, ratioUSDT);
    }

    function _getAlluser() public view returns (uint id){
        return MyscarInterface(system).getAlluser();
    }

    function ExtraTokens(address tokens, address wallet) public onlyOwner{
        uint ratio = IERC20(tokens).balanceOf(address(this));
        IERC20(tokens).transfer(wallet, ratio);
    }

    function ExtraBNB(address payable wallet) public onlyOwner{
        uint ratio = (address(this)).balance;
        wallet.transfer(ratio);
    }
}