
// File: contracts/vaults/SamoyedVaultRaffle.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol";
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./common/ItemEnumerator.sol";
import "./interfaces/IVaultHelperBase.sol";
import "./interfaces/ISamoyedVault.sol";
import "./interfaces/IVaultRaffle.sol";
import "./interfaces/IVaultStrategy.sol";

contract SamoyedVaultRaffle is Ownable, ReentrancyGuard, ItemEnumerator, IVaultRaffle, VRFConsumerBaseV2 {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    // # Chainlink Variable
    VRFCoordinatorV2Interface COORDINATOR;
    LinkTokenInterface LINKTOKEN;
    uint64 s_subscriptionId;
    bytes32 keyHash;
    uint32 callbackGasLimit = 200000;
    uint16 requestConfirmations = 3;
    uint256 public s_requestId;

    // # Samoyed Variable
    address public admin;
    uint256 public randomResult;
    bool public isRandomSuccess;
    IERC20 public WBNB;
    address public latestWinner;
    uint256 public latestAwardAmount;
    uint256 public minVaultAmount;
    uint256 public minRaffleAmount;
    uint16 public minVaultCount;
    uint256 public initialDate;
    uint256 public latestDepositDate;

    // # Special Pot
    address public specialPot;
    address public specialPotHelper;
    uint16 public specialPotRatio = 800;
    uint16 public MAX_RATIO = 10000;

    event onSetAdmin(address newAdmin);
    event onSetFee(uint256 newFee);
    event onDeposit(address vault, uint256 amount);
    event onSetMinAmount(uint256 minRaffleAmount, uint256 minVaultAmount);
    event onSetMinVaultCount(uint256 minVaultCount);
    event onEmergencyWithdraw(address vault, uint256 amount);
    event onWithdrawLINK(address recipient, uint256 amount);
    event onAwardRequest(uint256 requestId);
    event onAwardResponse(uint256 requestId, uint256 indexed randomResult);
    event onDrawAward(
        uint256 indexed requestId,
        uint256 indexed randomResult,
        uint256 vaultCount,
        uint256 winnerNo,
        address winnerVault,
        uint256 prizeAmount
    );
    event onSetSpecialPot(address specialPot, address specialPotHelper);
    event onSetSpecialPotRatio(uint16 specialPotRatio);

    /**
     * @param _vrfCoordinator ChainLink vrfCoordinatorV2 address
     * @param _link ChainLink LINK token address
     * @param _keyHash KeyHash of ChainLink vrfCoordinatorV2
     * @param _subscriptionId VRFCoordinatorV2 Subscription Id
     * @param _wbnbAddress WBNB token address
     */
    constructor(
        address _vrfCoordinator,
        address _link,
        bytes32 _keyHash,
        uint64 _subscriptionId,
        address _wbnbAddress
    ) VRFConsumerBaseV2(_vrfCoordinator) {
        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        LINKTOKEN = LinkTokenInterface(_link);
        s_subscriptionId = _subscriptionId;
        keyHash = _keyHash;

        admin = msg.sender;

        minVaultCount = 2;
        minVaultAmount = 100_000_000_000_000_000; // 0.1 BNB
        minRaffleAmount = 500_000_000_000_000_000; // 0.5 BNB

        WBNB = IERC20(_wbnbAddress);
        initialDate = 0;
        latestDepositDate = 0;
    }

    modifier onlyAdmin() {
        require(admin == msg.sender, "Raffle: caller is not the admin");
        _;
    }

    /**
     * @dev Deposit amount from SamoyedVault when harvesting
     * @param amount WBNB amount
     */
    function deposit(uint256 amount) external override nonReentrant {
        require(WBNB.balanceOf(msg.sender) >= amount, "Raffle: INSUFFICIENT_BALANCE");
        require(WBNB.allowance(msg.sender, address(this)) >= amount, "Raffle: INSUFFICIENT_ALLOWANCE");

        address _vault = IVaultStrategy(msg.sender).vault();
        require(_vault != address(0), "Raffle: Invalid vault");
        WBNB.safeTransferFrom(msg.sender, address(this), amount);

        if (!containKey(_vault)) {
            VaultItem memory _item = VaultItem(_vault, amount, block.timestamp);
            addEntry(_vault, _item);
        } else {
            VaultItem memory _item = getEntryByKey(_vault);
            _item.balance = _item.balance.add(amount);
            _item.timestamp = block.timestamp;
            updateEntry(_vault, _item);
        }

        if (initialDate == 0) initialDate = block.timestamp;
        latestDepositDate = block.timestamp;
        isRandomSuccess = false;

        emit onDeposit(_vault, amount);
    }

    /**
     * @dev ChainLink randomness
     */
    function awardWinnerByChainLink() external override onlyAdmin nonReentrant {
        require(_shouldDraw() == true, "Raffle: Raffle does not meet all the criteria");
        require(isRandomSuccess == false, "Raffle: Already randomized");
        try
            COORDINATOR.requestRandomWords(keyHash, s_subscriptionId, requestConfirmations, callbackGasLimit, 1)
        returns (uint256 requestId) {
            s_requestId = requestId;
        } catch {
            require(false, "Raffle: error requestRandomWords");
        }

        randomResult = 0;
        isRandomSuccess = false;
        emit onAwardRequest(s_requestId);
    }

    // @dev Manual randomness incase ChainLink get struct
    function awardWinnerByManual() external onlyOwner nonReentrant {
        require(_shouldDraw() == true, "Raffle: Raffle does not meet all the criteria");
        require(isRandomSuccess == false, "Raffle: Already randomized");
        randomResult = uint256(keccak256(abi.encodePacked(block.timestamp, block.number)));
        isRandomSuccess = true;
        s_requestId = 0;

        emit onAwardRequest(s_requestId);
        emit onAwardResponse(s_requestId, randomResult);
    }

    /**
     * @dev Callback function used by VRF Coordinator
     */
    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {
        randomResult = randomWords[0];
        isRandomSuccess = true;

        emit onAwardResponse(requestId, randomWords[0]);
    }

    /**
     * @dev Draw award after Chain's randomness done
     * @param vaultHelper SamoyedVaultHelper of SamoyedVault
     */
    function drawAward(address vaultHelper) external override nonReentrant onlyAdmin {
        require(isRandomSuccess == true, "Raffle: !isRandomSuccess");
        require(_shouldDraw() == true, "Raffle: Raffle does not meet all the criteria");

        uint256 entryCount = entryCount();
        (Entry memory winner, uint256 prizeAmount, address[] memory candidates) = getWinner();
        uint16 candidateCount = uint16(candidates.length);
        require(winner.index < entryCount, "Raffle: Invalid vault");
        require(winner.value.vault != address(0), "Raffle: Invalid vault address");
        require(winner.value.balance >= minVaultAmount, "Raffle: Invalid vault balance");
        require(address(ISamoyedVault(winner.value.vault).strategy()) != address(0), "Raffle: Invalid vault strategy");
        require(WBNB.balanceOf(address(this)) >= prizeAmount, "Raffle: INSUFFICIENT_PRIZE");

        if (winner.value.vault == specialPot) {
            // Winner and specialPot is the same pot
            // Send (92+8)% of prize to Winner pot (Special Pot)
            IVaultHelperBase(specialPotHelper).depositWETHFromPrize(winner.value.vault, prizeAmount, 0);
            emit onDrawAward(s_requestId, randomResult, candidateCount, winner.index, winner.value.vault, prizeAmount);
        } else if (specialPot == address(0) || specialPotRatio == 0) {
            // No special pot
            WBNB.safeApprove(vaultHelper, 0);
            WBNB.safeApprove(vaultHelper, prizeAmount);
            IVaultHelperBase(vaultHelper).depositWETHFromPrize(winner.value.vault, prizeAmount, 0);
            emit onDrawAward(s_requestId, randomResult, candidateCount, winner.index, winner.value.vault, prizeAmount);
        } else {
            uint256 _sPotAmount = prizeAmount.mul(specialPotRatio).div(MAX_RATIO);
            uint256 _PrizeAmount = prizeAmount.sub(_sPotAmount);

            // Send 92% of prize to Winner Pot
            WBNB.safeApprove(vaultHelper, 0);
            WBNB.safeApprove(vaultHelper, _PrizeAmount);
            IVaultHelperBase(vaultHelper).depositWETHFromPrize(winner.value.vault, _PrizeAmount, 0);
            emit onDrawAward(s_requestId, randomResult, candidateCount, winner.index, winner.value.vault, _PrizeAmount);

            // Send 8% of prize to Special Pot
            IVaultHelperBase(specialPotHelper).depositWETHFromPrize(specialPot, _sPotAmount, 0);
            emit onDrawAward(s_requestId, randomResult, candidateCount, winner.index, specialPot, _sPotAmount);
        }

        for (uint256 i = 0; i < candidates.length; i++) {
            removeEntry(candidates[i], true);
        }

        isRandomSuccess = false;
        latestWinner = winner.value.vault;
        latestAwardAmount = prizeAmount;
        initialDate = 0;
        latestDepositDate = 0;
    }

    function getWinner()
        public
        view
        returns (
            Entry memory winner,
            uint256 prizeAmount,
            address[] memory candidateAddresses
        )
    {
        require(isRandomSuccess == true, "Raffle: !isRandomSuccess");
        uint256 entryCount = entryCount();
        uint16 validVaultCount = 0;
        for (uint256 i = 0; i < entryCount; i++) {
            VaultItem memory _vault = getEntryByIndex(i);
            if (_vault.balance >= minVaultAmount) validVaultCount++;
        }
        require(validVaultCount > 0, "No valid vault");

        VaultItem[] memory candidates = new VaultItem[](validVaultCount);
        candidateAddresses = new address[](validVaultCount);
        uint256 totalTicket = 0;
        uint16 _index = 0;
        for (uint256 i = 0; i < entryCount; i++) {
            VaultItem memory _vault = getEntryByIndex(i);
            if (_vault.balance >= minVaultAmount) {
                candidates[_index] = _vault;
                candidateAddresses[_index] = _vault.vault;
                totalTicket = totalTicket.add(_vault.balance);
                _index++;
            }
        }

        uint256 wonTicket = randomResult % totalTicket;
        uint256 ticketFinder = 0;

        for (uint256 i = 0; i < validVaultCount; i++) {
            VaultItem memory _vault = candidates[i];
            ticketFinder = ticketFinder.add(_vault.balance);
            if (ticketFinder >= wonTicket) {
                winner = entries[_vault.vault];
                break;
            }
        }

        return (winner, totalTicket, candidateAddresses);
    }

    /**
     * @dev Return amount to vaultAddress
     * @param vaultAddress SamoyedVault address
     */
    function emergencyWithdraw(address vaultAddress) public onlyOwner {
        require(containKey(vaultAddress), "Raffle: Invalid vault");

        VaultItem memory _item = getEntryByKey(vaultAddress);
        uint256 raffleBalance = WBNB.balanceOf(address(this));
        if (_item.balance >= 0 && raffleBalance >= _item.balance && _item.vault != address(0)) {
            ISamoyedVault _vault = ISamoyedVault(_item.vault);
            IVaultStrategy strategy = _vault.strategy();
            WBNB.transfer(address(strategy), _item.balance);
            strategy.afterReceiveWbnbFromRaffle(_item.balance);
        }
        removeEntry(_item.vault, true);
        emit onEmergencyWithdraw(_item.vault, _item.balance);
    }

    /**
     * @dev Return amount to each vaults
     */
    function emergencyWithdrawAll() external onlyOwner nonReentrant {
        require(entryCount() > 0, "Raffle: no entry");

        address[] memory vaults = getKeys();

        for (uint256 i = 0; i < vaults.length; i++) {
            emergencyWithdraw(vaults[i]);
        }

        totalBalance = 0;
    }

    function setAdmin(address _admin) external onlyOwner {
        admin = _admin;
        emit onSetAdmin(admin);
    }

    /**
     * @param _minRaffleAmount Minimum amount of Raffle to start awarding
     * @param _minVaultAmount Minimum amount of each vault to join the Raffle
     */
    function setMinAmount(uint256 _minRaffleAmount, uint256 _minVaultAmount) external onlyOwner nonReentrant {
        require(isRandomSuccess == false, "Raffle: Already randomized");
        require(_minVaultAmount <= _minRaffleAmount, "Raffle: Invalid min amount");
        minRaffleAmount = _minRaffleAmount;
        minVaultAmount = _minVaultAmount;
        emit onSetMinAmount(minRaffleAmount, minVaultAmount);
    }

    /**
     * @param _minVaultCount Minimum vault count to be start Raffle
     */
    function setMinVaultCount(uint16 _minVaultCount) external onlyOwner nonReentrant {
        require(isRandomSuccess == false, "Raffle: Already randomized");
        minVaultCount = _minVaultCount;
        emit onSetMinVaultCount(minVaultCount);
    }

    function setCallbackGasLimit(uint32 _callbackGasLimit) external onlyOwner nonReentrant {
        require(_callbackGasLimit > 0);
        callbackGasLimit = _callbackGasLimit;
    }

    function setRequestConfirmations(uint16 _requestConfirmations) external onlyOwner nonReentrant {
        require(_requestConfirmations > 0);
        requestConfirmations = _requestConfirmations;
    }

    function setSubscriptionId(uint16 _setSubscriptionId) external onlyOwner nonReentrant {
        require(_setSubscriptionId > 0);
        s_subscriptionId = _setSubscriptionId;
    }

    function setKeyHash(bytes32 _keyHash) external onlyOwner nonReentrant {
        keyHash = _keyHash;
    }

    /**
     * @param _specialPot SamoyedVault of SpecialPot to receive 8% of Award
     * @param _specialPotHelper SamoyedVaultHelper of SamoyedVault specific to SpecialPot
     */
    function setSpecialPot(address _specialPot, address _specialPotHelper) external onlyOwner nonReentrant {
        if (_specialPot != address(0)) {
            require(_specialPotHelper != address(0), "Raffle: pot helper is required");
            require(_specialPot != _specialPotHelper, "Raffle: invalid helper address");
        } else {
            require(_specialPotHelper == address(0), "Raffle: pot helper is not required");
        }

        if (specialPotHelper != address(0)) {
            WBNB.safeApprove(specialPotHelper, 0);
        }
        if (_specialPotHelper != address(0)) {
            WBNB.safeApprove(_specialPotHelper, type(uint256).max);
        }

        specialPot = _specialPot;
        specialPotHelper = _specialPotHelper;

        emit onSetSpecialPot(_specialPot, _specialPotHelper);
    }

    /**
     * @param _specialPotRatio Ratio of aware to be sent to SpecialPot when Awarding
     */
    function setSpecialPotRatio(uint16 _specialPotRatio) external onlyOwner nonReentrant {
        require(_specialPotRatio <= MAX_RATIO, "Raffle: Invalid pot ratio");
        specialPotRatio = _specialPotRatio;

        emit onSetSpecialPotRatio(specialPotRatio);
    }

    function _shouldDraw() private view returns (bool) {
        uint256 entryCount = entryCount();
        require(entryCount > 0, "Raffle: no entry");
        require(WBNB.balanceOf(address(this)) >= minRaffleAmount, "Raffle: WBNB is too low");

        uint16 _validVaultCount = 0;
        uint256 _validVaultAmount = 0;
        for (uint256 i = 0; i < entryCount; i++) {
            VaultItem memory _vault = getEntryByIndex(i);
            if (_vault.balance >= minVaultAmount) {
                _validVaultCount++;
                _validVaultAmount = _validVaultAmount.add(_vault.balance);
            }
        }

        require(_validVaultCount >= minVaultCount, "Raffle: Not enough valid vault");
        require(_validVaultAmount >= minRaffleAmount, "Raffle: Valid WBNB is too low");

        return true;
    }
}


// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}


// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface VRFCoordinatorV2Interface {
  /**
   * @notice Get configuration relevant for making requests
   * @return minimumRequestConfirmations global min for request confirmations
   * @return maxGasLimit global max for request gas limit
   * @return s_provingKeyHashes list of registered key hashes
   */
  function getRequestConfig()
    external
    view
    returns (
      uint16,
      uint32,
      bytes32[] memory
    );

  /**
   * @notice Request a set of random words.
   * @param keyHash - Corresponds to a particular oracle job which uses
   * that key for generating the VRF proof. Different keyHash's have different gas price
   * ceilings, so you can select a specific one to bound your maximum per request cost.
   * @param subId  - The ID of the VRF subscription. Must be funded
   * with the minimum subscription balance required for the selected keyHash.
   * @param minimumRequestConfirmations - How many blocks you'd like the
   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS
   * for why you may want to request more. The acceptable range is
   * [minimumRequestBlockConfirmations, 200].
   * @param callbackGasLimit - How much gas you'd like to receive in your
   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords
   * may be slightly less than this amount because of gas used calling the function
   * (argument decoding etc.), so you may need to request slightly more than you expect
   * to have inside fulfillRandomWords. The acceptable range is
   * [0, maxGasLimit]
   * @param numWords - The number of uint256 random values you'd like to receive
   * in your fulfillRandomWords callback. Note these numbers are expanded in a
   * secure way by the VRFCoordinator from a single random value supplied by the oracle.
   * @return requestId - A unique identifier of the request. Can be used to match
   * a request to a response in fulfillRandomWords.
   */
  function requestRandomWords(
    bytes32 keyHash,
    uint64 subId,
    uint16 minimumRequestConfirmations,
    uint32 callbackGasLimit,
    uint32 numWords
  ) external returns (uint256 requestId);

  /**
   * @notice Create a VRF subscription.
   * @return subId - A unique subscription id.
   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.
   * @dev Note to fund the subscription, use transferAndCall. For example
   * @dev  LINKTOKEN.transferAndCall(
   * @dev    address(COORDINATOR),
   * @dev    amount,
   * @dev    abi.encode(subId));
   */
  function createSubscription() external returns (uint64 subId);

  /**
   * @notice Get a VRF subscription.
   * @param subId - ID of the subscription
   * @return balance - LINK balance of the subscription in juels.
   * @return reqCount - number of requests for this subscription, determines fee tier.
   * @return owner - owner of the subscription.
   * @return consumers - list of consumer address which are able to use this subscription.
   */
  function getSubscription(uint64 subId)
    external
    view
    returns (
      uint96 balance,
      uint64 reqCount,
      address owner,
      address[] memory consumers
    );

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @param newOwner - proposed new owner of the subscription
   */
  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;

  /**
   * @notice Request subscription owner transfer.
   * @param subId - ID of the subscription
   * @dev will revert if original owner of subId has
   * not requested that msg.sender become the new owner.
   */
  function acceptSubscriptionOwnerTransfer(uint64 subId) external;

  /**
   * @notice Add a consumer to a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - New consumer which can use the subscription
   */
  function addConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Remove a consumer from a VRF subscription.
   * @param subId - ID of the subscription
   * @param consumer - Consumer to remove from the subscription
   */
  function removeConsumer(uint64 subId, address consumer) external;

  /**
   * @notice Cancel a subscription
   * @param subId - ID of the subscription
   * @param to - Where to send the remaining LINK to
   */
  function cancelSubscription(uint64 subId, address to) external;
}


// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness. It ensures 2 things:
 * @dev 1. The fulfillment came from the VRFCoordinator
 * @dev 2. The consumer contract implements fulfillRandomWords.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash). Create subscription, fund it
 * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface
 * @dev subscription management functions).
 * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,
 * @dev callbackGasLimit, numWords),
 * @dev see (VRFCoordinatorInterface for a description of the arguments).
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomWords method.
 *
 * @dev The randomness argument to fulfillRandomWords is a set of random words
 * @dev generated from your requestId and the blockHash of the request.
 *
 * @dev If your contract could have concurrent requests open, you can use the
 * @dev requestId returned from requestRandomWords to track which response is associated
 * @dev with which randomness request.
 * @dev See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ.
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request. It is for this reason that
 * @dev that you can signal to an oracle you'd like them to wait longer before
 * @dev responding to the request (however this is not enforced in the contract
 * @dev and so remains effective only in the case of unmodified oracle software).
 */
abstract contract VRFConsumerBaseV2 {
  error OnlyCoordinatorCanFulfill(address have, address want);
  address private immutable vrfCoordinator;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   */
  constructor(address _vrfCoordinator) {
    vrfCoordinator = _vrfCoordinator;
  }

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomWords the VRF output expanded to the requested number of words
   */
  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {
    if (msg.sender != vrfCoordinator) {
      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);
    }
    fulfillRandomWords(requestId, randomWords);
  }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: contracts/vaults/common/ItemEnumerator.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

abstract contract ItemEnumerator {
    using SafeMath for uint256;

    struct VaultItem {
        address vault;
        uint256 balance;
        uint256 timestamp;
    }

    struct Entry {
        uint256 index;
        VaultItem value;
    }

    mapping(address => Entry) internal entries;
    address[] internal keyList;
    uint256 public totalBalance;

    function addEntry(address _key, VaultItem memory _value) internal {
        Entry storage entry = entries[_key];
        entry.value = _value;
        if (entry.index > 0) {
            // entry exists
            // do nothing
            return;
        } else {
            // new entry
            keyList.push(_key);
            uint256 keyListIndex = keyList.length - 1;
            entry.index = keyListIndex + 1;
            totalBalance = totalBalance.add(_value.balance);
        }
    }

    function updateEntry(address _key, VaultItem memory _value) internal {
        Entry storage entry = entries[_key];
        require(entry.index != 0); // entry not exist
        require(entry.index <= keyList.length); // invalid index value

        if (containKey(_key)) {
            totalBalance = totalBalance.sub(entry.value.balance);
            entries[_key].value = _value;
            totalBalance = totalBalance.add(_value.balance);
        }
    }

    function removeEntry(address _key, bool force) internal {
        Entry storage entry = entries[_key];
        require(entry.index != 0, "ItemEnumerator: Entry not exist");
        require(entry.index <= keyList.length, "ItemEnumerator: Invalid index value");
        require(force == true || entry.value.balance == 0, "ItemEnumerator: Can't remove entry with any balance");

        totalBalance = totalBalance.sub(entry.value.balance);

        // Move an last element of array into the vacated key slot.
        uint256 keyListIndex = entry.index - 1;
        uint256 keyListLastIndex = keyList.length - 1;
        entries[keyList[keyListLastIndex]].index = keyListIndex + 1;
        keyList[keyListIndex] = keyList[keyListLastIndex];
        keyList.pop();
        delete entries[_key];
    }

    function entryCount() public view returns (uint256) {
        return uint256(keyList.length);
    }

    function containKey(address _key) internal view returns (bool) {
        return entries[_key].index > 0;
    }

    function getEntryByKey(address _key) public view returns (VaultItem memory) {
        return entries[_key].value;
    }

    function getEntryByIndex(uint256 _index) internal view returns (VaultItem memory) {
        require(_index >= 0);
        require(_index < keyList.length);
        return entries[keyList[_index]].value;
    }

    function getKeys() public view returns (address[] memory) {
        return keyList;
    }
}


// File: contracts/vaults/interfaces/IVaultHelperBase.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVaultHelperBase {
    function depositWETHFromPrize(
        address vault,
        uint256 wethAmount,
        uint256 tokenAmountOutMin
    ) external;
}


// File: contracts/vaults/interfaces/ISamoyedVault.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../interfaces/IVaultStrategy.sol";

interface ISamoyedVault is IERC20 {
    function deposit(uint256 amount) external;

    function withdraw(uint256 shares) external;

    function want() external view returns (IERC20);

    function earn() external;

    function strategy() external view returns (IVaultStrategy);
}


// File: contracts/vaults/interfaces/IVaultRaffle.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVaultRaffle {
    function deposit(uint256 amount) external;

    function awardWinnerByChainLink() external;

    function drawAward(address vaultHelper) external;
}


// File: contracts/vaults/interfaces/IVaultStrategy.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IVaultStrategy {
    function vault() external view returns (address);

    function want() external view returns (IERC20);

    function beforeDeposit() external;

    function deposit() external;

    function withdraw(uint256) external;

    function balanceOf() external view returns (uint256);

    function balanceOfWant() external view returns (uint256);

    function balanceOfPool() external view returns (uint256);

    function harvest() external;

    function retireStrat() external;

    function panic() external;

    function pause() external;

    function unpause() external;

    function paused() external view returns (bool);

    function afterReceiveWbnbFromRaffle(uint256 returnAmount) external;
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

