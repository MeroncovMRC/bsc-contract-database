{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \u0027Address: insufficient balance\u0027);\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\u0027\u0027);\n        require(success, \u0027Address: unable to send value, recipient may have reverted\u0027);\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \u0027Address: low-level call failed\u0027);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \u0027Address: low-level call with value failed\u0027);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \u0027Address: insufficient balance for call\u0027);\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \u0027Address: call to non-contract\u0027);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"BEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./Context.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./SafeBEP20.sol\u0027;\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    using SafeBEP20 for IBEP20;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external override view returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() public override view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() public override view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() public override view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \u0027BEP20: transfer from the zero address\u0027);\n        require(recipient != address(0), \u0027BEP20: transfer to the zero address\u0027);\n\n        _balances[sender] = _balances[sender].sub(amount, \u0027BEP20: transfer amount exceeds balance\u0027);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \u0027BEP20: mint to the zero address\u0027);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\n\n        _balances[account] = _balances[account].sub(amount, \u0027BEP20: burn amount exceeds balance\u0027);\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, \u0027BEP20: burn amount exceeds allowance\u0027)\n        );\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity \u003e=0.4.0;\n\nimport \u0027./Context.sol\u0027;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Address.sol\u0027;\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \u0027SafeBEP20: approve from non-zero to non-zero allowance\u0027\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \u0027SafeBEP20: decreased allowance below zero\u0027\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \u0027SafeBEP20: low-level call failed\u0027);\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \u0027SafeBEP20: BEP20 operation did not succeed\u0027);\n        }\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity \u003e=0.4.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x \u003c y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y \u003e 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x \u003c z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}"},"TEXOOrchestrator.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./ReentrancyGuard.sol\u0027;\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./SafeBEP20.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./TEXOToken.sol\u0027;\n\ncontract TEXOOrchestrator is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Address for address;\n    using SafeBEP20 for IBEP20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardLockedUp; // Reward locked up regardless of user\u0027s current rewardDept\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of tEXOs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accTEXOPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\n        //   1. The pool\u0027s `accTEXOPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User\u0027s `amount` gets updated.\n        //   4. User\u0027s `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBEP20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. tEXOs to distribute per block.\n        uint256 blockToReceiveReward; // Block number at which to allow receiving reward\n        uint256 inActiveBlock; // Block at which to stop staking and generating rewards\n        uint256 lastRewardBlock; // Last block number that TEXOs distribution occurs.\n        uint256 accTEXOPerShare; // Accumulated tEXOs per share, times 1e12. See below.\n        uint16 depositFeeBP; // Deposit fee in basis points\n    }\n\n    // The tEXO Token!\n    TEXOToken public tEXO;\n    // Dev address.\n    address public devAddr;\n    // tEXO tokens created per block.\n    uint256 public tEXOPerBlock;\n    // Deposit Fee address\n    address public feeAddress;\n\n    // Block height at which to reduce emission rate\n    uint256 public blockToStartReducingEmissionRate;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 =\u003e mapping(address =\u003e UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // Referral Bonus in basis points. Initially set to 2%\n    uint256 public refBonusBP = 200;\n    // Max deposit fee: 4%.\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_BP = 400;\n    // Max referral commission rate: 20%.\n    uint16 public constant MAXIMUM_REFERRAL_BP = 2000;\n    // Referral Mapping\n    mapping(address =\u003e address) public referrers; // account_address -\u003e referrer_address\n    mapping(address =\u003e uint256) public referredCount; // referrer_address -\u003e num_of_referred\n    // Pool Exists Mapper\n    mapping(IBEP20 =\u003e bool) public poolExistence;\n    // Pool ID Tracker Mapper\n    mapping(IBEP20 =\u003e uint256) public poolIdForLpAddress;\n\n    // Initial emission rate: 0.5 tEXO per block.\n    uint256 public constant INITIAL_EMISSION_RATE = 500 finney;\n\n    // Minimum emission rate: 0.1 tEXO per block.\n    uint256 public constant MINIMUM_EMISSION_RATE = 100 finney;\n\n    // Reduce emission every 28,800 blocks ~ 24 hours.\n    uint256 public constant EMISSION_REDUCTION_PERIOD_BLOCKS = 28800;\n    // Emission reduction rate per period in basis points: 15%.\n    uint256 public constant EMISSION_REDUCTION_RATE_PER_PERIOD = 1500;\n    // Last reduction period index\n    uint256 public lastReductionPeriodIndex = 0;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n    event ClaimReward(address indexed user, uint256 pid, uint256 amount);\n    event SetFeeAddress(address indexed user, address indexed _devAddress);\n    event SetDevAddress(address indexed user, address indexed _feeAddress);\n    event Referral(address indexed _referrer, address indexed _user);\n    event ReferralPaid(address indexed _user, address indexed _userTo, uint256 _reward);\n    event ReferralBonusBpChanged(uint256 _oldBp, uint256 _newBp);\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\n    event BlockToStartEmissionRateUpdated(address indexed caller, uint256 previousValue, uint256 newValue);\n\n    constructor(\n        TEXOToken _tEXO,\n        address _devAddr,\n        address _feeAddress,\n        uint256 _blockToStartReducingEmissionRate\n    ) public {\n        tEXO = _tEXO;\n        devAddr = _devAddr;\n        feeAddress = _feeAddress;\n        tEXOPerBlock = INITIAL_EMISSION_RATE;\n        blockToStartReducingEmissionRate = _blockToStartReducingEmissionRate;\n    }\n\n    // Get number of pools added.\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function getPoolIdForLpToken(IBEP20 _lpToken) external view returns (uint256) {\n        require(poolExistence[_lpToken] != false, \"getPoolIdForLpToken: do not exist\");\n        return poolIdForLpAddress[_lpToken];\n    }\n\n    // Modifier to check Duplicate pools\n    modifier nonDuplicated(IBEP20 _lpToken) {\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: duplicated\");\n        _;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    function add(\n        uint256 _allocPoint,\n        IBEP20 _lpToken,\n        uint16 _depositFeeBP,\n        bool _withUpdate,\n        uint256 _blockToReceiveReward,\n        uint256 _startGenerateRewardBlock,\n        uint256 _inActiveBlock\n    ) public onlyOwner nonDuplicated(_lpToken) {\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE_BP, \"add: invalid deposit fee basis points\");\n        require(_blockToReceiveReward \u003e 0, \"add: block to receive reward is required \");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolExistence[_lpToken] = true;\n\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: _startGenerateRewardBlock \u003e 0 ? _startGenerateRewardBlock : block.number,\n                accTEXOPerShare: 0,\n                depositFeeBP: _depositFeeBP,\n                blockToReceiveReward: _blockToReceiveReward,\n                inActiveBlock: _inActiveBlock \u003e 0 ? _inActiveBlock : 0\n            })\n        );\n\n        poolIdForLpAddress[_lpToken] = poolInfo.length - 1;\n    }\n\n    // Update the given pool\u0027s tEXO allocation point and deposit fee. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint16 _depositFeeBP,\n        bool _withUpdate,\n        uint256 _blockToReceiveReward,\n        uint256 _inActiveBlock\n    ) public onlyOwner {\n        require(_depositFeeBP \u003c= MAXIMUM_DEPOSIT_FEE_BP, \"set: invalid deposit fee basis points\");\n        require(_blockToReceiveReward \u003e 0, \"set: block to receive reward is required\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].blockToReceiveReward = _blockToReceiveReward;\n        poolInfo[_pid].inActiveBlock = _inActiveBlock \u003e 0 ? _inActiveBlock : 0;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending tEXOs on frontend.\n    function pendingTEXO(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 accTEXOPerShare = pool.accTEXOPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        uint256 blockToCalculateMultiplier = minCurrentBlockAndInactiveBlockIfExist(_pid);\n\n        if (blockToCalculateMultiplier \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, blockToCalculateMultiplier);\n            uint256 tEXOReward = multiplier\n                .mul(tEXOPerBlock)\n                .mul(pool.allocPoint)\n                .div(totalAllocPoint);\n\n            accTEXOPerShare = accTEXOPerShare\n                .add(\n                    tEXOReward\n                        .mul(1e12)\n                        .div(lpSupply)\n                );\n        }\n\n        uint256 pending = user.amount\n            .mul(accTEXOPerShare)\n            .div(1e12)\n            .sub(user.rewardDebt);\n\n        return pending.add(user.rewardLockedUp);\n    }\n\n    function minCurrentBlockAndInactiveBlockIfExist(uint256 _pid) internal view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.inActiveBlock == 0) {\n            return block.number;\n        }\n\n        return block.number \u003e pool.inActiveBlock ? pool.inActiveBlock : block.number;\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        uint256 blockToCalculateMultiplier = minCurrentBlockAndInactiveBlockIfExist(_pid);\n\n        if (blockToCalculateMultiplier \u003c= pool.lastRewardBlock) {\n            return;\n        }\n\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this)); // Get number of lp token this pool has. Example: total WETH this pool has accumulated.\n\n        if (lpSupply == 0 || pool.allocPoint == 0) { // If pool initially has no staked WETH token, or pool has no allocation points.\n            pool.lastRewardBlock = blockToCalculateMultiplier;\n\n            return;\n        }\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, blockToCalculateMultiplier); // For each block has passed, the reward will be multiplied.\n        uint256 tEXOReward = multiplier\n            .mul(tEXOPerBlock)\n            .mul(pool.allocPoint)\n            .div(totalAllocPoint);\n\n        tEXO.mint(devAddr, tEXOReward.div(10)); // Reward dev 10% of the tEXO reward created for each block.\n        tEXO.mint(address(this), tEXOReward); // Increase the number of tEXO this pool has.\n\n        pool.accTEXOPerShare = pool.accTEXOPerShare\n            .add(\n                tEXOReward\n                .mul(1e12)\n                .div(lpSupply)\n            );\n\n        pool.lastRewardBlock = blockToCalculateMultiplier;\n    }\n\n    function canClaimReward(uint256 _pid) public view returns (bool) {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        return pool.blockToReceiveReward \u003c= block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for tEXO allocation with referral.\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) public nonReentrant {\n        require(_referrer == address(_referrer),\"deposit: Invalid referrer address\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.inActiveBlock \u003e 0) {\n            require(block.number \u003c= pool.inActiveBlock, \"deposit: staking period has ended\");\n        }\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        updatePool(_pid);\n\n        payOrLockupPendingTEXO(_pid);\n\n        if (_amount \u003e 0 \u0026\u0026 _referrer != address(0) \u0026\u0026 _referrer != msg.sender) {\n            setReferral(msg.sender, _referrer);\n        }\n\n        if (_amount \u003e 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n\n            if (pool.depositFeeBP \u003e 0) {\n                uint256 depositFee = _amount\n                    .mul(pool.depositFeeBP)\n                    .div(10000);\n\n                user.amount = user.amount\n                    .add(_amount)\n                    .sub(depositFee);\n\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\n            } else {\n                user.amount = user.amount.add(_amount);\n            }\n        }\n\n        user.rewardDebt = user.amount\n            .mul(pool.accTEXOPerShare)\n            .div(1e12);\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount \u003e= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n\n        payOrLockupPendingTEXO(_pid);\n\n        if (_amount \u003e 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n\n        user.rewardDebt = user.amount\n            .mul(pool.accTEXOPerShare)\n            .div(1e12);\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Pay or lockup pending tEXO.\n    function payOrLockupPendingTEXO(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 pending = user.amount\n            .mul(pool.accTEXOPerShare)\n            .div(1e12)\n            .sub(user.rewardDebt);\n\n        if (canClaimReward(_pid)) {\n            if (pending \u003e 0 || user.rewardLockedUp \u003e 0) {\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\n\n                user.rewardLockedUp = 0;\n\n                // send rewards\n                safeTEXOTransfer(msg.sender, totalRewards);\n                payReferralCommission(msg.sender, totalRewards);\n            }\n        } else if (pending \u003e 0) {\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\n        }\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // Safe tEXO transfer function, just in case if rounding error causes pool to not have enough tEXOs.\n    function safeTEXOTransfer(address _to, uint256 _amount) internal {\n        uint256 tEXOBal = tEXO.balanceOf(address(this));\n        bool transferSuccess = false;\n\n        if (_amount \u003e tEXOBal) {\n            transferSuccess = tEXO.transfer(_to, tEXOBal);\n        } else {\n            transferSuccess = tEXO.transfer(_to, _amount);\n        }\n\n        require(transferSuccess, \"safeTEXOTransfer: transfer failed.\");\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devaddr) public {\n        require(_devaddr != address(0), \"dev: invalid address\");\n        require(msg.sender == devAddr, \"dev: wut?\");\n\n        devAddr = _devaddr;\n\n        emit SetDevAddress(msg.sender, _devaddr);\n    }\n\n    // Update fee address by the previous fee address.\n    function setFeeAddress(address _feeAddress) public {\n        require(_feeAddress != address(0), \"setFeeAddress: invalid address\");\n        require(msg.sender == feeAddress, \"setFeeAddress: FORBIDDEN\");\n\n        feeAddress = _feeAddress;\n\n        emit SetFeeAddress(msg.sender, _feeAddress);\n    }\n\n    // Reduce emission rate by 15% every 28,800 blocks ~ 24hours till the emission rate is 0.05 tEXO. This function can be called publicly.\n    function reduceEmissionRateWithDefaultRate() public {\n        require(block.number \u003e blockToStartReducingEmissionRate, \"reduceEmissionRateWithDefaultRate: Can only be called after specified block starts\");\n        require(tEXOPerBlock \u003e MINIMUM_EMISSION_RATE, \"reduceEmissionRateWithDefaultRate: Emission rate has reached the minimum threshold\");\n\n        uint256 currentIndex = block.number.sub(blockToStartReducingEmissionRate).div(EMISSION_REDUCTION_PERIOD_BLOCKS);\n        if (currentIndex \u003c= lastReductionPeriodIndex) {\n            return;\n        }\n\n        uint256 newEmissionRate = tEXOPerBlock;\n        for (uint256 index = lastReductionPeriodIndex; index \u003c currentIndex; ++index) {\n            newEmissionRate = newEmissionRate\n                .mul(1e4 - EMISSION_REDUCTION_RATE_PER_PERIOD)\n                .div(1e4);\n        }\n\n        newEmissionRate = newEmissionRate \u003c MINIMUM_EMISSION_RATE ? MINIMUM_EMISSION_RATE : newEmissionRate;\n        if (newEmissionRate \u003e= tEXOPerBlock) {\n            return;\n        }\n\n        massUpdatePools();\n\n        lastReductionPeriodIndex = currentIndex;\n        uint256 previousEmissionRate = tEXOPerBlock;\n        tEXOPerBlock = newEmissionRate;\n\n        emit EmissionRateUpdated(msg.sender, previousEmissionRate, newEmissionRate);\n    }\n\n    function setEmissionRate(uint256 newEmissionRate) public onlyOwner {\n        uint256 previousEmissionRate = tEXOPerBlock;\n        tEXOPerBlock = newEmissionRate;\n\n        massUpdatePools();\n\n        emit EmissionRateUpdated(msg.sender, previousEmissionRate, newEmissionRate);\n    }\n\n    function setBlockToStartReducingEmissionRate(uint256 newBlockToStartReducingEmissionRate) public onlyOwner {\n        uint256 previousBlockToStartReducingEmissionRate = blockToStartReducingEmissionRate;\n        blockToStartReducingEmissionRate = newBlockToStartReducingEmissionRate;\n\n        emit BlockToStartEmissionRateUpdated(msg.sender, previousBlockToStartReducingEmissionRate, newBlockToStartReducingEmissionRate);\n    }\n\n    // Set Referral Address for a user\n    function setReferral(address _user, address _referrer) internal {\n        if (_referrer == address(_referrer) \u0026\u0026 referrers[_user] == address(0) \u0026\u0026 _referrer != address(0) \u0026\u0026 _referrer != _user) {\n            referrers[_user] = _referrer;\n            referredCount[_referrer] += 1;\n            emit Referral(_user, _referrer);\n        }\n    }\n\n    // Get Referral Address for a Account\n    function getReferral(address _user) public view returns (address) {\n        return referrers[_user];\n    }\n\n    // Pay referral commission to the referrer who referred this user.\n    function payReferralCommission(address _user, uint256 _pending) internal {\n        address referrer = getReferral(_user);\n        if (referrer != address(0) \u0026\u0026 referrer != _user \u0026\u0026 refBonusBP \u003e 0) {\n            uint256 refBonusEarned = _pending.mul(refBonusBP).div(10000);\n            tEXO.mint(referrer, refBonusEarned);\n            emit ReferralPaid(_user, referrer, refBonusEarned);\n        }\n    }\n\n    // Referral Bonus in basis points.\n    // Initially set to 2%, this this the ability to increase or decrease the Bonus percentage based on\n    // community voting and feedback.\n    function updateReferralBonusBp(uint256 _newRefBonusBp) public onlyOwner {\n        require(_newRefBonusBp \u003c= MAXIMUM_REFERRAL_BP, \"updateRefBonusPercent: invalid referral bonus basis points\");\n        require(_newRefBonusBp != refBonusBP, \"updateRefBonusPercent: same bonus bp set\");\n        uint256 previousRefBonusBP = refBonusBP;\n        refBonusBP = _newRefBonusBp;\n        emit ReferralBonusBpChanged(previousRefBonusBP, _newRefBonusBp);\n    }\n}\n"},"TEXOToken.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n *Submitted for verification at BscScan.com on 2021-05-10\n*/\n\npragma solidity 0.6.12;\n\nimport \u0027./SafeMath.sol\u0027;\nimport \u0027./Context.sol\u0027;\nimport \u0027./IBEP20.sol\u0027;\nimport \u0027./Address.sol\u0027;\nimport \u0027./Ownable.sol\u0027;\nimport \u0027./SafeBEP20.sol\u0027;\nimport \u0027./BEP20.sol\u0027;\n\ncontract TEXOToken is BEP20(\u0027tEXO Token\u0027, \u0027tEXO\u0027) {\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n        _moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n    // Copied and modified from YAM code:\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n    // Which is copied and modified from COMPOUND:\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n    /// @dev A record of each accounts delegate\n    mapping (address =\u003e address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address =\u003e mapping (uint32 =\u003e Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address =\u003e uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract\u0027s domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address =\u003e uint) public nonces;\n\n      /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account\u0027s vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n        external\n        view\n        returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n   /**\n    * @notice Delegate votes from `msg.sender` to `delegatee`\n    * @param delegatee The address to delegate votes to\n    */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"TEXO::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"TEXO::delegateBySig: invalid nonce\");\n        require(now \u003c= expiry, \"TEXO::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints \u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n        external\n        view\n        returns (uint256)\n    {\n        require(blockNumber \u003c block.number, \"TEXO::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \u003c= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock \u003e blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper \u003e lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock \u003c blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n        internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying TEXOs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep \u0026\u0026 amount \u003e 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum \u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum \u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    )\n        internal\n    {\n        uint32 blockNumber = safe32(block.number, \"TEXO::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints \u003e 0 \u0026\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n \u003c 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}\n\n"}}