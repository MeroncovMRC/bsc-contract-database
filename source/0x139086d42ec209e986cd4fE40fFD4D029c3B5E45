// SPDX-License-Identifier: MIT
pragma solidity = 0.8.19;

/**----------------------------------------*
    ███████ ██    ██    ███████ ██ ███████
    ██░░░██ ██   ███    ██░░░██ ██     ██
    ██░░░██ ██ ██ ██    █████   ██   ███  
    ██░░░██ ███   ██    ██░░░██ ██  ██     
    ███████ ██    ██    ███████ ██ ███████                                      
-------------------------------------------**--**/
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
abstract contract Ownable {
    address private _owner;
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
interface IBEP20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner,address indexed spender,uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from,address to,uint256 amount) external returns (bool);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

interface ISYS {
    struct AccountInfo {
        uint num;
        address addr;
    }
    struct User {
        bytes32 id;
        bytes32 spon;
        bytes32 parent;
        bytes32 side1;
        bytes32 side2;
        bytes32 side3;

        uint teamTotal;
        uint[3] genCount; //[f1, f1Act, totalGen]
        uint[3] team; // [1,2,3]
        uint[12] level; // [1-12]
        uint[12] level12; // [1-12]
        uint[2] totalPay; // [me,tree]
        uint256 totalIncome;

        uint roundStep; //1-->12
        uint round; //1-->5
        uint256 firstTime;
        uint myAcc;
        uint maxAcc;
    }
    struct Round {
        uint no; //1-->5
        uint step; // 12
        uint payTotal; //17$
        uint fee; //2$
        uint aff; //5$
        uint bonus; //10$
    }

    function addrCallCheck() external view returns (address ori, address sender, address contr, address admin, address spec, address comp, address top);
    function sellToken(uint256 amountUsd) external returns (bool success);
    function getSiteInfo()external view returns (uint256 u, uint256 acc, uint256 tPay, uint tBcount, uint256 bnb,uint256 usd);
    
    function setNumIds() external;
    function setNumIdsNew(uint numNew) external;
    function setTotalUsers() external;
    function setTotalUsersNew(uint numNew) external;

    function setTotalPayAmounts(uint256 amount) external;
    function setTotalPayAmountsNew(uint256 amountNew) external;

    function setBonusCount(uint numNew) external;

    function setAccInfo(bytes32 id, address addr, uint num) external;
    function setUsedIds(bytes32 id, bool b) external;

    function setRefListPush(bytes32 refID, bytes32 id) external;
    function setRefList(bytes32 refID, bytes32[] memory list) external;
    function setRefListIdx(uint idx, bytes32 idOld, bytes32 idNew) external;
    
    function setAccOfAddPush(address addr, bytes32 id) external;
    function setAccOfAdd(address addr, bytes32[] memory list) external;

    function setTopsPush(uint lv, bytes32 id) external;
    function setTops(uint lv, bytes32[] memory list) external;

    function setUser(bytes32 id, User memory u) external;
    function setUid(bytes32 id) external;
    function setUSpon(bytes32 id, bytes32 spon) external;
    function setUPa(bytes32 id, bytes32 pa) external;
    function setUside1(bytes32 id, bytes32 sID) external;
    function setUside2(bytes32 id, bytes32 sID) external;
    function setUside3(bytes32 id, bytes32 sID) external;
    function setUteamTotal(bytes32 id) external;
    function setUgenCount(bytes32 id,uint idx) external;
    function setUteam(bytes32 id,uint idx) external;
    function setUlevel(bytes32 id,uint lv) external;
    function setUlevel12(bytes32 id,uint lv) external;
    function setUtotalPay(bytes32 id, uint idx, uint256 newTotal) external;
    function setUStep(bytes32 id, uint round, uint rStep) external;
    function setUmyAcc(bytes32 id) external;
    function setUmaxAcc(bytes32 id) external;
    function setUfirstTime(bytes32 id) external;
    
    // ---------------------
    function register(bytes32 refID) external;
    function regNewAcc(bytes32 spon) external;

    function payByUSD(bytes32 id) external;
    function payAll(address addr) external;
    function payStepAll(address addr, uint step) external ;
    function newAccAll(address addr) external;

    function getPayUp(bytes32 fromID, uint fromS, uint fromR) external view returns(bytes32 payID);
    function checkPa(bytes32 paID, uint fromS, uint fromR) external view returns(bytes32 paOk);
    function iDOfAdd(address addr) external view returns (bytes32[] memory);
    function iD2Addr(bytes32 id) external view returns (address);
    function iD0(address addr) external view returns (bytes32);
    function findIndexRef(bytes32 e, bytes32 sponID) external view returns (uint);
    // ---------------------

    function checkInGen(bytes32 fromID, bytes32 id) external view returns(bool done);
    function checkInTree(bytes32 fromID, bytes32 id) external view returns(bool done);
    function isExist(bytes32 id) external view returns(bool);
    function isMax(bytes32 id) external view returns(bool);
    
    function rounds(uint r) external view returns(Round memory);
    function round2() external view returns(bool);
    function isMaxCheckList(address addr) external view returns(bytes32[] memory);
    function findLocal(bytes32 spon) external view returns (bytes32 lo, uint s);
    function checkTop12(bytes32 id, uint lv) external view returns(bool b);
    
    function usedIds(bytes32 id) external view returns (bool);
    function accInfo(bytes32 id) external view returns (AccountInfo memory);
    function users(bytes32 id) external view returns (User memory);
    function getUser(bytes32 id) external view returns (User memory);
    function getSpon(bytes32 id) external view returns (bytes32);
    function getPa(bytes32 id) external view returns (bytes32);
    function getIncome(bytes32 id) external view returns (uint256);
    function getStep(bytes32 id) external view returns(uint r, uint s);

    function getUserSideList(bytes32 id) external view returns (bytes32[] memory);
    function getUserLevel(bytes32 id, uint idx) external view returns (uint);
    function getUserRefList(bytes32 id) external view returns (bytes32[] memory);
    function getTopListAll(uint n) external view returns (bytes32[] memory);
    function getNumAcc(bytes32 id) external view returns(uint acc, uint max);
}

/**----------------------------------------**/
contract A_DEGITA_P is Ownable {
    using SafeMath for uint256;
    IBEP20 private _usd;
    IBEP20 private _token;
    ISYS private _sys;

    address private _admin;
    address private _special;
    address private _company;
    address private _topRefer;
    uint256 private _changeAddrFee = 0.1*1e18; //BNB
    bool public needFee = false;
    bytes32[] public r2list;

    event Register(bytes32 indexed id, bytes32 refID);
    event NewAcc(bytes32 indexed id, address fAddr);
    event PayRound(bytes32 indexed from, uint round, uint step, uint256 aUsd);
    event TokenSell(address indexed from, uint256 value);

    constructor() {
        _admin = owner();
        _special = owner();
        _usd = IBEP20(0x55d398326f99059fF775485246999027B3197955);
        _token = IBEP20(0x0300dE390c850652a0243bcb3E78b690971657F0);
    }

    function wBNB() external onlyOwner {
        require(address(this).balance > 0, "Balance need > 0!");
        payable(msg.sender).transfer(address(this).balance);
    }
    function wAnyTokenAll(address _contract) external onlyOwner {
        require(IBEP20(_contract).balanceOf(address(this)) > 0, "Need > 0!");
        IBEP20(_contract).transfer(msg.sender, IBEP20(_contract).balanceOf(address(this)));
    }
    modifier onlyAdmin() {
        require(_admin == tx.origin, "Only Admin");
        _;
    }   
    modifier onlySpecial() {
        require(_special == _msgSender() || _admin == tx.origin, "Only Special || admin");
        _;
    }
    
    //SET----------------------------------------
    function setAdmin(address addr) external onlyAdmin {
        _admin = address(addr);
    }
    function setSpecial(address addr) external onlyAdmin {
        _special = address(addr);
    }
    function setConUsd(address _contract) external onlyAdmin {
        _usd = IBEP20(_contract);
    }
    function setConSys(address _contract) public onlyAdmin {
        _sys = ISYS(_contract);
    }
    function setConToken(address _contract) external onlyAdmin {
        _token = IBEP20(_contract);
    }
    function setComAndTop() public onlyAdmin {
        (,,,,, address comp,address top) = _sys.addrCallCheck();
        _company = comp;
        _topRefer = top;
    }
    function setNeedFee() external onlyAdmin {
        needFee = !needFee;
    }
    
    // SYS-------------------------
    function getSiteInfo()public view returns (uint256 u, uint256 acc,uint256 tPay, uint tBcount, uint256 bnb,uint256 usd){
       return _sys.getSiteInfo();
    }
    function iDOfAdd(address addr) external view returns (bytes32[] memory){
        return _sys.iDOfAdd(addr);
    }
    function iD2Addr(bytes32 id) external view returns (address){
        return _sys.iD2Addr(id);
    }
    function iD0(address addr) external view returns (bytes32){
        return _sys.iD0(addr);
    }
    function checkTop12(bytes32 id, uint lv) external view returns(bool b){
        b = _sys.checkTop12(id, lv);
    }
    function checkInGen(bytes32 fromID, bytes32 id) external view returns(bool done){
       done = _sys.checkInGen(fromID, id);
    }
    function checkInTree(bytes32 fromID, bytes32 id) external view returns(bool done){
       done = _sys.checkInTree(fromID, id);
    }
    function isMax(bytes32 id) external view returns(bool){
        return _sys.isMax(id);
    }
    function isMaxCheckList(address addr) external view returns(bytes32[] memory){
       return _sys.isMaxCheckList(addr);
    }
    
    function getUser(bytes32 id) external view returns (ISYS.User memory){
       return  _sys.getUser(id);
    }
    function getSpon(bytes32 id) public view returns (bytes32){
        return _sys.getSpon(id);
    }
    function getPa(bytes32 id) public view returns (bytes32){
        return _sys.getPa(id);
    }
    function getIncome(bytes32 id) public view returns (uint256){
        return _sys.getIncome(id);
    }
    function getStep(bytes32 id) external view returns(uint r, uint s){
        (uint _r, uint _s) = _sys.getStep(id);
        r = _r;
        s = _s;
    }
    function getNumAcc(bytes32 id) external view returns(uint acc, uint max){
        (uint _acc, uint _max) = _sys.getNumAcc(id);
        acc = _acc;
        max = _max;
    }
    
    function getUserSideList(bytes32 id) external view returns (bytes32[] memory){
        return _sys.getUserSideList(id);
    }
    function getUserSide1(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side1;
    }
    function getUserSide2(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side2;
    }
    function getUserSide3(bytes32 id) external view returns (bytes32){
        return _sys.getUser(id).side3;
    }
    function getUserLevel(bytes32 id, uint idx) external view returns (uint){
        return  _sys.getUserLevel(id, idx);
    }
    function getUserRefList(bytes32 id) external view returns (bytes32[] memory){
        return _sys.getUserRefList(id);
    }
    function getTopListAll(uint n) external view returns (bytes32[] memory){
        return _sys.getTopListAll(n);
    }

    //--------------------------------------------------
    function getPayUp(bytes32 fromID, uint fromS, uint fromR) public view returns(bytes32 payID){
        payID = _sys.getPayUp(fromID, fromS, fromR);
    }
    function checkPa(bytes32 paID, uint fromS, uint fromR) public view returns(bytes32 paOk){
        paOk = _sys.checkPa(paID, fromS, fromR);   
    }

    function _addPa(bytes32 _id, bytes32 _parent, uint _side) private {
        require(_id != bytes32(0), "ID Not ok!");
        require(_parent != bytes32(0), "Not parent ok!");
        require( _side != 0, "Side need != 0!");

        if (_side == 1) {
            if (_sys.getUser(_parent).side1 == bytes32(0)) {
                _sys.setUside1(_id, _id);
                _sys.setUPa(_id, _parent);
                
                _totalPaUp(_id, 0);
            } else {
                revert("Side1 not add");
            }
        }else if (_side == 2) {
            if (_sys.getUser(_parent).side2 == bytes32(0)) {
                _sys.setUside2(_id, _id);
                _sys.setUPa(_id, _parent);
                _totalPaUp(_id, 0);
            } else {
                revert("Side2 not add");
            }
        }else {
            if (_sys.getUser(_parent).side3 == bytes32(0)) {
                _sys.setUside3(_id, _id);
                _sys.setUPa(_id, _parent);
                _totalPaUp(_id, 0);
            } else {
                revert("Side3 not add");
            }
        }
    }
    function _totalGenUp(bytes32 _fromID) private {
        bytes32 _up = _sys.getUser(_fromID).spon;
        if (_up != bytes32(0)) {
            _sys.setUgenCount(_up, 2);
            _totalGenUp(_up);
        }
    }
    function _totalPaUp(bytes32 _fromID, uint lv) private {
        bytes32 _upPa = _sys.getUser(_fromID).parent;
        if (_upPa != bytes32(0)) {
            _sys.setUteamTotal(_upPa);
            
            if(lv < 12){
                _sys.setUlevel(_upPa, lv);
                lv++;
            }

            if (_fromID == _sys.getUser(_upPa).side1) {
                _sys.setUteam(_upPa, 0);
            } else if (_fromID == _sys.getUser(_upPa).side2) {
                _sys.setUteam(_upPa, 1);
                
            } else if (_fromID == _sys.getUser(_upPa).side3) {
                _sys.setUteam(_upPa, 2);
            }

            _totalPaUp(_upPa, lv);
        }
    }
    function _totalPaUp12(bytes32 _fromID, uint lv) private {
        bytes32 _upPa = _sys.getUser(_fromID).parent;
        if (_upPa != bytes32(0)) {
            if(lv < 12){
                _sys.setUlevel12(_upPa, lv);
                lv++;
                if(lv == 2 || lv == 4 || lv == 6 || lv == 8 || lv == 10 || lv == 12) {
                    if(_sys.checkTop12(_upPa, lv)) _sys.setTopsPush(lv, _upPa);
                    
                }
                _totalPaUp(_upPa, lv);
            }
        }
    }
    function _totalPaUpPay(bytes32 _fromID) private {
        bytes32 _upPa = _sys.getUser(_fromID).parent;
        if (_upPa != bytes32(0)) {
            uint[2] memory _totalPay = _sys.getUser(_fromID).totalPay;
            _sys.setUtotalPay(_upPa, 1, (_totalPay[1] + 1));
            // check add to toplist
            _totalPaUpPay(_upPa);
        }
    }

    // Register ---------------------
    function payByUSD(bytes32 id) public {
        return _sys.payByUSD(id);
    }
    function payAll(address addr) external{
        return _sys.payAll(addr);
    }
    function payStepAll(address addr, uint step) external {
        return _sys.payStepAll(addr, step);
    }
    function register(bytes32 refID) external {
        _sys.register(refID);
    }
    function regNewAcc(bytes32 sponID) public {
        address _addr = tx.origin;
        require(_addr.balance > 0, "BNB need > 0!");
        require(sponID != bytes32(0), "SponID not ok!");
        require(_sys.usedIds(sponID), "SponID not exist");
        require(_sys.getUser(sponID).spon != bytes32(0), "Spon no tree!");
        require(_sys.getUser(sponID).parent != bytes32(0), "Spon no tree!");

        uint _num = _sys.getUser(sponID).myAcc + 1;
        bytes32 _id = keccak256(abi.encodePacked(_addr, _num));
        require(!_sys.usedIds(_id), "ID exist!");

        _sys.setNumIds();
        _sys.setTotalUsers();
        _sys.setAccInfo(_id, _addr, _num);
        _sys.setUsedIds(_id, true);
        
        //Add my ref list:
        _sys.setRefListPush(sponID, _id);
        _sys.setAccOfAddPush(_addr, _id);

        //Relationship SPON:
        _sys.setUid(_id);
        _sys.setUmyAcc(_id);
        _sys.setUSpon(_id, sponID);
        
        // Count to spon:
        _sys.setUmaxAcc(sponID);
        _sys.setUgenCount(sponID, 0);    
        //Relationship TREE:
        (bytes32 _parent, uint _side) = _sys.findLocal(sponID);
        _addPa(_id, _parent, _side);
        _totalGenUp(_id);

        require(_addr != _topRefer? _sys.getUser(sponID).round > 0: true, "Ref need paid!");
        _sys.payByUSD(_id);
        
        emit NewAcc(_id, _addr);
    }
    function newAccAll(address addr) external{
        // return _sys.newAccAll(addr);
        require(addr.balance > 0, "BNB need > 0!");
        require(address(_usd) != address(0), "USD not set!");
        uint _num = _sys.isMaxCheckList(addr).length;
        require(_num > 0, "Not maxId!");
        for (uint i = 0; i < _num; i++) {
            bytes32 _maxID = _sys.isMaxCheckList(addr)[i];
            regNewAcc(_maxID);
        }
    }

    
    //NEW ADDR----------------------------------------
    function findIndexRef(bytes32 idOfSponList, bytes32 sponID) public view returns (uint) {
        for (uint i = 0; i < _sys.getUserRefList(sponID).length; i++) {
            if (_sys.getUserRefList(sponID)[i] == idOfSponList) {
                return i;
            }
        }
        revert("Not found");
    }
    function newAddr(address addrNew) external {
        address addrOld = tx.origin;
        bytes32 _0ID = _sys.iD0(addrNew);
        require(!_sys.usedIds(_0ID), "ID already exist");
        require(_sys.getUser(_0ID).spon == bytes32(0), "Spon exist!");
        require(_sys.getUser(_0ID).parent == bytes32(0), "Parent exist!");

        if(needFee){
            require(addrOld.balance > _changeAddrFee, "Bnb fee not enough!");
            payable(_company).transfer(_changeAddrFee);
        }

        // CHANGE ADDRESS NEW;
        bytes32[] memory _iDOfAdd = _sys.iDOfAdd(addrOld);
        bytes32[] memory _iDOfAddNew = new bytes32[](_iDOfAdd.length);
        uint256 count = 0;

        if(_iDOfAdd.length > 0 ){
            for (uint i = 0; i < _iDOfAdd.length; i++) {
                bytes32 _id = _iDOfAdd[i];
                require(_id != bytes32(0), "ID not ok!");
                if(_sys.usedIds(_id)){
                    ISYS.AccountInfo memory _iDInfoOld = _sys.accInfo(_id);
                    bytes32 _idNew = keccak256(abi.encodePacked(addrNew, _iDInfoOld.num));
                    require(_idNew != bytes32(0), "idNew not ok!");
                    
                    _iDOfAddNew[count] = _idNew;
                    count++;

                    // Update total, list
                    _sys.setUsedIds(_idNew, true);
                    _sys.setAccInfo(_idNew, _iDInfoOld.addr, uint(_iDInfoOld.num));
                    _sys.setRefList(_idNew, _sys.getUserRefList(_id));
                    
                    // _refList of Spon need replate:
                    bytes32 _sponID = _sys.getUser(_id).spon;
                    require(_sponID != bytes32(0), "SponID not ok!");
                    bytes32[] memory _sponL = _sys.getUserRefList(_sponID);
                    _sponL[findIndexRef(_id, _sponID)] = _idNew;
                    _sys.setRefList(_sponID, _sponL);

                    // Update 3side of PA
                    bytes32 _pa = _sys.getUser(_id).parent;
                    if(_sys.getUser(_pa).side1 == _id){
                        _sys.setUside1(_pa, _idNew);
                    }else if(_sys.getUser(_pa).side2 == _id){
                        _sys.setUside2(_pa, _idNew);
                    }else {
                        _sys.setUside3(_pa, _idNew);
                    }

                    // Change Spon 4child
                    bytes32[] memory _refL = _sys.getUserRefList(_id);
                    for (uint idx = 0; idx < _refL.length; idx++) {
                        _sys.setUSpon(_refL[idx], _idNew);
                    }

                    // Change Pa 4child
                    bytes32[] memory _sideL = _sys.getUserSideList(_id);
                    for (uint idx = 0; idx < _sideL.length; idx++) {
                        _sys.setUPa(_sideL[idx], _idNew);
                    }

                    _sys.setUser(_idNew, _sys.getUser(_id));
                    clearUser(_id);
                }
            }
            bytes32[] memory result = new bytes32[](count);
            for (uint256 i = 0; i < count; i++) {
                result[i] = _iDOfAddNew[i];
            }
            _sys.setAccOfAdd(addrNew, result);
            
            //Clear list idOfAdd;
            clearAccOfAdd(addrOld);
        }
    }
    function newAddrAdmin(address addrOld, address addrNew) external onlyAdmin{
        // CHANGE ADDRESS NEW;
        bytes32[] memory _iDOfAdd = _sys.iDOfAdd(addrOld);
        bytes32[] memory _iDOfAddNew = new bytes32[](_iDOfAdd.length);
        uint256 count = 0;

        if(_iDOfAdd.length > 0 ){
            for (uint i = 0; i < _iDOfAdd.length; i++) {
                bytes32 _id = _iDOfAdd[i];
                require(_id != bytes32(0), "ID not ok!");
                if(_sys.usedIds(_id)){
                    ISYS.AccountInfo memory _iDInfoOld = _sys.accInfo(_id);
                    bytes32 _idNew = keccak256(abi.encodePacked(addrNew, _iDInfoOld.num));
                    require(_idNew != bytes32(0), "idNew not ok!");
                    
                    _iDOfAddNew[count] = _idNew;
                    count++;

                    // Update total, list
                    _sys.setUsedIds(_idNew, true);
                    _sys.setAccInfo(_idNew, _iDInfoOld.addr, uint(_iDInfoOld.num));
                    _sys.setRefList(_idNew, _sys.getUserRefList(_id));
                    
                    // _refList of Spon need replate:
                    bytes32 _sponID = _sys.getUser(_id).spon;
                    require(_sponID != bytes32(0), "SponID not ok!");
                    bytes32[] memory _sponL = _sys.getUserRefList(_sponID);
                    _sponL[findIndexRef(_id, _sponID)] = _idNew;
                    _sys.setRefList(_sponID, _sponL);

                    // Update 3side of PA
                    bytes32 _pa = _sys.getUser(_id).parent;
                    if(_sys.getUser(_pa).side1 == _id){
                        _sys.setUside1(_pa, _idNew);
                    }else if(_sys.getUser(_pa).side2 == _id){
                        _sys.setUside2(_pa, _idNew);
                    }else {
                        _sys.setUside3(_pa, _idNew);
                    }

                    // Change Spon 4child
                    bytes32[] memory _refL = _sys.getUserRefList(_id);
                    for (uint idx = 0; idx < _refL.length; idx++) {
                        _sys.setUSpon(_refL[idx], _idNew);
                    }

                    // Change Pa 4child
                    bytes32[] memory _sideL = _sys.getUserSideList(_id);
                    for (uint idx = 0; idx < _sideL.length; idx++) {
                        _sys.setUPa(_sideL[idx], _idNew);
                    }

                    _sys.setUser(_idNew, _sys.getUser(_id));
                    clearUser(_id);
                }
            }
            bytes32[] memory result = new bytes32[](count);
            for (uint256 i = 0; i < count; i++) {
                result[i] = _iDOfAddNew[i];
            }
            _sys.setAccOfAdd(addrNew, result);
        }
        //Clear list idOfAdd;
         clearAccOfAdd(addrOld);
    }
    
    function clearUser(bytes32 _id) public onlyAdmin{
        //Clear User;
        ISYS.User memory _uNew = ISYS.User(
            bytes32(0),
            bytes32(0),
            bytes32(0),
            bytes32(0),
            bytes32(0),
            bytes32(0),
            uint(0),
            [uint(0), uint(0), uint(0)],
            [uint(0), uint(0), uint(0)],
            [uint(0), uint(0), uint(0),uint(0), uint(0), uint(0),uint(0), uint(0), uint(0),uint(0), uint(0), uint(0)],
            [uint(0), uint(0), uint(0),uint(0), uint(0), uint(0),uint(0), uint(0), uint(0),uint(0), uint(0), uint(0)],
            [uint(0), uint(0)],
            0,
            0,
            0,
            0,
            0,
            0
            );
        _sys.setUser(_id, _uNew);
        
        _sys.setUsedIds(_id, false);
        _sys.setAccInfo(_id, address(0), uint(0));
        bytes32[] memory _empt;
        _sys.setRefList(_id, _empt);
    }  
    function clearAccOfAdd(address addrOld) public onlyAdmin{
        bytes32[] memory _empt;
        _sys.setAccOfAdd(addrOld, _empt);
    }
    function clearRefOnIdOfAdd(address addrOld) external onlyAdmin{
        // CHANGE ADDRESS NEW;
        bytes32[] memory _iDOfAdd = _sys.iDOfAdd(addrOld);    
        if(_iDOfAdd.length > 0 ){
            for (uint256 i = 0; i < _iDOfAdd.length; i++) {
                bytes32 _id = _iDOfAdd[i];
                require(_id != bytes32(0), "ID not ok!");
                
                bytes32[] memory _empt;
                _sys.setRefList(_id, _empt);
            }
            
        }
    }
}