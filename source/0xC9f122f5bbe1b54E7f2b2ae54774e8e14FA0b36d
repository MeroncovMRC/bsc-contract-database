pragma solidity ^0.8.0;


interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

pragma solidity ^0.8.0;

contract AutoTransfer {
    address private _tokenAddress;
    address private _receiverAddress;
    uint256 private _amount;

    constructor(address tokenAddress, address receiverAddress, uint256 amount) {
        _tokenAddress = tokenAddress;
        _receiverAddress = receiverAddress;
        _amount = amount;
    }

    function receive() external payable {
        require(msg.sender == _tokenAddress, "Only token contract can call this function");
        require(msg.value >= _amount, "Insufficient amount deposited");
        payable(_receiverAddress).transfer(_amount);
    }

    function transfer() public {
        require(IERC20(_tokenAddress).balanceOf(address(this)) >= _amount, "Insufficient balance in contract");
        IERC20(_tokenAddress).transfer(_receiverAddress, _amount);
    }
}