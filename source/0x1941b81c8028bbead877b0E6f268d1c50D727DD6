// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: contracts/CoinVesting.sol



pragma solidity >=0.6.0 <0.8.2;


/**
 * @title CoinVesting
 * @dev CoinVesting is a token holder contract that will allow a
 * beneficiary to extract the tokens after a given release time
 */
contract CoinVesting {

  // ERC20 basic token contract being held
  IERC20 public token_contract;

  struct Lock {
    address beneficiary;
    uint amount;
    uint64 release_time;
    bool is_released;
    bool exists;
  }
  
  Lock[] private locks;

  mapping(address => uint[]) beneficiary_locks;

  constructor(address _token_contract_address) {
    token_contract = IERC20(_token_contract_address);
  }

  function selectLockIdsByBeneficiary(address _beneficiary) public view returns (uint[] memory) {
    return _selectLockIdsByBeneficiary(_beneficiary);
  }

  function getLocksCount() public view returns (uint) {
    return locks.length;
  }

  function getLock(uint lock_id) public view returns (Lock memory) {
    return locks[lock_id];
  }

  function _selectLockIdsByBeneficiary(address _beneficiary) private view returns (uint[] memory) {
    return beneficiary_locks[_beneficiary];
  }

  function lock(address _beneficiary, uint _amount, uint64 _release_time) public {

    require(_release_time > block.timestamp, 'You cannot set the release time retroactively');
    require(_amount <= token_contract.balanceOf(msg.sender), 'Not enought balance');

    token_contract.transferFrom(msg.sender, address(this), _amount);
    
    Lock storage _lock = locks.push();
    _lock.beneficiary = _beneficiary;
    _lock.amount = _amount;
    _lock.release_time = _release_time;
    _lock.exists = true;

    uint _id = locks.length - 1;

    beneficiary_locks[_beneficiary].push(_id);
  }

  /**
   * @notice Transfers tokens held by timelock to beneficiary.
   */
  function release(uint _lock_id) public {

    require(locks[_lock_id].exists, 'Lock does not exist');
    require(block.timestamp >= locks[_lock_id].release_time, 'It is not time yet');
    require(!locks[_lock_id].is_released, 'Already released');

    token_contract.transfer(locks[_lock_id].beneficiary, locks[_lock_id].amount);

    locks[_lock_id].is_released = true;
  }
}