// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolEvents.sol


pragma solidity >=0.5.0;

/// @title Events emitted by a pool
/// @notice Contains all events emitted by the pool
interface IPancakeV3PoolEvents {
    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool
    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize
    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96
    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool
    event Initialize(uint160 sqrtPriceX96, int24 tick);

    /// @notice Emitted when liquidity is minted for a given position
    /// @param sender The address that minted the liquidity
    /// @param owner The owner of the position and recipient of any minted liquidity
    /// @param tickLower The lower tick of the position
    /// @param tickUpper The upper tick of the position
    /// @param amount The amount of liquidity minted to the position range
    /// @param amount0 How much token0 was required for the minted liquidity
    /// @param amount1 How much token1 was required for the minted liquidity
    event Mint(
        address sender,
        address indexed owner,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount,
        uint256 amount0,
        uint256 amount1
    );

    /// @notice Emitted when fees are collected by the owner of a position
    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees
    /// @param owner The owner of the position for which fees are collected
    /// @param tickLower The lower tick of the position
    /// @param tickUpper The upper tick of the position
    /// @param amount0 The amount of token0 fees collected
    /// @param amount1 The amount of token1 fees collected
    event Collect(
        address indexed owner,
        address recipient,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount0,
        uint128 amount1
    );

    /// @notice Emitted when a position's liquidity is removed
    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect
    /// @param owner The owner of the position for which liquidity is removed
    /// @param tickLower The lower tick of the position
    /// @param tickUpper The upper tick of the position
    /// @param amount The amount of liquidity to remove
    /// @param amount0 The amount of token0 withdrawn
    /// @param amount1 The amount of token1 withdrawn
    event Burn(
        address indexed owner,
        int24 indexed tickLower,
        int24 indexed tickUpper,
        uint128 amount,
        uint256 amount0,
        uint256 amount1
    );

    /// @notice Emitted by the pool for any swaps between token0 and token1
    /// @param sender The address that initiated the swap call, and that received the callback
    /// @param recipient The address that received the output of the swap
    /// @param amount0 The delta of the token0 balance of the pool
    /// @param amount1 The delta of the token1 balance of the pool
    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96
    /// @param liquidity The liquidity of the pool after the swap
    /// @param tick The log base 1.0001 of price of the pool after the swap
    /// @param protocolFeesToken0 The protocol fee of token0 in the swap
    /// @param protocolFeesToken1 The protocol fee of token1 in the swap
    event Swap(
        address indexed sender,
        address indexed recipient,
        int256 amount0,
        int256 amount1,
        uint160 sqrtPriceX96,
        uint128 liquidity,
        int24 tick,
        uint128 protocolFeesToken0,
        uint128 protocolFeesToken1
    );

    /// @notice Emitted by the pool for any flashes of token0/token1
    /// @param sender The address that initiated the swap call, and that received the callback
    /// @param recipient The address that received the tokens from flash
    /// @param amount0 The amount of token0 that was flashed
    /// @param amount1 The amount of token1 that was flashed
    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee
    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee
    event Flash(
        address indexed sender,
        address indexed recipient,
        uint256 amount0,
        uint256 amount1,
        uint256 paid0,
        uint256 paid1
    );

    /// @notice Emitted by the pool for increases to the number of observations that can be stored
    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index
    /// just before a mint/swap/burn.
    /// @param observationCardinalityNextOld The previous value of the next observation cardinality
    /// @param observationCardinalityNextNew The updated value of the next observation cardinality
    event IncreaseObservationCardinalityNext(
        uint16 observationCardinalityNextOld,
        uint16 observationCardinalityNextNew
    );

    /// @notice Emitted when the protocol fee is changed by the pool
    /// @param feeProtocol0Old The previous value of the token0 protocol fee
    /// @param feeProtocol1Old The previous value of the token1 protocol fee
    /// @param feeProtocol0New The updated value of the token0 protocol fee
    /// @param feeProtocol1New The updated value of the token1 protocol fee
    event SetFeeProtocol(
        uint32 feeProtocol0Old,
        uint32 feeProtocol1Old,
        uint32 feeProtocol0New,
        uint32 feeProtocol1New
    );

    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner
    /// @param sender The address that collects the protocol fees
    /// @param recipient The address that receives the collected protocol fees
    /// @param amount0 The amount of token0 protocol fees that is withdrawn
    /// @param amount0 The amount of token1 protocol fees that is withdrawn
    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
}

// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolOwnerActions.sol


pragma solidity >=0.5.0;

/// @title Permissioned pool actions
/// @notice Contains pool methods that may only be called by the factory owner
interface IPancakeV3PoolOwnerActions {
    /// @notice Set the denominator of the protocol's % share of the fees
    /// @param feeProtocol0 new protocol fee for token0 of the pool
    /// @param feeProtocol1 new protocol fee for token1 of the pool
    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;

    /// @notice Collect the protocol fee accrued to the pool
    /// @param recipient The address to which collected protocol fees should be sent
    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1
    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0
    /// @return amount0 The protocol fee collected in token0
    /// @return amount1 The protocol fee collected in token1
    function collectProtocol(
        address recipient,
        uint128 amount0Requested,
        uint128 amount1Requested
    ) external returns (uint128 amount0, uint128 amount1);

    /// @notice Set the LM pool to enable liquidity mining
    function setLmPool(address lmPool) external;
}

// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolActions.sol


pragma solidity >=0.5.0;

/// @title Permissionless pool actions
/// @notice Contains pool methods that can be called by anyone
interface IPancakeV3PoolActions {
    /// @notice Sets the initial price for the pool
    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value
    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96
    function initialize(uint160 sqrtPriceX96) external;

    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position
    /// @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback
    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends
    /// on tickLower, tickUpper, the amount of liquidity, and the current price.
    /// @param recipient The address for which the liquidity will be created
    /// @param tickLower The lower tick of the position in which to add liquidity
    /// @param tickUpper The upper tick of the position in which to add liquidity
    /// @param amount The amount of liquidity to mint
    /// @param data Any data that should be passed through to the callback
    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback
    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback
    function mint(
        address recipient,
        int24 tickLower,
        int24 tickUpper,
        uint128 amount,
        bytes calldata data
    ) external returns (uint256 amount0, uint256 amount1);

    /// @notice Collects tokens owed to a position
    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.
    /// @param recipient The address which should receive the fees collected
    /// @param tickLower The lower tick of the position for which to collect fees
    /// @param tickUpper The upper tick of the position for which to collect fees
    /// @param amount0Requested How much token0 should be withdrawn from the fees owed
    /// @param amount1Requested How much token1 should be withdrawn from the fees owed
    /// @return amount0 The amount of fees collected in token0
    /// @return amount1 The amount of fees collected in token1
    function collect(
        address recipient,
        int24 tickLower,
        int24 tickUpper,
        uint128 amount0Requested,
        uint128 amount1Requested
    ) external returns (uint128 amount0, uint128 amount1);

    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position
    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0
    /// @dev Fees must be collected separately via a call to #collect
    /// @param tickLower The lower tick of the position for which to burn liquidity
    /// @param tickUpper The upper tick of the position for which to burn liquidity
    /// @param amount How much liquidity to burn
    /// @return amount0 The amount of token0 sent to the recipient
    /// @return amount1 The amount of token1 sent to the recipient
    function burn(
        int24 tickLower,
        int24 tickUpper,
        uint128 amount
    ) external returns (uint256 amount0, uint256 amount1);

    /// @notice Swap token0 for token1, or token1 for token0
    /// @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback
    /// @param recipient The address to receive the output of the swap
    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0
    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this
    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap
    /// @param data Any data to be passed through to the callback
    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive
    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive
    function swap(
        address recipient,
        bool zeroForOne,
        int256 amountSpecified,
        uint160 sqrtPriceLimitX96,
        bytes calldata data
    ) external returns (int256 amount0, int256 amount1);

    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback
    /// @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback
    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling
    /// with 0 amount{0,1} and sending the donation amount(s) from the callback
    /// @param recipient The address which will receive the token0 and token1 amounts
    /// @param amount0 The amount of token0 to send
    /// @param amount1 The amount of token1 to send
    /// @param data Any data to be passed through to the callback
    function flash(
        address recipient,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external;

    /// @notice Increase the maximum number of price and liquidity observations that this pool will store
    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to
    /// the input observationCardinalityNext.
    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store
    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
}

// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolDerivedState.sol


pragma solidity >=0.5.0;

/// @title Pool state that is not stored
/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the
/// blockchain. The functions here may have variable gas costs.
interface IPancakeV3PoolDerivedState {
    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing
    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,
    /// you must call it with secondsAgos = [3600, 0].
    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in
    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp
    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block
    /// timestamp
    function observe(uint32[] calldata secondsAgos)
        external
        view
        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);

    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.
    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first
    /// snapshot is taken and the second snapshot is taken.
    /// @param tickLower The lower tick of the range
    /// @param tickUpper The upper tick of the range
    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range
    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range
    /// @return secondsInside The snapshot of seconds per liquidity for the range
    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)
        external
        view
        returns (
            int56 tickCumulativeInside,
            uint160 secondsPerLiquidityInsideX128,
            uint32 secondsInside
        );
}

// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolState.sol


pragma solidity >=0.5.0;

/// @title Pool state that can change
/// @notice These methods compose the pool's state, and can change with any frequency including multiple times
/// per transaction
interface IPancakeV3PoolState {
    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas
    /// when accessed externally.
    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value
    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.
    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick
    /// boundary.
    /// observationIndex The index of the last oracle observation that was written,
    /// observationCardinality The current maximum number of observations stored in the pool,
    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.
    /// feeProtocol The protocol fee for both tokens of the pool.
    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0
    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.
    /// unlocked Whether the pool is currently locked to reentrancy
    function slot0()
        external
        view
        returns (
            uint160 sqrtPriceX96,
            int24 tick,
            uint16 observationIndex,
            uint16 observationCardinality,
            uint16 observationCardinalityNext,
            uint32 feeProtocol,
            bool unlocked
        );

    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
    /// @dev This value can overflow the uint256
    function feeGrowthGlobal0X128() external view returns (uint256);

    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
    /// @dev This value can overflow the uint256
    function feeGrowthGlobal1X128() external view returns (uint256);

    /// @notice The amounts of token0 and token1 that are owed to the protocol
    /// @dev Protocol fees will never exceed uint128 max in either token
    function protocolFees() external view returns (uint128 token0, uint128 token1);

    /// @notice The currently in range liquidity available to the pool
    /// @dev This value has no relationship to the total liquidity across all ticks
    function liquidity() external view returns (uint128);

    /// @notice Look up information about a specific tick in the pool
    /// @param tick The tick to look up
    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or
    /// tick upper,
    /// liquidityNet how much liquidity changes when the pool price crosses the tick,
    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,
    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,
    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick
    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,
    /// secondsOutside the seconds spent on the other side of the tick from the current tick,
    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.
    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.
    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for
    /// a specific position.
    function ticks(int24 tick)
        external
        view
        returns (
            uint128 liquidityGross,
            int128 liquidityNet,
            uint256 feeGrowthOutside0X128,
            uint256 feeGrowthOutside1X128,
            int56 tickCumulativeOutside,
            uint160 secondsPerLiquidityOutsideX128,
            uint32 secondsOutside,
            bool initialized
        );

    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information
    function tickBitmap(int16 wordPosition) external view returns (uint256);

    /// @notice Returns the information about a position by the position's key
    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper
    /// @return _liquidity The amount of liquidity in the position,
    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,
    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,
    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,
    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke
    function positions(bytes32 key)
        external
        view
        returns (
            uint128 _liquidity,
            uint256 feeGrowthInside0LastX128,
            uint256 feeGrowthInside1LastX128,
            uint128 tokensOwed0,
            uint128 tokensOwed1
        );

    /// @notice Returns data about a specific observation index
    /// @param index The element of the observations array to fetch
    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time
    /// ago, rather than at a specific index in the array.
    /// @return blockTimestamp The timestamp of the observation,
    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,
    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,
    /// Returns initialized whether the observation has been initialized and the values are safe to use
    function observations(uint256 index)
        external
        view
        returns (
            uint32 blockTimestamp,
            int56 tickCumulative,
            uint160 secondsPerLiquidityCumulativeX128,
            bool initialized
        );
}

// File: contracts/interfaces pancake factory v3/pool/IPancakeV3PoolImmutables.sol


pragma solidity >=0.5.0;

/// @title Pool state that never changes
/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values
interface IPancakeV3PoolImmutables {
    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface
    /// @return The contract address
    function factory() external view returns (address);

    /// @notice The first of the two tokens of the pool, sorted by address
    /// @return The token contract address
    function token0() external view returns (address);

    /// @notice The second of the two tokens of the pool, sorted by address
    /// @return The token contract address
    function token1() external view returns (address);

    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6
    /// @return The fee
    function fee() external view returns (uint24);

    /// @notice The pool tick spacing
    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive
    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...
    /// This value is an int24 to avoid casting even though it is always positive.
    /// @return The tick spacing
    function tickSpacing() external view returns (int24);

    /// @notice The maximum amount of position liquidity that can use any tick in the range
    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and
    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
    /// @return The max amount of liquidity per tick
    function maxLiquidityPerTick() external view returns (uint128);
}

// File: contracts/interfaces pancake factory v3/IPancakeV3Pool.sol


pragma solidity >=0.5.0;







/// @title The interface for a PancakeSwap V3 Pool
/// @notice A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform
/// to the ERC20 specification
/// @dev The pool interface is broken up into many smaller pieces
interface IPancakeV3Pool is
    IPancakeV3PoolImmutables,
    IPancakeV3PoolState,
    IPancakeV3PoolDerivedState,
    IPancakeV3PoolActions,
    IPancakeV3PoolOwnerActions,
    IPancakeV3PoolEvents
{

}

// File: contracts/library/Address.sol



pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value:amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value:value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.3._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.3._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
// File: contracts/library/SafeMath.sol



pragma solidity ^0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     *
     * _Available since v2.4.0._
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     *
     * _Available since v2.4.0._
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

}
// File: contracts/interface/IERC20.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see {ERC20Detailed}.
 */
interface IERC20 {
    function decimals() external view returns (uint8);
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

      /**
     * EXTERNAL FUNCTION
     *
     * @dev change token name
     * @param _name token name
     * @param _symbol token symbol
     *
     */
    function changeTokenName(string calldata _name, string calldata _symbol)external;

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// File: contracts/library/SafeErc20.sol



pragma solidity ^0.8.0;





/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}
// File: contracts/library/SafeTransfer.sol



pragma solidity ^0.8.0;


contract SafeTransfer{

    using SafeERC20 for IERC20;
    event Redeem(address indexed recieptor,address indexed token,uint256 amount);

    /**
     * @notice  transfers money to the pool
     * @dev function to transfer
     * @param token of address
     * @param amount of amount
     * @return return amount
     */
    function getPayableAmount(address token, address from, address to, uint256 amount) internal returns (uint256) {
        if (token == address(0)){
            amount = msg.value;
        }else if (amount > 0){
            IERC20 oToken = IERC20(token);
            oToken.safeTransferFrom(from, to, amount);
        }
        return amount;
    }

    /**
     * @dev An auxiliary foundation which transter amount stake coins to recieptor.
     * @param recieptor account.
     * @param token address
     * @param amount redeem amount.
     */
    function _redeem(address payable recieptor,address token,uint256 amount) internal{
        if (token == address(0)){
            recieptor.transfer(amount);
        }else{
            IERC20 oToken = IERC20(token);
            oToken.safeTransfer(recieptor,amount);
        }
        emit Redeem(recieptor,token,amount);
    }
}
// File: @chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol


pragma solidity ^0.8.0;

interface AutomationCompatibleInterface {
  /**
   * @notice method that is simulated by the keepers to see if any work actually
   * needs to be performed. This method does does not actually need to be
   * executable, and since it is only ever simulated it can consume lots of gas.
   * @dev To ensure that it is never called, you may want to add the
   * cannotExecute modifier from KeeperBase to your implementation of this
   * method.
   * @param checkData specified in the upkeep registration so it is always the
   * same for a registered upkeep. This can easily be broken down into specific
   * arguments using `abi.decode`, so multiple upkeeps can be registered on the
   * same contract and easily differentiated by the contract.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with, if
   * upkeep is needed. If you would like to encode data to decode later, try
   * `abi.encode`.
   */
  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);

  /**
   * @notice method that is actually executed by the keepers, via the registry.
   * The data returned by the checkUpkeep simulation will be passed into
   * this method to actually be executed.
   * @dev The input to this method should not be trusted, and the caller of the
   * method should not even be restricted to any single registry. Anyone should
   * be able call it, and the input should be validated, there is no guarantee
   * that the data passed in is the performData returned from checkUpkeep. This
   * could happen due to malicious keepers, racing keepers, or simply a state
   * change while the performUpkeep transaction is waiting for confirmation.
   * Always validate the data passed in.
   * @param performData is the data which was passed back from the checkData
   * simulation. If it is encoded, it can easily be decoded into other types by
   * calling `abi.decode`. This data should not be trusted, and should be
   * validated against the contract's current state.
   */
  function performUpkeep(bytes calldata performData) external;
}

// File: @chainlink/contracts/src/v0.8/AutomationBase.sol


pragma solidity ^0.8.0;

contract AutomationBase {
  error OnlySimulatedBackend();

  /**
   * @notice method that allows it to be simulated via eth_call by checking that
   * the sender is the zero address.
   */
  function preventExecution() internal view {
    if (tx.origin != address(0)) {
      revert OnlySimulatedBackend();
    }
  }

  /**
   * @notice modifier that allows it to be simulated via eth_call by checking
   * that the sender is the zero address.
   */
  modifier cannotExecute() {
    preventExecution();
    _;
  }
}

// File: @chainlink/contracts/src/v0.8/AutomationCompatible.sol


pragma solidity ^0.8.0;



abstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/BuddyDao.sol


pragma solidity ^0.8.0;








contract BuddyDao is Ownable, Pausable, ReentrancyGuard, SafeTransfer, AutomationCompatibleInterface {

    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    uint256 public TimeInterval;
    // Initial time per timing
    uint256 public StartTimeInterval;

    // Monthly fee rate
    uint256 public ServiceFee;
    // todo: not enabled
    address public ServiceFeeAddress;
    // Max Annual Rate or Monthly Interest Rate，Default is 100%
    uint256 public MaxFixedRate = 1e18;
    uint256 constant baseDecimal = 1e18;
    // Default is Base Years APR
    uint256 public baseYearOrMonth = 365 days;

    address constant USDTAddress = 0x55d398326f99059fF775485246999027B3197955;
    address constant BDYAddress = 0x8E062E7f7e95b9b51519a6f47C28F260ab1064e4;
    address constant PancakePairAddress = 0x2e9d6CfB8F0F414055832d104078d5708Db07341;

    // lend info
    struct Lender {
        // approve address
        address Address;
        address Token;
        uint256 FixedRate;
        uint256 CreditLine;
        uint256 Amount;
        //string alias; comment out for now to save gas fee
        // Whether to completely deauthorize
        bool isCancel;
    }

    // borrower info
    struct Borrower {
        address Creditors;
        address Token;
        uint256 FixedRate;
        uint256 CreditLine;
        uint256 Amount;
        //string alias; comment out for now to save gas fee
        // Whether to completely deauthorize
        bool isCancel;
    }


    // total borrower info
    address[] public totalBorrower;
    mapping(address => bool) public isTotalBorrower;

    mapping(address =>mapping(address => bool)) public BorrowerBool;
    mapping(address => address[]) public BorrowerArrary;

    mapping(address => mapping(address => mapping(uint256 => bool))) public TotalBorrowerBool;
    mapping(address => mapping(address => uint256[])) public TotalBorrowerIndexArrary;


    // Lender homepage data
    mapping(address => mapping(address => Lender[])) public LenderData;
    // Borrower homepage data
    mapping(address => mapping(address => Borrower[]))  public BorrowerData;

    // lend info
    mapping (address => address[]) public LenderNumber;
    // borrower info
    mapping (address => address[]) public BorrowerNumber;

    // key has been added or not
    mapping (address => mapping(address => bool)) public LenderIsBool;
    mapping (address => mapping(address => bool)) public BorrowerIsBool;



    // log
    event SetBaseUnit(uint256 _oldBase, uint256 _newBase);
    event SetTimeInterval(uint256 _oldTimeInternal, uint256 _newTimeInternal);
    event SetServiceFee(uint256 _old, uint256 _new);
    event SetServiceFeeAddress(address _oldAddress, address _newAddress);
    event SetMaxFixedRate(uint256 _oldFixedRate, uint256 _newFixedRate);
    event Trust(address indexed _address, address _token, uint256 indexed  _fixedRate, uint256 indexed _amount);
    event ReduceTrust(address _approveAddress, uint256 _index, uint256 _cancelAmount);
    event WithdrawAssets(address _lendAddress, uint256 _index, uint256 _borrowerAmount);
    event Payment(address _lendAddress, uint256 _index, uint256 _payAmount);


    constructor (uint256 _serviceFee, address _serviceFeeAddress, uint256 _maxFixedRate) {
        require(_serviceFee != 0, "serviceFee must be a positive number");
        require(_serviceFee <= MaxFixedRate, "Cannot exceed the maximum interest rate");
        ServiceFeeAddress = _serviceFeeAddress;
        MaxFixedRate = _maxFixedRate;
        ServiceFee = _serviceFee;
        StartTimeInterval = block.timestamp;
    }

    function setBaseUnit(uint256 _newBaseUnit) external onlyOwner {
        require(_newBaseUnit > 0, "New base uint must be great 0");
        emit SetBaseUnit(baseYearOrMonth, _newBaseUnit);
        baseYearOrMonth = _newBaseUnit;
    }

    function setTimeInterval(uint256 _newTimeInterval) external onlyOwner {
        require(_newTimeInterval > 0, "New Time Interval must be great 0");
        emit SetTimeInterval(TimeInterval, _newTimeInterval);
        TimeInterval = _newTimeInterval;
    }


    function setServiceFee(uint256 _serviceFee) external onlyOwner {
        require(_serviceFee !=0, "serviceFee must be a positive number");
        require(_serviceFee <= MaxFixedRate, "Cannot exceed the maximum interest rate");
        emit SetServiceFee(ServiceFee, _serviceFee);
        ServiceFee = _serviceFee;
    }

    function setServiceFeeAddress(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "serviceFeeAddress is not a zero address");
        emit SetServiceFeeAddress(ServiceFeeAddress, _newAddress);
        ServiceFeeAddress = _newAddress;
    }

    function setMaxFixedRate(uint256 _maxFixedRate) external onlyOwner {
        require(_maxFixedRate >= 0, "maxFixedRate must be greater than or equal to 0");
        emit SetMaxFixedRate(MaxFixedRate, _maxFixedRate);
        MaxFixedRate = _maxFixedRate;
    }


    // Get Lender Info
    function GetLenderAddressLengeth(address _lenderAddress) public view returns(uint256) {
        uint256 lenLender = (LenderNumber[_lenderAddress]).length;
        return lenLender;
    }

    // Get Lender Address
    function GetLenderAddress(address _lenderAddress) public view returns(address[] memory){
        return LenderNumber[_lenderAddress];
    }

    // Get Lends Homepage Data
    function GetLenderData(address _lenderAddress, address _approveAddress) public view returns (Lender[] memory ) {
        Lender[] memory lenderAddressData = LenderData[_lenderAddress][_approveAddress];
        return lenderAddressData;
    }
    // Get Lender Index Info
    function GetLenderIndexData(address _lenderAddress, address _approveAddress, uint256 _index) public view returns (Lender memory) {
        Lender memory lenderAddressData = LenderData[_lenderAddress][_approveAddress][_index];
        return lenderAddressData;
    }


    // Get Borrower Info
    function GetBorrowerAddressLengeth(address _borrowerAddress) public view returns(uint256) {
        uint256 lenBorrower = (BorrowerNumber[_borrowerAddress]).length;
        return lenBorrower;
    }

    // Get Borrower Address
    function GetBorrowerAddress(address _borrowerAddress) public view returns(address[] memory) {
        return BorrowerNumber[_borrowerAddress];
    }

    // Get Borrower Homepage Data
    function GetBorrowerData(address _borrowerAddress, address _creditors) public view returns (Borrower[] memory) {
        Borrower[] memory borrowerAddressData = BorrowerData[_borrowerAddress][_creditors];
        return borrowerAddressData;
    }

    // Get Borrower Index Info
    function GetBorrowerIndexData(address _borrowerAddress, address _creditors, uint256 _index) public view returns (Borrower memory) {
        Borrower memory borrowerAddressData = BorrowerData[_borrowerAddress][_creditors][_index];
        return borrowerAddressData;
    }


    function NewTrust(address _approveAddress, address _token, uint256 _fixedRate, uint256 _amount) external nonReentrant whenNotPaused {
        require(_approveAddress != address(0), "_approveAddress is not a zero address");
        require(_token != address(0), "_token is not a zero address");
        require(_fixedRate <= MaxFixedRate, "Must be less than the maximum interest");
        require(_approveAddress != msg.sender, "approve address is not msg.sender");

        uint256 allowBalance = IERC20(_token).allowance(msg.sender, address(this));
        require(_amount <= allowBalance, "Lend lack of allowance");

        uint256 erc20Balance = IERC20(_token).balanceOf(msg.sender);
        require(_amount <= erc20Balance, "The authorized quantity must be greater than the balance");

        bool resultLender = LenderIsBool[msg.sender][_approveAddress];
        if (!resultLender){
            LenderIsBool[msg.sender][_approveAddress] = !LenderIsBool[msg.sender][_approveAddress];
            LenderNumber[msg.sender].push(_approveAddress);
        }
        bool resultBorrower = BorrowerIsBool[_approveAddress][msg.sender];
        if (!resultBorrower){
            BorrowerIsBool[_approveAddress][msg.sender] = !BorrowerIsBool[_approveAddress][msg.sender];
            BorrowerNumber[_approveAddress].push(msg.sender);
        }

        // save lend info
        Lender[] storage lendInfo = LenderData[msg.sender][_approveAddress];
        lendInfo.push(Lender({
            Address: _approveAddress,
            Token: _token,
            FixedRate: _fixedRate,
            CreditLine: _amount,
            Amount:0,
            isCancel: false
        }));
        // save borrower info
        Borrower[]  storage borrowerInfo = BorrowerData[_approveAddress][msg.sender];
        borrowerInfo.push(Borrower({
            Creditors: msg.sender,
            Token: _token,
            FixedRate: _fixedRate,
            CreditLine: _amount,
            Amount: 0,
            isCancel: false
        }));
        // log
        emit Trust(_approveAddress, _token, _fixedRate, _amount);
    }


    function RemoveTrust(address _approveAddress, uint256 _index, uint256 _cancelAmount) external nonReentrant whenNotPaused {
        require(_approveAddress != address(0), "approveAddress is not a zero address");
        require(_cancelAmount != 0, "The number of cancellations cannot be equal to 0");
        require(_approveAddress != msg.sender, "approveAddress is not msg.sender");
        require(LenderIsBool[msg.sender][_approveAddress], "lender is not approve approveAddress");

        Lender[]  storage lendInfo = LenderData[msg.sender][_approveAddress];
        uint256 lendInfoLength = lendInfo.length;
        require(_index <= lendInfoLength - 1, "Index Overrun");
        Lender storage personalLenderInfo = LenderData[msg.sender][_approveAddress][_index];


        Borrower[] storage borrowerInfo = BorrowerData[_approveAddress][msg.sender];
        uint256 borrowInfoLength = borrowerInfo.length;
        require(_index <= borrowInfoLength - 1, "borrower index Overrun");
        Borrower storage personalBorrowerInfo = BorrowerData[_approveAddress][msg.sender][_index];

        require(!personalLenderInfo.isCancel, "The authorization id record has been cancelled");
        // Number of Cancellations <= Number of Trusts - Number of Lending
        require(_cancelAmount <= personalLenderInfo.CreditLine - personalBorrowerInfo.Amount , "The number of cancellations cannot be greater than the number of authorizations");

        if (_cancelAmount == personalLenderInfo.CreditLine) {
            // Complete cancellation
            personalLenderInfo.isCancel = !personalLenderInfo.isCancel;
            personalBorrowerInfo.isCancel = !personalBorrowerInfo.isCancel;
            personalLenderInfo.CreditLine = personalLenderInfo.CreditLine - _cancelAmount;
            personalBorrowerInfo.CreditLine = personalBorrowerInfo.CreditLine - _cancelAmount;
        } else {
            // Partial cancellation of authorization
            personalLenderInfo.CreditLine = personalLenderInfo.CreditLine - _cancelAmount;
            personalBorrowerInfo.CreditLine = personalBorrowerInfo.CreditLine - _cancelAmount;
        }
        // log
        emit ReduceTrust(_approveAddress, _index,  _cancelAmount);
    }


    function Withdrawal(address _lendAddress, uint256 _index, uint256 _borrowerAmount) external nonReentrant whenNotPaused {

        require(_lendAddress != address(0), "_lendAddress is not a zero address");
        require(_lendAddress != msg.sender, "lendAddress is not msg.sender");
        require(_borrowerAmount != 0, "The number of borrower amount cannot be equal to 0");
        require(BorrowerIsBool[msg.sender][_lendAddress], "lender is not approve msg.sender");

        Borrower[] storage borrowerInfo = BorrowerData[msg.sender][_lendAddress];
        uint256 borrowerInfoLength = borrowerInfo.length;
        require(_index <= borrowerInfoLength - 1, "Index Overrun");
        Borrower storage personalBorrowerInfo = BorrowerData[msg.sender][_lendAddress][_index];

        require(!personalBorrowerInfo.isCancel, "The authorization id record has been cancelled");

        // Current number of remaining loans = number of credits - number already lent
        require(_borrowerAmount <= personalBorrowerInfo.CreditLine - personalBorrowerInfo.Amount, "The number of withdrawals must be less than or equal to the effective number");
        // Determine if lend's current balance is available for borrowing
        uint256 lenderBalance = IERC20(personalBorrowerInfo.Token).balanceOf(personalBorrowerInfo.Creditors);
        require(_borrowerAmount <= lenderBalance, "The lend balance is less than the borrowable quantity");

        // save borrower info
        personalBorrowerInfo.Amount = personalBorrowerInfo.Amount + _borrowerAmount;

        // save data
        Lender[]  storage lendInfo = LenderData[_lendAddress][msg.sender];
        uint256 lendInfoLength = lendInfo.length;
        require(_index <= lendInfoLength - 1, "Index Overrun");

        Lender storage personalLenderInfo = LenderData[_lendAddress][msg.sender][_index];
        personalLenderInfo.Amount = personalLenderInfo.Amount + _borrowerAmount;

        //Total number of borrowers, statistics of fees charged by the platform
        if (!isTotalBorrower[msg.sender]) {
            totalBorrower.push(msg.sender);
            isTotalBorrower[msg.sender] = !isTotalBorrower[msg.sender];

            if (!BorrowerBool[msg.sender][_lendAddress]) {
                BorrowerArrary[msg.sender].push(_lendAddress);
                BorrowerBool[msg.sender][_lendAddress]= !BorrowerBool[msg.sender][_lendAddress];
            }

            if (!TotalBorrowerBool[msg.sender][_lendAddress][_index]){
                TotalBorrowerIndexArrary[msg.sender][_lendAddress].push(_index);
                TotalBorrowerBool[msg.sender][_lendAddress][_index] = !TotalBorrowerBool[msg.sender][_lendAddress][_index];
            }

        }
        // borrow token
        uint256 amount = getPayableAmount(personalBorrowerInfo.Token, personalBorrowerInfo.Creditors, msg.sender, _borrowerAmount);
        require(amount == _borrowerAmount, "The actual money lent is not the same as the money needed to be borrowed");

        // check if token address equal to USDT token address
        if (personalBorrowerInfo.Token == USDTAddress) {
            uint256 serviceFeeInBusd = SafeMath.div(SafeMath.mul(_borrowerAmount, ServiceFee), 1e18);
            uint256 serviceFeeInBuddyDao = getTokenPrice(serviceFeeInBusd);

            uint256 borrowerBuddyDaoBalance = IERC20(BDYAddress).balanceOf(msg.sender);
            if (borrowerBuddyDaoBalance >= serviceFeeInBuddyDao) {
                // Transfer the service fee in BuddyDaoToken to the service fee address
                IERC20(BDYAddress).transferFrom(msg.sender, ServiceFeeAddress, serviceFeeInBuddyDao);
            } else {
                // Transfer the service fee in BUSD to the service fee address
                IERC20(personalBorrowerInfo.Token).transferFrom(msg.sender, ServiceFeeAddress, serviceFeeInBusd);
            }
            // Subtract the service fee from the borrower's withdrawal amount in BUSD
            _borrowerAmount = SafeMath.sub(_borrowerAmount, serviceFeeInBusd);
        } else {
            // When the token is not BUSD, transfer the service fee in the token to the service fee address
            uint256 serviceFee = SafeMath.div(SafeMath.mul(_borrowerAmount, ServiceFee), 1e18);
            IERC20(personalBorrowerInfo.Token).transferFrom(msg.sender, ServiceFeeAddress, serviceFee);
            // Subtract the service fee from the borrower's withdrawal amount
            _borrowerAmount = SafeMath.sub(_borrowerAmount, serviceFee);
        }
        // log
        emit WithdrawAssets(_lendAddress, _index, _borrowerAmount);
    }

    function getTokenPrice(uint256 amount) public view returns (uint256) {
        IPancakeV3Pool pool = IPancakeV3Pool(PancakePairAddress);
        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();

        uint256 priceOfMyToken = SafeMath.div(SafeMath.mul(amount, SafeMath.mul(sqrtPriceX96, sqrtPriceX96)), 2 ** 192);
        return priceOfMyToken;
    }


    function Pay(address _lendAddress, uint256 _index, uint256 _payAmount) external nonReentrant whenNotPaused {
        require(_lendAddress != address(0), "_lendAddress is not a zero address");
        require(_lendAddress != msg.sender, "lendAddress is not msg.sender");
        require(_payAmount != 0, "The number of payment amount cannot be equal to 0");
        require(BorrowerIsBool[msg.sender][_lendAddress], "lender is not approve msg.sender");

        Borrower[] storage borrowerInfo = BorrowerData[msg.sender][_lendAddress];
        uint256 borrowerInfoLength = borrowerInfo.length;
        require(_index <= borrowerInfoLength - 1, "Index Overrun");

        // Compare the number of returns
        Borrower storage personalBorrowerInfo = BorrowerData[msg.sender][_lendAddress][_index];

        // todo:The v1 version is required to calculate interest, the v2 version is not
        // uint256 borrowerInterest = calculatingInterest(_lendAddress, msg.sender,  _index,  _payAmount);

        require(_payAmount <= personalBorrowerInfo.Amount, "The returned quantity must be less than or equal to the borrowed quantity.");
        // check allowance
        uint256 allowBalance = IERC20(personalBorrowerInfo.Token).allowance(msg.sender, address(this));
        require(_payAmount <= allowBalance, "borrower lack of allowance");

        // Calculate whether the user's balance is sufficient for return
        uint256 userBalance = IERC20(personalBorrowerInfo.Token).balanceOf(msg.sender);
        require(userBalance >= _payAmount, "Insufficient balance");
        // Actual quantity returned = Quantity + Interest
        //uint256 actualPay = _payAmount + borrowerInterest;

        // Payment
        uint256 amount = getPayableAmount(personalBorrowerInfo.Token, msg.sender, personalBorrowerInfo.Creditors, _payAmount);
        require(amount == _payAmount, "The actual amount and the deducted amount do not match");

        // save borrower info
        personalBorrowerInfo.Amount = personalBorrowerInfo.Amount - _payAmount;
        // save  lend info
        Lender[]  storage lendInfo = LenderData[_lendAddress][msg.sender];
        uint256 lendInfoLength = lendInfo.length;
        require(_index <= lendInfoLength - 1, "Index Overrun");

        Lender storage personalLenderInfo = LenderData[_lendAddress][msg.sender][_index];
        personalLenderInfo.Amount = personalLenderInfo.Amount - _payAmount;
        // log
        emit Payment(_lendAddress, _index, _payAmount);
    }


    function calculatingInterest(address _lendAddress, address _borrower, uint256 _index, uint256 _payAmount) public view returns(uint256){
        require(_lendAddress != address(0), "_lendAddress is not a zero address");
        require(_payAmount != 0, "The number of payment amount cannot be equal to 0");
        Borrower[] storage borrowerInfo = BorrowerData[_borrower][_lendAddress];
        uint256 borrowerInfoLength = borrowerInfo.length;
        require(_index <= borrowerInfoLength - 1, "Index Overrun");
        Borrower storage personalBorrowerInfo = BorrowerData[_borrower][_lendAddress][_index];
        // interest = Number of borrowing *  Daily Lending Rate
        uint256 dailyRate = personalBorrowerInfo.FixedRate.mul(baseDecimal).div(baseYearOrMonth).div(baseDecimal);
        uint256 dailyInterest = _payAmount.mul(dailyRate).div(baseDecimal);
        return dailyInterest;
    }

    // Calculation of the actual interest paid, taking into account the adequacy of the remaining assets in the account and the adequacy of the authorized amount
    function calculatingActualInterest(uint256 _balance, uint256 _allowBalance, uint256 _dailyRate) public pure returns(uint256){
        uint256 payAmount;
        if (_balance < _dailyRate){
           if (_balance < _allowBalance){
              payAmount = _balance;
           } else {
              payAmount = _allowBalance;
           }
        } else {
           if (_dailyRate < _allowBalance){
              payAmount = _dailyRate;
           } else {
              payAmount = _allowBalance;
           }
        }
        return payAmount;
    }

    // chainlink auto
    function checkUpkeep(bytes calldata) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory){
        // Current time is greater than the time period
        if (block.timestamp > StartTimeInterval + TimeInterval) {
            upkeepNeeded = totalBorrower.length > 0;
        }
    }

    // chainlink logic
    function performUpkeep(bytes calldata) external override whenNotPaused {

        if (block.timestamp > StartTimeInterval + TimeInterval) {
            if (totalBorrower.length > 0) {
                for (uint256 i = 0; i < totalBorrower.length; i++){
                    // todo:一个borrower借贷的数组数据
                     address[] memory LendAddress = BorrowerArrary[totalBorrower[i]];
                     for (uint256 j = 0; j < LendAddress.length; j++) {
                         // Find borrower information
                         Borrower[] memory data = BorrowerData[totalBorrower[i]][LendAddress[j]];
                         if (data.length == 0) {
                             continue;
                         }
                         uint256[] memory BorrowerAddressIndex = TotalBorrowerIndexArrary[totalBorrower[i]][LendAddress[j]];
                         for (uint256 k = 0; k < BorrowerAddressIndex.length; k++) {
                              for (uint256 index = 0; index < data.length; index++){
                                  if (data[index].isCancel){
                                      continue;
                                  }
                                  if (data[index].Amount > 0 ){
                                      // Calculate daily interest = Current number of borrowings * Daily Rate
                                      uint256 dailyRate = calculatingInterest(LendAddress[j], totalBorrower[i], index, data[index].Amount);
                                      // uint256 fixedRate = (data[index].Amount.mul(ServiceFee)).div(baseDecimal);
                                      // Determine whether the lending user has sufficient balance to pay the fee
                                      uint256 borrowerBalance = IERC20(data[index].Token).balanceOf(totalBorrower[i]);
                                      if (borrowerBalance == 0 ){
                                          continue;
                                      }
                                      // check allowance
                                      uint256 allowBalance = IERC20(data[index].Token).allowance(totalBorrower[i], address(this));
                                      if (allowBalance == 0){
                                          continue;
                                      }
                                      uint256 rateAmount = calculatingActualInterest(borrowerBalance, allowBalance, dailyRate);
                                      // payment fee
                                      uint256 amount = getPayableAmount(data[index].Token, totalBorrower[i], LendAddress[j], rateAmount);
                                      require(amount == rateAmount, "The actual amount and the deducted amount do not match");
                                  }
                              }
                           }

                         }
                     }
            }
            // Update the starting point of the current time period
            StartTimeInterval = block.timestamp;
        }
    }

}