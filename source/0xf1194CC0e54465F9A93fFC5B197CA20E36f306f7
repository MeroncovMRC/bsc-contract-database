// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IRegister {
    event Regist(address player,address inviter);

    function regist(address _inviter)external returns(bool);
    function registed(address _player) external view returns(bool);
    function myInviter(address _player) external view returns(address);
}

pragma solidity ^0.8.0;


contract Register is IRegister{
    address[] public defaultInviterList  = [
        address(0x8C4059d1a3d181e1322ef803fFB81c88b5D02FA3)
    ];

    mapping(address=>bool) private _registed;
    mapping(address=>address) private _myInviter;

    constructor() {
        for (uint8 i = 0;i<defaultInviterList.length;i++){
            _registed[defaultInviterList[i]]=true;
        }
    }

    function regist(address _inviter)external returns(bool){
        address invitee = msg.sender;
        require(_myInviter[invitee]==address(0),"REGISTER:REGISTED");
        require(_registed[_inviter],"REGISTER:INVITER_NOT_FOUND");
        _myInviter[invitee] = _inviter;
        _registed[msg.sender] = true;
        emit Regist(invitee, _inviter);
        return true;
    }

    function registed(address _player) external view returns(bool){
        return _registed[_player];
    }

    function myInviter(address _player) external view returns(address){
        return _myInviter[_player];
    }
}