
// File: /root/bscDarsContracts/contracts/DarsStake.sol
// SPDX-License-Identifier: MIT
/*
https://dars.one/
*/
pragma solidity 0.7.6;

import "./lib/IBEP20.sol";
import "./lib/SafeMath.sol";
import "./lib/TransferHelper.sol";
import './lib/IPancakePair.sol';

pragma experimental ABIEncoderV2;

contract DarsStake {
    using SafeMath for uint256;
    using TransferHelper for IBEP20;

    IBEP20 immutable public rewardToken;
    IBEP20 immutable public lpDarsToken;
    IPancakePair immutable public pancakePair;
    

    struct UserInfo {
        uint256 depositTimestamp;
        uint256 sharesAmount;
        uint256 initialDepositAmount;
        uint256 dividendsAmount;
    }

    struct PoolInfo {
        uint256 currentRewardPerShare;
        uint256 sharesTotal;
        uint256 usersInStake;
        uint256 freezingPeriod;
        uint256 totalDividends;
    }

    PoolInfo public poolInfo;
    mapping(address => UserInfo) public usersInfo;

    

    event Stake(address user, uint256 amount);
    event PoolCharged(uint256 amount);
    event UnStake(address user, uint256 amount);
    event Dividends(address user, uint256 amount);

    constructor(
        address _lpDarsToken,
        address _rewardToken,
        uint256 _freezingPeriod
    ) {
        pancakePair=IPancakePair(_lpDarsToken);
        lpDarsToken = IBEP20(_lpDarsToken);
        rewardToken=IBEP20(_rewardToken);
        poolInfo=PoolInfo({
            currentRewardPerShare:0,
            sharesTotal:0,
            usersInStake:0,
            freezingPeriod:_freezingPeriod,
            totalDividends:0
        });  
    }

    function getDarsRate() public view returns (uint256) {
        
        (uint112 reserves0, uint112 reserves1,) = pancakePair.getReserves();
        (uint112 reserveIn, uint112 reserveOut) = pancakePair.token0() == address(rewardToken) ? (reserves0, reserves1) : (reserves1, reserves0);
        
        if (reserveIn > 0 && reserveOut > 0 && 1e18 < reserveOut){
            uint256 numerator = uint256(1e18).mul(10000).mul(reserveIn);
            uint256 denominator = uint256(reserveOut).sub(1e18).mul(9975);
            return numerator.div(denominator).add(1);
        }else{
            return 0;
        }

    }

    function chargePool(uint256 value) external {

        rewardToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            value
        );

        if (poolInfo.usersInStake > 0) {
            poolInfo.currentRewardPerShare=poolInfo.currentRewardPerShare.add(value.mul(1e12).div(poolInfo.sharesTotal));
            emit PoolCharged(value);
        }
    }

    function dividendsTransfer(address _to, uint256 _amount) internal {
        uint256 max=rewardToken.balanceOf(address(this));
        if (_amount > max) {
            _amount=max;
        }

        usersInfo[_to].initialDepositAmount = usersInfo[_to].sharesAmount
        .mul(poolInfo.currentRewardPerShare)
        .div(1e12);

        usersInfo[_to].dividendsAmount=usersInfo[_to].dividendsAmount.add(_amount);
        poolInfo.totalDividends=poolInfo.totalDividends.add(_amount);

        rewardToken.safeTransfer(_to, _amount);
        emit Dividends(_to, _amount);
    }

    function stake(uint256 _amount) external {

        require(_amount > 0, "amount must be greater than 0");
        
        require(
            lpDarsToken.allowance(address(msg.sender), address(this)) >=
                _amount,
            "Increase the allowance first,call the approve method"
        );

        UserInfo storage user = usersInfo[msg.sender];

        if (user.sharesAmount > 0) {
            uint256 dividends = calculateDividends(msg.sender);
            if (dividends > 0) {
                dividendsTransfer(msg.sender, dividends);
            }
        }else{
            poolInfo.usersInStake++;
        }
        
        lpDarsToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );

        user.depositTimestamp = block.timestamp;
        user.sharesAmount = user.sharesAmount.add(_amount);
        user.initialDepositAmount = user.sharesAmount.mul(poolInfo.currentRewardPerShare).div(1e12);
        poolInfo.sharesTotal = poolInfo.sharesTotal.add(_amount);
        emit Stake(msg.sender, _amount);

        if (poolInfo.usersInStake == 1 && user.sharesAmount== _amount ) {
            uint256 balance=rewardToken.balanceOf(address(this));
            if(balance>0){
                poolInfo.currentRewardPerShare = poolInfo.currentRewardPerShare.add(balance.mul(1e12).div(poolInfo.sharesTotal));
                emit PoolCharged(balance);
            }                 
        } 
      
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw() external {

        UserInfo storage user = usersInfo[msg.sender];
        uint256 unstaked_shares = user.sharesAmount;
        require(
            unstaked_shares > 0,
            "you do not have staked tokens, stake first"
        );
        require(isTokensFrozen(msg.sender) == false, "tokens are frozen");
        user.sharesAmount = 0;
        user.initialDepositAmount = 0;
        poolInfo.sharesTotal = poolInfo.sharesTotal.sub(unstaked_shares);
        poolInfo.usersInStake--; 
        lpDarsToken.safeTransfer(msg.sender, unstaked_shares);
        emit UnStake(msg.sender, unstaked_shares);
    }

    function unstake(uint256 _amount) external {
        UserInfo storage user = usersInfo[msg.sender];

        require(
            _amount > 0 && _amount<=user.sharesAmount,"bad _amount"
        );
        require(isTokensFrozen(msg.sender) == false, "tokens are frozen");

        uint256 dividends = calculateDividends(msg.sender);
        if (dividends > 0) {
            dividendsTransfer(msg.sender, dividends);
        }
        user.sharesAmount=user.sharesAmount.sub(_amount);
        user.initialDepositAmount = user.sharesAmount.mul(poolInfo.currentRewardPerShare).div(1e12);
        poolInfo.sharesTotal = poolInfo.sharesTotal.sub(_amount);
        if(user.sharesAmount==0){poolInfo.usersInStake--;}
        
        lpDarsToken.safeTransfer(msg.sender, _amount);

        emit UnStake(msg.sender, _amount);
    }

    function getDividends() external {
        require(
            usersInfo[msg.sender].sharesAmount > 0,
            "you do not have staked tokens, stake first"
        );
        uint256 dividends = calculateDividends(msg.sender);
        if (dividends > 0) {
            dividendsTransfer(msg.sender, dividends);
        }
    }

    function calculateDividends(address userAddress)
        public
        view
        returns (uint256)
    {
        return usersInfo[userAddress].sharesAmount
        .mul(poolInfo.currentRewardPerShare)
        .div(1e12)
        .sub(usersInfo[userAddress].initialDepositAmount);
    }

    function isTokensFrozen(address userAddress) public view returns (bool) {
        return (poolInfo.freezingPeriod >(block.timestamp.sub(usersInfo[userAddress].depositTimestamp)));
    }

    function getPool()
        external
        view
        returns (PoolInfo memory)
    {
        return poolInfo;
    }

    function getUser(address userAddress)
        external
        view
        returns (UserInfo memory)
    {
        return usersInfo[userAddress];
    }

}


// File: /root/bscDarsContracts/contracts/lib/IBEP20.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: /root/bscDarsContracts/contracts/lib/IPancakePair.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: /root/bscDarsContracts/contracts/lib/SafeMath.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;

/**
 * Copyright (c) 2016-2019 zOS Global Limited
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


// File: /root/bscDarsContracts/contracts/lib/TransferHelper.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.4 <0.8.0;
import "./IBEP20.sol";
import "./SafeMath.sol";

library TransferHelper {
    using SafeMath for uint256;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.transfer.selector, to, value)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TRANSFER_FAILED"
        );
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TRANSFER_FROM_FAILED"
        );
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance =
            token.allowance(address(this), spender).add(value);

        (bool success, bytes memory data) =
            address(token).call(
                abi.encodeWithSelector(token.approve.selector,spender,newAllowance)
            );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "INCREASE_ALLOWANCE_FAILED"
        );     
    }
}
