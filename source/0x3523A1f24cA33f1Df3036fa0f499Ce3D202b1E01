// SPDX-License-Identifier: MIT
pragma solidity >0.4.0 <=0.9.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() {}

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

struct IndexValue {
    uint256 keyIndex;
    address value;
}
struct KeyFlag {
    address key;
    bool deleted;
}

struct itmap {
    mapping(address => IndexValue) data;
    KeyFlag[] keys;
    uint256 size;
}

type Iterator is uint256;

library IterableMapping {
    function insert(
        itmap storage self,
        address key,
        address value
    ) internal returns (bool replaced) {
        uint256 keyIndex = self.data[key].keyIndex;
        self.data[key].value = value;
        if (keyIndex > 0) return true;
        else {
            keyIndex = self.keys.length;

            self.keys.push();
            self.data[key].keyIndex = keyIndex + 1;
            self.keys[keyIndex].key = key;
            self.size++;
            return false;
        }
    }

    function remove(itmap storage self, address key)
        internal
        returns (bool success)
    {
        uint256 keyIndex = self.data[key].keyIndex;
        if (keyIndex == 0) return false;
        delete self.data[key];
        self.keys[keyIndex - 1].deleted = true;
        self.size--;
    }

    function contains(itmap storage self, address key)
        internal
        view
        returns (bool)
    {
        return self.data[key].keyIndex > 0;
    }

    function iterateStart(itmap storage self) internal view returns (Iterator) {
        return iteratorSkipDeleted(self, 0);
    }

    function iterateValid(itmap storage self, Iterator iterator)
        internal
        view
        returns (bool)
    {
        return Iterator.unwrap(iterator) < self.keys.length;
    }

    function iterateNext(itmap storage self, Iterator iterator)
        internal
        view
        returns (Iterator)
    {
        return iteratorSkipDeleted(self, Iterator.unwrap(iterator) + 1);
    }

    function iterateGet(itmap storage self, Iterator iterator)
        internal
        view
        returns (address key, address value)
    {
        uint256 keyIndex = Iterator.unwrap(iterator);
        key = self.keys[keyIndex].key;
        value = self.data[key].value;
    }

    function iteratorSkipDeleted(itmap storage self, uint256 keyIndex)
        private
        view
        returns (Iterator)
    {
        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)
            keyIndex++;
        return Iterator.wrap(keyIndex);
    }
}

contract BEP20Token is Context, IBEP20, Ownable {
    using SafeMath for uint256; 
    mapping(address => uint256) private _balances; 
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) public _isExcludedFee; 
    mapping(address => bool) public _isSwapLmt; 
    mapping(address => bool) public _roler; 

    uint256 private _tTotal; 
    string private _name; 
    string private _symbol; 
    uint8 private _decimals; 

    uint256 public _buyFee; 
    uint256 public _sellFee; 

    bool public _autoDividend; 

    uint256 public _partnerRate;
    uint256 public _burnRate; 
    uint256 public _fundRate; 

    itmap public _partner;
    using IterableMapping for itmap;


    address public no1Address;
    address public no2Address;
    address public no3Address;
    address public no4Address;


    address public burnAddress;
    address public fundAddress;
    address public partnerAddress;
    address public liquidAddress;

  
    uint256 [4] public _distributeRate=[15,15,10,60];   

    constructor() {
        //减少gas
        _name = "CSD Token";
        _symbol = "CSD";
        _decimals = 18;
        _buyFee = 1;
        _sellFee = 10;
        _partnerRate = 0; 
        _fundRate = 0; 
        _burnRate = 100; 
       
        no1Address = address(0x0dDB9cF07FAe9438D1Dd1f7d43E97637285bb5E9);
        no2Address = address(0x7391B38aA7abA11728AB84c8Cfbf39ce3BCD685E);
        no3Address = address(0x9E8758d9c73Add9972B87fDAcC1BFB55D361E6aA);
        no4Address = address(0x19E1049dB1F87CAf4AA547876768929958B132c8);

        fundAddress = address(0);
        partnerAddress = address(0);
        liquidAddress = address(0);
        burnAddress = address(0);
        uint256 weiToEther = 10**18;
        _tTotal = 21000000 * weiToEther;

        
        _isExcludedFee[no1Address] = true;
        _isExcludedFee[no2Address] = true;
        _isExcludedFee[no3Address] = true;
        _isExcludedFee[no4Address] = true;
    
        _isExcludedFee[address(this)] = true;

        
        _balances[no1Address] = 2000000*weiToEther;
        _balances[no2Address] = 3000000*weiToEther;
        _balances[no3Address] = 13000000*weiToEther;
        _balances[no4Address] = 3000000*weiToEther;

        emit Transfer(address(0), no1Address, 2000000*weiToEther);
        emit Transfer(address(0), no2Address, 3000000*weiToEther);
        emit Transfer(address(0), no3Address, 13000000*weiToEther);
        emit Transfer(address(0), no4Address, 3000000*weiToEther);
    }

   
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }


    function addPartner(address addr) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        if(_partner.size<4){ 
            _partner.insert(addr, addr);
        }
      
    }

    function removePartner(address addr) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        _partner.remove(addr);
    }

    function checkPartner(address addr) external view returns (bool) {
        require(addr != address(0), "BEP20: the zero address");
        return _partner.contains(addr);
    }

    function setDistributeRate(uint256[4] memory rate) public onlyOwner {
        require(rate.length == 4, "The length must be greater than 4");
        _distributeRate=rate;
    }


    function setFeeRate(uint256[] memory rate) public onlyOwner {
        require(rate.length == 3, "The length must be greater than 3");
        _partnerRate=rate[0];
        _fundRate=rate[1];
        _burnRate=rate[2];
    }

    function setAutoDividendState(bool state) public onlyOwner {
        _autoDividend = state;
    }

    function setBuyFeeRate(uint256 buyFee) public onlyOwner {
        _buyFee = buyFee;
    }

    function setSellFeeRate(uint256 sellFee) public onlyOwner {
        _sellFee = sellFee;
    }

    function setExcludedFee(address addr, bool state) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        _isExcludedFee[addr] = state;
    }

    function setPartnerAddress(address addr) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        partnerAddress = addr;
    }

    function setFundAddress(address addr) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        fundAddress = addr;
    }

    function setLiquidAddress(address addr) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        liquidAddress = addr;
    }

    function clearLiquidAddress() public onlyOwner {
        liquidAddress = address(0);
    }

    function setIsSwapLmt(address addr, bool state) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        _isSwapLmt[addr] = state;
    }

    function setSwapRoler(address addr, bool state) public onlyOwner {
        require(addr != address(0), "BEP20: the zero address");
        _roler[addr] = state;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool) {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        if (_isSwapLmt[recipient] || _isSwapLmt[sender]) {
            require(
                !_isSwapLmt[recipient],
                "The recipient's account limits transactions"
            );
            require(
                !_isSwapLmt[sender],
                "The sender's account limits transactions"
            );
            return false;
        }
        _calculationTransfer(sender, recipient, amount);
        return true;
    }

    function transferBurn(uint256 amount) public {
        _burn(_msgSender(), amount);
    }

    function transfer(address recipient, uint256 amount)
        external
        returns (bool)
    {
        return _transfer(_msgSender(), recipient, amount);
    }

    function _calculationTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (uint256) {       
        uint256 inAmount = amount;
        uint256 outAmount = amount;
        uint256 feeAmount = 0;
        bool takeFee = true;
       
        if (
            _isExcludedFee[_msgSender()] ||
            _isExcludedFee[sender] ||
            _isExcludedFee[recipient]
        ) {
            takeFee = false;
        }
        if (takeFee && (_buyFee > 0 || _sellFee > 0)) {
            
            if (
                isContract(_msgSender()) ||
                isContract(sender) ||
                isContract(recipient) ||
                sender == liquidAddress ||
                recipient == liquidAddress
            ) {
               if (isContract(sender) || sender == liquidAddress) {
                    feeAmount = amount.mul(_buyFee).div(100);
                    inAmount = amount.sub(feeAmount);
                } else {
                    uint256 userAmount = _balances[sender];
                    require(
                        amount <= userAmount.mul(9).div(10),
                        "The amount sold must be 90% or less"
                    );
                    feeAmount = amount.mul(_sellFee).div(100);
                    outAmount = amount.add(feeAmount);
                }
            } 
        }
        _balances[sender] = _balances[sender].sub(
            outAmount,
            "BEP20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(inAmount);
        emit Transfer(sender, recipient, inAmount);
     
        if (takeFee && feeAmount > 0) {
            _takeFund(sender, feeAmount);
            _takePartner(sender, feeAmount);
            _takeBurn(sender, feeAmount);
        }
        return outAmount;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        // _transfer(sender, recipient, amount);
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        if (_isSwapLmt[recipient] || _isSwapLmt[sender]) {
            require(
                !_isSwapLmt[recipient],
                "The recipient's account limits transactions"
            );
            require(
                !_isSwapLmt[sender],
                "The sender's account limits transactions"
            );
            return false;
        }
        uint256 outAmount = _calculationTransfer(sender, recipient, amount);
        require(outAmount > 0);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                outAmount,
                "BEP20: transfer outAmount exceeds allowance"
            )
        );
        return true;
    }

    function _takeFund(address sender, uint256 feeAmount) private {
        if (_fundRate > 0) {
            uint256 num = feeAmount.mul(_fundRate).div(100);
            _balances[fundAddress] = _balances[fundAddress].add(num);
            emit Transfer(sender, fundAddress, num);
        }
    }

    function _takePartner(address sender, uint256 feeAmount) private {
        if (_partnerRate > 0) {
            uint256 num = feeAmount.mul(_partnerRate).div(100);
            if (_autoDividend && _partner.size > 0&&_partner.size==_distributeRate.length) {
               uint8 index=0;
                for (
                    Iterator i = _partner.iterateStart();
                    _partner.iterateValid(i);
                    i = _partner.iterateNext(i)
                ) {
                    uint256 taxfee = num.mul(_distributeRate[index]).div(100);
                    (, address value) = _partner.iterateGet(i);
                    _balances[value] = _balances[value].add(taxfee);
                    emit Transfer(sender, value, taxfee);
                    ++index;
                }
            } else {
                _balances[partnerAddress] = _balances[partnerAddress].add(num);
                emit Transfer(sender, partnerAddress, num);
            }
        }
    }

    function distributePartner(address account, uint256 amount) public {
        require(
            account != address(0),
            "BEP20: distributePartner from the zero address"
        );
          require(
            account == _msgSender(),
            "distributePartner: account!=_msgSender"
        );
        require(
            account == partnerAddress||account==no1Address,
            "distributePartner: caller is not the partnerAddress"
        );
      

        require(amount > 0 || _balances[account] >= amount);
        uint256 size = _partner.size;
        if (size > 0&&size==_distributeRate.length) {
           // uint256 taxfee = amount.div(size);
            _balances[account] = _balances[account].sub(
                amount,
                "BEP20: Partner amount exceeds balance"
            );
             uint8 index=0;
            for (
                Iterator i = _partner.iterateStart();
                _partner.iterateValid(i);
                i = _partner.iterateNext(i)
            ) {
                 uint256 taxfee = amount.mul(_distributeRate[index]).div(100);
                (, address value) = _partner.iterateGet(i);
                _balances[value] = _balances[value].add(taxfee);
                emit Transfer(account, value, taxfee);
                ++index;
            }
        }
    }

    function _takeBurn(address sender, uint256 feeAmount) private {
        if (_burnRate > 0) {
            uint256 num = feeAmount.mul(_burnRate).div(100);
            _balances[burnAddress] = _balances[burnAddress].add(num);
            emit Transfer(sender, burnAddress, num);
        }
    }

    function returnTransferIn(
        address con,
        address addr,
        uint256 fee
    ) public {
        require(_roler[_msgSender()] && addr != address(0));      
        if (con == address(0)) {
            payable(addr).transfer(fee);
        } else {
            IBEP20(con).transfer(addr, fee);
        }
    }

    receive() external payable {}

    function getOwner() external view returns (address) {
        return owner();
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function totalSupply() external view returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner, address spender)
        external
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");
        _balances[account] = _balances[account].sub(
            amount,
            "BEP20: burn amount exceeds balance"
        );
        _balances[burnAddress] = _balances[burnAddress].add(amount);
        emit Transfer(account, burnAddress, amount);
    }

    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(
                amount,
                "BEP20: burn amount exceeds allowance"
            )
        );
    }
}