
// File: contracts/token/exchanges.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ExchangesStrac {
    address private _owner;

    address public blackAddress = 0x0000000000000000000000000000000000000001;   
    // strac - new
    address public newStrac = 0xd88C523C1016d700890cea021B6301c11AbA8aD3;
    // old strac
    address public oldStrac = 0x12d749A1BfEccBfFe4fA3d3E3ADd296492f0a1Bd;

    constructor(){
        _owner =  msg.sender;
    }

    // Old->new strac
    function exchanges(uint256 amount) external {
        IERC20(oldStrac).transferFrom(msg.sender, blackAddress, amount);
        IERC20(newStrac).transfer(msg.sender, amount);
    }

}
