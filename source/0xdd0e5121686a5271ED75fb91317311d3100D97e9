
// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorInterface {
  function latestAnswer() external view returns (int256);

  function latestTimestamp() external view returns (uint256);

  function latestRound() external view returns (uint256);

  function getAnswer(uint256 roundId) external view returns (int256);

  function getTimestamp(uint256 roundId) external view returns (uint256);

  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);

  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
}


// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./AggregatorInterface.sol";
import "./AggregatorV3Interface.sol";

interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}


// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV // Deprecated in v4.8
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/library/BasicMaths.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

library BasicMaths {
    /**
     * @dev Returns the abs of substraction of two unsigned integers
     *
     * _Available since v3.4._
     */
    function diff(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a >= b) {
            return a - b;
        } else {
            return b - a;
        }
    }

    /**
     * @dev Returns a - b if a > b, else return 0
     *
     * _Available since v3.4._
     */
    function sub2Zero(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a > b) {
            return a - b;
        } else {
            return 0;
        }
    }

    /**
     * @dev if isSub then Returns a - b, else return a + b
     *
     * _Available since v3.4._
     */
    function addOrSub(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {
        if (isAdd) {
            return a + b;
        } else {
            return a - b;
        }
    }

    /**
     * @dev if isSub then Returns sub2Zero(a, b), else return a + b
     *
     * _Available since v3.4._
     */
    function addOrSub2Zero(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {
        if (isAdd) {
            return a + b;
        } else {
            if (a > b) {
                return a - b;
            } else {
                return 0;
            }
        }
    }

    function sqrt(uint256 x) internal pure returns (uint256) {
        uint256 z = (x + 1 ) / 2;
        uint256 y = x;
        while(z < y){
            y = z;
            z = ( x / z + z ) / 2;
        }
        return y;
    }

    function pow(uint256 x) internal pure returns (uint256) {
        return x * x;
    }

    function diff2(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (a >= b) {
            return (true, a - b);
        } else {
            return (false, b - a);
        }
    }
}


// File: contracts/library/Price.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "./BasicMaths.sol";

library Price {
  using BasicMaths for uint256;
  using BasicMaths for bool;

  uint256 private constant E18 = 1e18;
  uint256 private constant E9 = 1e9;
  uint256 private constant E4 = 1e4;

  function divE18(
    uint256 valueA,
    uint256 valueB
  ) internal pure returns (uint256) {
    return (valueA * E18) / valueB;
  }

  function divE4(
    uint256 valueA,
    uint256 valueB
  ) internal pure returns (uint256) {
    return (valueA * E4) / valueB;
  }

  function mulE18(
    uint256 valueA,
    uint256 valueB
  ) internal pure returns (uint256) {
    return (valueA * valueB) / E18;
  }

  function mulE4(
    uint256 valueA,
    uint256 valueB
  ) internal pure returns (uint256) {
    return (valueA * valueB) / E4;
  }

  function lpTokenPrice(
    uint256 totalSupply,
    uint256 liquidityPool
  ) internal pure returns (uint256) {
    if (totalSupply == 0 || liquidityPool == 0) {
      return E18;
    }

    return (liquidityPool * (E18)) / totalSupply;
  }

  function lpTokenByPoolToken(
    uint256 totalSupply,
    uint256 liquidityPool,
    uint256 poolToken
  ) internal pure returns (uint256) {
    if (liquidityPool != 0) {
      return (poolToken * totalSupply) / liquidityPool;
    }
    return poolToken;
  }

  function poolTokenByLPToken(
    uint256 totalSupply,
    uint256 liquidityPool,
    uint256 lpToken
  ) internal pure returns (uint256) {
    return (lpToken * lpTokenPrice(totalSupply, liquidityPool)) / E18;
  }

  function calFundingFee(
    uint256 positionAmount,
    uint256 rebaseSize
  ) internal pure returns (uint256) {
    return mulE18(positionAmount, rebaseSize);
  }

  function convertDecimal(
    uint256 amount,
    uint8 fromDecimal,
    uint8 toDecimal
  ) internal pure returns (uint256) {
    if (fromDecimal == toDecimal) {
      return amount;
    } else if (fromDecimal > toDecimal) {
      return amount / (10 ** (fromDecimal - toDecimal));
    } else {
      return amount * 10 ** (toDecimal - fromDecimal);
    }
  }
}


// File: contracts/Pool/interface/IPoolLiquidityHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../PoolStructs.sol";

interface IPoolLiquidityHandler {
  event RequestLiquidityChange(
    uint256 requestId,
    LiquidityChangeRequest request
  );

  event ClaimLiquidityChange(
    uint256 requestId,
    uint256 sendAmount,
    LiquidityChangeRequest request
  );

  event TakeSnapshot(
    uint256 date,
    uint256 totalLPTokenSupply,
    uint256 poolLiquidity,
    uint256 totalAdd,
    uint256 totalRemove,
    uint256 liquidityFee
  );

  event LiquidityChange(
    uint256 poolLiquidity,
    uint256 totalLPTokenSupply,
    uint256 lpTokenPrice
  );
}


// File: contracts/Pool/interface/IPoolPositionHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../PoolStructs.sol";

interface IPoolPositionHandler {
  event OpenPosition(
    uint256 positionId,
    Position position,
    uint256 positionSize
  );

  event AddMargin(uint256 positionId, uint256 addMargin, uint256 totalMargin);

  event ClosePosition(PositionCloseInfo closeInfo);

  event Exit(uint256 positionId, address executor);

  event ExecPreBill(
    uint256 positionId,
    Position position,
    address executor,
    uint256 executorFee,
    uint256 positionSize
  );

  event CancelPrebill(uint256 positionId);
}


// File: contracts/Pool/interface/IPoolStorageHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../PoolStructs.sol";

interface IPoolStorageHandler {
  event SetPoolParams(SetPoolParamsInput params);

  event SetLadderDeviations(SetLadderDeviationInput[] deviationInfos);

  event SetLpDiffDeviations(SetLadderDeviationInput[] deviationInfos);

  event SetIsValidExecutor(address addr, bool isValid);

  event SetisValidLiquidityProvider(address addr, bool isValid);

  event UpdatePoolLongShortAmount(uint256 longAmount, uint256 shortAmount);

  event UpdatePoolRebaseLongShort(
    uint256 rebaseLong,
    uint256 rebaseShort,
    uint256 blockNumber
  );
}


// File: contracts/Pool/interface/IPoolTradingPairHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../PoolStructs.sol";

interface IPoolTradingPairHandler {
  event CreateTradingPair(address oracleAddr, bytes32 tradingPairId);

  event DeleteTradingPair(bytes32 tradingPairId);

  event UpdatedTradingPair(bytes32 tradingPairId, TradingPair newTradingPair);
}


// File: contracts/Pool/library/TradingHelper.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../../library/BasicMaths.sol";
import "../../library/Price.sol";

import "../PoolStructs.sol";

library TradingHelper {
  using BasicMaths for uint256;
  uint256 private constant E18 = 1e18;

  function calRebaseDelta(
    CalRebaseDeltaInput memory input
  ) internal view returns (uint256 rebaseLongDelta, uint256 rebaseShortDelta) {
    if (input.lastRebaseBlock >= block.number || input.poolLiquidity == 0) {
      return (rebaseLongDelta, rebaseShortDelta);
    }

    uint256 adjustPosition = Price.mulE4(
      input.poolLiquidity,
      input.imbalanceThreshold
    );

    uint256 nakedPosition = input.poolLongAmount.diff(input.poolShortAmount);

    if (nakedPosition < adjustPosition) {
      return (rebaseLongDelta, rebaseShortDelta);
    }

    uint256 rebasePosition = nakedPosition - adjustPosition;
    uint256 validBlockDiff = block.number - input.lastRebaseBlock;
    uint256 tmpRebaseDelta;

    tmpRebaseDelta =
      (rebasePosition * validBlockDiff * E18) /
      (input.rebasecCoefficient);

    if (input.poolLongAmount > input.poolShortAmount) {
      rebaseLongDelta = tmpRebaseDelta / input.poolLongAmount;
    } else {
      rebaseShortDelta = tmpRebaseDelta / input.poolShortAmount;
    }
  }
}


// File: contracts/Pool/Pool.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "./PoolPositionHandler.sol";

contract Pool is PoolPositionHandler {
  using SafeERC20 for IERC20;

  receive() external payable {}

  constructor(
    string memory name_,
    string memory symbol_,
    address poolToken_,
    address cryptocurrencyToPoolTokenOracle_,
    bool isCryptocurrencyToPoolTokenReverted_
  )
    PoolPositionHandler(
      name_,
      symbol_,
      poolToken_,
      cryptocurrencyToPoolTokenOracle_,
      isCryptocurrencyToPoolTokenReverted_
    )
  {}

  function withdraw(
    address tokenAddr,
    address to,
    uint256 amount
  ) external onlyOwner {
    if (tokenAddr == address(0)) {
      payable(to).transfer(amount);
    } else {
      if (tokenAddr == poolToken) {
        require(
          poolLiquidity <= ERC20(poolToken).balanceOf(address(this)) - amount,
          "Invalid Amount"
        );
      }
      IERC20(tokenAddr).safeTransfer(to, amount);
    }
  }
}


// File: contracts/Pool/PoolLiquidityHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

import "../library/Price.sol";
import "./interface/IPoolLiquidityHandler.sol";
import "./PoolStorageHandler.sol";

contract PoolLiquidityHandler is
  IPoolLiquidityHandler,
  PoolStorageHandler,
  ERC20
{
  using SafeERC20 for IERC20;
  using Counters for Counters.Counter;

  Counters.Counter private _liquidityRequestCounter;

  mapping(uint256 => LiquidityChangeRequest) private _liquidityChangeRequest;
  mapping(uint256 => DailyLiquidityRecord) private _dailyLiquidityRecord;

  modifier onlyValidExecutor() {
    require(isValidExecutor(msg.sender), "O-E"); //Only Executor
    _;
  }

  constructor(
    string memory name_,
    string memory symbol_,
    address poolToken_,
    address cryptocurrencyToPoolTokenOracle_,
    bool isCryptocurrencyToPoolTokenReverted_
  )
    ERC20(name_, symbol_)
    PoolStorageHandler(
      poolToken_,
      cryptocurrencyToPoolTokenOracle_,
      isCryptocurrencyToPoolTokenReverted_
    )
  {}

  function addEmergencyLiquidity(
    uint256 amount,
    bool isMintLpToken
  ) external onlyOwner {
    _rebase();
    _chargePoolToken(msg.sender, amount);

    if (isMintLpToken) {
      _mintLpByPoolToken(amount);
    }

    _editPoolLiquidity(amount, 0);

    emit LiquidityChange(
      poolLiquidity,
      totalSupply(),
      Price.lpTokenPrice(totalSupply(), poolLiquidity)
    );
  }

  function requestLiquidityChange(uint256 amount, bool isAdd) external {
    uint64 dueDate = uint64(block.timestamp / 1 days) + 2;

    LiquidityChangeRequest memory request = LiquidityChangeRequest({
      user: msg.sender,
      dueDate: dueDate,
      isAdd: isAdd,
      amount: amount
    });

    if (isAdd) {
      require(isValidToAddLiquidity(msg.sender), "IV-AL"); // Invalid to add liquidity

      _chargePoolToken(msg.sender, amount);

      _dailyLiquidityRecord[dueDate].accumAddAmount += amount;
    } else {
      _transfer(msg.sender, address(this), amount);

      _dailyLiquidityRecord[dueDate].accumRemoveAmount += amount;
    }

    _liquidityRequestCounter.increment();
    uint256 requestId = _liquidityRequestCounter.current();
    _liquidityChangeRequest[requestId] = request;

    emit RequestLiquidityChange(requestId, request);
  }

  function claimLiquidityChange(uint256 requestId) external {
    LiquidityChangeRequest memory request = _liquidityChangeRequest[requestId];
    require(request.user != address(0), "IV-ReqId"); // Invalid RequestId

    require(
      _dailyLiquidityRecord[request.dueDate].isRecorded,
      "IV-SS" // No Snapshot Yet
    );

    uint256 totalLPTokenSupplySnapshot = _dailyLiquidityRecord[request.dueDate]
      .totalLPTokenSupplySnapshot;
    uint256 poolLiquiditySnapshot = _dailyLiquidityRecord[request.dueDate]
      .poolLiquiditySnapshot;

    uint256 sendAmount;
    if (request.isAdd) {
      sendAmount = Price.lpTokenByPoolToken(
        totalLPTokenSupplySnapshot,
        poolLiquiditySnapshot,
        request.amount
      );

      _transfer(address(this), request.user, sendAmount);
    } else {
      uint256 feeAmount = Price.mulE4(request.amount, removeLiquidityFeeRate);
      sendAmount = Price.poolTokenByLPToken(
        totalLPTokenSupplySnapshot,
        poolLiquiditySnapshot,
        request.amount - feeAmount
      );
      _sendPoolToken(request.user, sendAmount);
    }

    delete _liquidityChangeRequest[requestId];
    emit ClaimLiquidityChange(requestId, sendAmount, request);
  }

  function takeSnapshot(
    uint256 dueDate,
    bool isHardFix,
    uint256 hardFixTotalLPSupply,
    uint256 hardFixPoolLiquidity
  ) external onlyValidExecutor {
    _rebase();
    // Step1: Check what totalSupply and poolLiquidity is
    uint256 fixedTotalLPTokenSupply;
    uint256 fixedPoolLiquidity;
    if (isHardFix) {
      fixedTotalLPTokenSupply = hardFixTotalLPSupply;
      fixedPoolLiquidity = hardFixPoolLiquidity;
    } else {
      require(!_dailyLiquidityRecord[dueDate].isRecorded, " IV-AT"); // Alreadt Taken
      fixedTotalLPTokenSupply = totalSupply();
      fixedPoolLiquidity = poolLiquidity;
    }

    // Step2: Rollback if hardFix more than once
    uint256 dueDateAddAmount = _dailyLiquidityRecord[dueDate].accumAddAmount;
    uint256 dueDateRemoveAmount = _dailyLiquidityRecord[dueDate]
      .accumRemoveAmount;

    if (isHardFix && _dailyLiquidityRecord[dueDate].isRecorded) {
      _transfer(
        official,
        address(this),
        _dailyLiquidityRecord[dueDate].removeLiquidityFee
      );

      _editPoolLiquidity(
        _dailyLiquidityRecord[dueDate].removePoolTokenAmount,
        dueDateAddAmount
      );

      uint256 lastFinalLPRemoveAmount = dueDateRemoveAmount -
        _dailyLiquidityRecord[dueDate].removeLiquidityFee;

      if (
        _dailyLiquidityRecord[dueDate].newLPTokenAmount >=
        _dailyLiquidityRecord[dueDate].removePoolTokenAmount
      ) {
        _burn(
          address(this),
          _dailyLiquidityRecord[dueDate].newLPTokenAmount -
            lastFinalLPRemoveAmount
        );
      } else {
        _mint(
          address(this),
          lastFinalLPRemoveAmount -
            _dailyLiquidityRecord[dueDate].newLPTokenAmount
        );
      }
    }

    // Step3: Calculate and change Pool state
    // Step3-1: Calculate new LP-Token amount
    uint256 newLPTokenAmount = Price.lpTokenByPoolToken(
      fixedTotalLPTokenSupply,
      fixedPoolLiquidity,
      dueDateAddAmount
    );

    // Step3-2: Calculate remove Pool Liquidity Fee
    uint256 removeLiquidityFee = Price.mulE4(
      dueDateRemoveAmount,
      removeLiquidityFeeRate
    );

    uint256 finalLPRemoveAmount = dueDateRemoveAmount - removeLiquidityFee;

    // Step3-3: Calculate actual remove Pool Liquidity
    uint256 removePoolTokenAmount = Price.poolTokenByLPToken(
      fixedTotalLPTokenSupply,
      fixedPoolLiquidity,
      finalLPRemoveAmount
    );

    // Step3-4: Change Pool state
    _editPoolLiquidity(dueDateAddAmount, removePoolTokenAmount);
    if (newLPTokenAmount >= finalLPRemoveAmount) {
      _mint(address(this), newLPTokenAmount - finalLPRemoveAmount);
    } else {
      _burn(address(this), finalLPRemoveAmount - newLPTokenAmount);
    }

    // Step4: Record latest daily liquidity record
    _dailyLiquidityRecord[dueDate].isRecorded = true;
    _dailyLiquidityRecord[dueDate]
      .totalLPTokenSupplySnapshot = fixedTotalLPTokenSupply;
    _dailyLiquidityRecord[dueDate].poolLiquiditySnapshot = fixedPoolLiquidity;
    _dailyLiquidityRecord[dueDate].newLPTokenAmount = newLPTokenAmount;
    _dailyLiquidityRecord[dueDate]
      .removePoolTokenAmount = removePoolTokenAmount;
    _dailyLiquidityRecord[dueDate].removeLiquidityFee = removeLiquidityFee;

    // Step5: Emit events
    emit TakeSnapshot(
      dueDate,
      fixedTotalLPTokenSupply,
      fixedPoolLiquidity,
      dueDateAddAmount,
      finalLPRemoveAmount,
      removeLiquidityFee
    );
    emit LiquidityChange(
      poolLiquidity,
      totalSupply(),
      Price.lpTokenPrice(totalSupply(), poolLiquidity)
    );
  }

  function getLiquidityChangeRequest(
    uint256 requestId
  ) external view returns (LiquidityChangeRequest memory) {
    return _liquidityChangeRequest[requestId];
  }

  function getDailyLiquidityRecord(
    uint256 date
  ) external view returns (DailyLiquidityRecord memory) {
    return _dailyLiquidityRecord[date];
  }

  function isValidToAddLiquidity(address user) public view returns (bool) {
    return isLiquidityProviderLimited ? isValidLiquidityProvider(user) : true;
  }

  function _sendPoolToken(address to, uint256 amount) internal {
    uint256 sendAmount = Price.convertDecimal(amount, 18, poolTokenDecimals);

    IERC20(poolToken).safeTransfer(to, sendAmount);
  }

  function _chargePoolToken(address from, uint256 amount) internal {
    address poolToken = poolToken;
    uint256 balanceBefore = IERC20(poolToken).balanceOf(address(this));

    uint256 chargeAmount = Price.convertDecimal(amount, 18, poolTokenDecimals);

    IERC20(poolToken).safeTransferFrom(from, address(this), chargeAmount);

    require(
      IERC20(poolToken).balanceOf(address(this)) >=
        (balanceBefore + chargeAmount),
      "F-CPT" // Failed to charge PoolToken
    );
  }

  function _mintLpByPoolToken(uint256 amount) internal {
    uint256 newLpTokenAmount = Price.lpTokenByPoolToken(
      totalSupply(),
      poolLiquidity,
      amount
    );

    _mint(official, newLpTokenAmount);
  }
}


// File: contracts/Pool/PoolPositionHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol";

import "../library/BasicMaths.sol";
import "./interface/IPoolPositionHandler.sol";
import "./PoolTradingPairHandler.sol";

contract PoolPositionHandler is IPoolPositionHandler, PoolTradingPairHandler {
  using BasicMaths for uint256;
  using BasicMaths for bool;
  using ECDSA for bytes32;
  using SafeERC20 for IERC20;
  using Counters for Counters.Counter;

  Counters.Counter private _positionIdCounter;

  mapping(uint256 => bool) private _signatures;
  mapping(uint256 => Position) private _positions;

  constructor(
    string memory name_,
    string memory symbol_,
    address poolToken_,
    address cryptocurrencyToPoolTokenOracle_,
    bool isCryptocurrencyToPoolTokenReverted_
  )
    PoolTradingPairHandler(
      name_,
      symbol_,
      poolToken_,
      cryptocurrencyToPoolTokenOracle_,
      isCryptocurrencyToPoolTokenReverted_
    )
  {}

  function openPosition(OpenPositionInput memory input) public {
    require(
      input.leverage >= minLeverage && input.leverage <= maxLeverage,
      "IV-LVR" // Invalid leverage
    );
    require(input.margin >= minOpenAmount, "IV-MGN"); // Invalid margin
    require(
      input.direction == uint8(Direction.Long) ||
        input.direction == uint8(Direction.Short),
      "IV-DIR" // Invalid direction
    );

    _requireTradingPairActive(input.tradingPairId);

    _chargePoolToken(msg.sender, input.margin);

    Position memory newPosition = Position({
      tradingPairId: input.tradingPairId,
      openPrice: input.preBillPrice,
      initMargin: input.margin,
      extraMargin: 0,
      openRebase: 0,
      owner: msg.sender,
      openBlock: 0,
      leverage: uint16(input.leverage),
      direction: uint8(input.direction)
    });

    uint256 positionSize = 0;

    // if not PreBill
    if (input.signature.length != 0) {
      require(poolLiquidity > 0, "IV-LQD"); // No Liquidity

      _requireValidCexPriceAndValidSignature(
        uint256(CexUsage.OpenPosition),
        input.tradingPairId,
        input.cexPrice,
        input.signTimestamp,
        input.signature
      );

      (uint256 openPrice, uint256 openRebase) = _openPosition(
        input.tradingPairId,
        input.margin,
        input.cexPrice,
        input.leverage,
        input.direction
      );

      newPosition.openPrice = openPrice;
      newPosition.openRebase = openRebase;
      newPosition.openBlock = uint64(block.number);

      positionSize = getPositionSize(input.margin * input.leverage, openPrice);
    }

    _positionIdCounter.increment();
    uint256 positionId = _positionIdCounter.current();
    _positions[positionId] = newPosition;

    emit OpenPosition(positionId, newPosition, positionSize);
  }

  function _openPosition(
    bytes32 tradingPairId,
    uint256 margin,
    uint256 cexPrice,
    uint256 leverage,
    uint256 direction
  ) internal returns (uint256 openPrice, uint256 openRebase) {
    _rebase();

    uint256 positionAmount = margin * leverage;
    bool isLong = isDirectionLong(direction);
    {
      uint256 poolLongAmount = poolLongAmount;
      uint256 poolShortAmount = poolShortAmount;

      if (isLong) {
        poolLongAmount += positionAmount;
      } else {
        poolShortAmount += positionAmount;
      }

      require(
        poolLongAmount.diff(poolShortAmount) <=
          Price.mulE4(poolLiquidity, prohibitOpenDelta),
        "IV-NPOS" // Invalid Nacked position
      );

      uint16 lpDiffDeviation = getLpDiffDivation(
        isLong,
        poolLongAmount,
        poolShortAmount
      );

      uint16 ladderDevition = getLadderDivation(positionAmount);

      uint256 finalDevition = ladderDevition > lpDiffDeviation
        ? ladderDevition
        : lpDiffDeviation;

      openPrice = isLong
        ? cexPrice + Price.mulE4(cexPrice, finalDevition)
        : cexPrice - Price.mulE4(cexPrice, finalDevition);
    }

    uint256 positionSize = Price.divE18(positionAmount, openPrice);

    TradingPair memory tradingPair = tradingPairOf(tradingPairId); // Need to be optimized

    if (isLong) {
      tradingPair.totalLongSize += positionSize;
      _updatePoolLongAmount(positionAmount, 0);
      openRebase = accumulatedPoolRebaseLong;
    } else {
      tradingPair.totalShortSize += positionSize;
      _updatePoolShortAmount(positionAmount, 0);
      openRebase = accumulatedPoolRebaseShort;
    }

    _updateTradingPair(tradingPairId, tradingPair);
  }

  function addMargin(uint256 positionId, uint256 margin) external {
    Position memory position = _positions[positionId];
    _requirePositionOpened(position.openBlock);

    require(msg.sender == position.owner, "O-O"); // Only Owner
    _requireTradingPairActive(position.tradingPairId);
    _chargePoolToken(msg.sender, margin);

    _positions[positionId].extraMargin += margin;

    uint256 totalMargin = position.initMargin +
      _positions[positionId].extraMargin;
    emit AddMargin(positionId, margin, totalMargin);
  }

  function closePosition(ClosePositionInput memory input) external {
    Position memory position = _positions[input.positionId];
    _requirePositionOpened(position.openBlock);

    _requireCallerIsOwnerOrValidExecutor(position.owner);

    _requireTradingPairActive(position.tradingPairId);

    _requireValidCexPriceAndValidSignature(
      uint256(CexUsage.ClosePosition),
      position.tradingPairId,
      input.cexPrice,
      input.signTimestamp,
      input.signature
    );

    _rebase();

    TradingPair memory tradingPair = tradingPairOf(position.tradingPairId);

    bool isClosedByExecutor = msg.sender != position.owner;
    PositionCloseInfo memory positionCloseInfo = getPositionValue(
      isClosedByExecutor,
      input.cexPrice,
      position,
      tradingPair
    );

    _updateTradingPair(position.tradingPairId, tradingPair);

    delete _positions[input.positionId];

    uint256 totalMargin = position.initMargin + position.extraMargin;
    if (positionCloseInfo.transferOut > (poolLiquidity + totalMargin)) {
      positionCloseInfo.transferOut = poolLiquidity + totalMargin;
    }

    if (positionCloseInfo.transferOut > 0 && input.closeType != 3) {
      _sendPoolToken(position.owner, positionCloseInfo.transferOut);
    }

    uint256 protocolFee = Price.mulE4(
      (positionCloseInfo.closeFee + positionCloseInfo.fundingFee),
      protocolFeeRate
    );
    _mintLpByPoolToken(protocolFee);

    if (input.closeType == 3) {
      _editPoolLiquidity(totalMargin + positionCloseInfo.transferOut, 0);
    } else {
      _editPoolLiquidity(totalMargin, positionCloseInfo.transferOut);
    }

    IERC20(poolToken).safeTransfer(vault, positionCloseInfo.serviceFee);

    positionCloseInfo.closeType = input.closeType;
    positionCloseInfo.positionId = input.positionId;
    positionCloseInfo.closePrice = input.cexPrice;
    positionCloseInfo.executor = (msg.sender != position.owner)
      ? msg.sender
      : address(0);

    emit ClosePosition(positionCloseInfo);
    emit LiquidityChange(
      poolLiquidity,
      totalSupply(),
      Price.lpTokenPrice(totalSupply(), poolLiquidity)
    );
  }

  function exit(uint256 positionId) external {
    _rebase();
    Position memory position = _positions[positionId];
    _requirePositionOpened(position.openBlock);

    _requireCallerIsOwnerOrValidExecutor(position.owner);
    _requireTradingPairNotActive(position.tradingPairId);

    bool isClosedByExecutor = msg.sender != position.owner;
    uint256 executorFee;
    if (isClosedByExecutor) {
      executorFee = _chargeExecutorFee(closePositionGasUsage);
    }

    uint256 positionAmount = position.initMargin * position.leverage;
    if (isDirectionLong(position.direction)) {
      _updatePoolLongAmount(0, positionAmount);
    } else {
      _updatePoolShortAmount(0, positionAmount);
    }

    _sendPoolToken(
      position.owner,
      position.initMargin + position.extraMargin - executorFee
    );

    delete _positions[positionId];
    emit Exit(positionId, msg.sender);
  }

  function execPreBill(ExecPreBillInput memory input) external {
    Position memory position = _positions[input.positionId];
    _requirePositionNotOpened(position.openBlock);

    _requireTradingPairActive(position.tradingPairId);
    _requireCallerIsOwnerOrValidExecutor(position.owner);

    _requireValidCexPriceAndValidSignature(
      uint256(CexUsage.OpenPosition),
      position.tradingPairId,
      input.cexPrice,
      input.signTimestamp,
      input.signature
    );

    uint256 executorFee;
    bool isClosedByExecutor = msg.sender != position.owner;

    if (isClosedByExecutor) {
      executorFee = _chargeExecutorFee(execPreBillGasUsage);
    }

    uint256 initMarginWithoutExecutorFee = position.initMargin - executorFee;
    (uint256 openPrice, uint256 openRebase) = _openPosition(
      position.tradingPairId,
      initMarginWithoutExecutorFee,
      input.cexPrice,
      position.leverage,
      position.direction
    );

    position.openPrice = openPrice;
    position.openRebase = openRebase;
    position.openBlock = uint64(block.number);
    position.initMargin = initMarginWithoutExecutorFee;

    _positions[input.positionId].openPrice = openPrice;
    _positions[input.positionId].openRebase = openRebase;
    _positions[input.positionId].openBlock = uint64(block.number);
    _positions[input.positionId].initMargin = initMarginWithoutExecutorFee;

    address executor = (msg.sender != position.owner) ? msg.sender : address(0);

    uint256 positionSize = getPositionSize(
      initMarginWithoutExecutorFee * position.leverage,
      openPrice
    );
    emit ExecPreBill(
      input.positionId,
      position,
      executor,
      executorFee,
      positionSize
    );
  }

  function cancelPreBill(uint256 positionId) public {
    Position memory position = _positions[positionId];

    _requirePositionNotOpened(position.openBlock);
    _requireCallerIsOwnerOrValidExecutor(position.owner);
    _sendPoolToken(position.owner, position.initMargin);

    delete _positions[positionId];
    emit CancelPrebill(positionId);
  }

  function _chargeExecutorFee(uint256 baseGasUsage) internal returns (uint256) {
    // Step 1: Get charged gas
    uint256 usedGasAmount = baseGasUsage +
      Price.mulE4(baseGasUsage, executorFeeRate);

    // Step 2: Gas mainCrypto/poolToken price
    uint256 mainCryptoPriceToPoolToken = uint256(
      AggregatorV2V3Interface(cryptocurrencyToPoolTokenOracle).latestAnswer()
    );

    // Step 3: Calculate executor fee in gas amount and pool token
    uint256 finalExecutorFeeInGasAmount = usedGasAmount * tx.gasprice;
    uint256 finalExecutorFeeInPoolToken;
    if (18 >= poolTokenDecimals) {
      finalExecutorFeeInPoolToken = isCryptocurrencyToPoolTokenReverted
        ? (finalExecutorFeeInGasAmount *
          (10 ** cryptocurrencyToPoolTokenOracleDecimals)) /
          mainCryptoPriceToPoolToken
        : (finalExecutorFeeInGasAmount * mainCryptoPriceToPoolToken) /
          (10 ** cryptocurrencyToPoolTokenOracleDecimals);
    }

    // Step 4: Send BNB to executor
    payable(msg.sender).transfer(finalExecutorFeeInGasAmount);

    return finalExecutorFeeInPoolToken;
  }

  function _requireValidCexPriceAndValidSignature(
    uint256 cexUsage,
    bytes32 tradingPairId,
    uint256 cexPrice,
    uint256 signTimestamp,
    bytes memory signature
  ) internal {
    require(!_signatures[signTimestamp], "Used SIG"); // Used SIG
    _signatures[signTimestamp] = true;

    // Verify CexPrice
    uint256 dexPrice = uint256(
      AggregatorV2V3Interface(_getTradingPairOracle(tradingPairId))
        .latestAnswer()
    );

    dexPrice = Price.convertDecimal(
      dexPrice,
      _getTradingPairOracleDecimals(tradingPairId),
      18
    );

    uint256 priceDelta = dexPrice.diff(cexPrice);

    require(
      ((priceDelta * 100) / dexPrice) < cexPriceToleranceDeviation,
      "IV-CP" //Invalid CexPrice
    );

    // Verify SIG
    uint256 blockTimestamp = block.timestamp * 1000;
    require(
      signTimestamp <= blockTimestamp &&
        blockTimestamp - signTimestamp <= cexPriceLatency * 1000,
      "IV-SIGTS" //Invalid SIG Timestamp
    );

    bytes32 hash = keccak256(
      abi.encodePacked(
        "CexPrice",
        msg.sender,
        cexUsage,
        tradingPairId,
        cexPrice,
        uint64(signTimestamp)
      )
    );

    address signer = hash.toEthSignedMessageHash().recover(signature);
    require(isValidExecutor(signer), "IV-SIG"); //Invalid SIG
  }

  function _requireCallerIsOwnerOrValidExecutor(address owner) internal view {
    require(
      msg.sender == owner || isValidExecutor(msg.sender),
      "O-O/E" // Only Oner or Executor
    );
  }

  function _requirePositionOpened(uint256 openBlock) internal pure {
    require(openBlock > 0, "IV-NOP"); // Not Opened
  }

  function _requirePositionNotOpened(uint256 openBlock) internal pure {
    require(openBlock == 0, "IV-OP"); // Opened
  }

  function isDirectionLong(uint256 direction) public pure returns (bool) {
    return direction == uint256(Direction.Long);
  }

  function getPositionSize(
    uint256 positionAmount,
    uint256 openPrice
  ) public pure returns (uint256) {
    return Price.divE18(positionAmount, openPrice);
  }

  function getPositionValue(
    bool isClosedByExecutor,
    uint256 cexPrice,
    Position memory position,
    TradingPair memory tradingPair
  ) public returns (PositionCloseInfo memory positionCloseInfo) {
    uint256 positionAmount = position.initMargin * position.leverage;
    uint256 positionSize = getPositionSize(positionAmount, position.openPrice);

    positionCloseInfo.pnl = Price.mulE18(
      positionSize,
      cexPrice.diff(position.openPrice)
    );

    {
      uint256 serviceFeeRate = ((block.number - position.openBlock) <=
        minHoldingBlocks)
        ? minHoldingBlocksFeeRate
        : serviceFeeRate;

      positionCloseInfo.serviceFee = Price.mulE4(
        positionAmount,
        serviceFeeRate
      );

      positionCloseInfo.closeFee = Price.mulE4(positionAmount, closeFeeRate);
    }

    if (isClosedByExecutor) {
      positionCloseInfo.executorFee = _chargeExecutorFee(closePositionGasUsage);
    }

    bool isLong = isDirectionLong(position.direction);

    if (isLong) {
      positionCloseInfo.fundingFee = Price.calFundingFee(
        positionAmount,
        (accumulatedPoolRebaseLong - position.openRebase)
      );

      tradingPair.totalLongSize -= positionSize;
      _updatePoolLongAmount(0, positionAmount);
    } else {
      positionCloseInfo.fundingFee = Price.calFundingFee(
        positionAmount,
        (accumulatedPoolRebaseShort - position.openRebase)
      );

      tradingPair.totalShortSize -= positionSize;
      _updatePoolShortAmount(0, positionAmount);
    }

    positionCloseInfo.isProfit = (cexPrice >= position.openPrice) == isLong;

    positionCloseInfo.transferOut = positionCloseInfo
      .isProfit
      .addOrSub2Zero(
        position.initMargin + position.extraMargin,
        positionCloseInfo.pnl
      )
      .sub2Zero(positionCloseInfo.closeFee)
      .sub2Zero(positionCloseInfo.fundingFee)
      .sub2Zero(positionCloseInfo.serviceFee)
      .sub2Zero(positionCloseInfo.executorFee);
  }

  function getLpDiffDivation(
    bool isLong,
    uint256 poolLongAmount,
    uint256 poolShortAmount
  ) public view returns (uint16 devitaion) {
    if (
      (poolLongAmount > poolShortAmount) == (isLong) ||
      (poolLongAmount < poolShortAmount) == (!isLong)
    ) {
      uint256 lpDiffRatio = Price.divE18(
        poolLongAmount.diff(poolShortAmount),
        poolLiquidity
      );

      LadderDeviation memory deviationInfo = lpDiffDeviation(0);
      while (deviationInfo.next < lpDiffRatio) {
        deviationInfo = lpDiffDeviation(deviationInfo.next);
      }
      devitaion = deviationInfo.deviationRate;
    }
  }

  function getLadderDivation(
    uint256 positionAmount
  ) public view returns (uint16) {
    LadderDeviation memory deviationInfo = ladderDeviation(0);

    while (deviationInfo.next < positionAmount) {
      deviationInfo = ladderDeviation(deviationInfo.next);
    }

    return deviationInfo.deviationRate;
  }

  function getPosition(
    uint256 positionId
  ) external view returns (Position memory) {
    return _positions[positionId];
  }
}


// File: contracts/Pool/PoolStorageHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol";

import "./interface/IPoolStorageHandler.sol";
import "./library/TradingHelper.sol";
import "./PoolStructs.sol";

contract PoolStorageHandler is IPoolStorageHandler, Context, Ownable {
  uint256 public poolLiquidity;
  uint256 public poolLongAmount;
  uint256 public poolShortAmount;
  uint256 public accumulatedPoolRebaseLong;
  uint256 public accumulatedPoolRebaseShort;
  uint64 public lastRebaseBlock;

  uint240 public minOpenAmount;
  uint16 public executorFeeRate;

  address public poolToken;
  uint8 public poolTokenDecimals;
  uint88 public closePositionGasUsage;

  address public official;
  bool public isLiquidityProviderLimited;
  uint88 public execPreBillGasUsage;

  uint16 public removeLiquidityFeeRate;
  uint16 public cexPriceToleranceDeviation;
  uint16 public prohibitOpenDelta;
  uint16 public protocolFeeRate;
  uint16 public serviceFeeRate;
  uint16 public closeFeeRate;
  uint8 public minLeverage;
  uint16 public maxLeverage;
  uint16 public imbalanceThreshold;
  uint32 public rebasecCoefficient;
  uint64 public cexPriceLatency;

  address public cryptocurrencyToPoolTokenOracle;
  uint8 public cryptocurrencyToPoolTokenOracleDecimals;
  bool public isCryptocurrencyToPoolTokenReverted;
  uint16 public minHoldingBlocks;
  uint16 public minHoldingBlocksFeeRate;

  address public vault;

  mapping(uint240 => LadderDeviation) private _ladderDeviations;
  mapping(uint240 => LadderDeviation) private _lpDiffDeviations;
  mapping(address => bool) private _validExecutors;
  mapping(address => bool) private _validLiquidityProviders;

  constructor(
    address poolToken_,
    address cryptocurrencyToPoolTokenOracle_,
    bool isCryptocurrencyToPoolTokenReverted_
  ) {
    poolToken = poolToken_;
    poolTokenDecimals = ERC20(poolToken_).decimals();

    cryptocurrencyToPoolTokenOracle = cryptocurrencyToPoolTokenOracle_;
    cryptocurrencyToPoolTokenOracleDecimals = AggregatorV2V3Interface(
      cryptocurrencyToPoolTokenOracle_
    ).decimals();
    isCryptocurrencyToPoolTokenReverted = isCryptocurrencyToPoolTokenReverted_;
  }

  function ladderDeviation(
    uint240 key
  ) public view returns (LadderDeviation memory) {
    return _ladderDeviations[key];
  }

  function lpDiffDeviation(
    uint240 key
  ) public view returns (LadderDeviation memory) {
    return _lpDiffDeviations[key];
  }

  function isValidExecutor(address addr) public view returns (bool) {
    return _validExecutors[addr];
  }

  function isValidLiquidityProvider(address addr) public view returns (bool) {
    return _validLiquidityProviders[addr];
  }

  function setPoolParams(SetPoolParamsInput calldata input) external onlyOwner {
    executorFeeRate = uint16(input.executorFeeRate);
    closePositionGasUsage = uint88(input.closePositionGasUsage);
    execPreBillGasUsage = uint88(input.execPreBillGasUsage);
    minOpenAmount = uint128(input.minOpenAmount);
    official = input.official;
    vault = input.vault;
    removeLiquidityFeeRate = uint16(input.removeLiquidityFeeRate);
    isLiquidityProviderLimited = input.isLiquidityProviderLimited;
    cexPriceToleranceDeviation = uint16(input.cexPriceToleranceDeviation);
    prohibitOpenDelta = uint16(input.prohibitOpenDelta);
    protocolFeeRate = uint16(input.protocolFeeRate);
    serviceFeeRate = uint16(input.serviceFeeRate);
    closeFeeRate = uint16(input.closeFeeRate);
    minLeverage = uint8(input.minLeverage);
    maxLeverage = uint16(input.maxLeverage);
    imbalanceThreshold = uint16(input.imbalanceThreshold);
    cexPriceLatency = uint64(input.cexPriceLatency);
    rebasecCoefficient = uint32(input.rebasecCoefficient);
    minHoldingBlocks = uint16(input.minHoldingBlocks);
    minHoldingBlocksFeeRate = uint16(input.minHoldingBlocksFeeRate);

    emit SetPoolParams(input);
  }

  function _rebase() internal {
    CalRebaseDeltaInput memory calRebaseDeltaInput = CalRebaseDeltaInput({
      poolLongAmount: poolLongAmount,
      poolShortAmount: poolShortAmount,
      poolLiquidity: poolLiquidity,
      imbalanceThreshold: imbalanceThreshold,
      lastRebaseBlock: lastRebaseBlock,
      rebasecCoefficient: rebasecCoefficient
    });

    (uint256 rebaseLongDelta, uint256 rebaseShortDelta) = TradingHelper
      .calRebaseDelta(calRebaseDeltaInput);

    accumulatedPoolRebaseLong = accumulatedPoolRebaseLong + rebaseLongDelta;
    accumulatedPoolRebaseShort = accumulatedPoolRebaseShort + rebaseShortDelta;

    lastRebaseBlock = uint64(block.number);

    emit UpdatePoolRebaseLongShort(
      accumulatedPoolRebaseLong,
      accumulatedPoolRebaseShort,
      block.number
    );
  }

  function _editPoolLiquidity(
    uint256 addAmount,
    uint256 removeAmount
  ) internal {
    poolLiquidity = poolLiquidity + addAmount - removeAmount;
  }

  function _updatePoolLongAmount(
    uint256 addAmount,
    uint256 removeAmount
  ) internal {
    poolLongAmount = poolLongAmount + addAmount - removeAmount;
    emit UpdatePoolLongShortAmount(poolLongAmount, poolShortAmount);
  }

  function _updatePoolShortAmount(
    uint256 addAmount,
    uint256 removeAmount
  ) internal {
    poolShortAmount = poolShortAmount + addAmount - removeAmount;
    emit UpdatePoolLongShortAmount(poolLongAmount, poolShortAmount);
  }

  function setLadderDeviations(
    SetLadderDeviationInput[] memory inputs
  ) public onlyOwner {
    SetLadderDeviationInput memory input;

    for (uint256 i; i < inputs.length; ++i) {
      input = inputs[i];
      require(input.next > input.amount, "IV-NXT"); // Invalid Next

      LadderDeviation memory deviationInfo = LadderDeviation({
        deviationRate: uint16(input.deviationRate),
        next: uint240(input.next)
      });

      _ladderDeviations[uint240(input.amount)] = deviationInfo;
    }

    emit SetLadderDeviations(inputs);
  }

  function setLpDiffDeviations(
    SetLadderDeviationInput[] memory inputs
  ) public onlyOwner {
    SetLadderDeviationInput memory input;

    for (uint256 i; i < inputs.length; ++i) {
      input = inputs[i];
      require(input.next > input.amount, "IV-NXT"); // Invalid Next

      LadderDeviation memory deviationInfo = LadderDeviation({
        deviationRate: uint16(input.deviationRate),
        next: uint240(input.next)
      });
      _lpDiffDeviations[uint240(input.amount)] = deviationInfo;
    }

    emit SetLpDiffDeviations(inputs);
  }

  function setValidExecutors(
    address[] calldata addrs,
    bool isValid
  ) public onlyOwner {
    for (uint256 i = 0; i < addrs.length; ++i) {
      _validExecutors[addrs[i]] = isValid;
      emit SetIsValidExecutor(addrs[i], isValid);
    }
  }

  function setValidLiquidityProvier(
    address addr,
    bool isValid
  ) public onlyOwner {
    _validLiquidityProviders[addr] = isValid;
    emit SetisValidLiquidityProvider(addr, isValid);
  }
}


// File: contracts/Pool/PoolStructs.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

enum Direction {
  Long,
  Short
}

enum CexUsage {
  OpenPosition,
  ClosePosition
}

struct LiquidityChangeRequest {
  address user;
  uint64 dueDate;
  bool isAdd;
  uint256 amount;
}

struct DailyLiquidityRecord {
  bool isRecorded;
  uint256 accumAddAmount;
  uint256 accumRemoveAmount;
  uint256 poolLiquiditySnapshot;
  uint256 totalLPTokenSupplySnapshot;
  uint256 newLPTokenAmount;
  uint256 removePoolTokenAmount;
  uint256 removeLiquidityFee;
}

struct TradingPair {
  address oracleAddr;
  uint8 oracleDecimals;
  uint256 totalLongSize;
  uint256 totalShortSize;
}

struct Strategy {
  uint16 strategyType;
  uint240 value;
}

struct Position {
  bytes32 tradingPairId;
  uint256 openPrice;
  uint256 initMargin;
  uint256 extraMargin;
  uint256 openRebase;
  address owner;
  uint64 openBlock;
  uint16 leverage;
  uint8 direction;
}

struct PositionCloseInfo {
  uint256 positionId;
  uint256 closePrice;
  address executor;
  bool isProfit;
  uint256 closeType;
  uint256 transferOut;
  uint256 closeFee;
  uint256 serviceFee;
  uint256 fundingFee;
  uint256 executorFee;
  uint256 pnl;
}

struct LadderDeviation {
  uint16 deviationRate;
  uint240 next;
}

// Input Series
struct OpenPositionInput {
  bytes32 tradingPairId;
  uint256 margin;
  uint256 preBillPrice;
  uint256 cexPrice;
  uint256 signTimestamp;
  uint256 leverage;
  uint256 direction;
  bytes signature;
}

struct ClosePositionInput {
  uint256 positionId;
  uint256 cexPrice;
  uint256 signTimestamp;
  bytes signature;
  uint256 closeType;
}

struct ExecPreBillInput {
  uint256 positionId;
  uint256 cexPrice;
  uint256 signTimestamp;
  bytes signature;
}

struct CalRebaseDeltaInput {
  uint256 poolLongAmount;
  uint256 poolShortAmount;
  uint256 poolLiquidity;
  uint256 imbalanceThreshold;
  uint256 lastRebaseBlock;
  uint256 rebasecCoefficient;
}

struct SetPoolParamsInput {
  uint256 executorFeeRate;
  uint256 closePositionGasUsage;
  uint256 execPreBillGasUsage;
  uint256 minOpenAmount;
  address official;
  uint256 removeLiquidityFeeRate;
  bool isLiquidityProviderLimited;
  uint256 cexPriceToleranceDeviation;
  uint256 prohibitOpenDelta;
  uint256 protocolFeeRate;
  uint256 serviceFeeRate;
  uint256 closeFeeRate;
  uint256 minLeverage;
  uint256 maxLeverage;
  uint256 imbalanceThreshold;
  uint256 rebasecCoefficient;
  uint256 cexPriceLatency;
  uint256 minHoldingBlocks;
  uint256 minHoldingBlocksFeeRate;
  address vault;
}

struct SetLadderDeviationInput {
  uint256 amount;
  uint256 deviationRate;
  uint256 next;
}


// File: contracts/Pool/PoolTradingPairHandler.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol";

import "./interface/IPoolTradingPairHandler.sol";
import "./PoolLiquidityHandler.sol";

contract PoolTradingPairHandler is
  IPoolTradingPairHandler,
  PoolLiquidityHandler
{
  int32 private constant STANDARD_ERC20_DECIMALS = 18;

  mapping(bytes32 => TradingPair) private _tradingPairs;

  constructor(
    string memory name_,
    string memory symbol_,
    address poolToken_,
    address cryptocurrencyToPoolTokenOracle_,
    bool isCryptocurrencyToPoolTokenReverted_
  )
    PoolLiquidityHandler(
      name_,
      symbol_,
      poolToken_,
      cryptocurrencyToPoolTokenOracle_,
      isCryptocurrencyToPoolTokenReverted_
    )
  {}

  function createTradingPair(address oracleAddr) external onlyOwner {
    require(oracleAddr != address(0), "IV-ORCL"); //Invalid Oracle

    bytes32 tradingPairId = getTradingPairId(oracleAddr);
    _requireTradingPairNotActive(tradingPairId);

    uint8 oracleDecimals = AggregatorV2V3Interface(oracleAddr).decimals();

    _tradingPairs[tradingPairId].oracleAddr = oracleAddr;
    _tradingPairs[tradingPairId].oracleDecimals = oracleDecimals;

    emit CreateTradingPair(oracleAddr, tradingPairId);
  }

  function _updateTradingPair(
    bytes32 tradingPairId,
    TradingPair memory tradingPair
  ) internal {
    _tradingPairs[tradingPairId].totalLongSize = tradingPair.totalLongSize;
    _tradingPairs[tradingPairId].totalShortSize = tradingPair.totalShortSize;

    emit UpdatedTradingPair(tradingPairId, tradingPair);
  }

  function deleteTradingPair(bytes32 tradingPairId) external onlyOwner {
    _requireTradingPairActive(tradingPairId);

    delete _tradingPairs[tradingPairId];
    emit DeleteTradingPair(tradingPairId);
  }

  function getTradingPairId(address oracleAddr) public view returns (bytes32) {
    return keccak256(abi.encode(poolToken, oracleAddr));
  }

  function _requireTradingPairNotActive(bytes32 tradingPairId) internal view {
    require(
      _tradingPairs[tradingPairId].oracleAddr == address(0),
      "IV-AP" // Already Active Pair
    );
  }

  function _requireTradingPairActive(bytes32 tradingPairId) internal view {
    require(
      _tradingPairs[tradingPairId].oracleAddr != address(0),
      "IV-IAP" // Inactive Pair
    );
  }

  function _getTradingPairOracle(
    bytes32 tradingPairId
  ) internal view returns (address) {
    return _tradingPairs[tradingPairId].oracleAddr;
  }

  function _getTradingPairOracleDecimals(
    bytes32 tradingPairId
  ) internal view returns (uint8) {
    return _tradingPairs[tradingPairId].oracleDecimals;
  }

  function tradingPairOf(
    bytes32 tradingPairId
  ) public view returns (TradingPair memory) {
    return _tradingPairs[tradingPairId];
  }
}

