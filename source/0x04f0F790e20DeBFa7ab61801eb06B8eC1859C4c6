// Lume (LUME) - The coin of the Luminous Network

// Let's reach the moon ;-)

// Manually mints and burns

pragma solidity ^0.8.4;
//SPDX-License-Identifier: UNLICENSED

contract Lume {
    uint public totalSupply = 420000000 * 10 ** 18;
    string public name = "Lume";
    string public symbol = "LUME";
    uint public decimals = 18;
    
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);

    constructor() {
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }

    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'Balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'Balance too low');
        require(allowance[from][msg.sender] >= value, 'Allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function mint(address to, uint value) public returns(bool) {
        require(to != address(0), 'Cannot mint to the zero address');

        totalSupply += value;
        balances[to] += value;
        emit Transfer(address(0), to, value);
        return true;
    }

    function burn(address from, uint value) public returns(bool) {
        require(from != address(0), 'Cannot burn from the zero address');
        
        uint fromBalance = balances[from];
        
        require(fromBalance >= value, 'Burn ammount exceeds balance');

        unchecked {
            balances[from] -= value;
        }
        
        totalSupply -= value;
        emit Transfer(from, address(0), value);
        return true;
    }
}