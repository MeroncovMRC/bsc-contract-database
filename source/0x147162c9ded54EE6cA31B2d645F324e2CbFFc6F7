{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"Coyote.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\nimport \"./Ownable.sol\";\nimport \"./IPancakeRouter02.sol\";\nimport \"./IPancakeV2Factory.sol\";\n\ncontract Coyote is IERC20, IERC20Metadata, Context, Ownable { \n    struct UserBalanceVolume {\n        uint256 amount;\n        uint256 lastUpdate;\n    }\n\n    uint256 private _previousVolume;\n    uint256 private _volume;\n    uint256 private _nextResetTimesamp;\n    uint256 private _previousResetTimestamp;\n    mapping(address =\u003e UserBalanceVolume) public userSellBalanceVolume;\n\n    string private _name;\n    string private _symbol;\n\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    mapping(address =\u003e uint256) private _rOwned;\n    mapping(address =\u003e uint256) private _tOwned;\n\n    uint256 private constant MAX = type(uint256).max;\n    uint256 private _tTotal = 2500000000000000 * 10**18;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    uint256 public constant FEE_DECIMALS = 1;\n\n    uint256 public _burnFee = 30;\n    uint256 private _previousBurnFee = _burnFee;\n\n    uint256 public _swapFee = 25;\n    uint256 private _previousSwapFee = _swapFee;\n\n    uint256 public _redistributeFee = 55;\n    uint256 private _previousRedistributeFee = _redistributeFee;\n\n    address public teamAddress;\n    address public reserveAddress;\n    address public publicSaleAddress;\n\n    address public constant ZERO_ADDRESS =\n        address(0x000000000000000000000000000000000000dEaD);\n\n    IPancakeRouter02 public immutable pancakeswapV2Router;\n    address public pancakeswapV2Pair;\n\n    mapping(address =\u003e bool) private _isPancakeswapV2Pair;\n\n    bool private inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 private numTokensSellToAddToLiquidity = 50000 * 10**18;\n\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n    event SwapETHForTokens(uint256 amountIn, address[] path);\n    event LiquidityFeeCollected(uint256 tokenAmount);\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(\n        address _teamAddress,\n        address _publicSaleAddress,\n        address _reserveAddress\n    ) {\n        _name = \"Coyote\";\n        _symbol = \"YOTE\";\n\n        _nextResetTimesamp = block.timestamp + 1 days;\n\n        teamAddress = _teamAddress;\n        publicSaleAddress = _publicSaleAddress;\n        reserveAddress = _reserveAddress;\n\n        // 50% will be burned instantly\n        _rTotal /= 2;\n        _tTotal /= 2;\n\n        uint256 onePercentT = _tTotal / 100;\n        uint256 onePercentR = _rTotal / 100;\n\n        // 44% for DEX Liquidity\n        _rOwned[_msgSender()] = onePercentR * 44;\n        _previousVolume += 25000000000000 * 10**18;\n\n        // 20% to Team\n        _rOwned[teamAddress] = onePercentR * 20;\n\n        // 31% for PublicSale\n        _rOwned[publicSaleAddress] = onePercentR * 31;\n\n        // 5% Reserve\n        _rOwned[reserveAddress] = onePercentR * 5;\n\n        // This address is for the Binance Smart Chain 0x10ED43C718714eb63d5aA57B78B54704E256024E\n        IPancakeRouter02 _pancakeswapV2Router = IPancakeRouter02(\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\n        );\n        // Create a uniswap pair for this new token\n        pancakeswapV2Pair = IPancakeV2Factory(_pancakeswapV2Router.factory())\n            .createPair(address(this), _pancakeswapV2Router.WETH());\n        _isPancakeswapV2Pair[pancakeswapV2Pair] = true;\n        // Set the rest of the contract variables\n        pancakeswapV2Router = _pancakeswapV2Router;\n\n        emit Transfer(address(0), _msgSender(), onePercentT * 44);\n        emit Transfer(address(0), teamAddress, onePercentT * 20);\n        emit Transfer(address(0), publicSaleAddress, onePercentT * 31);\n        emit Transfer(address(0), reserveAddress, onePercentT * 5);\n        emit Transfer(address(this), address(0x000000000000000000000000000000000000dEaD), _tTotal); // this is a transfer to represent the burn\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _tTotal;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance \u003e= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance \u003e= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        uint256 rAmount = tAmount * _getRate();\n        _rOwned[sender] -= rAmount;\n        _rTotal -= rAmount;\n        _tFeeTotal += tAmount;\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n        public\n        view\n        returns (uint256)\n    {\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\n        uint256 currentRate = _getRate();\n        if (!deductTransferFee) {\n            return tAmount * currentRate;\n        } else {\n            uint256[4] memory tValues = _getTValues(tAmount);\n            return tValues[0] * currentRate;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(\n            rAmount \u003c= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    function addPancakeswapV2PairAddress(address account) public onlyOwner {\n        _isPancakeswapV2Pair[account] = true;\n    }\n\n    function removePancakeswapV2PairAddress(address account) public onlyOwner {\n        _isPancakeswapV2Pair[account] = false;\n    }\n\n    function setBurnFee(uint256 fee) external onlyOwner {\n        _burnFee = fee;\n    }\n\n    function setLiquidityFeePercent(uint256 fee) external onlyOwner {\n        _swapFee = fee;\n    }\n\n    function setRedistributeFee(uint256 fee) external onlyOwner {\n        _redistributeFee = fee;\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    //to recieve ETH from pancakeswapV2Router when swaping\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function _reflectFee(uint256 tFee, uint256 rFee) private {\n        _rTotal -= rFee;\n        _tFeeTotal += tFee;\n    }\n\n    function _getTValues(uint256 tAmount)\n        private\n        view\n        returns (uint256[4] memory)\n    {\n        uint256[4] memory tValues;\n        tValues[1] = calculateRedistibuteFee(tAmount);\n        tValues[2] = calculateLiquidityFee(tAmount); \n        tValues[3] = calculateBurnFee(tAmount); \n        tValues[0] = tAmount - tValues[1] - tValues[2] - tValues[3]; \n        return tValues;\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply \u003c _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _takeLiquidity(uint256 tLiquidity, uint256 rLiquidity) private {\n        _rOwned[address(this)] += rLiquidity;\n        emit LiquidityFeeCollected(tLiquidity);\n    }\n\n    function _burn(uint256 tBurn, uint256 rBurn) private {\n        _tTotal -= tBurn;\n        _rTotal -= rBurn;\n\n        emit Transfer(msg.sender, ZERO_ADDRESS, tBurn);\n    }\n\n    function calculateRedistibuteFee(uint256 _amount)\n        private\n        view\n        returns (uint256)\n    {\n        return (_amount * _redistributeFee) / (10**FEE_DECIMALS * 100);\n    }\n\n    function calculateLiquidityFee(uint256 _amount)\n        private\n        view\n        returns (uint256)\n    {\n        return (_amount * _swapFee) / (10**FEE_DECIMALS * 100);\n    }\n\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\n        return (_amount * _burnFee) / (10**FEE_DECIMALS * 100);\n    }\n\n    function removeAllFee() private {\n        if (_redistributeFee == 0 \u0026\u0026 _swapFee == 0 \u0026\u0026 _burnFee == 0) return;\n\n        _previousRedistributeFee = _redistributeFee;\n        _previousSwapFee = _swapFee;\n        _previousBurnFee = _burnFee;\n\n        _redistributeFee = 0;\n        _swapFee = 0;\n        _burnFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _redistributeFee = _previousRedistributeFee;\n        _swapFee = _previousSwapFee;\n        _burnFee = _previousBurnFee;\n    }\n\n    function isPancakeswapV2PairAddress(address account)\n        public\n        view\n        returns (bool)\n    {\n        return _isPancakeswapV2Pair[account];\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\u0027t get caught in a circular liquidity event.\n        // also, don\u0027t swap \u0026 liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool overMinTokenBalance = contractTokenBalance \u003e=\n            numTokensSellToAddToLiquidity;\n        if (\n            overMinTokenBalance \u0026\u0026\n            !inSwapAndLiquify \u0026\u0026\n            !_isPancakeswapV2Pair[from] \u0026\u0026\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        // indicates if fee should be deducted from transfer\n        bool takeFee;\n\n        // If sender ot recipient is not owner and is not contract fee must not be taken\n        // Take fee only in buying or selling operation\n        if (from != address(this) \u0026\u0026 to != address(this) \u0026\u0026 from != owner() \u0026\u0026 to != owner()) {\n            // buy\n            if (_isPancakeswapV2Pair[from] \u0026\u0026 to != address(pancakeswapV2Router)) {\n                takeFee = true;\n            }\n            // sell \n            else if (_isPancakeswapV2Pair[to]) {\n                takeFee = true;\n            }\n        }\n\n        // transfer amount, it will take tax, burn, liquidity, marketing fee\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        // split the contract balance into halves\n        uint256 half = contractTokenBalance / 2;\n        uint256 otherHalf = contractTokenBalance - half;\n\n        // capture the contract\u0027s current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // \u003c- this breaks the ETH -\u003e HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = pancakeswapV2Router.WETH();\n\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\n\n        // make the swap\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\n\n        // add the liquidity\n        pancakeswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        bool takeFee\n    ) public {\n        if (!takeFee) {\n            removeAllFee();\n        }\n\n        uint256 currentRate = _getRate();\n        if (takeFee) {\n            // sell\n            if (_isPancakeswapV2Pair[recipient]) {\n                if (_nextResetTimesamp \u003e= block.timestamp) {\n                    _volume += tAmount;\n\n                    userSellBalanceVolume[sender]\n                        .amount = userSellBalanceVolume[sender].lastUpdate \u003c=\n                        _nextResetTimesamp - 1 days\n                        ? tAmount\n                        : userSellBalanceVolume[sender].amount + tAmount;\n                } else {\n                    do {\n                        _previousResetTimestamp = _nextResetTimesamp;\n                        _nextResetTimesamp += 1 days;\n                    } while (_nextResetTimesamp \u003c block.timestamp);\n\n                    _previousVolume = _volume;\n                    _volume = tAmount;\n                    userSellBalanceVolume[sender].amount = tAmount;\n\n                }\n                userSellBalanceVolume[sender].lastUpdate = block.timestamp;\n                if (\n                    userSellBalanceVolume[sender].amount \u003e\n                    (_previousVolume * 5) / 100\n                ) {\n                    _redistributeFee = 295;\n                }\n            }\n\n            // tValues[0] -\u003e tTransferAmount -\u003e Token transfer amount less fees\n            // tValues[1] -\u003e tRedistributeFee -\u003e Redistribute amount\n            // tValues[2] -\u003e tLiquidity -\u003e Liquidity fee amount\n            // tValues[3] -\u003e tburnFee -\u003e Burn fee amount\n            uint256[4] memory tValues = _getTValues(tAmount);\n\n            // Collects liquidity tokens\n            _takeLiquidity(tValues[2], tValues[2] * currentRate);\n\n            // Burns tokens\n            _burn(tValues[3], tValues[3] * currentRate);\n\n            // Redistributes tokens\n            _reflectFee(tValues[1], tValues[1] * currentRate);\n            _redistributeFee = 55;\n\n            _rOwned[sender] -= (tAmount * currentRate);\n            _rOwned[recipient] += (tValues[0] * currentRate);\n\n            emit Transfer(sender, recipient, tValues[0]);\n        } else {\n            _rOwned[sender] -= (tAmount * currentRate);\n            _rOwned[recipient] += (tAmount * currentRate);\n            emit Transfer(sender, recipient, tAmount);\n        }\n\n        if (!takeFee) {\n            restoreAllFee();\n        }\n    }\n\n\n    /// @notice Getter for previous volume amount\n    /// @return amount uint256 volume amount\n    function getPreviousVolume() public view returns (uint256 amount) {\n        return _previousVolume;\n    }\n\n\n    /// @notice Getter for next reset timestamp\n    /// @return timestamp uint256 reset timestamp\n    function getNextResetTimestamp() public view returns (uint256 timestamp) {\n        return _nextResetTimesamp;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IPancakeRouter01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IPancakeRouter02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IPancakeRouter01.sol\";\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"IPancakeV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}}