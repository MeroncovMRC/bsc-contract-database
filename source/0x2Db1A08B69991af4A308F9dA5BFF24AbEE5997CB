// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

interface IERC20 {
 
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Ownable {
    address public owner;

    constructor() {
        owner = msg.sender;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function transferOwnership(address newOwner) public onlyOwner {
        if (newOwner != address(0)) {
            owner = newOwner;
        }
    }

}

contract BxcBuy is Ownable  {

    using SafeMath for uint256;

    address public token;
    uint256 public buyId;
    uint256 public token_price;

    constructor(address token_address, uint256 price) {
       token = token_address;
       token_price = price;
    } 

    struct Order {
        address user_address;
        uint256 coinspark_amt;
    }

    mapping(uint256 => Order) public buyhistory;

    event BuyRecord(address indexed buyer_address, uint256 bnb_amt, uint256 coinspark_amt, uint256 buyId);

    function buyToken (uint256 numberOfToken) public payable returns (uint256 id) {
        uint256 amt = msg.value.div(token_price).mul(1 ether);
        require(numberOfToken >= amt && numberOfToken < amt + 1000000000000000000, "Invaild token amount.");
        
        id = ++buyId;
        buyhistory[id].user_address = msg.sender;
        buyhistory[id].coinspark_amt = numberOfToken;
        emit BuyRecord(msg.sender, msg.value, numberOfToken, buyId);
        
        IERC20(token).transfer(msg.sender, numberOfToken);
    }


    function endSale() public onlyOwner  {
        uint256 total_amt = IERC20(token).balanceOf(address(this));
        IERC20(token).transfer(msg.sender, total_amt);
    }

    function withdrawFees (address payable _to, uint256 _amount) public onlyOwner {
        _to.transfer(_amount);
    }

    function updateBxcPrice (uint256 new_price) public onlyOwner {
        token_price = new_price;
    }

}