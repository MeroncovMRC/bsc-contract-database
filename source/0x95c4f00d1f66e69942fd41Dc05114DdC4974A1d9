
// File: contracts/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity 0.8.17;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/LiquidityProvider.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;
import "./IERC20.sol";


contract LiquidityProvider {
    address constant _TOKEN = 0x35AAC82F22260A8bDE386DFa158CE00A42EFF47a;
    address constant _USDT = 0x55d398326f99059fF775485246999027B3197955;
    uint256 _IN_USDT = 0.001 ether;
    address OWNER;

    constructor() {
      OWNER = msg.sender;
    }

    function swapTokenToUSDT (address to, uint256 amount) external {
      IERC20(_TOKEN).transferFrom(msg.sender, address(this), amount);
      IERC20(_USDT).transfer(to, _IN_USDT * (amount / 10 ** 18));
    }

    function swapUSDTtoToken (address to, uint256 amount) external {
      IERC20(_USDT).transferFrom(msg.sender, address(this), amount);
      IERC20(_TOKEN).transfer(to, (amount / _IN_USDT) * 10 ** 18);
    }
    

    function changeOwner(address _address) external {
      require(OWNER == msg.sender, 'Error');
      OWNER = _address;
    }

    function changePrice (uint price) external {
      require(_IN_USDT >= 0.001 ether, 'Low price');
      _IN_USDT = price;
    }

    receive() external payable {}
    fallback() external payable {}
}

