// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    function preMineSupply() external view returns (uint256);

    function maxSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

library SafeBEP20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IBEP20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeBEP20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(
            value
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    function safeDecreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(
            value,
            "SafeBEP20: decreased allowance below zero"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IBEP20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(
            data,
            "SafeBEP20: low-level call failed"
        );
        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(
                abi.decode(returndata, (bool)),
                "SafeBEP20: BEP20 operation did not succeed"
            );
        }
    }
}

interface IUniswapV2Pair {
    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );
}

interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address);
}

interface IUniswapRouter {
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
}

interface IEllipsisSwap {
    function exchange_with_best_rate(
        address _from,
        address _to,
        uint256 _amount,
        uint256 _expected,
        address _receiver
    ) external returns (uint256);

    function exchange(
        address _pool,
        address _from,
        address _to,
        uint256 _amount,
        uint256 _expected,
        address _receiver
    ) external returns (uint256);
}

interface IVaultRegistry {
    function isVault(address _vault) external view returns (bool);
}

// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IStrategy {
  function balanceOfPool() external view returns (uint256);

  function balanceOfWant() external view returns (uint256);

  function totalAssets() external view returns (uint256);

  function deposit() external;

  function withdraw(uint256 _amount) external;

  function want() external returns (address want);

  function retire() external;

  function unirouter() external view returns (address); // ONLY FOR DUALSIDEDS!

  function publicHarvest() external view returns (bool);
}

interface IVault is IERC20 {
    function deposit(uint256 _amount) external returns (uint256 sharesMinted);

    function withdraw(uint256 _shares) external returns (uint256 wantWithdrawn);

    function want() external view returns (IERC20 _want);

    function strategy() external view returns (IStrategy strategy);

    function approve(address _spender, uint256 _amount) external returns (bool);

    function balanceOf(address _user) external view returns (uint256);

    function balance() external view returns (uint256);

    function setNewStrategy(address _newStrategy) external;

    function available() external returns (uint256);

    function getPricePerFullShare() external returns (uint256);

    function initializeVault(
        IStrategy _strategy,
        string memory _name,
        string memory _symbol,
        address _zapper,
        IERC20 _want
    ) external;
}

interface ILocker {
  function getTier(address user) external view returns (uint256);
}

// Custom errors to use across Liquidity Harvester
library Errors {
  error ZeroAddress();
  error ZeroAmount();
  error InvalidatedVault(address vault);
  error InvalidatedRouter(address router);
  error ZapInWithUnderlyingsOrLP();
  error OnlyZapper();
  error OnlyManagers();
  error OnlyStrategist();
  error OnlyVault();
  error OnlyKeepers();
  error UnauthorizedCaller();
  error GivenAddressIsNotWant(address notWant);
}

// Popular checks/validations across Liquidity Harvester

library Checks {
  function _validateAmount(uint256 amount) internal pure {
    if (amount == 0) {
      revert Errors.ZeroAmount();
    }
  }

  function _validateAddress(address _address) internal pure {
    if (_address == address(0)) {
      revert Errors.ZeroAddress();
    }
  }

  function _validateCaller(address caller, address expected) internal pure {
    if (caller != expected) {
      revert Errors.UnauthorizedCaller();
    }
  }

  function _validateWantOrNot(address want, address isWant) internal pure {
    if (want != isWant) {
      revert Errors.GivenAddressIsNotWant(isWant);
    }
  }
}

contract ZapperDualSided is ReentrancyGuard, Ownable, Pausable {
  using SafeBEP20 for IBEP20;
  using Checks for *;

  // Constants and immutables //
  uint256 private constant DEPOSIT_FEE_CAP = 100000; // 10%

  uint256 private constant FEE_DENOMINATOR = 1_000_000;

  IEllipsisSwap private constant ellipsisSwap =
    IEllipsisSwap(0xC0cD22471F7E923b10672A98793F68f041f607EB);

  ILocker public immutable locker;

  // Storage variables //

  // Vault registry for validating vaults
  IVaultRegistry public vaultRegistry;

  // Default deposit fee, it can be set by governance later
  uint256 public defaultDepositFee = 100; // denominated by 1_000_000, 0.01%

  // Smart wallet contract that will take the fee on user deposits
  address public smartWallet;

  // Registered/Validated Univ2 contracts that this zapper is compatible with
  // router ==> factory
  mapping(address => address) public registeredUniContracts;

  // Tier ==> deposit fee (1 silver, 2 gold)
  mapping(uint256 => uint256) public tierDepositFees;

  event ZappedIn(address sender, address vault, uint256 sharesZappedIn);
  event ZappedOut(address sender, address vault, uint256 shares);
  event ZappedOutBalancedAmounts(
    address sender,
    address vault,
    uint256 sharesZappedOut
  );
  event FeeTaken(address from, address token, uint256 amount);
  event DepositFeesUpdated(
    uint256 newDefaultDepositFee,
    uint256 newSilverDepositFee,
    uint256 newGoldDepositFee
  );
  event SmartWalletUpdated(address newSmartWallet);
  event NewRouterAndFactoryAdded(address router, address factory);

  constructor(
    address _vaultRegistry,
    address _smartWallet,
    address _locker
  ) {
    vaultRegistry = IVaultRegistry(_vaultRegistry);
    smartWallet = _smartWallet;
    locker = ILocker(_locker);

    registeredUniContracts[
      0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8 // biswap router
    ] = 0x858E3312ed3A876947EA49d572A7C42DE08af7EE; // biswap factory

    // default values
    tierDepositFees[1] = 50; // 0.0050%
    tierDepositFees[2] = 25; // 0.0025%
  }

  function pause() external onlyOwner {
    _pause();
  }

  function unpause() external onlyOwner {
    _unpause();
  }

  function zapIn(
    address fromToken,
    uint256 fromTokenAmount,
    uint256 fromTokenSwapAmount,
    address vault,
    bool useEllipsis // check it in the frontend then set this according to it
  ) external payable nonReentrant whenNotPaused returns (uint256) {
    _validateVault(vault);
    fromTokenAmount._validateAmount();

    // this is a dual sided vault, so want is lp token!
    address lpToken = address(IVault(vault).want());

    // get the underlying tokens of LP in order
    (address token0, address token1) = _getPairTokens(lpToken);

    // @note We can take the tokens from user, no reentrancy or malicious token injection can happen!
    IBEP20(fromToken).safeTransferFrom(
      msg.sender,
      address(this),
      fromTokenAmount
    );

    // Take the fee from the fromToken a.s.a.p
    uint256 feeTaken = _takeFee(fromToken, fromTokenAmount);

    // deduct the fee amount
    // @note if this underflows and reverts it is ok, it is a desired behaviour
    fromTokenAmount = fromTokenAmount - feeTaken;

    // reposition it in stack to prevent stack too deep
    address _fromToken = fromToken;

    uint256 lpAmountReceived;
    // if fromToken is one of the underlyings
    if (fromToken == token0 || fromToken == token1) {
      fromTokenSwapAmount._validateAmount();

      // determine the other token in terms of token0/token1
      address otherToken = fromToken == token0 ? token1 : token0;

      // buy the other underlying token with stable swap or the univ2 router
      uint256 otherTokenBought;

      // validate the router! Router must be same with underlying strategies router
      address router = IVault(vault).strategy().unirouter();

      // if there are no factory contracts to router key, then it means router is non-registered to this zapper
      _validateRouter(router);

      if (useEllipsis) {
        otherTokenBought = _ellipsisSwap(
          fromToken,
          otherToken,
          fromTokenSwapAmount
        );
      } else {
        otherTokenBought = _routerSwap(
          fromToken,
          otherToken,
          fromTokenSwapAmount,
          router
        );
      }

      // Update the fromTokenAmount
      // @note if this underflows and reverts it is ok, it is a desired behaviour
      fromTokenAmount = fromTokenAmount - fromTokenSwapAmount;

      uint256 token0Amount;
      uint256 token1Amount;
      // determine the token0Amount and token1Amount
      if (_fromToken == token0) {
        token0Amount = fromTokenAmount;
        token1Amount = otherTokenBought;
      } else {
        token0Amount = otherTokenBought;
        token1Amount = fromTokenAmount;
      }

      lpAmountReceived = _addLiquidity(
        token0,
        token1,
        token0Amount,
        token1Amount,
        router
      );
    } else if (fromToken == lpToken) {
      // user deposits LP
      lpAmountReceived = fromTokenAmount;
    } else {
      revert Errors.ZapInWithUnderlyingsOrLP();
    }

    // Deposit LP (want) to vault and get the shares
    _approveToken(lpToken, vault, lpAmountReceived);
    uint256 sharesZappedIn = IVault(vault).deposit(lpAmountReceived);

    // Send vault shares to msg.sender
    IBEP20(vault).safeTransfer(msg.sender, sharesZappedIn);
    emit ZappedIn(msg.sender, vault, sharesZappedIn);

    return sharesZappedIn;
  }

  function _takeFee(address token, uint256 fullAmount)
    internal
    returns (uint256)
  {
    // get the tier of the user from locker
    // 1 silver, 2 gold, rest is bronze
    uint256 userTier = locker.getTier(msg.sender);

    uint256 discountedFee;
    if (userTier != 1 && userTier != 2) {
      // user is either bronze or does not have a lock
      discountedFee = defaultDepositFee;
    } else {
      discountedFee = tierDepositFees[userTier];
    }

    uint256 feeTaken = (fullAmount * discountedFee) / FEE_DENOMINATOR;

    // due to math roundings on small amounts fee can be 0
    if (feeTaken == 0) {
      emit FeeTaken(msg.sender, token, 0);
      return 0;
    }

    // funds are already taken from user to address(this) let's send the fee to smart wallet
    IBEP20(token).safeTransfer(smartWallet, feeTaken);
    emit FeeTaken(msg.sender, token, feeTaken);

    return feeTaken;
  }

  ////////////////////////////// ZAP OUT ///////////////////////////////////////////////
  function zapOut(
    address toToken,
    address vault,
    uint256 shares,
    bool useEllipsis // frontend checks
  ) external payable nonReentrant returns (uint256, uint256) {
    _validateVault(vault);
    shares._validateAmount();

    // @note We can take the tokens from user, no reentrancy or malicious token injection can happen!
    IBEP20(vault).safeTransferFrom(msg.sender, address(this), shares);

    // this is a dual sided vault, so want is lp token!
    address lpToken = address(IVault(vault).want());

    // withdraw shares from vault behalf of user to this address
    uint256 lpReceived = IVault(vault).withdraw(shares);

    // make sure lp received is more than 0
    // this can happen if tiny amount of shares are withdrawn due to math roundings
    lpReceived._validateAmount();

    // User wants to withdraw LP token
    if (toToken == lpToken) {
      _safeTransfer(toToken, lpReceived);
      emit ZappedOut(msg.sender, vault, shares);
      return (lpReceived, 0);
    }

    // validate the router! Router must be same with underlying strategies router
    address router = IVault(vault).strategy().unirouter();

    // if there are no factory contracts to router key, then it means router is non-registered to this zapper
    _validateRouter(router);

    (
      uint256 amount0,
      uint256 amount1,
      address token0,
      address token1
    ) = _removeLiquidity(lpToken, router, lpReceived);

    // User wants to withdraw balanced underlying amounts
    if (toToken == address(0)) {
      _safeTransfer(token0, amount0);
      _safeTransfer(token1, amount1);

      emit ZappedOutBalancedAmounts(msg.sender, vault, shares);
      return (amount0, amount1);
    }

    //swaps tokens to token
    uint256 tokenBought;
    if (useEllipsis) {
      if (toToken == token0) {
        tokenBought = _ellipsisSwap(token1, token0, amount1);
        tokenBought += amount0;
      }
      // if two toToken has liquidity in ellipsis swap will execute no harm.
      else {
        tokenBought = _ellipsisSwap(token0, token1, amount0);
        tokenBought += amount1;
      }
    } else {
      if (toToken == token0) {
        tokenBought = _routerSwap(token1, token0, amount1, router);
        tokenBought += amount0;
      }
      /// if toToken neither token0,token1 this tx will revert because we add 2 diff tokens
      // if only to and from tokens are same
      else {
        tokenBought = _routerSwap(token0, token1, amount0, router);
        tokenBought += amount1;
      }
    }

    _safeTransfer(toToken, tokenBought);

    emit ZappedOut(msg.sender, vault, shares);

    if (toToken == token0) {
      return (tokenBought, 0);
    }
    return (0, tokenBought);
  }

  function _validateVault(address vault) internal view {
    if (!vaultRegistry.isVault(vault)) {
      revert Errors.InvalidatedVault(vault);
    }
  }

  function _validateRouter(address router) internal view {
    if (registeredUniContracts[router] == address(0)) {
      revert Errors.InvalidatedRouter(router);
    }
  }

  function _safeTransfer(address token, uint256 amount) internal {
    amount._validateAmount();
    IBEP20(token).safeTransfer(msg.sender, amount);
  }

  function _getPairTokens(address pairAddress)
    internal
    view
    returns (address token0, address token1)
  {
    IUniswapV2Pair uniPair = IUniswapV2Pair(pairAddress);
    token0 = uniPair.token0();
    token1 = uniPair.token1();
  }

  function _approveToken(
    address token,
    address spender,
    uint256 amount
  ) internal {
    IBEP20(token).safeApprove(spender, 0);
    IBEP20(token).safeApprove(spender, amount);
  }

  function _getPairFromTokens(
    address toUniPoolToken0,
    address toUniPoolToken1,
    address factory
  ) internal view returns (address) {
    return IUniswapV2Factory(factory).getPair(toUniPoolToken0, toUniPoolToken1);
  }

  function _removeLiquidity(
    address fromPoolAddress,
    address router,
    uint256 incomingLP
  )
    internal
    returns (
      uint256 amount0,
      uint256 amount1,
      address token0,
      address token1
    )
  {
    _approveToken(fromPoolAddress, router, incomingLP);

    (token0, token1) = _getPairTokens(fromPoolAddress);

    (amount0, amount1) = IUniswapRouter(router).removeLiquidity(
      token0,
      token1,
      incomingLP,
      1,
      1,
      address(this),
      block.timestamp
    );
    require(amount0 > 0 && amount1 > 0, "Removed Insufficient Liquidity");
  }

  function _addLiquidity(
    address token0,
    address token1,
    uint256 token0Amount,
    uint256 token1Amount,
    address router
  ) internal returns (uint256) {
    _approveToken(token0, router, token0Amount);
    _approveToken(token1, router, token1Amount);

    (uint256 amountA, uint256 amountB, uint256 LP) = IUniswapRouter(router)
      .addLiquidity(
        token0,
        token1,
        token0Amount,
        token1Amount,
        1,
        1,
        address(this),
        block.timestamp
      );
    // Returning Residue in token0, if any.
    if (token0Amount - amountA > 0) {
      _safeTransfer(token0, token0Amount - amountA);
    }

    // Returning Residue in token1, if any
    if (token1Amount - amountB > 0) {
      _safeTransfer(token1, token1Amount - amountB);
    }
    return LP;
  }

  function _ellipsisSwap(
    address fromToken,
    address toToken,
    uint256 amount
  ) internal returns (uint256) {
    _approveToken(fromToken, address(ellipsisSwap), amount);
    return
      ellipsisSwap.exchange_with_best_rate(
        fromToken,
        toToken,
        amount,
        0,
        address(this)
      );
  }

  function _routerSwap(
    address fromToken,
    address toToken,
    uint256 amount,
    address router
  ) internal returns (uint256) {
    _approveToken(fromToken, router, amount);

    address[] memory path = new address[](2);
    path[0] = fromToken;
    path[1] = toToken;

    return
      IUniswapRouter(router).swapExactTokensForTokens(
        amount,
        1,
        path,
        address(this),
        block.timestamp
      )[path.length - 1];
  }

  function setFees(
    uint256 _defaultDepositFee,
    uint256 _silverTierDepositFee,
    uint256 _goldTierDepositFee
  ) external onlyOwner {
    require(
      _defaultDepositFee <= DEPOSIT_FEE_CAP &&
        _silverTierDepositFee <= DEPOSIT_FEE_CAP &&
        _goldTierDepositFee <= DEPOSIT_FEE_CAP,
      "DEPOSIT_FEE_CAP"
    );

    defaultDepositFee = _defaultDepositFee;

    tierDepositFees[1] = _silverTierDepositFee;
    tierDepositFees[2] = _goldTierDepositFee;

    emit DepositFeesUpdated(
      _defaultDepositFee,
      _silverTierDepositFee,
      _goldTierDepositFee
    );
  }

  function setNewSmartWallet(address _smartWallet) external onlyOwner {
    _smartWallet._validateAddress();

    smartWallet = _smartWallet;
    emit SmartWalletUpdated(_smartWallet);
  }

  function addNewRouterAndFactory(address newRouter, address factory)
    external
    onlyOwner
  {
    newRouter._validateAddress();
    factory._validateAddress();
    require(registeredUniContracts[newRouter] == address(0), "Already setted");

    registeredUniContracts[newRouter] = factory;
    emit NewRouterAndFactoryAdded(newRouter, factory);
  }
}