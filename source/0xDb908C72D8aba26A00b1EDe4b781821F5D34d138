//SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBEP20 {

    function decimals() external view returns (uint8);        
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

}

interface IPCSRouter {

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
}

interface IPancakeSwapFactory {

    function getPair(address tokenA, address tokenB) external view returns (address pair);

}


contract BearBull {

    fallback() external payable {}
    receive() external payable {}

    constructor(IPCSRouter _pancakeSwapRouter){
        WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        token = IBEP20(0x4F0F2fA439C6454B4664f3C4432514Ec07c1bC28);
        pcsRouter = _pancakeSwapRouter;
        tokenAddress = 0x4F0F2fA439C6454B4664f3C4432514Ec07c1bC28;
        owner = msg.sender;
    }

 
    struct shortPosition{
        address trader;
        uint256 amount; 
        uint256 tolerance; 
        uint256 startPrice;
        uint256 collateral;
        uint256 ethValue;
        uint256 shortNumber;
        address[] lenders;
        uint256[] amountsLent;
    }

    struct lendingInfo{
        address lender;
        uint256 lendNumber;
        uint256 amount;
        uint256 amountInTrade;
        uint256 duration;
        uint256 endTime;
    }

    address owner;
    uint256 threshold;
    mapping(address => shortPosition) public shortPositions;
    IBEP20 public token;
    address public tokenAddress;
    IPCSRouter public pcsRouter;
    address public WBNB;
    address[] public lenders;
    mapping(address => lendingInfo) lendMap; 
    uint256 public totalLent;
    uint256 public totalAvailable;
    mapping (address => uint256) public lenderShares;
    shortPosition[] public shorts;
    uint256 public tokensInShorts;

    modifier onlyOwner {
        require(msg.sender == owner, "You are not the owner of this contract.");_;
    }

    function changeOwner(address _owner) external onlyOwner {
        owner = _owner;
    }

    function changeThreshold(uint256 _threshold) external onlyOwner{
        threshold = _threshold;
    }

    function checkAvailable() public returns(uint256){
        uint256 available;
        for(uint256 i = 0; i < lenders.length; i++){
            if(lendMap[lenders[i]].endTime > block.timestamp + 3600){
                available += lendMap[lenders[i]].amount;
            }
        }
        totalAvailable = available - tokensInShorts;
        return available;
    }
    
    function checkAvailability(uint256 desiredAmount) public view returns (bool) {
        uint256 available = 0;

        for(uint256 i = 0; i < lenders.length; i++){

            if(lendMap[lenders[i]].endTime < block.timestamp + 1 hours) {
                continue;
            }
            uint256 potentialAvailable = lendMap[lenders[i]].amount - lendMap[lenders[i]].amountInTrade;
            available += potentialAvailable;

            if(available >= desiredAmount){
                return true;
            }
        }
        return false;
    }


    function fulfill(uint256 amount) public returns (address[] memory, uint256[] memory) {
        uint256 totalFulfillable = 0;
        address[] memory availableLenders = new address[](lenders.length);

        uint256 lenderCount = 0;
        uint256 requiredAmount = 0;
        uint256[] memory amountLent;
        for(uint256 i = 0; i < lenders.length; i++){

            if(lendMap[lenders[i]].endTime < block.timestamp + 1 hours) {
                continue;
            }
            uint256 potentialFulfillable = lendMap[lenders[i]].amount - lendMap[lenders[i]].amountInTrade;
            if(potentialFulfillable >= amount - totalFulfillable){
                requiredAmount = amount - totalFulfillable;
                lendMap[lenders[i]].amountInTrade += requiredAmount;
                availableLenders[lenderCount] = lendMap[lenders[i]].lender;
                amountLent[lenderCount] = requiredAmount;
                lenderCount++;
                break;
            }
            else{
                lendMap[lenders[i]].amountInTrade += potentialFulfillable;
                totalFulfillable += potentialFulfillable;
                availableLenders[lenderCount] = lendMap[lenders[i]].lender;
                amountLent[lenderCount] = potentialFulfillable;
                lenderCount++;
            }
        }
        return (availableLenders, amountLent);
    }


    function getCollateral(uint256 amount, uint256 tolerance) public view returns (uint256){

        return (getValue(amount * 10**token.decimals()) * tolerance) / 100;

    }

    function price() private view returns (uint256) {

        uint256 amountIn = 10 ** token.decimals(); // 1 token
        address[] memory path = getPathForTokenToETH();
        uint256[] memory amountsOut = pcsRouter.getAmountsOut(amountIn, path);

        return amountsOut[1];
    }

    function getPrice() public view returns (uint256) {
        uint256 currentPrice = price();
        return currentPrice;
    }

    function checkPrice() external view returns (uint256) {

        uint256 amountIn = 10 ** token.decimals(); // 1 token
        address[] memory path = new address[](2);
        path[0] = address(token);
        path[1] = address(WBNB);
        uint256[] memory amountsOut = pcsRouter.getAmountsOut(amountIn, path);

        return amountsOut[1];
    }

    function getPathForETHToToken() private view returns (address[] memory) {
        address[] memory path = new address[](2);
        path[0] = WBNB;
        path[1] = tokenAddress;

        return path;
    }

    function getPathForTokenToETH() private view returns (address[] memory) {
        address[] memory path = new address[](2);
        path[1] = WBNB;
        path[0] = tokenAddress;

        return path;
    }

    function getBuybackCost(uint256 amountOut, address[] memory path) public view returns (uint256) {
        uint[] memory amountsIn = pcsRouter.getAmountsIn(amountOut, path);
        return amountsIn[0];
    }

    function getValue(uint256 amountOut) public view returns (uint256){
        address[] memory path = getPathForTokenToETH();
        uint256[] memory amountsOut = pcsRouter.getAmountsOut(amountOut, path);
        return amountsOut[1];

    }

    function lendTokens(uint256 amount, uint256 time) external {
        
        require(amount > 0, "Not enough tokens");
        require(time > 0, "Not long enough");

        bool success = token.transferFrom(msg.sender, address(this) , amount*10**token.decimals());

        require(success, "Token transfer failed.");

        totalLent += amount;
        uint256 lendTime = block.timestamp + (time * 3600);
        lenderShares[msg.sender] += amount;

        lendingInfo memory temp = lendingInfo({
            lender : msg.sender,
            lendNumber : lenders.length,
            amount : amount,
            amountInTrade : 0,
            duration : lendTime,
            endTime : block.timestamp + lendTime
        });

        totalAvailable += amount;

        lendMap[msg.sender] = temp;
        emit TokensLent(msg.sender, amount, time);
    }

    function withdrawTokens() external {
        uint256 amount = lendMap[msg.sender].amount;
        require(amount > 0, "You must withdraw more than 0 tokens.");
        require(lendMap[msg.sender].endTime < block.timestamp, "Your withdraw date has not been met.");
        require(checkAvailability(amount), "There are not enough tokens in the contract to withdraw.");
        
        token.approve(msg.sender, lendMap[msg.sender].amount*10**token.decimals());

        bool success = token.transferFrom(address(this), msg.sender , amount*10**token.decimals());

        require(success, "Token transfer failed.");

        totalLent -= amount;

        delete lenders[lendMap[msg.sender].lendNumber];
        delete lendMap[msg.sender];

        emit TokensWithdrawn(msg.sender, amount);
    }

    function openShort(uint256 amount, uint256 riskTolerance) external payable {

        require(amount > 0, "Short position must be greater than zero");
        require(riskTolerance == 100, "Risk tolerance must be between 100 during Beta");
        uint256 collateralRequired = getCollateral(amount, riskTolerance);
        require(msg.value >= collateralRequired, "Insufficient collateral");
        
        uint256 decimals = token.decimals();
        uint256 trueAmount = amount * 10**decimals;
        require(checkAvailability(amount), "Insufficient tokens");
        uint256 tokenPrice = price();

        address[] memory path = getPathForTokenToETH();

        bool success = token.approve(address(pcsRouter), trueAmount);
        require(success, "Token approval failed");

        uint256 deadline = block.timestamp + 100;

        uint256[] memory amounts = pcsRouter.swapExactTokensForETH(trueAmount, 0, path, address(this), deadline);

        (address[] memory _lenders,  uint256[] memory _amountsLent) = fulfill(amount);

        uint256 shortNum = shorts.length;
        shortPosition memory temp = shortPosition({
            trader : msg.sender,
            amount : amount,
            tolerance : riskTolerance,
            startPrice : tokenPrice,
            collateral : msg.value,
            ethValue : amounts[1],
            shortNumber : shortNum,
            lenders : _lenders,
            amountsLent : _amountsLent
        });

        shortPositions[msg.sender] = temp;
        
        tokensInShorts += temp.amount;
        emit ShortOpened (msg.sender, amount, tokenPrice, msg.value);
    }

    function closeShort() external {
        shortPosition storage temp = shortPositions[msg.sender];
        address[] storage _lenders = temp.lenders;
        uint256[] storage _amounts = temp.amountsLent;
        require(temp.amount > 0, "No short position currently open.");
        for(uint256 i = 0; i < _lenders.length ; i++){
            lendMap[_lenders[i]].amountInTrade -= _amounts[i];
        }
    

        uint256 currentPrice = price();
        uint256 buybackCost = currentPrice * temp.amount;
        uint256 toSend = 0;
        uint256 deadline = block.timestamp + 100;
        uint256 decimals = token.decimals();
        uint256[] memory amounts = pcsRouter.swapETHForExactTokens{value : buybackCost + (buybackCost * 10 / 100)}(temp.amount*10**decimals, getPathForETHToToken(), address(this), deadline);
    
        toSend = temp.ethValue + temp.collateral - amounts[0];
        
        if(toSend > 0){
            (bool success,) = msg.sender.call{value: toSend}("");
            require (success, "Failed to send back ETH.");
        }

        delete shortPositions[msg.sender];
        delete shorts[temp.shortNumber];
        tokensInShorts -= temp.amount;
        emit ShortClosed(msg.sender, temp.amount);
    }

    function closeShortByIndex(uint256 index) public {
        shortPosition storage temp = shorts[index];
        address[] storage _lenders = temp.lenders;
        uint256[] storage _amounts = temp.amountsLent;
        require(temp.amount > 0, "No short position currently open.");
        for(uint256 i = 0; i < _lenders.length ; i++){
            lendMap[_lenders[i]].amountInTrade -= _amounts[i];
        }

        uint256 currentPrice = price();
        uint256 buybackCost = currentPrice * temp.amount;
        uint256 toSend = 0;
        uint256 deadline = block.timestamp + 100;
        uint256 decimals = token.decimals();
        uint256[] memory amounts = pcsRouter.swapETHForExactTokens{value : buybackCost + (buybackCost * 10 / 100)}(temp.amount*10**decimals, getPathForETHToToken(), address(this), deadline);
    
        toSend = temp.ethValue + temp.collateral - amounts[0];
        
        if(toSend > 0){
            (bool success,) = temp.trader.call{value: toSend}("");
            require (success, "Failed to send back ETH.");
        }

        delete shortPositions[temp.trader];
        delete shorts[temp.shortNumber];
        tokensInShorts -= temp.amount;
        emit ShortClosed(msg.sender, temp.amount);
    }

    event ShortOpened(address indexed trader, uint256 amount, uint256 entryPrice, uint256 collateral);
    event ShortClosed(address indexed trader, uint256 amount);
    event TokensLent(address lender, uint256 amount, uint256 lendTime);
    event TokensDeposited(address indexed lender, uint256 amount);
    event TokensWithdrawn(address lender, uint256 amount);

    function mustLiquidate(shortPosition memory _temp) public view returns (bool) {
        address[] memory path = getPathForETHToToken();
        uint256 amountOut = _temp.amount * 10**token.decimals();
        uint[] memory amounts = pcsRouter.getAmountsIn(amountOut, path);

        if (amounts[0]  >= (_temp.ethValue + _temp.collateral) * 3 / 4){
            return true;
        }
        else return false;
    }

    function toLiquidate() public view returns (shortPosition[] memory) {
        uint256 shortIndex = 0;
        shortPosition[] memory shorters = new shortPosition[](shorts.length);
        for (uint256 count = 0; count < shorts.length; count++){
            if(mustLiquidate(shorts[count])){
              shorters[shortIndex] = shorts[count];
              ++shortIndex;
            }
        }
        
        return shorters;
    }

    function liquidate() external onlyOwner{
        shortPosition[] memory _shorts = toLiquidate();
        if (_shorts[0].amount != 0){
            for (uint256 index = 0; index < shorts.length; index++){
                closeShortByIndex(_shorts[index].shortNumber);
            }
        }
    }
}