{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"CafeStaking_v02.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"Address.sol\";\r\nimport \"Context.sol\";\r\nimport \"ERC165.sol\";\r\nimport \"SafeMath.sol\";\r\nimport \"Ownable.sol\";\r\nimport \"IERC20.sol\";\r\nimport \"Util.sol\";\r\n\r\nstruct StakingEntity {        \r\n    uint256 lastClaimTime;\r\n    uint256 amount;\r\n    uint256 claimedTotal;\r\n}\r\ncontract CafeStaking_v02 is Context, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e StakingEntity) private _stakeMap;\r\n    mapping(address =\u003e uint256) private _increasedRateMap;\r\n\r\n    IERC20 private _tokenInterface;\r\n    address private _tokenAddress;\r\n    \r\n    uint256 private _stakedBalanceTotal = 0;\r\n    uint256 private _stakedUsersTotal = 0;\r\n\r\n    uint256 private _bnbPaid = 0;\r\n\r\n    uint256 private _totalClaimedInPeriod = 0;\r\n    uint256 private _totalUnclaimedSecondsInPeriod = 0;\r\n\r\n    uint256 private _bnbToPayInPeriod = 0;\r\n    uint256 private _bnbPerMinTokenInPeriodCurrentRate = 0;\r\n    uint256 private _bnbPerMinTokeninPerSecondCurrentRate = 0;\r\n\r\n    uint256 private _minStakedTokens = 1 * 10**7;\r\n\r\n    uint256 private _timeNextPeriod = 0;\r\n    \r\n    uint256 private _tokenTotalSupplyStakablePercentage = 75;\r\n    uint256 private _tokenTotalSupplyStakable = 0;\r\n\r\n    uint256 private immutable _timeFullPeriod = 30;\r\n    uint256 private _minBuyBNB = 1 * 10**5;\r\n\r\n    uint256 private _transitionPeriodTimestamp = 1647194400;\r\n    uint256 private _transitionPeriodRewardRate = 31519;\r\n\r\n    bool private _active = false;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    receive() external payable {\r\n        if(_stakingActive()) _update();\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    constructor () payable {\r\n        _tokenAddress = 0xdefCafE7eAC90d31BbBA841038DF365DE3c4e207;\r\n        _tokenInterface = IERC20(_tokenAddress);\r\n        _tokenTotalSupplyStakable = (_tokenInterface.totalSupply().div(100)).mul(_tokenTotalSupplyStakablePercentage);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    } \r\n\r\n    event EmergencyWithdrawBNB(address indexed account, uint256 amount);\r\n    event EmergencyWithdrawTokensWithoutClaim(address indexed account, uint256 amount);\r\n    event Stake(address indexed account, uint256 amount);\r\n    event Unstake(address indexed account, uint256 amount);\r\n    event Claim(address indexed account, uint256 amount);\r\n    event ClaimAndReinvest(address indexed account, uint256 amount);\r\n    event UpdateToken(address indexed tokenAddress);\r\n    event SetStakingActive(bool stakingActive);\r\n    event SetMinBuyBNB(uint256 amount);\r\n    event SetTotalSupplyStakablePercentage(uint256 percentage);\r\n    event CompoundBuy(address indexed account, uint256 amount);\r\n    event IncreaseRewardOnAddress(address indexed account, uint256 additive);\r\n    event IncreaseRewardOnAddresses(address[] indexed accounts, uint256[] additive);\r\n    event RemoveIcreasedRewardOnAddress(address indexed account);\r\n    event RemoveIcreasedRewardOnAddresses(address[] indexed accounts);\r\n    event Received(address, uint);\r\n\r\n    function stake(uint256 _amount) external  {\r\n        require(_stakingActive(), \"Staking is unavailable at the moment.\");\r\n        require(_amount \u003c= _tokenInterface.balanceOf(_msgSender()), \"User does not have enough tokens.\");         \r\n        require(_amount \u003e= _minStakedTokens, \"Amount is below minimum.\");\r\n        \r\n        _tokenInterface.transferFrom(_msgSender(), address(this), _amount);\r\n        _claim(_msgSender());\r\n\r\n        if(!_userStakeActive(_msgSender())) _stakedUsersTotal = _stakedUsersTotal.add(1);\r\n\r\n        uint256 updatedAmount = _stakeMap[_msgSender()].amount.add(_amount);\r\n        _stakeMap[_msgSender()] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[_msgSender()].claimedTotal,\r\n            amount: updatedAmount\r\n        });\r\n\r\n        _stakedBalanceTotal = _stakedBalanceTotal.add(_amount);\r\n        \r\n        \r\n        emit Stake(_msgSender(), _amount);\r\n    }\r\n    function unstake(uint256 _amount) external {\r\n        require(_userStakeActive(_msgSender()), \"Nothing to unstake.\");\r\n        require(_amount \u003c= _stakeMap[_msgSender()].amount, \"Tokens amount requested to unstake is exceeds staked amount.\");\r\n        \r\n        _claim(_msgSender());\r\n\r\n        _tokenInterface.transfer(_msgSender(), _amount);\r\n        \r\n        uint256 updatedAmount = _stakeMap[_msgSender()].amount.sub(_amount);\r\n        _stakeMap[_msgSender()] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[_msgSender()].claimedTotal,\r\n            amount: updatedAmount\r\n        });\r\n        \r\n        _stakedBalanceTotal = _stakedBalanceTotal.sub(_amount);\r\n        if(!_userStakeActive(_msgSender())) _stakedUsersTotal = _stakedUsersTotal.sub(1);\r\n\r\n        emit Unstake(_msgSender(), _amount);\r\n    }\r\n    function _claim(address sender) internal {\r\n\r\n        _update();\r\n        uint256 currentPayout = 0;\r\n        if(_userStakeActive(sender)) {\r\n            currentPayout = _calculateCurrentReward(sender);\r\n            \r\n            payable(sender).transfer(currentPayout);\r\n\r\n            _stakeMap[sender] = StakingEntity({\r\n                lastClaimTime: block.timestamp,\r\n                claimedTotal: _stakeMap[sender].claimedTotal.add(currentPayout),\r\n                amount: _stakeMap[sender].amount\r\n            });\r\n            _totalClaimedInPeriod = _totalClaimedInPeriod.add(currentPayout);\r\n            _bnbPaid = _bnbPaid.add(currentPayout);\r\n        }    \r\n        emit Claim(sender, currentPayout);\r\n    }\r\n    function claim() external {\r\n        require(_userStakeActive(_msgSender()), \"Nothing is staked.\");\r\n        require(_stakeMap[_msgSender()].lastClaimTime.add(1 hours) \u003c= block.timestamp, \"Cannot claim more than once in 1 hour.\");\r\n        _claim(_msgSender());\r\n    }\r\n    function claimAndReinvest() public {\r\n        require(_userStakeActive(_msgSender()), \"Nothing is staked.\");\r\n        require(_calculateCurrentReward(_msgSender()) \u003e= _minBuyBNB, \"Claim amount below minimum reinvest value\");\r\n\r\n        _update();\r\n\r\n        uint256 currentPayout = 0;\r\n        currentPayout = _calculateCurrentReward(_msgSender());\r\n\r\n        //payable(sender).transfer(currentPayout);\r\n\r\n        _stakeMap[_msgSender()] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[_msgSender()].claimedTotal.add(currentPayout),\r\n            amount: _stakeMap[_msgSender()].amount\r\n        });\r\n        _totalClaimedInPeriod = _totalClaimedInPeriod.add(currentPayout);\r\n        _bnbPaid = _bnbPaid.add(currentPayout);\r\n    \r\n        _compoundBuy(_msgSender(), currentPayout);\r\n\r\n        emit ClaimAndReinvest(_msgSender(), currentPayout);\r\n    }\r\n    function _update() internal {\r\n        if(block.timestamp \u003e= _transitionPeriodTimestamp) {\r\n            if(block.timestamp \u003e= _timeNextPeriod) {\r\n                _bnbToPayInPeriod = address(this).balance;\r\n                _timeNextPeriod = (block.timestamp).add(_timeFullPeriod * 1 days);\r\n                _totalClaimedInPeriod = 0;\r\n                _bnbPerMinTokenInPeriodCurrentRate = _bnbToPayInPeriod.div((_tokenTotalSupplyStakable).div(10**7));\r\n                _bnbPerMinTokeninPerSecondCurrentRate = _bnbPerMinTokenInPeriodCurrentRate.div(_timeFullPeriod * 24 * 60 * 60);\r\n            }\r\n            if(block.timestamp \u003c= _timeNextPeriod.sub((_timeFullPeriod * 1 days).div(2))) {\r\n                uint256 deltaBNBToAddInPeriod = (address(this).balance).sub(_bnbToPayInPeriod.sub(_totalClaimedInPeriod));\r\n                if(deltaBNBToAddInPeriod \u003e 0) _bnbToPayInPeriod = _bnbToPayInPeriod.add(deltaBNBToAddInPeriod);\r\n                _bnbPerMinTokenInPeriodCurrentRate = _bnbToPayInPeriod.div((_tokenTotalSupplyStakable).div(10**7));\r\n                _bnbPerMinTokeninPerSecondCurrentRate = _bnbPerMinTokenInPeriodCurrentRate.div(_timeFullPeriod * 24 * 60 * 60);\r\n            }\r\n        } \r\n    }\r\n    function _calculateCurrentReward(address sender) private view returns (uint256) {\r\n        return (_stakeMap[sender].amount).div(10**7) * (getCurrentPerTokenBNBRewardRate() + getCurrentPerTokenBNBRewardRate().div(100) * _increasedRateMap[sender]) * _calculateCorrectedStakedTimeInSeconds(sender);\r\n    }\r\n    function _calculateCorrectedStakedTimeInSeconds(address sender) private view returns (uint256) {\r\n        uint256 currentStakedTimeInSeconds = (block.timestamp.sub(_stakeMap[sender].lastClaimTime));\r\n        uint256 correctedStakedTimeInSeconds = currentStakedTimeInSeconds \u003e= (_timeFullPeriod * 24 * 60 * 60).div(2) ? (_timeFullPeriod * 24 * 60 * 60).div(2) : currentStakedTimeInSeconds;\r\n        if(_stakeMap[sender].lastClaimTime == 0) correctedStakedTimeInSeconds = 0;\r\n        return correctedStakedTimeInSeconds;\r\n    }\r\n    function _userStakeActive(address sender) internal view returns(bool) {\r\n        bool isActive = false;\r\n        if(_stakeMap[sender].amount \u003e= _minStakedTokens) isActive = true;\r\n        return isActive;\r\n    }\r\n    function _stakingActive() internal view returns(bool) {\r\n        return _active;\r\n    }\r\n    function _getScaledValue(uint256 value) internal pure returns(uint256) {\r\n        return value * 10**10;\r\n    }  \r\n    function setStakingActive(bool active) external onlyOwner() {\r\n        _active = active;\r\n        emit SetStakingActive(_active);\r\n    }\r\n    function setMinBuyBNB(uint256 amount) external onlyOwner() {\r\n        _minBuyBNB = amount;\r\n        emit SetMinBuyBNB(amount);\r\n    }\r\n    \r\n    function updateToken(address adr) external onlyOwner() {\r\n        _tokenAddress = adr;\r\n        _tokenInterface = IERC20(_tokenAddress);\r\n        _tokenTotalSupplyStakable = (_tokenInterface.totalSupply().div(100)).mul(_tokenTotalSupplyStakablePercentage);\r\n        emit UpdateToken(adr);\r\n    }\r\n    function setTotalSupplyStakablePercentage(uint256 percentage) external onlyOwner() {\r\n        require(percentage \u003c=100, \"Percentage cannot be higher than 100\");\r\n        _tokenTotalSupplyStakablePercentage = percentage;\r\n        _tokenTotalSupplyStakable = (_tokenInterface.totalSupply().div(100)).mul(_tokenTotalSupplyStakablePercentage);\r\n        emit SetTotalSupplyStakablePercentage(percentage);\r\n    }\r\n    function emergencyWithdrawBNB() external onlyOwner() {\r\n       uint256 balance = address(this).balance;\r\n       payable(_msgSender()).transfer(balance);\r\n       emit EmergencyWithdrawBNB(_msgSender(), balance);\r\n    }\r\n    function emergencyWithdrawTokensWithoutClaim() external {\r\n        require(_stakeMap[_msgSender()].amount \u003e 0, \"Nothing to withdraw.\");\r\n        uint256 _amount = _stakeMap[_msgSender()].amount;\r\n        _tokenInterface.transfer(_msgSender(), _amount);\r\n        uint256 updatedAmount = 0;\r\n        if(_userStakeActive(_msgSender())) {\r\n            _stakedBalanceTotal = _stakedBalanceTotal.sub(_amount);\r\n            _stakedUsersTotal = _stakedUsersTotal.sub(1);\r\n        }\r\n        _stakeMap[_msgSender()] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[_msgSender()].claimedTotal,\r\n            amount: updatedAmount\r\n        });  \r\n        emit EmergencyWithdrawTokensWithoutClaim(_msgSender(), _amount);\r\n    }\r\n    function compoundBuy() public payable {\r\n\r\n        require(_stakingActive(), \"Staking is unavailable at the moment.\");\r\n        require(msg.value \u003e= _minBuyBNB, \"Buy amount is below minimum.\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = _tokenAddress;\r\n\r\n        uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{value: msg.value}(\r\n            0, \r\n            path,\r\n            address(this), \r\n            block.timestamp\r\n        );\r\n        \r\n        _claim(_msgSender());\r\n        if(!_userStakeActive(_msgSender())) _stakedUsersTotal = _stakedUsersTotal.add(1);\r\n        uint256 updatedAmount = _stakeMap[_msgSender()].amount.add(amounts[1]);\r\n        _stakeMap[_msgSender()] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[_msgSender()].claimedTotal,\r\n            amount: updatedAmount\r\n        });\r\n        _stakedBalanceTotal = _stakedBalanceTotal.add(amounts[1]);\r\n        \r\n        emit CompoundBuy(_msgSender(), amounts[1]);\r\n\r\n    }\r\n    function _compoundBuy(address sender, uint256 _amount) internal {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = _tokenAddress;\r\n\r\n        uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{value: _amount}(\r\n            0, \r\n            path,\r\n            address(this), \r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 updatedAmount = _stakeMap[sender].amount.add(amounts[1]);\r\n        _stakeMap[sender] = StakingEntity({\r\n            lastClaimTime: block.timestamp, \r\n            claimedTotal: _stakeMap[sender].claimedTotal,\r\n            amount: updatedAmount\r\n        });\r\n        _stakedBalanceTotal = _stakedBalanceTotal.add(amounts[1]);\r\n    }\r\n    function isStakingActive() external view returns (bool) {\r\n        return _stakingActive();\r\n    }\r\n    function getMinBuyBNB() external view returns (uint256) {\r\n        return _minBuyBNB;\r\n    }\r\n    function getPoolBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    function getStakedBalanceTotal() external view returns (uint256) {\r\n        return _stakedBalanceTotal;\r\n    }\r\n    function getStakedUsersTotal() external view returns (uint256) {\r\n        return _stakedUsersTotal;\r\n    }\r\n    function getTotalPaid() external view returns (uint256) {\r\n        return _bnbPaid;\r\n    }\r\n    function getBnbToPayInPeriod() external view returns (uint256) {\r\n        return _bnbToPayInPeriod;\r\n    }\r\n    function getMinTokensForStaking() external view returns (uint256) {\r\n        return _minStakedTokens;\r\n    }\r\n    function getTotalPaidInPeriod() external view returns (uint256) {\r\n        return _totalClaimedInPeriod;\r\n    }\r\n    function getCurrentPerTokenBNBRewardRate() public view returns (uint256){\r\n        return (block.timestamp \u003e= _transitionPeriodTimestamp)?_bnbPerMinTokeninPerSecondCurrentRate:_transitionPeriodRewardRate;\r\n    }\r\n    function getCurrentRewardCalculation(address sender) external view returns (uint256) {\r\n        return _calculateCurrentReward(sender);\r\n    }\r\n    function getCorrectedStakedTimeInSeconds(address sender) external view returns (uint256) {\r\n        return _calculateCorrectedStakedTimeInSeconds(sender);\r\n    }\r\n    function getLastClaimTime(address sender) external view returns (uint256) {\r\n        return _stakeMap[sender].lastClaimTime;\r\n    }\r\n    function getStakedAmount(address sender) external view returns (uint256) {\r\n        return _stakeMap[sender].amount;\r\n    }\r\n    function getUserClaimedTotal(address sender) external view returns (uint256) {\r\n        return _stakeMap[sender].claimedTotal;\r\n    }\r\n    function getTimeFullPeriod() external pure returns (uint256) {\r\n        return _timeFullPeriod;\r\n    }\r\n    function getTimeNextPeriod() external view returns(uint256) {\r\n        return _timeNextPeriod;\r\n    }\r\n    function getTotalSupplyStakable() external view returns(uint256) {\r\n        return _tokenTotalSupplyStakable;\r\n    }\r\n    function increaseRewardOnAddress(address addr, uint256 additive) external onlyOwner() {\r\n        require(additive \u003c= 100, \"Increasement can\u0027t be more than 100%\");\r\n        _increasedRateMap[addr] = additive;\r\n        emit IncreaseRewardOnAddress(addr, additive);\r\n    }\r\n    function increaseRewardOnAddresses(address[] memory addrs, uint256[] memory additive) external onlyOwner() {\r\n        require(addrs.length == additive.length, \"Arrays must be same length.\");\r\n        for (uint256 i = 0; i \u003c additive.length; i++) {\r\n            require(additive[i] \u003c= 100, \"Increasement can\u0027t be more than 100%\");\r\n        }\r\n        for (uint256 i = 0; i \u003c addrs.length; i++) {\r\n            _increasedRateMap[addrs[i]] = additive[i];\r\n        }\r\n        emit IncreaseRewardOnAddresses(addrs, additive);\r\n    }\r\n    function removeIcreasedRewardOnAddress(address addr) external onlyOwner() {\r\n        _increasedRateMap[addr] = 0;\r\n        emit RemoveIcreasedRewardOnAddress(addr);\r\n    }\r\n    function removeIcreasedRewardOnAddresses(address[] memory addrs) external onlyOwner() {\r\n        for (uint256 i = 0; i \u003c addrs.length; i++) {\r\n            _increasedRateMap[addrs[i]] = 0;\r\n        }\r\n        emit RemoveIcreasedRewardOnAddresses(addrs);\r\n    }\r\n    function getRewardRateIncreasementOnAddress(address addr) external view returns(uint256){\r\n        return _increasedRateMap[addr];\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"},"Util.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"}}