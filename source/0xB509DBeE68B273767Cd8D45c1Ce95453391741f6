
// File: contracts/PredictionV2Admin.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import {Ownable} from "@openzeppelin-4.5.0/contracts/access/Ownable.sol";
import "./interfaces/IPrediction.sol";

contract PredictionV2Admin is Ownable {
    IPrediction public immutable PredictionContract;

    address public operatorAddress; // address of the operator

    modifier onlyOwnerOrOperator() {
        require(msg.sender == owner() || msg.sender == operatorAddress, "Not operator/owner");
        _;
    }

    /**
     * @notice Constructor
     * @param _predictionContract: Prediction address
     */
    constructor(IPrediction _predictionContract) {
        PredictionContract = _predictionContract;
    }

    /**
     * @notice called by the owner to pause, triggers stopped state
     * @dev Callable by owner
     */
    function pause() external onlyOwner {
        PredictionContract.pause();
    }

    /**
     * @notice Claim all rewards in treasury
     * @dev Callable by owner
     */
    function claimTreasury() external onlyOwner {
        PredictionContract.claimTreasury();
        uint256 balance = address(this).balance;
        _safeTransferBNB(msg.sender, balance);
    }

    /**
     * @notice Set buffer and interval (in seconds)
     * @dev Callable by owner
     */
    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds) external onlyOwner {
        PredictionContract.setBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);
    }

    /**
     * @notice Set minBetAmount
     * @dev Callable by owner
     */
    function setMinBetAmount(uint256 _minBetAmount) external onlyOwner {
        PredictionContract.setMinBetAmount(_minBetAmount);
    }

    /**
     * @notice Set operator address
     * @dev Callable by owner
     */
    function setOperator(address _operatorAddress) external onlyOwner {
        PredictionContract.setOperator(_operatorAddress);
    }

    /**
     * @notice Set Oracle address
     * @dev Callable by owner
     */
    function setOracle(address _oracle) external onlyOwner {
        PredictionContract.setOracle(_oracle);
    }

    /**
     * @notice Set oracle update allowance
     * @dev Callable by owner
     */
    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external onlyOwner {
        PredictionContract.setOracleUpdateAllowance(_oracleUpdateAllowance);
    }

    /**
     * @notice Set treasury fee
     * @dev Callable by owner
     */
    function setTreasuryFee(uint256 _treasuryFee) external onlyOwner {
        PredictionContract.setTreasuryFee(_treasuryFee);
    }

    /**
     * @notice called by the operator or owner to unpause, returns to normal state
     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis
     */
    function unpause() external onlyOwnerOrOperator {
        PredictionContract.unpause();
    }

    function setAdminOperator(address _operatorAddress) external onlyOwner {
        operatorAddress = _operatorAddress;
    }

    /**
     * @notice Transfer BNB in a safe way
     * @param to: address to transfer BNB to
     * @param value: BNB amount to transfer (in wei)
     */
    function _safeTransferBNB(address to, uint256 value) internal {
        (bool success, ) = to.call{value: value}("");
        require(success, "TransferHelper: BNB_TRANSFER_FAILED in V2 admin");
    }

    receive() external payable {}
}


// File: @openzeppelin-4.5.0/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/interfaces/IPrediction.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

interface IPrediction {
    struct Round {
        uint256 epoch;
        uint256 startTimestamp;
        uint256 lockTimestamp;
        uint256 closeTimestamp;
        int256 lockPrice;
        int256 closePrice;
        uint256 lockOracleId;
        uint256 closeOracleId;
        uint256 totalAmount;
        uint256 bullAmount;
        uint256 bearAmount;
        uint256 rewardBaseCalAmount;
        uint256 rewardAmount;
        bool oracleCalled;
    }

    function rounds(uint256 epoch) external view returns (Round memory);

    function genesisStartOnce() external view returns (bool);

    function genesisLockOnce() external view returns (bool);

    function paused() external view returns (bool);

    function currentEpoch() external view returns (uint256);

    function bufferSeconds() external view returns (uint256);

    function intervalSeconds() external view returns (uint256);

    function genesisStartRound() external;

    function pause() external;

    function genesisLockRound() external;

    function executeRound() external;

    function claimTreasury() external;

    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds) external;

    function setMinBetAmount(uint256 _minBetAmount) external;

    function setOperator(address _operatorAddress) external;

    function setOracle(address _oracle) external;

    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external;

    function setTreasuryFee(uint256 _treasuryFee) external;

    function unpause() external;
}


// File: @openzeppelin-4.5.0/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

