// File: contracts/interfaces/IBlucamonOwnership.sol


pragma solidity >=0.7.0 <0.9.0;

interface IBlucamonOwnership {
    function ownerOf(uint256 _id) external view returns (address);

    function tokenURI(uint256 _id) external view returns (string memory);

    function mintBlucamon(
        address _address,
        string memory _tokenUri,
        bool _isSummoned,
        uint8 _rarity,
        uint256 _blucadexId,
        uint8 _eggElement
    ) external;

    function getBlucamonId() external view returns (uint256);

    function getElementalFragments(uint256 _id) external view returns (uint256);

    function isSummoned(uint256 _id) external view returns (bool);

    function breed(uint256 _blucamonId1, uint256 _blucamonId2) external;
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/utils/Strings.sol


// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol



pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: contracts/BlucamonBreeding.sol


pragma solidity >=0.7.0 <0.9.0;







contract BlucamonBreeding is Pausable, Ownable {
    using Strings for uint256;
    using SafeMath for uint256;

    mapping(uint256 => uint256) breedingFee;
    address public treasuryWallet;
    address public buybackWallet;
    uint256 public buybackPercent = 20_00;
    string public baseURI;
    uint256 public MAX_ELEMENTAL_STRENGTH = 5;
    mapping(address => BreedingDetail) whitelistBreedingDetail;
    mapping(address => bool) public isWhitelisted;
    mapping(uint256 => uint256) refMapping;

    IERC20 public BLUC_TOKEN;
    IBlucamonOwnership public BLUCAMON_CONTRACT;

    struct BreedingDetail {
        uint256 fee;
        bool isSuccess;
        uint8 resultRarity;
        uint256 ref;
        uint256 parentId1;
        uint256 parentId2;
    }

    constructor(
        address _treasuryWallet,
        address _buybackWallet,
        address _blucTokenAddress,
        address _blucamonOwnershipContract,
        string memory _baseURI
    ) {
        require(_treasuryWallet != address(0), "S_BBD_0100");
        require(_buybackWallet != address(0), "S_BBD_0101");
        require(_blucTokenAddress != address(0), "S_BBD_0102");
        require(_blucamonOwnershipContract != address(0), "S_BBD_0103");
        treasuryWallet = _treasuryWallet;
        buybackWallet = _buybackWallet;
        BLUC_TOKEN = IERC20(_blucTokenAddress);
        BLUCAMON_CONTRACT = IBlucamonOwnership(_blucamonOwnershipContract);
        baseURI = _baseURI;
        breedingFee[1] = 30000 ether;
        breedingFee[2] = 24000 ether;
        breedingFee[3] = 16000 ether;
        breedingFee[4] = 8000 ether;
        breedingFee[5] = 4000 ether;
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function setOwner(address _address) external onlyOwner {
        require(_address != address(0), "S_BBD_0200");
        transferOwnership(_address);
    }

    function setBaseURI(string memory _newBaseURI) external onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBuybackPercent(uint256 _buybackPercent) external onlyOwner {
        require(_buybackPercent <= 10000, "S_BBD_0300");
        buybackPercent = _buybackPercent;
    }

    function setBreedingFee(uint256[] memory _feeList) external onlyOwner {
        require(_feeList.length == MAX_ELEMENTAL_STRENGTH, "S_BBD_0400");
        for (uint256 i = 0; i < _feeList.length; i++) {
            breedingFee[i + 1] = _feeList[i];
        }
    }

    function setWhitelist(
        uint256 _parentId1,
        uint256 _parentId2,
        address _to,
        bool _isSuccess,
        uint8 _resultRarity,
        uint256 _ref
    ) external onlyOwner {
        require(_parentId1 != _parentId2, "S_BBD_0500");
        require(_to != address(0), "S_BBD_0600");
        require(BLUCAMON_CONTRACT.isSummoned(_parentId1), "S_BBD_0700");
        require(BLUCAMON_CONTRACT.isSummoned(_parentId2), "S_BBD_0701");
        address ownerOfParent1 = BLUCAMON_CONTRACT.ownerOf(_parentId1);
        require(ownerOfParent1 == _to, "S_BBD_0800");
        address ownerOfParent2 = BLUCAMON_CONTRACT.ownerOf(_parentId2);
        require(ownerOfParent2 == _to, "S_BBD_0801");
        uint256 parent1ElementalFragments = BLUCAMON_CONTRACT
            .getElementalFragments(_parentId1);
        uint256 parent2ElementalFragments = BLUCAMON_CONTRACT
            .getElementalFragments(_parentId2);
        require(!isWhitelisted[_to], "S_BBD_0900");
        uint256 fee = _calculateBreedingFee(
            parent1ElementalFragments,
            parent2ElementalFragments
        );
        whitelistBreedingDetail[_to] = BreedingDetail({
            fee: fee,
            isSuccess: _isSuccess,
            resultRarity: _resultRarity,
            ref: _ref,
            parentId1: _parentId1,
            parentId2: _parentId2
        });
        isWhitelisted[_to] = true;
        BLUCAMON_CONTRACT.breed(_parentId1, _parentId2);
    }

    function claim() external whenNotPaused {
        require(isWhitelisted[msg.sender], "S_BBD_1000");
        BreedingDetail memory detail = whitelistBreedingDetail[msg.sender];
        uint256 fee = detail.fee;
        require(BLUC_TOKEN.balanceOf(msg.sender) >= fee, "S_BBD_1100");
        require(
            BLUC_TOKEN.allowance(msg.sender, address(this)) >= fee,
            "S_BBD_1200"
        );
        uint256 buybackAmount = fee.mul(buybackPercent).div(100_00);
        uint256 treasuryAmount = fee - buybackAmount;
        if (buybackAmount > 0) {
            BLUC_TOKEN.transferFrom(msg.sender, buybackWallet, buybackAmount);
        }
        if (treasuryAmount > 0) {
            BLUC_TOKEN.transferFrom(msg.sender, treasuryWallet, treasuryAmount);
        }
        if (detail.isSuccess) {
            _mint(msg.sender, detail.resultRarity);
            uint256 newId = _getBlucamonId();
            refMapping[newId] = detail.ref;
        }
        delete whitelistBreedingDetail[msg.sender];
        isWhitelisted[msg.sender] = false;
    }

    function getBreedingDetail(address _address)
        external
        view
        returns (BreedingDetail memory)
    {
        return whitelistBreedingDetail[_address];
    }

    function getRef(uint256 _tokenId) external view returns (uint256) {
        return refMapping[_tokenId];
    }

    function isBreedable(uint256 _tokenId) external view returns (bool) {
        return BLUCAMON_CONTRACT.getElementalFragments(_tokenId) > 0;
    }

    function getBreedingFee(uint256 _parentId1, uint256 _parentId2)
        external
        view
        returns (uint256)
    {
        uint256 parent1ElementalFragments = BLUCAMON_CONTRACT
            .getElementalFragments(_parentId1);
        uint256 parent2ElementalFragments = BLUCAMON_CONTRACT
            .getElementalFragments(_parentId2);
        require(parent1ElementalFragments > 0, "S_BBD_1300");
        require(parent2ElementalFragments > 0, "S_BBD_1301");
        return
            _calculateBreedingFee(
                parent1ElementalFragments,
                parent2ElementalFragments
            );
    }

    function _calculateBreedingFee(
        uint256 _parent1ElementalFragments,
        uint256 _parent2ElementalFragments
    ) internal view returns (uint256) {
        uint256 fee1 = breedingFee[_parent1ElementalFragments];
        uint256 fee2 = breedingFee[_parent2ElementalFragments];
        return fee1.add(fee2).div(2);
    }

    function _mint(address _to, uint8 _rarity) internal {
        uint256 newTokenId = _getBlucamonId().add(1);
        string memory tokenUri = _getTokenUri(newTokenId);
        BLUCAMON_CONTRACT.mintBlucamon(_to, tokenUri, false, _rarity, 0, 0);
    }

    function _getBlucamonId() private view returns (uint256) {
        return BLUCAMON_CONTRACT.getBlucamonId();
    }

    function _getTokenUri(uint256 _id) private view returns (string memory) {
        return string(abi.encodePacked(baseURI, _id.toString()));
    }
}