// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IVault {
    function donate(uint amount) external returns (uint256);
    function deposit(uint _amount) external returns (uint256);

    function balanceOf(address _customerAddress) external view returns (uint256);
    function transfer(address _toAddress, uint256 _amountOfTokens) external returns (bool);
}

contract VaultProxy  {

    uint256 public constant MAX_UINT = 2**256 - 1;

    address public tokenAddress;
    address public vaultAddress;

    IVault private vault;
    IERC20 private token;

    /*=======================================
    =            PUBLIC FUNCTIONS           =
    =======================================*/

    constructor(address _tokenAddress, address _vaultAddress) public {
        tokenAddress = _tokenAddress;
        token = IERC20(_tokenAddress);

        vaultAddress = _vaultAddress;
        vault = IVault(_vaultAddress);
    }

    receive() payable external {
        require(false);
    }

    function donate(uint amount) public returns (uint256) {
        require(token.transferFrom(msg.sender, address(this),amount));

        uint _balance = token.balanceOf(address(this));

        token.approve(vaultAddress, _balance);

        return vault.donate(_balance);
    }

    function deposit(uint _amount) public returns (uint256)  {
        return depositTo(msg.sender, _amount);
    }

    function depositTo(address _user, uint _amount) public returns (uint256)  {
        require(_amount > 0, "amount must be greater than zero");
        require(token.transferFrom(msg.sender, address(this), _amount), "sender requires adequate balance and approvals");
        
        uint _balance = token.balanceOf(address(this));

        token.approve(vaultAddress, _balance);
        vault.deposit(_balance);

        uint _vault_balance = vault.balanceOf(address(this));

        require(vault.transfer(_user, _vault_balance), "Stack transfer failed");

        return _vault_balance;
    }
}