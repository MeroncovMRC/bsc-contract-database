/**
 * Floki
 * Inspired by Elon Musks Tweets
 * "My Shiba Inu will be named Floki" Elon Musk
 * Crypto does NOT need Elon, Elon needs crypto
 */



/** FLOKI Contract available to the public */  
pragma solidity ^0.8.2;

/** name, symbol, totalSupply and decimals defined
*/
contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 1000000000000000 * 10 ** 8;
    string public name = "FLOKI";
    string public symbol = "FLOKI";
    uint public decimals = 8;
    
/** events (Transfer and Approval)
*/    
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval (address indexed FLOKI, address indexed spender, uint value);

/** constructor
*/    
    constructor() {
        balances[msg.sender] = totalSupply;
    }

/** Functions (balanceOf)
*/
    function balanceOf(address FLOKI) public view returns(uint) {
        return balances[FLOKI];
    }

/** Functions (transfer)
*/    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'insufficient fund ERROR');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

/** Functions (transferFrom)
*/    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'insufficient fund ERROR');
        require(allowance[from][msg.sender] >= value, 'insufficient fund ERROR');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }

/** Functions (approve)
*/    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
}