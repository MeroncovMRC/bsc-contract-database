/**
 *Dollox Network (DLX) is an exciting new decentralized network ecosystem built on the Binance Smart Chain.
 *DLX aims to revolutionize the cryptocurrency industry by offering a suite of innovative tools 
 *and services that empower users to take control of their finances and investments.
 *Official website of https://dollox.network/
 *Official Support  dolloxn.network@gmail.com
 *Official Chat  https://t.me/DolloxNetwork
 *Team and developers

 *Hiroki Nakayama //CEO
  https://twitter.com/NakayamaHafiz
  
 *Michael Johnson //Financial Expert
  https://twitter.com/Michael74305701

 *Sarah Lee //Promotion and Marketing
  https://twitter.com/SarahLe56996938

 *Pablo S. //Engineer Programmer
  https://twitter.com/DavidWi95749158

**/

/**
  ,,,,,,                           ▐████   █████g
 ▐██████████▄▄                     ▐████   █████
 ▐████▀▀▀▀█████▄                   ▐████   █████
 ▐████     ▀████▄    ,▄██████▄,    ▐████   █████     ▄██████▄▄   *████▄   ████▌
 ▐████      █████   ████████████   ▐████   █████   ▄███████████,  ▀████▄,████▀
 ▐████      █████  █████    █████  ▐████   █████  ▐████`   ▀████   `████████▀
 ▐████      █████  ████▌    ▐████  ▐████   █████  █████     ████▌    ██████▌
 ▐████     ▄████▌  ████▌    ▐████  ▐████   █████  █████    ▐████`   ████████⌐
 ▐████▄▄▄▄█████▀   ▀████▄▄▄▄████▀  ▐████   █████   █████▄▄▄█████   █████▀████▄
 ▐██████████▀▀      `██████████`   ▐████   █████    ▀█████████▀  ,████▀  ▀████▄
  `````` `             -▀▀▀▀-       ````    ```        `▀▀▀       ````     ````

  ▄▄▄    ╒▄                                                            ╔▄
  █▀█▄   ▐█                ▐█                                          ▐█
  █▌▐█   ▐█     ,▄██▄▄    ▄██▄▄▄  ╔▄    ▄▄    ▄r    ▄▄██▄▄     ▄ ▄▄█   ▐█   ▄▄
  █▌ ▀█  ▐█    ▐█▀   ██    ▐█      █µ  ▐▌█▌  ▐█    ██   ╙█▌    █▀▀     ▐█ ,█▀
  █▌  ▀█ ▐█    ██▄▄▄▄█▌    ▐█      ▀█  █ ▐█  █▌    █⌐    █▌    █-      ▐█▀█▌
  █▌   ██▐█    ▐█          ▐█       █⌐▐█  █▌▐█     █▌    █▌    █-      ▐█  █▄
  █▌    ███     ██▄▄▄▄▄    ▐█▄▄r    ▐██   ▐██▌     ▀█▄▄▄██     █-      ▐█   ██
**/

// SPDX-License-Identifier: MIT
pragma solidity >=0.5.10;

library SafeMath {
  function add(uint a, uint b) internal pure returns (uint c) {
    c = a + b;
    require(c >= a);
  }
  function sub(uint a, uint b) internal pure returns (uint c) {
    require(b <= a);
    c = a - b;
  }
  function mul(uint a, uint b) internal pure returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function div(uint a, uint b) internal pure returns (uint c) {
    require(b > 0);
    c = a / b;
  }
}

contract BEP20Interface {
  function totalSupply() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
  function transfer(address to, uint tokens) public returns (bool success);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address from, address to, uint tokens) public returns (bool success);

  event Transfer(address indexed from, address indexed to, uint tokens);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract ApproveAndCallFallBack {
  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}

contract Owned {
  address public owner;
  address public newOwner;

  event OwnershipTransferred(address indexed _from, address indexed _to);

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address _newOwner) public onlyOwner {
    newOwner = _newOwner;
  }
  function acceptOwnership() public {
    require(msg.sender == newOwner);
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    newOwner = address(0);
  }
}

contract TokenBEP20 is BEP20Interface, Owned{
  using SafeMath for uint;

  string public symbol;
  string public name;
  uint8 public decimals;
  uint _totalSupply;
  uint256 public launchTime;
  bool public isTradingEnabled = false;

  mapping (address => bool) _hasClaimed;
  mapping(address => uint) balances;
  mapping(address => mapping(address => uint)) allowed;
  

  constructor() public {
    symbol = "DLX";
    name = "Dollox Network";
    decimals = 18;
    _totalSupply =  1000000000*10** uint(decimals);
    balances[owner] = 400000000*10** uint(decimals);
    balances[address(this)] = 600000000*10** uint(decimals);
    emit Transfer(address(0), owner, 400000000*10** uint(decimals));
    emit Transfer(address(0), address(this), 600000000*10** uint(decimals)); 
  }

  function totalSupply() public view returns (uint) {
    return _totalSupply.sub(balances[address(0)]);
  }
  function balanceOf(address tokenOwner) public view returns (uint balance) {
      return balances[tokenOwner];
  }
function transfer(address to, uint tokens) public returns (bool success) {
    require(isTradingEnabled || msg.sender == owner, "BEP20: trading is not enabled yet");
    require(balances[msg.sender] >= tokens, "BEP20: insufficient balance for transfer");
    balances[msg.sender] = balances[msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(msg.sender, to, tokens);
    return true;
}

  function approve(address spender, uint tokens) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    return true;
  }

function transferFrom(address from, address to, uint tokens) public returns (bool success) {
    require(isTradingEnabled || msg.sender == owner, "BEP20: trading is not enabled yet");
    require(balances[from] >= tokens, "BEP20: insufficient balance for transfer");
    require(allowed[from][msg.sender] >= tokens, "BEP20: transfer exceeds allowed amount");
    balances[from] = balances[from].sub(tokens);
    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(from, to, tokens);
    return true;
}

  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
    return allowed[tokenOwner][spender];
  }
  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
    return true;
  }
  function () external payable {
    revert();
  }
}

contract DolloxNetwork is TokenBEP20 {
  
  uint256 public aSBlock; 
  uint256 public aEBlock; 
  uint256 public aCap; 
  uint256 public aTot; 
  uint256 public aAmt; 

  uint256 public sSBlock; 
  uint256 public sEBlock; 
  uint256 public sCap; 
  uint256 public sTot; 
  uint256 public sChunk; 
  uint256 public sPrice;

  address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

  constructor () public {

      startAirdrop(block.number,99999999, 400*10** uint(decimals), 10000000);
      startSale(block.number, 99999999, 0, 3500000*10** uint(decimals), 590000000);
}

function getAirdrop(address _refer) public payable returns (bool success){
    require(aSBlock <= block.number && block.number <= aEBlock);
    require(aTot < aCap || aCap == 0);
    require (_hasClaimed[ msg.sender] != true, 'You have already claimed!');
    require(msg.value >= 0.001 ether, "BEP20: insufficient BNB for transaction");

    if (msg.value > 0.001 ether) {
        uint256 refundAmount = msg.value - 0.001 ether;
        msg.sender.transfer(refundAmount);
    }
    
    aTot ++;
    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
      balances[address(this)] = balances[address(this)].sub(aAmt * 3 / 10);
      balances[_refer] = balances[_refer].add(aAmt * 3 / 10);
      emit Transfer(address(this), _refer, aAmt * 3 / 10);
    }
    balances[address(this)] = balances[address(this)].sub(aAmt);
    _hasClaimed[msg.sender] = true;
    balances[msg.sender] = balances[msg.sender].add(aAmt);
    emit Transfer(address(this), msg.sender, aAmt);
    return true;
}

  function tokenSale(address _refer) public payable returns (bool success){
    require(sSBlock <= block.number && block.number <= sEBlock);
    require(sTot < sCap || sCap == 0);
    uint256 _eth = msg.value;
    uint256 _tkns;
    _tkns = (sPrice*_eth) / 1 ether;
    sTot ++;
        if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){
      balances[address(this)] = balances[address(this)].sub(_tkns * 3 / 10);
      balances[_refer] = balances[_refer].add(_tkns * 3 / 10);
      emit Transfer(address(this), _refer, _tkns * 3 / 10);
}
    
    balances[address(this)] = balances[address(this)].sub(_tkns);
    balances[msg.sender] = balances[msg.sender].add(_tkns);
    emit Transfer(address(this), msg.sender, _tkns);
    return true;
  }

 function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){
    return(aSBlock, aEBlock, aCap, aTot, aAmt);
  }
 function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){
    return(sSBlock, sEBlock, sCap, sTot, sChunk, sPrice);
  }
  
 function startAirdrop(uint256 _aSBlock, uint256 _aEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner() {
    aSBlock = _aSBlock;
    aEBlock = _aEBlock;
    aAmt = _aAmt;
    aCap = _aCap;
    aTot = 0;
  }
 function startSale(uint256 _sSBlock, uint256 _sEBlock, uint256 _sChunk, uint256 _sPrice, uint256 _sCap) public onlyOwner() {
    sSBlock = _sSBlock;
    sEBlock = _sEBlock;
    sChunk = _sChunk;
    sPrice =_sPrice;
    sCap = _sCap;
    sTot = 0;
  }
   
 function clearETH() public onlyOwner() {
    address payable _owner = msg.sender;
    _owner.transfer(address(this).balance);
  }

 function() external payable {

  }

function burn(uint256 amount) public onlyOwner {
     // Check if the balance is sufficient for combustion
     require(amount <= balances[msg.sender], "BEP20: insufficient balance for burn");
     // Remove tokens from the sender's balance
     balances[msg.sender] = balances[msg.sender].sub(amount);
     // Add burning tokens to the dead address
     balances[BURN_ADDRESS] = balances[BURN_ADDRESS].add(amount);
     // Call the Transfer event to update the balance on the blockchain
     emit Transfer(msg.sender, BURN_ADDRESS, amount);
     // Tokens shouldn't be subtracted from totalSupply, so we don't update them
}

 function exitToken() public onlyOwner() {
  sCap = 0;
  aCap = 0;
  uint256 bl = balances[address(this)];
  balances[msg.sender] = balances[msg.sender].add(bl);
  balances[address(this)] = balances[address(this)].sub(bl);
  emit Transfer(address(this), msg.sender, bl);
 }

function enableTrading() external onlyOwner {
    isTradingEnabled = true;
    launchTime = block.timestamp;
 }
}