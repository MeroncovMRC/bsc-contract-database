{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"},"KsnReferralStaking.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\nimport \"./IERC20.sol\";\n\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// import \"./IERC20.sol\";\n\ncontract KsnReferralStaking is Ownable {\n    IERC20 public rewardsToken; // Contract address of reward token\n    IERC20 public stakingToken; // Contract address of staking token\n    uint256 public totalTokenStaked;\n\n  \n    mapping(address =\u003e address[]) public userReferrers;\n    mapping(address=\u003euint256) public userTotalReferrers;\n\n    struct Pool {\n        string poolName;\n        uint256 stakingDuration;\n        uint256 APY; // in %\n        uint256 referralRewardPercentage; // Referral reward percentage for this pool\n        uint256 minimumDeposit; // passed in as wei\n        uint256 totalStaked;\n        uint256 lockDuration; // added lock duration\n        bool stakingIsPaused; // added stakingIsPaused variable\n        mapping(address =\u003e uint256) userStakedBalance;\n        mapping(address =\u003e bool) hasStaked;\n        mapping(address =\u003e uint256) lastTimeUserStaked;\n        mapping(address =\u003e address) referrer;\n        mapping(address =\u003e uint256) referralRewards;\n        address[] stakers;\n        bool poolIsInitialized;\n    }\n\n    mapping(uint256 =\u003e Pool) public pools;\n    uint256 poolIndex;\n    uint256[] public poolIndexArray;\n    mapping(address=\u003euint256)public userBalances;\n    mapping(uint256 =\u003e mapping(address =\u003e bool)) public hasReferredStake;\n\n    constructor(address _stakingToken, address _rewardsToken) {\n        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardsToken);\n        poolIndex = 0;\n    }\n\n    function createPool(\n        string memory _poolName,\n        uint256 _stakingDuration,\n        uint256 _APY,\n        uint256 _referralRewardPercentage,\n        uint256 _minimumDeposit,\n        uint256 _lockDuration\n    ) external onlyOwner returns (uint256 _createdPoolIndex) {\n        pools[poolIndex].poolName = _poolName;\n        pools[poolIndex].stakingDuration = _stakingDuration;\n        pools[poolIndex].APY = _APY;\n        pools[poolIndex].referralRewardPercentage = _referralRewardPercentage;\n        pools[poolIndex].minimumDeposit = _minimumDeposit;\n        pools[poolIndex].lockDuration = _lockDuration;\n        pools[poolIndex].poolIsInitialized = true;\n\n        poolIndexArray.push(poolIndex);\n        poolIndex += 1;\n\n        return (poolIndex - 1);\n    }\n\n    function stake(\n        uint256 _amount,\n        uint256 _poolID,\n        address _referrer\n    ) external {\n        require(\n            pools[_poolID].poolIsInitialized == true,\n            \"Pool does not exist\"\n        );\n        require(\n            _amount \u003e= pools[_poolID].minimumDeposit,\n            \"You are trying to stake below the minimum for this pool\"\n        );\n\n        uint256 previousBalance = pools[_poolID].userStakedBalance[msg.sender];\n\n        if (pools[_poolID].hasStaked[msg.sender] == true) {\n            // Update user balance if they already have a stake in this pool\n            pools[_poolID].userStakedBalance[msg.sender] += _amount;\n        } else {\n            // Otherwise, set the user balance to the staked amount\n            pools[_poolID].userStakedBalance[msg.sender] = _amount;\n            pools[_poolID].hasStaked[msg.sender] = true;\n            pools[_poolID].stakers.push(msg.sender);\n        }\n\n        pools[_poolID].totalStaked =\n            pools[_poolID].totalStaked +\n            (_amount - previousBalance);\n\n        if (_referrer != address(0) \u0026\u0026 _referrer != msg.sender) {\n            pools[_poolID].referrer[msg.sender] = _referrer;\n            hasReferredStake[_poolID][_referrer] = true; // Mark the referrer as having referred a stake in this pool\n            address[] storage referrerList = userReferrers[_referrer];\n            bool isDuplicate = false;\n\n            userBalances[_referrer]+=_amount;\n            \n            for (uint256 i = 0; i \u003c referrerList.length; i++) {\n                if (referrerList[i] == msg.sender) {\n                    isDuplicate = true;\n                    break;\n                }\n            }\n            if(isDuplicate==false){\n                userReferrers[_referrer].push(msg.sender);\n                userTotalReferrers[msg.sender]++;  \n\n            }\n        }\n\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n        totalTokenStaked = totalTokenStaked + _amount;\n\n        pools[_poolID].lastTimeUserStaked[msg.sender] = block.timestamp;\n    }\n\n    function unstake(uint256 _poolID) external {\n        require(\n            pools[_poolID].hasStaked[msg.sender],\n            \"You currently have no stake in this pool.\"\n        );\n\n        uint256 stakedAmount = pools[_poolID].userStakedBalance[msg.sender];\n\n        // Calculate reward and referral reward\n        uint256 reward = calculateUserRewards(msg.sender, _poolID);\n        uint256 referralReward = calculateReferralRewards(msg.sender, _poolID);\n\n        // Decrease balance before transfer to prevent re-entrancy\n        pools[_poolID].userStakedBalance[msg.sender] = 0;\n        pools[_poolID].hasStaked[msg.sender] = false;\n        pools[_poolID].totalStaked -= stakedAmount;\n\n        // Transfer rewards to the user\n        if (reward \u003e 0) {\n            rewardsToken.transfer(msg.sender, reward);\n        }\n\n        // Transfer referral rewards to the referrer\n        if (referralReward \u003e 0) {\n            address referrer = pools[_poolID].referrer[msg.sender];\n            pools[_poolID].referralRewards[referrer] += referralReward;\n            rewardsToken.transfer(referrer, referralReward);\n        }\n\n        require(\n            block.timestamp \u003e=\n                pools[_poolID].lastTimeUserStaked[msg.sender] +\n                    pools[_poolID].lockDuration,\n            \"Stake is still locked\"\n        );\n\n        // Transfer staked amount back to the user\n        stakingToken.transfer(msg.sender, stakedAmount);\n    }\n\n    function claimReward(uint256 _poolID) external {\n        require(_poolID \u003c poolIndex, \"Invalid pool ID\");\n        require(\n            pools[_poolID].hasStaked[msg.sender] == true,\n            \"You currently have no stake in this pool\"\n        );\n\n        // uint stakeTime = pools[_poolID].lastTimeUserStaked[msg.sender];\n\n        // require(block.timestamp \u003e= stakeTime + pools[_poolID].lockDuration, \"Stake is still locked\");\n\n        uint256 reward = calculateUserRewards(msg.sender, _poolID);\n        require(reward \u003e 0, \"Rewards are too small to be claimed\");\n\n        // Calculate referral reward\n        uint256 referralReward = calculateReferralRewards(msg.sender, _poolID);\n\n        // Adjust user reward by deducting referral reward\n        uint256 adjustedReward = reward - referralReward;\n\n        // Transfer adjusted reward to claimer\n        rewardsToken.transfer(msg.sender, adjustedReward);\n\n        // Transfer referral reward to referrer\n        if (referralReward \u003e 0) {\n            address referrer = pools[_poolID].referrer[msg.sender];\n            pools[_poolID].referralRewards[referrer] += referralReward;\n            rewardsToken.transfer(referrer, referralReward);\n        }\n    }\n\n    // Function to calculate user rewards\n    function calculateUserRewards(address _user, uint256 _poolID)\n        public\n        view\n        returns (uint256)\n    {\n        if (pools[_poolID].hasStaked[_user] == true) {\n            uint256 lastTimeStaked = pools[_poolID].lastTimeUserStaked[_user];\n            uint256 periodSpentStaking = block.timestamp - lastTimeStaked;\n\n            uint256 userStake_wei = pools[_poolID].userStakedBalance[_user];\n            uint256 userReward_inWei = (userStake_wei *\n                pools[_poolID].APY *\n                periodSpentStaking) / (365 days * 100);\n\n            return userReward_inWei;\n        } else {\n            return 0;\n        }\n    }\n\n    // Function to calculate referral rewards\n    function calculateReferralRewards(address _user, uint256 _poolID)\n        public\n        view\n        returns (uint256)\n    {\n        address referrer = pools[_poolID].referrer[_user];\n        if (referrer != address(0)) {\n            uint256 userReward = calculateUserRewards(_user, _poolID);\n            uint256 referralReward = (userReward *\n                pools[_poolID].referralRewardPercentage) / 100;\n\n            return referralReward;\n        } else {\n            return 0;\n        }\n    }\n\n    function claimReferralReward(uint256 _poolID) external {\n        require(_poolID \u003c poolIndex, \"Invalid pool ID\");\n        require(\n            pools[_poolID].hasStaked[msg.sender] == true,\n            \"You currently have no stake in this pool.\"\n        );\n\n        uint256 referralReward = pools[_poolID].referralRewards[msg.sender];\n        require(\n            referralReward \u003e 0,\n            \"You currently have no referral rewards to claim\"\n        );\n\n        pools[_poolID].referralRewards[msg.sender] = 0;\n        rewardsToken.transfer(msg.sender, referralReward);\n    }\n\n    function pauseStaking(uint256 _poolID) external onlyOwner {\n        require(\n            pools[_poolID].poolIsInitialized == true,\n            \"Pool does not exist\"\n        );\n        pools[_poolID].stakingIsPaused = true;\n    }\n\n    function resumeStaking(uint256 _poolID) external onlyOwner {\n        require(\n            pools[_poolID].poolIsInitialized == true,\n            \"Pool does not exist\"\n        );\n        pools[_poolID].stakingIsPaused = false;\n    }\n\n    function getPoolInfo(uint256 _poolID)\n        external\n        view\n        returns (\n            string memory poolName,\n            uint256 stakingDuration,\n            uint256 APY,\n            uint256 minimumDeposit,\n            uint256 totalStaked,\n            bool stakingIsPaused,\n            bool poolIsInitialized\n        )\n    {\n        require(\n            pools[_poolID].poolIsInitialized == true,\n            \"Pool does not exist\"\n        );\n\n        return (\n            pools[_poolID].poolName,\n            pools[_poolID].stakingDuration,\n            pools[_poolID].APY,\n            pools[_poolID].minimumDeposit,\n            pools[_poolID].totalStaked,\n            pools[_poolID].stakingIsPaused,\n            pools[_poolID].poolIsInitialized\n        );\n    }\n\n    function getUserInfo(uint256 _poolID, address _user)\n        external\n        view\n        returns (\n            uint256 userStakedBalance,\n            bool hasStaked,\n            uint256 lastTimeUserStaked,\n            address referrer,\n            uint256 referralRewards\n        )\n    {\n        require(\n            pools[_poolID].poolIsInitialized == true,\n            \"Pool does not exist\"\n        );\n\n        return (\n            pools[_poolID].userStakedBalance[_user],\n            pools[_poolID].hasStaked[_user],\n            pools[_poolID].lastTimeUserStaked[_user],\n            pools[_poolID].referrer[_user],\n            pools[_poolID].referralRewards[_user]\n        );\n    }\n\n    function getPoolCount() external view returns (uint256) {\n        return poolIndexArray.length;\n    }\n}"}}