// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

pragma solidity ^0.8.7;

contract ruptowayico is Ownable {
    
    struct refferalReward {
        address toAddress;
        address fromAddress;
        uint256 datetime;
        uint256 amount;
        uint256 busd;
        uint256 reward;
        uint256 level;
        uint256 rewardPercentage;
    }
    struct Transactions {
        address toAddress;
        uint256 busd;
        uint256 rwt;
        uint256 rate;
        uint256 timestamp;
        address user;
        address refferal;
    }
    struct User {
        address _address;
        address refferal;
        uint256 totalSwaps;
        uint256 totalBusd;
        uint256 totalRwt;
        uint256 starttime;
        uint256 refferalRewards;
    }
    mapping(address => User) public user;
    refferalReward[] public ref;
    Transactions[] public txn;

    address[] public usersAddresses;
    IERC20 public busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    uint256 public rwtRate = 10e18;
    uint256 public maxrwt = 100000e18;
    uint256 public swapped ;
    uint256 public minrwt = 10;
    uint256[3] public levelReward = [5e18, 3e18, 2e18];
    address public defaultAdderss;

    constructor(address _defaultAddress) {
        defaultAdderss = _defaultAddress;
        user[_defaultAddress]._address = _defaultAddress;
        user[_defaultAddress].starttime = block.timestamp;
    }

    function swap(address _refferal, uint256 _rwt) public {
        require(swapped <= maxrwt, "Swapping finish");
        require(msg.sender != _refferal, "user and reffral cannot be same !");
        require(_rwt >= minrwt, "minimum value is 10 RWT");
        // require(user[_refferal]._address != address(0), "refferal Invalid !");
        uint256 levels;
        uint256 reward;
        uint256 totalb = _rwt * rwtRate;
        busd.transferFrom(msg.sender,address(this),totalb);
        if (user[msg.sender].starttime == 0) {
            usersAddresses.push(msg.sender);
            user[msg.sender]._address = msg.sender;
            user[msg.sender].refferal = _refferal;
            user[msg.sender].totalSwaps = 1;
            user[msg.sender].starttime = block.timestamp;
            user[msg.sender].totalBusd = totalb;
            user[msg.sender].totalRwt = _rwt ;
        } else {
            user[msg.sender].totalSwaps = user[msg.sender].totalSwaps + 1;
            user[msg.sender].totalBusd = user[msg.sender].totalBusd + totalb;
            user[msg.sender].totalRwt = user[msg.sender].totalRwt + _rwt;
        }
        txn.push(
            Transactions({
                toAddress: msg.sender,
                busd: totalb,
                rwt: _rwt,
                rate: rwtRate,
                timestamp: block.timestamp,
                user: msg.sender,
                refferal: _refferal
            })
        );
        swapped = swapped + _rwt;
        if (usersAddresses.length <= 3) {
            levels = usersAddresses.length;
        } else {
            levels = levelReward.length;
        }
        for (uint256 i = 0; i < levels; i++) {
            address refferal = _refferal;
            //Level Income
            if (user[refferal]._address != address(0)) {
                reward = ((_rwt * levelReward[i]) / 100e18); //Give income
                user[refferal].refferalRewards =
                    user[refferal].refferalRewards +
                    reward;
                ref.push(
                    refferalReward({
                        toAddress: refferal,
                        fromAddress: msg.sender,
                        datetime: block.timestamp,
                        amount: _rwt,
                        busd : totalb,
                        reward: reward,
                        level: i+1, 
                        rewardPercentage: levelReward[i]
                    })
                );
                _refferal = user[refferal].refferal;
            } else {
                break;
            }
        }
    }

    function getlevelreward(address _user) public view returns(refferalReward[] memory r){
        r=new refferalReward[](ref.length);
        for(uint256 i=0;i< ref.length;i++){
            if(ref[i].toAddress == _user)
            {
                r[i]= ref[i];
            }
        }
    }

    function gettransactions(address _user) public view returns(Transactions[] memory t){
        t=new Transactions[](txn.length);
        for(uint256 i=0;i< txn.length;i++){
            if(txn[i].toAddress == _user)
            {
                t[i]= txn[i];
            }
        }
    }

    function getalltransactions() public view returns(Transactions[] memory t){
        t=new Transactions[](txn.length);
        for(uint256 i=0;i< txn.length;i++){
            t[i]= txn[i];
        }
    }

    function getalllevelreward() public view returns(refferalReward[] memory r){
        r=new refferalReward[](ref.length);
        for(uint256 i=0;i< ref.length;i++){
            r[i]= ref[i];
        }
    }

    function changeBasetoken(address _token) public onlyOwner{
        busd = IERC20(_token);
    }

    function changeRate(uint256 _rate) public onlyOwner{
       rwtRate = _rate; 
    }

    function changemin(uint256 _min) public onlyOwner{
       minrwt = _min;
    }

    function changereward(uint256[] memory _reward) public onlyOwner {
        for(uint i=0; i< _reward.length;i++)
        {
            levelReward[i] = _reward[i];
        }
    }
    
    function withdrawToken(uint value) public onlyOwner {
        IERC20(busd).transferFrom(address(this),owner(),value);
    }
}