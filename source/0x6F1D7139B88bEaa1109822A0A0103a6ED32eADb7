// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title BBT
/// @dev A simple ERC20 Token example, where all tokens are pre-assigned to the creator.
/// Note they can later distribute these tokens as they wish using `transfer` function
contract BBT {
    // A mapping to record balances for each account: address -> balance
    mapping (address => uint256) public balanceOf;
    
    string public name = "BBT";  // Token name is BBT
    string public symbol = "BBT"; // Token symbol is BBT
    uint8 public decimals = 18; // Defines the number of decimals
    
    // Total supply of tokens
    uint256 public totalSupply;

    // Event triggered when tokens are transferred.
    event Transfer(address indexed from, address indexed to, uint256 value);

    /// @notice Constructor that gives msg.sender all of existing tokens.
    /// @param initialSupply The initial supply of tokens which will be fixed.
    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount
        balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens
        emit Transfer(address(0), msg.sender, totalSupply); // Emit event for token transfer
    }

    /// @notice Transfers `_value` amount of tokens to address `_to`, and checks for overflow
    /// @dev Transfers sender's tokens to another account, `_value` is the amount of tokens to be transferred
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return success Indicates if the operation was successful
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance."); // Check if the sender has enough
        balanceOf[msg.sender] -= _value; // Subtract from the sender
        balanceOf[_to] += _value; // Add the same to the recipient
        emit Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place
        return true;
    }
}