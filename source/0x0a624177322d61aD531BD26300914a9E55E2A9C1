// File: contracts/interfaces/IPancakeRouter01.sol

//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/interfaces/IPancakeRouter02.sol



pragma solidity >=0.6.2;


interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: contracts/interfaces/IPancakeFactory.sol


pragma solidity >=0.5.0;

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

// File: contracts/interfaces/ITWAPOracle.sol


pragma solidity >=0.5.0;

interface ITWAPOracle {

    function update() external;
    function consult(address token, uint amountIn) external view returns (uint amountOut);
    function isSetup() external view returns (bool _isSetup);
    function canUpdate() external returns (bool _canUpdate);

}
// File: contracts/interfaces/IDipMaster.sol


pragma solidity >= 0.8.4;

interface IDipMaster {
    
    function endRound() external;
    function startRound(uint _timeInMins) external;
    function claimAirdrop(address _airdropAddress, address _user, uint _round) external;
    function wojakLpPair() external returns (address _wojakLpPair);
    function bogLpPair() external returns (address _bogLpPair);
    function wojakAddress() external returns (address _WOJAK);
    function bogAddress() external returns (address _BOG);
    function getOracleAddresses() external view returns (address _wojakOracle, address _bogOracle);
}

// File: node_modules/@openzeppelin/contracts/utils/Context.sol



pragma solidity ^0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);
    
    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
    
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: node_modules/@openzeppelin/contracts/access/Ownable.sol



pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts/AirDrop.sol



pragma solidity >= 0.8.0;




contract AirDrop is Ownable {
    
    address public masterAddress;
    address public pcsRouter;
    
    bool public isRunning;
    bool private hasCalled;
    
    uint private currentRound;
    uint internal lastRound;

    uint public airdropTokensAvailable;
    uint public totalAirdropsAllocated;
    uint public totalAirdropsEligible;
    
    AirDrop public otherAirdropContract;
    
    // Info of each airdrop round.
    mapping (uint256 => AirdropInfo) public airdropInfo;
    // Info of each user that participated in round.
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;
    
    struct AirdropInfo {
        uint allocation;
        uint totalEligible;
        bool hasLost;
    }
    
    struct UserInfo {
        address user;
        uint amountEligible;
    }
        
    event ClaimAirdrop (address user, uint round, uint amount);

    constructor (address _masterAddress, address _pcsRouter, uint _airdropAmount) {
        masterAddress = _masterAddress;
        pcsRouter = _pcsRouter;
        airdropTokensAvailable = _airdropAmount;
    }
    
    modifier onlyMaster () {
        require(msg.sender == masterAddress, "Sender is not Dip Master");
        _;
    }
    
    modifier onlyToken () {
        require(msg.sender == IDipMaster(masterAddress).wojakAddress() || msg.sender == IDipMaster(masterAddress).bogAddress(), "Sender has to be token contract");
        _;
    }
    
    function startRound() external onlyMaster {
        require(!isRunning, "Round cannot be running");
        currentRound++;
        setAllocation();
        isRunning = true;
    }
    
    function endRound(bool _hasLost, bool isTie) external onlyMaster {
        require(isRunning, "Round has to be running in order to end it");
        isRunning = false;
        airdropInfo[currentRound].hasLost = _hasLost;
        lastRound++;
        
        if(_hasLost || isTie){
            airdropTokensAvailable += airdropInfo[currentRound].allocation; // Since the token lost, we don't want to lock away tokens unnecessary
            airdropInfo[currentRound].allocation = 0; // Make sure to reset allocation
        }
    }
    
    //Set allocation of the current round
    function setAllocation() private {
        //Gotta make sure we actually have enough tokens. If we owe more than we have, we'll revert
        require(!isRunning, "ERR: Cannot set allocation mid-round");
        uint airdropTokensToAllocate = airdropTokensAvailable / 100; // 1% of all airdrop tokens that has yet to be allocated
        
        require(IERC20(address(this)).balanceOf(address(this)) > airdropTokensToAllocate, "ERR: Contract does not have enough tokens");
        airdropInfo[currentRound].allocation = airdropTokensToAllocate;
        airdropTokensAvailable -= airdropTokensToAllocate; //subtract allocation from available tokens
    }
    
    //Whenever someone buys our token, we give them a share of the total airdrop pot. This is calculated in the end
    function addEligible(address _user, uint _amountEligible) external onlyToken {
        airdropInfo[currentRound].totalEligible += _amountEligible;
        userInfo[currentRound][_user].amountEligible += _amountEligible;
    }
    
    //Same when selling
    function subEligible(address _user, uint _amountEligible) external onlyToken {
        require(userInfo[currentRound][_user].amountEligible > 0, "Cannot subtract something from nothing");
        airdropInfo[currentRound].totalEligible -= _amountEligible;
        userInfo[currentRound][_user].amountEligible -= _amountEligible;
    }
    
    //Get amount of airdrop the user is eligible. Beware this is NOT the amount of tokens the contract owes the user
    function getAirdropEligible(address _user, uint _round) public view returns (uint) {
        return userInfo[_round][_user].amountEligible;
    }
    
    /*
    ** Calculate the amount of airdrop the contract owes the user. Takes the total % of the pool the user essentially "owns"
    ** and multiplies with total allocation
    */
    function getTokensOwed(address _user, uint _round) public view returns (uint){
        uint eligibleAmount = getAirdropEligible(_user, _round);
        
        return (eligibleAmount / airdropInfo[_round].totalEligible) * airdropInfo[_round].allocation;
    }
    
    function setOtherAirdropContract(address _contract) external onlyMaster {
        otherAirdropContract = AirDrop(_contract);
    }
}


// File: node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol



pragma solidity ^0.8.0;





/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20 {
    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    AirDrop airdropContract;
    string private _name;
    string private _symbol;

    event Log (string _err);

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The defaut value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        airdropContract = AirDrop(address(this));
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;
        
        address masterAddress = airdropContract.masterAddress();

        //Try to end the round everytime someone swaps. We don't want to end up in an infinite loop though, so no master address
        if(airdropContract.isRunning() && sender != masterAddress && recipient != masterAddress){
            bool isEligible;
            IDipMaster dipMaster = IDipMaster(masterAddress);
            
            (address wojakOracleAddress, address bogOracleAddress) = dipMaster.getOracleAddresses();

            ITWAPOracle wojakOracle = ITWAPOracle(wojakOracleAddress);
            ITWAPOracle bogOracle = ITWAPOracle(bogOracleAddress);

            try wojakOracle.update() {
            } catch {
                emit Log("Could not update wojak oracle");
            }

            try bogOracle.update(){
            } catch {
                emit Log("Could not update bog oracle");
            }

            try dipMaster.endRound() {
            } catch {
                isEligible = true;
            }
            
            if(isEligible){
                AirDrop otherAirdropContract = airdropContract.otherAirdropContract();

                if(recipient == dipMaster.wojakLpPair() || recipient == dipMaster.bogLpPair()){
                    //Make sure we don't subtract if eligible amount is 0
                    try otherAirdropContract.subEligible(sender, amount) {} catch {}
                } else if (sender == dipMaster.wojakLpPair()
                || sender == dipMaster.bogLpPair()) {
                    otherAirdropContract.addEligible(recipient, amount);
                }
            }
        }
        
        emit Transfer(sender, recipient, amount);
    }
    
    function _lowLevelTransfer(address recipient, uint amount) internal {
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(address(this), recipient, amount);

        uint256 senderBalance = _balances[address(this)];
        
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[address(this)] = senderBalance - amount;
        _balances[recipient] += amount;
        
        emit Transfer(address(this), recipient, amount);
    }
    
    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}

// File: contracts/BuyTheDip.sol



pragma solidity >= 0.8.0;





//@param AirDrop: MasterDip address, pancakeswap router, amount of airdrops to allocate in ether
contract BuyTheDip is ERC20("Wojak", "WOJAK"), AirDrop(0x5A1905fD4FB568B5c9F305B6cEDE3C38191d1A2E,0x10ED43C718714eb63d5aA57B78B54704E256024E, 100000000 ether) {
    
    uint maxSupply = 1000000000 ether;
    
    address public pcsFactory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
    address public lpPair;
        
    constructor (address _to){
        address _wethAddress = IPancakeRouter02(pcsRouter).WETH();
        lpPair = IPancakeFactory(pcsFactory).createPair(address(this), _wethAddress);

        uint airdropAmount = airdropTokensAvailable;
        
        _mint(address(this), airdropAmount);
        _mint(_to, maxSupply - airdropAmount);
    }
    
    //Claim airdrop-function. Can only be called by user through dip master (which acts as an interface)
    function claimAirdrop(address _user, uint _round) public onlyMaster {
        uint eligibleAmount = getAirdropEligible(_user, _round);
        //Can only claim airdrop from this token if the other token lost and the round isn't running
        if(!airdropInfo[_round].hasLost) {
            require(eligibleAmount > 0, "User has no airdrop to claim");
            require(airdropTokensAvailable > 0, "There are no airdrop tokens left to claim");
            require(airdropInfo[_round].allocation > 0, "This airdrop pool has no allocated tokens");
            require(_round <= lastRound && lastRound > 0, "You cannot claim an airdrop that hasn't happened yet");
            
            uint tokensOwed = getTokensOwed(_user, _round);
            
            userInfo[_round][_user].amountEligible = 0;
            
            _lowLevelTransfer(_user, tokensOwed);
            emit ClaimAirdrop (_user, _round, tokensOwed);
        }
    }
}