/**
  
   token de investimento brcripto http://brcripto.com/
   Cripto moedas e tokens tem o objetivo principal de servir como moeda de pagamento mas 
   o que vemos na prática é que os usuários de cripto moedas e tokens usam elas 
   como um investimento financeiro e também como uma reserva de valores é e esse o objetivo 
   do Token brcripto.
 Ao contrário de outros token e criptomoedas o token brcripto e deflacionária com uma 
 queima infinita e automática de 4% em cada transferência  aumentando
a sua escassez e gradualmente aumenta também o seu valor.
De 1 bilhão de token 50% vão direto para carteira de queima
 [0x0000000000000000000000000000000000000001] que será facilmente identificada
Com mais de 50% dos token.
10% serão vendidos de forma independente para levantar capital que 
será convertidos em cripto dólar para forma a liquidez que será bloqueada para sempre.
10% dos token ficarão em poder do autor deste contrato para a criação de um 
fundo de investimento que usara os lucros desses investimentos para a recompra dos 
token tonado a fazer o mesmo siclo inicial por tempo indeterminado.
OS TOKEN DO FUNDO DE INVESTIMENTO SERÃO VENDIDO QUANDO O TOKEN CHEGAR AO VALOR DE 0.01
30% dos token serão adicionados no par brc/usd em https://pancakeswap.finance/
obs: de todo o lucro gerado pelo fundo de investimento dês da venda do token a todas 
as etapas 20% serão destinadas ao autor desse contrato em forma de pagamento por seus esforços.

 */
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

contract Token {
    
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    
    string public name = "brcripto";
    string public symbol = "BRC";
    
    uint public numeroDeMoedas = 1000000000;
    uint public casasDecimais = 8;
    
    uint public burnRate = 4; //Queima x% dos token transferidos de uma carteira para outra
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    uint public totalSupply = numeroDeMoedas * 10 ** casasDecimais;
    uint public decimals = casasDecimais;
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'Saldo insuficiente (balance too low)');
        uint valueToBurn = (value * burnRate / 100);
        balances[to] += value - valueToBurn;
        balances[0x0000000000000000000000000000000000000001] += valueToBurn;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'Saldo insuficiente (balance too low)');
        require(allowance[from][msg.sender] >= value, 'Sem permissao (allowance too low)');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
}