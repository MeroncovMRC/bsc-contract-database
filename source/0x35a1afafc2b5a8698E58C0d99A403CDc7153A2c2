{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"GlassFarmByVoucher.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./Ownable.sol\";\nimport \"./IMaterials.sol\";\nimport \"./ReentrancyGuard.sol\";\n\nlibrary EnumerableSet {\n    struct UintSet {\n        uint256[] _values;\n        mapping (uint256 =\u003e uint256) _indexes;\n    }\n\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        if (contains(set, value)) {\n            return false;\n        }\n\n        set._values.push(value);\n        set._indexes[value] = set._values.length;\n        return true;\n    }\n\n\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { \n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            uint256 lastvalue = set._values[lastIndex];\n\n            set._values[toDeleteIndex] = lastvalue;\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n            set._values.pop();\n            delete set._indexes[value];\n\n            return true;\n        } \n        else {\n            return false;\n        }\n    }\n\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    function length(UintSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        require(set._values.length \u003c index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    function values(UintSet storage set) internal view returns (uint256[] memory _vals) {\n        return set._values;\n    }\n}\n\n// standard interface of IERC20 token\n// using this in this contract to receive LP tokens or transfer\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface ISolvNFT {\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function isValid(uint256 tokenId) external view returns (bool);\n    \n    // claimType, term, vestingAmount, principal, maturities, perentages, availableWithdrawAmount, originalInvestor, isValid\n    function getSnapshot(uint256 tokenId) external view returns (uint8, uint64, uint256, uint256, \n        uint64[] memory, uint32[] memory, uint256, string memory, bool);\n    \n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\n// for receiving Solv NFT\ninterface IVNFTReceiver {\n    function onVNFTReceived(address operator, address from, uint256 tokenId, \n        uint256 units, bytes calldata data) external returns (bytes4);\n}\n\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n\ncontract GlassFarmByVoucher is Ownable, IVNFTReceiver, IERC721Receiver, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    // Info of each staked Solv NFT tokenId\n    struct TokenInfo {\n        address owner;\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        uint256 totalPrincipal;   // the last maturity time recorded in Solv NFT\n        uint256 allocPoint; // How many allocation points assigned to this pool. Materials to distribute per block.\n        uint256 lastRewardBlock; // Last block number that Materials distribution occurs.\n        uint256 accMaterialPerShare; // Accumulated Materials per share, times 1e30. See below.\n    }\n\n    address private _materials = 0xeDEe132Fcf90FE3157C389706b30c6A1c7A6C88D;\n    address private _binoToken = 0xA2dF7a11baF8bB555E93b99684A2DE0f105eB592;\n    address private _solvNFT = 0xe5ffDE144592121195d43fdfb3621fc7530c0040;\n    // Material (ERC1155) contract address\n    IMaterials public materials;\n    // Bino for reward\n    IERC20 public binoToken;\n    // solvNFT proxy address on bsc mainnet: 0xe5ffDE144592121195d43fdfb3621fc7530c0040\n    ISolvNFT public solvNFT;\n    // This contract is glass Farm, tokenId = 4\n    uint256 public materialId = 4;\n    // onVNFTReceived.selector\n    bytes4 private constant _VNFT_RECEIVED = 0xb382cdcd;\n    // mainnet: 2023.2.1, 1675206000 \n    uint256 private constant BINO_REWARD_PID = 1675206000;\n    uint256 private constant MAX_PRINCIPAL = 20000000 * 1e18;\n    // Dev address.\n    address public devaddr;\n    // MATERIAL tokens created per block.\n    uint256 public materialPerBlock;\n    uint256 public binoPerBlock;\n    uint256[] public pidList;\n\n    // pid =\u003e bool\n    mapping(uint256 =\u003e bool) private _isPoolValid;\n    // pid =\u003e PoolInfo\n    mapping(uint256 =\u003e PoolInfo) public poolInfo;\n    // pid =\u003e tokenId =\u003e TokenInfo\n    mapping(uint256 =\u003e mapping(uint256 =\u003e TokenInfo)) public tokenInfo;\n    // pid =\u003e tokenId =\u003e rewardBinoDebt for pool #1\n    mapping(uint256 =\u003e mapping(uint256 =\u003e uint256)) public rewardBinoDebt;\n    uint256 public accBinoPerShare;\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when MATERIAL mining starts.\n    uint256 public startBlock;\n\n    mapping(address =\u003e mapping(uint256 =\u003e EnumerableSet.UintSet)) private _userPidTokenIds;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 tokenId);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 tokenId);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 tokenId);\n\n    constructor(\n        uint256 _startBlock\n    ) public {\n        devaddr = _msgSender();\n        materialPerBlock = 2;     // decimal: 1e0\n        binoPerBlock = 286 * 1e15;             // decimal: 1e18\n        startBlock = _startBlock;\n        \n        materials = IMaterials(_materials);\n        binoToken = IERC20(_binoToken);\n        solvNFT = ISolvNFT(_solvNFT);\n    }\n\n    // read solvNFT\u0027s principal and last maturity timestamp\n    function getVNFTInfo(uint256 tokenId) public view returns (uint256, uint256) {\n        require(solvNFT.isValid(tokenId), \"this tokenId is not valid\");\n        uint256 principal;\n        uint64[] memory maturities;\n        ( , , , principal, maturities, , , , ) = solvNFT.getSnapshot(tokenId);\n        uint256 maturity = uint256(maturities[maturities.length - 1]);\n\n        return (principal, maturity);\n    }\n\n    function solvNFTOwnerOf(uint256 tokenId) public view returns (address) {\n        return solvNFT.ownerOf(tokenId);\n    }\n\n    function checkUserPidTokenIds(address user, uint256 pid) public view returns (uint256[] memory) {\n        return _userPidTokenIds[user][pid].values();\n    }\n\n    // _pid is the maturity time\n    function add(\n        uint256 _pid,\n        uint256 _allocPoint\n    ) public onlyOwner {\n        require(!_isPoolValid[_pid], \"this pool has already been added\");\n        uint256 lastRewardBlock =\n            block.number \u003e startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo[_pid] =\n            PoolInfo({\n                totalPrincipal: 0,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accMaterialPerShare: 0\n            });\n        _isPoolValid[_pid] = true;\n        pidList.push(_pid);\n    }\n\n    // Update the given pool\u0027s MATERIAL allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint\n    ) public onlyOwner {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function massUpdatePools() public {\n        uint256 length = pidList.length;\n        for(uint256 i = 0; i \u003c length; ++i) {\n            updatePool(pidList[i]);\n        }\n    }\n\n    function poolLength() public view returns(uint256) {\n        return pidList.length;\n    }\n\n    function isPoolValid(uint256 _pid) public view returns (bool) {\n        return _isPoolValid[_pid];\n    }\n\n    function availableLimitForBinoRewardPool() public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[BINO_REWARD_PID];\n        return MAX_PRINCIPAL.sub(pool.totalPrincipal);\n    }\n\n    // View function to see pending Materials on frontend.\n    function pendingMaterial(uint256 _pid, uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        require(solvNFT.isValid(_tokenId), \"this tokenId is not valid on solv\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        TokenInfo storage stakedToken = tokenInfo[_pid][_tokenId];\n        uint256 accMaterialPerShare = pool.accMaterialPerShare;\n        uint256 totalPrincipal = pool.totalPrincipal;   // 1e18\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 totalPrincipal != 0) {\n            uint256 materialReward =(block.number.sub(pool.lastRewardBlock))\n                    .mul(materialPerBlock).mul(pool.allocPoint).div(\n                    totalAllocPoint\n                );\n            accMaterialPerShare = accMaterialPerShare.add(\n                materialReward.mul(1e30).div(totalPrincipal)\n            );\n        }\n        return stakedToken.amount.mul(accMaterialPerShare).div(1e30).sub(stakedToken.rewardDebt);\n    }\n\n    // only for the bino reward pool\n    function pendingBinoReward(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        require(solvNFT.isValid(_tokenId), \"this tokenId is not valid on solv\");\n\n        PoolInfo storage pool = poolInfo[BINO_REWARD_PID];\n        TokenInfo storage stakedToken = tokenInfo[BINO_REWARD_PID][_tokenId];\n\n        uint256 tempAccBinoPerShare = accBinoPerShare;\n        uint256 totalPrincipal = pool.totalPrincipal;   // 1e18\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 totalPrincipal != 0) {\n            uint256 binoReward =(block.number.sub(pool.lastRewardBlock)).mul(binoPerBlock);\n            tempAccBinoPerShare = tempAccBinoPerShare.add(binoReward.mul(1e12).div(totalPrincipal));\n        }\n        return stakedToken.amount.mul(tempAccBinoPerShare).div(1e12).sub(rewardBinoDebt[BINO_REWARD_PID][_tokenId]);\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number \u003c= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 totalPrincipal = pool.totalPrincipal;   // 1e18\n        if (totalPrincipal == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 materialReward =(block.number.sub(pool.lastRewardBlock))\n                .mul(materialPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            \n        pool.accMaterialPerShare = pool.accMaterialPerShare.add(\n            materialReward.mul(1e30).div(totalPrincipal)\n        );\n\n        if(_pid == BINO_REWARD_PID) {\n            uint256 binoReward = (block.number.sub(pool.lastRewardBlock)).mul(binoPerBlock);\n            accBinoPerShare = accBinoPerShare.add(binoReward.mul(1e12).div(totalPrincipal));\n        }\n\n        pool.lastRewardBlock = block.number;\n    }\n\n    // solvNFT proxy contract must approve this contract as the operator\n    function deposit(uint256 _pid, uint256 _tokenId) public nonReentrant {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        require(msg.sender == solvNFT.ownerOf(_tokenId), \"you are not the owner of this tokenId\");\n        require(solvNFT.isValid(_tokenId), \"this tokenId is not valid on solv\");\n        // read info from solv contract\n        (uint256 principal, uint256 maturity) = getVNFTInfo(_tokenId);\n        require(maturity == _pid, \"this maturity solv can not deposit into this pool\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        TokenInfo storage stakedToken = tokenInfo[_pid][_tokenId];\n        // additional requirement for BINO_REWARD_PID\n        if(_pid == BINO_REWARD_PID) {\n            require(pool.totalPrincipal \u003c= MAX_PRINCIPAL, \"exceed total staked 20m BINO valued solv\");\n            require(pool.totalPrincipal.add(principal) \u003c= MAX_PRINCIPAL, \"exceed total staked 20m BINO valued solv\");\n        }\n\n        updatePool(_pid);\n        // stake\n        solvNFT.safeTransferFrom(address(msg.sender), address(this), _tokenId);\n\n        pool.totalPrincipal = pool.totalPrincipal.add(principal);\n        stakedToken.owner = msg.sender;\n        stakedToken.amount = principal;\n        stakedToken.rewardDebt = stakedToken.amount.mul(pool.accMaterialPerShare).div(1e30);\n        if(_pid == BINO_REWARD_PID) {\n            rewardBinoDebt[BINO_REWARD_PID][_tokenId] = stakedToken.amount.mul(accBinoPerShare).div(1e12);\n        }\n\n        _userPidTokenIds[msg.sender][_pid].add(_tokenId);\n\n        emit Deposit(msg.sender, _pid, _tokenId);\n    }\n\n    // this contract must be assigned as MinterRole for the Material contract\n    // Admin MUST deposit enough Bino Token as reward for pid#1 users\n    function withdraw(uint256 _pid, uint256 _tokenId) public nonReentrant {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        require(solvNFT.isValid(_tokenId), \"this tokenId is not valid on solv\");\n        PoolInfo storage pool = poolInfo[_pid];\n        TokenInfo storage stakedToken = tokenInfo[_pid][_tokenId];\n        address theOwner = stakedToken.owner;\n        require(msg.sender == theOwner, \"you are not the original owner of this solv NFT\");\n        updatePool(_pid);\n\n        uint256 pending =\n            stakedToken.amount.mul(pool.accMaterialPerShare).div(1e30).sub(\n                stakedToken.rewardDebt\n            );\n        materials.mint(msg.sender, materialId, pending, \"license minted\");\n        if(_pid == BINO_REWARD_PID) {\n            uint256 pendingBino = stakedToken.amount.mul(accBinoPerShare).div(1e12).sub(\n                rewardBinoDebt[BINO_REWARD_PID][_tokenId]);\n            require(binoToken.balanceOf(address(this)) \u003e= pendingBino, \"not enough Bino balance in this contract\");\n            binoToken.safeTransfer(msg.sender, pendingBino);\n        }\n        pool.totalPrincipal = pool.totalPrincipal.sub(stakedToken.amount);\n        stakedToken.amount = 0;\n        stakedToken.rewardDebt = 0;\n\n        solvNFT.safeTransferFrom(address(this), msg.sender, _tokenId);\n\n        _userPidTokenIds[msg.sender][_pid].remove(_tokenId);\n\n        emit Withdraw(msg.sender, _pid, _tokenId);\n    }\n\n    function emergencyWithdraw(uint256 _pid, uint256 _tokenId) public {\n        require(_isPoolValid[_pid], \"this pool is not added\");\n        TokenInfo storage stakedToken = tokenInfo[_pid][_tokenId];\n        address theOwner = stakedToken.owner;\n        require(msg.sender == theOwner, \"you are not the original owner of this solv NFT\");\n\n        stakedToken.amount = 0;\n        stakedToken.rewardDebt = 0;\n        solvNFT.safeTransferFrom(address(this), msg.sender, _tokenId);\n        \n        emit EmergencyWithdraw(msg.sender, _pid, _tokenId);\n    }\n\n    // Update dev address by the previous dev.\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n    }\n\n    function withdrawRemainingBino(address account, uint256 amount) public onlyOwner {\n        require(amount \u003c= binoToken.balanceOf(address(this)), \"withdraw amount \u003e bino balance in this contract\");\n        binoToken.safeTransfer(account, amount);\n    }\n\n    function onVNFTReceived(address, address, uint256, uint256, bytes memory) public override returns (bytes4) {\n        return _VNFT_RECEIVED;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}"},"IMaterials.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\ninterface IMaterials {\n    \n    function materialName(uint256 id) external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\n\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\n\n    function burn(address account, uint256 id, uint256 amount) external;\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}