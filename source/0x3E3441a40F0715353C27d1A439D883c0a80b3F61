pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Ownable {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }
}

interface IPancakeRouter {
    function getAmountsOut(
        uint256 amountIn,
        address[] calldata path
    ) external view returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

abstract contract AbsSwap is Ownable {
    using SafeMath for uint256;

    address public burnAddress; 
    address private usdtAddress;
    IPancakeRouter public pancakeRouter;
    address public founderAddress;

    uint256 public buyBurnFee = 10000;
    uint256 public feeDenominator = 10000;
        

    mapping(address => PoolInfo) public poolInfo;

    address public mainTokenAddr;

    struct PoolInfo {
        uint256 exchangeCountOfOneUsdtRate;
        uint256 sellFeeRate;
        uint256 status; //0:buy | 1:sell | 2:all
    }

    event SwapToken(address tokenAddr, uint256 amountIn, uint256 amountOut, uint256 status);
    
    constructor(address tokenAddr, address founder, address usdt, IPancakeRouter router) {
        founderAddress = founder;
        usdtAddress = usdt;
        pancakeRouter = router; 

        mainTokenAddr = tokenAddr;

        IERC20(tokenAddr).approve(address(router), ~uint256(0));
        
        burnAddress = address(0x000000000000000000000000000000000000dEaD);
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function HMTPrice() public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = mainTokenAddr;
        path[1] = usdtAddress;

        uint256[] memory amounts = pancakeRouter.getAmountsOut(10 ** 18, path);
        
        return amounts[1];
    }

    function changeMainTokenAddr(address tokenAddr) public onlyOwner {
        mainTokenAddr = tokenAddr;
    }

    function changeFounder(address addr) public onlyOwner {
        founderAddress = addr;
    }

    function changeBuyBurnFee(uint256 fee) public onlyOwner {
        buyBurnFee = fee;
    }

    function fixPoolInfo(address tokenAddress, uint256 newExchangeCountOfOneUsdtRate, uint256 newsellFeeRate, uint256 newStatus) public onlyOwner {
        PoolInfo storage info = poolInfo[tokenAddress];

        info.exchangeCountOfOneUsdtRate = newExchangeCountOfOneUsdtRate;
        info.sellFeeRate = newsellFeeRate;
        info.status = newStatus;
    }

    function addPoolInfo(address newTokenAddress, uint256 newExchangeCountOfOneUsdtRate, uint256 newsellFeeRate, uint256 newStatus) public onlyOwner {
        PoolInfo storage info = poolInfo[newTokenAddress];

        info.exchangeCountOfOneUsdtRate = newExchangeCountOfOneUsdtRate;
        info.sellFeeRate = newsellFeeRate;
        info.status = newStatus;
    }

    function swap(address tokenAddr, uint256 amountIn, uint256 status) public {
        PoolInfo memory info = poolInfo[tokenAddr];
        require(info.exchangeCountOfOneUsdtRate > 0, "no pool");
        require(info.status >= status, "permission denied");

        uint256 taxAmount = 0;
        uint256 amountOut = 0;
        if (info.status > 0) {
            //sell
            IERC20(tokenAddr).transferFrom(msg.sender, founderAddress, amountIn);

            amountOut = amountIn.mul(info.exchangeCountOfOneUsdtRate).div(HMTPrice());

            taxAmount = amountOut.mul(info.sellFeeRate).div(feeDenominator);

            IERC20(mainTokenAddr).transfer(msg.sender, amountOut.sub(taxAmount));

            swapTokensForUSDT(taxAmount);

        } else {
            //buy
            taxAmount = amountIn.mul(buyBurnFee).div(feeDenominator);
            if (taxAmount > 0) {
                IERC20(mainTokenAddr).transferFrom(msg.sender, burnAddress, taxAmount);
            }

            uint256 amount = amountIn.sub(taxAmount);
            if (amount > 0) {
                IERC20(mainTokenAddr).transferFrom(msg.sender, founderAddress, amount);
            }

            amountOut = amountIn.mul(HMTPrice()).div(info.exchangeCountOfOneUsdtRate);
            IERC20(tokenAddr).transfer(msg.sender, amountOut);
        }

        emit SwapToken(tokenAddr, amountIn, amountOut, status);
    }

    function rescueToken(
        address token,
        address recipient,
        uint256 amount
    ) public onlyOwner {
        IERC20(token).transfer(recipient, amount);
    }

    function swapTokensForUSDT(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = mainTokenAddr;
        path[1] = usdtAddress;
        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            founderAddress,
            block.timestamp
        );
    } 
}

contract Swap  is AbsSwap {
    constructor() AbsSwap(
    //TokenAddress
        address(0x160ac2e1Fb69251b662C7d12D58630f1AB6D5660),
    //Fund
        address(0xeDf030668FA9fa2bE2f23d7cb5d08B5dd2D738Ef),
    //USDT
        address(0x55d398326f99059fF775485246999027B3197955),
    //SwapRouter
        IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E)
    ){

    }
}