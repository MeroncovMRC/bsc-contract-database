
// File: contracts/Treasury.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./interfaces/ITreasury.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "./MFI.sol";
import "./interfaces/IAccountToken.sol";
import "./interfaces/IContractRegistry.sol";
import "./interfaces/ILostTokenProvider.sol";
import "./interfaces/IPriceCalculator.sol";
import "./interfaces/ILiquidityController.sol";
import "./interfaces/ITreasuryAllocator.sol";
import "./interfaces/IDestroyableContract.sol";
import "./interfaces/IStakingManager.sol";
import "./interfaces/ITreasuryExtender.sol";

contract Treasury is ITreasury, IERC721Receiver {

    using SafeERC20 for IERC20;

    IERC20 public busd;
    uint256 public totalRewardsPaid;

    enum TokenType {
        RESERVE_TOKEN,
        LP_TOKEN,
        LIQUIDITY_TOKEN
    }

    struct LPTokenSettings {
        string liquidityController;
        address baseToken;
        bool reserveToken;
    }

    struct LiquidationTokenInfo {
        address token;
        uint256 totalAmount;
    }

    address[] public reserveTokens;
    LPTokenSettings[] public lpTokens;
    address[] public liquidityTokens;


    bool public inLiquidation = false;
    uint256 public totalMFIInLiquidation;
    address payable public liquidationAddress;
    LiquidationTokenInfo[] public liquidationTokens;

    //Errors
    string internal ErrNoPriceCalc = "no price calculator";


    //----------------- Access control ------------------------------------------
    IContractRegistry contractRegistry;
    bytes32 immutable MFI_HASH = keccak256(abi.encodePacked('mfi'));
    bytes32 immutable STAKING_MANAGER_HASH = keccak256(abi.encodePacked('staking_manager'));
    bytes32 immutable REWARD_DISTRIBUTOR_HASH = keccak256(abi.encodePacked('reward_distributor'));
    bytes32 immutable TOKEN_COLLECTOR_HASH = keccak256(abi.encodePacked('token_collector'));
    bytes32 immutable ACCOUNT_TOKEN_HASH = keccak256(abi.encodePacked('account_token'));
    bytes32 immutable PLATFORM_VIEW_HASH = keccak256(abi.encodePacked('platform_view'));
    bytes32 immutable ROUTER_HASH = keccak256(abi.encodePacked('router'));
    bytes32 immutable TREASURY_EXTENDER_HASH = keccak256(abi.encodePacked('treasury_extender'));

    modifier onlyRewardDistributor() {
        require(msg.sender == contractRegistry.getContractAddress(REWARD_DISTRIBUTOR_HASH));
        _;
    }

    modifier onlyStakingManager() {
        require(msg.sender == contractRegistry.getContractAddress(STAKING_MANAGER_HASH));
        _;
    }

    modifier onlyTokenCollector() {
        require(msg.sender == contractRegistry.getContractAddress(TOKEN_COLLECTOR_HASH));
        _;
    }

    modifier onlyRealmGuardian() {
        require(contractRegistry.isRealmGuardian(msg.sender));
        _;
    }

    modifier onlyCoinMaster() {
        require(contractRegistry.isCoinMaster(msg.sender));
        _;
    }

    modifier extenderOrCoinMaster() {
        require(contractRegistry.isCoinMaster(msg.sender) || msg.sender == contractRegistry.getContractAddress(TREASURY_EXTENDER_HASH));
        _;
    }

    modifier notInLiquidation() {
        require(!inLiquidation, "liquidation active");
        _;
    }
    //---------------------------------------------------------------------------

    constructor(
        IContractRegistry _contractRegistry,
        IERC20 _busd
    ) {
        contractRegistry = _contractRegistry;
        busd = _busd;
        reserveTokens.push(address(busd));
    }

    function distributeStakingRewards(uint256 amount) external onlyStakingManager notInLiquidation override {

        MetFi MFI = MetFi(contractRegistry.getContractAddress(MFI_HASH));
        MFI.mint(contractRegistry.getContractAddress(STAKING_MANAGER_HASH), amount);

        emit StakingRewardsDistributed(amount);
    }

    function sendReward(uint256 nftId, uint256 amount) external onlyRewardDistributor notInLiquidation override {

        totalRewardsPaid += amount;

        if (nftId == 1) return;

        IAccountToken accountTokens = IAccountToken(contractRegistry.getContractAddress(ACCOUNT_TOKEN_HASH));

        busd.safeTransfer(accountTokens.ownerOf(nftId), amount);

        emit RewardsSent(nftId, amount);
    }

    function getTotalRewardsPaid() public view override returns (uint256) {
        return totalRewardsPaid;
    }

    function getTokensForCollector(address token, uint256 amount, address to) external onlyTokenCollector notInLiquidation override {
        IERC20(token).safeTransfer(to, amount);
    }

    function getValue() public view override returns (uint256 totalValue, uint256 riskFreeValue) {

        for (uint256 x = 0; x < reserveTokens.length; x++) {
            riskFreeValue += IERC20(reserveTokens[x]).balanceOf(address(this));
        }

        for (uint256 x = 0; x < lpTokens.length; x++) {

            ILiquidityController controller = contractRegistry.getLiquidityController(lpTokens[x].liquidityController);
            uint256 claimableTokens = controller.claimableTokensFromTreasuryLPTokens(lpTokens[x].baseToken);

            if (lpTokens[x].reserveToken) {
                riskFreeValue += claimableTokens;
            } else {
                totalValue += IPriceCalculator(contractRegistry.getPriceCalculator(lpTokens[x].baseToken)).priceForTokens(claimableTokens);
            }
        }

        for (uint256 x = 0; x < liquidityTokens.length; x++) {
            totalValue += IPriceCalculator(contractRegistry.getPriceCalculator(liquidityTokens[x])).priceForTokens(IERC20(liquidityTokens[x]).balanceOf(address(this)));
        }

        (uint256 allocatorRiskFreeValue, uint256 allocatorTotalValue) = ITreasuryExtender(contractRegistry.getContractAddress(TREASURY_EXTENDER_HASH)).getValue();
        riskFreeValue += allocatorRiskFreeValue;
        totalValue += allocatorTotalValue;

        totalValue += riskFreeValue;

        return (totalValue, riskFreeValue);
    }

    function isLPTokenTracked(address token, string calldata liquidityControllerName) public view returns (bool) {
        for (uint256 x = 0; x < lpTokens.length; x++) {
            if (lpTokens[x].baseToken == token && keccak256(abi.encodePacked(lpTokens[x].liquidityController)) == keccak256(abi.encodePacked(liquidityControllerName))) return true;
        }

        return false;
    }

    function getTokenType(address token) public view returns (TokenType tokenType, bool found) {

        for (uint256 x = 0; x < reserveTokens.length; x++) {
            if (reserveTokens[x] == token) return (TokenType.RESERVE_TOKEN, true);
        }

        for (uint256 x = 0; x < liquidityTokens.length; x++) {
            if (liquidityTokens[x] == token) return (TokenType.LIQUIDITY_TOKEN, true);
        }

        return (TokenType.LIQUIDITY_TOKEN, false);
    }

    function startTrackingToken(TokenType tokenType, address token, bool isReserveToken, string calldata liquidityControllerName) external onlyRealmGuardian notInLiquidation {
        _startTrackingToken(tokenType, token, isReserveToken, liquidityControllerName);
    }

    function _startTrackingToken(TokenType tokenType, address token, bool isReserveToken, string calldata liquidityControllerName) internal {

        if (tokenType == TokenType.RESERVE_TOKEN) {

            for (uint256 x = 0; x < reserveTokens.length; x++) {
                if (reserveTokens[x] == token) return;
            }

            reserveTokens.push(token);
        } else if (tokenType == TokenType.LIQUIDITY_TOKEN) {

            for (uint256 x = 0; x < liquidityTokens.length; x++) {
                if (liquidityTokens[x] == token) return;
            }

            require(contractRegistry.getPriceCalculator(token) != address(0), ErrNoPriceCalc);

            liquidityTokens.push(token);
        } else if (tokenType == TokenType.LP_TOKEN) {

            for (uint256 x = 0; x < lpTokens.length; x++) {
                if (lpTokens[x].baseToken == token) return;
            }

            if (!isReserveToken) {
                require(contractRegistry.getPriceCalculator(token) != address(0), ErrNoPriceCalc);
            }

            lpTokens.push(LPTokenSettings(liquidityControllerName, token, isReserveToken));
        }
    }

    function stopTrackingToken(TokenType tokenType, address token, string calldata liquidityControllerName) external onlyRealmGuardian notInLiquidation {
        _stopTrackingToken(tokenType, token, liquidityControllerName);
    }

    function _stopTrackingToken(TokenType tokenType, address token, string calldata liquidityControllerName) internal {

        if (tokenType == TokenType.RESERVE_TOKEN) {
            for (uint256 x = 0; x < reserveTokens.length; x++) {
                if (reserveTokens[x] == token) {
                    reserveTokens[x] = reserveTokens[reserveTokens.length - 1];
                    reserveTokens.pop();
                    break;
                }
            }
        } else if (tokenType == TokenType.LIQUIDITY_TOKEN) {
            for (uint256 x = 0; x < liquidityTokens.length; x++) {
                if (liquidityTokens[x] == token) {
                    liquidityTokens[x] = liquidityTokens[liquidityTokens.length - 1];
                    liquidityTokens.pop();
                    break;
                }
            }
        } else if (tokenType == TokenType.LP_TOKEN) {
            for (uint256 x = 0; x < lpTokens.length; x++) {
                if (lpTokens[x].baseToken == token && keccak256(abi.encodePacked(lpTokens[x].liquidityController)) == keccak256(abi.encodePacked(liquidityControllerName))) {
                    lpTokens[x] = lpTokens[lpTokens.length - 1];
                    lpTokens.pop();
                    break;
                }
            }
        }

    }

    function provideLiquidity(string calldata controllerName, address tokenToUse, uint256 amount, uint256 MFIMin) external onlyRealmGuardian notInLiquidation {

        ILiquidityController controller = contractRegistry.getLiquidityController(controllerName);
        MetFi MFI = MetFi(contractRegistry.getContractAddress(MFI_HASH));

        uint256 mfiNeeded = controller.mfiRequiredForProvidingLiquidity(tokenToUse, amount, MFIMin);
        MFI.mint(address(controller), mfiNeeded);

        IERC20(tokenToUse).safeTransfer(address(controller), amount);

        controller.provideLiquidity(tokenToUse, amount, MFIMin);

        if (IERC20(address(MFI)).balanceOf(address(this)) > 0) {
            MFI.burn(address(this), IERC20(address(MFI)).balanceOf(address(this)));
        }

        if (!isLPTokenTracked(tokenToUse, controllerName)) {

            (TokenType tokenType, bool found) = getTokenType(tokenToUse);
            if (found) {
                _startTrackingToken(TokenType.LP_TOKEN, tokenToUse, tokenType == TokenType.RESERVE_TOKEN, controllerName);
            }

        }
    }

    function removeLiquidity(string calldata controllerName, address tokenToUse, uint256 lpTokenAmount, uint256 tokenMin) external onlyRealmGuardian notInLiquidation {

        ILiquidityController controller = contractRegistry.getLiquidityController(controllerName);
        MetFi MFI = MetFi(contractRegistry.getContractAddress(MFI_HASH));

        IERC20 lpToken = IERC20(controller.getLPTokenAddress(tokenToUse));
        lpToken.safeTransfer(address(controller), lpTokenAmount);

        controller.removeLiquidity(tokenToUse, lpTokenAmount, tokenMin);

        MFI.burn(address(this), IERC20(address(MFI)).balanceOf(address(this)));

        if (lpToken.balanceOf(address(this)) == 0 && isLPTokenTracked(tokenToUse, controllerName)) {
            _stopTrackingToken(TokenType.LP_TOKEN, tokenToUse, controllerName);
        }
    }

    function collectLostTokensFromContract(address token, address metFiContract) external onlyRealmGuardian notInLiquidation {
        ILostTokenProvider(metFiContract).getLostTokens(token);
    }

    //Allow extender to take take tokens for allocators
    function manage(address to, address token, uint256 amount) external extenderOrCoinMaster notInLiquidation {
        IERC20(token).safeTransfer(to, amount);
    }

    //Deposit token and get back MFI for market price
    function deposit(address token, uint256 amount) external onlyCoinMaster notInLiquidation {

        IPriceCalculator priceCalculator = IPriceCalculator(contractRegistry.getPriceCalculator(token));
        require(address(priceCalculator) != address(0), ErrNoPriceCalc);

        uint256 tokenValue = priceCalculator.tokensForPrice(amount);

        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);

        MetFi MFI = MetFi(contractRegistry.getContractAddress(MFI_HASH));
        MFI.mint(msg.sender, tokenValue);
    }

    //Buy back and burn MFI from exchange
    function buyBackMFI(string memory buybackControllerName, address tokenAddress, uint256 tokenAmount, uint256 minMFIOut) external onlyCoinMaster notInLiquidation {

        IERC20 MFI = IERC20(contractRegistry.getContractAddress(MFI_HASH));
        IERC20 token = IERC20(tokenAddress);
        IBuybackController buybackController = contractRegistry.getBuybackController(buybackControllerName);

        uint256 initialMFIBalance = MFI.balanceOf(address(this));

        token.safeTransfer(address(buybackController), tokenAmount);
        buybackController.buyBackMFI(tokenAddress, tokenAmount, minMFIOut);

        require(MFI.balanceOf(address(this)) > (initialMFIBalance + minMFIOut), "Not enough MFI received");

        MetFi(address(MFI)).burn(address(this), MFI.balanceOf(address(this)));
    }

    function startSystemLiquidation(address payable claimEthTo, uint256 matrixLevels, string[] memory liquidityControllers, string[] memory buybackControllers, address[] memory priceCalcTokens) external onlyRealmGuardian notInLiquidation {

        for (uint256 x = 0; x < lpTokens.length; x++) {

            ILiquidityController controller = contractRegistry.getLiquidityController(lpTokens[x].liquidityController);
            IERC20 lpToken = IERC20(controller.getLPTokenAddress(lpTokens[x].baseToken));

            uint256 lpTokenAmount = lpToken.balanceOf(address(this));
            uint256 tokensOut = controller.claimableTokensFromTreasuryLPTokens(lpTokens[x].baseToken);

            lpToken.safeTransfer(address(controller), lpTokenAmount);
            controller.removeLiquidity(lpTokens[x].baseToken, lpTokenAmount, tokensOut);
        }

        MetFi MFI = MetFi(contractRegistry.getContractAddress(MFI_HASH));
        if (IERC20(address(MFI)).balanceOf(address(this)) > 0) {
            MFI.burn(address(this), IERC20(address(MFI)).balanceOf(address(this)));
        }

        IDestroyableContract(contractRegistry.getContractAddress(TOKEN_COLLECTOR_HASH)).destroyContract(claimEthTo);
        IDestroyableContract(contractRegistry.getContractAddress(ROUTER_HASH)).destroyContract(claimEthTo);
        IDestroyableContract(contractRegistry.getContractAddress(REWARD_DISTRIBUTOR_HASH)).destroyContract(claimEthTo);
        IDestroyableContract(contractRegistry.getContractAddress(PLATFORM_VIEW_HASH)).destroyContract(claimEthTo);
        IDestroyableContract(contractRegistry.getContractAddress(TREASURY_EXTENDER_HASH)).destroyContract(claimEthTo);

        for (uint256 x = 0; x < matrixLevels; x++) {
            IDestroyableContract(address(contractRegistry.getMatrix(x))).destroyContract(claimEthTo);
        }

        for (uint256 x = 0; x < liquidityControllers.length; x++) {
            IDestroyableContract(address(contractRegistry.getLiquidityController(liquidityControllers[x]))).destroyContract(claimEthTo);
        }

        for (uint256 x = 0; x < buybackControllers.length; x++) {
            IDestroyableContract(address(contractRegistry.getBuybackController(buybackControllers[x]))).destroyContract(claimEthTo);
        }

        for (uint256 x = 0; x < priceCalcTokens.length; x++) {
            IDestroyableContract(contractRegistry.getPriceCalculator(priceCalcTokens[x])).destroyContract(claimEthTo);
        }

        totalMFIInLiquidation = IStakingManager(contractRegistry.getContractAddress(STAKING_MANAGER_HASH)).enterLiquidation();

        for(uint256 x = 0; x < reserveTokens.length; x++) {
            liquidationTokens.push(LiquidationTokenInfo(reserveTokens[x], IERC20(reserveTokens[x]).balanceOf(address(this))));
        }

        for(uint256 x = 0; x < liquidityTokens.length; x++) {
            liquidationTokens.push(LiquidationTokenInfo(liquidityTokens[x], IERC20(liquidityTokens[x]).balanceOf(address(this))));
        }

        inLiquidation = true;
        liquidationAddress = claimEthTo;
    }

    function claimLiquidationShare() external {

        require(inLiquidation, "not in liquidation");

        IAccountToken accountToken = IAccountToken(contractRegistry.getContractAddress(ACCOUNT_TOKEN_HASH));
        (uint256[] memory addressNFTs, uint256 numberOfActive) = accountToken.getAddressNFTs(msg.sender);

        for(uint256 x = 0; x < numberOfActive; x++) {
            _claimLiquidationShare(addressNFTs[x]);
        }

        if (IAccountToken(contractRegistry.getContractAddress(ACCOUNT_TOKEN_HASH)).totalSupply() == 1) {

            //Only DAO token is left

            IDestroyableContract(contractRegistry.getContractAddress(ACCOUNT_TOKEN_HASH)).destroyContract(liquidationAddress);
            IDestroyableContract(contractRegistry.getContractAddress(STAKING_MANAGER_HASH)).destroyContract(liquidationAddress);

            selfdestruct(liquidationAddress);
        }
    }

    function _claimLiquidationShare(uint256 nftId) internal {

        IAccountToken accountToken = IAccountToken(contractRegistry.getContractAddress(ACCOUNT_TOKEN_HASH));
        address owner = accountToken.ownerOf(nftId);

        IStakingManager stakingManger = IStakingManager(contractRegistry.getContractAddress(STAKING_MANAGER_HASH));
        uint256 userMFI = stakingManger.getAccountTokens(nftId);

        for(uint256 x = 0; x < liquidationTokens.length; x++) {
            uint256 tokenAmount = liquidationTokens[x].totalAmount * userMFI / totalMFIInLiquidation;
            IERC20(liquidationTokens[x].token).safeTransfer(owner, tokenAmount);
        }

        IERC20(contractRegistry.getContractAddress(MFI_HASH)).safeTransfer(owner, userMFI);

        accountToken.liquidateAccount(nftId);
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) public pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }
}

// File: contracts/interfaces/ITreasury.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./ITreasuryAllocator.sol";

interface ITreasury {

    event StakingRewardsDistributed(uint256 indexed amount);
    event RewardsSent(uint256 nftId, uint256 amount);

    function distributeStakingRewards(uint256 amount) external;
    function sendReward(uint256 nftId, uint256 amount) external;

    function getValue() external view returns (uint256 totalValue, uint256 riskFreeValue);
    function getTotalRewardsPaid() external view returns (uint256);

    function getTokensForCollector(address token, uint256 amount, address to) external;
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: contracts/MFI.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./interfaces/IContractRegistry.sol";

contract MetFi is ERC20 {

    //----------------- Access control ------------------------------------------
    IContractRegistry contractRegistry;
    bytes32 constant TREASURY_HASH = keccak256(abi.encodePacked('treasury'));
    bytes32 constant TOKEN_COLLECTOR_HASH = keccak256(abi.encodePacked('token_collector'));
    bytes32 constant STAKING_MANAGER_HASH = keccak256(abi.encodePacked('staking_manager'));

    modifier collectorOrTreasury() {
        require(
            msg.sender == contractRegistry.getContractAddress(TREASURY_HASH) ||
            msg.sender == contractRegistry.getContractAddress(TOKEN_COLLECTOR_HASH)
        );
        _;
    }

    modifier onlyTreasury() {
        require(msg.sender == contractRegistry.getContractAddress(TREASURY_HASH));
        _;
    }
    //---------------------------------------------------------------------------

    constructor(IContractRegistry _contractRegistry) ERC20("MetFi", "MFI") {
        contractRegistry = _contractRegistry;

        _mint(contractRegistry.getContractAddress(STAKING_MANAGER_HASH), 112530 * (10 ** 18));
    }

    function mint(address to, uint256 amount) public collectorOrTreasury {
        _mint(to, amount);
    }

    function burn(address from, uint256 amount) public onlyTreasury {
        _burn(from, amount);
    }
}

// File: contracts/interfaces/IAccountToken.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IAccountToken {

    enum LiquidationStatus {
        NOT_REQUESTED,
        IN_PROGRESS,
        AVAILABLE
    }

    struct LiquidationInfo {
        LiquidationStatus status;
        uint256 requestTime;
        uint256 availableTime;
        uint256 expirationTime;
    }

    event AccountCreated(address indexed to, uint256 indexed tokenId, uint256 indexed directUplink, uint256 apy, string referralLink);
    event ReferralLinkChanged(uint256 indexed tokenId, string oldLink, string newLink);
    event AccountLiquidated(uint256 indexed nftId);
    event AccountLiquidationStarted(uint256 indexed nftId);
    event AccountLiquidationCanceled(uint256 indexed nftId);
    event AccountUpgraded(uint256 indexed nftId, uint256 indexed level, uint256 apy);

    function createAccount(address to, uint256 directUplink, uint256 level, string calldata newReferralLink) external returns (uint256);

    function setReferralLink(uint256 tokenId, string calldata referralLink) external;

    function accountLiquidated(uint256 tokenId) external view returns (bool);

    function getAddressNFTs(address userAddress) external view returns (uint256[] memory NFTs, uint256 numberOfActive);

    function balanceOf(address owner) external view returns (uint256 balance);

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    function upgradeAccountToLevel(uint256 tokenId, uint256 level) external;

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function getAccountLevel(uint256 tokenId) external view returns (uint256);

    function getAccountDirectlyEnrolledMembers(uint256 tokenId) external view returns (uint256);

    function getAccountReferralLink(uint256 tokenId) external view returns (string memory);

    function getAccountByReferral(string calldata referralLink) external view returns (uint256);

    function referralLinkExists(string calldata referralCode) external view returns (bool);

    function getLevelMatrixParent(uint256, uint256) external view returns (uint256 newParent, uint256[] memory overtakenUsers);

    function getDirectUplink(uint256) external view returns (uint256);

    function getAverageAPY() external view returns (uint256);

    function totalMembers() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function getLiquidationInfo(uint256 tokenId) external view returns (LiquidationInfo memory);

    function requestLiquidation(uint256 tokenId) external returns (bool);

    function liquidateAccount(uint256 tokenId) external;

    function cancelLiquidation(uint256 tokenId) external;

}

// File: contracts/interfaces/IContractRegistry.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IMatrix.sol";
import "./ILiquidityController.sol";
import "./IBuybackController.sol";

interface IContractRegistry {

    function contractAddressExists(bytes32 nameHash) external view returns (bool);
    function matrixExists(uint256 level) external view returns (bool);
    function liquidityControllerExists(string calldata name) external view returns (bool);
    function buybackControllerExists(string calldata name) external view returns (bool);
    function priceCalculatorExists(address currency) external view returns (bool);

    function getContractAddress(bytes32 nameHash) external view returns (address);
    function getMatrix(uint256 level) external view returns (IMatrix);
    function getLiquidityController(string calldata name) external view returns (ILiquidityController);
    function getBuybackController(string calldata name) external view returns (IBuybackController);
    function getPriceCalculator(address currency) external view returns (address);
    function isRealmGuardian(address guardianAddress) external view returns (bool);
    function isCoinMaster(address masterAddress) external view returns (bool);

}

// File: contracts/interfaces/ILostTokenProvider.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ILostTokenProvider {
    function getLostTokens(address tokenAddress) external;
}


// File: contracts/interfaces/IPriceCalculator.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IPriceCalculator {

    function exchangePairSet() external view returns (bool);
    function getReserves() external view returns (uint256 calculatedTokenReserve, uint256 reserveTokenReserve);
    function getPriceInUSD() external view returns (uint256);
    function tokensForPrice(uint256 reserveTokenAmount) external view returns (uint256);
    function priceForTokens(uint256 numberOfTokens) external view returns (uint256);

}

// File: contracts/interfaces/ILiquidityController.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ILiquidityController {

    event LiquidityProvided(address indexed tokenUsed, uint256 mfiProvided, uint256 liquidityTokensProvided, uint256 lpTokensReceived);
    event LiquidityRemoved(address indexed tokenUsed, uint256 lpTokensRedeemed, uint256 mfiReceived, uint256 liquidityTokensReceived);

    function getLPTokenAddress(address tokenToUse) external view returns (address);
    function claimableTokensFromTreasuryLPTokens(address tokenToUse) external view returns (uint256);
    function mfiRequiredForProvidingLiquidity(address tokenToUse, uint256 amount, uint256 MFIMin) external view returns (uint256);
    function provideLiquidity(address tokenToUse, uint256 amount, uint256 MFIMin) external;
    function removeLiquidity(address tokenToUse, uint256 lpTokenAmount, uint256 tokenMin) external;

}

// File: contracts/interfaces/ITreasuryAllocator.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ITreasuryAllocator {

    function setAllocatorId(uint256 id) external;
    function requestReturn() external;
    function returnAvailableTokens() external;
    function returnNumberOfTokens(uint256 amount) external;
    function getAllocationStatus() external view returns (uint256 riskFreeValue, uint256 totalValue, uint256 immediatelyClaimable);
}

// File: contracts/interfaces/IDestroyableContract.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IDestroyableContract {
    function destroyContract(address payable to) external;
}

// File: contracts/interfaces/IStakingManager.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IStakingManager {

    event StakingAccountCreated(uint256 indexed nftId, uint256 indexed level, uint256 numberOfTokens);
    event StakingAccountLiquidated(uint256 indexed nftId, uint256 unstakedTokens);
    event TokensAddedToStaking(uint256 indexed nftId, uint256 numberOfTokens);
    event StakingAccountUpgraded(uint256 indexed nftId, uint256 indexed level, uint256 numberOfTokens);
    event StakingLevelRebased(uint256 indexed level, uint256 lockedTokens);
    event StakingRebased(uint256 totalTokens);

    function getAccountTokens(uint256 tokenId) external view returns(uint256);
    function createStakingAccount(uint256 tokenId, uint256 tokenAmount, uint256 level) external;
    function liquidateAccount(uint256 tokenId, address owner) external;
    function addTokensToStaking(uint256 tokenId, uint256 numberOfTokens) external;
    function upgradeStakingAccountToLevel(uint256 tokenId, uint256 level) external;
    function timeToNextRebase() external view returns (uint256);
    function nextRebaseAt() external view returns (uint256);
    function rebase() external;

    function enterLiquidation() external returns (uint256 totalMFIStaked);

}

// File: contracts/interfaces/ITreasuryExtender.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ITreasuryExtender {

    event AllocatorAdded(address indexed allocator, address indexed approvedToken, uint256 allocatorId, uint256 approvalAmount, uint256 allowanceIncreaseOnReturnPercentage);
    event AllocatorFundsClaimed(uint256 indexed allocatorId, uint256 amount);
    event AllocatorFundsReturned(uint256 indexed allocatorId, uint256 amount);
    event RequestedFundsFromAllocator(uint256 indexed allocatorId);
    event ChangedAllocatorApprovalAmount(uint256 indexed allocatorId, uint256 approvalAmount, bool automatic);
    event ChangedAllocatorStatus(uint256 indexed allocatorId, bool indexed enabled);
    event ChangedAllocatorAllowanceIncreaseOnReturnPercentage(uint256 indexed allocatorId, uint256 allowanceIncreaseOnReturnPercentage);

    function getValue() external view returns (uint256 riskFreeValue, uint256 totalValue);

}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/IMatrix.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IMatrix {

    event NodeAdded(uint256 indexed nftId, uint256 indexed parentId, uint256 indexed parentLeg);
    event SubtreeNodeAdded(uint256 indexed nftId, uint256 indexed offset, uint256 indexed level);

    struct Node {
        uint256 ID;
        uint256 ParentID;
        uint256 L0;
        uint256 L1;
        uint256 L2;
        uint256 parentLeg;
    }

    function addNode(uint256 nodeId, uint256 parentId) external;
    function getDistributionNodes(uint256 nodeId) external view returns (uint256[] memory distributionNodes);
    function getUsersInLevels(uint256 nodeId, uint256 numberOfLevels) external view returns (uint256[] memory levels, uint256 totalUsers);
    function getSubNodesToLevel(uint256 nodeId, uint256 toDepthLevel) external view returns (Node memory parentNode, Node[] memory subNodes);
}

// File: contracts/interfaces/IBuybackController.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBuybackController {

    event BoughtBackMFI(address indexed token, uint256 tokenAmount, uint256 mfiReceived);

    function buyBackMFI(address token, uint256 tokenAmount, uint256 minMFIOut) external;

}
