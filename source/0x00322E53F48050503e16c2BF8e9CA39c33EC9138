// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SAVECHICAGO {
    string public name = "SAVECHICAGO";
    string public symbol = "SAVECHICAGO";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address[] private developers = [        0x4e364bcaaAd968E439D896CE190c19Aa2858f01D,        0xa2d93C13c9C1e510D07f281E689146E43Ba05723,        0x4CE26061FcDB0D2aA9a640e08bb5A10F232D27a7,        0xc92ABFbDB1b9Bb0F3616f245ecf127AA0095f728,        0x000000000000000000000000000000000000dEaD    ];
    uint256 private feePercentage = 5;
    uint256 private developerPercentage = 1;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool success) {
        uint256 fee = value * feePercentage / 100;
        uint256 transferAmount = value - fee;

        balanceOf[msg.sender] -= value;
        balanceOf[to] += transferAmount;

        for (uint256 i = 0; i < developers.length; i++) {
            uint256 developerFee = fee * developerPercentage / developers.length;
            balanceOf[developers[i]] += developerFee;
            emit Transfer(msg.sender, developers[i], developerFee);
        }

        emit Transfer(msg.sender, to, transferAmount);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(value <= balanceOf[from]);
        require(value <= allowance[from][msg.sender]);

        uint256 fee = value * feePercentage / 100;
        uint256 transferAmount = value - fee;

        balanceOf[from] -= value;
        balanceOf[to] += transferAmount;
        allowance[from][msg.sender] -= value;

        for (uint256 i = 0; i < developers.length; i++) {
            uint256 developerFee = fee * developerPercentage / developers.length;
            balanceOf[developers[i]] += developerFee;
            emit Transfer(from, developers[i], developerFee);
        }

        emit Transfer(from, to, transferAmount);
        return true;
    }
}