// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PredictGPT {
    string public name = "TESTGPT2";
    string public symbol = "TESTGPT2";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    address public owner;
    uint256 public lastDistributionBlock;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);
    event TokensDistributed(uint256 amount);

    constructor() {
        owner = msg.sender;
        totalSupply = 100000000 * 10**uint256(decimals);
        balanceOf[owner] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    modifier onlyOwner {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    function mint(address _to, uint256 _value) public onlyOwner returns (bool success) {
        balanceOf[_to] += _value;
        totalSupply += _value;
        emit Mint(_to, _value);
        emit Transfer(address(0), _to, _value);
        return true;
    }

    function distributeTokens() public onlyOwner {
        uint256 blocksSinceLastDistribution = block.number - lastDistributionBlock;
        if (blocksSinceLastDistribution >= 20) { // Solo distribuir tokens cada 20 bloques
            uint256 tokensToDistribute = 2000;
            uint256 totalBalance = totalSupply - balanceOf[address(0)];
for (uint256 i = 0; i < totalSupply; i++) {
    address currentAddress = address(uint160(i));
    if (balanceOf[currentAddress] > 0) {
                    uint256 holderPercentage = (balanceOf[currentAddress] * 10000) / totalBalance;
                    uint256 holderTokens = (tokensToDistribute * holderPercentage) / 10000;
                    balanceOf[currentAddress] += holderTokens;
                    emit Transfer(address(0), currentAddress, holderTokens);
                }
            }
            totalSupply += tokensToDistribute;
            lastDistributionBlock = block.number;
            emit TokensDistributed(tokensToDistribute);
        }
    }
}