// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract LumaleeToken {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    uint8 public decimals;

    mapping(address => uint256) public balances;

    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        name = "Lumalee";
        symbol = "Luma";
        totalSupply = 4200000000000 * 10 **18;
        decimals = 18;
        balances[msg.sender] = totalSupply;
        owner = 0x54900af60Ec3078Ba42F8f96194a83c1228E65e5;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function transfer(address to, uint256 value) external returns (bool) {
        require(to != address(0), "Invalid address");
        require(value > 0, "Invalid value");
        require(balances[msg.sender] >= value, "Insufficient balance");

        balances[msg.sender] -= value;
        balances[to] += value;

        emit Transfer(msg.sender, to, value);

        return true;
    }
}