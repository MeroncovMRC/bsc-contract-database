// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RoyalDeathClub {
    string public name = "Royal Death Club";
    string public symbol = "RDC";
    uint256 public totalSupply = 1000 * 10 ** 18; // 1,000 tokens with 18 decimal places
    uint8 public decimals = 18;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;
    address public constant marketingWallet = 0xE133Ded5101D6338254274E34258293Fd1869102;

    uint256 public constant maxWallet = 30; // 3% of total supply
    
    uint256 public constant taxRate = 5; // 5% tax on each buy and sell
    uint256 public constant burnRate = 2; // 2% of the tax goes to burn
    uint256 public constant marketingRate = 3; // 3% of the tax goes to marketing

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        require(amount <= balanceOf[msg.sender], "Insufficient balance");

        _transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        require(amount <= balanceOf[from], "Insufficient balance");
        require(amount <= allowance[from][msg.sender], "Insufficient allowance");

        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "Invalid sender address");
        require(to != address(0), "Invalid recipient address");
        require(amount > 0, "Invalid transfer amount");

        uint256 taxAmount = amount * taxRate / 100;
        uint256 burnAmount = taxAmount * burnRate / taxRate;
        uint256 marketingAmount = taxAmount * marketingRate / taxRate;
        uint256 transferAmount = amount - taxAmount;

        require(balanceOf[to] + transferAmount <= maxWallet * 10 ** decimals, "Recipient wallet limit exceeded");

        balanceOf[from] -= amount;
        balanceOf[to] += transferAmount;

        // Burn tokens
        balanceOf[burnAddress] += burnAmount;
        emit Transfer(from, burnAddress, burnAmount);

        // Send tokens to marketing wallet
        balanceOf[marketingWallet] += marketingAmount;
        emit Transfer(from, marketingWallet, marketingAmount);

        emit Transfer(from, to, transferAmount);
    }

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}