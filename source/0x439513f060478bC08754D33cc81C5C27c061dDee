
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/structs/BitMaps.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)
pragma solidity ^0.8.0;

/**
 * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.
 * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].
 */
library BitMaps {
    struct BitMap {
        mapping(uint256 => uint256) _data;
    }

    /**
     * @dev Returns whether the bit at `index` is set.
     */
    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {
        uint256 bucket = index >> 8;
        uint256 mask = 1 << (index & 0xff);
        return bitmap._data[bucket] & mask != 0;
    }

    /**
     * @dev Sets the bit at `index` to the boolean `value`.
     */
    function setTo(
        BitMap storage bitmap,
        uint256 index,
        bool value
    ) internal {
        if (value) {
            set(bitmap, index);
        } else {
            unset(bitmap, index);
        }
    }

    /**
     * @dev Sets the bit at `index`.
     */
    function set(BitMap storage bitmap, uint256 index) internal {
        uint256 bucket = index >> 8;
        uint256 mask = 1 << (index & 0xff);
        bitmap._data[bucket] |= mask;
    }

    /**
     * @dev Unsets the bit at `index`.
     */
    function unset(BitMap storage bitmap, uint256 index) internal {
        uint256 bucket = index >> 8;
        uint256 mask = 1 << (index & 0xff);
        bitmap._data[bucket] &= ~mask;
    }
}


// File: contracts/interface/IPancakePair.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: contracts/library/Utility.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

library Utility {
    function netPoints(uint256 i,uint256 a) public pure returns (uint256 t) {
        if (i == 1) {
            t = a * 5;
        } else if (i == 2) {
            t = a * 4;
        } else if (i == 3) {
            t = a * 3;
        } else if (i == 4) {
            t = a * 2;
        } else if (i == 5) {
            t = a;
        } else if (i == 6) {
            t = a;
        } else if (i == 7) {
            t = a * 2;
        } else if (i == 8) {
            t = a * 3;
        } else if (i == 9) {
            t = a * 4;
        } else if (i == 10) {
            t = a * 5;
        }
    }
    function checkLevelCap(uint256 level,uint256 staking) public pure returns(bool result){
        if (level == 0) {
            result = false;
        } else if (level == 1) {
            result = staking <= 3000 ether;
        } else if (level == 2) {
            result = staking <= 8000 ether;
        } else if (level == 3) {
            result = staking <= 20000 ether;
        } else if (level == 4) {
            result = staking <= 50000 ether;
        } else if (level == 5) {
            result = staking <= 500000 ether;
        }
    }

    function calBlowUpFirst(uint256 amount) public pure returns (uint256) {
        return (amount * 7) / 10;
    }

    function calBlowUpFirstLucky(
        uint256 amount
    ) public pure returns (uint256) {
        return (amount * 12) / 10;
    }
}

// File: contracts/Rel.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

contract Rel {
    event Bind(address indexed user, address indexed parent);
    event Upgrade(address indexed user, uint256 indexed level);

    address public pool;

    mapping(address => address) public parents;

    mapping(bytes32 => address[]) public children;

    mapping(address => uint256) public levelPerUser;

    mapping(address => mapping(uint256 => uint256)) public countPerLevelPerUser;

    constructor(address genesis) {
        parents[genesis] = address(1);
        emit Bind(genesis, address(1));
    }

    function bind(address parent) external {
        require(parents[msg.sender] == address(0), "already bind");
        require(parents[parent] != address(0), "parent invalid");
        parents[msg.sender] = parent;
        countPerLevelPerUser[parent][0]++;
        emit Bind(msg.sender, parent);
    }

    function setPool(address adr) external {
        require(pool == address(0) && adr != address(0));
        pool = adr;
    }

    function setLevel(address adr, uint256 level) external {
        require(msg.sender == pool, "na");
        levelPerUser[adr] = level;
        emit Upgrade(adr, level);
    }

    function updateCountPerLevel(
        address user,
        uint256 minusLevel,
        uint256 addLevel
    ) external {
        require(msg.sender == pool, "na");
        countPerLevelPerUser[user][minusLevel]--;
        countPerLevelPerUser[user][addLevel]++;
    }
}


// File: contracts/TERDaoFinance.sol
// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/structs/BitMaps.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "./interface/IPancakePair.sol";
import "./Rel.sol";
import "./library/Utility.sol";

contract TERDaoFinance is Ownable {
    using SafeERC20 for ERC20;
    using BitMaps for BitMaps.BitMap;
    using Address for address;

    event NewPool(uint256 indexed id, uint256 cap, uint64 start);
    event BuyPoints(
        address indexed user,
        uint256 amount,
        uint256 price,
        uint256 points
    );
    event NetAddPoints(
        address indexed user,
        address indexed buyer,
        uint256 tier,
        uint256 points
    );
    event Deposit(address indexed user, uint256 amount);
    event SwapPoints(
        address indexed user,
        uint256 amount,
        uint256 points,
        uint256 presentPoints
    );
    event SwapPoints2(
        address indexed user,
        uint256 amount,
        uint256 price,
        uint256 points
    );
    event StakeSubPoints(
        address indexed user,
        uint256 indexed poolId,
        uint256 indexed issue,
        uint256 points,
        uint256 luckyPoints
    );
    event NetSubPoints(
        address indexed user,
        address stakeUser,
        uint256 indexed poolId,
        uint256 indexed issue,
        uint256 tier,
        uint256 points,
        uint256 luckyPoints
    );
    event Stake(
        address indexed user,
        uint256 indexed poolId,
        uint256 indexed issue,
        uint256 amount
    );
    event Save(
        uint256 indexed poolId,
        uint128 indexed issueNo,
        address indexed safe,
        uint256 amount
    );
    event NewIssue(
        uint256 indexed poolId,
        uint128 indexed issueNo,
        uint256 issueCap,
        uint256 totalAmount
    );
    event Withdraw(address indexed user, uint256 amount, uint256 actualAmount);
    event WithdrawToken(
        address indexed user,
        uint256 amount,
        uint256 actualAmount
    );

    event WriteOff(address indexed user, uint256 amount, uint256 luckyPoint);

    event Checkout(
        address indexed buyer,
        uint256 indexed orderNo,
        address seller,
        uint256 amount,
        uint256 luckyPointAmount
    );
    event Confirm(
        address indexed buyer,
        uint256 indexed orderNo,
        address seller,
        uint256 amount,
        uint256 luckyPointAmount
    );
    event Refund(
        address indexed buyer,
        uint256 indexed orderNo,
        address seller,
        uint256 amount,
        uint256 luckyPointAmount
    );

    struct Pool {
        uint256 initCap;
        uint64 startTime;
        uint128 currIssue;
        bool blowUp;
        uint256 currCap;
        uint256 currIssueAmount;
        uint256 totalAmount;
    }
    struct Order {
        address buyer;
        address seller;
        uint64 status;
        uint256 amount;
        uint256 luckyPointAmount;
    }

    uint64 public constant ISSUE_PERIOD = 1 days;
    uint32 public constant ISSUE_PER_ROUND = 7;
    uint256 public constant ROUND_RATE = 25;
    uint256 public constant INTEREST_RATE = 98;
    uint256 public constant INTEREST_MARGIN_RATE = 932;
    uint256 public constant MIN_AMOUNT = 50 ether;

    Rel public rel;
    ERC20 public pointToken;
    IPancakePair public pair;
    ERC20 public usdtToken;
    Pool[] public pools;
    address public pja;
    address public pjb;
    address public pjc;
    address public pjd;
    address private adm;
    address public colSafeAddress;
    mapping(address => uint256) balancePerUser;
    mapping(address => uint256) pointsPerUser;
    mapping(address => uint256) luckyPointsPerUser;
    BitMaps.BitMap private firstPerIssue;
    mapping(address => mapping(uint256 => mapping(uint128 => uint256)))
        public amountPerUser;
    mapping(address => mapping(uint256 => uint256)) public stakingPerUser;
    mapping(address => mapping(uint256 => mapping(uint128 => uint256)))
        public netInterestPerUser;
    mapping(address => mapping(uint256 => uint128))
        public lastIssueUpdatePerUser;
    mapping(uint256 => uint128) public lastSaveIssuePerPool;
    mapping(uint256 => uint128) public lastMarginIssuePerPool;
    mapping(address => uint256) public tokenPerUser;
    mapping(address => uint256) public unwithdrawPerUser;
    BitMaps.BitMap private userSwaped;
    mapping(uint256 => Order) public orders;

    constructor(
        address r,
        address t,
        address pr,
        address a,
        address b,
        address c,
        address d,
        address ad,
        address s2
    ) {
        rel = Rel(r);
        rel.setPool(address(this));
        pointToken = ERC20(t);
        pair = IPancakePair(pr);
        usdtToken = ERC20(0x55d398326f99059fF775485246999027B3197955);
        pja = a;
        pjb = b;
        pjc = c;
        pjd = d;
        adm = ad;
        colSafeAddress = s2;
        uint256 cap = 30000 ether;
        Pool memory p = Pool(cap, 1680134400, 1, false, cap, 0, 0);
        pools.push(p);
        emit NewPool(0, cap, 1680134400);
    }

    function initPoints(
        address[] calldata addr,
        uint256[] calldata amount
    ) external onlyOwner {
        require(addr.length == amount.length);
        for (uint256 i = 0; i < addr.length; ++i) {
            address adr = addr[i];
            uint256 a = amount[i];
            pointsPerUser[adr] += a;
            emit BuyPoints(adr, 0, 0, a);
        }
    }

    function initBalance(
        address[] calldata addr,
        uint256[] calldata amount
    ) external onlyOwner {
        require(addr.length == amount.length);
        for (uint256 i = 0; i < addr.length; ++i) {
            address adr = addr[i];
            uint256 a = amount[i];
            balancePerUser[adr] += a;
            emit Deposit(adr, a);
        }
    }

    function newPool(uint256 cap, uint64 start) external {
        require(msg.sender == adm, "na");
        Pool memory p = Pool(cap, start, 1, false, cap, 0, 0);
        pools.push(p);
        emit NewPool(pools.length - 1, cap, start);
    }

    function buyPoints(uint256 amount) external {
        require(!msg.sender.isContract());
        require(rel.parents(msg.sender) != address(0), "nb");
        checkPoolBlowUp();
        require(pointToken.balanceOf(msg.sender) >= amount, "bne");
        uint256 a = amount / 10;
        pointToken.safeTransferFrom(msg.sender, pja, a);
        pointToken.safeTransferFrom(msg.sender, pjb, a * 5);
        uint256 b = a + a * 5;
        uint256 cost;
        a = a / 10;
        address p = msg.sender;
        for (uint256 i = 1; i <= 10; ++i) {
            p = rel.parents(p);
            if (p != address(0) && p != address(1)) {
                uint256 t = Utility.netPoints(i, a);
                tokenPerUser[p] += t;
                emit NetAddPoints(p, msg.sender, i, t);
                cost += t;
            } else {
                break;
            }
        }
        pointToken.safeTransferFrom(msg.sender, address(this), cost);
        if (amount > b + cost) {
            pointToken.safeTransferFrom(
                msg.sender,
                address(1),
                amount - b - cost
            );
        }
        uint256 level = rel.levelPerUser(msg.sender);
        if (level == 0) {
            rel.setLevel(msg.sender, 1);
            p = rel.parents(msg.sender);
            if (p != address(0) && p != address(1)) {
                rel.updateCountPerLevel(p, 0, 1);
                if (
                    rel.levelPerUser(p) == 1 &&
                    rel.countPerLevelPerUser(p, 1) >= 5
                ) {
                    rel.setLevel(p, 2);
                    p = rel.parents(p);
                    if (p != address(0) && p != address(1)) {
                        rel.updateCountPerLevel(p, 1, 2);
                        if (
                            rel.levelPerUser(p) == 2 &&
                            rel.countPerLevelPerUser(p, 2) >= 5
                        ) {
                            rel.setLevel(p, 3);
                            p = rel.parents(p);
                            if (p != address(0) && p != address(1)) {
                                rel.updateCountPerLevel(p, 2, 3);
                                if (
                                    rel.levelPerUser(p) == 3 &&
                                    rel.countPerLevelPerUser(p, 3) >= 3
                                ) {
                                    rel.setLevel(p, 4);
                                    p = rel.parents(p);
                                    if (p != address(0) && p != address(1)) {
                                        rel.updateCountPerLevel(p, 3, 4);
                                        if (
                                            rel.levelPerUser(p) == 4 &&
                                            rel.countPerLevelPerUser(p, 4) >= 3
                                        ) {
                                            rel.setLevel(p, 5);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
        uint256 price = (reserve0 * 1 ether) / reserve1;
        uint256 points = (price * amount * 4) / 1 ether;
        pointsPerUser[msg.sender] += points;
        emit BuyPoints(msg.sender, amount, price, points);
        fullToSafe();
    }

    function deposit(uint256 amount) external {
        require(!msg.sender.isContract());
        require(rel.parents(msg.sender) != address(0), "nb");
        checkPoolBlowUp();
        usdtToken.safeTransferFrom(msg.sender, address(this), amount);
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(
            msg.sender,
            balance + amount,
            luckyPoints,
            unwithdraw
        );
        emit Deposit(msg.sender, amount);
        fullToSafe();
    }

    function amountByIssue(
        uint256 poolId,
        uint256 issueNo
    ) public view returns (uint256) {
        Pool memory pool = pools[poolId];
        uint256 m = issueNo / ISSUE_PER_ROUND;
        if (issueNo % ISSUE_PER_ROUND == 0 && m > 0) {
            --m;
        }
        uint256 amount = pool.initCap;
        for (uint256 i = 0; i < m; ++i) {
            amount += (amount * ROUND_RATE) / 100;
        }
        return amount;
    }

    function checkPoolBlowUp() private {
        uint256 issue = block.timestamp / ISSUE_PERIOD;
        if (!firstPerIssue.get(issue)) {
            for (uint256 i = 0; i < pools.length; ++i) {
                Pool memory p = pools[i];
                if (p.startTime <= block.timestamp && !p.blowUp) {
                    uint256 actualIssue = (block.timestamp - p.startTime) /
                        ISSUE_PERIOD +
                        1;
                    if (actualIssue > p.currIssue) {
                        pools[i].blowUp = true;
                    }
                }
            }
            firstPerIssue.set(issue);
        }
    }

    function checkLevelCap(
        address user,
        uint256[] memory stakingAmount,
        uint256 amount
    ) public view returns (bool result) {
        uint256 staking = amount;
        for (uint256 i = 0; i < stakingAmount.length; ++i) {
            staking += stakingAmount[i];
        }
        uint256 level = rel.levelPerUser(user);
        result = Utility.checkLevelCap(level, staking);
    }

    function calInterest(uint256 amount) private pure returns (uint256) {
        return (amount * INTEREST_RATE) / 1000;
    }

    function calBlowUpFirst(uint256 amount) private pure returns (uint256) {
        return (amount * 7) / 10;
    }

    function calBlowUpFirstLucky(
        uint256 amount
    ) private pure returns (uint256) {
        return (amount * 12) / 10;
    }

    function blowUpCal(
        address user,
        uint256 i,
        Pool memory p
    ) private view returns (uint256 sum, uint256 lucky, uint256 netInterest) {
        uint256 last4sum;
        uint256 last4total = p.currIssueAmount;
        for (uint256 k = 0; k <= 7 && p.currIssue > k; ++k) {
            if (k <= 3) {
                sum += amountPerUser[user][i][uint128(p.currIssue - k)];
                last4sum += amountPerUser[user][i][uint128(p.currIssue - k)];
                if (k != 0) {
                    last4total += amountByIssue(i, p.currIssue - k);
                }
            } else if (k == 4) {
                sum += amountPerUser[user][i][uint128(p.currIssue - k)];
            } else {
                sum += calBlowUpFirst(
                    amountPerUser[user][i][uint128(p.currIssue - k)]
                );
                lucky += calBlowUpFirstLucky(
                    amountPerUser[user][i][uint128(p.currIssue - k)]
                );
            }
        }
        if (last4total > 0) {
            lucky +=
                (last4sum * p.totalAmount * INTEREST_RATE) /
                1000 /
                4 /
                last4total;
        }
        if (p.currIssue > 8) {
            for (
                uint256 j = lastIssueUpdatePerUser[user][i] + 1;
                j <= p.currIssue - 8;
                ++j
            ) {
                uint256 sa = amountPerUser[user][i][uint128(j)];
                sum += sa;
                sum += calInterest(sa);
                sum += netInterestPerUser[user][i][uint128(j)];
                netInterest += netInterestPerUser[user][i][uint128(j)];
            }
        }
    }

    function userBalance(
        address user
    )
        public
        view
        returns (
            uint256 balance,
            uint256 points,
            uint256 luckyPoints,
            uint256 stakingAmount,
            uint256 unwithdraw
        )
    {
        for (uint256 i = 0; i < pools.length; ++i) {
            Pool memory p = pools[i];
            if (block.timestamp < p.startTime) {
                continue;
            }
            uint128 actualIssue = uint128(
                (uint64(block.timestamp) - p.startTime) / ISSUE_PERIOD + 1
            );
            bool blowUp = p.blowUp;
            if (p.startTime <= block.timestamp && !blowUp) {
                if (actualIssue > p.currIssue) {
                    blowUp = true;
                }
            }
            if (blowUp && lastIssueUpdatePerUser[user][i] < p.currIssue) {
                (
                    uint256 sum1,
                    uint256 lucky1,
                    uint256 netInterest1
                ) = blowUpCal(user, i, p);
                balance += sum1;
                luckyPoints += lucky1;
                unwithdraw += netInterest1;
            } else {
                if (
                    actualIssue > 8 &&
                    lastIssueUpdatePerUser[user][i] + 1 <= actualIssue - 8
                ) {
                    uint256 sa;

                    for (
                        uint256 j = lastIssueUpdatePerUser[user][i] + 1;
                        j <= actualIssue - 8;
                        ++j
                    ) {
                        uint256 t = amountPerUser[user][i][uint128(j)];
                        sa += t;
                        balance += t;
                        balance += calInterest(t);
                        balance += netInterestPerUser[user][i][uint128(j)];
                        unwithdraw += netInterestPerUser[user][i][uint128(j)];
                    }
                    stakingAmount += stakingPerUser[user][i] - sa;
                } else {
                    stakingAmount += stakingPerUser[user][i];
                }
            }
        }
        balance += balancePerUser[user];
        points = pointsPerUser[user];
        luckyPoints += luckyPointsPerUser[user];
        unwithdraw += unwithdrawPerUser[user];
    }

    function calBalance(
        address user
    )
        private
        view
        returns (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        )
    {
        lastUpdate = new uint128[](pools.length);
        stakingAmount = new uint256[](pools.length);
        for (uint256 i = 0; i < pools.length; ++i) {
            Pool memory p = pools[i];
            if (block.timestamp < p.startTime) {
                continue;
            }
            uint128 actualIssue = uint128(
                (uint64(block.timestamp) - p.startTime) / ISSUE_PERIOD + 1
            );
            if (p.blowUp && lastIssueUpdatePerUser[user][i] < p.currIssue) {
                (
                    uint256 sum1,
                    uint256 lucky1,
                    uint256 netInterest1
                ) = blowUpCal(user, i, p);
                balance += sum1;
                luckyPoints += lucky1;
                unwithdraw += netInterest1;
                stakingAmount[i] = 0;
                lastUpdate[i] = p.currIssue;
            } else {
                if (
                    actualIssue > 8 &&
                    lastIssueUpdatePerUser[user][i] + 1 <= actualIssue - 8
                ) {
                    uint256 sa;

                    for (
                        uint256 j = lastIssueUpdatePerUser[user][i] + 1;
                        j <= actualIssue - 8;
                        ++j
                    ) {
                        uint256 t = amountPerUser[user][i][uint128(j)];
                        sa += t;
                        balance += t;
                        balance += calInterest(t);
                        balance += netInterestPerUser[user][i][uint128(j)];
                        unwithdraw += netInterestPerUser[user][i][uint128(j)];
                        lastUpdate[i] = uint128(j);
                    }
                    stakingAmount[i] = stakingPerUser[user][i] - sa;
                } else {
                    stakingAmount[i] = stakingPerUser[user][i];
                }
            }
        }
        balance += balancePerUser[user];
        luckyPoints += luckyPointsPerUser[user];
        unwithdraw += unwithdrawPerUser[user];
    }

    function stake(uint256 poolId, uint256 amount) external {
        require(!msg.sender.isContract());
        checkPoolBlowUp();
        require(poolId < pools.length, "ide");
        Pool storage pool = pools[poolId];
        require(pool.startTime <= block.timestamp && !pool.blowUp, "un");
        uint256 rest = pool.currCap - pool.currIssueAmount;
        require(amount > 0 && amount <= rest, "aes");
        if (rest < MIN_AMOUNT) {
            require(rest == amount, "ae");
        } else {
            require(amount % MIN_AMOUNT == 0, "50x");
        }
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        require(balance >= amount, "bne");
        uint256 needPoints = (amount * INTEREST_RATE) / 1000;
        require(pointsPerUser[msg.sender] + luckyPoints >= needPoints, "pne");
        require(checkLevelCap(msg.sender, stakingAmount, amount), "elc");
        for (uint256 i = 0; i < stakingAmount.length; ++i) {
            stakingPerUser[msg.sender][i] = stakingAmount[i];
        }
        if (pointsPerUser[msg.sender] >= needPoints) {
            pointsPerUser[msg.sender] -= needPoints;
            luckyPointsPerUser[msg.sender] = luckyPoints;
            emit StakeSubPoints(
                msg.sender,
                poolId,
                pool.currIssue,
                needPoints,
                0
            );
        } else {
            emit StakeSubPoints(
                msg.sender,
                poolId,
                pool.currIssue,
                pointsPerUser[msg.sender],
                needPoints - pointsPerUser[msg.sender]
            );
            luckyPointsPerUser[msg.sender] =
                luckyPoints -
                (needPoints - pointsPerUser[msg.sender]);
            pointsPerUser[msg.sender] = 0;
        }

        amountPerUser[msg.sender][poolId][pool.currIssue] += amount;
        balancePerUser[msg.sender] = balance - amount;
        stakingPerUser[msg.sender][poolId] += amount;
        for (uint256 i = 0; i < lastUpdate.length; ++i) {
            if (
                lastUpdate[i] > 0 &&
                lastIssueUpdatePerUser[msg.sender][i] != lastUpdate[i]
            ) {
                lastIssueUpdatePerUser[msg.sender][i] = lastUpdate[i];
            }
        }
        emit Stake(msg.sender, poolId, pool.currIssue, amount);
        if (unwithdraw >= amount) {
            unwithdrawPerUser[msg.sender] = unwithdraw - amount;
        } else {
            unwithdrawPerUser[msg.sender] = 0;
        }

        subNet(needPoints, poolId, pool);

        pool.currIssueAmount += amount;
        pool.totalAmount += amount;
        fullToSafe();
        if (pool.currIssueAmount == pool.currCap) {
            pool.currIssue++;
            if (pool.currIssue % 7 == 1) {
                pool.currCap += (pool.currCap * 25) / 100;
            }
            pool.currIssueAmount = 0;
            emit NewIssue(
                poolId,
                pool.currIssue,
                pool.currCap,
                pool.totalAmount
            );
        }
    }

    function subNet(
        uint256 needPoints,
        uint256 poolId,
        Pool memory pool
    ) private {
        address p = rel.parents(msg.sender);
        for (
            uint256 i = 1;
            i <= 10 && p != address(0) && p != address(1);
            ++i
        ) {
            uint256 level = rel.levelPerUser(p);
            uint256 np;
            if (level == 0) {
                p = rel.parents(p);
                continue;
            } else if (level == 1) {
                if (i == 1) {
                    np = (needPoints * 15) / 100;
                } else if (i == 2) {
                    np = (needPoints * 5) / 100;
                } else {
                    p = rel.parents(p);
                    continue;
                }
            } else if (level == 2) {
                if (i == 1) {
                    np = (needPoints * 15) / 100;
                } else if (i >= 2 && i <= 4) {
                    np = (needPoints * 5) / 100;
                } else {
                    p = rel.parents(p);
                    continue;
                }
            } else if (level == 3) {
                if (i == 1) {
                    np = (needPoints * 15) / 100;
                } else if (i >= 2 && i <= 6) {
                    np = (needPoints * 5) / 100;
                } else {
                    p = rel.parents(p);
                    continue;
                }
            } else if (level == 4) {
                if (i == 1) {
                    np = (needPoints * 15) / 100;
                } else if (i >= 2 && i <= 8) {
                    np = (needPoints * 5) / 100;
                } else {
                    p = rel.parents(p);
                    continue;
                }
            } else if (level == 5) {
                if (i == 1) {
                    np = (needPoints * 15) / 100;
                } else if (i >= 2 && i <= 10) {
                    np = (needPoints * 5) / 100;
                } else {
                    p = rel.parents(p);
                    continue;
                }
            }
            (
                uint256 balance1,
                uint256 luckyPoints1,
                uint256[] memory stakingAmount1,
                uint128[] memory lastUpdate1,
                uint256 unwithdraw1
            ) = calBalance(p);
            balancePerUser[p] = balance1;
            updateLast(p, stakingAmount1, lastUpdate1);
            unwithdrawPerUser[p] = unwithdraw1;
            uint256 ap = pointsPerUser[p] + luckyPoints1 >= np
                ? np
                : pointsPerUser[p] + luckyPoints1;
            if (pointsPerUser[p] >= ap) {
                pointsPerUser[p] -= ap;
                luckyPointsPerUser[p] = luckyPoints1;
                emit NetSubPoints(
                    p,
                    msg.sender,
                    poolId,
                    pool.currIssue,
                    i,
                    ap,
                    0
                );
            } else {
                uint256 d = pointsPerUser[p];
                uint256 c = ap - d;
                emit NetSubPoints(
                    p,
                    msg.sender,
                    poolId,
                    pool.currIssue,
                    i,
                    d,
                    c
                );
                luckyPointsPerUser[p] = luckyPoints1 - c;
                pointsPerUser[p] = 0;
            }
            netInterestPerUser[p][poolId][pool.currIssue] += ap;
            p = rel.parents(p);
        }
    }

    function swapPoints(uint256 amount) external {
        require(rel.parents(msg.sender) != address(0), "nb");
        bool al = userSwaped.get(uint256(uint160(msg.sender)));
        uint256 presentPoints;
        if (!al) {
            require(amount >= 10 ether, "min");
            presentPoints = 40 ether;
            userSwaped.set(uint256(uint160(msg.sender)));
        }
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        require(balance >= amount, "bne");
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(msg.sender, balance - amount, luckyPoints, 0);
        pointsPerUser[msg.sender] += amount * 4 + presentPoints;
        if (unwithdraw >= amount) {
            unwithdrawPerUser[msg.sender] = unwithdraw - amount;
        } else {
            unwithdrawPerUser[msg.sender] = 0;
        }
        emit SwapPoints(msg.sender, amount, amount * 4, presentPoints);
        fullToSafe();
    }

    function swapPoints2(uint256 amount) external {
        require(rel.parents(msg.sender) != address(0), "nb");
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        require(tokenPerUser[msg.sender] >= amount, "bne");
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(msg.sender, balance, luckyPoints, unwithdraw);
        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
        uint256 price = (reserve0 * 1 ether) / reserve1;
        uint256 points = (price * amount * 4) / 1 ether;
        tokenPerUser[msg.sender] -= amount;
        pointsPerUser[msg.sender] += points;
        emit SwapPoints2(msg.sender, amount, price, points);
        fullToSafe();
    }

    function withdraw(uint256 amount) external {
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        require(balance >= amount, "bne");
        require(balance - amount >= unwithdraw, "ea");
        updateLast(msg.sender, stakingAmount, lastUpdate);
        uint256 actualAmount = amount - amount / 100;
        updateBalanceLuckyPoints(
            msg.sender,
            balance - amount,
            luckyPoints,
            unwithdraw
        );
        usdtToken.safeTransfer(msg.sender, actualAmount);
        usdtToken.safeTransfer(pjc, amount / 100);
        emit Withdraw(msg.sender, amount, actualAmount);
        fullToSafe();
    }

    function withdrawToken(uint256 amount) external {
        require(rel.parents(msg.sender) != address(0), "nb");
        checkPoolBlowUp();
        require(tokenPerUser[msg.sender] >= amount, "bne");
        uint256 actualAmount = amount - amount / 100;
        pointToken.safeTransfer(msg.sender, actualAmount);
        pointToken.safeTransfer(pjc, amount / 100);
        tokenPerUser[msg.sender] -= amount;
        emit WithdrawToken(msg.sender, amount, actualAmount);
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(msg.sender, balance, luckyPoints, unwithdraw);
        fullToSafe();
    }

    function fullToSafe() private {
        for (uint256 poolId = 0; poolId < pools.length; ++poolId) {
            Pool memory pool = pools[poolId];
            if (block.timestamp < pool.startTime) {
                continue;
            }
            uint128 actualIssue = uint128(
                (uint64(block.timestamp) - pool.startTime) / ISSUE_PERIOD + 1
            );

            uint256 last = (actualIssue >= pool.currIssue &&
                pool.currCap > pool.currIssueAmount)
                ? pool.currIssue - 1
                : actualIssue;
            for (uint256 i = lastSaveIssuePerPool[poolId] + 1; i <= last; ++i) {
                uint256 a = amountByIssue(poolId, i);
                if (i > ISSUE_PER_ROUND) {
                    a -= amountByIssue(poolId, i - ISSUE_PER_ROUND);
                }
                usdtToken.safeTransfer(colSafeAddress, a);
                lastSaveIssuePerPool[poolId] = uint128(i);
                emit Save(poolId, uint128(i), colSafeAddress, a);
            }
            uint256 c = actualIssue < pool.currIssue
                ? actualIssue
                : pool.currIssue;
            if (c >= 9) {
                for (
                    uint256 i = lastMarginIssuePerPool[poolId] + 1;
                    i <= c - 8;
                    ++i
                ) {
                    uint256 a = (amountByIssue(poolId, i) *
                        INTEREST_MARGIN_RATE) / 10000;
                    usdtToken.safeTransfer(pjd, a);
                    lastMarginIssuePerPool[poolId] = uint128(i);
                    emit Save(poolId, uint128(i), pjd, a);
                }
            }
        }
    }

    function poolsInfo()
        external
        view
        returns (Pool[] memory ps, uint256[] memory actualIssues)
    {
        ps = new Pool[](pools.length);
        actualIssues = new uint256[](pools.length);
        for (uint256 i = 0; i < pools.length; ++i) {
            ps[i] = pools[i];
            if (ps[i].startTime <= block.timestamp) {
                uint256 actualIssue = (block.timestamp - ps[i].startTime) /
                    ISSUE_PERIOD +
                    1;
                actualIssues[i] = actualIssue;
                if (actualIssue > ps[i].currIssue) {
                    ps[i].blowUp = true;
                }
            }
        }
    }

    function updateLast(
        address user,
        uint256[] memory stakingAmount,
        uint128[] memory lastUpdate
    ) private {
        for (uint256 i = 0; i < stakingAmount.length; ++i) {
            stakingPerUser[user][i] = stakingAmount[i];
        }
        for (uint256 i = 0; i < lastUpdate.length; ++i) {
            if (
                lastUpdate[i] > 0 &&
                lastIssueUpdatePerUser[user][i] != lastUpdate[i]
            ) {
                lastIssueUpdatePerUser[user][i] = lastUpdate[i];
            }
        }
    }

    function checkout(
        uint256 orderNo,
        address seller,
        uint256 amount
    ) external {
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        uint256 luckyPointAmount = amount * 4;
        require(luckyPoints >= luckyPointAmount, "ne");
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(
            msg.sender,
            balance,
            luckyPoints - luckyPointAmount,
            unwithdraw
        );
        require(orders[orderNo].buyer == address(0), "oe");
        orders[orderNo] = Order(
            msg.sender,
            seller,
            0,
            amount,
            luckyPointAmount
        );
        emit Checkout(msg.sender, orderNo, seller, amount, luckyPointAmount);
    }

    function confirm(uint256 orderNo) external {
        Order memory order = orders[orderNo];
        require(order.buyer == msg.sender, "obe");
        require(order.status == 0, "se");
        orders[orderNo].status = 1;
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(order.seller);
        updateLast(order.seller, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(
            order.seller,
            balance,
            luckyPoints + order.luckyPointAmount,
            unwithdraw
        );
        emit Confirm(
            msg.sender,
            orderNo,
            order.seller,
            order.amount,
            order.luckyPointAmount
        );
    }

    function updateBalanceLuckyPoints(
        address user,
        uint256 balance,
        uint256 luckyPoints,
        uint256 unwithdraw
    ) private {
        luckyPointsPerUser[user] = luckyPoints;
        balancePerUser[user] = balance;
        unwithdrawPerUser[user] = unwithdraw;
    }

    function refund(uint256 orderNo) external {
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        Order memory order = orders[orderNo];
        require(order.seller == msg.sender, "se");
        require(order.status == 1, "se");
        require(luckyPoints >= order.luckyPointAmount, "ne");
        orders[orderNo].status = 2;
        updateLast(order.seller, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(
            order.seller,
            balance,
            luckyPoints - order.luckyPointAmount,
            unwithdraw
        );
        (
            uint256 balance1,
            uint256 luckyPoints1,
            uint256[] memory stakingAmount1,
            uint128[] memory lastUpdate1,
            uint256 unwithdraw1
        ) = calBalance(order.buyer);
        updateLast(order.buyer, stakingAmount1, lastUpdate1);
        updateBalanceLuckyPoints(
            order.buyer,
            balance1,
            luckyPoints1 + order.luckyPointAmount,
            unwithdraw1
        );
        emit Refund(
            msg.sender,
            orderNo,
            order.seller,
            order.amount,
            order.luckyPointAmount
        );
    }

    function writeOff(uint256 amount) external {
        checkPoolBlowUp();
        (
            uint256 balance,
            uint256 luckyPoints,
            uint256[] memory stakingAmount,
            uint128[] memory lastUpdate,
            uint256 unwithdraw
        ) = calBalance(msg.sender);
        require(luckyPoints >= amount, "ne");
        updateLast(msg.sender, stakingAmount, lastUpdate);
        updateBalanceLuckyPoints(
            msg.sender,
            balance,
            luckyPoints - amount,
            unwithdraw
        );
        emit WriteOff(msg.sender, amount, luckyPoints - amount);
    }
}

