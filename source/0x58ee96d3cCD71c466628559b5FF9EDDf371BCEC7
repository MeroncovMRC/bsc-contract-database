{"Address.sol":{"content":"/**\r\n * @title Address\r\n * @dev Address contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File: @openzeppelin/contracts/utils/Address.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is not safe to assume that an address - for which this function returns\r\n     * false - is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, caution must be\r\n     * used in order not to create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is inflated by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert-reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"Context.sol":{"content":"/**\r\n * @title Context\r\n * @dev Context contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ContractLogic.sol":{"content":"/**\r\n * @title Contract Logic\r\n * @dev ContractLogic contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: Business Source License 1.1\r\n *\r\n **/\r\n\r\nimport \"./SafeERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IReferrals.sol\";\r\nimport \"./IWhitelist.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract ContractLogic {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // outputs the external contracts.\r\n    IWhitelist public whitelist; // external whitelist contract\r\n    IReferrals public referrals; // external referrals contract\r\n\r\n    uint256 public constant DURATION = 1 days; // distribution time\r\n    uint256 public nextRewardTime; // time between new rewards\r\n\r\n    address public stakingCoinAddress; // coin that can be staked\r\n    address public rewardCoinAddress; // the coin distributed for staking\r\n    address public vaultAddress; // where the rewards come from\r\n\r\n    uint256 private _totalSupply; // total deposited staking coins\r\n\r\n    mapping(address =\u003e uint256) private balances; // address deposited staking coins\r\n    mapping(address =\u003e uint256) public requestedWithdrawTime; // address requested Payout Time\r\n    mapping(address =\u003e uint256) public userRewardPerTokenPaid; // how many coins did an address get per staked token\r\n    mapping(address =\u003e uint256) public rewards; // how much did an address get paid\r\n\r\n    uint256[] public refLevelReward = [40000, 30000, 10000, 10000, 5000, 5000]; // Allocation of ref fees over the ref level\r\n    uint256 public minReferralAmount = 990000000000000000 ; // set the min staking amount to set a new referral | 0.99 tokens\r\n\r\n    uint256 public lockTime = 30 days; // how long are the coins locked | 30 days\r\n    uint256 public rewardCoinFee = 10000; // tranfer fee from the reward coin (10000 = 0%)\r\n    uint256 public stakingCoinFee = 10000; // If a coin has a transfer fee, this can be compensated with it. (10000 = 0%)\r\n    uint256 public refRewardFee = 5000; // ref reward from the staking (5000 = 5%)\r\n    uint256 internal normalPercent = 100000 - refRewardFee; // Payout percentage without refs\r\n    uint256 public emergencyTime = 7 days; // how long you can make a free instant emergency withdrawal\r\n    uint256 public freeTime = 2 days; // how long you have to make a withdrawal after the lock time has expired | 2 days\r\n    uint256 public periodFinish; // when is the drop finished\r\n    uint256 public rewardRate; // how many coins are credited\r\n    uint256 public lastUpdateTime; // when was the last update\r\n    uint256 public rewardPerTokenStored; // how many coins did a Token get\r\n    uint256 public ReceivedRewardCoins; // How many reward coins the contract has received\r\n\r\n    // return total deposited staking coins\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // return deposited staking coins from address\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    // stake \"staking coin\" to the pool\r\n    function stake(uint256 _amount, address _sponsor) public virtual {\r\n        requestedWithdrawTime[msg.sender] = 1;\r\n        _totalSupply = _totalSupply.add(_amount.div(10000).mul(stakingCoinFee));\r\n        balances[msg.sender] = balances[msg.sender].add(\r\n            _amount.div(10000).mul(stakingCoinFee)\r\n        );\r\n        IERC20(stakingCoinAddress).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        address _sponsor1 = referrals.getSponsor(msg.sender);\r\n        if (_amount \u003e= minReferralAmount) {\r\n            if (referrals.isMember(msg.sender) == false) {\r\n                if (referrals.isMember(_sponsor) == true) {\r\n                    referrals.addMember(msg.sender, _sponsor);\r\n                    _sponsor1 = _sponsor;\r\n                } else if (referrals.isMember(_sponsor) == false) {\r\n                    _sponsor1 = referrals.membersList(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // withdraw \"staking coin\" from the pool (when the address is in the withdraw time or  accept the penalty fee)\r\n    function withdraw(uint256 _amount) public virtual {\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        require(\r\n            block.timestamp \u003e requestedWithdrawTime[msg.sender].add(lockTime) \u0026\u0026\r\n                block.timestamp \u003c\r\n                requestedWithdrawTime[msg.sender].add(lockTime).add(freeTime),\r\n            \"You must wait until the lock ends\"\r\n        );\r\n        IERC20(stakingCoinAddress).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    // emergency withdraw \"staking coin\" from the pool #SAFU\r\n    function emergencyWithdraw(uint256 _amount) public virtual {\r\n        require(block.timestamp \u003c emergencyTime, \"no emergency\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        IERC20(stakingCoinAddress).safeTransfer(msg.sender, _amount);\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"/**\r\n * @title Safe Math\r\n * @dev SafeMath contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n *\r\n **/\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"IERC20.sol":{"content":"/**\r\n * @title Interface ERC20\r\n * @dev IERC20 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both: the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"IProxy.sol":{"content":"/**\r\n * @title Interface Proxy\r\n * @dev IProxy contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IProxy {\r\n    function triggerProxy() external;\r\n}\r\n"},"IReferrals.sol":{"content":"/**\r\n * @title Interface Referrals\r\n * @dev IReferrals contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferrals {\r\n    function updateEarn(address _member, uint256 _amount) external;\r\n\r\n    function getSponsor(address _account) external view returns (address);\r\n\r\n    function isMember(address _user) external view returns (bool);\r\n\r\n    function addMember(address _member, address _parent) external;\r\n\r\n    function membersList(uint256 _id) external view returns (address);\r\n\r\n    function getListReferrals(address _member)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n"},"IWhitelist.sol":{"content":"/**\r\n * @title Interface Whitelist\r\n * @dev IWhitelist contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWhitelist {\r\n    function isWhitelisted(address _user) external view returns (bool);\r\n\r\n    function statusWhitelist() external view returns (bool);\r\n}\r\n"},"Manager.sol":{"content":"/**\r\n * @title Manager\r\n * @dev Manager contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: Business Source License 1.1\r\n *\r\n * File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n *\r\n **/\r\n\r\nimport \"./ContractLogic.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IProxy.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Manager is ContractLogic, Ownable {\r\n    IProxy public Proxy;\r\n\r\n    bool public ProxyTrigger; // is the proxy active or disabled\r\n    address public newProxyContract; // displays the newly submitted proxy contract\r\n    uint256 public proxyBlockTimelock; // the timelock in blocks you have to wait after updating the proxy to set a new proxy contract on active\r\n    uint256 public lastProxyTimelockBlock; // the last timelock block after the new proxy contract can be activated\r\n    address public basicSponsor;\r\n\r\n    // update the referral contract\r\n    function UpdateReferralsContract(address _referralsContract)\r\n        public\r\n        onlyOwner\r\n    {\r\n        referrals = IReferrals(_referralsContract);\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the lock time\r\n    function setLockTime(uint256 _lockTime) public onlyOwner {\r\n        lockTime = _lockTime;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the ref level reward\r\n    function setRefLevelReward(uint256[] memory _refLevelReward)\r\n        public\r\n        onlyOwner\r\n    {\r\n        refLevelReward = _refLevelReward;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the finish period for rewards\r\n    function setPeriodFinish(uint256 _periodFinish) public onlyOwner {\r\n        periodFinish = _periodFinish;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the transfer fee from the reward coin\r\n    function setRewardCoinFee(uint256 _rewardCoinFee) public onlyOwner {\r\n        rewardCoinFee = _rewardCoinFee;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n        // update the transfer fee from the reward coin\r\n    function setStakingCoinFee(uint256 _stakingCoinFee) public onlyOwner {\r\n        stakingCoinFee = _stakingCoinFee;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the free time\r\n    function setFreeTime(uint256 _freeTime) public onlyOwner {\r\n        freeTime = _freeTime;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    // update the vault address\r\n    function setVaultAddress(address _vaultAddress) public onlyOwner {\r\n        vaultAddress = _vaultAddress;\r\n    }\r\n\r\n    // update the whitelist contract\r\n    function updateWhitelistContract(address _whitelistContract)\r\n        public\r\n        onlyOwner\r\n    {\r\n        whitelist = IWhitelist(_whitelistContract);\r\n    }\r\n\r\n    // Set the minimum Amount to be allowed to enter a Referral.\r\n    function setMinReferralAmount(uint256 _minReferralAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minReferralAmount = _minReferralAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the {basicSponsor} for ref system.\r\n     *\r\n     * Sets the basic Sponsor in the system to prevent transactions from being split if it is the Sponsor of the basic Sponsor.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - only `owner` can update the `basicSponsor`\r\n     *\r\n     */\r\n    function setBasicSponsor(address _basicSponsor) public onlyOwner {\r\n        basicSponsor = _basicSponsor;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the {proxyBlockTimelock} to define block waiting times.\r\n     *\r\n     * This function ensures that functions cannot be executed immediately\r\n     * but have to wait for a defined block time.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - only `owner` can update the proxyBlockTimelock\r\n     * - proxyBlockTimelock can only be bigger than last proxyBlockTimelock\r\n     * - proxyBlockTimelock must be lower than 30 days\r\n     *\r\n     */\r\n    function setProxyBlockTimelock(uint256 _setProxyBlockTimelock)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            proxyBlockTimelock \u003c _setProxyBlockTimelock,\r\n            \"SAFETY FIRST || proxyBlockTimelock can only be bigger than last blockTimelock\"\r\n        );\r\n        require(\r\n            _setProxyBlockTimelock \u003c= 30 days,\r\n            \"SAFETY FIRST || proxyBlockTimelock greater than 30 days\"\r\n        );\r\n        proxyBlockTimelock = _setProxyBlockTimelock;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the {ProxyTrigger} for transfers.\r\n     *\r\n     * The `owner` decides whether the `ProxyTrigger` is activated or deactivated.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - only `owner` can update the `ProxyTrigger`\r\n     */\r\n    function setProxyTrigger(bool _ProxyTrigger) public onlyOwner {\r\n        ProxyTrigger = _ProxyTrigger;\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Outputs the remaining time of the proxyBlockTimelock.\r\n     *\r\n     * How many blocks have to pass to activate the new proxy.\r\n     */\r\n    function checkRemainingProxyBlockTimelock() public view returns (uint256) {\r\n        if (lastProxyTimelockBlock \u003e block.timestamp) {\r\n            uint256 remainingProxyBlockTimelock = lastProxyTimelockBlock.sub(\r\n                block.timestamp\r\n            );\r\n            return remainingProxyBlockTimelock;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `external proxy smart contract`\r\n     *\r\n     * This function shows that the owner wants to update\r\n     * the `ProxyContract` and activates the `lastProxyTimelockBlock`.\r\n     *\r\n     * The new `ProxyContract` is now shown to everyone\r\n     * and people can make the necessary decisions if required.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - only `owner` can update the external smart contracts\r\n     * - `external smart contracts` must be correct and work\r\n     */\r\n    function updateProxyContract(address _ProxyContract) public onlyOwner {\r\n        newProxyContract = _ProxyContract;\r\n        lastProxyTimelockBlock = block.timestamp.add(proxyBlockTimelock);\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Activates new `external proxy smart contract`\r\n     *\r\n     * After the `lastProxyTimelockBlock` time has expired\r\n     * The owner can now activate his submitted `external proxy smart contract`\r\n     * and reset the `proxyBlockTimelock` to 1 day.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - only `owner` can update the external smart contracts\r\n     * - `external smart contracts` must be correct and work\r\n     */\r\n    function activateNewProxyContract() public onlyOwner {\r\n        require(\r\n            lastProxyTimelockBlock \u003c block.timestamp,\r\n            \"SAFETY FIRST || safetyTimelock smaller than current block\"\r\n        );\r\n        Proxy = IProxy(newProxyContract);\r\n        proxyBlockTimelock = 1 days; //Set the update time back to 1 day in case there is an error and you need to intervene quickly.\r\n        emergencyTime = block.timestamp.add(emergencyTime);\r\n        newProxyContract = 0x0000000000000000000000000000000000000000;\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"/**\r\n * @title Ownable\r\n * @dev Ownable contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/access/Ownable.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any other account than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"/**\r\n * @title Reentrancy Guard\r\n * @dev ReentrancyGuard contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps preventing reentrant calls to a function\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private` and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents replace the bits taken up by the boolean and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"RewardPool.sol":{"content":"/**\r\n * @title Reward Pool\r\n * @dev RewardPool contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: Business Source License 1.1\r\n *\r\n **/\r\n\r\nimport \"./Manager.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract RewardPool is Manager, ReentrancyGuard {\r\n    constructor(\r\n        address _stakingCoinAddress,\r\n        address _rewardCoinAddress,\r\n        address _vaultAddress\r\n    ) public {\r\n        stakingCoinAddress = _stakingCoinAddress;\r\n        rewardCoinAddress = _rewardCoinAddress;\r\n        vaultAddress = _vaultAddress;\r\n    }\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 _amount);\r\n    event Withdrawn(address indexed user, uint256 _amount);\r\n    event RewardPaid(address indexed user, uint256 _reward);\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // last time reward applicable\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return SafeMath.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    // reward per staked token\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    // reward per staked token without ref fees\r\n    function rewardPerTokenWithoutRef() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n                    .div(100000)\r\n                    .mul(normalPercent)\r\n            );\r\n    }\r\n\r\n    // how much reward earned this address\r\n    function earned(address _account) public view returns (uint256) {\r\n        return\r\n            balanceOf(_account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\r\n                .div(1e18)\r\n                .add(rewards[_account]);\r\n    }\r\n\r\n    // how much reward earned this address without ref fees\r\n    function earnedWithoutRef(address _account) public view returns (uint256) {\r\n        return\r\n            balanceOf(_account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\r\n                .div(1e18)\r\n                .add(rewards[_account])\r\n                .div(100000)\r\n                .mul(normalPercent);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper\u0027s stake() function\r\n    function stake(uint256 _amount, address _sponsor)\r\n        public\r\n        override\r\n        updateReward(msg.sender)\r\n        nonReentrant\r\n    {\r\n        require(_amount \u003e 0, \"Cannot stake 0\");\r\n        super.stake(_amount, _sponsor);\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    // withdraw \"staking coin\" from the pool (when the address is in the withdraw time or accept the penalty fee)\r\n    function withdraw(uint256 _amount)\r\n        public\r\n        override\r\n        updateReward(msg.sender)\r\n        nonReentrant\r\n    {\r\n        require(_amount \u003e 0, \"Cannot withdraw 0\");\r\n        super.withdraw(_amount);\r\n        emit Withdrawn(msg.sender, _amount);\r\n    }\r\n\r\n    // emergency withdraw \"staking coin\" from the pool #SAFU\r\n    function emergencyWithdraw(uint256 _amount)\r\n        public\r\n        override\r\n        updateReward(msg.sender)\r\n        nonReentrant\r\n    {\r\n        require(_amount \u003e 0, \"Cannot withdraw 0\");\r\n        super.emergencyWithdraw(_amount);\r\n        emit Withdrawn(msg.sender, _amount);\r\n    }\r\n\r\n    // withdraw \"staking coin\" from the pool and claim rewards\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    // claim rewards\r\n    function getReward() public updateReward(msg.sender) nonReentrant {\r\n        notifyRewardAmount();\r\n\r\n        if (ProxyTrigger == true) {\r\n            Proxy.triggerProxy(); // this should later contribute to the decentralization of the project\r\n        }\r\n\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward \u003e 0) {\r\n            rewards[msg.sender] = 0;\r\n            uint256 refReward = reward.div(100000).mul(refRewardFee);\r\n            uint256 remainingRefReward = refReward;\r\n            IERC20(rewardCoinAddress).safeTransfer(msg.sender, reward.sub(refReward));\r\n            emit RewardPaid(msg.sender, reward);\r\n\r\n            address sponsor = referrals.getSponsor(msg.sender);\r\n\r\n            uint256 i = 0;\r\n\r\n            while (i \u003c refLevelReward.length \u0026\u0026 refLevelReward[i] \u003e 0) {\r\n                if (sponsor != basicSponsor) { \r\n                    uint256 refFeeAmount = refReward.mul(refLevelReward[i]).div(100000);\r\n                    remainingRefReward = remainingRefReward.sub(refFeeAmount);\r\n                    IERC20(rewardCoinAddress).safeTransfer(sponsor,refFeeAmount);\r\n                    sponsor = referrals.getSponsor(sponsor);\r\n                    i++;\r\n                } else {\r\n                    i += 30051999;\r\n                }\r\n            }\r\n\r\n        if (remainingRefReward \u003e 0) {\r\n            IERC20(rewardCoinAddress).safeTransfer(sponsor,remainingRefReward);\r\n        }\r\n        } \r\n    }\r\n\r\n    // add new rewards\r\n    function notifyRewardAmount() internal updateReward(address(0)) {\r\n        if (block.timestamp \u003e= nextRewardTime) {\r\n            nextRewardTime = block.timestamp.add(87000);\r\n\r\n            uint256 reward = IERC20(rewardCoinAddress).balanceOf(vaultAddress);\r\n            if (reward \u003e 0) {\r\n                IERC20(rewardCoinAddress).safeTransferFrom(\r\n                    vaultAddress,\r\n                    address(this),\r\n                    reward\r\n                );\r\n\r\n                reward = reward.div(10000).mul(rewardCoinFee);\r\n                ReceivedRewardCoins = ReceivedRewardCoins.add(reward);\r\n\r\n                if (block.timestamp \u003e= periodFinish) {\r\n                    rewardRate = reward.div(DURATION);\r\n                } else {\r\n                    uint256 remaining = periodFinish.sub(block.timestamp);\r\n                    uint256 leftover = remaining.mul(rewardRate);\r\n                    rewardRate = reward.add(leftover).div(DURATION);\r\n                }\r\n                lastUpdateTime = block.timestamp;\r\n                periodFinish = block.timestamp.add(DURATION);\r\n                emit RewardAdded(reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    // request a withdraw and activate the lock time\r\n    function requestWithdraw() public {\r\n        requestedWithdrawTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // time remaining until a withdraw can be executed\r\n    function remainingTimeToWithdraw(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 endTime = requestedWithdrawTime[_account].add(lockTime);\r\n        if (block.timestamp \u003c endTime) {\r\n            return endTime.sub(block.timestamp);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // remaining time until a withdraw can no longer be executed\r\n    function remainingTimeToLock(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 endTime = requestedWithdrawTime[_account].add(lockTime).add(\r\n            freeTime\r\n        );\r\n        if (block.timestamp \u003c endTime) {\r\n            return endTime.sub(block.timestamp);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function canWithdraw(address _account) public view returns (bool) {\r\n        if (\r\n            block.timestamp \u003e requestedWithdrawTime[_account].add(lockTime) \u0026\u0026\r\n            block.timestamp \u003c\r\n            requestedWithdrawTime[_account].add(lockTime).add(freeTime)\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"},"SafeERC20.sol":{"content":"/**\r\n * @title Safe ERC20\r\n * @dev SafeERC20 contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n *\r\n **/\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./ERC20.sol\";\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"/**\r\n * @title Safe Math\r\n * @dev SafeMath contract\r\n *\r\n * @author - \u003cUSDFI TRUST\u003e\r\n * for the USDFI Trust\r\n *\r\n * SPDX-License-Identifier: GNU GPLv2\r\n *\r\n * File @openzeppelin/contracts/utils/math/SafeMath.sol\r\n *\r\n **/\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a \u003c= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a \u003e= b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n}\r\n"}}