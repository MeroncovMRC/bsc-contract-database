// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
 
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
 
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }
 
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
 
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
 
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _setOwner(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function WETH() external pure returns (address);
    function factory() external pure returns (address);

     function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );


    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

library Address{
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}

contract BOJAK is IERC20, Ownable {
    using SafeMath for uint256;

    using Address for address payable;
    uint256 private constant MAX = ~uint256(0);
    string private constant _name = "Bojack Horseman";
    string private constant _symbol = "$BOJAK";
    uint8 private constant _decimals = 9;
    uint256 private _totalSupply = 1_000_000_000_000 * 10**_decimals;
    uint256 private _rTotal = (MAX - (MAX % _totalSupply));
    uint256 private  _maxWallet = 20_000_000_000  * 10**_decimals;
    uint256 private  _maxBuyAmount = 20_000_000_000 * 10**_decimals;
    uint256 private  _maxSellAmount = 20_000_000_000 * 10**_decimals;
    uint256 public  _autoSwap = 1_000_000_000 * 10**_decimals;
    uint256 private _totalBurned;
    uint256 private _totalDev;
    uint256 private _totalMarketing;
    uint256 private _totalLP;
    address public marketing = 0xE72C2024B39cb79D49669dBB1e684C32a46e9d0d;
    address public development = 0xE72C2024B39cb79D49669dBB1e684C32a46e9d0d;
    address public _recipientAddress = 0xE72C2024B39cb79D49669dBB1e684C32a46e9d0d;
    address public constant BurnAddress = 0x000000000000000000000000000000000000dEaD;
    mapping(address => bool) private _isExcludedFromFee;
    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    address private _owner;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    
    bool public _AutoSwap = true;
    bool public _AutoTaxes = true;
    bool private _TokenSwap = true;
    bool private _autoLP = true;
    bool private _isSelling = false;
    bool private _autoBurn = true;
  
    uint256 private _swapPercent = 100;
    
    //BUY TAX
    uint256 private _marketingTaxRate = 2;
    uint256 private _devTaxRate = 2;
    uint256 private lpTaxRate = 0;
    uint256 private _burnTax = 0;
    uint256 private AmountBuyRate = _marketingTaxRate + _devTaxRate + lpTaxRate + _burnTax;

    //Sell TAX
    uint256 private _marketingSellTaxRate = 2;
    uint256 private _devTaxSellRate = 2;
    uint256 private lpTaxSellRate = 0;
    uint256 private _burnSellTax = 0;
    uint256 private AmountSellRate = _marketingSellTaxRate + _devTaxSellRate + lpTaxSellRate + _burnTax;

    constructor() {

        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());

        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply;

        _isExcludedFromFee[_owner] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[marketing] = true;
        _isExcludedFromFee[development] = true;
        _isExcludedFromFee[_recipientAddress] = true;
       
        
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function getOwner() public view returns (address) {
        return owner();
    }
    
    function name() public pure returns (string memory) {
        return _name;
    }
    
    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {

        if(recipient != uniswapV2Pair && recipient != owner() && !_isExcludedFromFee[recipient]){

            require(_balances[recipient] + amount <= _maxWallet, "MyToken: recipient wallet balance exceeds the maximum limit");

        }

        _transfer(msg.sender, recipient, amount);
        
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        _transfer(sender, recipient, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "MyToken: approve from the zero address");
        require(spender != address(0), "MyToken: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address sender, address recipient, uint256 amount) private {

        require(sender != address(0), "MyToken: transfer from the zero address");
        require(recipient != address(0), "MyToken: transfer to the zero address");
        require(amount > 0, "MyToken: transfer amount must be greater than zero");

        // skip swap token if adding liquidity to Uniswap
        if (recipient == uniswapV2Pair && sender == owner()) {

            _balances[sender] -= amount;
            _balances[recipient] += amount;
            emit Transfer(sender, recipient, amount);
            return;
        }

        //sell   
        if(recipient == uniswapV2Pair && !_isExcludedFromFee[sender] && sender != owner()){

                require(amount <= _maxSellAmount, "Sell amount exceeds max limit");

                _isSelling = true;
               
                if(_AutoSwap && balanceOf(address(this)) >= _autoSwap){

                    AutoSwap();
                }  
        }

        //buy
        if(sender == uniswapV2Pair && !_isExcludedFromFee[recipient] && recipient != owner()){
                    
            require(amount <= _maxBuyAmount, "Buy amount exceeds max limit");
            
        }

        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) { _AutoTaxes = false; }

        if (_AutoTaxes) {

                if(!_isSelling){

                    uint256 totalTaxAmount = amount * AmountBuyRate / 100;
                    uint256 transferAmount = amount - totalTaxAmount;
                    
                    _totalDev += amount * _devTaxRate / 100;
                    _totalMarketing += amount * _marketingTaxRate / 100;
                    _totalLP += amount * lpTaxRate / 100;
                   
                    _balances[address(this)] = _balances[address(this)].add(totalTaxAmount);
                    _balances[sender] = _balances[sender].sub(amount);
                    _balances[recipient] = _balances[recipient].add(transferAmount);

                    emit Transfer(sender, recipient, transferAmount);

                }else{

                    uint256 totalTaxAmount = amount * AmountSellRate / 100;
                    uint256 transferAmount = amount - totalTaxAmount;

                    _totalDev += amount * _devTaxSellRate / 100;
                    _totalMarketing += amount * _devTaxSellRate / 100;
                    _totalLP += amount * lpTaxSellRate / 100;

                    _balances[address(this)] = _balances[address(this)].add(totalTaxAmount);
                    _balances[sender] = _balances[sender].sub(amount);
                    _balances[recipient] = _balances[recipient].add(transferAmount);

                    emit Transfer(sender, recipient, transferAmount);

                    _isSelling = false;
                }
            
        }else{

                _balances[sender] = _balances[sender].sub(amount);
                _balances[recipient] = _balances[recipient].add(amount);

                emit Transfer(sender, recipient, amount);

        }
    }

    function swapTokensForEth(uint256 tokenAmount) private {

        // Set up the contract address and the token to be swapped
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        // Approve the transfer of tokens to the contract address
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.addLiquidityETH { value: ethAmount }
            (address(this), 
            tokenAmount, 
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            _recipientAddress, block.timestamp);
    }

   // WARNING: This function is dangerous and irreversible.
    function burn(uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        require(amount <= _balances[msg.sender], "Insufficient balance");

        uint256 input = amount * 10 ** _decimals;
        _balances[msg.sender] = _balances[msg.sender].sub(input);
        _totalSupply = _totalSupply.sub(input);
        _totalBurned = _totalBurned.add(input);
    }



    function swapTokensForTaxesOnly() public onlyOwner {

        AutoSwap();
    }

    function AutoSwap() private {

        uint256 contractTokenBalance = balanceOf(address(this));

        if(contractTokenBalance > 0) {

            if(_TokenSwap){

                if(contractTokenBalance > 0){
                    
                    uint256 caBalance = balanceOf(address(this)) * _swapPercent / 100;

                    uint256 LpTokens = (caBalance * (lpTaxRate + lpTaxSellRate)) / 100;
                    uint256 ToBurn = (caBalance * (_burnTax + _burnSellTax)) / 100;

                    if(ToBurn > 0 && _autoBurn){

                        IERC20(address(this)).transfer(BurnAddress, ToBurn);

                        _totalBurned = _totalBurned.add(ToBurn);

                    }

                    uint256 toSwap = caBalance - LpTokens - ToBurn;

                    swapTokensForEth(toSwap);

                    uint256 receivedBalance = address(this).balance;
                    
                    uint256 marketingAmount = (receivedBalance * (_marketingTaxRate + _marketingSellTaxRate)) / 100;
                    uint256 devAmount = (receivedBalance * (_devTaxRate + _devTaxSellRate)) / 100;
                    uint256 LpAmount = (receivedBalance * (lpTaxRate + lpTaxSellRate)) / 100;
                    uint256 txcollect = receivedBalance - marketingAmount - devAmount - LpAmount;

                    if (LpTokens > 0 && LpAmount > 0 && _autoLP) {addLiquidity(LpTokens, LpAmount);}
                    if (marketingAmount > 0) {payable(marketing).transfer(marketingAmount);}
                    if (txcollect > 0) {payable(_recipientAddress).transfer(txcollect);}
                    if (devAmount > 0) {payable(development).transfer(devAmount);}

                }else{

                    revert("No tokens available to swap");
                }

            }

        }else{

           revert("No Balance available to swap");     
           
        }
            
    }

    function getCirculatingSupply() public view returns (uint256) {

        return totalSupply() - balanceOf(BurnAddress);

    }

   function setMarketingAddress(address newAddress) public onlyOwner {
        require(newAddress != address(0), "Invalid address");
        marketing = newAddress;
        _isExcludedFromFee[newAddress] = true;
    }

    function setDevelopmentAddress(address newAddress) public onlyOwner {
        require(newAddress != address(0), "Invalid address");
        development = newAddress;
        _isExcludedFromFee[newAddress] = true;
    }

    function setRecipientAddress(address newAddress) public onlyOwner {
        require(newAddress != address(0), "Invalid address");
        _recipientAddress = newAddress;
        _isExcludedFromFee[newAddress] = true;
    }


    function AutoLP(bool status) external onlyOwner {
        _autoLP = status;
    }

    function viewTaxRates() public view returns (
        uint256 marketingBuyRate,
        uint256 devBuyRate,
        uint256 lpBuyRate,
        uint256 burnBuyRate,
        uint256 totalBuyRate,
        uint256 marketingSellRate,
        uint256 devSellRate,
        uint256 lpSellRate,
        uint256 burnSellRate,
        uint256 totalSellRate
    ) {
        marketingBuyRate = _marketingTaxRate;
        devBuyRate = _devTaxRate;
        lpBuyRate = lpTaxRate;
        burnBuyRate = _burnTax;
        totalBuyRate = AmountBuyRate;

        marketingSellRate = _marketingSellTaxRate;
        devSellRate = _devTaxSellRate;
        lpSellRate = lpTaxSellRate;
        burnSellRate = _burnSellTax;
        totalSellRate = AmountSellRate;
    }

    function autoBurn(bool status) external onlyOwner {
        _autoBurn = status;
    }

    function SwapEnable(bool status) external onlyOwner {
        _AutoSwap = status;
    }

    function totalBurned() public view returns (uint256) {
        return _totalBurned;
    }

    function balanceOf(address account) public view override returns (uint256) {
            return _balances[account];
    }

    function getTaxCollect() external view returns (uint256 totalDev, uint256 totalMarketing, uint256 totalLP) {

        totalDev = _totalDev;
        totalMarketing = _totalMarketing;
        totalLP = _totalLP;
    }


    function SetSwapPercentage(uint256 SwapPercent) external onlyOwner {
        _swapPercent = SwapPercent;
    }

    function setAutoSwap(uint256 newAutoSwap) external onlyOwner {
        require(newAutoSwap <= (totalSupply() * 1) / 100, "Invalid value: exceeds 1% of total supply");
        _autoSwap = newAutoSwap * 10**_decimals;
    }

    function setBuyTaxRates(uint256 marketingTaxRate, uint256 devTaxRate, uint256 lptax, uint256 burntax) external onlyOwner {
        
        require(marketingTaxRate + devTaxRate + lptax + burntax <= 10, "Total buy tax rates should be below or equal to 10%");
        _marketingTaxRate = marketingTaxRate;
        _devTaxRate = devTaxRate;
        lpTaxRate = lptax;
        _burnTax = burntax;
        AmountBuyRate = _marketingTaxRate + _devTaxRate + lpTaxRate + burntax;
    }


    function setSellTaxRates(uint256 marketingTaxRate, uint256 devTaxRate, uint256 lptax, uint256 burntax) external onlyOwner {

        require(marketingTaxRate + devTaxRate + lptax + burntax <= 10, "Total sell tax rates should be below or equal to 10%");
        _marketingSellTaxRate = marketingTaxRate;
        _devTaxSellRate = devTaxRate;
        lpTaxSellRate = lptax;
        _burnSellTax = burntax;
        AmountSellRate = _marketingSellTaxRate + _devTaxSellRate + lpTaxSellRate + _burnSellTax;
    }


    function withdrawBalance() public onlyOwner {
        uint256 balance = address(this).balance;
        require(balance > 0, "No balance available for withdrawal");
        payable(_recipientAddress).transfer(balance);
    }

    function withdrawToken(address tokenAddress, address to, uint256 amount) external onlyOwner {
        require(IERC20(tokenAddress).transfer(to, amount), "Transfer failed");
    }
    

    receive() external payable {}

}