{"BIFUGFF.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./ReentrancyGuard.sol\";\n\ncontract BIFUGFFContract is Ownable, ReentrancyGuard {\n\n    uint256 public fundsRaisedV1 = 13502 * 1e18; // Funds that were raised in the V1 contract\n    uint256 public AUM; // Total fund value that decides the NAV\n    uint256 public numberOfShares; // Total number of shares\n    uint256 public NAV = 10 * 1e18; // Net asset value at which the fund is bought and sold\n    uint256 public denominator = 1e18; // Accuracy upto 18 decimal places\n\n    uint256 public inceptionTime; // Start time of trading in fund\n\n    uint256 public minInvestmentAmnt = 1_000 * 1e18; // $1000\n\n    IERC20 public usdtToken;\n    IERC20 public busdToken;\n    address public treasury;\n\n    mapping(address =\u003e uint256) public totalSharesHeldByInvestor;\n    mapping(address =\u003e bool) public frozenAccounts;\n\n    event FundInitiated(uint256 startTime);\n    event Invested(\n        address indexed investor,\n        uint256 amount\n    );\n    event Withdrawn(\n        address indexed investor,\n        uint256 amount\n    );\n    event InvestmentMapped(address[] investor, uint256[] shares);\n    event AccountFrozen(address investor, string reason);\n    event ETHCollected(address collector, uint256 amount);\n    event IERC20TokenWithdrawn(address collector, uint256 amount);\n    event FundsWithdrawn(address treasury, uint256 usdtAmount, uint256 busdAmount, string reason);\n\n    constructor(\n        address _usdtTokenAddress,\n        address _busdTokenAddress,\n        address _treasury\n    ) {\n        require(\n            _usdtTokenAddress != address(0) \u0026\u0026 _treasury != address(0),\n            \"Can\u0027t set to zero address\"\n        );\n        usdtToken = IERC20(_usdtTokenAddress);\n        busdToken = IERC20(_busdTokenAddress);\n        treasury = _treasury;\n        inceptionTime = block.timestamp;\n    }\n\n    // internal functions\n\n    function calculateNAV(uint256 _AUM) internal {\n        NAV = _AUM * 1e18 / numberOfShares;\n    }\n\n    // Investor functions\n\n    function calculateInvestmentValue(address investor) public view returns(uint256) {\n        uint256 totalInvestedValue= (totalSharesHeldByInvestor[investor] * NAV) / 1e18;\n\n        return totalInvestedValue;\n    }\n\n    function invest(\n        uint256 _amount,\n        IERC20 _tokenAddress\n    ) external {\n        require(\n            _tokenAddress == usdtToken || _tokenAddress == busdToken,\n            \"Use either USDT or BUSD only!\"\n        );\n        require(_amount \u003e= minInvestmentAmnt, \"Amount must be greater than min investment amount set in the contract\");\n        require(_tokenAddress.balanceOf(msg.sender) \u003e= _amount, \"Not enough balance in wallet to invest\");\n\n        require(_tokenAddress.transferFrom(msg.sender, address(this), _amount), \"Fund transfer to contract failed!\");\n\n        uint256 calculateNumberOfShares = _amount * 1e18 / NAV;\n\n        AUM += _amount;\n\n        totalSharesHeldByInvestor[msg.sender] += calculateNumberOfShares;\n        numberOfShares += calculateNumberOfShares;\n\n        emit Invested(msg.sender, _amount);\n    }\n\n    function withdrawInvestment(\n        uint256 _numberOfShares,\n        uint256 nonce,\n        bytes memory _signature\n    ) external nonReentrant {\n\n        require(\n            totalSharesHeldByInvestor[msg.sender] \u003e= _numberOfShares \u0026\u0026 _numberOfShares \u003e 0,\n            \"Error: Not enough shares!\"\n        );\n        require(\n            !frozenAccounts[msg.sender],\n            \"This account has been frozen on account of hack!\"\n        );\n\n        bytes32 message = prefixed(\n            keccak256(abi.encodePacked(msg.sender, _numberOfShares, nonce, this))\n        );\n\n        require(\n            recoverSigner(message, _signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        uint256 totalAmount = (_numberOfShares * NAV) / 1e18;\n        // take 1% withdrawal fee\n        uint256 withdrawalFee = totalAmount / 100;\n        uint256 withdrawableAmnt = totalAmount - withdrawalFee;\n\n        AUM -= totalAmount;\n\n        totalSharesHeldByInvestor[msg.sender] -= _numberOfShares;\n        numberOfShares -= _numberOfShares;\n\n        require(usdtToken.balanceOf(address(this)) \u003e= withdrawableAmnt, \"Error: Not enough USDT balance in the contract\");\n\n        usdtToken.transfer(msg.sender, withdrawableAmnt);\n\n        emit Withdrawn(msg.sender, withdrawableAmnt);\n    }\n\n    // Signature verifications\n\n    function prefixed(bytes32 _hash) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n            );\n    }\n\n    function recoverSigner(bytes32 _message, bytes memory _signature)\n        internal\n        pure\n        returns (address)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        (v, r, s) = splitSignature(_signature);\n\n        return ecrecover(_message, v, r, s);\n    }\n\n    function splitSignature(bytes memory _signature)\n        internal\n        pure\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        )\n    {\n        require(_signature.length == 65, \"Invalid signature length\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := byte(0, mload(add(_signature, 96)))\n        }\n\n        return (v, r, s);\n    }\n\n    // Admin priveledges\n\n    /** \n        To map investments from V1 of the contract at https://bscscan.com/address/0x47d69c7701de0fde09992a62b52f73c19cc2eafa\n        For a total amount of 13,502 USDT and 1350.2 shares at $10 NAV \n     **/\n    function _mapInvestments(address[] calldata investors, uint256[] calldata shares, uint256 _AUM, uint256 _totalShares) external onlyOwner{\n        require(_AUM \u003c= fundsRaisedV1, \"Error: Can\u0027t map than more than the amount held in the V1 of the contract\");\n        for(uint i = 0; i\u003c investors.length; i++){\n            require(investors[i] != address(0));\n            totalSharesHeldByInvestor[investors[i]] = shares[i];\n        }\n\n        AUM += _AUM;\n        numberOfShares += _totalShares;\n        emit InvestmentMapped(investors, shares);\n    }\n\n    function declareAUMChange(int256 _delta) external onlyOwner {\n        if(_delta \u003c 0) {\n            AUM -= uint256(-(_delta)) * 1e18;\n            calculateNAV(AUM);\n        } else {\n            AUM += uint256(_delta) * 1e18;\n            calculateNAV(AUM);\n        }\n    }\n\n    function freezeAccount(\n        address _investor,\n        string memory _reason,\n        uint256 nonce,\n        bytes memory _signature\n    ) external onlyOwner {\n        require(!frozenAccounts[_investor], \"Account is already frozen!\");\n\n        bytes32 message = prefixed(\n            keccak256(abi.encodePacked(msg.sender, _reason, nonce, this))\n        );\n\n        require(\n            recoverSigner(message, _signature) == msg.sender,\n            \"Invalid signature\"\n        );\n\n        frozenAccounts[_investor] = true;\n\n        emit AccountFrozen(_investor, _reason);\n    }\n\n    function collectNativeCurrency() external onlyOwner {\n        uint256 fundsToSend = address(this).balance;\n        bool sent = payable(treasury).send(fundsToSend);\n        require(sent, \"Failed to send Ether\");\n\n        emit ETHCollected(treasury, fundsToSend);\n    }\n\n    function withdrawOtherTokens(address _token) external onlyOwner {\n        require(_token != address(0), \"can\u0027t withdraw zero token\");\n        require(\n            IERC20(_token) != usdtToken \u0026\u0026 IERC20(_token) != busdToken,\n            \"Use collectUSDT method!\"\n        );\n        uint256 fundsToSend;\n\n        fundsToSend = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(msg.sender, fundsToSend);\n\n        emit IERC20TokenWithdrawn(msg.sender, fundsToSend);\n    }\n\n    function collectFunds(string memory _reason) external onlyOwner {\n        uint256 usdtToSend = usdtToken.balanceOf(address(this));\n        uint256 busdToSend = busdToken.balanceOf(address(this));\n\n        if (usdtToSend \u003e 0 || busdToSend \u003e 0) {\n            usdtToken.transfer(treasury, usdtToSend);\n            busdToken.transfer(treasury, busdToSend);\n        }\n\n        emit FundsWithdrawn(treasury, usdtToSend, busdToSend, _reason);\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}"}}