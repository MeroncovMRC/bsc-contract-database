// SPDX-License-Identifier: MIT
pragma solidity >0.4.0 <= 0.9.0;
/**
777777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!77777777777777777
7777777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~!!!!!!!!!777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!77777777777777777
777777777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!~~~~~~!!!77????J?JJJJJJJJJJ??J??????????77777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!777777777777777777
77777777777777777777!!!!!!!!!!!!!!!!!!!!!!~~~~!!77?JJJJJJJJJJJJJJJJJ?????????????????????????77777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!7777777777777777
777777777777777777777!!!!!!!!!!!!!!!!!!!!!!7??JYYJJJJJJJJJJJJJ?????????????????????777???77??7777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!777777777777777
77777777777777777777777!!!!!!!!!!!!!!!7??JJJJJJJJJYJJJJJJJJ??????????????????77???????????????7777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!777777777777
77777777777777777777777!!!!!!!!!!!7?JYYYYJJJYJYYJJJJJJJ?????????????????????????????????????777777777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!77777777
7777777777777777777777!!!!!!!!!7?JYYYYYYYJYYJJJJJJJJJJJJJJJJJJJJJ????????????????????777?7777!777!!77777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!77777777
777777777777777777777!!!!!!!!?JYYYYYYYJJJJJJYJJJJJJJJJJJJJJJJJJJJ?JJJJ?J??????????????777777!!!!!!!!!!!!!77777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!777
77777777777777777777!!!!!!7JYYYYYYYYJJJJJJJYYYYYYYJJYYYJJJJJJJJJJJJJJJJ???????JJ?????77!!!!!~~!!~~~^^^~^~~~!!7777777?7!!!!!!!!!!!!!!!!!!!!!!!!!!!!7777
7777777777777777777!!!!!7JY55YYYYYYYYYJJJYYYYYYYYJJJJJJJJJJJJJJJJJJJJJJ?JJJJJJJJJ???7!!~~~~~~~~~~~~~~^^^^^^~~!!777777??7!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
7777777777777777777!!!?Y55YYY5YYYYYYYYYJJJJJJJJJJJJJJJJJ?JJ??JJJJJJJJJJJJJJJJJ??JJ??!~^~~~~~~~~~~~~~~~~~~~~^^~!!!77??????7!!!!!!!!!!!!!!!!!!!!!!!!!!!!
7777777777777777!!!!?Y55555555YY55YJJJYYJJJJJJJ???JJJ????JJ?????JJJ?JJJJJJJJJJJ?????!~~^~~~~~~!!~~~~~!!!~~^^^~!77777??JJJJ?7!!!!!!!!!!!!!!!!!!!!!!!!!!
7777777777777777!!?Y55555555Y5555YYYYJJJJJJJJJJJJ????JJJJJ?????????????JJJJJJJJ????77!!~~~!!!~!~!!!!!!!7!~~~~!!!77??JJJYYJJJ7!!!!!!!!!!!!!!!!!!!!!!!!!
77777777777777!!7Y55P5PPP5555YYYYYYJJYJJJJJJJJ??????JJJ???????J???????JJJJJYJJ???JJJJJJ?7!7!!77!!77777???7!!!7????JJJYYYYYYYJ?!!!!!!!!!!!!!!!!!!!!!!!!
7777777777777!!JP55PPPPP55555YJJYYJJJJJJJJJJJJ?J????7??77777777777??JJJ?JJJYYYJJ???JYYY5YJJ????7777777??JJ?77JJ??JJYYY55555YYY?!!!!!!!!!!!!!!!!!!!!!!!
777777777777!75PP5PPPP555555YYYJJJJJJJJJJJJ????????777!!~~!!!7777?77?JJJJYYYYYYYJJ??JJYY55Y5YYJJ???J????JYYJJYJJJJYYY555555555Y?!~!!!!!!!!!!!!!!!!!!!!
7777777777!!?PPP55PP55555YYYYYJJJ?JJJ???????????7777!!!~!!!~!!!77???JJJJYYYYY5555YYYYYYY555555YYY5YYYY5Y555Y55YYYY555PPPPPP5555Y?!~!!!!!!!!!!!!!!!!!!!
77777777!!!JPPPPPPPP5555YYYYYJJJJ??????????77??77777!~~~~!!!7777???JYYYYYYYY5P5PP5PP55PPPPPPPPPPPPPPPPPPGGGGP55YY55PPPPGGGPPPPP5YJ~!!!!!!!!!!!!!!!!!!!
7777777!!!JGPPPPPP5P555YYYJJJJ?????????J???777???77!7!!!7!7777??JJJYYYYY5YY555555555555555555PPPPPPPPGGGGBBGP5YYYYY55PPPGGGGPPPP55?~!!!!!!!!!!!!!!!!!!
77777!!!!?PGPPPPPP55555YYJJJJJJ?????????????????777777777777?JJJJJ?JYJYJYYYYY55555PPGGGBBGGGPGPPPPPGGGPGBBBBGP55Y555555PPPGGGGPPPP5!!!!!!!!!!!!!!!!!!!
7777!!!!7PGGGPPPPPPP555YYJJJJJ???7????????JJJ???7?7?7777777??JJ???JY5YYY5PPPPPGGGGGPPPPPPGGGGGBGGGPGGGGGBBGGGPPPPPPPGGGGGGGGGGGPPPPY!!!!!!!!!!!!!!!!!!
7777!!!7PGGGPPPPPPP555YYYYJJJJ??7??????JJJJJJ???7777?777????JJJ?J?JY5YYYYYYYYYYJYY555555555YY5555PPGGPPPGGGGPPPPGGGGGBBBBBBBBGGGGPPP7!!!!!!!!!!!777777
777!!!!5GGGPPPPPPP5YYYYYYYJJYJJJ?J??JJ?JJJJJY???7???J??7777??77?7?JYYYJYY55PPGGGGGGGGGGGGBGGPPP555PPPPPGBBGGGGGGGGGGBBBBBBBBBBBGGGGPY!!!!!!!!!!!777777
77!!!!?GGGPPPPPPPP5555YYYJYYYYJ?????JJJJJYJJJJ?77777!77777??77777J5PPP555PPGGPP555YYY555PP555PGGPPPPGGGGBBBGGGBGBBBBBBB##BBBB#BBGGBGP?!!!!!!!!!!!77777
77!!!!PGGGPPPPPP555555YYYYYYYJJJJJJ???J???JJJ?J??777777??J??JJJJJYJJ??JJJY555YYYJJJY555PPPPPGGGGGGGGPPGGBBGGBBGGGBBBBBB#####BBB##BBBG5!!!!!!!!!!777777
7!!!!?GGGPPPPPPP555555YYYYYJJJYJJJJ?J???JYYYJJJJ????JJJ?????JJJJJJJ?JY55555YYYYYY5PGGGBGPP555YYYY55PBBBG555PPGBBGBBBBBBB######BBB#BBBG?!!!!!!!!!!77777
!!!!!5BGGPGPPPPP555555YYYYYJJYJJ??JJJJJJJJJJJJJJJ???J?77!!!77JY5YYJJYYYJYYYY5PGPGGGGGPPP5555555555YYY5PPBGGPP5PGBBBBBBB#######BBBBBBBBY!!!!!!!!!!!7777
!!!!7GGGGPGPPPPP5555555YYYJJJYJJJJJJJ?777?J?????777!!!!!7???JJ?YJJJJJJYY555PP5555PP555555555YYYY5PPP5PP5PPGBBBGBBBGGGPPBB######BB#BBBB5!!!!!!!!!!!7777
!!!!?BGGGGGPPPPP5555YYYY5YYYYYYYJJ??7!!777??77?777777!7777!???JJYYYYY5P5YYJJJYPPP5YYYYYJJJJYYYYJJJY555PPPPPGGB###GGGPBBBBBBB#BBBBBBB##P7!!!!!!!!777777
!!!!?BGGGGPPPPP5P5555Y555YYYYYYJ????7777??JJ????777!7777!7???J?JJYYYYYY?JJYY5YY?777777777777??JJJJ??JY5Y5PGPPGGBGPGBB##BBBBBBBBBBBBGB#G7!!!!!!!!777777
!!!!?BBGGGPPPPPPP5555YYYJJJY55YYJJ????7?777777???777!!!!!7777777JJ??JJJJJ??7777777777??????????JJJJ???YPP55PPPGGGGGGGB######B#BBBBBGPGG7!!!!!!!!!!!777
!!!!7GBBGGGPGGPPPP555YYYYYY55YYYJ?777!7777????77777!!!!77?777??777!7?777!!!7?????7JY55PPGGGGGGPGGGG55YJY5PPP5PGGGGGGGBBB#####BBBBBBBGPP7!!!!!!!!!!!!!!
!!!!7GBBGGGGPPPP55555555YYYYJJJJ?777?7????77?7!77777777???JJYJ77!!!!!~~~!!7JJ5PGGB###BGB#B###BBBBBBB#BG5YY5PPPGGGGGGGGBBBBBGBGBB####BG57!!!!!!!!!!!!!!
!!!!!PBBBGGPPPPPPP5555Y5YYYYJJ????????7777!77777??????????JJJ?7?77!!!~!7?JYPPBGPPPPPPBB##BBBPPGGGGGGBBBGP5Y5PPPPGGGGBGBBBBBBBBGB#B#BBBP?~!!!!!!!!!!!!!
!!!!~JBBGGGGPPPPPP55YY5Y55YYJJJ??7777777!!!77777????7?7???J?777777!!7!7?JY55P555Y555PPPPPPP555P55P55PPPGBGP55PPPPGBGGGBBBB###BGB#BBBBBGY~!!!!!!!!!!!!!
!!!!!!PBBGGGGPPP5555Y555555YJJ???777777!!!!777??7777!!!77?7777777!777???YJJJYYYYY555YJYY555555555555555PGGBBGGGGGGGBGGGGGBBBBBBGB#B####P~~~!!!!!!!!!!!
!!!!!~J##BGGPP5555555555YYYYJJ??7!!7777!!~!!77??77777777777777777777?J?JJJJYYPPPPP5YYY555YYJJY555555PPGBBBB##BBBBGGGGGGGGGGGGBBBBBBB###Y~7??JYYY5PP5?!
!!!!!!!B#BGPP55555555YYYYJJYJ????!77!!!!~!!!77777777????J???77?????JJJY55Y5PPGGG5YYYJJ?????JYYY55PP5PPGGB#B#B#BBBBGGPGGPPPPPGGBBBBGBB#B5YYY55GB#&&&&#?
!!!!!!~P#BGPPPP555555YJJJ????JJ??77!!!!!777?????7????JJJJJJJ??JJJYYY55PGPGB#BBG5Y??77777?JJJ5PPGGGGPGGBBBBB#B###BBBGGGPPGPPPPGBBBBBBB#PYY55PB&&&&&&&&G
!!!!!!~J#BGPP55P555555YYJ?JJY5555YJJYY5555555YYJJJJ??JY555YYYYY5PPPGGGGBB#&#BPYJ777??Y5PP5PPPPPPGGGGGGGBBBBBBB####BBBGGGPPGGGGBBBBBB#B555PP#&&#&&&&&&&
!!!!!!~!GBGPPPP5555PBGGBGGGGBBBBBGBBB###BBBGGP5YYYYYY55PP555PPPGGGBBBB###&#G5YY?JJ5GBG5J7!77??JJ77?JPBBBBBBBBB###BBBBGPPPPPPPPGBBBBB#BGPGGB######&&&&&
!!!!!!!~JBGPPPPPPGGBGGBBGBBBBGGGBBBB###BBGGGGGGPPPPPGGGGGGPPPPGGGB#######BP5555PGB#G5JJJJY5PGGBBGP5YY5PB##BBBB#####GGPPPPPPPPGGGGBBB##BGBB#####BB#&&&#
!!!!!!!~!GGGPPGGGBBBBGPPPPGGGBBBB########BBB##B#BBB####BBGPPPPPPGB###&&&#GP55PG##BPPGB#&&&&#&&&#&#####BB#BBBB#BGGBBGGGGPPGPPGGGPPGGB#####BB####BGB&&#B
!!!!!!~~~JGGGGGGBBBG5YJJJJJJJJJYY5PPGGBB###############BGP55YY55PGB##&&&BGGPG##BGG##B5JP#&&#&&&&#PPB#BGB&##BBBGPP555PPPPPGGGGGGGGGGB###########BPP#&&G
!!!7???7!!GBGGGGG555YJJJJJYYY55PPGGGGBBBBBB#######&&#BGP5YJ???JY55GBBGGPPPGB##BB#&&P!^^~JG####BGYY55GGB#BGGGGGGPPPPPPPPPPGGGBBBBGGGGB#&&&&####BGPPB&#P
!!5BGPP5YYPGGGGGPPP55PGGGGBGP5YY5PPGBB####BBBBB##&#BP5YYJ?77!!7JJJ555YJJ??J55PPPP55J?777777?JJJJYPBB##&&BBBPPP55PPGGPPPPGGGBBBBBGGGGGB#&&&##&#BGPGG&PP
!!JB#G55YYPGGGBGBBBGB#GPPPGBB###B###BBGBBBBBB###BGPYYJ???77~~~!77?JJJJ?JJJYPPPPPGGPGGPPPPPPGGBB###&&&&&&&##GP55555PPPPPGGGBBBBBBBBGGGGG#&&##&#P5YPG#BB
!!~7#&BPPY5PGGGGBB#&BGBB#GPP#&&&#&&#BYJP#####BP5?JJJJJ???7!~~~!77?JJJYJ?JJJY55PPPB##&&&#####&&&&&&&&&&&#BGPYYYYY5555PPPGGGBBBBBBBBGGGBBPB&&&#BY?JPB&&5
!!!!B&&#BGPPGGGGGB&&##&&GJ7!JB#&&#BGY??J555Y5YJJJJJJJJ??77!~^^~7?J5555JYJ7??JYYJ?JJ5PGB#&&&&&&&&&&&#BG5JJJ????JJY5555PGGGBBBBBB#BBBGGB#B5B&&#P??YGB&#?
!!!!PG#&&#PPPGGGG####BBGP5Y7!7JYY?7?7?J5GBBG5JJJJJJJJYJ??7!~^~!7JYPPP5YYJ??7!7????????JJJ555PP55555YJ?7!77??JJYY55P5PPPGGBBBBB##BBBBGB&#BG&&#Y!JP##&G!
!!!!?GPG##GPPPGGGB#BGG##BBGPYY5YYY5PGB#&&B5J7?JJJ???JYYJ?7!!~!7JJ5PGPP5YYYJ?!!7777?77?7??77777777777!!!777??JYY55PPPGGGBBBBBB###BBBBGB&#B#&&BJYG#&&#J~
!!!!!YP55GGGGPPPPGGPPPB#####BBB####&&&#GY77???????JJY55J?7!~!7??Y5PGGPP55YJ??7!!!!7!!777??????7?7777!!!!!7?JJYYY5PPGGGGBB########BBBBB&##&&##B#&&BGP!!
!!!!!!555PGBGPP5PPP55YY5PPGBB###&&&#B5J7777?7777?JJ555Y??7!!777??JJ5PGGGGPYJJ??77!!!!~77!!77777777!!!!777777??JY55PGGBB###########BBBB&&&#GPB&&#GYP?~!
!!!!!!7P5PBBGP555Y555P5Y5YY5PPGGGP5J?777777!!!7?JY555J???77777?????JYPGGGGP5YYJJ???77!!~!~~!!!!?7777????JJJJJJJYY5PGGBB############BBBGGB#BPPB&B555!!!
!!!!!!!755GBGP55YYJJJYYYY55YYYJJJ?7777!!!!!7!!??Y55YJJ??7!!!!!7????JY5PGBGGPP5YYY5YYJJ?77!!!!77??J?JJYYYYYYYY5555PGGBBBB############B#G5P##G55555G?~!!
!!!!!!!!!YPBGP55YYJJJ???????????77!77!!!!!!777?J555YJ??7!^::^~!777?JJYYYYYJJYY555555PPP5YJ??77??JJY5555555PPPPPPGGGBBB##############B##GGBBGGGPYYY!!!!
7!!!!!!!!!5BBGP555YYJJ??77?7???77!!!!!777?????JYYYYYJ??7!~~^^~!7??JJ?77777777?JY555PYY5PPP5YYJYYY555PPPPPPPPPPGGBBB##################&#BGGB##BBB#?~!!!
77!!!!!!!~7GBGPPP55YYJ?????7??77!!!!777Y55YJJJJJJJJJJJJ?77?7777JY55YJ?7777????JJYPBPJ?JY5PGPP555PPPPPGGGGGGGGBBB#B##################BYB&&##&&&&#Y~!!!!
777!!!!!!!~JBBGPPP5YYYJJJ????777!!777JGG5JYJJ?????JYY555YYYJYY5PPGPGBBBBB###BBGGGB#BJ??JJYPGBBGGGGGGGGBBGGBBBBB######################7!5B&&&#BP?~!!!!!
77!!!!!!!!!!P#BGPP55YYYYJJJ???7777?J5BPYYJYJJYY5PGB##BBGGGGGGGBBBB#&&&&&&&&&&&&##&&&GJ??JJYPGB#BBBBGGBBBBBB#B#######&&&#&############J^~!7?77!~!!!!!!!
7!!!!!!!!!!~?B#GPPP555YYJJJJ?????JJYGPJJJJPGGB#&&&&&&&&#####&&&##&&&&&&&&#####BB#&&&&GYYYY555PGB##BBBBBB#########&&&&&&&&###BB#######5~~~~~!!!!!!!!!!!
77!!!!!!!!!!~Y#BGPPP55YYJJJJJJJ?JYPGPYJ???JG####BBBB##&&&&&&&&&&&&&&&&#BGGGGB##&&&&&&BYY5555Y55PGBB##############&&&&&&&&&###BB######P~~~!!!!!!!!!!!!!
77!!!!!!!!!!~7BBBGPPPP55YYJJYYYJY5PPYJ???JJJB&&&&&&&&#BBGBBBBGGPPPPPY???7JJY5PPPPGGGG5JY555YYYYY5PGB##########&#&&&&&&&&&&###B######BP~~!!!!!!!!!!!!!!
77!!!!!!!!!!~?BBBBGGGPP555YYYYY55GGPYJJYJJJJJPBBBGP55JJJ?7??!!~~!!77!!7??JJYJJJJJJJJJJY5PP5Y555Y555GGBBB#######&&&&&&&&&&&&##B#######G!~!!!!!!!!!!!!!!
77!!!!!!!!!!!!GBBBBBGGPPPP555PPPBBGYJJJYJJJ??????????JJJ?77?77???7J?7777JJYYJJJJJJJJYY5PPP555PPGPY5PPGGBBB##B#####&&&&#&&####B#######G!!!!!!!!!!!!!!!!
77!!!!!!!!!!!~7PBBBBBBGGGPPPPPGBBPYJJJJJJYJ??J???JJ??JJJ??777??JJ?????7?JJYYYYYYJYY555PPPPPPP55PGPY5PPGBBBBBBGBB##&&#####&###BB######P!!!!!!!!!!!!!!!!
7!!!!!!!!!!!!!~~?B#BBBBBGGGPGBBBG5JJJJJYY5YYYJJJJJJJYJJ???77777????????JJYYYYYYYY55PPPPPPPPGGPPPPGP5PGGGBBBGGPGBB####BB######B#######P!!!!!!!!!!!!!!!!
77!!!!!!!!!!!!!~~Y####BBGGGPBBBG5YJJYYYY5555YYYYYJJJJYJ?J?7!7!77777!77?YYYYY555555PPGPPPGGGGGGPPPPP55GGBB#BPPPBB####BGB######B#######P!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!~!P#####BGBBBBBG5YYY55555P55555YYYJJ?JJJ??7!!!!!!~~~77???JJY55YY55PPPGGGGBBBBGGP55P55PGGB#G5PGBB####BBB###&#BB#######5!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!~7B####BBBBBGBG555Y5PPPPP555555JJYY555PPPYJ?J7!~!?JYP5PPPPPPPPPPPGPGGBGBBBB#B#BBP55PPPGB&P5GGB####BGB###&&#B########Y!!!!!!!!!!!!!!!!
7!!!!!!!!!!!!!!!!!~5&###BB#BGGBP555555PGGGPP555PPGGGBBBBGBBGGGBG5PBBBBB#########&&########&&&&&#BPPPP55G#&55GBB##&#BBB##&&&#B#####&##J!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!~?####BBBBPPBG55YYYY5PGGGGBBBBB############B#&&###&&&&&&&&&&&&&&&&&&&&&&####G55555Y5PB&#5PB###&#BGBB#&&&#BB####&&&#?!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!~!G##BBBBGPPBG55YYYYPGB##&&&&&&&&####BBBBBB#####BBGP5YYY5555PPPPPPPPPGBBBBPYJ?JJY55PG#&G5G#&&&&#GGB#&&&##B#####&&&B7!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!~J&##BBBGPPGG555YY5GB#BGGGBBBGP5PP5YYJ7?777?777!7!!!??JYYY55PPPGGGGBBBGG5J?JJJY55PPB&#5G#&&&&#BGBB#&&&#B######&&&G!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!~~P&#BBBBGPGBP55555PPPPP55PPPP55PP555YJJ7????7!!777?YY5PPGGBB####BBBBG5YYJJYY555PGB&#PG#&&&&&#GB##&&&#B#########&5!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!~7###BBBBGGBG5Y555YYY5PGGGGGGGPPPPPP55YJJYJYJJY5PGGGB########BBGGGPP5YY5PPPPPPPGB##PG#&&&&&#BB##&&&#BB######&##&Y~!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!~~?###BBBGGBBP55555YJJY5GGGGGGBGGGGGGGBBBBBBB##&#######BGGBBGPPPPPPP5PPGGGP5PPGGB#GG#&&&&&#BB##&&##BBB########&#?~!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!~~~~J##BBBBGGBGP55555YJJYPGGGGGGGGBGBBBB#####B##BBGGGGPP5PPPPPP55P5GGGBBBGGPPGBBBBBB#&&&&&##B##&&##BBB#######&&&#7!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!~~~^?##BBBBBGGGP55555YYY5PPPGGGGPPPPPGGGGGGPPPPPP5555555PPPPPPPPGGGGBGGGGGGGBBBBGB#&&&&#######&#BBGB########&&&G!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!~~~~7B#BBBBBBGGP555555P5P5PPPPPPPP5PPP55YY5555555555555PPGGPGGGGGGGGGGGGGGGBBGB##&#&&######&&#BGGB#########&&&P~^~!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!~~~!G&#BB#BBBGG5555PPPGPPPPPP5PPPPPP55YY55Y555555PPPPPPPPPPPGPPPPPGGGGPGGBBBB#&&#&######&&#GGGB##########&&#G7^:~!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!~~~P&#BBBBBBGGGP55PGPGGGPPP55PPPPPPP5Y5YYJJJJJJYYY5YY5PPPP5PPPPGGGGGGGBBBB########BB#&&BGGG###############BY!::^!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!~~5&#BBB#BBBGGPPPPPPPPPPP55PP5YYJ??777!!!!!77??JJYYYY5Y5555PGGGBBBGGGGB######BBBB###BGGB###############BBG?^::^~!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!~~J##BBBBBBBGGGPPPPPP55555Y5JJJJ???77?7777???JJJJYY5555555GGGBGBGGBBBB#####BBB###BGPGB################BB#Y~:::^~!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~?B&#BBBBBBGGPPGGPP55YYYYYYJJJJ????JJ???JJJYYYY55555PPPGGGBGGBGGBB###########BGGGGB#################BB#Y~^::^^^!!!!!!!!!
!!!!!!!!!!!!!!!!!!777777777!!^:.~B##BBBBBBGGGGGGPP55555555YY555YY5Y5Y5555555555PPPPPGGGBBGBBGBB##B######BBGGGGBB###############B##BB#5!^:^^^^^~!!!!!!!
!!!!!!!!!!!!!!!!7777777!!!~^:....J####BBBBGGGGGPPPP5PPP55PPPP5P5PPPPPP5555555PGGPPPGGGBBGBBB###BBB####BBGGGGBBB################B##BB&G!^:^^^^^^~!!!!!!
!!!!!!!!!!!!!!!!7!~^^^^:::.......!##BB##BBGGGBGGGGGPPGPPPPPPGGGGPPGGGGGGGGGGGGGGBBBBBB#BB####BBBBBBBBBGGGGBBB##################B##BB&P!^^^^^^^^:^~!!!!
!!!!!!!!!!!!7JY?~:.::::..........^G&#GPGBBBPPGGGBBGGGGGGGPGPGGGBBBBGGGGGBBBBBBBBBBB##B#####BGGGBBBBBGGGBBBBB##################BB##B#&Y~^^^^^^^^^:::^~~
!!!!!!!!?J5G#G?^.::^:..........:..J&&&#P55PGPY5GBBBBBBBBBBBGBBBBBBGBBBBBBBBBBBBB##B####BBBGGGBBBBBBBBBBBBBB#######################B##7~^^^^^^^^^^^::::
!7?J55PGB###Y^..:^^:..........::..~B#&&&#G5555YJPBBBBBBBBBBBBBBBBBBBBBBBBBGBBBBBBB#BBBGGGGBBBBBBBBBBBBB############################&P!^^^^^^^^^^^^^^^:
GB####BBBB#?...:^^:...........::...J##&&&&#G5P55JJ5GB###B##BBBGGGGGGGGGGGGGGGGBGBBBBGGBBBBBBBBBBBBB##############################B##?~^^^^^^^^^^^^^^^^
#BBBBBBBB#?...:^^:............:::..:5#B#&&&&#G5PPYJJY5GBBBBBGGGGGGGGGGGGGGGGBGGBBBBBBBBBBBBBBBB#################################B#&Y!~^^~^^^^^^^^^^^^^
BBBBBBBB#5:..::^^:............:::...^5BB#&&&&&BP5PPYYJY5PPGGGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB#######################################5!~^^~~~^^^^^^^^^^^^
BBBBBBB#G^...:^^:.............::::...:YBBB#&&&&&#GP55YY55PGGBBBBBBB#BBBBBBBBBBBBBBBBBBB########################################&&P!~^^~~~~^^^^^^^^^^^^
BBBBBB##7...:^^^..............:::::....7PGB#&&&#&&##BGP5555PGGGBBBBBBBBBBBBBB###BB###########################################&&&5!~^^~~~~~^^^^^^^^^^^^
BBBBB##5:..::^^:..............:::::.....^YGGB#&&########BBGGGGGGGGBBBBBBBBBB################################################&&#Y!~^^~~~~~^^^^^^^^^^^^^
BBBB###7...:^^^:..............::::::.....:?PPG##&###############BBBBBBBB####################################################&#Y!~^^~~~~~^^^^^^^^^^^^^:
GBBB##G^...:^^:.................:::::......!PPPGB#########################################################################&&GJ~^^:^^^^~^^^^^^^^^::::::
GBB###Y...:^^^:.................::::::......^5G5PGB#####################################################################&&#5~::..:::^^^^^:::::::......
BBB###7...:^^^:.................:::::::......:JBP55PGB######################################################BB########&&&G!:.....::::::::.............
BBBB#B~...:^^^:...................::::::.......7GBP555GB#####################################################BBB#####&&#J:......:::::::...............
BBBB#G:...:^^^:...................::::::::......~G#GP555PG############################################BBBBBBBBB#####&&G~........::::::................
BBBB#5:...:^^^:.....................:::::::......^5#BGP555PB########################################BBBBBBBBBBB####&&5:.........::::..................
BBBB#5....:^^^:......................::::::::.....:JBBGPPPPPGB###############################BBBBBBBBBBBBBBB#####&&#?............:::..................
BBBB#5....:^^^:........................::::::::.....!YGBBGPPPGB#&&&#################BBBBBBBBBBBBBBB###&&######&&&&G~.........:::::::::...........:::::
BBBB#P:...:^^^:.........................:::::::.......^!?YGBBB##&&&&&########BBBBBBBBBBBBBB#######&&#GYYP#&&&&&&&P:.......::::::::::::::::::::::::::::
BBBB#B^...:^^^:............................::::...........:!!7!!!J#&&&#########BBBBBBBBBB#######&GY?!~!7!!7Y5Y!!~:......:::^:^^^::::::::::::::::::::::
BBBB#B~...:^^^::....................................:^!?J?!~~~~~~^~?G&&&&###########B#########&G?~!7JY55P5J7~^:...:.:::^^^^^^^^^^:::::::::::::::::::::
BBBB##!....:^^^:..................................^?PBGGP5J?777!!!~^^?G&&&&################&&#J~!JYY55555PPPPGPJ!^^^~~~~~~^^^^^:::::::::::::::::::::.:
*/
interface IBEP20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8);

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory);

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory);

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
  // Empty internal constructor, to prevent people from mistakenly deploying
  // an instance of this contract, which should be used via inheritance.
  constructor () { }

  function _msgSender() internal view returns (address) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev Initializes the contract setting the deployer as the initial owner.
   */
  constructor ()  {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract BEP20Token is Context, IBEP20, Ownable {
  using SafeMath for uint256;

  mapping (address => uint256) private _balances;

  mapping (address => mapping (address => uint256)) private _allowances;

  uint256 private _totalSupply;
  uint8 private _decimals;
  string private _symbol;
  string private _name;

  constructor()  {
    _name = "NIGGER";
    _symbol = "NGGR";
    _decimals = 18;
    _totalSupply = 1000000;
    _balances[msg.sender] = _totalSupply;

    emit Transfer(address(0), msg.sender, _totalSupply);
  }

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address) {
    return owner();
  }

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory) {
    return _symbol;
  }

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory) {
    return _name;
  }

  /**
   * @dev See {BEP20-totalSupply}.
   */
  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See {BEP20-balanceOf}.
   */
  function balanceOf(address account) external view returns (uint256) {
    return _balances[account];
  }

  /**
   * @dev See {BEP20-transfer}.
   *
   * Requirements:
   *
   * - `recipient` cannot be the zero address.
   * - the caller must have a balance of at least `amount`.
   */
  function transfer(address recipient, uint256 amount) external returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  /**
   * @dev See {BEP20-allowance}.
   */
  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }

  /**
   * @dev See {BEP20-approve}.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 amount) external returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  /**
   * @dev See {BEP20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {BEP20};
   *
   * Requirements:
   * - `sender` and `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   * - the caller must have allowance for `sender`'s tokens of at least
   * `amount`.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
    return true;
  }

  /**
   * @dev Atomically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

  /**
   * @dev Atomically decreases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   * - `spender` must have allowance for the caller of at least
   * `subtractedValue`.
   */
  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
    return true;
  }

  /**
   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
   * the total supply.
   *
   * Requirements
   *
   * - `msg.sender` must be the token owner
   */
  function mint(uint256 amount) public onlyOwner returns (bool) {
    _mint(_msgSender(), amount);
    return true;
  }

  /**
   * @dev Moves tokens `amount` from `sender` to `recipient`.
   *
   * This is internal function is equivalent to {transfer}, and can be used to
   * e.g. implement automatic token fees, slashing mechanisms, etc.
   *
   * Emits a {Transfer} event.
   *
   * Requirements:
   *
   * - `sender` cannot be the zero address.
   * - `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   */
  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "BEP20: transfer from the zero address");
    require(recipient != address(0), "BEP20: transfer to the zero address");

    _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

  /** @dev Creates `amount` tokens and assigns them to `account`, increasing
   * the total supply.
   *
   * Emits a {Transfer} event with `from` set to the zero address.
   *
   * Requirements
   *
   * - `to` cannot be the zero address.
   */
  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: mint to the zero address");

    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`, reducing the
   * total supply.
   *
   * Emits a {Transfer} event with `to` set to the zero address.
   *
   * Requirements
   *
   * - `account` cannot be the zero address.
   * - `account` must have at least `amount` tokens.
   */
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: burn from the zero address");

    _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  /**
   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
   *
   * This is internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spender` cannot be the zero address.
   */
  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "BEP20: approve from the zero address");
    require(spender != address(0), "BEP20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
   * from the caller's allowance.
   *
   * See {_burn} and {_approve}.
   */
  function _burnFrom(address account, uint256 amount) internal {
    _burn(account, amount);
    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "BEP20: burn amount exceeds allowance"));
  }
}