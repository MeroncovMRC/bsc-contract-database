// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);

    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    function div(int256 a, int256 b) internal pure returns (int256) {
        require(b != -1 || a != MIN_INT256);

        return a / b;
    }

    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? -a : a;
    }
}

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

interface IPancakeFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IPancakeRouter {
    function WETH() external pure returns (address);
    function factory() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    using SafeMathInt for int256;
    using SafeMath for uint256;

    uint256 private constant MAX_SUPPLY = 1000000000 * (10 ** 18);

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        _transfer(from, to, amount);
        _approve(from, _msgSender(), _allowances[from][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        require(totalSupply().add(amount) <= MAX_SUPPLY, "ERC20: total supply exceeds maximum supply");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        require(_balances[account] >= amount, "ERC20: burn amount exceeds balance");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract TestToken is ERC20, Ownable {
    using SafeMathInt for int256;
    using SafeMath for uint256;

    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;
    uint256 private constant MAX_SUPPLY = 1000000000 * (10 ** 18);
    uint256 private constant INITIAL_SUPPLY = 1000000 * (10 ** 18);
    string private constant NAME = "Test";
    string private constant SYMBOL = "TEST";

    address public teamWallet = 0xbEbc0317F3C92b1CE79d22746828B57a189A1242;
    address public marketingWallet = 0xbEbc0317F3C92b1CE79d22746828B57a189A1242;
    address public treasuryWallet = 0xbEbc0317F3C92b1CE79d22746828B57a189A1242;

    uint256 public buyFeeTotal = 800; // 8%
    uint256 public sellFeeTotal = 1000; // 10%
    uint256 public teamFeePercent = 5; // 0.5%
    uint256 public marketingFeePercent = 10; // 1%
    uint256 public liquidityFeePercent = 10; // 1%
    uint256 public burnFeePercent = 25; // 2.5%
    uint256 public treasuryFeePercent = 30; // 3%
    uint256 public liquidityFeePercentSell = 20; // 2%
    uint256 public treasuryFeePercentSell = 40; // 4%

    bool public autoStakingEnabled = false;

    mapping(address => bool) public feeExempt;
    mapping(address => bool) public stakingExempt;

    IPancakeRouter public pancakeRouter;
    address public pancakePair;

    constructor() ERC20(NAME, SYMBOL) {
        _mint(msg.sender, INITIAL_SUPPLY);

        IPancakeRouter _pancakeRouter = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // PancakeSwap Router V2 address
        pancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());
        pancakeRouter = _pancakeRouter;
    }

function _transfer(address sender, address recipient, uint256 amount) internal override {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");

    uint256 feePercent;
    uint256 transferAmount;

    if (recipient == pancakePair) {
        feePercent = sellFeeTotal;
        transferAmount = amount.sub(
            amount.mul(liquidityFeePercentSell).div(1000)).sub(
            amount.mul(treasuryFeePercentSell).div(1000));
    } else {
        feePercent = buyFeeTotal;
        transferAmount = amount.sub(
            amount.mul(liquidityFeePercent).div(1000)).sub(
            amount.mul(burnFeePercent).div(1000)).sub(
            amount.mul(treasuryFeePercent).div(1000));
    }

    uint256 feeAmount = amount.mul(feePercent).div(10000);

    _burn(sender, amount.mul(burnFeePercent).div(10000));
    _transfer(sender, BURN_ADDRESS, amount.mul(burnFeePercent).div(10000));

    payable(marketingWallet).transfer(address(this).balance.mul(marketingFeePercent).div(1000));

    payable(treasuryWallet).transfer(address(this).balance.mul(treasuryFeePercent).div(10000));

    _transfer(sender, teamWallet, amount.mul(teamFeePercent).div(1000));

    _transfer(sender, address(this), amount.mul(liquidityFeePercent).div(1000));

    amount = amount.sub(feeAmount);

    super._transfer(sender, recipient, amount);
}

    function _swapAndLiquify(uint256 amount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pancakeRouter.WETH();

        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amount,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 ethBalance = address(this).balance;

        if (ethBalance > 0) {
            pancakeRouter.addLiquidityETH{value: ethBalance}(
                address(this),
                amount,
                0,
                0,
                owner(),
                block.timestamp
            );
        }
    }

    function isSell(address recipient) private view returns (bool) {
        return recipient == pancakePair;
    }

    function setAutoStakingEnabled(bool enabled) external onlyOwner {
        autoStakingEnabled = enabled;
    }

    function setFeeExempt(address account, bool exempt) external onlyOwner {
        feeExempt[account] = exempt;
    }

    function setStakingExempt(address account, bool exempt) external onlyOwner {
        stakingExempt[account] = exempt;
    }

    function setBuyFee(uint256 fee) external onlyOwner {
        require(fee <= 1000, "Buy fee must not exceed 100%");
        buyFeeTotal = fee;
    }

    function setSellFee(uint256 fee) external onlyOwner {
        require(fee <= 1000, "Sell fee must not exceed 100%");
        sellFeeTotal = fee;
    }

    function setTeamFeePercent(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Team fee percent must not exceed 100%");
        teamFeePercent = percent;
    }

    function setMarketingFeePercent(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Marketing fee percent must not exceed 100%");
        marketingFeePercent = percent;
    }

    function setLiquidityFeePercent(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Liquidity fee percent must not exceed 100%");
        liquidityFeePercent = percent;
    }

    function setBurnFeePercent(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Burn fee percent must not exceed 100%");
        burnFeePercent = percent;
    }

    function setTreasuryFeePercent(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Treasury fee percent must not exceed 100%");
        treasuryFeePercent = percent;
    }

    function setLiquidityFeePercentSell(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Liquidity fee percent on sell must not exceed 100%");
        liquidityFeePercentSell = percent;
    }

    function setTreasuryFeePercentSell(uint256 percent) external onlyOwner {
        require(percent <= 1000, "Treasury fee percent on sell must not exceed 100%");
        treasuryFeePercentSell = percent;
    }

    function setTeamWallet(address wallet) external onlyOwner {
        require(wallet != address(0), "Invalid wallet address");
        teamWallet = wallet;
    }

    function setMarketingWallet(address wallet) external onlyOwner {
        require(wallet != address(0), "Invalid wallet address");
        marketingWallet = wallet;
    }

    function setTreasuryWallet(address wallet) external onlyOwner {
        require(wallet != address(0), "Invalid wallet address");
        treasuryWallet = wallet;
    }

    function withdrawStuckTokens(address tokenAddress, uint256 amount) external onlyOwner {
        IERC20(tokenAddress).transfer(owner(), amount);
    }

    function withdrawStuckETH(uint256 amount) external onlyOwner {
        payable(owner()).transfer(amount);
    }
}