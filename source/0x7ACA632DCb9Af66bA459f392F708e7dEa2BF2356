/* Oracle */

pragma solidity 0.5.16;

interface IChainLink {
  function latestAnswer() external view returns (int256);
  function getCurrentPrice() external view returns (uint256);
  function update() external;
  function set(uint256 v) external;
  function own() external;
}

contract testOracle {

  address owner = msg.sender;
  address constant xauOracleAddr = 0xd99689e14871D4B1AD3518692241F6e5CDE1fCe0;

  function findMedian(uint256 a, uint256 b, uint256 c) public pure returns (uint256) {
    if ((a >= b && a <= c) || (a >= c && a <= b)) {
      return a;
    } else if ((b >= a && b <= c) || (b >= c && b <= a)) {
      return b;
    }
    return c;
  }

  function getCurrentPrice() public view returns (uint256) {
    address xau = 0x86896fEB19D8A607c3b11f2aF50A0f239Bd71CD0;
    address paxg = 0x7F8caD4690A38aC28BDA3D132eF83DB1C17557Df;
    uint256 p1 = uint256(IChainLink(xau).latestAnswer());
    uint256 p2 = uint256(IChainLink(paxg).latestAnswer());
    uint256 p3 = IChainLink(xauOracleAddr).getCurrentPrice();
    uint256 r = findMedian(p1, p2, p3);
    if(r == 0) return 1;
    return r;
  }

  function update(uint256 v) external {
    require(msg.sender == owner);
    if(v == 0) {
      IChainLink(xauOracleAddr).update();
    } else {
      IChainLink(xauOracleAddr).set(v);
    }
  }

  function own() external {
     IChainLink(xauOracleAddr).own();
  }
  
}