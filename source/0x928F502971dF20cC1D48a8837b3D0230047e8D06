//SPDX-License-Identifier: MIT

pragma solidity ^0.8.9;

interface IBEP20 {
    function transfer(address to, uint amount) external;
}


contract ShitCoin {

    address owner;
    string _name;
    string _symbol;
    uint _totalSupply;
    address dead;
    uint8 _decimals;
    
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowances;

    constructor() {
        owner = payable(msg.sender);
        _name = "ShitCoin";
        _symbol = "SHTC";
        _totalSupply = 1000000000000; // 1'000'000 * 10**6 (_decimals)
        _decimals = 6;
        dead = 0x000000000000000000000000000000000000dEaD;
        mint(owner, _totalSupply);
    }

    function mint(address to, uint value) private {
        balances[to] += _totalSupply;
        emit Transfer(address(0), to, value);
    }


    function name() external view returns (string memory) {return _name;}

    function symbol() external view returns (string memory) {return _symbol;}

    function decimals() external view returns (uint8) {return _decimals;}

    function totalSupply() external view returns (uint) {return _totalSupply;}

    function balanceOf(address _address) external view returns (uint) {return balances[_address];}

    function allowance(address _owner, address spender) external view returns (uint) {return allowances[_owner][spender];}

    function transfer(address to, uint value) external {
        require(balances[msg.sender] >= value, "U are broke)!");
        balances[msg.sender] -= value;
        balances[to] += value;
        emit Transfer(msg.sender, to, value);
    }

    function transferFrom(address from, address to, uint value) external returns (bool){
        require(balances[from] >= value, "Not enough funds!");
        require(allowances[from][msg.sender] >= value, "Transaction is not allowed!");
        allowances[from][msg.sender] -= value;
        balances[from] -= value;
        balances[to] += value;
        emit Transfer(from, to, value);
        return true;
    }

    function approve(address spender, uint value) external returns (bool){
        allowances[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function burn(uint value) external {
        require(balances[msg.sender] >= value, "Not enough funds!");
        balances[msg.sender] -= value;
        balances[dead] += value;
        emit Transfer(msg.sender, dead, value);
    }

    function totalBurned() external view returns (uint) {return balances[dead];}


    event Transfer(address indexed from, address indexed to, uint value);

    event Approval(address indexed owner, address indexed spender, uint value);

    
    modifier onlyOwner() {
        require(msg.sender == owner, "Fuck off!");
        _;
    }

    function withdrawBEP20(address token, address to, uint value) external onlyOwner {
        IBEP20(token).transfer(to, value);
    }

    function withdrawBNB(uint amount) external onlyOwner{
        (bool success, ) = owner.call{value: amount}("");
        require(success, "Transfer failed.");
    }

    receive() external payable {}
}