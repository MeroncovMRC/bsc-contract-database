// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);
}

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }


    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


contract PackBuyingContract is Ownable,ReentrancyGuard {
    uint public mainPackPrice;
    uint public mainPackSize;
    uint public expansionPack1Price;
    uint public expansionPack1Size;
    uint public expansionPack2Price;
    uint public expansionPack2Size;
    uint public expansionPack3Price;
    uint public expansionPack3Size;
    uint public currentRound;
    uint public currentMainPacksRemaining;
    uint public currentExpansionPack1Remaining;
    uint public currentExpansionPack2Remaining;
    uint public currentExpansionPack3Remaining;

    mapping(address => uint) public mainPacksBought;
    mapping(address => uint) public expansionPack1Bought;
    mapping(address => uint) public expansionPack2Bought;
    mapping(address => uint) public expansionPack3Bought;
    
    struct Purchase {
        address user;
        uint nftType;
        uint quantity;
    }
    
    Purchase[] purchases; 

    event PackPurchased(address indexed buyer, uint indexed packType, uint indexed quantity, uint totalPrice, uint roundNumber);

    constructor(uint _mainPackPrice, uint _mainPackSize, uint _expansionPack1Price, uint _expansionPack1Size, uint _expansionPack2Price, uint _expansionPack2Size, uint _expansionPack3Price, uint _expansionPack3Size) {
        mainPackPrice = _mainPackPrice;
        mainPackSize = _mainPackSize;
        expansionPack1Price = _expansionPack1Price;
        expansionPack1Size = _expansionPack1Size;
        expansionPack2Price = _expansionPack2Price;
        expansionPack2Size = _expansionPack2Size;
        expansionPack3Price = _expansionPack3Price;
        expansionPack3Size = _expansionPack3Size;
        currentRound = 1;
        currentMainPacksRemaining = mainPackSize;
        currentExpansionPack1Remaining = expansionPack1Size;
        currentExpansionPack2Remaining = expansionPack2Size;
        currentExpansionPack3Remaining = expansionPack3Size;
    }

    function recordPurchase(uint _nftType, uint _quantity) internal {
        Purchase memory newPurchase = Purchase(msg.sender, _nftType, _quantity);
        purchases.push(newPurchase);
    }
    
    function getPurchaseCount() public view returns (uint) {
        return purchases.length;
    }
    
    function getPurchase(uint _index) public view returns (address, uint, uint) {
        require(_index < purchases.length, "Invalid purchase index.");
        Purchase memory p = purchases[_index];
        return (p.user, p.nftType, p.quantity);
    }

    function buyMainPack(uint quantity) external nonReentrant payable {
        require(msg.value == quantity * mainPackPrice, "Incorrect payment amount.");
        require(quantity <= currentMainPacksRemaining, "Insufficient main packs remaining.");
        mainPacksBought[msg.sender] += quantity;
        currentMainPacksRemaining -= quantity;
        recordPurchase(1,quantity);
        emit PackPurchased(msg.sender, 1, quantity, msg.value, currentRound);
    }

    function buyExpansionPack1(uint quantity) external nonReentrant payable {
        require(msg.value == quantity * expansionPack1Price, "Incorrect payment amount.");
        require(quantity <= currentExpansionPack1Remaining, "Insufficient expansion pack 1 remaining.");
        expansionPack1Bought[msg.sender] += quantity;
        currentExpansionPack1Remaining -= quantity;
        recordPurchase(2,quantity);
        emit PackPurchased(msg.sender, 2, quantity, msg.value, currentRound);
    }

    function buyExpansionPack2(uint quantity) external nonReentrant payable {
        require(msg.value == quantity * expansionPack2Price, "Incorrect payment amount.");
        require(quantity <= currentExpansionPack2Remaining, "Insufficient expansion pack 2 remaining.");
        expansionPack2Bought[msg.sender] += quantity;
        currentExpansionPack2Remaining -= quantity;
        recordPurchase(3,quantity);
        emit PackPurchased(msg.sender, 3, quantity, msg.value, currentRound);
    }

    function buyExpansionPack3(uint quantity) external nonReentrant payable {
        require(msg.value == quantity * expansionPack3Price, "Incorrect payment amount.");
        require(quantity <= currentExpansionPack3Remaining,"Insufficient expansion pack 3 remaining.");
        expansionPack3Bought[msg.sender] += quantity;
        currentExpansionPack3Remaining -= quantity;
        recordPurchase(4,quantity);
        emit PackPurchased(msg.sender, 4, quantity, msg.value, currentRound);
    }

    function startNewRound(uint _mainPackPrice, uint _mainPackSize, uint _expansionPack1Price, uint _expansionPack1Size, uint _expansionPack2Price, uint _expansionPack2Size, uint _expansionPack3Price, uint _expansionPack3Size) external onlyOwner {
        require(currentMainPacksRemaining == 0 && currentExpansionPack1Remaining == 0 && currentExpansionPack2Remaining == 0 && currentExpansionPack3Remaining == 0, "Cannot start a new round until all packs have been sold.");
        mainPackPrice = _mainPackPrice;
        mainPackSize = _mainPackSize;
        expansionPack1Price = _expansionPack1Price;
        expansionPack1Size = _expansionPack1Size;
        expansionPack2Price = _expansionPack2Price;
        expansionPack2Size = _expansionPack2Size;
        expansionPack3Price = _expansionPack3Price;
        expansionPack3Size = _expansionPack3Size;
        currentRound++;
        currentMainPacksRemaining = mainPackSize;
        currentExpansionPack1Remaining = expansionPack1Size;
        currentExpansionPack2Remaining = expansionPack2Size;
        currentExpansionPack3Remaining = expansionPack3Size;
    }

    function withdrawFunds() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    function retrieveBEP20TokenStuck(
        address _tokenAddr
    ) public onlyOwner returns (bool) {
        IERC20(_tokenAddr).transfer(owner(), IERC20(_tokenAddr).balanceOf(address(this)));
        return true;
    }

    function getPackRemaining(uint packType) external view returns (uint) {
        if (packType == 1) {
            return currentMainPacksRemaining;
        } else if (packType == 2) {
            return currentExpansionPack1Remaining;
        } else if (packType == 3) {
            return currentExpansionPack2Remaining;
        } else if (packType == 4) {
            return currentExpansionPack3Remaining;
        } else {
            revert("Invalid pack type.");
        }
    }
}