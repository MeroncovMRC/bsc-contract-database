// SPDX-License-Identifier: MIT
pragma solidity 0.8.9;

interface BEP20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function burn(uint256 value) external;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract RewardContract{
    address owner;
    BEP20 private groToken;
    bool initialize;
    constructor(BEP20 _groToken) {        
        groToken=_groToken;
    }

    function initializer(address _owner) public{
        require(!initialize,"Already Initialize!");
        initialize=true;
        owner=_owner;
    }

    function transferToken(address user, uint256 amount) public returns(bool){
        require(msg.sender==owner, "Only Owner!");
        return(groToken.transfer(user,amount));        
    }
}