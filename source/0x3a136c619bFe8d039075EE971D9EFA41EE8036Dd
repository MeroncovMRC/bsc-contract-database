// SPDX-License-Identifier: MIT

/*

SAITAMA BSC

? 2% Burn
? 2% Liquidity
? Anti-whale

*/

pragma solidity ^0.8.0;

// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/token/ERC20/IERC20.sol 
interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address account) external view returns (uint256);
  function transfer(address recipient, uint256 amount) external returns (bool);
  function allowance(address owner, address spender) external view returns (uint256);
  function approve(address spender, uint256 amount) external returns (bool);
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/utils/Context.sol 
abstract contract Context {
  function _msgSender() internal view virtual returns (address) { return msg.sender; }
  function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }
}

// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/access/Ownable.sol 
abstract contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  
  constructor() { _setOwner(_msgSender()); }

  function owner() public view virtual returns (address) { return _owner; }

  modifier onlyOwner() {
    require(owner() == _msgSender(), "Ownable: caller is not the owner");
    _;
  }
  function renounceOwnership() public virtual onlyOwner { _setOwner(address(0)); }
  
  function transferOwnership(address newOwner) public virtual onlyOwner {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    _setOwner(newOwner);
  }

  function _setOwner(address newOwner) private {
    address oldOwner = _owner;
    _owner = newOwner;
    emit OwnershipTransferred(oldOwner, newOwner);
  }
}

// adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/832ff3b9f94e0f100f3583806c315e500dd9a57e/contracts/token/ERC20/ERC20.sol
contract BEP20 is Context, IBEP20 {
  mapping(address => uint256) private _balances;
  mapping(address => mapping(address => uint256)) private _allowances;

  uint256 private _totalSupply;

  function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }
  
  function balanceOf(address account) public view virtual override returns (uint256) { 
    return _balances[account]; 
  }

  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender) public view virtual override returns (uint256) {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount) public virtual override returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
    _transfer(sender, recipient, amount);

    uint256 currentAllowance = _allowances[sender][_msgSender()];
    require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance");
    unchecked {
      _approve(sender, _msgSender(), currentAllowance - amount);
    }

    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
    uint256 currentAllowance = _allowances[_msgSender()][spender];
    require(currentAllowance >= subtractedValue, "BEP20: decreased allowance below zero");
    unchecked {
      _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

    return true;
  }
  
  function _transfer(address sender, address recipient, uint256 amount) internal virtual {
    require(sender != address(0), "BEP20: transfer from the zero address");

    uint256 senderBalance = _balances[sender];
    require(senderBalance >= amount, "BEP20: transfer amount exceeds balance");
    unchecked {
      _balances[sender] = senderBalance - amount;
    }
    _balances[recipient] += amount;

    emit Transfer(sender, recipient, amount);
  }

  function _mint(address account, uint256 amount) internal virtual {
    _totalSupply += amount;
    _balances[account] += amount;
    emit Transfer(address(0), account, amount);
  }

  function _approve(address owner, address spender, uint256 amount) internal virtual {
    require(owner != address(0), "BEP20: approve from the zero address");
    require(spender != address(0), "BEP20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }
}

// https://github.com/Uniswap/uniswap-v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/interfaces/IUniswapV2Pair.sol
interface IUniswapV2Pair {
    function sync() external;
}

contract SAITAMABSC is Ownable, BEP20 {

  // General Info
  string constant _name = 'Saitama BSC';
  string constant _symbol = 'SAITAMA';
  uint8 constant _decimals = 9;
  uint256 constant _initialSupply = 100 *  (10 ** 15) * (10 ** _decimals);
  
  // Anti-whale
  uint256 public maxTxAmount = 0; 
  uint256 constant _minMaxTxAmount = 100 *  (10 ** 12) * (10 ** _decimals);

  // Fees & Inclusions
  uint256 constant burnFee = 2;
  uint256 constant liquidityFee = 2;
  mapping (address => bool) private _isIncludedInFee;

  // Liquidity variables
  address public liquidityTarget = address(0);
  bool public liquidityTargetIsIUniswapV2Pair = false;

  constructor() { 
    super._mint(msg.sender, _initialSupply); 
  }

  function name() public pure returns (string memory) { return _name; }
  function symbol() public pure returns (string memory) { return _symbol; }
  function decimals() public pure returns (uint8) { return _decimals; }

  function sendToLiquidity() public {
    uint256 amount = super.balanceOf(address(this));
    if (amount > 0) {
      super._transfer(address(this), liquidityTarget, amount);
      if (liquidityTargetIsIUniswapV2Pair) {
        IUniswapV2Pair pair = IUniswapV2Pair(liquidityTarget);
        pair.sync();
      }
    }
  }

  function isIncludedInFee(address account) external view returns (bool) {
    return _isIncludedInFee[account];
  }

  function includeInFee(address account) external onlyOwner() {
    require(!_isIncludedInFee[account], "SAITAMA: account is already included");
    _isIncludedInFee[account] = true;
  }

  function excludeFromFee(address account) external onlyOwner() {
    require(_isIncludedInFee[account], "SAITAMA: account is already excluded");
    _isIncludedInFee[account] = false;
  }
  
  function setLiqTarget(address account, bool isIUniswapV2Pair) external onlyOwner() {
    liquidityTarget = account; 
    liquidityTargetIsIUniswapV2Pair = isIUniswapV2Pair;
  }

  function setMaxTxAmount(uint256 trillions) external onlyOwner() {
    uint256 amount = trillions *  (10 ** 12) * (10 ** _decimals);
    require(amount >= _minMaxTxAmount, "SAITAMA: maximum transaction amount too small");
    maxTxAmount = amount; 
  }

  function _getValues(uint256 tAmount) private pure returns (uint256, uint256, uint256) {
    uint256 burnAmount = (tAmount * burnFee) / 100;
    uint256 liquidityAmount = (tAmount * liquidityFee) / 100;
    uint256 transferAmount = (tAmount - burnAmount) - liquidityAmount;
    return (transferAmount, burnAmount, liquidityAmount);
  }
  
  function _transfer(address sender, address recipient, uint256 amount) internal override {
    bool isOwner = false;
    if (sender != owner() && recipient != owner()) { 
      require(amount <= maxTxAmount, "SAITAMA: transfer amount exceeds the maxTxAmount");
    } else {
      isOwner = true;
    }

    if ((_isIncludedInFee[sender] || _isIncludedInFee[recipient]) && !isOwner) {
      (uint256 transferAmount, uint256 burnAmount, uint256 liquidityAmount) = _getValues(amount);
      super._transfer(sender, recipient, transferAmount); 
      super._transfer(sender, address(0), burnAmount); 
      super._transfer(sender, address(this), liquidityAmount);
    } else {
      sendToLiquidity();
      super._transfer(sender, recipient, amount);
    }
  }
}