
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/interfaces/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)

pragma solidity ^0.8.0;

import "../token/ERC20/IERC20.sol";


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)

pragma solidity ^0.8.0;

import "./IERC1155.sol";
import "./IERC1155Receiver.sol";
import "./extensions/IERC1155MetadataURI.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of the basic standard multi-token.
 * See https://eips.ethereum.org/EIPS/eip-1155
 * Originally based on code by Enjin: https://github.com/enjin/erc-1155
 *
 * _Available since v3.1._
 */
contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
    using Address for address;

    // Mapping from token ID to account balances
    mapping(uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {_setURI}.
     */
    constructor(string memory uri_) {
        _setURI(uri_);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC1155).interfaceId ||
            interfaceId == type(IERC1155MetadataURI).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC1155MetadataURI-uri}.
     *
     * This implementation returns the same URI for *all* token types. It relies
     * on the token type ID substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * Clients calling this function must replace the `\{id\}` substring with the
     * actual token type ID.
     */
    function uri(uint256) public view virtual override returns (string memory) {
        return _uri;
    }

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
        require(account != address(0), "ERC1155: address zero is not a valid owner");
        return _balances[id][account];
    }

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)
        public
        view
        virtual
        override
        returns (uint256[] memory)
    {
        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");

        uint256[] memory batchBalances = new uint256[](accounts.length);

        for (uint256 i = 0; i < accounts.length; ++i) {
            batchBalances[i] = balanceOf(accounts[i], ids[i]);
        }

        return batchBalances;
    }

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC1155-isApprovedForAll}.
     */
    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[account][operator];
    }

    /**
     * @dev See {IERC1155-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );
        _safeTransferFrom(from, to, id, amount, data);
    }

    /**
     * @dev See {IERC1155-safeBatchTransferFrom}.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) public virtual override {
        require(
            from == _msgSender() || isApprovedForAll(from, _msgSender()),
            "ERC1155: caller is not token owner or approved"
        );
        _safeBatchTransferFrom(from, to, ids, amounts, data);
    }

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, from, to, ids, amounts, data);

        uint256 fromBalance = _balances[id][from];
        require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
        unchecked {
            _balances[id][from] = fromBalance - amount;
        }
        _balances[id][to] += amount;

        emit TransferSingle(operator, from, to, id, amount);

        _afterTokenTransfer(operator, from, to, ids, amounts, data);

        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _safeBatchTransferFrom(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
        require(to != address(0), "ERC1155: transfer to the zero address");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; ++i) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 fromBalance = _balances[id][from];
            require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
            unchecked {
                _balances[id][from] = fromBalance - amount;
            }
            _balances[id][to] += amount;
        }

        emit TransferBatch(operator, from, to, ids, amounts);

        _afterTokenTransfer(operator, from, to, ids, amounts, data);

        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
    }

    /**
     * @dev Sets a new URI for all token types, by relying on the token type ID
     * substitution mechanism
     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].
     *
     * By this mechanism, any occurrence of the `\{id\}` substring in either the
     * URI or any of the amounts in the JSON file at said URI will be replaced by
     * clients with the token type ID.
     *
     * For example, the `https://token-cdn-domain/\{id\}.json` URI would be
     * interpreted by clients as
     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`
     * for token type ID 0x4cce0.
     *
     * See {uri}.
     *
     * Because these URIs cannot be meaningfully represented by the {URI} event,
     * this function emits no events.
     */
    function _setURI(string memory newuri) internal virtual {
        _uri = newuri;
    }

    /**
     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function _mint(
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: mint to the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);

        _balances[id][to] += amount;
        emit TransferSingle(operator, address(0), to, id, amount);

        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);

        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function _mintBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {
        require(to != address(0), "ERC1155: mint to the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);

        for (uint256 i = 0; i < ids.length; i++) {
            _balances[ids[i]][to] += amounts[i];
        }

        emit TransferBatch(operator, address(0), to, ids, amounts);

        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);

        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
    }

    /**
     * @dev Destroys `amount` tokens of token type `id` from `from`
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `from` must have at least `amount` tokens of token type `id`.
     */
    function _burn(
        address from,
        uint256 id,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC1155: burn from the zero address");

        address operator = _msgSender();
        uint256[] memory ids = _asSingletonArray(id);
        uint256[] memory amounts = _asSingletonArray(amount);

        _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");

        uint256 fromBalance = _balances[id][from];
        require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
        unchecked {
            _balances[id][from] = fromBalance - amount;
        }

        emit TransferSingle(operator, from, address(0), id, amount);

        _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
    }

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     */
    function _burnBatch(
        address from,
        uint256[] memory ids,
        uint256[] memory amounts
    ) internal virtual {
        require(from != address(0), "ERC1155: burn from the zero address");
        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");

        address operator = _msgSender();

        _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");

        for (uint256 i = 0; i < ids.length; i++) {
            uint256 id = ids[i];
            uint256 amount = amounts[i];

            uint256 fromBalance = _balances[id][from];
            require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
            unchecked {
                _balances[id][from] = fromBalance - amount;
            }
        }

        emit TransferBatch(operator, from, address(0), ids, amounts);

        _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC1155: setting approval status for self");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning, as well as batched variants.
     *
     * The same hook is called on both single and batched variants. For single
     * transfers, the length of the `ids` and `amounts` arrays will be 1.
     *
     * Calling conditions (for each `id` and `amount` pair):
     *
     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * of token type `id` will be  transferred to `to`.
     * - When `from` is zero, `amount` tokens of token type `id` will be minted
     * for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
     * will be burned.
     * - `from` and `to` are never both zero.
     * - `ids` and `amounts` have the same, non-zero length.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {}

    /**
     * @dev Hook that is called after any token transfer. This includes minting
     * and burning, as well as batched variants.
     *
     * The same hook is called on both single and batched variants. For single
     * transfers, the length of the `id` and `amount` arrays will be 1.
     *
     * Calling conditions (for each `id` and `amount` pair):
     *
     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * of token type `id` will be  transferred to `to`.
     * - When `from` is zero, `amount` tokens of token type `id` will be minted
     * for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`
     * will be burned.
     * - `from` and `to` are never both zero.
     * - `ids` and `amounts` have the same, non-zero length.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal virtual {}

    function _doSafeTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
                if (response != IERC1155Receiver.onERC1155Received.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non-ERC1155Receiver implementer");
            }
        }
    }

    function _doSafeBatchTransferAcceptanceCheck(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) private {
        if (to.isContract()) {
            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (
                bytes4 response
            ) {
                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
                    revert("ERC1155: ERC1155Receiver rejected tokens");
                }
            } catch Error(string memory reason) {
                revert(reason);
            } catch {
                revert("ERC1155: transfer to non-ERC1155Receiver implementer");
            }
        }
    }

    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
        uint256[] memory array = new uint256[](1);
        array[0] = element;

        return array;
    }
}


// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)

pragma solidity ^0.8.0;

import "../IERC1155.sol";

/**
 * @dev Interface of the optional ERC1155MetadataExtension interface, as defined
 * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155MetadataURI is IERC1155 {
    /**
     * @dev Returns the URI for token type `id`.
     *
     * If the `\{id\}` substring is present in the URI, it must be replaced by
     * clients with the actual token type ID.
     */
    function uri(uint256 id) external view returns (string memory);
}


// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC1155 compliant contract, as defined in the
 * https://eips.ethereum.org/EIPS/eip-1155[EIP].
 *
 * _Available since v3.1._
 */
interface IERC1155 is IERC165 {
    /**
     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.
     */
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);

    /**
     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all
     * transfers.
     */
    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    /**
     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to
     * `approved`.
     */
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);

    /**
     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.
     *
     * If an {URI} event was emitted for `id`, the standard
     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value
     * returned by {IERC1155MetadataURI-uri}.
     */
    event URI(string value, uint256 indexed id);

    /**
     * @dev Returns the amount of tokens of token type `id` owned by `account`.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function balanceOf(address account, uint256 id) external view returns (uint256);

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)
        external
        view
        returns (uint256[] memory);

    /**
     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,
     *
     * Emits an {ApprovalForAll} event.
     *
     * Requirements:
     *
     * - `operator` cannot be the caller.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.
     *
     * See {setApprovalForAll}.
     */
    function isApprovedForAll(address account, address operator) external view returns (bool);

    /**
     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.
     *
     * Emits a {TransferSingle} event.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.
     * - `from` must have a balance of tokens of type `id` of at least `amount`.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the
     * acceptance magic value.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes calldata data
    ) external;

    /**
     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.
     *
     * Emits a {TransferBatch} event.
     *
     * Requirements:
     *
     * - `ids` and `amounts` must have the same length.
     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the
     * acceptance magic value.
     */
    function safeBatchTransferFrom(
        address from,
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) external;
}


// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev _Available since v3.1._
 */
interface IERC1155Receiver is IERC165 {
    /**
     * @dev Handles the receipt of a single ERC1155 token type. This function is
     * called at the end of a `safeTransferFrom` after the balance has been updated.
     *
     * NOTE: To accept the transfer, this must return
     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * (i.e. 0xf23a6e61, or its own function selector).
     *
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param value The amount of tokens being transferred
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
     */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
     * @dev Handles the receipt of a multiple ERC1155 token types. This function
     * is called at the end of a `safeBatchTransferFrom` after the balances have
     * been updated.
     *
     * NOTE: To accept the transfer(s), this must return
     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
     * (i.e. 0xbc197c81, or its own function selector).
     *
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
     */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)

pragma solidity ^0.8.0;

import "./ERC1155Receiver.sol";

/**
 * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.
 *
 * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be
 * stuck.
 *
 * @dev _Available since v3.1._
 */
contract ERC1155Holder is ERC1155Receiver {
    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}


// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)

pragma solidity ^0.8.0;

import "../IERC1155Receiver.sol";
import "../../../utils/introspection/ERC165.sol";

/**
 * @dev _Available since v3.1._
 */
abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol
pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/Bullish.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol";

import "./interfaces/ITokenXBaseV3.sol";
import "./interfaces/ICakeBaker.sol";
import "./interfaces/IXNFTHolder.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract Bullish is ReentrancyGuard, Pausable, ERC1155Holder
{
	using SafeERC20 for IERC20;

	struct PoolInfo
	{
		address address_token_stake;
		address address_token_reward;

		uint256 alloc_point;
		uint256 harvest_interval;

		uint256 total_staked_amount;
		uint256 accu_reward_amount_per_share_e12;

		uint256 xnft_level_stake;
	}

	struct FeeInfo
	{
		uint256 deposit_e6; // 300 is 3%

		uint256 withdrawal_min_e6;
		uint256 withdrawal_max_e6;
		uint256 withdrawal_period_sec; // decrease time from max to min
	}

	struct RewardInfo
	{
		uint256 emission_start_block_id;
		uint256 emission_end_block_id;
		uint256 emission_per_block;

		uint256 last_emited_block_id;

		uint256 total_alloc_point;
		uint256 total_locked_amount;

		uint256 last_rewarded_block_id;
	}

	struct UserInfo
	{
		uint256 staked_amount;
		uint256 paid_reward_amount;
		uint256 locked_reward_amount;

		uint256 last_deposit_time;
		uint256 next_harvest_time;
	}

	uint256 public constant MAX_HARVEST_INTERVAL = 14 days;
	uint256 public constant MAX_DEPOSIT_FEE_E4 = 2000; // 20%
	uint256 public constant MIN_WITHDRAWAL_FEE_E4 = 0; // 0%
	uint256 public constant MAX_WITHDRAWAL_FEE_E4 = 2000; // 20%

	address public address_operator;
	address public address_nft_holder;
	address public address_nft;
	address public address_chick; // for tax
	address public address_cakebaker; // for delegate farming at pancakeswap

	PoolInfo[] public pool_info; // pool_id / pool_info
	FeeInfo[] public fee_info; // pool_id / fee_info

	mapping(address => bool) public is_pool_exist;
	mapping(uint256 => mapping(address => UserInfo)) public user_info; // pool_id / user_adddress / user_info
	mapping(address => RewardInfo) public reward_info; // reward_address / reward_info

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetChickCB(address indexed operator, address _controller);
	event SetCakeBakerCB(address indexed operator, address _controller);
	event SetOperatorCB(address indexed operator, address _new_operator);

	event MakePoolCB(address indexed operator, uint256 new_pool_id);
	event SetPoolInfoCB(address indexed operator, uint256 _pool_id);
	event UpdateEmissionRateCB(address indexed operator, uint256 _reward_per_block);

	event DepositCB(address indexed user, uint256 _pool_id, uint256 _amount);
	event WithdrawCB(address indexed user, uint256 _pool_id, uint256 _amount);
	event HarvestCB(address indexed user, uint256 _pool_id, uint256 _pending_reward_amount);
	event HarvestNotYetCB(address indexed user, uint256 _pool_id, uint256 _pending_reward_amount);
	event GetPendingRewardAmountCB(address indexed user, uint256 _pool_id, address _address_user, uint256 _pending_amount);

	event EmergencyWithdrawCB(address indexed user, uint256 _pool_id, uint256 _amount);
	event HandleStuckCB(address indexed user, uint256 _amount);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier uniquePool(address _address_lp) { require(is_pool_exist[_address_lp] == false, "uniquePool: duplicated"); _; }
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: not authorized"); _; }

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _address_chick, address _address_nft, address _address_nft_holder)
	{
		address_operator = msg.sender;
		address_chick = _address_chick;
		address_nft_holder = _address_nft_holder;
		address_nft = _address_nft;
	}

	function make_reward(address _address_token_reward, uint256 _emission_per_block, uint256 _emission_start_block_id, uint256 _emission_end_block_id) external onlyOperator
	{
		require(_address_token_reward != address(0), "make_reward: Wrong address");
		require(_emission_start_block_id < _emission_end_block_id, "make_reward: Wrong block id");

		RewardInfo storage reward = reward_info[_address_token_reward];
		reward.emission_per_block = _emission_per_block;
		reward.last_emited_block_id = (block.number > _emission_start_block_id)? block.number : _emission_start_block_id;
		reward.emission_start_block_id = reward.last_emited_block_id;
		reward.emission_end_block_id = _emission_end_block_id;

		ITokenXBaseV3 reward_token = ITokenXBaseV3(_address_token_reward);
		reward_token.set_chick(address_chick);
	}

	function make_pool(address _address_token_stake, uint256 _xnft_level, address _address_token_reward, uint256 _alloc_point,
		uint256 _harvest_interval, bool _refresh_reward)
		public onlyOperator uniquePool(_address_token_stake) returns(uint256)
	{
		if(_refresh_reward)
			refresh_reward_per_share_all();

		uint256 new_pool_id = _make_pool(_address_token_stake, _address_token_reward, _alloc_point, _harvest_interval, _xnft_level);
		emit MakePoolCB(msg.sender, new_pool_id);
		return new_pool_id;
	}

	function deposit(uint256 _pool_id, uint256 _amount_or_id) public whenNotPaused nonReentrant
	{
		require(_pool_id < pool_info.length, "deposit: Wrong pool id");

		refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = user_info[_pool_id][address_user];

		_collect_reward(_pool_id, address_user);

		if(_amount_or_id == 0)
			return;

		if(pool.address_token_reward == address_nft)
		{
			// User -> Bullish
			IERC20 stake_token = IERC20(pool.address_token_stake);
			stake_token.safeTransferFrom(address_user, address(this), _amount_or_id);

			uint256 deposit_fee = 0;
			if(fee_info[_pool_id].deposit_e6 > 0)
			{
				// Bullish -> Chick for Fee
				deposit_fee = _amount_or_id * fee_info[_pool_id].deposit_e6 / 1e6;
				stake_token.safeTransfer(address_chick, deposit_fee);
			}

			uint256 deposit_amount = _amount_or_id - deposit_fee;

			// Bullish -> CakeBaker for Deposit to delecate farming
			if(address_cakebaker != address(0))
			{
				ICakeBaker cakebaker = ICakeBaker(address_cakebaker);
				cakebaker.delegate(address(this), pool.address_token_stake, deposit_amount);
			}

			// Write down deposit amount on Bullish's ledger
			user.staked_amount += deposit_amount;
			pool.total_staked_amount += deposit_amount;
		}
		else
		{
			// User -> XNFTBullish Holder
			IXNFTHolder nft_holder = IXNFTHolder(address_nft_holder);
			nft_holder.deposit(_pool_id, address_user, _amount_or_id);

			user.staked_amount += 1;
		}

		emit DepositCB(address_user, _pool_id, user.staked_amount);
	}

	function withdraw(uint256 _pool_id, uint256 _amount_or_id) public nonReentrant
	{
		require(_pool_id < pool_info.length, "withdraw: Wrong pool id.");

		refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = user_info[_pool_id][address_user];

		_collect_reward(_pool_id, address_user);

		if(_amount_or_id == 0)
			return;

		if(pool.address_token_reward == address_nft)
		{
			// CakeBaker -> Bullish
			if(address_cakebaker != address(0))
			{
				ICakeBaker cakebaker = ICakeBaker(address_cakebaker);
				cakebaker.retain(address(this), pool.address_token_stake, _amount_or_id);
			}

			IERC20 stake_token = IERC20(pool.address_token_stake);

			uint256 withdraw_fee = 0;
			uint256 withdraw_fee_rate_e6 = _get_cur_withdraw_fee_e6(user, fee_info[_pool_id]);
			if(withdraw_fee_rate_e6 > 0)
			{
				// Bullish -> Chick for Fee
				withdraw_fee = _amount_or_id * withdraw_fee_rate_e6 / 1e6;
				stake_token.safeTransfer(address_chick, withdraw_fee);
			}

			uint256 withdraw_amount = _amount_or_id - withdraw_fee;
			stake_token.safeTransfer(address_user, withdraw_amount);

			user.staked_amount -= _amount_or_id;
			pool.total_staked_amount -= withdraw_amount;
		}
		else
		{
			// XNFTHolder -> User
			IXNFTHolder nft_holder = IXNFTHolder(address_nft_holder);
			nft_holder.withdraw(_pool_id, address_user, _amount_or_id);

			user.staked_amount -= 1;
		}

		emit WithdrawCB(address_user, _pool_id, user.staked_amount);
	}

	function harvest(uint256 _pool_id) public whenNotPaused nonReentrant
	{
		require(_pool_id < pool_info.length, "harvest: Wrong pool id.");

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		RewardInfo storage reward = reward_info[pool.address_token_reward];
		UserInfo storage user = user_info[_pool_id][address_user];

		refresh_reward_per_share(_pool_id);
		uint256 pending_reward_amount = _get_pending_reward_amount(_pool_id, address_user);
		if(pending_reward_amount == 0)
		{
			emit HarvestNotYetCB(address_user, _pool_id, pending_reward_amount);
		}
		else if(_can_harvest(user))
		{
			pending_reward_amount = _collect_reward(_pool_id, address_user);
			emit HarvestCB(address_user, _pool_id, pending_reward_amount);
		}
		else
		{
			user.locked_reward_amount += pending_reward_amount;
			reward.total_locked_amount += pending_reward_amount;
			emit HarvestNotYetCB(address_user, _pool_id, pending_reward_amount);
		}
	}

	function get_pending_reward_amount(uint256 _pool_id, address _address_user) external returns(uint256)
	{
		require(_pool_id < pool_info.length, "get_pending_reward_amount: Wrong pool id.");

		refresh_reward_per_share(_pool_id);
		uint256 pending_amount = _get_pending_reward_amount(_pool_id, _address_user);

		emit GetPendingRewardAmountCB(msg.sender, _pool_id, _address_user, pending_amount);
		return pending_amount;
	}

	function emergency_withdraw(uint256 _pool_id) public nonReentrant
	{
		require(_pool_id < pool_info.length, "emergency_withdraw: Wrong pool id.");

		PoolInfo storage pool = pool_info[_pool_id];
		require(pool.address_token_reward == address_nft, "emergency_withdraw: Wrong pool id");

		address address_user = msg.sender;
		UserInfo storage user = user_info[_pool_id][address_user];

		uint256 amount = user.staked_amount;
		user.staked_amount = 0;
		user.paid_reward_amount = 0;

		IERC20 stake_token = IERC20(pool.address_token_stake);
		stake_token.safeTransfer(address_user, amount);

		emit EmergencyWithdrawCB(address_user, _pool_id, amount);
	}

	function refresh_reward_per_share(uint256 _pool_id) public
	{
		PoolInfo storage _pool = pool_info[_pool_id];
		RewardInfo storage _reward = reward_info[_pool.address_token_reward];
		if(block.number < _reward.emission_start_block_id) return;

		uint256 cur_block_id = (block.number > _reward.emission_end_block_id)?_reward.emission_end_block_id:block.number;

		uint256 elapsed_block_count = cur_block_id - _reward.last_emited_block_id;
		if(_pool.total_staked_amount == 0 || _pool.alloc_point == 0 || elapsed_block_count == 0)
			return;

		IXNFTHolder nft_holder = IXNFTHolder(address_nft_holder);
		uint256 pool_boost_rate_e6 = nft_holder.get_pool_tvl_boost_rate_e6(_pool_id);

		uint256 mint_reward_amount = _get_new_rewards_amount(_pool, _reward, elapsed_block_count);

		// add more rewards for the nft boosters
		mint_reward_amount += (mint_reward_amount * (10000 + pool_boost_rate_e6) / 1e6);

		// Mint native token -> Bullish
		ITokenXBaseV3 reward_token = ITokenXBaseV3(_pool.address_token_reward);
		reward_token.mint(address(this), mint_reward_amount);

		_pool.accu_reward_amount_per_share_e12 += (mint_reward_amount * 1e12 / _pool.total_staked_amount);
		_reward.last_emited_block_id = block.number;
	}

	function refresh_reward_per_share_all() public
	{
		for(uint256 i=0; i < pool_info.length; i++)
			refresh_reward_per_share(i);
	}

	function handle_stuck(address _address_token, uint256 _amount) public onlyOperator nonReentrant
	{
		for(uint256 i=0; i<pool_info.length; i++)
			require(_address_token != pool_info[i].address_token_reward, "handle_stuck: Wrong token address");

		address address_user = msg.sender;

		IERC20 stake_token = IERC20(_address_token);
		stake_token.safeTransfer(address_user, _amount);

		emit HandleStuckCB(address_user, _amount);
	}

	function pause() external onlyOperator
	{
		_pause();
	}

	function resume() external onlyOperator
	{
		_unpause();
	}

	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------
	function set_chick(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_chick: Wrong address");

		address_chick = _new_address;
		for(uint256 i=0; i<pool_info.length; i++)
		{
			ITokenXBaseV3 reward_token = ITokenXBaseV3(pool_info[i].address_token_reward);
			reward_token.set_chick(address_chick);
		}

		emit SetChickCB(msg.sender, _new_address);
	}

	function set_cakebaker(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_cakebaker: Wrong address");
		address_cakebaker = _new_address;

		emit SetCakeBakerCB(msg.sender, _new_address);
	}

	function set_operator(address _new_operator) external onlyOperator
	{
		require(_new_operator != address(0), "set_operator: Wrong address");
		address_operator = _new_operator;
		emit SetOperatorCB(msg.sender, _new_operator);
	}

	function get_pool_count() external view returns(uint256)
	{
		return pool_info.length;
	}

	function set_deposit_fee_e6(uint256 _pool_id, uint256 _fee_e6) external onlyOperator
	{
		require(_pool_id < pool_info.length, "set_deposit_fee_e6: Wrong pool id.");
		require(_fee_e6 <= MAX_DEPOSIT_FEE_E4, "set_deposit_fee_e6: Maximun deposit fee exceeded.");

		FeeInfo storage cur_fee = fee_info[_pool_id];
		cur_fee.deposit_e6 = _fee_e6;
	}

	function set_withdrawal_fee_e6(uint256 _pool_id, uint256 _fee_max_e6, uint256 _fee_min_e6, uint256 _period_sec) external onlyOperator
	{
		require(_pool_id < pool_info.length, "set_withdrawal_fee: Wrong pool id.");
		require(_fee_min_e6 >= MIN_WITHDRAWAL_FEE_E4, "set_withdrawal_fee: Minimun fee exceeded.");
		require(_fee_max_e6 <= MAX_WITHDRAWAL_FEE_E4, "set_withdrawal_fee: Maximun fee exceeded.");
		require(_fee_min_e6 <= _fee_max_e6, "set_withdrawal_fee: Wrong withdrawal fee");

		FeeInfo storage cur_fee = fee_info[_pool_id];
		cur_fee.withdrawal_max_e6 = _fee_max_e6;
		cur_fee.withdrawal_min_e6 = _fee_min_e6;
		cur_fee.withdrawal_period_sec = _period_sec;
	}

	function set_alloc_point(uint256 _pool_id, uint256 _alloc_point, bool _refresh_reward) external onlyOperator
	{
		require(_pool_id < pool_info.length, "set_alloc_point: Wrong pool id.");

		if(_refresh_reward)
			refresh_reward_per_share_all();

		PoolInfo storage pool = pool_info[_pool_id];
		RewardInfo storage reward = reward_info[pool.address_token_reward];

		reward.total_alloc_point += _alloc_point;
		reward.total_alloc_point -= pool.alloc_point;

		pool.alloc_point = _alloc_point;
	}

	function set_emission_per_block(address _address_reward, uint256 _emission_per_block) external onlyOperator
	{
		require(_address_reward != address(0), "set_emission_per_block: Wrong address");

		refresh_reward_per_share_all();

		reward_info[_address_reward].emission_per_block = _emission_per_block;
		emit UpdateEmissionRateCB(msg.sender, _emission_per_block);
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _make_pool(address _address_token_stake, address _address_token_reward, uint256 _alloc_point,
		uint256 _harvest_interval, uint256 _xnft_level_stake) public returns(uint256)
	{
		require(_address_token_stake != address(0), "make_pool: Wrong address");
		require(_address_token_reward != address(0), "make_pool: Wrong address");
		require(_harvest_interval <= MAX_HARVEST_INTERVAL, "make_pool: Invalid harvest interval");

		RewardInfo storage reward = reward_info[_address_token_reward];
		require(reward.total_alloc_point != 0, "make_pool: Invalid reward token");

		is_pool_exist[_address_token_stake] = true;

		reward.total_alloc_point += _alloc_point;

		pool_info.push(PoolInfo({
			address_token_stake: _address_token_stake,
			address_token_reward: _address_token_reward,
			xnft_level_stake: _xnft_level_stake,

			harvest_interval: _harvest_interval,
			alloc_point: _alloc_point,
			total_staked_amount: 0,

			accu_reward_amount_per_share_e12: 0
		}));

		fee_info.push(FeeInfo({
			deposit_e6: 0,
			withdrawal_max_e6: 0,
			withdrawal_min_e6: 0,
			withdrawal_period_sec: 0
		}));

		return pool_info.length-1;
	}

	function _get_cur_withdraw_fee_e6(UserInfo storage _user, FeeInfo storage _fee) internal view returns(uint256)
	{
		uint256 time_diff = block.timestamp - _user.last_deposit_time;
		uint256 reduction_rate_e6 = _min(time_diff * 1e6 / _fee.withdrawal_period_sec, 10000);
		return _fee.withdrawal_min_e6 + (_fee.withdrawal_max_e6-_fee.withdrawal_min_e6) * reduction_rate_e6 / 1e6;
	}

	function _safe_reward_transfer(PoolInfo storage _pool, address _to, uint256 _amount) internal
	{
		IERC20 reward_token = IERC20(_pool.address_token_reward);
		uint256 cur_reward_balance = reward_token.balanceOf(address(this));

		if(_amount > cur_reward_balance)
			reward_token.safeTransfer(_to, cur_reward_balance);
		else
			reward_token.safeTransfer(_to, _amount);
	}

	function _collect_reward(uint256 _pool_id, address _address_user) private returns(uint256)
	{
		PoolInfo storage _pool = pool_info[_pool_id];
		UserInfo storage _user = user_info[_pool_id][_address_user];
		RewardInfo storage _reward = reward_info[_pool.address_token_reward];

		if(_user.staked_amount == 0)
			return 0;

		if(_user.next_harvest_time == 0)
			_user.next_harvest_time = block.timestamp + _pool.harvest_interval;

		uint256 pending_reward_amount = _get_pending_reward_amount(_pool_id, _address_user);
		if(pending_reward_amount > 0)
		{
			_safe_reward_transfer(_pool, _address_user, pending_reward_amount);

			_reward.total_locked_amount -= pending_reward_amount;

			_user.paid_reward_amount += pending_reward_amount;
			_user.locked_reward_amount = 0;
			_user.next_harvest_time = block.timestamp + _pool.harvest_interval;
		}

		return pending_reward_amount;
	}

	function _get_pending_reward_amount(uint256 _pool_id, address _address_user) internal view returns(uint256)
	{
		PoolInfo storage _pool = pool_info[_pool_id];
		UserInfo storage _user = user_info[_pool_id][_address_user];
		RewardInfo storage _reward = reward_info[_pool.address_token_reward];

		uint256 elapsed_block_count = block.number - _reward.last_emited_block_id;
		if(elapsed_block_count == 0)
			return 0;

		uint256 accu_rps_e12 = _pool.accu_reward_amount_per_share_e12;
		if(_pool.total_staked_amount > 0 && _pool.alloc_point > 0 && elapsed_block_count > 0)
		{
			uint256 new_reward_per_pool = _get_new_rewards_amount(_pool, _reward, elapsed_block_count);
			uint256 new_rps_e12 = new_reward_per_pool * 1e12 / _pool.total_staked_amount;

			accu_rps_e12 += new_rps_e12;
		}

		uint256 user_reward_amount = _get_boosted_user_amount(_pool_id, _address_user, _user.staked_amount, accu_rps_e12);
		return user_reward_amount - _user.paid_reward_amount;
	}

	function _get_boosted_user_amount(uint256 _pool_id, address _address_user, uint256 _user_staked_amount, uint256 accu_rps_e12) internal view returns(uint256)
	{
		IXNFTHolder booster = IXNFTHolder(address_nft_holder);
		uint256 tvl_boost_rate_e6 = booster.get_user_tvl_boost_rate_e6(_pool_id, _address_user);

		uint256 user_share_e6 = _user_staked_amount * (10000 + tvl_boost_rate_e6);
		return user_share_e6 * accu_rps_e12 / 1e12 / 1e6;
	}

	function _get_new_rewards_amount(PoolInfo storage _pool, RewardInfo storage _reward, uint256 _block_count) internal view returns(uint256)
	{
		return _block_count * _reward.emission_per_block * _pool.alloc_point / _reward.total_alloc_point;
	}

	function _min(uint256 a, uint256 b) internal pure returns(uint256)
	{
    	return a <= b ? a : b;
	}

	function _can_harvest(UserInfo storage user) private view returns(bool)
	{
		return block.timestamp >= user.next_harvest_time;
	}
}


// File: contracts/BullishArchery.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./Bullish.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract BullishArchery is Bullish
{
	constructor(address _address_chick, address _address_nft, address _address_nft_holder) Bullish(_address_chick, _address_nft, _address_nft_holder)
	{
	}
}


// File: contracts/BullishDrill.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./Bullish.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract BullishDrill is Bullish
{
	constructor(address _address_chick, address _address_nft, address _address_nft_holder) Bullish(_address_chick, _address_nft, _address_nft_holder)
	{
	}
}


// File: contracts/CakeBaker.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

import "./interfaces/IPancakeswapFarm.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract CakeBaker is ReentrancyGuard, Pausable
{
	using SafeERC20 for IERC20;

	address public constant ADDRESS_PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
	IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(ADDRESS_PANCAKE_ROUTER);

	struct PancakeFarm
	{
		uint256 pool_id;
		address address_token_reward; // e.g CAKE on pancakeswap
		uint256 lp_locked_amount;
		uint256 last_rewarded_block_id;
	}
	
	address public address_operator;
	address public address_controller1;
	address public address_controller2;
	address public address_reward_vault;

	mapping(address => PancakeFarm) pancake_pool_list; // address 
	address[] public address_pancake_pool_list; // https://pancakeswap.finance/farms

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetAddressFeeCB(address indexed operator, address _new_address);
	event SetAddressRewardTokenCB(address indexed operator, address _new_address);
	event SetOperatorCB(address indexed operator, address _new_address);
	event SetControllerCB(address indexed operator, address _new_address1, address _new_address2);
	event SetPancakeFarmCB(address indexed operator, address _new_address);
	event DelegateCB(address indexed operator, uint256 _amount);
	event RetainCB(address indexed operator, uint256 _amount);
	event HarvestCB(address indexed operator);
	event HandleStuckCB(address indexed operator, address _token, uint256 _amount, address _to);
	event AddPancakeFarmCB(address indexed operator, uint256 _pool_id, address _address_lp, address _address_reward);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: Not authorized"); _; }
	modifier onlyController() { require(msg.sender == address_controller1 || msg.sender == address_controller2, "onlyController: caller is not the controller"); _; }

	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------
	function set_address_reward_vault(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_address_reward_vault: Wrong address");
		address_reward_vault = _new_address;
		emit SetAddressFeeCB(msg.sender, _new_address);
	}

	function set_operator(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_address_token_reward: Wrong address");
		address_operator = _new_address;
		emit SetOperatorCB(msg.sender, _new_address);
	}

	function set_controller(address _address_ctrl1, address _address_ctrl2) public onlyOperator
	{
		require(address_controller1 == address(0), "set_controller: Already set");
		require(address_controller2 == address(0), "set_controller: Already set");

		require(_address_ctrl1 != address(0), "set_controller: Wrong address");
		require(_address_ctrl2 != address(0), "set_controller: Wrong address");

		address_controller1 = _address_ctrl1;
		address_controller2 = _address_ctrl2;

		emit SetControllerCB(msg.sender, address_controller1, address_controller2);
	}

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _address_reward_vault)
	{
		require(_address_reward_vault != address(0), "constructor: Wrong address");

		address_operator = msg.sender;
		address_reward_vault = _address_reward_vault;
	}

	function add_pancake_farm(uint256 _pool_id, address _address_lp, address _address_token_reward) external
		onlyOperator returns(uint256)
	{
		require(_address_lp != address(0), "add_pancake_farm: Wrong address");
		require(_address_token_reward != address(0), "add_pancake_farm: Wrong address");

		pancake_pool_list[_address_lp] = PancakeFarm({
			pool_id: _pool_id,
			address_token_reward: _address_token_reward,
			lp_locked_amount: 0,
			last_rewarded_block_id: 0
		});
		
		address_pancake_pool_list.push(_address_lp);
		
		emit AddPancakeFarmCB(msg.sender, _pool_id, _address_lp, _address_token_reward);
		return address_pancake_pool_list.length;
	}

	function delegate(address _address_lp_vault, address _address_lp, uint256 _amount) external 
		whenNotPaused nonReentrant onlyController returns(uint256)
	{
		require(_address_lp != address(0), "deposit: Wrong address");
		require(_address_lp_vault != address(0), "deposit: Wrong address");

		uint256 cur_pool_id = pancake_pool_list[_address_lp].pool_id;
		if(cur_pool_id == 0 || _amount == 0)
			return 0;

		_collect_reward(pancake_pool_list[_address_lp]);

		// LP Vault -> CakeBaker
		IERC20 lp_token = IERC20(_address_lp);
		uint256 balance_prev = lp_token.balanceOf(address(this));
		lp_token.safeTransferFrom(_address_lp_vault, address(this), _amount);

		uint256 balance_cur = lp_token.balanceOf(address(this));
		uint256 balance_diff = balance_cur - balance_prev;

		pancake_pool_list[_address_lp].lp_locked_amount += balance_diff;

		// CakeBaker -> Pancake
		lp_token.safeIncreaseAllowance(_address_lp, balance_diff);
		IPancakeswapFarm(_address_lp).deposit(cur_pool_id, balance_diff);

		emit DelegateCB(msg.sender, _amount);
		return balance_diff;
	}

	function retain(address _address_lp_vault, address _address_lp, uint256 _amount) external 
		nonReentrant onlyController returns(uint256)
	{
		require(_address_lp != address(0), "deposit: Wrong address");
		require(_address_lp_vault != address(0), "deposit: Wrong address");

		uint256 cur_pool_id = pancake_pool_list[_address_lp].pool_id;
		if(cur_pool_id == 0 || _amount == 0)
			return 0;

		_collect_reward(pancake_pool_list[_address_lp]);

		IERC20 lp_token = IERC20(_address_lp);
		uint256 lp_balance = lp_token.balanceOf(address(this));

		uint256 withdraw_amount = (_amount > lp_balance)? lp_balance : _amount;
		if(withdraw_amount > pancake_pool_list[_address_lp].lp_locked_amount)
			withdraw_amount = pancake_pool_list[_address_lp].lp_locked_amount;

		// Pancake -> CakeBaker
		IPancakeswapFarm(_address_lp).withdraw(cur_pool_id, withdraw_amount);

		// CakeBaker -> LP Vault
		lp_token.safeTransfer(_address_lp_vault, withdraw_amount);
		pancake_pool_list[_address_lp].lp_locked_amount -= withdraw_amount;

		emit RetainCB(msg.sender, _amount);
		return withdraw_amount;
	}

	function harvest() external nonReentrant
	{
		for(uint256 i=0; i<address_pancake_pool_list.length; i++)
			_collect_reward(pancake_pool_list[address_pancake_pool_list[i]]);

		emit HarvestCB(msg.sender);
	}

	function handle_stuck(address _token, uint256 _amount, address _to) public onlyOperator nonReentrant
	{
		IERC20(_token).safeTransfer(_to, _amount);
		emit HandleStuckCB(msg.sender, _token, _amount, _to);
	}

	function pause() external onlyOperator
	{ 
		_pause(); 
	}
	
	function resume() external onlyOperator
	{ 
		_unpause();
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _get_approve_token(address _address_token) private nonReentrant
	{
		IERC20 token = IERC20(_address_token);
		if(token.allowance(address(this), address(PancakeRouter)) == 0)
			token.safeApprove(address(PancakeRouter), type(uint256).max);
	}

	function _collect_reward(PancakeFarm storage _pool_info) private nonReentrant
	{
		require(_pool_info.address_token_reward != address(0), "_collect_reward: reward address is wrong.");

		IPancakeswapFarm pancake_pool = IPancakeswapFarm(address_pancake_pool_list[_pool_info.pool_id]);
		pancake_pool.withdraw(_pool_info.pool_id, 0);

		IERC20 reward_token = IERC20(_pool_info.address_token_reward);
		uint256 total_earned = reward_token.balanceOf(address(this));
		reward_token.safeTransfer(address_reward_vault, total_earned);

		_pool_info.last_rewarded_block_id = block.number;
	}	
}


// File: contracts/Calf.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./interfaces/ITokenXBaseV3.sol";
import "./interfaces/ICakeBaker.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract Calf is ReentrancyGuard, Pausable
{
	using SafeERC20 for IERC20;

	struct UserPhaseInfo
	{
		uint256 staked_amount;
		uint256 reward_amount;
		bool is_reward_received;
	}

	struct PoolInfo
	{
		address address_token_stake;

		uint256 alloc_point;
		uint256 reward_amount_per_share;
	}

	uint256 constant MAX_PHASE_INTERVAL = 24 hours;

	address public address_operator;
	address public address_cakebaker;
	address public address_token_reward;

	uint256 public phase_interval = 8 hours;
	uint256 public reward_amount_per_phase = 75;
	uint256 public phase_count = 12; // during 4 days 24 * 4 / 8

	uint256 public phase_start_block_id;
	uint256 public phase_start_timestamp;
	uint256 public last_mint_time;
	uint256 public phase_cur_serial;
	
	PoolInfo[] public pool_info; // pool_id / pool_info
	mapping(address => bool) public is_pool_exist;
	uint256 public total_alloc_point = 0; // sum of all pools

	// pool_id / user_adddress / phase_serial / user_info
	mapping(uint256 => mapping(address => mapping(uint256 => UserPhaseInfo))) public user_phase_info;

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetOperatorCB(address indexed operator, address _new_address);
	event SetCakeBakerCB(address indexed operator, address _new_address);
	event SetRewardAmountPerPhaseCB(address indexed operator, uint256 _amount);
	
	event MakePoolCB(address indexed operator, uint256 _new_pool_id);
	event SetPoolInfoCB(address indexed operator, uint256 _pool_id);

	event DepositCB(address indexed _user, uint256 _pool_id, uint256 _amount);
	event ClaimCB(address indexed _user, uint256 _pool_id, uint256 _amount);
	event ClaimtNotYetCB(address indexed _user, uint256 _pool_id, uint256 _amount);

	event GetPendingRewardAmountCB(address indexed operator, uint256 _pool_id, address _user, uint256 _phase_serial, uint256 _pending_total);
	event HandleStuckCB(address indexed _user, uint256 _amount);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier uniquePool(address _address_lp) { require(is_pool_exist[_address_lp] == false, "uniquePool: duplicated"); _; }
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: Not authorized"); _; }

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _address_token_reward)
	{
		address_operator = msg.sender;
		address_token_reward = _address_token_reward;
	}

	function make_pool(uint256 _alloc_point, address _address_token_stake, bool _update_all) external 
		onlyOperator uniquePool(_address_token_stake) returns(uint256)
	{
		if(_update_all)
			refresh_reward_per_share();

		is_pool_exist[_address_token_stake] = true;
		total_alloc_point += _alloc_point;

		pool_info.push(PoolInfo({
			address_token_stake: _address_token_stake,
			alloc_point: _alloc_point,
			reward_amount_per_share: 0
		}));

		uint256 new_pool_id = pool_info.length-1;
		emit MakePoolCB(msg.sender, new_pool_id);
		return new_pool_id;
	}

	function set_pool_info(uint256 _pool_id, uint256 _alloc_point, bool _update_all) public onlyOperator
	{
		if(_update_all)
			refresh_reward_per_share();

		total_alloc_point += _alloc_point;
		total_alloc_point -= pool_info[_pool_id].alloc_point;

		pool_info[_pool_id].alloc_point = _alloc_point;
		emit SetPoolInfoCB(msg.sender, _pool_id);
	}

	function deposit(uint256 _pool_id, uint256 _amount) public nonReentrant whenNotPaused
	{
		require(_pool_id < pool_info.length, "deposit: Wrong pool id");
		require(phase_cur_serial < phase_count, "deposit: All phase are finished.");

		_refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		uint256 cur_phase = _get_cur_phase_by_block();

		PoolInfo storage pool = pool_info[_pool_id];
		UserPhaseInfo storage user = user_phase_info[_pool_id][address_user][cur_phase];
		
		if(_amount > 0)
		{
			// User -> Calf
			IERC20 lp_token = IERC20(pool.address_token_stake);
			lp_token.safeTransferFrom(address_user, address(this), _amount);

			// Calf -> CakeBaker
			ICakeBaker cakebaker = ICakeBaker(address_cakebaker);
			cakebaker.delegate(address(this), pool.address_token_stake, _amount);

			// Write down deposit amount on Calf's ledger
			user.staked_amount += _amount;
		}

		emit DepositCB(address_user, _pool_id, user.staked_amount);
	}

	function claim(uint256 _pool_id, uint256 _phase_serial) public nonReentrant
	{
		require(_pool_id < pool_info.length, "claim: Wrong pool id");
		require(_phase_serial < phase_count, "claim: Wrong phase serial");

		_refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		UserPhaseInfo storage user = user_phase_info[_pool_id][address_user][_phase_serial];

		if(user.is_reward_received == true)
			return;
		
		if(_can_claim())
		{
			uint256 pending_reward = get_pending_reward_amount(_pool_id, address_user, _phase_serial);
			_safe_reward_transfer(address_user, pending_reward);
			user.is_reward_received = true;

			emit ClaimCB(address_user, _pool_id, user.staked_amount);
		}
		else
			emit ClaimtNotYetCB(address_user, _pool_id, user.staked_amount);
	}

	function refresh_reward_per_share() public nonReentrant
	{
		for(uint256 pool_id = 0; pool_id < pool_info.length; pool_id++)
			_refresh_reward_per_share(pool_id);
	}

	function get_pending_reward_amount(uint256 _pool_id, address _address_user,
		uint256 _phase_serial) public returns(uint256)
	{
		require(_pool_id < pool_info.length, "get_pending_reward_amount: Wrong pool id.");
		require(_phase_serial < phase_count, "claim: Wrong phase serial");

		UserPhaseInfo storage user = user_phase_info[_pool_id][_address_user][_phase_serial];
		if(user.is_reward_received == true)
			return 0;

		PoolInfo storage pool = pool_info[_pool_id];
		uint256 pending_total = user.staked_amount * pool.reward_amount_per_share / 1e12;

		emit GetPendingRewardAmountCB(msg.sender, _pool_id, _address_user, _phase_serial, pending_total);
		return pending_total;
	}

	function handle_stuck(address _address_token, uint256 _amount) public onlyOperator nonReentrant
	{
		require(_address_token != address_token_reward, "handle_stuck: Wrong token address");

		address address_user = msg.sender;

		IERC20 stake_token = IERC20(_address_token);
		stake_token.safeTransfer(address_user, _amount);
		
		emit HandleStuckCB(address_user, _amount);
	}

	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------		
	function set_phase(uint256 _phase_start_block_id, uint256 _phase_count, uint256 _phase_interval_sec) external onlyOperator whenNotPaused
	{
		require(block.number <= _phase_start_block_id, "set_phase: Wrong block id");
		require(_phase_interval_sec <= MAX_PHASE_INTERVAL, "set_phase: Wrong interval value");
		require(_phase_count > 0, "set_phase: Wrong phase count");

		phase_start_block_id = _phase_start_block_id;
		phase_interval = _phase_interval_sec;
		phase_count = _phase_count;
	}

	function set_reward_amount_per_phase(uint256 _amount) external onlyOperator
	{
		refresh_reward_per_share();

		reward_amount_per_phase = _amount;
		emit SetRewardAmountPerPhaseCB(msg.sender, _amount);
	}

	function set_operator(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_operator: Wrong address");
		address_operator = _new_address;
		emit SetOperatorCB(msg.sender, _new_address);
	}

	function set_cakebaker(address _new_address) external onlyOperator
	{
		require(_new_address != address(0), "set_cakebaker: Wrong address");
		address_cakebaker = _new_address;
		emit SetCakeBakerCB(msg.sender, _new_address);
	}


	function get_pool_count() external view returns(uint256)
	{
		return pool_info.length;
	}

	function get_cur_phase() external view returns(uint256)
	{
		return phase_cur_serial;
	}
	
	function pause() external onlyOperator
	{ 
		_pause(); 
	}
	
	function resume() external onlyOperator
	{ 
		_unpause();
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _can_claim() internal view returns(bool)
	{
		return block.timestamp > (last_mint_time + phase_interval);
	}

	function _safe_reward_transfer(address _to, uint256 _amount) internal
	{
		IERC20 reward_token = IERC20(address_token_reward);
		uint256 cur_reward_balance = reward_token.balanceOf(address(this));

		if(_amount > cur_reward_balance)
			reward_token.safeTransfer(_to, cur_reward_balance);
		else
			reward_token.safeTransfer(_to, _amount);
	}

	function _get_cur_phase_by_block() internal view returns(uint256)
	{
		if(phase_start_timestamp == 0)
			return 0;
		else
			return (block.timestamp - phase_start_timestamp)/phase_interval;
	}

	function _refresh_reward_per_share(uint256 _pool_id) internal
	{
		if(phase_start_block_id == 0 || phase_start_timestamp == 0 && block.number < phase_start_block_id)
			return;
		
		if(last_mint_time == 0)
		{
			last_mint_time = block.timestamp; // skipping minting at the first phase
			return;
		}
		
		PoolInfo storage pool = pool_info[_pool_id];

		uint256 cur_phase = _get_cur_phase_by_block();
		uint256 accu_phase_count = cur_phase - phase_cur_serial;

		uint256 cur_stake_balance = IERC20(pool.address_token_stake).balanceOf(address(this));
		
		if(cur_stake_balance > 0 && accu_phase_count > 0 && pool.alloc_point > 0)
		{
			uint256 mint_reward_amount = accu_phase_count * reward_amount_per_phase * pool.alloc_point / total_alloc_point;
	
			// Mint native token -> Calf
			ITokenXBaseV3 reward_token = ITokenXBaseV3(address_token_reward);
			reward_token.mint(address(this), mint_reward_amount);

			pool.reward_amount_per_share = mint_reward_amount * 1e12 / cur_stake_balance;
		}
		else
			pool.reward_amount_per_share = 0;

		last_mint_time = block.timestamp;
		phase_cur_serial = cur_phase;
	}
}


// File: contracts/Chick.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/interfaces/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

//---------------------------------------------------------
// Interface
//---------------------------------------------------------
interface IWETH
{
	function deposit() external payable;
	function withdraw(uint256) external;
}

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract Chick is ReentrancyGuard, Pausable
{
	using SafeERC20 for IERC20;

	address public constant ADDRESS_BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
	address public constant ADDRESS_WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
	address public constant ADDRESS_PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

	address public address_operator;
	address public address_arrow_token;
	address public address_target_token;

	address public address_busd_vault;
	address public address_bnb_vault;
	uint256 public bnb_per_busd_vault_ratio_e6 = 490100; // bnb is 49.01%

	IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(ADDRESS_PANCAKE_ROUTER);
	uint256 public swap_threshold = 50 ether;

	receive() external payable {} // for Etherium Net(payable keyword)

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetValutCB(address indexed operator, address _busd_vault, address _wbnb_vault);
	event SetTokenCB(address indexed operator, address _arrow, address _target);
	event SetAssetDistributeRatio(address indexed operator, uint256 _bnd_ratio);
	event SetSwapThresholdCB(address indexed operator,  uint256 _threshold);
	event HandleStuckCB(address indexed operator, address _token,  uint256 _amount, address _to);
	event MakeJuiceCB(address indexed operator);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: Not authorized"); _; }
	
	//---------------------------------------------------------------
	// Getters and Setters
	//---------------------------------------------------------------
	function set_address_vault(address _address_busd_vault, address _address_bnb_vault) external onlyOperator
	{
		address_busd_vault = _address_busd_vault;
		address_bnb_vault = _address_bnb_vault;
		emit SetValutCB(msg.sender, _address_busd_vault, _address_bnb_vault);
	}

	function set_address_token(address _address_arrow, address _address_target) external onlyOperator
	{
		address_arrow_token = _address_arrow;
		_get_approve_pancake(address_arrow_token);

		address_target_token = _address_target;
		_get_approve_pancake(address_target_token);
		emit SetTokenCB(msg.sender, _address_arrow, _address_target);
	}

	function set_bnb_per_busd_vault_ratio(uint256 _bnd_ratio) external onlyOperator
	{
		bnb_per_busd_vault_ratio_e6 = _bnd_ratio;
		emit SetAssetDistributeRatio(msg.sender, _bnd_ratio);
	}

	function set_swap_threshold(uint256 _threshold) external onlyOperator
	{
		swap_threshold = _threshold;
		emit SetSwapThresholdCB(msg.sender, _threshold);
	}

	function handle_stuck(address _address_token, uint256 _amount, address _to) external onlyOperator nonReentrant
	{
		require(_address_token != address_arrow_token, "handle_stuck: Wrong token address");
		require(_address_token != address_target_token, "handle_stuck: Wrong token address");

		IERC20(_address_token).safeTransfer(_to, _amount);
		emit HandleStuckCB(msg.sender, _address_token, _amount, _to);
	}

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _arrow, address _target)
	{
		address_operator = msg.sender;
		address_arrow_token = _arrow;
		address_target_token = _target;
	}
	
	function make_juice() external nonReentrant whenNotPaused
	{
		_squeeze_juice(address_arrow_token);
		_squeeze_juice(address_target_token);

		_collect_my_busd();
		_collect_my_bnb();

		emit MakeJuiceCB(msg.sender);
	}

	function pause() external onlyOperator
	{ 
		_pause(); 
	}
	
	function resume() external onlyOperator
	{ 
		_unpause();
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _squeeze_juice(address _native_token) internal
	{
		uint256 amount_token = IERC20(_native_token).balanceOf(address(this));
		if(amount_token < swap_threshold)
			return;

		uint256 amount_busd = (amount_token * bnb_per_busd_vault_ratio_e6) / 1e6;
		uint256 amount_wbnb  = amount_token - amount_busd;

		_swap_to(_native_token, ADDRESS_BUSD, amount_busd);
		_swap_to(_native_token, ADDRESS_WBNB, amount_wbnb);
	}
	
	function _get_approve_pancake(address _address_token) private nonReentrant
	{
		IERC20 token = IERC20(_address_token);
		
		if(token.allowance(address(this), address(PancakeRouter)) == 0)
			token.safeApprove(address(PancakeRouter), type(uint256).max);
	}

	function _collect_my_busd() internal
	{
		uint256 my_busd_amount = IERC20(ADDRESS_BUSD).balanceOf(address(this));
		IERC20(ADDRESS_BUSD).transfer(address_busd_vault, my_busd_amount);
	}

	function _collect_my_bnb() internal
	{
		// wbnb -> bnb
		uint256 my_wbnb_amount = IERC20(ADDRESS_WBNB).balanceOf(address(this));
		IWETH(ADDRESS_WBNB).withdraw(my_wbnb_amount);
		uint256 my_bnb_amount = address(this).balance;
		payable(address_bnb_vault).transfer(my_bnb_amount);
	}
	
	function _swap_to(address _from, address _to, uint256 amount) internal
	{
		address[] memory best_path = _get_best_swap_root(_from, _to, amount);
		PancakeRouter.swapExactTokensForTokens(amount, 0, best_path, address(this), block.timestamp);
	}

	function _get_best_swap_root(address _from, address _to, uint256 _amount) internal view returns(address[] memory)
	{
		if(_to == ADDRESS_WBNB)
		{
			address[] memory swap_path_a = _get_swap_root(_from, _to);
			return swap_path_a;
		}
		else
		{
			address[] memory swap_path_a = _get_swap_root(_from, _to);
			address[] memory swap_path_b = _get_swap_root_though(_from, ADDRESS_WBNB, _to);

			uint256[] memory amount_path_a = PancakeRouter.getAmountsOut(_amount, swap_path_a);
			uint256[] memory amount_path_b = PancakeRouter.getAmountsOut(_amount, swap_path_b);

			if(amount_path_a[amount_path_a.length-1] > amount_path_b[amount_path_b.length-1])
				return swap_path_a;
			else
				return swap_path_b;
		}
	}

	function _get_swap_root(address _from, address _to) internal pure returns(address[] memory)
	{
		address[] memory path = new address[](2);
		path[0] = _from;
		path[1] = _to;
		return path;
	}

	function _get_swap_root_though(address _from, address _way_point, address _to) internal pure returns(address[] memory)
	{
		address[] memory path = new address[](3);
		path[0] = _from;
		path[1] = _way_point;
		path[2] = _to;
		return path;
	}
}


// File: contracts/interfaces/IBullish.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Interface
//---------------------------------------------------------
interface IBullish
{
	function set_chick(address _new_address) external;
	function set_cakebaker(address _new_address) external;
	function set_operator(address _new_operator) external;
	function set_xnft_address(address _address_nft) external;
	function get_pool_count() external returns(uint256);
	function set_deposit_fee(uint256 _pool_id, uint256 _fee) external;
	function set_withdrawal_fee(uint256 _pool_id, uint256 _fee_max, uint256 _fee_min, uint256 _period) external;
	function set_alloc_point(uint256 _pool_id, uint256 _alloc_point, bool _update_all) external;
	function set_emission_per_block(address _address_reward, uint256 _emission_per_block) external;
	function make_reward(address _address_token_reward, uint256 _emission_per_block, uint256 _emission_start_block_id, uint256 _emission_end_block_id) external;
	function add_nft_booster(uint256 _pool_id, uint256 _nft_id) external;
	function remove_nft_booster(uint256 _pool_id, uint256 _nft_id) external;
	function get_nft_booster_list(uint256 _pool_id) external returns(uint256[] memory);
	function has_nft(address _address_user) external view returns(bool);
	function get_pending_reward_amount(uint256 _pool_id, address _address_user) external returns(uint256);
	function pause() external;
	function resume() external;
}


// File: contracts/interfaces/ICakeBaker.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Interface
//---------------------------------------------------------
interface ICakeBaker
{
	function set_address_reward_vault(address _new_address) external;
	function set_operator(address _new_address) external;
	function set_controller(address _new_address) external;
	function set_pancake_masterchef(address _new_address) external;
	function add_pancake_farm(uint256 _pool_id, address _address_lp, address _address_token_reward) external returns(uint256);
	function delegate(address _address_lp_vault, address _address_lp, uint256 _amount) external returns(uint256);
	function retain(address _address_lp_vault, address _address_lp, uint256 _amount) external returns(uint256);
	function harvest() external;
	function pause() external;
	function resume() external;
}


// File: contracts/interfaces/IChick.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
interface IChick
{
	function pause() external;
	function resume() external;
	function set_address_vault(address _address_busd_vault, address _address_wbnb_vault) external;
	function set_address_token(address _address_arrow, address _address_target) external;
	function set_bnb_per_busd_vault_ratio(uint256 _bnd_ratio) external;
	function set_swap_threshold(uint256 _threshold) external;
	function handle_stuck(address _token, uint256 _amount, address _to) external;
	function make_juice() external;
}


// File: contracts/interfaces/IPancakeswapFarm.sol
// SPDX-License-Identifier: UNLICENSED
// File: contracts/interfaces/IPancakeswapFarm.sol
pragma solidity >= 0.8.17;

interface IPancakeswapFarm {
    function poolLength() external view returns(uint256);

    function userInfo() external view returns(uint256);

    // Return reward multiplier over the given _from to _to block.
    function getMultiplier(uint256 _from, uint256 _to)
        external
        view
        returns(uint256);

    // View function to see pending CAKEs on frontend.
    function pendingCake(uint256 _pid, address _user)
        external
        view
        returns(uint256);

    // Deposit LP tokens to MasterChef for CAKE allocation.
    function deposit(uint256 _pid, uint256 _amount) external;

    // Withdraw LP tokens from MasterChef.
    function withdraw(uint256 _pid, uint256 _amount) external;

    // Stake CAKE tokens to MasterChef
    function enterStaking(uint256 _amount) external;

    // Withdraw CAKE tokens from STAKING.
    function leaveStaking(uint256 _amount) external;

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external;
}

// File: contracts/interfaces/ITokenXBaseV3.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Interface
//---------------------------------------------------------
interface ITokenXBaseV3
{
	function set_chick(address _new_chick) external;
	function set_chick_work(bool _is_work) external;

	function toggle_block_send(address[] memory _accounts, bool _is_blocked) external;
	function toggle_block_recv(address[] memory _accounts, bool _is_blocked) external;

	function mint(address _to, uint256 _amount) external;
	function burn(uint256 _amount) external;
}


// File: contracts/interfaces/IXNFTBase.sol
// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
interface IXNFTBase is IERC1155
{
	function mint(address _to, uint256 _grade) external;
	function burn(uint256 _id, uint256 _amount) external;
	function get_grade(uint256 _id) external pure returns(uint256);
}


// File: contracts/interfaces/IXNFTHolder.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Interface
//---------------------------------------------------------
interface IXNFTHolder
{
	function deposit(uint256 _pool_id, address _address_user, uint256 _xnft_id) external;
	function withdraw(uint256 _pool_id, address _address_user, uint256 _xnft_id) external;
	function balanceOf(uint256 _pool_id, address _address_user) external view returns(uint256);
	function get_pool_tvl_boost_rate_e6(uint256 _pool_id) external view returns(uint256);
	function get_user_tvl_boost_rate_e6(uint256 _pool_id, address _address_user) external view returns(uint256);
	function has_nft(address _address_user) external view returns(bool);
	function set_operator(address _new_operator) external;
	function set_boost_rate(uint256 level, uint256 _level_prefix, uint256 _tvl_boost_rate_e6) external;
}


// File: contracts/MintMachine.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";

import "./interfaces/IXNFTBase.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract MintMachine is ReentrancyGuard, Pausable
{
	using SafeERC20 for IERC20;

	address public address_operator;

	uint256 public mint_start_block_id;
	uint256 public mint_end_block_id;

	uint256 public mint_price;
	uint256 public bouns_per_amount;
	
	address public address_deposit_token;
	address public address_deposit_vault;

	address public address_reward_vault;

	struct RewardInfo
	{
		uint256 gacha_probability_e6;

		bool is_nft;
		address address_reward_token;
		uint256 amount_or_grade;
		
		uint256 accu_reward_amount;
	}

	struct GachaLog
	{
		uint256 total_deposit_amount;
		uint256 total_atari_amount;
		uint256 bonus_mileage;
	}
	
	RewardInfo[] public reward_info;
	mapping(address => GachaLog) public log_gacha;

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetOperatorCB(address indexed operator, address _new_operator);
	event SetMintPriceCB(address indexed operator, address _address_deposit_token, uint256 _new_mint_price);
	event SetTokenVaultCB(address indexed operator, address _token_vault);
	event GachaCB(address indexed user, uint256 _cur_mint_amount);
	event SetAmountBonusCB(address indexed operator, uint256 _bonus_count);
	event SetPeriodCB(address indexed operator, uint256 _mint_start_block_id, uint256 _mint_end_block_id);
	event TestRandomCB(address indexed operator, uint256 random_number);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: Not authorized"); _; }
	
	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _address_deposit_vault, address _address_reward_vault)
	{
		address_operator = msg.sender;
		address_deposit_vault = _address_deposit_vault;
		address_reward_vault = _address_reward_vault;
	}

	function make_reward(uint256 _prob_e6, bool _is_nft, address _address_token_reward, uint256 _amount_or_grade) external onlyOperator
	{
		require(_prob_e6 > 0, "make_reward: Wrong probability");
		require(_amount_or_grade > 0, "make_reward: Wrong amount or grade");
		require(_address_token_reward != address(0), "make_reward: Wrong address");

		uint256 total_gacha_prob=0;
		for(uint256 i=0; i<reward_info.length; i++)
			total_gacha_prob += reward_info[i].gacha_probability_e6;

		require(total_gacha_prob + _prob_e6 <= 1000000, "constructor: Wrong probability for gacha");

		reward_info.push(RewardInfo({
			gacha_probability_e6: _prob_e6,

			is_nft: _is_nft,
			address_reward_token: _address_token_reward,
			amount_or_grade: _amount_or_grade,

			accu_reward_amount: 0
		}));
	}

	function gacha(uint256 _amount) external nonReentrant whenNotPaused
	{
		require(_amount > 0, "gacha: Wrong amount");
		//require(block.number <= mint_end_block_id, "gacha: the end");
		require(mint_price > 0 && address_deposit_token != address(0), "gacha: Wrong token address");

		address address_user = msg.sender;
		IERC20 deposit_token = IERC20(address_deposit_token);

		GachaLog storage log = log_gacha[address_user];

		uint256 bonus_count = (bouns_per_amount > 0)? ((log.bonus_mileage + _amount) / bouns_per_amount) : 0;		
		uint256 cur_atari_amount = 0;

		uint256 gacha_count = _amount + bonus_count;
		for(uint256 i=0; i<gacha_count; i++)
		{
			if(i < _amount) // is not free?
				deposit_token.safeTransferFrom(address_user, address_deposit_vault, mint_price);

			uint256 reward_serial = _get_random_reward_serial();
			if(reward_serial < reward_info.length)
			{
				_deploy_reward(reward_serial, address_user);
				cur_atari_amount += 1;
			}
		}

		log.total_deposit_amount += _amount;
		log.total_atari_amount += cur_atari_amount;
		log.bonus_mileage = (bonus_count > 0)? 
			(log.bonus_mileage - (bonus_count * bouns_per_amount)) :
			(log.bonus_mileage + _amount);

		emit GachaCB(address_user, cur_atari_amount);
	}

	function gacha_test(uint256 _amount) external nonReentrant whenNotPaused
	{
		require(_amount > 0, "gacha: Wrong amount");
		//require(block.number <= mint_end_block_id, "gacha: the end");
		require(mint_price > 0 && address_deposit_token != address(0), "gacha: Wrong token address");

		address address_user = msg.sender;
		IERC20 deposit_token = IERC20(address_deposit_token);

		GachaLog storage log = log_gacha[address_user];

		uint256 bonus_count = (bouns_per_amount > 0)? ((log.bonus_mileage + _amount) / bouns_per_amount) : 0;		
		uint256 cur_atari_amount = 0;

		uint256 gacha_count = _amount + bonus_count;
		for(uint256 i=0; i<gacha_count; i++)
		{
			if(i < _amount) // is not free?
				deposit_token.safeTransferFrom(address_user, address_deposit_vault, mint_price);

			uint256 reward_serial = _get_random_reward_serial();
			if(reward_serial < reward_info.length)
			{
				_deploy_reward(reward_serial, address_user);
				cur_atari_amount += 1;
			}
		}

		log.total_deposit_amount += _amount;
		log.total_atari_amount += cur_atari_amount;
		log.bonus_mileage = (bonus_count > 0)? 
			(log.bonus_mileage - (bonus_count * bouns_per_amount)) :
			(log.bonus_mileage + _amount);

		emit GachaCB(address_user, cur_atari_amount);
	}
	
	function deploy_nft_with_random_test12() public
	{
		uint256 reward_serial = _get_random_reward_serial();
		_deploy_reward_test(reward_serial, msg.sender);
	}

	function _deploy_reward_test(uint256 _reward_serial, address _address_receiver) internal
	{
		if(_reward_serial >= reward_info.length)
			return;

		RewardInfo storage reward = reward_info[_reward_serial];
		
		if(reward.is_nft == true)
			reward.accu_reward_amount += _deploy_xnft_test(reward, _address_receiver);
		else
			reward.accu_reward_amount += _deploy_erc20(reward, _address_receiver);
	}

	function _deploy_xnft_test(RewardInfo memory _reward, address _address_receiver) internal returns(uint256)
	{
		require(_reward.address_reward_token != address(0), "_deploy_xnft: Wrong reward vault address");

		IXNFTBase nft = IXNFTBase(_reward.address_reward_token);
		nft.mint(_address_receiver, _reward.amount_or_grade);
		
		return _reward.amount_or_grade;
	}
	
	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _get_random_reward_serial() internal view returns(uint256)
	{
		require(reward_info.length > 0, "_get_random_reward_serial: Wrong reward info");
		
		bytes32 keccak = keccak256(abi.encodePacked(msg.sender, block.timestamp, block.difficulty));
		uint256 random_hash = uint256(keccak);
		uint256 lucky_pot = random_hash % 1e6;

		uint256 cur_scope = 0;
		for(uint256 i=0; i < reward_info.length; i++)
		{
			cur_scope += reward_info[i].gacha_probability_e6; // 6500 -> 9000 -> 10000
			if(lucky_pot < cur_scope)
				return i;
		}

		return reward_info.length;
	}

	function _deploy_reward(uint256 _reward_serial, address _address_receiver) internal
	{
		if(_reward_serial >= reward_info.length)
			return;

		RewardInfo storage reward = reward_info[_reward_serial];
		
		if(reward.is_nft == true)
			reward.accu_reward_amount += _deploy_xnft(reward, _address_receiver);
		else
			reward.accu_reward_amount += _deploy_erc20(reward, _address_receiver);
	}

	function _deploy_xnft(RewardInfo memory _reward, address _address_receiver) internal returns(uint256)
	{
		require(_reward.address_reward_token != address(0), "_deploy_xnft: Wrong reward vault address");

		IXNFTBase nft = IXNFTBase(_reward.address_reward_token);
		nft.mint(_address_receiver, _reward.amount_or_grade);
		
		return _reward.amount_or_grade;
	}
	
	function _deploy_erc20(RewardInfo memory _reward, address _address_receiver) internal returns(uint256)
	{
		require(address_reward_vault != address(0), "_deploy_erc20: Wrong reward vault address");
		require(_reward.address_reward_token != address(0), "_deploy_erc20: Wrong reward vault address");

		IERC20 reward_token = IERC20(_reward.address_reward_token);
		reward_token.safeTransferFrom(address_reward_vault, _address_receiver, _reward.amount_or_grade);
		
		return _reward.amount_or_grade;
	}
	
	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------
	function set_operator(address _new_operator) external onlyOperator whenPaused
	{
		require(_new_operator != address(0), "set_address_reward_token: Wrong address");
		address_operator = _new_operator;
		emit SetOperatorCB(msg.sender, _new_operator);
	}

	function set_mint_price(address _address_deposit_token, uint256 _new_mint_price) external onlyOperator
	{
		require(_new_mint_price > 0, "set_mint_price: Wrong price");
		require(_address_deposit_token != address(0), "set_address_reward_token: Wrong address");
		
		address_deposit_token = _address_deposit_token;
		mint_price = _new_mint_price;

		emit SetMintPriceCB(msg.sender, address_deposit_token, _new_mint_price);
	}

	function set_token_vault(address _address_token_vault) external onlyOperator whenPaused
	{
		address_deposit_vault = _address_token_vault;
		emit SetTokenVaultCB(msg.sender, _address_token_vault);
	}

	function set_bouns_per_amount(uint256 _bonus_count) external onlyOperator whenPaused
	{
		bouns_per_amount = _bonus_count;
		emit SetAmountBonusCB(msg.sender, _bonus_count);
	}

	function set_period(uint256 _mint_start_block_id, uint256 _mint_end_block_id) external onlyOperator whenPaused
	{
		require(_mint_start_block_id < _mint_end_block_id, "set_period: Wrong block id");
		mint_start_block_id = (block.number > _mint_start_block_id)? block.number : _mint_start_block_id;
		mint_end_block_id = _mint_end_block_id;
		emit SetPeriodCB(msg.sender, _mint_start_block_id, _mint_end_block_id);
	}
	
	function pause() external onlyOperator
	{ 
		_pause(); 
	}
	
	function resume() external onlyOperator
	{ 
		_unpause();
	}
}


// File: contracts/MintMachineAROW.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./MintMachine.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract MintMachineAROW is MintMachine
{
	constructor(address _address_deposit_vault, address _address_reward_vault) MintMachine(_address_deposit_vault, _address_reward_vault)
	{
	}
}


// File: contracts/MintMachineBUSD.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./MintMachine.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract MintMachineBUSD is MintMachine
{
	constructor(address _address_deposit_vault, address _address_reward_vault) MintMachine(_address_deposit_vault, _address_reward_vault)
	{
	}
}


// File: contracts/MintMachinePreMint.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./MintMachine.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract MintMachinePreMint is MintMachine
{
	constructor(address _address_deposit_vault, address _address_reward_vault) MintMachine(_address_deposit_vault, _address_reward_vault)
	{
	}
}


// File: contracts/MintMachineTGET.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./MintMachine.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract MintMachineTGET is MintMachine
{
	constructor(address _address_deposit_vault, address _address_reward_vault) MintMachine(_address_deposit_vault, _address_reward_vault)
	{
	}
}


// File: contracts/Multicall.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0;
pragma experimental ABIEncoderV2;

/// @title Multicall - Aggregate results from multiple read-only function calls
/// @author Michael Elliot <mike@makerdao.com>
/// @author Joshua Levine <joshua@makerdao.com>
/// @author Nick Johnson <arachnid@notdot.net>

contract Multicall {
	struct Call {
		address target;
		bytes callData;
	}

	function aggregate(Call[] memory calls) public returns(uint256 blockNumber, bytes[] memory returnData) {
		blockNumber = block.number;

		returnData = new bytes[](calls.length);
		for(uint256 i = 0; i < calls.length; i++) {
			(bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);
			require(success);
			returnData[i] = ret;
		}
	}

	// Helper functions
	function getEthBalance(address addr) public view returns(uint256 balance) {
		balance = addr.balance;
	}

	function getBlockHash(uint256 blockNumber) public view returns(bytes32 blockHash) {
		blockHash = blockhash(blockNumber);
	}

	function getLastBlockHash() public view returns(bytes32 blockHash) {
		blockHash = blockhash(block.number - 1);
	}

	function getCurrentBlockTimestamp() public view returns(uint256 timestamp) {
		timestamp = block.timestamp;
	}

	function getCurrentBlockDifficulty() public view returns(uint256 difficulty) {
		difficulty = block.difficulty;
	}

	function getCurrentBlockGasLimit() public view returns(uint256 gaslimit) {
		gaslimit = block.gaslimit;
	}

	function getCurrentBlockCoinbase() public view returns(address coinbase) {
		coinbase = block.coinbase;
	}
}


// File: contracts/Rooster.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract Rooster is ReentrancyGuard, Pausable
{
	using SafeERC20 for IERC20;

	struct UserInfo
	{
		uint256 staked_amount;
		uint256 locked_reward_amount;
		uint256 paid_reward_amount;
		uint256 next_harvest_time;
		
		uint256 last_deposit_time; // block timestamp unit is seconds
		uint256 withdraw_locking_period;
	}

	struct PoolInfo
	{
		address address_token_stake; // Target
		address address_token_reward; // Arrow or BUSD

		uint256 last_rewarded_block_id;
		uint256 accu_reward_amount_per_share_e12;
		uint256 reward_per_block_min;
		uint256 reward_per_block_max;
	}

	address public address_operator;

	uint256 public emit_start_block_id;
	uint256 public emit_end_block_id;
	
	uint256 public locking_period_mim = 7 days;
	uint256 public locking_period_max = 30 days;
	uint256 constant MAX_WITHDRAW_LOCK = 30 days;
	
	PoolInfo[] public pool_info; // pool_id / pool_info, reward_info
	mapping(address => mapping(address => bool)) public is_pool_exist; // stake / reward
	mapping(uint256 => mapping(address => UserInfo)) public user_info; // pool_id / user_adddress / user_info

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetOperatorCB(address indexed operator, address _new_operator);
	event UpdateEmissionRateCB(address indexed operator, uint256 _reward_per_block_min, uint256 _reward_per_block_max);
	event SetLockingPeriodCB(address indexed operator, uint256 _min_time, uint256 _max_time);
	event MakePoolCB(address indexed operator, uint256 _new_pool_id);
	event DepositCB(address indexed _user, uint256 _pool_id, uint256 _amount);
	event WithdrawCB(address indexed _user, uint256 _pool_id, uint256 _amount);
	event HarvestCB(address indexed _user, uint256 _pool_id, uint256 _amount);

	event EmergencyWithdrawCB(address indexed user, uint256 _pool_id, uint256 _amount);
	event HandleStuckCB(address indexed _user, uint256 _amount);
	event SetPeriodCB(uint256 _emit_start_block_id, uint256 _emit_end_block_id);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier uniquePool(address _address_token_stake, address _address_token_reward) {
		require(is_pool_exist[_address_token_stake][_address_token_reward] == false, "uniquePool: duplicated"); _; }
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: Not authorized"); _; }
	
	//---------------------------------------------------------------
	// External Methodd
	//---------------------------------------------------------------
	constructor()
	{
		address_operator = msg.sender;
	}

	function make_pool(address _address_token_stake, address _address_token_reward,
		uint256 _reward_per_block_min, uint256 _reward_per_block_max, bool _refresh_reward)
		public onlyOperator uniquePool(_address_token_stake, _address_token_reward) returns(uint256)
	{
		if(_refresh_reward)
			refresh_reward_per_share_all();

		is_pool_exist[_address_token_stake][_address_token_reward] = true;

		uint256 _last_rewarded_block_id = (block.number > emit_start_block_id)? block.number : emit_start_block_id;
		pool_info.push(PoolInfo({
			address_token_stake: _address_token_stake,
			address_token_reward: _address_token_reward,
			last_rewarded_block_id: _last_rewarded_block_id,
			accu_reward_amount_per_share_e12: 0,
			reward_per_block_min: _reward_per_block_min,
			reward_per_block_max: _reward_per_block_max
		}));

		uint new_pool_id = pool_info.length-1;
		emit MakePoolCB(msg.sender, new_pool_id);
		return new_pool_id;
	}

	function deposit(uint256 _pool_id, uint256 _amount, uint256 _period) public nonReentrant whenNotPaused
	{
		require(_pool_id < pool_info.length, "deposit: Wrong pool id");
		_refresh_reward_per_share(_pool_id);

		require(_period >= locking_period_mim, "deposit: Wrong locking period");
		require(_period <= locking_period_max, "deposit: Wrong locking period");

		address address_user = msg.sender;
		UserInfo storage user = user_info[_pool_id][address_user];
		PoolInfo storage pool = pool_info[_pool_id];

		_collect_reward(pool, user, address_user);

		if(_amount > 0)
		{
			// 디파짓이 0일때만 기간 설정 가능
			require(_period != user.withdraw_locking_period && user.staked_amount < 100, "deposit: Unstake previous all amount first."); // 100 wei is nearly zero.

			// User -> Rooster
			IERC20 lp_token = IERC20(pool.address_token_stake);
			lp_token.safeTransferFrom(address_user, address(this), _amount);

			// Write down deposit amount on Rooster's ledger
			user.staked_amount += _amount;
			user.last_deposit_time = block.timestamp; // 추가로 돈 넣으면 여태 지나간 시간 리셋
			user.withdraw_locking_period = _period;
		}

		emit DepositCB(address_user, _pool_id, user.staked_amount);
	}

	function withdraw(uint256 _pool_id, uint256 _amount) public nonReentrant
	{
		require(_pool_id < pool_info.length, "withdraw: Wrong pool id.");

		_refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = user_info[_pool_id][address_user];

		require(user.staked_amount >= _amount, "withdraw: insufficient amount");

		uint256 unlock_time = user.last_deposit_time + user.withdraw_locking_period;
		require(block.timestamp >= unlock_time, "withdraw: withdraw is locked.");

		_collect_reward(pool, user, address_user);

		if(_amount > 0)
		{
			user.staked_amount -= _amount;
			IERC20(pool.address_token_stake).safeTransfer(address(address_user), _amount);
		}

		emit WithdrawCB(address_user, _pool_id, _amount);
	}

	function refresh_reward_per_share_all() public
	{
		for(uint256 pid = 0; pid < pool_info.length; pid++)
			refresh_reward_per_share(pid);
	}

	function refresh_reward_per_share(uint256 _pool_id) public
	{
		require(_pool_id < pool_info.length, "refresh_reward_per_share: Wrong pool id.");
		if(emit_start_block_id == 0) return;
 
		PoolInfo storage pool = pool_info[_pool_id];
		if(block.number <= pool.last_rewarded_block_id)
			return;

		uint256 cur_block_id = (block.number > emit_end_block_id)? emit_end_block_id : block.number;
		uint256 elapsed_block_count = cur_block_id - pool.last_rewarded_block_id;
		uint256 total_staked_amount = IERC20(pool.address_token_stake).balanceOf(address(this));
		if(total_staked_amount > 0 && elapsed_block_count > 0)
		{
			uint256 max_reward_amount = elapsed_block_count * pool.reward_per_block_max;
			pool.accu_reward_amount_per_share_e12 += (max_reward_amount * 1e12 / total_staked_amount);
			pool.last_rewarded_block_id = cur_block_id;
		}
	}

	function harvest(uint256 _pool_id) public nonReentrant
	{
		require(_pool_id < pool_info.length, "harvest: Wrong pool id.");

		_refresh_reward_per_share(_pool_id);

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = user_info[_pool_id][address_user];

		uint256 amount = _collect_reward(pool, user, address_user);
		
		emit HarvestCB(address_user, _pool_id, amount);
	}

	function emergency_withdraw(uint256 _pool_id) public nonReentrant
	{
		require(_pool_id < pool_info.length, "emergency_withdraw: Wrong pool id.");

		address address_user = msg.sender;
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = user_info[_pool_id][address_user];

		uint256 amount = user.staked_amount;
		user.staked_amount = 0;
		user.paid_reward_amount = 0;

		IERC20 stake_token = IERC20(pool.address_token_stake);
		stake_token.safeTransfer(address_user, amount);

		emit EmergencyWithdrawCB(address_user, _pool_id, amount);
	}

	function handle_stuck(address _address_token, uint256 _amount) public onlyOperator nonReentrant
	{
		for(uint256 i=0; i<pool_info.length; i++)
			require(_address_token != pool_info[i].address_token_reward, "handle_stuck: Wrong token address");

		address address_user = msg.sender;
		IERC20(_address_token).safeTransfer(address_user, _amount);
		emit HandleStuckCB(address_user, _amount);
	}

	function pause() external onlyOperator
	{ 
		_pause(); 
	}
	
	function resume() external onlyOperator
	{ 
		_unpause();
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _refresh_reward_per_share(uint256 _pool_id) internal
	{
		require(_pool_id < pool_info.length, "_refresh_reward_per_share: Wrong pool id.");

		PoolInfo storage pool = pool_info[_pool_id];
		if(block.number <= pool.last_rewarded_block_id)
			return;

		uint256 elapsed_block_count = block.number - pool.last_rewarded_block_id;
		uint256 total_staked_amount = IERC20(pool.address_token_stake).balanceOf(address(this));
		if(total_staked_amount > 0 && elapsed_block_count > 0)
		{
			uint256 max_reward_amount = elapsed_block_count * pool.reward_per_block_max;
			pool.accu_reward_amount_per_share_e12 += (max_reward_amount * 1e12 / total_staked_amount);
			pool.last_rewarded_block_id = block.number;
		}
	}

	function _collect_reward(PoolInfo storage _pool, UserInfo storage _user, address _address_user) internal returns(uint256)
	{
		if(_user.staked_amount == 0)
			return 0;
		
		uint256 min_max_ratio_e12 = _pool.reward_per_block_max * 1e12 / _pool.reward_per_block_min;
		uint256 period_weight_e12 = min_max_ratio_e12 * _user.withdraw_locking_period / locking_period_max;

		uint256 user_share = _user.staked_amount * _pool.accu_reward_amount_per_share_e12 / 1e12;
		uint256 final_user_reward = user_share * period_weight_e12 / 1e12;

		uint256 pending_reward_amount = final_user_reward - _user.paid_reward_amount;
		if(pending_reward_amount > 0)
		{
			if(_pool.address_token_reward != address(0))
				_safe_reward_transfer(_pool.address_token_reward, _address_user, pending_reward_amount);

			_user.paid_reward_amount += pending_reward_amount;
		}

		return pending_reward_amount;
	}

	function _safe_reward_transfer(address _address_token_reward, address _to, uint256 _amount) internal
	{
		// Rooster -> User
		IERC20 reward_token = IERC20(_address_token_reward);
		uint256 cur_reward_balance = reward_token.balanceOf(address(this));

		if(_amount > cur_reward_balance)
			reward_token.safeTransfer(_to, cur_reward_balance);
		else
			reward_token.safeTransfer(_to, _amount);
	}
		
	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------
	function set_operator(address _new_operator) external onlyOperator
	{
		require(_new_operator != address(0), "set_address_reward_token: Wrong address");
		address_operator = _new_operator;
		emit SetOperatorCB(msg.sender, _new_operator);
	}
	
	function set_period(uint256 _mint_start_block_id, uint256 _mint_end_block_id) external onlyOperator whenPaused
	{
		require(_mint_start_block_id < _mint_end_block_id, "set_period: Wrong block id");
		emit_start_block_id = (block.number > _mint_start_block_id)? block.number : _mint_start_block_id;
		emit_end_block_id = _mint_end_block_id;
		emit SetPeriodCB(_mint_start_block_id, _mint_end_block_id);
	}

	function update_emission_rate(uint256 _pool_id, uint256 _reward_per_block_min, uint256 _reward_per_block_max) public onlyOperator
	{
		require(_pool_id < pool_info.length, "update_emission_rate: Wrong pool id.");
		require(_reward_per_block_min <= _reward_per_block_max, "update_emission_rate: Wrong reward amount");

		refresh_reward_per_share_all();

		pool_info[_pool_id].reward_per_block_min = _reward_per_block_min;
		pool_info[_pool_id].reward_per_block_max = _reward_per_block_max;
		emit UpdateEmissionRateCB(msg.sender, _reward_per_block_min, _reward_per_block_max);
	}

	function get_pool_count() external view returns(uint256)
	{
		return pool_info.length;
	}

	function set_locking_period_range(uint256 _min_time, uint256 _max_time) external onlyOperator
	{
		require(_max_time <= MAX_WITHDRAW_LOCK, "set_locking_period: Wrong locking period");
		locking_period_mim = _min_time;
		locking_period_max = _max_time;
		emit SetLockingPeriodCB(msg.sender, _min_time, _max_time);
	}

}


// File: contracts/TokenArrow.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./TokenXBaseV3.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract TokenArrow is TokenXBaseV3
{
	constructor(address _address_vault, uint256 _initial_mint_amount) TokenXBaseV3("ARROW on xTEN", "TokenArrow")
	{
		tax_rate_send_e6 = 100000; // 10%
		tax_rate_recv_e6 = 20000; // 2%

		_mint(_address_vault, _initial_mint_amount);
	}
}


// File: contracts/TokenBull.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract TokenBull is ERC20
{
	constructor(address _address_vault, uint256 _initial_mint_amount) ERC20("BULL on xTEN", "BULL")
	{
		_mint(_address_vault, _initial_mint_amount);
	}
}


// File: contracts/TokenTarget.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./TokenXBaseV3.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract TokenTarget is TokenXBaseV3
{
	constructor(address _address_vault, uint256 _initial_mint_amount) TokenXBaseV3("TARGET on xTEN", "TokenTarget")
	{
		tax_rate_send_e6 = 100000; // 10%
		tax_rate_recv_e6 = 50000; // 5%

		_mint(_address_vault, _initial_mint_amount);
	}
}


// File: contracts/TokenXBaseV3.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./interfaces/IChick.sol";
import "./interfaces/IBullish.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract TokenXBaseV3 is ERC20, Ownable
{
	using SafeERC20 for IERC20;

	uint256 public constant MAX_TAX_BUY = 50100; // 5%
	uint256 public constant MAX_TAX_SELL = 200100; // 20%
	uint256 public constant TAX_FREE = 888888; // 8888 means zero tax in this code

	address public constant ADDRESS_BURN = 0x000000000000000000000000000000000000dEaD;

	address public address_operator;
	address public address_chick;
	address public address_controller1; // for BullishDrill
	address public address_controller2; // for BullishArchery

	bool private chick_work = false;
	bool private is_chick_busy = false;

	uint256 internal tax_rate_send_e6 = MAX_TAX_SELL;
	uint256 internal tax_rate_recv_e6 = MAX_TAX_BUY;
	uint256 internal tax_rate_send_with_nft_e6 = MAX_TAX_SELL;
	uint256 internal tax_rate_recv_with_nft_e6 = MAX_TAX_BUY;
	
	mapping(address => bool) private is_send_blocked;
	mapping(address => bool) private is_recv_blocked;
	mapping(address => bool) private is_sell_blocked;

	mapping(address => bool) private is_tax_free_send;
	mapping(address => bool) private is_tax_free_recv;
	mapping(address => uint256) private send_limit_amount;

	mapping(address => bool) private is_address_lp;
	mapping(address => bool) private is_internal_contract;

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetOperatorCB(address indexed operator, address _new_address_operator);
	event SetControllerCB(address indexed operator, address _controller1, address _controller2);
	event SetChickCB(address indexed operator, address _chick);
	event SetSendTaxFreeCB(address indexed operator, address[] _address, bool _is_free);
	event SetRecvTaxFreeCB(address indexed operator, address[] _address, bool _is_free);
	event SetNativeLPAddressCB(address indexed operator, address _lp_address, bool _is_enabled);
	event SetSellAmountLimitCB(address indexed operator, address _lp_address, uint256 _limit);
	event ToggleTransferPauseCB(address indexed operator, bool _is_paused);
	event ToggleBlockSendCB(address indexed operator, address[] _accounts, bool _is_blocked);
	event ToggleBlockRecvCB(address indexed operator, address[] _accounts, bool _is_blocked);
	event SetSendTaxCB(address indexed operator, uint256 _tax_rate, uint256 _tax_with_nft_rate);
	event SetRecvTaxCB(address indexed operator, uint256 _tax_rate, uint256 _tax_with_nft_rate);
	event SetChickWorkCB(address indexed operator, bool _is_work);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(address_operator == msg.sender, "onlyOperator: caller is not the operator");	_; }
	modifier onlyController() { require(address_controller1 == msg.sender || address_controller2 == msg.sender, "onlyController: caller is not the controller"); _; }

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)
	{
		address_operator = msg.sender;

		is_tax_free_send[address_operator] = true;
		is_tax_free_recv[address_operator] = true;

		is_tax_free_send[ADDRESS_BURN] = true;
		is_tax_free_recv[ADDRESS_BURN] = true;
	}

	function mint(address _to, uint256 _amount) external onlyController
	{
		_mint(_to, _amount);
	}

	function burn(uint256 _amount) external onlyOwner
	{
		_burn(msg.sender, _amount);
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _transfer(address sender, address recipient, uint256 amount) internal virtual override
	{
		require(sender != address(0), "_transfer: Wrong sender address");
		require(!is_send_blocked[sender], "_transfer: Sender is blocked by contract.");

		require(recipient != address(0), "_transfer: Wrong recipient address");
		require(!is_recv_blocked[recipient], "_transfer: Recipient is blocked by contract.");

		_check_send_limit(sender, recipient, amount);

		_make_juice_by_chick(sender, recipient);
		
		uint256 cur_tax_e6 = (address_chick == address(0) || chick_work == false)? TAX_FREE :
			_get_tax_rate_e6(sender, recipient);
		
		if(cur_tax_e6 == TAX_FREE)
			super._transfer(sender, recipient, amount);
		else
		{
			uint256 tax_amount = amount * cur_tax_e6 / 1e6;
			uint256 final_send_amount = amount - tax_amount;

			super._transfer(sender, address_chick, tax_amount); // native token tax
			super._transfer(sender, recipient, final_send_amount);
		}
	}

	function _make_juice_by_chick(address _from, address _to) internal
	{
		if(chick_work == true && is_chick_busy == false && address_chick != address(0))
		{
			if(!is_internal_contract[_from] && !is_internal_contract[_to])
			{
				IChick chick = IChick(address_chick);
				is_chick_busy = true;
					chick.make_juice();
				is_chick_busy = false;
			}
		}
	}

	function _check_send_limit(address _from, address _to, uint256 _amount) internal view
	{
		if(is_address_lp[_to]) // User -> LP // Sell
			require(_amount <= send_limit_amount[_from], "_check_send_limit: Sender is sending-limited.");
	}

	function _get_tax_rate_e6(address _from, address _to) internal view returns(uint256)
	{		
		// 지갑에서 지갑으로 전송은 sell, buy가 아닌것으로 처리
		uint256 tax_rate_e6 = TAX_FREE;

		// LP에 들어오고 나간다는 것이 sell, buy를 말함
		// LP에서 들어오고 나가는건 무조건 택스를 떼되, 
		if(is_address_lp[_from]) // LP -> User(LPTool) // Buy
		{
			// 사이트에서 하는건 텍스를 안 떼게
			// (중간에 넘기는 놈 LPTool을 두고 그 놈을 화이트리스트 처리)
			if(!is_tax_free_send[_to])
				tax_rate_e6 = tax_rate_send_e6;
			else if(address_controller1 != address(0))
			{
				IBullish controller = IBullish(address_controller1);
				if(controller.has_nft(_to))
					tax_rate_e6 = tax_rate_send_with_nft_e6;
			}
			else if(address_controller2 != address(0))
			{
				IBullish controller = IBullish(address_controller2);
				if(controller.has_nft(_to))
					tax_rate_e6 = tax_rate_send_with_nft_e6;
			}
		}
		else if(is_address_lp[_to]) // User(LPTool) -> LP // Sell
		{
			if(!is_tax_free_recv[_from])
				tax_rate_e6 = tax_rate_recv_e6;
			else if(address_controller1 != address(0))
			{
				IBullish controller = IBullish(address_controller1);
				if(controller.has_nft(_from))
					tax_rate_e6 = tax_rate_recv_with_nft_e6;
			}
			else if(address_controller2 != address(0))
			{
				IBullish controller = IBullish(address_controller2);
				if(controller.has_nft(_from))
					tax_rate_e6 = tax_rate_recv_with_nft_e6;
			}
		}

		return tax_rate_e6;
	}

	function _exchange_internal_address(address _address_old, address _address_new) private
	{
		if(_address_old != address(0))
		{
			is_internal_contract[_address_old] = false;
			is_tax_free_send[_address_old] = false;
			is_tax_free_recv[_address_old] = false;
		}

		if(_address_new != address(0))
		{
			is_internal_contract[_address_new] = true;
			is_tax_free_send[_address_new] = true;
			is_tax_free_recv[_address_new] = true;			
		}
	}

	//---------------------------------------------------------------
	// Setters
	//---------------------------------------------------------------
	function set_operator(address _new_address) public onlyOperator
	{
		require(_new_address != address(0), "set_operator: Wrong address");

		_exchange_internal_address(address_operator, _new_address);
		address_operator = _new_address;

		emit SetOperatorCB(msg.sender, _new_address);
	}

	function set_controller(address _address_ctrl1, address _address_ctrl2) public onlyOperator
	{
		require(address_controller1 == address(0), "set_controller: Already set");
		require(address_controller2 == address(0), "set_controller: Already set");

		require(_address_ctrl1 != address(0), "set_controller: Wrong address");
		require(_address_ctrl2 != address(0), "set_controller: Wrong address");

		address_controller1 = _address_ctrl1;
		address_controller2 = _address_ctrl2;

		emit SetControllerCB(msg.sender, address_controller1, address_controller2);
	}

	function set_chick(address _new_chick) external onlyController
	{
		require(!is_chick_busy, "set_chick: the chick is working.");

		_exchange_internal_address(address_chick, _new_chick);
		address_chick = _new_chick;
		chick_work = true;

		emit SetChickCB(msg.sender, address_chick);
	}

	function set_chick_work(bool _is_work) external onlyOperator
	{
		chick_work = _is_work;
		emit SetChickWorkCB(msg.sender, _is_work);
	}

	function set_send_tax_free(address[] memory _address_list, bool _is_free) public onlyOperator
	{
		require(_address_list.length > 0, "set_send_tax_free: Wrong address");
		
		for(uint256 i=0; i<_address_list.length; i++)
		{
			require(_address_list[i] != address(0), "set_send_tax_free: Wrong address");
			is_tax_free_send[_address_list[i]] = _is_free;
		}

		emit SetSendTaxFreeCB(msg.sender, _address_list, _is_free);
	}

	function set_recv_tax_free(address[] memory _address_list, bool _is_free) public onlyOperator
	{
		require(_address_list.length > 0, "set_recv_tax_free: Wrong address");
		
		for(uint256 i=0; i<_address_list.length; i++)
		{
			require(_address_list[i] != address(0), "set_recv_tax_free: Wrong address");
			is_tax_free_recv[_address_list[i]] = _is_free;
		}
		
		emit SetRecvTaxFreeCB(msg.sender, _address_list, _is_free);
	}

	function set_lp_address(address _lp_address, bool _is_enabled) public onlyOperator
	{
		require(_lp_address != address(0), "set_native_lp_address_list: Wrong address");
		is_address_lp[_lp_address] = _is_enabled;
		emit SetNativeLPAddressCB(msg.sender, _lp_address, _is_enabled);
	}

	function set_sell_amount_limit(address _address_to_limit, uint256 _limit) public onlyOperator
	{
		require(_address_to_limit != address(0), "set_sell_amount_limit: Wrong address");
		require(_limit > totalSupply() / 1000, "set_sell_amount_limit: Wrong limit"); // 0.1% of totalSupply

		send_limit_amount[_address_to_limit] = _limit;
		emit SetSellAmountLimitCB(msg.sender, _address_to_limit, _limit);
	}

	function toggle_block_send(address[] memory _accounts, bool _is_blocked) external onlyOperator
	{
		for(uint256 i=0; i < _accounts.length; i++)
			is_send_blocked[_accounts[i]] = _is_blocked;
		
		emit ToggleBlockSendCB(msg.sender, _accounts, _is_blocked);
	}

	function toggle_block_recv(address[] memory _accounts, bool _is_blocked) external onlyOperator
	{
		for(uint256 i=0; i < _accounts.length; i++)
			is_recv_blocked[_accounts[i]] = _is_blocked;
		
		emit ToggleBlockRecvCB(msg.sender, _accounts, _is_blocked);
	}

	function set_send_tax_e6(uint256 _tax_rate, uint256 _tax_with_nft_rate) public onlyOperator
	{
		require(_tax_rate < MAX_TAX_SELL, "set_send_tax_e6: tax rate manimum exceeded.");
		require(_tax_with_nft_rate < MAX_TAX_SELL, "set_send_tax_e6: tax rate manimum exceeded.");

		tax_rate_send_e6 = _tax_rate;
		tax_rate_send_with_nft_e6 = _tax_with_nft_rate;
		emit SetSendTaxCB(msg.sender, _tax_rate, _tax_with_nft_rate);
	}
	
	function set_recv_tax_e6(uint256 _tax_rate, uint256 _tax_with_nft_rate) public onlyOperator
	{
		require(_tax_rate < MAX_TAX_BUY, "set_recv_tax_e6: tax rate manimum exceeded.");
		require(_tax_with_nft_rate < MAX_TAX_BUY, "set_recv_tax_e6: tax rate manimum exceeded.");

		tax_rate_recv_e6 = _tax_rate;
		tax_rate_recv_with_nft_e6 = _tax_with_nft_rate;
		emit SetRecvTaxCB(msg.sender, _tax_rate, _tax_with_nft_rate);
	}
}


// File: contracts/XNFTArrow.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./XNFTBase.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract XNFTArrow is XNFTBase
{
	constructor(string memory uri_) XNFTBase(uri_)
	{
		address_operator = msg.sender;
	}
}


// File: contracts/XNFTBase.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract XNFTBase is ERC1155
{
	address public address_operator;
	address public address_controller;

	mapping(uint256 => uint256) public minted_amount_list; // grade_e6 / mint amount

	// URI Format
	// ipfs://bafybeidajqcl52q4jlk7dz3wzfj4f665x6mzdjer5abzeh4ib7p6dz6cme
	// https://ipfs.io/ipfs/CID/{id}.json
	// https://dweb.link/ipfs/bafybeidajqcl52q4jlk7dz3wzfj4f665x6mzdjer5abzeh4ib7p6dz6cme/{id}.json
	// https://bafkreigdgroagua3ti2yfmzbntdf6r6fmeirb2qrcsbn5ek2di6mqpmb6a.ipfs.dweb.link/
	string internal uri_base_str = "https://dweb.link/ipfs/";
	string internal uri_param_str = "/{id}.json";
	string internal cid_str;

	string[] internal metadata_list;
	// OpenSea MetaData Format
	// {
	//   "description": "Friendly OpenSea Creature that enjoys long swims in the ocean.",
	//   "external_url": "https://openseacreatures.io/3",
	//   "image": "https://storage.googleapis.com/opensea-prod.appspot.com/puffs/3.png",
	//   "name": "Dave Starbelly",
	//   "attributes": [ ... ]
	// }

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event SetOperatorCB(address indexed operator, address _new_address);
	event SetControllerCB(address indexed operator, address _new_address);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(address_operator == msg.sender, "onlyOperator: caller is not the operator");	_; }
	modifier onlyController() { require(address_controller == msg.sender, "onlyController: caller is not the controller"); _; }

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(string memory CID) ERC1155(string.concat(string.concat(uri_base_str, CID), uri_param_str))
	{
		address_operator = msg.sender;
		cid_str = CID;
	}

	function mint(address _to, uint256 _grade) external onlyController
	{
		require(_grade > 0 && _grade < 10, "mint: wrong grade");
		require(minted_amount_list[_grade] < 1e6, "mint: total mint limit exceed");

		uint256 nft_id = get_nft_id(_grade, minted_amount_list[_grade]);

		_mint(_to, nft_id, 1, "");

		minted_amount_list[_grade] += 1;
	}

	function burn(uint256 _id, uint256 _amount) external onlyOperator
	{
		_burn(msg.sender, _id, _amount);
	}

	function get_grade(uint256 _id) public pure returns(uint256)
	{
		return _id / 1e6;
	}

	function get_nft_id(uint256 _grade, uint256 _serial) public pure returns(uint256)
	{
		return _grade * 1e6 + _serial;
	}
		
	function uri(uint256 _id) public view virtual override returns(string memory) {
		string memory grade_str = uint2str(get_grade(_id));

		string memory instance_uri = uri_base_str;
		instance_uri = string.concat(instance_uri, cid_str);
		instance_uri = string.concat(instance_uri, "/");
		instance_uri = string.concat(instance_uri, grade_str);
		instance_uri = string.concat(instance_uri, ".json");
		
		return instance_uri;
	}

	function get_list(uint256 _count) public view returns(uint256[] memory) 
	{
		require(msg.sender != address(0), "get_list: Wrong sender address");

		uint256 count = (_count > 0)? _count : 10;

		uint256[] memory id_list = new uint256[](count);
		
		uint256 cur_len = 0;
		for(uint256 grade=1; grade < 10; grade++) 
		{
			uint256 minted_amount = minted_amount_list[grade];
			for(uint256 i=minted_amount; i > 0; i--) 
			{
				uint256 nft_id = get_nft_id(grade, i-1);
				if(balanceOf(msg.sender, nft_id) > 0)
				{
					id_list[cur_len] = nft_id;
					cur_len += 1;
					if(cur_len >= _count)
						return id_list;
				}
			}
		}

		return id_list;
	}

	//---------------------------------------------------------------
	// Setters
	//---------------------------------------------------------------
	function set_operator(address _new_address) public onlyOperator
	{
		require(_new_address != address(0), "set_operator: Wrong address");

		address_operator = _new_address;
		emit SetOperatorCB(msg.sender, _new_address);
	}

	function set_controller(address _new_address) public onlyOperator
	{
		require(_new_address != address(0), "set_controller: Wrong address");

		address_controller = _new_address;
		emit SetControllerCB(msg.sender, _new_address);
	}

	function uint2str(uint256 _i) internal pure returns(string memory str)
	{
		if(_i == 0)
			return "0";
		
		uint256 j = _i;
		uint256 length;
		while(j != 0)
		{
			length++;
			j /= 10;
		}
		
		bytes memory bstr = new bytes(length);
		uint256 k = length;
		j = _i;
		
		while(j != 0)
		{
			bstr[--k] = bytes1(uint8(48 + j % 10));
			j /= 10;
		}

		str = string(bstr);
	}
}


// File: contracts/XNFTBullish.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "./XNFTBase.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract XNFTBullish is XNFTBase
{
	constructor(string memory uri_) XNFTBase(uri_)
	{
		address_operator = msg.sender;
	}
}


// File: contracts/XNFTHolder.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.8.17;

//---------------------------------------------------------
// Imports
//---------------------------------------------------------
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol";

//---------------------------------------------------------
// Contract
//---------------------------------------------------------
contract XNFTHolder is ReentrancyGuard, Pausable, ERC1155Holder
{
	struct LevelInfo
	{
		uint256 level_prefix;
		uint256 tvl_boost_rate_e6;
	}

	struct UserInfo
	{
		mapping(uint256 => bool) xnft_id_list;
		uint256 xnft_amount;
		uint256 tvl_boost_rate_e6;
	}

	struct PoolInfo
	{
		uint256 tvl_boost_rate_e6;
		mapping(address => UserInfo) user_info; // user_adddress / user_info
	}
	
	//uint256[] tvl_boost_rate_e6 = [300, 600, 900];
	//uint256[] xnft_level_prefix = [1000000, 2000000, 3000000];

	address public address_operator;
	address public address_nft;

	mapping(uint256 => LevelInfo) public level_info; // level_id(1, 2, 3...) / level_info
	mapping(uint256 => PoolInfo) public pool_info; // pool_id / pool_info
	mapping(uint256 => bool) public is_deposited; // xnft_id / is_staked
	mapping(address => bool) public has_xnft; // user_address / has_nft

	//---------------------------------------------------------------
	// Front-end connectors
	//---------------------------------------------------------------
	event DepositCB(address indexed user, uint256 _xnft_id);
	event WithdrawCB(address indexed user, uint256 _xnft_id);
	event SetOperatorCB(address indexed operator, address _new_operator);

	//---------------------------------------------------------------
	// Modifier
	//---------------------------------------------------------------
	modifier onlyOperator() { require(msg.sender == address_operator, "onlyOperator: not authorized"); _; }

	//---------------------------------------------------------------
	// External Method
	//---------------------------------------------------------------
	constructor(address _address_nft)
	{
		address_operator = msg.sender;
		address_nft = _address_nft;
	}

	function deposit(uint256 _pool_id, address _address_user, uint256 _xnft_id) external whenNotPaused nonReentrant
	{
		require(is_deposited[_xnft_id] == false, "deposit: already deposited xnft");

		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = pool.user_info[_address_user];
		require(user.xnft_id_list[_xnft_id] == false, "deposit: already deposited xnft");

		// User -> Bullish Booster
		IERC1155 stake_token = IERC1155(address_nft);
		stake_token.safeTransferFrom(_address_user, address(this), _xnft_id, 1, "");

		uint256 level = _get_nft_level(_xnft_id);
		pool.tvl_boost_rate_e6 += level_info[level].tvl_boost_rate_e6;

		user.xnft_id_list[_xnft_id] = true;
		user.xnft_amount += 1;
		user.tvl_boost_rate_e6 += level_info[level].tvl_boost_rate_e6;

		is_deposited[_xnft_id] = true;
		has_xnft[_address_user] = true;
		
		emit DepositCB(_address_user, _xnft_id);	
	}

	function withdraw(uint256 _pool_id, address _address_user, uint256 _xnft_id) external nonReentrant
	{
		require(is_deposited[_xnft_id] == true, "withdraw: not deposited xnft");

		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = pool.user_info[_address_user];

		// Bullish Booster -> User
		IERC1155 stake_token = IERC1155(address_nft);
		stake_token.safeTransferFrom(address(this), _address_user, _xnft_id, 1, "");

		uint256 level = _get_nft_level(_xnft_id);
		pool.tvl_boost_rate_e6 -= level_info[level].tvl_boost_rate_e6;

		user.xnft_id_list[_xnft_id] = false;
		user.xnft_amount -= 1;
		user.tvl_boost_rate_e6 -= level_info[level].tvl_boost_rate_e6;

		is_deposited[_xnft_id] = false;
		has_xnft[_address_user] = (user.xnft_amount > 0);	

		emit WithdrawCB(_address_user, _xnft_id);
	}

	function balanceOf(uint256 _pool_id, address _address_user) external view returns(uint256)
	{
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = pool.user_info[_address_user];
		return user.xnft_amount;
	}

	function get_pool_tvl_boost_rate_e6(uint256 _pool_id) external view returns(uint256)
	{
		PoolInfo storage pool = pool_info[_pool_id];
		return pool.tvl_boost_rate_e6;
	}

	function get_user_tvl_boost_rate_e6(uint256 _pool_id, address _address_user) external view returns(uint256)
	{
		PoolInfo storage pool = pool_info[_pool_id];
		UserInfo storage user = pool.user_info[_address_user];
		return user.tvl_boost_rate_e6;
	}
	
	function has_nft(address _address_user) external view returns(bool)
	{
		return has_xnft[_address_user];
	}

	//---------------------------------------------------------------
	// Variable Interfaces
	//---------------------------------------------------------------
	function set_operator(address _new_operator) external onlyOperator
	{
		require(_new_operator != address(0), "set_operator: Wrong address");
		address_operator = _new_operator;
		emit SetOperatorCB(msg.sender, _new_operator);
	}

	function set_boost_rate(uint256 level, uint256 _level_prefix, uint256 _tvl_boost_rate_e6) external onlyOperator
	{
		LevelInfo storage cur_level_info = level_info[level];
		cur_level_info.level_prefix = _level_prefix;
		cur_level_info.tvl_boost_rate_e6 = _tvl_boost_rate_e6;
	}

	//---------------------------------------------------------------
	// Internal Method
	//---------------------------------------------------------------
	function _get_nft_level(uint256 _xnft_id) internal view returns(uint256)
	{
		for(uint256 level=2; level<127; level++)
		{
			if(level_info[level].level_prefix == 0 || level_info[level].level_prefix > _xnft_id)
				return level-1;
		}

		return 1;
	}
}

