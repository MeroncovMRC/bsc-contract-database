// SPDX-License-Identifier: GPL-v3.0
pragma solidity >=0.4.0;
library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, 'SafeMath: addition overflow');

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, 'SafeMath: subtraction overflow');
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, 'SafeMath: multiplication overflow');

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, 'SafeMath: division by zero');
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, 'SafeMath: modulo by zero');
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = x < y ? x : y;
    }

    function sqrt(uint256 y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint256 x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

pragma solidity >=0.4.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address _owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

pragma solidity ^0.6.2;

library Address {

    function isContract(address account) internal view returns (bool) {

        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, 'Address: insufficient balance');

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}('');
        require(success, 'Address: unable to send value, recipient may have reverted');
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, 'Address: low-level call failed');
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, 'Address: insufficient balance for call');
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), 'Address: call to non-contract');

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




pragma solidity ^0.6.0;

library SafeBEP20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(
        IBEP20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IBEP20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            'SafeBEP20: approve from non-zero to non-zero allowance'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IBEP20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(
            value,
            'SafeBEP20: decreased allowance below zero'
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function _callOptionalReturn(IBEP20 token, bytes memory data) private {

        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');
        if (returndata.length > 0) {
            // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');
        }
    }
}




pragma solidity >=0.4.0;

contract Context {

    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}




pragma solidity >=0.4.0;

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


pragma solidity >=0.6.6;
interface IGooleeTrade{
    function price()  external view returns (uint256);
}

pragma solidity >=0.6.2;
interface IGData{
    struct UserInfo {
        uint256 amount;  //amount value in token 
        uint256 amountUSD;   //amount in usdt token  
        uint256 lastClaim;
        uint112 claimIndex;
        uint256[] amountDetail;
        uint256[] amountDetailUSD;
        uint256[] createDates;
        uint256[] priceToken;
        uint256[] stage;
        
    }
    function getUserByAddress(address _user) external view returns (UserInfo memory);
    function addUserInfo(UserInfo memory _userInfo,address _user) external;
    function addPoolInfo(uint256 _staked,uint256 _stakedUSD) external;
    function updateClaim(uint256 _lastClaim,uint112 _claimIndex,address _user) external;
    function removePoolInfo(uint256 _staked,uint256 _stakedUSD) external;
    function addUsers(address _user) external;
    function getAmountDetail(address _user) external  view returns (uint256[] memory);
    function getAmountDetailUSD(address _user) external  view returns (uint256[] memory);
    function getCreateDates(address _user) external  view returns (uint256[] memory);
    function getPriceToken(address _user) external  view returns (uint256[] memory);
    function getStage(address _user) external  view returns (uint256[] memory);
    function removeAmount(uint256 _removeAmt,uint256 _removeAmtUSD,address _user) external;
}

pragma solidity >=0.6.2;
pragma experimental ABIEncoderV2;

contract GStake is Ownable {
    using SafeMath for uint256;
    using SafeBEP20 for IBEP20;

    IGooleeTrade public goleeTrade;
    IGData public data;
    IBEP20 public rewardToken;
    IBEP20 public usdtToken;
    
    uint256[] public reward1 = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5];
    uint256[] public reward2 = [5,5,5,5,5];
    bool public enableStage1 = false;
    uint256 public timeReward = 60;

    struct UserInfo {
        uint256 amount;  //amount value in token 
        uint256 amountUSD;   //amount in usdt token 
         uint256 lastClaim;
        uint112 claimIndex; 
        uint256[] amountDetail;
        uint256[] amountDetailUSD;
        uint256[] createDates;
        uint256[] priceToken;
        uint256[] stage;
       
    }

    mapping (address => UserInfo) public userInfo;
    
    event Stacking(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    mapping(address => bool) public admin;

    modifier onlyAdmin() {
        require(admin[msg.sender] == true, "Only Admin can call this function");
        _;
    }

    constructor(IBEP20 _rewardToken,IGData _data, IGooleeTrade _goleeTrade,IBEP20 _usdtToken) public {
        rewardToken = _rewardToken;
        data = _data;
        goleeTrade = _goleeTrade;
        usdtToken = _usdtToken;
        admin[msg.sender] = true;
    }

    function setGData(address _data) public onlyOwner{
        data = IGData(_data);
    }

    function addAdmin(address _admin) external onlyOwner {
        admin[_admin] = true;
    }

    function getPrice() public view returns (uint256){
        return goleeTrade.price();
    }

    function emergencyTokenWithdraw(IBEP20 token,uint256 _amount,address _to) public onlyAdmin {
        require(_amount < token.balanceOf(address(this)), 'not enough token');
        token.safeTransfer(address(_to), _amount);
    }
    
    function setReward1(uint256[] memory _reward1) public onlyAdmin{
        reward1 = _reward1;
    }

    function setReward2(uint256[] memory _reward2) public onlyAdmin{
         reward2 = _reward2;
    }

    function setEnableStage1(bool _enable) public onlyAdmin{
        enableStage1 = _enable;
    }

    function setTimeReward(uint256 _timereward) public onlyAdmin{
        timeReward = _timereward;
    }

    function getEnableStage1() public view returns (bool){
        return enableStage1;
    }
    
    //return totalAmountCanRemove
    function getTotalAmountCanRemove(address _user) public view returns (uint256){
        uint256[] memory amtDetail = data.getAmountDetail(_user);
        uint256[] memory createDates = data.getCreateDates(_user);
        uint256[] memory stage = data.getStage(_user);
        uint256 totalAmount = 0;
        for(uint i=0; i<createDates.length; i++){
            uint256 contractLength = reward1.length;
            if(stage[i] == 2){
                contractLength = reward2.length;
            }
            
            uint256 end = createDates[i] + contractLength*timeReward;
            if(block.timestamp >= end && stage[i] == 2){
                totalAmount = totalAmount + amtDetail[i];
            }
        }
        return totalAmount;
    }

    // View function to see pending Reward on frontend.
    function pendingReward(address _user) public view returns (uint256) {
        IGData.UserInfo memory user = data.getUserByAddress(_user);
        
        uint256[] memory amtDetail = data.getAmountDetail(_user);
        uint256[] memory createDates = data.getCreateDates(_user);
        uint256[] memory stage = data.getStage(_user);
        uint256 pendReward = 0;
        uint256 lastClaim = user.lastClaim;
        for(uint j=0;j<amtDetail.length;j++){
            uint256[] memory rewards = reward1;
            uint256 contractLength = reward1.length;
            if(stage[j] == 2 || !enableStage1){
                rewards = reward2;
                contractLength = reward2.length;
            }
            //uint256 expired = createDates[j] + timeReward * contractLength;
            //if(block.timestamp<expired){
                //add reward only if not expired
                for(uint i=0; i<contractLength; i++){
                    uint256 startTime = createDates[j] + timeReward*(i);
                    if(startTime>=lastClaim && block.timestamp>createDates[j] + timeReward*(i+1)){
                        pendReward = pendReward + (amtDetail[j]*rewards[i])/10000;
                    }
                    else if(startTime>=lastClaim  && block.timestamp<createDates[j] + timeReward*(i+1)){
                        pendReward = pendReward + (amtDetail[j]*(block.timestamp - (startTime))*rewards[i])/timeReward/10000;
                        break;
                    }
                }
            //}
            
         }
        return pendReward;
    }

    function harvest() public {
        IGData.UserInfo memory user = data.getUserByAddress(msg.sender);
        if (user.amount > 0) {
            uint256 pending = pendingReward(msg.sender);
            if(pending > 0) {
                rewardToken.safeTransfer(msg.sender, pending);
                user.lastClaim = block.timestamp;
                data.updateClaim(block.timestamp,uint112(0),msg.sender);
            }
        }
    }

    function getUserByAddress() public  view returns (IGData.UserInfo memory) {
        return data.getUserByAddress(msg.sender);
    }

    function stacking(uint256 _amount) public {
        IGData.UserInfo memory user = data.getUserByAddress(msg.sender);

        if (user.amount > 0) {
            harvest();
        }
        if(_amount > 0) {
            rewardToken.safeTransferFrom(msg.sender,address(this),_amount);
            uint256 _tokenPrice = getPrice();
            uint256 _tokenValue = _amount*_tokenPrice;

            UserInfo storage us = userInfo[msg.sender];
            us.amountDetail = data.getAmountDetail(msg.sender);
            us.amountDetail.push(_amount);
            us.amountDetailUSD = data.getAmountDetailUSD(msg.sender);
            us.amountDetailUSD.push(_tokenValue);
            us.createDates = data.getCreateDates(msg.sender);
            us.createDates.push(block.timestamp);
            us.priceToken = data.getPriceToken(msg.sender);
            us.priceToken.push(_tokenPrice);
            us.stage = data.getStage(msg.sender);
            if(enableStage1){
                us.stage.push(1);
            }else{
                us.stage.push(2);
            }

            user.amount = user.amount.add(_amount);
            user.amountUSD = user.amountUSD.add(_tokenValue);
            
            user.lastClaim = block.timestamp;
            user.claimIndex = 0;
            
            user.amountDetail = us.amountDetail;
            user.createDates = us.createDates;
            user.amountDetailUSD = us.amountDetailUSD;
            user.priceToken = us.priceToken;
            user.stage = us.stage;
            data.addUserInfo(user,msg.sender);
            data.addUsers(msg.sender);
            //update pool info
            data.addPoolInfo(_amount,_tokenValue);
        }
        emit Stacking(msg.sender, _amount);
    }

    function hascontinuestacking(address _user) public view returns (uint256){
        uint256[] memory amtDetail = data.getAmountDetail(_user);
        uint256[] memory createDates = data.getCreateDates(_user);
        uint256[] memory stage = data.getStage(_user);
        uint256 totalAmount = 0;
        for(uint i=0; i<createDates.length; i++){
            uint256 contractLength = reward1.length;
            if(stage[i] == 1){
                uint256 end = createDates[i] + contractLength*timeReward;
                if(block.timestamp >= end){
                    totalAmount = totalAmount + amtDetail[i];
                }
            }
        }
        return totalAmount;
    }

    function continuestacking() public {
        harvest();
        IGData.UserInfo memory user = data.getUserByAddress(msg.sender);

        uint256[] memory amtDetail = data.getAmountDetail(msg.sender);
        uint256[] memory amtDetailUSD = data.getAmountDetailUSD(msg.sender);
        uint256[] memory createDates = data.getCreateDates(msg.sender);
        uint256[] memory stage = data.getStage(msg.sender);
        uint256[] memory priceToken = data.getPriceToken(msg.sender);
        
        for(uint j=0;j<amtDetail.length;j++){
            if(stage[j]==1){
                uint256 expired = createDates[j] + timeReward * reward1.length;
                if(block.timestamp>expired){
                    createDates[j] = block.timestamp;
                    stage[j] = 2;
                }
            }
        }
        user.createDates = createDates;
        user.stage = stage;
        user.amountDetail = amtDetail;
        user.amountDetailUSD = amtDetailUSD;
        user.priceToken = priceToken;
        data.addUserInfo(user,msg.sender);
    }
    
    function withdraw() public {
        uint256 _amount = getTotalAmountCanRemove(msg.sender);
        if(_amount>0){
            IGData.UserInfo memory user = data.getUserByAddress(msg.sender);
            harvest();
            if(_amount > 0) {
                rewardToken.safeTransfer(address(msg.sender), _amount);

                //remove amount in array
                uint256 removeAmount = 0;
                uint256 removeAmountUSD = 0;

                uint256[] memory amountDetail = data.getAmountDetail(msg.sender);
                uint256[] memory amountDetailUSD = data.getAmountDetailUSD(msg.sender);
                uint256[] memory createDates = data.getCreateDates(msg.sender);
                uint256[] memory stage = data.getStage(msg.sender);
                uint256[] memory priceToken = data.getPriceToken(msg.sender);

                for(uint i=0; i<amountDetail.length; i++){
                   
                    if(removeAmount<_amount){
                        delete amountDetail[i];
                        delete amountDetailUSD[i];
                        delete createDates[i];
                        delete stage[i];
                        delete priceToken[i];
                        removeAmount = removeAmount + amountDetail[i];
                        removeAmountUSD = removeAmountUSD + amountDetailUSD[i];
                    }else{
                        //update array
                        uint256 lastremove = _amount-removeAmount;
                        uint256 percentRemove = 100*lastremove/user.amountDetail[i];
                        amountDetail[i] = amountDetail[i] - lastremove;
                        amountDetailUSD[i] = percentRemove*amountDetailUSD[i]/100;
                        removeAmount = removeAmount + lastremove;
                        removeAmountUSD = removeAmountUSD + lastremove*priceToken[i];
                        break;
                    }
                }
                //user.amount = user.amount - removeAmount;
                //user.amountUSD = user.amountUSD - removeAmountUSD;

                user.amountDetail = amountDetail;
                user.amountDetailUSD = amountDetailUSD;
                user.createDates = createDates;
                user.priceToken = priceToken;
                user.stage = stage;

                //update data
                data.addUserInfo(user,msg.sender);
                data.removeAmount(_amount,_amount*getPrice(),msg.sender);
                data.removePoolInfo(_amount,_amount*getPrice());
            }
    
            emit Withdraw(msg.sender, _amount);
        }
    }

    
}