// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }


    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MyToken is IERC20 {
    using SafeMath for uint256;

    string public name = "My Token";
    string public symbol = "MTK";
    uint256 private _totalSupply = 2000000000000 * 10 ** 18;
    uint256 public taxPercentage = 2;
    address public taxWallet;
    address private _owner;

    bool public mintingEnabled = true;

    mapping(address => uint256) private _balances;
    mapping(address => bool) public whiteListed;
    mapping(address => bool) public hasMinted;
    mapping(address => mapping(address => uint256)) private _allowances;

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = _totalSupply.div(2);
        _balances[address(this)] = _totalSupply.div(2);
        emit Transfer(address(0), msg.sender, _balances[msg.sender]);
        emit Transfer(address(0), address(this), _balances[address(this)]);
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only owner can call this function");
        _;
    }

    modifier notWhiteListed(address _addr) {
        require(!whiteListed[_addr], "Address is already whitelisted");
        _;
    }

    modifier onlyOnce(address _addr) {
        require(!hasMinted[_addr], "Address has already minted once");
        _;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance.sub(amount));
        return true;
    }

    function mint() external payable notWhiteListed(msg.sender) onlyOnce(msg.sender) {
        require(mintingEnabled, "Minting is disabled");
        require(_balances[address(this)] >= 100000000 * 10 ** 18, "Not enough tokens left to mint");
        hasMinted[msg.sender] = true;
        _balances[msg.sender] = _balances[msg.sender].add(100000000 * 10 ** 18);
        _balances[address(this)] = _balances[address(this)].sub(100000000 * 10 ** 18);
        emit Transfer(address(this), msg.sender, 100000000 * 10 ** 18);
    }

    function toggleMinting() external onlyOwner {
        mintingEnabled = !mintingEnabled;
    }

    function whiteList(address[] calldata _addresses) external onlyOwner {
        for (uint256 i = 0; i < _addresses.length; i++) {
            if (!whiteListed[_addresses[i]]) {
                whiteListed[_addresses[i]] = true;
            }
        }
    }

    function setTaxWallet(address _newWallet) external onlyOwner {
        taxWallet = _newWallet;
    }

    function setOwner(address _newOwner) external onlyOwner {
        _owner = _newOwner;
    }

    function setTaxPercentage(uint256 percentage) external onlyOwner {
        require(percentage <= 100, "Tax percentage cannot be greater than 100");
        taxPercentage = percentage;
    }

    function _transfer(address sender, address recipient, uint256 amount) private {
require(sender != address(0), "Transfer from the zero address");
require(recipient != address(0), "Transfer to the zero address");
require(amount > 0, "Transfer amount must be greater than zero");

    uint256 taxAmount = amount.mul(taxPercentage).div(100);
    uint256 netAmount = amount.sub(taxAmount);

    _balances[sender] = _balances[sender].sub(amount);
    _balances[recipient] = _balances[recipient].add(netAmount);
    _balances[taxWallet] = _balances[taxWallet].add(taxAmount);

    emit Transfer(sender, recipient, netAmount);
    emit Transfer(sender, taxWallet, taxAmount);
}

function _approve(address owner, address spender, uint256 amount) private {
    require(owner != address(0), "Approve from the zero address");
    require(spender != address(0), "Approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
}
}