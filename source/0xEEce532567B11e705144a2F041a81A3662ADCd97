/**
 *Submitted for verification at BscScan.com on 2023-05-01
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-30
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-28
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-28
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-19
*/

/**
 *Submitted for verification at BscScan.com on 2023-04-15
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

contract Marketplace is Ownable {
    using SafeMath for uint256;
    using Counters for Counters.Counter;
    Counters.Counter private _itemId;

    address constant ACOIN = 0x893678DB59dA7B8BeDfF766932ea017904DfF2b6;
    address constant SOD = 0x665f3645a75496b2A806BfEE019D1e15A678CDF1;
    address constant USDT = 0x55d398326f99059fF775485246999027B3197955; 
    uint256 public FEE_PERCENTAGE_ACOIN = 10;
    uint256 public FEE_PERCENTAGE_SOD = 10;

    uint256 public FEE_BUY_ACTION = 10;
    uint256 public FEE_BUY_SOD = 10;

    address public FEE_RECIPIENT_ADDRESS; 
    address FEE_CHANGE_ADDRESS; 

    constructor() {
        FEE_RECIPIENT_ADDRESS = owner();
    }
    enum TYPES{SELLE, BUY}
    struct Item {
        uint256 id;
        address seller;
        TYPES types;
        address tokenAddress;
        uint256 price;
        uint256 fee;
        uint256 feeamount;
        uint256 remainingTokens;
        string uri;
        bool isSold;
    }

    mapping(uint256 => Item) public items;
    mapping(uint256 => bool) public itemIsListed; 

    event ItemListed(uint256 indexed itemId,  TYPES types, address indexed seller, address tokenAddress, uint256 price, uint256 fee, uint256 remainingTokens, string uri);
    event ItemSold(uint256 indexed itemId, address indexed buyer, address indexed seller, uint256 purchasedTokens, uint256 feeAmount, uint256 totalPriceusdt, uint256 tokenAmount);
    event ItemRemoved(uint256 indexed itemId, address indexed seller, uint256 price);
    event FeePercentageChanged(uint256 newPercentage);
    event backupsetfeeChanged(address newAddress);
    event Transfer(address indexed account, uint256 amount);

    function changeFeePercentageACOIN(uint256 newPercentage) public {
        require(
            msg.sender == owner() || msg.sender == FEE_CHANGE_ADDRESS,
            "Only Owner and FEE_CHANGE_ADDRESS are allowed to change"
        );
        FEE_PERCENTAGE_ACOIN = newPercentage;
        emit FeePercentageChanged(newPercentage);
    }

    function changeFeePercentageSOD(uint256 newPercentage) public {
        require(
            msg.sender == owner() || msg.sender == FEE_CHANGE_ADDRESS,
            "Only Owner and FEE_CHANGE_ADDRESS are allowed to change"
        );
        FEE_PERCENTAGE_SOD = newPercentage;
        emit FeePercentageChanged(newPercentage);
    }

    function changeFeeBuySOD(uint256 newFee) public {
        require(
            msg.sender == owner() || msg.sender == FEE_CHANGE_ADDRESS,
            "Only Owner and FEE_CHANGE_ADDRESS are allowed to change"
        );
        FEE_BUY_SOD = newFee;
    }

    function changeFeeBuyACTION(uint256 newFee) public {
        require(
            msg.sender == owner() || msg.sender == FEE_CHANGE_ADDRESS,
            "Only Owner and FEE_CHANGE_ADDRESS are allowed to change"
        );
        FEE_BUY_ACTION = newFee;
    }

    function backupsetfee(address newAddress) public onlyOwner {
        FEE_CHANGE_ADDRESS = newAddress;
        emit backupsetfeeChanged(newAddress);
    }

    function listItem(TYPES types, address tokenAddress, uint256 price, uint256 tokenAmount, string memory uri) public {
        require(price > 0, "Price must be greater than zero");
        require(
            tokenAddress == ACOIN || tokenAddress == SOD,
            "Only ACOIN and SOD are allowed for sale"
        );
        require(tokenAmount > 0, "Token amount must be greater than zero");

        _itemId.increment();
        uint256 itemId = _itemId.current();

        address seller = msg.sender;

        IERC20 token = TYPES.BUY == types ? IERC20(USDT) : IERC20(tokenAddress);

        require(token.transferFrom(seller, address(this), tokenAmount), "Token transfer failed");

        uint256 fee = 0;
        uint256 feeAmount = 0;
        if(tokenAddress == ACOIN){
            fee = TYPES.BUY == types ? FEE_BUY_ACTION : FEE_PERCENTAGE_ACOIN;
            feeAmount = (price * fee) / 1000;
        }else{
            fee =  TYPES.BUY == types ? FEE_BUY_SOD : FEE_PERCENTAGE_SOD;
            feeAmount = (price * fee) / 1000;
        }   

        items[itemId] = Item(itemId, msg.sender, types, tokenAddress, price, fee, feeAmount, tokenAmount, uri, false);
        itemIsListed[itemId] = true; 

        emit ItemListed(itemId, types, msg.sender, tokenAddress, price, fee, tokenAmount, uri);
    }

    function SellItem(uint256 itemId, uint256 tokenAmount) public {
        Item storage item = items[itemId];
        FEE_RECIPIENT_ADDRESS = owner();
        require(itemIsListed[itemId], "Item not listed");

        uint256 feePercentage = item.fee;
        uint256 feeAmount = (tokenAmount * feePercentage) / 1000;
        uint256 totalPriceusdt = item.price * tokenAmount / (10**18);
        uint256 totalFee = (totalPriceusdt * feePercentage) / 1000;
        uint256 sellerAmount = tokenAmount; 
        if(item.types == TYPES.SELLE) {
            require(!item.isSold && item.remainingTokens >= tokenAmount, "Item not available for sale");
        } else {
            // sellerAmount = tokenAmount;
            require(!item.isSold && item.remainingTokens >= totalPriceusdt, "Item not available for sale");
        }
        
        if(item.types ==TYPES.BUY) {
            require(IERC20(USDT).transfer(FEE_RECIPIENT_ADDRESS, totalFee), "Token transfer failed");
            require(IERC20(USDT).transfer(msg.sender, totalPriceusdt.sub(totalFee)), "Token transfer failed");
            require(IERC20(item.tokenAddress).transferFrom(msg.sender, item.seller, tokenAmount), "Token transfer failed");
        } else {
            require(IERC20(USDT).transferFrom(msg.sender, FEE_RECIPIENT_ADDRESS, totalFee), "Token transfer failed");
            require(IERC20(item.tokenAddress).transfer(msg.sender, tokenAmount), "Token transfer failed");
            require(IERC20(USDT).transferFrom(msg.sender, item.seller, totalPriceusdt.sub(totalFee)), "Token transfer failed");
            totalPriceusdt = tokenAmount;
        }
        item.remainingTokens -= totalPriceusdt;

        if (item.remainingTokens <= 100) {
            item.isSold = true;
            itemIsListed[itemId] = false; 
        }

        emit ItemSold(itemId, msg.sender, item.seller, totalPriceusdt, feeAmount, sellerAmount, tokenAmount);
    }

    function removeItem(uint256 listingid) public {
        Item storage item = items[listingid];
        
        require(itemIsListed[listingid] == true, "Item not listed");
        
        require(item.seller == msg.sender, "Only the seller can remove an item");
        
        IERC20 token = TYPES.BUY == item.types ? IERC20(USDT) : IERC20(item.tokenAddress);
        
        require(token.transfer(item.seller, item.remainingTokens), "Token transfer failed");

        delete items[listingid];
        itemIsListed[listingid] = false; 

        emit ItemRemoved(listingid, item.seller, item.price);
    }

    function getItemsBySeller(address seller) public view returns (Item[] memory) {
        uint256 itemCount = 0;
        for (uint256 i = 1; i <= _itemId.current(); i++) {
            if (items[i].seller == seller) {
                itemCount++;
            }
        }

        Item[] memory result = new Item[](itemCount);
        itemCount = 0;

        for (uint256 i = 1; i <= _itemId.current(); i++) {
            if (items[i].seller == seller) {
                result[itemCount] = items[i];
                itemCount++;
            }
        }

        return result;
    }

    function getAvailableItems() public view returns (Item[] memory) {
        uint256 itemCount = 0;
        for (uint256 i = 1; i <= _itemId.current(); i++) {
            if (!items[i].isSold) {
                itemCount++;
            }
        }

        Item[] memory result = new Item[](itemCount);
        itemCount = 0;

        for (uint256 i = 1; i <= _itemId.current(); i++) {
            if (!items[i].isSold) {
                result[itemCount] = items[i];
                itemCount++;
            }
        }

        return result;
    }


}