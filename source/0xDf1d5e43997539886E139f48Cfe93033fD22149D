
// File: contracts/Ola/Peripheral/Specifics/ReservesHandler/ReservesHandler.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.7.6;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./BaseSwapper.sol";
import "../../Interactors/ReservesInteractor/ReservesInteractorBase.sol";

interface IReservesHandler {
    function reduceAndDistribute(address market) external;
    function reduceAndDistributeMany(address[] calldata market) external;

    function onlyDistribute(address asset) external;
    function onlyDistributeMany(address[] calldata assets) external;
}

interface IOTokenForReservesHandler {
    function underlying() external view returns (address);
}

interface IOErc20TokenForReservesHandler {
    function mint(uint mintAmount) external returns (uint);
}

interface IONativeTokenForReservesHandler {
    function mint() external payable;
}

interface IComptrollerForReservesHandler {
    function getAllMarkets() external returns (address[] memory);
}

/**
 * @title Ola's Reserves Handler Contract
 */
contract ReservesHandler is Ownable, ReservesInteractorBase, BaseSwapper, IReservesHandler {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    event DistributorAdded(address indexed distributor);
    event DistributorRemoved(address indexed distributor);
    event FractionsSet(uint partnerRawPart, uint partnerSupplyPart, uint olaRawPart, uint olaSupplyPart);

    address constant public nativeCoinUnderlying = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

    address immutable public unitroller;
    address immutable public partnerCollectorAddress;
    address immutable public olaCollectorAddress;

    uint fullUnit = 1e18;

    // Parts
    uint public partnerRawFraction;
    uint public partnerSupplyFraction;
    uint public olaRawFraction;
    uint public olaSupplyFraction;

    uint marketsCount;

    // Note : Saves gas
    mapping(address => address) public marketToUnderlying;
    mapping(address => address) public underlyingToMarket;

    mapping(address => bool) public validDistributors;

    // ***** Views *****
    function isMarketSupported(address market) public view returns (bool) {
        return marketToUnderlying[market] != address(0);
    }
    function isUnderlyingSupported(address underlying) public view returns (bool) {
        return underlyingToMarket[underlying] != address(0);
    }

    function selfBalanceInAsset(address asset) public view returns (uint) {
        return selfBalanceInAssetInternal(asset);
    }

    // ***** Main Interface *****

    function reduceAndDistribute(address market) external override onlyDistributorAccount {
        reduceReserveAndDistributeInternal(market);
    }

    function reduceAndDistributeMany(address[] calldata markets) external override onlyDistributorAccount {
        uint length = markets.length;
        for (uint i = 0; i < length; i++) {
            reduceReserveAndDistributeInternal(markets[i]);
        }
    }

    function onlyDistribute(address asset) external override onlyDistributorAccount {
        address matchingMarket = underlyingToMarket[asset];
        require(matchingMarket != address(0), "NO_MATCHING_MARKET");

        distributeAssetInternal(asset, matchingMarket);
    }

    function onlyDistributeMany(address[] calldata assets) external override onlyDistributorAccount {
        for (uint i = 0; i < assets.length; i++) {
            address asset = assets[i];
            address matchingMarket = underlyingToMarket[asset];
            require(matchingMarket != address(0), "NO_MATCHING_MARKET");

            distributeAssetInternal(asset, matchingMarket);
        }
    }

    // ***** Admin Functions *****

    function setSwapPath(address token, address[] calldata swapPath) external onlyOwner {
        require(isUnderlyingSupported(token), "TOKEN_NOT_SUPPORTED");
        setSwapPathInternal(token, swapPath);
    }

    function addDistributor(address distributor) external onlyOwner {
        require(!validDistributors[distributor], "ALREADY_ADDED");
        validDistributors[distributor] = true;
        emit DistributorAdded(distributor);
    }

    function setFractions(uint _partnerRawFraction, uint _partnerSupplyFraction, uint _olaRawFraction, uint _olaSupplyFraction) external onlyOwner {
        setFractionsInternal(_partnerRawFraction, _partnerSupplyFraction, _olaRawFraction, _olaSupplyFraction);
    }

    function removeDistributor(address distributor) external onlyOwner {
        require(validDistributors[distributor], "NOT_DISTRIBUTOR");
        validDistributors[distributor] = false;
        emit DistributorRemoved(distributor);
    }

    // Note : emergency function
    function sweepAssets(address[] calldata assets, address receiver) external onlyOwner {
        for (uint i = 0; i < assets.length; i++) {
            address asset = assets[i];

            if (asset == nativeCoinUnderlying) {
                uint nativeBalance = address(this).balance;
                payable(receiver).transfer(nativeBalance);
            } else {
                uint tokenBalance = IERC20(asset).balanceOf(address(this));
                IERC20(asset).transfer(receiver, tokenBalance);
            }
        }
    }

    constructor(
        address _unitroller,
        address _factory,
        uint _factoryNumerator,
        uint _factoryDenominator,
        address _wNative,
        address _partnerCollector,
        address _olaCollector,
        uint _partnerRawFraction,
        uint _partnerSupplyFraction,
        uint _olaRawFraction,
        uint _olaSupplyFraction
    ) BaseSwapper(_factory, _factoryNumerator, _factoryDenominator, _wNative) {
        unitroller = _unitroller;
        partnerCollectorAddress = _partnerCollector;
        olaCollectorAddress = _olaCollector;

        syncAllLenMarketsInternal(IComptrollerForReservesHandler(_unitroller).getAllMarkets());

        validDistributors[msg.sender] = true;

        setFractionsInternal(_partnerRawFraction, _partnerSupplyFraction, _olaRawFraction, _olaSupplyFraction);
    }

    // ***** Syncing *****

    function syncLenMarkets() external onlyEOA {
        address[] memory allMarkets = IComptrollerForReservesHandler(unitroller).getAllMarkets();

        if (allMarkets.length > marketsCount) {
            syncAllLenMarketsInternal(allMarkets);
        }
    }

    function setFractionsInternal(uint _partnerRawFraction, uint _partnerSupplyFraction, uint _olaRawFraction, uint _olaSupplyFraction) internal {
        require(_partnerRawFraction + _partnerSupplyFraction + _olaRawFraction + _olaSupplyFraction == fullUnit, "FRACTIONS_NOT_SUMMED_TO_ONE");

        partnerRawFraction = _partnerRawFraction;
        partnerSupplyFraction = _partnerSupplyFraction;
        olaRawFraction = _olaRawFraction;
        olaSupplyFraction = _olaSupplyFraction;

        emit FractionsSet(_partnerRawFraction, _partnerSupplyFraction, _olaRawFraction, _olaSupplyFraction);
    }

    // ***** Inner Initialization *****
    function syncAllLenMarketsInternal(address[] memory allMarkets) internal {
        for (uint i = 0; i< allMarkets.length; i++ ) {
            registerMarketInternal(allMarkets[i]);
        }
    }

    function registerMarketInternal(address market) internal {
        if (isMarketSupported(market)) {
            return;
        }
//        require(!isMarketSupported(market), "MARKET_ALREADY_SUPPORTED");

        address underlying = IOTokenForReservesHandler(market).underlying();

        marketToUnderlying[market] = underlying;
        underlyingToMarket[underlying] = market;


        if (underlying != nativeCoinUnderlying) {
            IERC20(underlying).approve(market, uint256(-1));
        }

        marketsCount++;
    }

    // ***** Inner Core *****

    function reduceReserveAndDistributeInternal(address market) internal {
        address marketUnderlying = marketToUnderlying[market];
        require(marketUnderlying != address(0), "MARKET_NOT_SUPPORTED");

        // First, reduce reserves
        reduceMarketReservesInternal(market);

        // Then, handle the reserves
        distributeAssetInternal(marketUnderlying, market);
    }

    function distributeAssetInternal(address asset, address market) internal {
        uint selfBalance = selfBalanceInAssetInternal(asset);

        address[] memory swapPath = swapPaths[asset];
        bool requiresConversion = swapPath.length > 0;
        if (requiresConversion) {
            address assetToConvertTo = swapPath[swapPath.length - 1];

            _convertByPath(swapPath, selfBalance);

            // Note : Recursive call to handle the balance of the converted asset
            address matchingMarket = underlyingToMarket[assetToConvertTo];
            require(matchingMarket != address(0), "NO_MATCHING_MARKET");
            distributeAssetInternal(assetToConvertTo, matchingMarket);
        } else {
            (uint partnerRawPart, uint partnerSupplyPart, uint olaRawPart, uint olaSupplyPart) = partitionAsset(selfBalance);


            transferRawAsset(partnerCollectorAddress, asset, partnerRawPart);
            supplyAndSendOTokens(partnerCollectorAddress, asset, market, partnerSupplyPart);

            transferRawAsset(olaCollectorAddress, asset, olaRawPart);
            supplyAndSendOTokens(olaCollectorAddress, asset, market, olaSupplyPart);
        }
    }

    // ***** Inner Asset management *****

    function supplyAndSendOTokens( address receiver, address asset, address market, uint assetAmount) internal {
        if (assetAmount == 0) {
            return;
        }

        uint oTokenBalanceBefore = IERC20(market).balanceOf(address(this));

        if (asset == nativeCoinUnderlying) {
            IONativeTokenForReservesHandler(market).mint{value: assetAmount}();
        } else {
            IOErc20TokenForReservesHandler(market).mint(assetAmount);
        }
        uint oTokenBalanceAfter = IERC20(market).balanceOf(address(this));

        uint oTokenMinted = oTokenBalanceAfter - oTokenBalanceBefore;

        // NOTE : Edge case for dust amounts
        if (oTokenMinted == 0) {
            return;
        }

        IERC20(market).transfer(receiver, oTokenMinted);
    }

    function transferRawAsset( address receiver, address asset, uint assetAmount) internal {
        if (assetAmount == 0) {
            return;
        }

        if (asset == nativeCoinUnderlying) {
            payable(receiver).transfer(assetAmount);
        } else {
            IERC20(asset).transfer(receiver, assetAmount);
        }
    }

    // ***** Inner Utils *****

    /**
     *  Calculate the actual amount of asset for each purpose.
     */
    function partitionAsset(uint totalAmount) internal view returns (uint partnerRawPart, uint partnerSupplyPart, uint olaRawPart, uint olaSupplyPart) {
        partnerRawPart = fractionFrom(totalAmount, partnerRawFraction);
        partnerSupplyPart = fractionFrom(totalAmount, partnerSupplyFraction);
        olaRawPart = fractionFrom(totalAmount, olaRawFraction);
        olaSupplyPart = fractionFrom(totalAmount, olaSupplyFraction);

        // Sanity
        uint totalSum = partnerRawPart + partnerSupplyPart + olaRawPart + olaSupplyPart;

        // NOTE : The difference should be in dust amount due to rounding error, we will reduce Ola's part in that case
        if (totalSum > totalAmount) {
            uint diff = totalSum - totalAmount;

            if (olaSupplyPart > diff) {
                olaSupplyPart -= diff;
            } else if (olaRawPart > diff) {
                olaRawPart -= diff;
            } else {
                revert("FAULTY_PART_CALCULATION");
            }
        }
    }

    /**
     * Calculate the part (fraction) out of the given amount.
     * @param amount The full amount (in any scale)
     * @param fraction A "decimal" fraction (e.g 0.23 = 23%) (scaled by 1e18)
     */
    function fractionFrom(uint amount, uint fraction) internal view returns (uint) {
        return amount.mul(fraction).div(fullUnit);
    }

    function selfBalanceInAssetInternal(address asset) internal view returns (uint) {
        if (asset == nativeCoinUnderlying) {
            return address(this).balance;
        } else {
            return IERC20(asset).balanceOf(address(this));
        }
    }

    /**
     * It's not a fool proof solution, but it prevents flash loans, so here it's ok to use tx.origin
     */
    modifier onlyEOA() {
        // Try to make flash-loan exploit harder to do by only allowing externally owned addresses.
        require(msg.sender == tx.origin, "ReservesHandler: must use EOA");
        _;
    }

    modifier onlyDistributorAccount() {
        require(validDistributors[msg.sender], "NOT_DISTRIBUTOR");
        _;
    }

    /**
     * Does nothing
     */
    receive() external payable {
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../utils/Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: contracts/Ola/Peripheral/Specifics/ReservesHandler/BaseSwapper.sol
// SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

pragma solidity 0.7.6;

interface IUniswapV2FactoryForBaseSwapper {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IUniswapV2PairForBaseSwapper {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function token0() external view returns (address);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
}

contract BaseSwapper {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    IUniswapV2FactoryForBaseSwapper public immutable factory;
    uint public immutable factoryNumerator;
    uint public immutable factoryDenominator;
    address public immutable wNative;

    mapping(address => address[]) swapPaths;

    event SwapPathSet(address indexed token, address[] indexed path);
    event LogConvert(
        address indexed server,
        address indexed token,
        uint256 amount,
        uint256 amountBANANA
    );

    function swapPathFor(address token) public view returns (address[] memory swapPath) {
        return swapPaths[token];
    }

    constructor(
        address _factory,
        uint _factoryNumerator,
        uint _factoryDenominator,
        address _wNative
    ) {
        factory = IUniswapV2FactoryForBaseSwapper(_factory);

        factoryNumerator= _factoryNumerator;
        factoryDenominator= _factoryDenominator;

        wNative = _wNative;
    }

    function setSwapPathInternal(address token, address[] calldata swapPath) internal {
        // Checks
        uint pathLength = swapPath.length;
        require(pathLength > 0, "NO_PATH_GIVEN");
        require(pathLength >= 2, "PATH_IS_MIN_TWO_TOKENS");
        require(swapPath[0] == token, "MUST_START_WITH_ORIGIN");
        for (uint i = 1; i < pathLength; i ++) {
            address bridgeAsset = swapPath[i];
            require(bridgeAsset != token, "CANNOT_BRIDGE_WITH_SELF");
        }

        swapPaths[token] = swapPath;

        emit SwapPathSet(token, swapPath);
    }

    function _convertByPath(address[] memory path, uint amountInOriginal) internal returns (uint amountOut) {
        uint fromTokenIndex = 0;
        uint toTokenIndex = 1;
        uint amountInForSwap = amountInOriginal;

        while (toTokenIndex < path.length) {
            // swap
            amountOut = _swapTokensInternal(path[fromTokenIndex], path[toTokenIndex], amountInForSwap, address(this));
            amountInForSwap = amountOut;

            // increase index
            fromTokenIndex++;
            toTokenIndex++;
        }
    }

    function _swapTokensInternal(
        address fromToken,
        address toToken,
        uint256 amountIn,
        address to
    ) internal returns (uint256 amountOut) {
        // Checks
        IUniswapV2PairForBaseSwapper pair = IUniswapV2PairForBaseSwapper(factory.getPair(fromToken, toToken));
        require(address(pair) != address(0), "BaseSwapper: Cannot convert - NoPair");

        // Interactions
        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
        uint256 amountInWithFee = amountIn.mul(factoryNumerator);
        if (fromToken == pair.token0()) {
            amountOut = amountInWithFee.mul(reserve1) / reserve0.mul(factoryDenominator).add(amountInWithFee);
            IERC20(fromToken).safeTransfer(address(pair), amountIn);
            pair.swap(0, amountOut, to, new bytes(0));
            // TODO: Add maximum slippage?
        } else {
            amountOut = amountInWithFee.mul(reserve0) / reserve1.mul(factoryDenominator).add(amountInWithFee);
            IERC20(fromToken).safeTransfer(address(pair), amountIn);
            pair.swap(amountOut, 0, to, new bytes(0));
            // TODO: Add maximum slippage?
        }
    }
}


// File: contracts/Ola/Peripheral/Interactors/ReservesInteractor/ReservesInteractorBase.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

import "./IReservesInteractor.sol";

interface IMarketForReservesInteractor {
    function totalReserves() external returns (uint);
    function underlying() external returns (address);

    /**
     * Returns error code
     */
    function accrueInterest() external returns (uint);

    /**
     * Returns error code
     */
    function _reduceReserves(uint reduceAmount) external returns (uint);
}

interface IComptrollerForReservesInteractor {
    function getAllMarkets() external view returns (address[] memory);
}

contract ReservesInteractorBase {

    /**
     * Reduces all reserves for the given market.
     * @param market The market address
     */
    function reduceMarketReservesInternal(address market) internal returns (uint reservesReduced) {
          uint accrueInterestErr = IMarketForReservesInteractor(market).accrueInterest();
          require(accrueInterestErr == 0, "Accrue interest error");

        uint currentReserves = IMarketForReservesInteractor(market).totalReserves();
        reservesReduced = currentReserves;

        if (reservesReduced == 0) {
            return 0;
        } else {
            uint reduceReservesErr = IMarketForReservesInteractor(market)._reduceReserves(reservesReduced);
            require(reduceReservesErr == 0, "Reduce reserves error");
        }
    }
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: @openzeppelin/contracts/math/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "../../utils/Context.sol";
import "./IERC20.sol";
import "../../math/SafeMath.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning `false` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    /**
     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
     * a default value of 18.
     *
     * To select a different value for {decimals}, use {_setupDecimals}.
     *
     * All three of these values are immutable: they can only be set once during
     * construction.
     */
    constructor (string memory name_, string memory symbol_) public {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
     * called.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Sets {decimals} to a value other than the default one of 18.
     *
     * WARNING: This function should only be called from the constructor. Most
     * applications that interact with token contracts will not expect
     * {decimals} to ever change, and may work incorrectly if it does.
     */
    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be to transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}


// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.0 <0.8.0;

import "./IERC20.sol";
import "../../math/SafeMath.sol";
import "../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity >=0.6.2 <0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: contracts/Ola/Peripheral/Interactors/ReservesInteractor/IReservesInteractor.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

interface IReservesInteractor {
    function reduceAllReserves(address len) external;
    function reduceReserves(address market) external returns (uint reservesReduced);
}


