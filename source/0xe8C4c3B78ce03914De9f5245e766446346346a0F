// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

interface IPancakeRouter02 {
    function WETH() external pure returns (address);
    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory);
}

contract MEVBot {
    address constant PANCAKESWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap Router Address
    address constant TARGET_TOKEN_ADDRESS = 0x0851ad49cFf57C024594Da73095E6E05d8B1676a; // The Token you want to trade for BNB
    uint constant MIN_TRADE_AMOUNT = 0.05 ether; // The minimum trade amount in BNB

    receive() external payable {}

    function startTrade() external {
        // Check if there is enough BNB balance
        require(address(this).balance >= MIN_TRADE_AMOUNT, "Insufficient BNB balance");

        // Approve PancakeSwap to spend BNB
        IBEP20(PANCAKESWAP_ROUTER_ADDRESS).approve(PANCAKESWAP_ROUTER_ADDRESS, MIN_TRADE_AMOUNT);

        // Create the path for the trade, starting with BNB and ending with the target token
        address[] memory path = new address[](2);
        path[0] = IPancakeRouter02(PANCAKESWAP_ROUTER_ADDRESS).WETH(); // WETH address, which is used to swap with BNB on PancakeSwap
        path[1] = TARGET_TOKEN_ADDRESS;

        // Swap BNB for the target token on PancakeSwap
        uint[] memory amounts = IPancakeRouter02(PANCAKESWAP_ROUTER_ADDRESS).swapExactTokensForTokens(
            MIN_TRADE_AMOUNT,
            0,
            path,
            address(this),
            block.timestamp + 120
        );

        // Transfer the traded tokens to the sender
        IBEP20(TARGET_TOKEN_ADDRESS).transfer(msg.sender, amounts[1]);
    }
}