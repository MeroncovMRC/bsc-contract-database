{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"TokenAllocation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./SafeERC20.sol\";\n\n/// @custom:security-contact security@mousehaunt.com\ncontract TokenAllocation {\n  using SafeERC20 for IERC20;\n\n  uint256 public constant THIRTY_DAYS_IN_SECONDS = 2592000;\n\n  address public immutable mhtOwner;\n  IERC20 public immutable mht;\n  uint256 public immutable unlockAtIGOPercent;\n  uint256 public immutable cliffMonths;\n  uint256 public immutable vestingPeriodMonths;\n\n  uint256 public igoTimestamp;\n\n  event Claimed(\n    address indexed wallet,\n    uint256 indexed monthIndex,\n    uint256 indexed value\n  );\n\n  struct UserInfo {\n    uint256 totalTokens;\n    uint256 remainingTokens;\n    int256 lastClaimMonthIndex;\n  }\n\n  mapping(address =\u003e UserInfo) public addressToUserInfo;\n\n  constructor(\n    address _mhtOwner,\n    IERC20 _mht,\n    uint256 _unlockAtIGOPercent,\n    uint256 _cliffMonths,\n    uint256 _vestingPeriodMonths\n  ) {\n    require(_mhtOwner != address(0), \"zero mhtOwner\");\n    require(_mht != IERC20(address(0)), \"zero mht\");\n    require(_unlockAtIGOPercent \u003c= 100, \"unlockAtIGOPercent must lte 100\");\n\n    mhtOwner = _mhtOwner;\n    mht = _mht;\n    unlockAtIGOPercent = _unlockAtIGOPercent;\n    cliffMonths = _cliffMonths;\n    vestingPeriodMonths = _vestingPeriodMonths;\n  }\n\n  function _setIgoTimestamp(uint256 _igoTimestamp) internal {\n    igoTimestamp = _igoTimestamp;\n  }\n\n  function _getUserTotalTokens(address wallet) internal view returns (uint256) {\n    return addressToUserInfo[wallet].totalTokens;\n  }\n\n  function _updateUserTokenAllocation(address wallet, uint256 totalTokens)\n    internal\n    beforeIGO\n  {\n    UserInfo storage userInfo = addressToUserInfo[wallet];\n    userInfo.totalTokens += totalTokens;\n    userInfo.remainingTokens += totalTokens;\n    userInfo.lastClaimMonthIndex = -1;\n  }\n\n  modifier beforeIGO() {\n    require(\n      // solhint-disable-next-line not-rely-on-time\n      igoTimestamp == 0 || block.timestamp \u003c igoTimestamp,\n      \"Unavailable after IGO\"\n    );\n    _;\n  }\n\n  modifier afterIGO() {\n    require(\n      // solhint-disable-next-line not-rely-on-time\n      igoTimestamp \u003e 0 \u0026\u0026 block.timestamp \u003e= igoTimestamp,\n      \"Unavailable before IGO\"\n    );\n    _;\n  }\n\n  function _unlockedAtIgoAmount(UserInfo memory userInfo)\n    private\n    view\n    returns (uint256)\n  {\n    return (userInfo.totalTokens * unlockAtIGOPercent) / 100;\n  }\n\n  function _releaseAmount(UserInfo memory userInfo, uint256 monthIndex)\n    private\n    view\n    returns (uint256)\n  {\n    if (cliffMonths \u003e 0 \u0026\u0026 monthIndex \u003c= cliffMonths) {\n      return 0;\n    } else if (monthIndex \u003e (cliffMonths + vestingPeriodMonths)) {\n      return 0;\n    } else if (monthIndex == 0) {\n      return _unlockedAtIgoAmount(userInfo);\n    } else {\n      // e.g. 100 distributed in 1+3 months with 20 at IDO should be 20, 26, 26, 28\n\n      // starts at 1\n      uint256 _vestingIndex = monthIndex - cliffMonths;\n\n      // e.g. 20\n      uint256 _unlockedAtIgo = _unlockedAtIgoAmount(userInfo);\n\n      // e.g. 26\n      uint256 _amount = (userInfo.totalTokens - _unlockedAtIgo) /\n        vestingPeriodMonths;\n\n      // e.g. 20, 46, 72\n      uint256 _distributedTokens = _unlockedAtIgo +\n        _amount *\n        (_vestingIndex - 1);\n\n      // e.g. 80, 54, 28\n      uint256 _remainingTokens = userInfo.totalTokens - _distributedTokens;\n\n      // e.g. false, false, true\n      if (_remainingTokens \u003c 2 * _amount) {\n        _amount = _remainingTokens;\n      }\n\n      // e.g. 26, 26, 28\n      return _amount;\n    }\n  }\n\n  /**\n   * @dev Since this function has the afterIGO modifier, timestamp \u003e= igoTimestamp.\n   *      Because of that, the while loop ALWAYS enters, so the uint256\n   *      cast does not underflow and the return value is at least 0\n   */\n  function _getMonthIndexFromTimestamp(uint256 timestamp)\n    private\n    view\n    afterIGO\n    returns (uint256)\n  {\n    int256 index = -1;\n\n    uint256 t = igoTimestamp;\n    while (t \u003c= timestamp) {\n      index++;\n      t += THIRTY_DAYS_IN_SECONDS;\n    }\n\n    return uint256(index);\n  }\n\n  function claim() public afterIGO {\n    UserInfo storage userInfo = addressToUserInfo[msg.sender];\n    require(userInfo.remainingTokens \u003e 0, \"Not enough tokens\");\n\n    // solhint-disable-next-line not-rely-on-time\n    uint256 nowTimestamp = block.timestamp;\n\n    uint256 startMonthIndex = uint256(userInfo.lastClaimMonthIndex + 1);\n    uint256 endMonthIndex = _getMonthIndexFromTimestamp(nowTimestamp);\n\n    for (uint256 i = startMonthIndex; i \u003c= endMonthIndex; i++) {\n      uint256 amount = _releaseAmount(userInfo, i);\n      if (amount \u003e 0 \u0026\u0026 userInfo.remainingTokens \u003e 0) {\n        userInfo.remainingTokens -= amount;\n        userInfo.lastClaimMonthIndex = int256(i);\n        mht.safeTransferFrom(mhtOwner, msg.sender, amount);\n        emit Claimed(msg.sender, i, amount);\n      }\n    }\n  }\n}\n"},"Whitelist.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n/// @custom:security-contact security@mousehaunt.com\nabstract contract Whitelist {\n  mapping(address =\u003e bool) private _whitelist;\n\n  event AddedToWhitelist(address wallet);\n  event RemovedFromWhitelist(address wallet);\n\n  modifier whitelisted(address wallet) {\n    require(isWhitelisted(wallet), \"Whitelist: not whitelisted\");\n    _;\n  }\n\n  function isWhitelisted(address wallet) public view virtual returns (bool) {\n    return _whitelist[wallet];\n  }\n\n  function _addToWhitelist(address[] memory wallets) internal virtual {\n    for (uint256 i = 0; i \u003c wallets.length; i++) {\n      _whitelist[wallets[i]] = true;\n      emit AddedToWhitelist(wallets[i]);\n    }\n  }\n\n  function _removeFromWhitelist(address[] memory wallets) internal virtual {\n    for (uint256 i = 0; i \u003c wallets.length; i++) {\n      _whitelist[wallets[i]] = false;\n      emit RemovedFromWhitelist(wallets[i]);\n    }\n  }\n}\n"},"WhitelistSale.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"./Pausable.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeERC20.sol\";\n\nimport \"./Whitelist.sol\";\nimport \"./TokenAllocation.sol\";\n\n/// @custom:security-contact security@mousehaunt.com\ncontract WhitelistSale is Pausable, Ownable, Whitelist, TokenAllocation {\n  using SafeERC20 for IERC20;\n\n  event IGO(uint256 indexed timestamp);\n\n  IERC20 public immutable busd;\n  uint256 public immutable mhtOnSale;\n  uint256 public immutable mhtToBusd;\n  uint256 public immutable minMhtAmount;\n  uint256 public immutable maxMhtAmount;\n\n  uint256 public mhtSold;\n\n  constructor(\n    address _mhtOwner,\n    IERC20 _mht,\n    IERC20 _busd,\n    uint256 _mhtOnSale,\n    uint256 _mhtToBusd,\n    uint256 _minMhtAmount,\n    uint256 _maxMhtAmount,\n    uint256 _unlockAtIGOPercent,\n    uint256 _cliffMonths,\n    uint256 _vestingPeriodMonths\n  )\n    TokenAllocation(\n      _mhtOwner,\n      _mht,\n      _unlockAtIGOPercent,\n      _cliffMonths,\n      _vestingPeriodMonths\n    )\n  {\n    require(_busd != IERC20(address(0)), \"zero busd\");\n    transferOwnership(_mhtOwner);\n\n    busd = _busd;\n    mhtOnSale = _mhtOnSale;\n    mhtToBusd = _mhtToBusd;\n    minMhtAmount = _minMhtAmount;\n    maxMhtAmount = _maxMhtAmount;\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  function setIgoTimestamp(uint256 _igoTimestamp)\n    public\n    onlyOwner\n    whenNotPaused\n  {\n    _setIgoTimestamp(_igoTimestamp);\n    emit IGO(_igoTimestamp);\n  }\n\n  function buy(uint256 _mhtAmount)\n    public\n    whenNotPaused\n    beforeIGO\n    whitelisted(msg.sender)\n  {\n    require(_mhtAmount \u003e= minMhtAmount, \"Sale: amount less than min\");\n    require(_mhtAmount \u003c= maxMhtAmount, \"Sale: amount greater than max\");\n    require(\n      _getUserTotalTokens(msg.sender) + _mhtAmount \u003c= maxMhtAmount,\n      \"Sale: total greater than max\"\n    );\n    require(\n      mhtSold + _mhtAmount \u003c= mhtOnSale,\n      \"Sale: total MHT on sale reached\"\n    );\n\n    mhtSold += _mhtAmount;\n\n    uint256 busdAmount = (_mhtAmount * mhtToBusd) / 1e18;\n\n    busd.safeTransferFrom(msg.sender, mhtOwner, busdAmount);\n    _updateUserTokenAllocation(msg.sender, _mhtAmount);\n  }\n\n  function addToWhitelist(address[] memory _buyers)\n    public\n    onlyOwner\n    whenNotPaused\n  {\n    _addToWhitelist(_buyers);\n  }\n\n  function removeFromWhitelist(address[] memory _buyers)\n    public\n    onlyOwner\n    whenNotPaused\n  {\n    _removeFromWhitelist(_buyers);\n  }\n}\n"}}