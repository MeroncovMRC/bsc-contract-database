// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HERD {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor() {
        name = "HERDICK"; // Set the name for your token
        symbol = "HERD"; // Set the symbol for your token
        decimals = 18; // Set the decimal precision for your token
        totalSupply = 1000000000000000000000000; // Set the total supply for your token (in wei)

        balanceOf[msg.sender] = totalSupply; // Set the initial balance of the contract owner

        emit Transfer(address(0), msg.sender, totalSupply); // Emit the transfer event for the initial token supply
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address"); // Prevent transfer to the 0x0 address
        require(balanceOf[msg.sender] >= _value, "Insufficient balance"); // Check if the sender has sufficient balance

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(msg.sender, _to, _value);

        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address"); // Prevent transfer to the 0x0 address
        require(balanceOf[_from] >= _value, "Insufficient balance"); // Check if the sender has sufficient balance
        require(allowance[_from][msg.sender] >= _value, "Insufficient allowance"); // Check if the spender is allowed to transfer the specified amount

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);

        return true;
    }
}