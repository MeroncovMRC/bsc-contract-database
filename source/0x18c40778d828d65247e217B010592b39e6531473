
// File: contracts/MassSender.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract MassSender {
    event DistributedETH(address indexed from, address[] recipients, uint256[] amounts);
    event DistributedTokens(address indexed from, address[] recipients, uint256[] amounts, address indexed token);
    event DistributedMultipleTokens(address indexed from, address[] recipients, uint256[] amounts, address[] tokens);

    function distributeETH(address[] calldata recipients, uint256[] calldata amounts) external payable {
        require(recipients.length == amounts.length, "MassSender: invalid arguments");
        require(msg.value > 0, "MassSender: value must be higher than 0");
        
        uint256 totalAmount;
        for(uint i; i < amounts.length; i++) {
            require(amounts[i] > 0, "MassSender: all amounts must be higher than 0");
            totalAmount += amounts[i];
        }

        require(totalAmount == msg.value && totalAmount > 0, "MassSender: value must match sum of amounts");

        for(uint i; i < recipients.length; i++) {
            (bool success,) = recipients[i].call{value: amounts[i]}("");
            require(success, "MassSender: transaction failed");
        }

        emit DistributedETH(msg.sender, recipients, amounts);
    }

    function distributeTokens(address[] calldata recipients, uint256[] calldata amounts, address token) external {
        require(recipients.length == amounts.length, "MassSender: invalid arguments");
        
        uint256 totalAmount;
        for(uint i = 0; i < amounts.length; i++) {
            require(amounts[i] > 0, "MassSender: all amounts must be higher than 0");
            totalAmount += amounts[i];
        }

        IERC20(token).transferFrom(msg.sender, address(this), totalAmount);

        for(uint i; i < recipients.length; i++) {
            IERC20(token).transfer(recipients[i], amounts[i]);
        }

        emit DistributedTokens(msg.sender, recipients, amounts, token);
    }

    function distributeMultipleTokens(address[] calldata recipients, uint256[] calldata amounts, address[] calldata tokens) external {
        require(recipients.length == amounts.length, "MassSender: invalid arguments");
        
        for(uint i = 0; i < recipients.length; i++) {
            require(amounts[i] > 0, "MassSender: all amounts must be higher than 0");
            IERC20(tokens[i]).transferFrom(msg.sender, recipients[i], amounts[i]);
        }

        emit DistributedMultipleTokens(msg.sender, recipients, amounts, tokens);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

