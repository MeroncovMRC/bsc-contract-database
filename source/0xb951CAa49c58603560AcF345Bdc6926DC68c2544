
// File: contracts/NanoMinions.sol
/*
::::    :::     :::     ::::    :::  ::::::::  ::::    ::::  ::::::::::: ::::    ::: :::::::::::  ::::::::  ::::    :::  ::::::::
:+:+:   :+:   :+: :+:   :+:+:   :+: :+:    :+: +:+:+: :+:+:+     :+:     :+:+:   :+:     :+:     :+:    :+: :+:+:   :+: :+:    :+:
:+:+:+  +:+  +:+   +:+  :+:+:+  +:+ +:+    +:+ +:+ +:+:+ +:+     +:+     :+:+:+  +:+     +:+     +:+    +:+ :+:+:+  +:+ +:+
+#+ +:+ +#+ +#++:++#++: +#+ +:+ +#+ +#+    +:+ +#+  +:+  +#+     +#+     +#+ +:+ +#+     +#+     +#+    +:+ +#+ +:+ +#+ +#++:++#++
+#+  +#+#+# +#+     +#+ +#+  +#+#+# +#+    +#+ +#+       +#+     +#+     +#+  +#+#+#     +#+     +#+    +#+ +#+  +#+#+#        +#+
#+#   #+#+# #+#     #+# #+#   #+#+# #+#    #+# #+#       #+#     #+#     #+#   #+#+#     #+#     #+#    #+# #+#   #+#+# #+#    #+#
###    #### ###     ### ###    ####  ########  ###       ### ########### ###    #### ###########  ########  ###    ####  ########

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&#BGGGGBGGGB##PP#BPGGB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&##BGGB###&&BPPB#&@BB@@@&BBBBGGB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BBBB#&@@G7^~^^7JY5PGBP7Y#@&#G#&&BPPG#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#B####&@@@#! .~!!^~~^Y#BBB5~~G@@@BB@@@&BGBB&@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@&BB&&##@@@@@#: ^JY5! .:^?&####G7^P@@@#B@@@@&BB#B#@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@BB&@#B&@@@@@@7  JPGG5?JYY5#####BY!!&@@@B#@@@@@&B##B#@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@&B#@#G#&&&&&&&&~ .?PB#GYYYY5###&&B57~#@@@@B&@@@@@@BB@BB@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@#B@@&B&@@@@@@@@#! :?P@GY77777JP5P&B57~G@@@@##@@@@@@@#B@&G&@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@BB@@&B@@@@@@@@@&#7 :?5?7J!^^~7Y!YJ?G5?~5@&&&&B#&&&&&&&BB&&G&@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@#B@@&B@@@@@@@@@@#&J :?7:G7!.:~!G7JB?YP?~Y@@@@@##@@@@@@@@B#@&G&@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@&G@@@B&@@@@@@@@@##@Y .?!.7J?77?J??PG5PPJ~J@@@@@##@@@@@@@@@B@@&G@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@G&@@##@@@@@@@@@&#&@P .7Y!!777!77JPGPBBGJ~7@@@@@&#@@@@@@@@@##@@B#@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@&B@@@B&@@@@@@@@@&#@@G .75B5Y!7~Y5PY7B##GY!7&@@@@&#@@@@@@@@@&B@@@G@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@#B&##B#&&&&&@@@@##@@B  ~JP#Y^^?PPG5~Y&BPY!7#@@@@&#@@@@@@@@@@B@@@B&@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@B&@@##&&&&##&&&#BB&#G.^.~JP^5!7??JY!!BG5Y55#@@@@&#@@@@@@@@@@B@@@B#@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@G&@@&#@@@@@@@@@&&@@@@?J?7???YYYY55PYJG#BPGGB#&&&##&&@@@@@@@@B@@@B#@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@B#@@##@@@@@@@@@&##?7#?7Y?Y5P5YJ7P@&PYB@&##&BBBJ~~5###B####&BB@&&G@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@#B@@&#@@@@@@&##55J.~#PPY?7~^^!JG@@#GP#@&BP?YGBPB#####G&&@&##G###B@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@#B@@@#BG#&#&?JYPBB!!BJ^::^JP#@@&#B#P^~#@BB5!~~Y@@BGBGBGBBGPGGG##&&#&&@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@&#BBBBJBB5PB#55?G&&55~:^^^~@@&BGPPB5:^:J@@G^::?@@J^~^~!~~~~~^::^P@@&BGPB&@@@@@@@@@
@@@@@@@@@@@@@&GGBG5JPBP^:!@&BB~::!#@#J::75^^:Y@&GGG#Y:^^^:BG^::Y@&7:^:J&&&&@#Y^:^J#@@#@&P!!Y&@@@@@@@
@@@@@@@@@@B?7?Y?JB##&P^^^:5@B~::?@@P^:~P@@Y:^^#@BB#?::!P^:!^:^P@#!:^:J@@@@&Y~::?B@@@@@@@@&P7!5&@@@@@
@@@@@@@@#J:~PB&#B&@@Y::~~:~G~::Y@#7::7GBP5J:^:J@&#!::!#@?:::~B@#~:^:J@@@&Y~::!G@@@@@@@@@@@@#P5G@@@@@
@@@@@@&J^7YG#@@@@@@J::^BP:^^::P@Y::!G&####&J:^:B@5J5P&@@B??J#@@#?:::~777~::~P@@@G&@@@@@@@@##@&&##&@@
@@@@@5~7PBBB@@@@@&?:^!#@&~::^G#?!75&@&#@@@@&^::7@##&@@@@@@@@@@@@@GJ?7!~^^~5&@@@#B@@@@@@@@@@&@@&###@@
@@@&?!YBBP#@@@@@@&B#&@@@@#GB#@#&&&@@@&@@@@@@BPY?#GY5P&@@@&##BGGB&@BB@@&&#B#B@@#G######&@@@@&#&#B#@@@
@@GJ!J#BB&@@@@@@YJ@@@@@PYP@@&&@@PYPB&@@5J&@@@P5Y#B~:J&PYJ?77?~::G5::B@@#!^:5#7^~~~!7YG&@@@@#BGGP#@@@
@BPGGB&@@@@@@@@J::5@@B!:::5@&&@@#7^?@@J::5@&7::5&!:~&?::5#&@5^^PY:^:?@B~::PB^:!PG#&@@@@@@@#GB#&#@@@@
@&GBB#B@@@@@@&?:^:~#Y:~G7::P@@@@7:^#&?:^:^B7:^G@Y::GG::?@@&?:^G?::7::Y~:^G@&G7!!!777B@@@@@J7JGGB@@@@
@@GPB@#&@@@@#!:^BY:^:J&@&!::G@@5::P&!:^G7:^:~B@B::J@!::J5Y~:!G7::Y@!:::!#@@@@&#BGP5:^B@@#PJYYGG&@@@@
@@@BBBBG&@@#7~7B@@?~G@@@@#J!^B#^:?#7~7B@G^^7&@&~~Y&@#J!!!77J#J7?P@@G~!?&@@@GY?77!!!!5&@#JYGB###B&@@@
@@@&GPPG#@@&&@@@@@@&@@@@@@@@GG!:7#&&@@@@@&&@@@BY&@@##@@@@@@@@&@@@&@@@@@@@@@&@@@@@@@@@&@@@BB@##&&B#@@
@@@@BGBB&&##@@@@@@@@@@@@@@@@@G?#@@@@@@@@@@&B@@&@@@BG&@@@&GB##&BGP&@@@@@@@@@@@@@@@@@@@G#@@G#@#B&@&G#@
@@@#J&@@@@&BB&@@@@@@@@@@@@@@@&@@@@@@@@@@@@&P&&G@@#G&@@@@@PP&BBBGG@@@@@@@@@@@@@@@@@@@@&B&@&@&GB@#G#@@
@@@BB@@@@@@&P#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GB#G@#G&@@@@@@GP&BB&G&@@@@@@@@@@@@@@@@@@@@@@&@@@#B&&&&@@@
@@@&BG&@@@@##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&BGP#B&@@@@@@@BB#&@&B@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@
@@@@@#B#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&GG#@@@@@@@@@BB&&@B&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@GB@@@G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BG@@BB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#P@&P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5&G&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BPB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "./IERC20.sol";
import "./INanottery.sol";

contract NanoMinions {

    // constants
    IERC20 BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    INanottery Nanottery;

    uint constant ROBOT_TO_WORKING_WORKER = 720000;
    uint constant PSN = 10000;
    uint constant PSNH = 5000;
    uint constant INVITATION_RATE = 16;
    uint constant DEV_FEE = 3;
    uint constant POOL_FEE = 3;
    uint constant PUNISH_FEE = 80;

    // attributes
    uint public marketRobot;
    uint public startTime = 3333333333;
    uint public invasionTime = 3333333333;
    uint public nanotteryPrice = 1 ether;
    address public owner;
    mapping(address => uint) private lastWorking;
    mapping(address => uint) private workingWorkers;
    mapping(address => uint) private claimedRobot;
    mapping(address => uint) private tempClaimedRobot;
    mapping(address => address) private referrals;
    mapping(address => ReferralData) private referralData;

    // structs
    struct ReferralData {
        address[] invitees;
        uint rebates;
    }

    // modifiers
    modifier onlyOwner {
        require(msg.sender == owner, "not owner");
        _;
    }

    modifier onlyInvasion {
        require(block.timestamp > invasionTime, "not invasion");
        _;
    }

    modifier onlyOpen {
        require(block.timestamp > startTime, "not start open");
        _;
    }

    modifier onlyCloneOnceADay {
        require(block.timestamp - 1 days >= lastWorking[msg.sender], "only clone once a day");
        _;
    }

    modifier onlyNanoMinionsPlayer {
        require(workingWorkers[msg.sender] > 0, "not NanoMinions Player");
        require(msg.sender != owner, "owner can't participate");
        _;
    }

    // events
    event Create(address indexed sender, uint indexed amount);
    event Clone(address indexed sender, uint indexed time);
    event Claim(address indexed sender, uint indexed amount);
    event ParticipateNanottery(address indexed sender, uint indexed time);

    constructor() {
        owner = msg.sender;
    }

    // Create Robot
    function createRobot(address _ref, uint _amount) external onlyOpen {
        require(_amount >= 10 ether, "minimum 10BUSD");
        BUSD.transferFrom(msg.sender, address(this), _amount);
        uint robotClone = calculateRobotClone(_amount, BUSD.balanceOf(address(this)) - _amount);

        // dev fee
        robotClone -= getDevFee(robotClone);
        uint fee = getDevFee(_amount);
        BUSD.transfer(owner, fee);

        claimedRobot[msg.sender] += robotClone;
        calculateClone(_ref);

        emit Create(msg.sender, _amount);
    }

    // Clone Robot
    function cloneRobot(address _ref) external onlyOpen onlyCloneOnceADay {
        calculateClone(_ref);

        emit Clone(msg.sender, block.timestamp);
    }

    // Claim Robot
    function claimRobot() external onlyInvasion {
        uint hasRobot = getMyRobot(msg.sender);
        uint robotValue = calculateRobotClaim(hasRobot);
        uint devFee = getDevFee(robotValue);
        uint poolFee = getPoolFee(robotValue);
        uint realReward;

        if (robotValue >= 100 ether) {
            realReward = robotValue - devFee - poolFee;
        } else {
            uint punishFee = getPunishFee(robotValue);
            realReward = robotValue - devFee - poolFee - punishFee;
        }

        if (tempClaimedRobot[msg.sender] > 0) {
            referralData[msg.sender].rebates += calculateRobotClaim(tempClaimedRobot[msg.sender]);
        }

        // reset
        claimedRobot[msg.sender] = 0;
        tempClaimedRobot[msg.sender] = 0;
        lastWorking[msg.sender] = block.timestamp;
        marketRobot += hasRobot;

        // dev fee
        BUSD.transfer(owner, devFee);
        // user reward
        BUSD.transfer(msg.sender, realReward);

        emit Claim(msg.sender, realReward);
    }

    // Play nanottery
    function participateNanottery(uint _ticketCount) external onlyNanoMinionsPlayer {
        uint nowInviteRebatePrice;
        if (claimedRobot[msg.sender] > 0) {
            nowInviteRebatePrice = calculateRobotClaim(claimedRobot[msg.sender]);
        }

        uint nowRobotClaimPrice = calculateRobotClaim(getRobotSinceLastClone(msg.sender));
        uint buyPrice = _ticketCount * nanotteryPrice;
        require(nowInviteRebatePrice + nowRobotClaimPrice >= buyPrice, "not enough BUSD");
        require(_ticketCount >= 1, "at least one");

        uint haveRobot = marketRobot * 5 / 100;
        uint robotPrice = calculateRobotClaim(haveRobot);
        uint robot = buyPrice * haveRobot / robotPrice;
        marketRobot += robot;

        if(claimedRobot[msg.sender] >= robot) {
            claimedRobot[msg.sender] -= robot;
        } else {
            robot -= claimedRobot[msg.sender];
            claimedRobot[msg.sender] = 0;

            uint remainingRobotPrice = calculateRobotClaim(robot);
            uint nowWorksTime = min(ROBOT_TO_WORKING_WORKER, block.timestamp - lastWorking[msg.sender]);
            uint useTime = remainingRobotPrice * nowWorksTime / nowRobotClaimPrice;
            lastWorking[msg.sender] += useTime;
        }

        BUSD.transfer(address(Nanottery), buyPrice);
        Nanottery.participate(msg.sender, _ticketCount);

        emit ParticipateNanottery(msg.sender, block.timestamp);
    }

    //only owner
    function dispatchMarket(uint _startTime, uint _invasionTime, uint _amount) external onlyOwner {
        require(marketRobot == 0);
        BUSD.transferFrom(msg.sender, address(this), _amount);
        startTime = _startTime;
        invasionTime = _invasionTime;
        marketRobot = 72000000000;
    }

    function setNanotteryContact(address _contractAddress) external onlyOwner {
        Nanottery = INanottery(_contractAddress);
    }

    function setNanotteryPrice(uint _nanotteryPrice) external onlyOwner {
        nanotteryPrice = _nanotteryPrice;
    }

    function robotRewards(address _address) public view returns (uint) {
        return calculateRobotClaim(getMyRobot(_address));
    }

    function getMyRobot(address _address) public view returns (uint) {
        return claimedRobot[_address] + getRobotSinceLastClone(_address);
    }

    function getClaimRobot(address _address) public view returns (uint) {
        return claimedRobot[_address];
    }

    function getRobotSinceLastClone(address _address) public view returns (uint) {
        if (block.timestamp > invasionTime) {
            uint secondsPassed = min(ROBOT_TO_WORKING_WORKER, block.timestamp - lastWorking[_address]);
            return secondsPassed * workingWorkers[_address];
        } else {
            return 0;
        }
    }

    function getTempClaimRobot(address _address) public view returns (uint) {
        return tempClaimedRobot[_address];
    }

    function getLastWorking(address _address) public view returns (uint) {
        return lastWorking[_address];
    }

    function getPoolAmount() public view returns (uint) {
        return BUSD.balanceOf(address(this));
    }

    function getWorkingWorkers(address _address) public view returns (uint) {
        return workingWorkers[_address];
    }

    function getReferralData(address _address) public view returns (ReferralData memory) {
        return referralData[_address];
    }

    function getReferralAllRebate(address _address) public view returns (uint) {
        return referralData[_address].rebates;
    }

    function getReferralAllInvitee(address _address) public view returns (uint) {
        return referralData[_address].invitees.length;
    }

    function calculateRobotClaim(uint robot) public view returns (uint) {
        return calculateTrade(robot, marketRobot, BUSD.balanceOf(address(this)));
    }

    function calculateClone(address _ref) private {
        if (_ref == msg.sender || _ref == address(0) || workingWorkers[_ref] == 0) {
            _ref = owner;
        }

        if (referrals[msg.sender] == address(0)) {
            referrals[msg.sender] = _ref;
            referralData[_ref].invitees.push(msg.sender);
        }

        uint robotUsed = getMyRobot(msg.sender);
        uint newWorkers = robotUsed / ROBOT_TO_WORKING_WORKER;
        workingWorkers[msg.sender] += newWorkers;
        claimedRobot[msg.sender] = 0;
        lastWorking[msg.sender] = block.timestamp > invasionTime ? block.timestamp : invasionTime;

        // referral rebate
        uint robotRebate = robotUsed * INVITATION_RATE / 100;
        claimedRobot[referrals[msg.sender]] += robotRebate;
        tempClaimedRobot[referrals[msg.sender]] += robotRebate;

        marketRobot += robotUsed / 5;
    }

    function calculateRobotClone(uint _busd, uint _contractBalance) private view returns (uint) {
        return calculateTrade(_busd, _contractBalance, marketRobot);
    }

    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) private pure returns (uint) {
        return (PSN * bs) / (PSNH + ((PSN * rs + PSNH * rt) / rt));
    }

    function getDevFee(uint _amount) private pure returns (uint) {
        return _amount * DEV_FEE / 100;
    }

    function getPoolFee(uint _amount) private pure returns (uint) {
        return _amount * POOL_FEE / 100;
    }

    function getPunishFee(uint _amount) private pure returns (uint) {
        return _amount * PUNISH_FEE / 100;
    }

    function min(uint a, uint b) private pure returns (uint) {
        return a < b ? a : b;
    }
}

// File: contracts/IERC20.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    function approve(address spender, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}


// File: contracts/INanottery.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

interface INanottery {
    function participate(address player, uint ticketCount) external;
}
