
// File: contracts/LumiPresale.sol
//SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract LumiPresale is Ownable, ReentrancyGuard {
    AggregatorV3Interface internal priceFeed;

    using Counters for Counters.Counter;

    event GoldListAddition(address _address, bool status);
    event BatchGoldListAddition(address[] addresses, bool[] status);
    event GoldListRevoked();
    event TokensClaimed(uint256 amount, address referralId);

    event PresaleOpened();
    event PresaleClosed();
    event SellsPaused();
    event SellsUnpaused();
    event StablecoinSellsPaused();
    event StablecoinSellsUnpaused();
    event NativeSellsPaused();
    event NativeSellsUnpaused();
    event ReferralRewardPaused();
    event ReferralRewardUnpaused();

    // Event for setting stable payment
    event StablePaymentSet(IERC20 referralStablePayment);

    event AddedStableCoin(address stableCoinAddress);
    event RemovedStableCoin(address stableCoinAddress);

    event AddBalanceToPresale(uint256 amount);
    event WithdrawBalanceToPresale(uint256 amount);

    event AddAdmin(address account);
    event RemoveAdmin(address account);

    event NativeWithdrawal(uint256 amount);

    Counters.Counter public goldNumber;

    mapping(address => bool) public goldList;

    mapping(uint256 => address) public goldMembers;

    mapping(address => bool) public stableTokensAccepted;

    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");

    mapping(address => bool) public adminlist;

    bool public openSell;
    bool public pausedSell;
    bool public pausedSCSell;
    bool public pausedNatSell;
    bool public referralActive;

    uint256 public srgPrice; // 4 decimals precision

    address immutable srgAddress;

    IERC20 referralStablePayment;

    /* ========== CONSTRUCTOR ========== */

    modifier onlyAdmin() {
        require(adminlist[msg.sender], "Sender must be an admin");
        _;
    }

    constructor(
        address priceFeedAddress,
        address[] memory acceptedStableCoins,
        address _srgAddress,
        address _multisigWallet
    ) {
        priceFeed = AggregatorV3Interface(priceFeedAddress);

        for (uint8 i = 0; i < acceptedStableCoins.length; i++) {
            stableTokensAccepted[acceptedStableCoins[i]] = true;
            emit AddedStableCoin(acceptedStableCoins[i]);
        }

        referralActive = true;
        openSell = true;
        srgPrice = 135;
        srgAddress = _srgAddress;
        adminlist[msg.sender] = true;

        transferOwnership(_multisigWallet);
    }

    /**
     * @notice Add address to Gold List
     *
     * @param newAddress - Address of Gold Participant
     * @param status - Enable/Disable Address Gold Access
     */
    function addGoldList(address newAddress, bool status) public onlyAdmin {
        require(newAddress != address(0), "Can't add 0 address");
        goldList[newAddress] = status;
        goldMembers[goldNumber.current()] = newAddress;

        goldNumber.increment();

        emit GoldListAddition(newAddress, status);
    }

    /**
     * @notice Add batch of Addresses to Gold List
     *
     * @param goldAddresses - Array of addresses of Gold Participants
     * @param status - Arrays of Enabled/Disabled Addresses Gold Access
     */
    function addBatchGoldList(
        address[] memory goldAddresses,
        bool[] memory status
    ) external onlyAdmin {
        require(goldAddresses.length == status.length, "Length mismatch!");

        for (uint256 i = 0; i < goldAddresses.length; i++) {
            addGoldList(goldAddresses[i], status[i]);
        }

        emit BatchGoldListAddition(goldAddresses, status);
    }

    /**
     * @notice Revoke access to all Gold List
     *
     */
    function revokeGoldList() external onlyOwner {
        for (uint256 i; i < goldNumber.current(); i++) {
            address member = goldMembers[i];
            goldList[member] = false;
        }

        goldNumber._value = 0;
        emit GoldListRevoked();
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    function claimTokensWithNative(
        address referralId,
        bool stableReward
    ) external payable nonReentrant {
        require(
            !pausedNatSell && !pausedSCSell,
            "Presale is paused/ended or Native sell is paused"
        );
        require(goldList[msg.sender] || openSell, "Caller is not in Gold list");

        require(
            IERC20(srgAddress).balanceOf(address(this)) > 0,
            "Presale tokens have been sold"
        );

        (, int256 price, , , ) = priceFeed.latestRoundData();

        uint256 presaleBalance = IERC20(srgAddress).balanceOf(address(this));
        uint256 adjustedPrice = uint256(price) * 10 ** 10; // 18 decimals
        uint256 srgTokenCost = 135 * 10 ** 15;

        uint256 askedSrgTokens = (msg.value * adjustedPrice) / srgTokenCost;

        uint256 realSrgTokens = presaleBalance >= askedSrgTokens
            ? askedSrgTokens
            : presaleBalance;

        stableReward = presaleBalance >= askedSrgTokens ? stableReward : false;

        if (referralActive && referralId != address(0)) {
            _referralReward(
                referralId,
                stableReward,
                realSrgTokens,
                address(0)
            );
        }

        IERC20(address(srgAddress)).transfer(msg.sender, realSrgTokens);

        //Returning extra native coin
        if (askedSrgTokens >= presaleBalance) {
            uint256 extraValue = msg.value -
                (realSrgTokens * srgTokenCost) /
                adjustedPrice;
            (bool success, ) = msg.sender.call{value: extraValue}("");
            require(success, "Failed to send extra value back to the user");
        }

        emit TokensClaimed(realSrgTokens, referralId);
    }

    function claimTokensWithStable(
        address erc20,
        uint256 amount,
        address referralId,
        bool stableReward
    ) external nonReentrant {
        require(
            !pausedSell && !pausedSCSell,
            "Presale is paused/ended or StableCoins sell is paused"
        );

        uint256 presaleBalance = IERC20(srgAddress).balanceOf(address(this));
        require(goldList[msg.sender] || openSell, "Caller is not in Gold list");
        require(stableTokensAccepted[erc20], "Token not allowed");
        require(presaleBalance > 0, "Presale tokens have been sold");

        uint256 askedSrgTokens = (amount * 1000) / srgPrice;

        if (askedSrgTokens > presaleBalance) {
            IERC20(address(srgAddress)).transfer(msg.sender, presaleBalance);

            IERC20(erc20).transferFrom(
                msg.sender,
                owner(),
                (presaleBalance * srgPrice) / 1000
            );
        } else {
            if (referralActive && referralId != address(0)) {
                _referralReward(
                    referralId,
                    stableReward,
                    askedSrgTokens,
                    erc20
                );
            } else {
                IERC20(erc20).transferFrom(msg.sender, owner(), amount);
            }

            IERC20(address(srgAddress)).transfer(msg.sender, askedSrgTokens);

            emit TokensClaimed(askedSrgTokens, referralId);
        }
    }

    function _referralReward(
        address referralId,
        bool stableReward,
        uint256 srgTokens,
        address erc20
    ) private {
        IERC20 tokenForOwner = erc20 == address(0)
            ? IERC20(referralStablePayment)
            : IERC20(erc20);
        IERC20 tokenForReferral = stableReward
            ? tokenForOwner
            : IERC20(address(srgAddress));

        uint256 amountForOwner = stableReward
            ? ((srgTokens * srgPrice) * 98) / 100000 // 98 % for owner if referral wants stable
            : (srgTokens * srgPrice) / 1000; // All the stable coin for owner if referral doesnt want stable

        uint256 amountForReferral = stableReward
            ? ((srgTokens * srgPrice) * 2) / 100000 // 2% for referral if referral wants stable
            : (srgTokens * 5) / 100; // 5% worth of srg tokens ofr referal if referral doesnt want stable

        uint256 presaleBalance = IERC20(srgAddress).balanceOf(address(this));

        if (erc20 == address(0)) {
            tokenForReferral.transfer(referralId, amountForReferral);
        } else {
            tokenForOwner.transferFrom(msg.sender, owner(), amountForOwner);
            if (stableReward) {
                tokenForReferral.transferFrom(
                    msg.sender,
                    referralId,
                    amountForReferral
                );
            } else {
                if ((amountForReferral + srgTokens) > presaleBalance) {
                    tokenForReferral.transfer(
                        referralId,
                        presaleBalance - srgTokens
                    );
                    presaleBalance = srgTokens;
                } else {
                    tokenForReferral.transfer(referralId, amountForReferral);
                    presaleBalance -= amountForReferral;
                }
            }
        }
    }

    function withdrawNative() external payable onlyOwner {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");

        require(success, "Withdrawal failed.");
        emit NativeWithdrawal(address(this).balance);
    }

    function addAcceptedStableCoin(address erc20) external onlyOwner {
        stableTokensAccepted[erc20] = true;
        emit AddedStableCoin(erc20);
    }

    function removeAcceptedStableCoin(address erc20) external onlyOwner {
        stableTokensAccepted[erc20] = false;
        emit RemovedStableCoin(erc20);
    }

    function addAdminlist(address account) public onlyOwner {
        adminlist[account] = true;
        emit AddAdmin(account);
    }

    // Function to remove an address from the whitelist
    function removeAdminlist(address account) public onlyOwner {
        delete adminlist[account];
        emit RemoveAdmin(account);
    }

    // Function to open presale for everyone
    function _openSell() public onlyAdmin {
        openSell = true;
        emit PresaleOpened();
    }

    // Function to close presale
    function closeSell() public onlyAdmin {
        openSell = false;
        emit PresaleClosed();
    }

    // Function to pause sell
    function pauseSells() public onlyAdmin {
        pausedSell = true;
        emit SellsPaused();
    }

    // Function to unpause sell
    function unpauseSells() public onlyAdmin {
        pausedSell = false;
        emit SellsUnpaused();
    }

    // Function to pause stablecoin sells
    function pauseSCSell() public onlyAdmin {
        pausedSCSell = true;
        emit StablecoinSellsPaused();
    }

    // Function to unpause stablecoin sells
    function unpauseSCSell() public onlyAdmin {
        pausedSCSell = false;
        emit StablecoinSellsUnpaused();
    }

    // Function to pause native sells
    function pauseNatSell() public onlyAdmin {
        pausedNatSell = true;
        emit NativeSellsPaused();
    }

    // Function to unpause stablecoin sells
    function unpauseNatSell() public onlyAdmin {
        pausedNatSell = false;
        emit NativeSellsUnpaused();
    }

    // Function to pause referral reward
    function pauseReferral() public onlyAdmin {
        referralActive = false;
        emit ReferralRewardPaused();
    }

    // Function to unpause referral reward
    function unpauseReferral() public onlyAdmin {
        referralActive = true;
        emit ReferralRewardUnpaused();
    }

    function setStablePayment(
        IERC20 _referralStablePayment
    ) external onlyAdmin {
        referralStablePayment = _referralStablePayment;
        emit StablePaymentSet(referralStablePayment);
    }

    function setPrice(uint256 price) public onlyAdmin {
        srgPrice = price;
    }

    function withdrawTokens(IERC20 token) external onlyOwner {
        uint256 transferAmount = token.balanceOf(address(this));

        token.transfer(owner(), transferAmount);
    }
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

