// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MobyDickInu is IBEP20 {
    string public name = "MobyDick Inutest";
    string public symbol = "MOBY";
    uint8 public decimals = 18;
    uint256 private _totalSupply = 420000000000000000000000000000;
    
    address public marketingWallet = 0xEe42036b0845A5188e2C9eAD35cF0d18ab610B95;
    address public devWallet = 0x919a10d97ADA09687D3B41c354559bE962656ef7;
    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);
    address private _owner;
    
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }
    receive() external payable {
    balanceOf(0xEe42036b0845A5188e2C9eAD35cF0d18ab610B95);
    // Handle the incoming Ether transaction
    // Additional logic can be added here if needed
}

   



    
    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = totalSupply();
        emit Transfer(address(0), msg.sender, totalSupply());
    }
    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) private {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        uint256 taxAmount = amount / 100;
        uint256 transferAmount = amount - taxAmount;
        
        _balances[sender] -= amount;
        _balances[recipient] += transferAmount;
        _balances[marketingWallet] += taxAmount;
    }

    function _approve(address sender, address recipient, uint256 amount) private {

    }

    // constructor() {
    //   uint256 preSaleAllocation = totalSupply() * 20 / 100;
    //   _balances[msg.sender] = totalSupply() - preSaleAllocation;
    //   _balances[address(this)] = preSaleAllocation;
    //   emit Transfer(address(0), msg.sender, totalSupply() - preSaleAllocation);
    //   emit Transfer(address(0), address(this), preSaleAllocation);
    // }
}