// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function burn(uint256 amount_) external;
    function isExcludedFromFee(address addr_) external view returns(bool);
}

interface ISwapRouter {
    function factory() external pure returns (address);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface ISwapV2Pair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function totalSupply() external view returns (uint);

    function kLast() external view returns (uint);
}

contract AHDToken is Ownable, IERC20Metadata {

    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals = 18;

    uint256 constant MAX_UINT256 = ~uint256(0);
    uint256 constant TOKEN_UNIT = 10**18;
    uint256 constant FEES_BUY = 5; //Buying slip point
    uint256 constant FEES_SELL = 10; //Selling slip point
    //uint256 constant TOKEN_TOTAL = 990000; //Total circulation

    // Direction
    uint256 constant DIRECTION_TRANSFER = 0;
    uint256 constant DIRECTION_BUY = 1;
    uint256 constant DIRECTION_SELL = 2;

    address public immutable uniswapV2Pair;       // AHD/USDT Pair
    mapping(address => bool) public ahdPairs;     // 
    ISwapRouter public _swapRouter;               //pancakeswap
    IERC20 public usdtToken;                      //USDT

    address private _initPoolAddr;                //first 
    address private _feeAddr;   
    mapping(address => bool) private _isExcludedFromFee;

    constructor(address swapAddress_, address usdtAddress_, address initPoolAddr_, address feeAddr_, address[] memory addrAll_) {
        _name = "AHD Token";
        _symbol = "AHD";
        usdtToken = IERC20(usdtAddress_); //USDT
        ISwapRouter swapRouter = ISwapRouter(swapAddress_);
        _swapRouter = swapRouter;
        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        address pair = swapFactory.createPair(address(this), usdtAddress_); //create Transaction pair
        uniswapV2Pair = pair;
        ahdPairs[pair] = true; 
    
        _initPoolAddr = initPoolAddr_; 
        _feeAddr = feeAddr_; 
        
        _isExcludedFromFee[_initPoolAddr] = true;
        _isExcludedFromFee[_feeAddr] = true;
        
        _mintAll(addrAll_);
    }

    function _mintAll(address[] memory addrAll_) internal virtual {
        for (uint i = 0; i < addrAll_.length; i++) {
            _mint(addrAll_[i], 90000 * TOKEN_UNIT); 
            _isExcludedFromFee[addrAll_[i]] = true;
        }
    }

    
    function setInitPoolAddress(address poolAddress_) public virtual onlyOwner returns (bool){
        if (IERC20(uniswapV2Pair).totalSupply() == 0) { 
            _initPoolAddr = poolAddress_;
            return true;
        }
        return false;
    }

    function isExcludedFromFee(address addr_) public override view returns(bool) {
        return _isExcludedFromFee[addr_];
    }

    function excludeFromFee(address addr_, bool bVal_) public virtual onlyOwner returns (bool) {
        if ( _isExcludedFromFee[addr_] != bVal_ ) {
            _isExcludedFromFee[addr_] = bVal_;
            return true;
        }
        return false;
    }

    function setFeeAddress(address feeAddress_) public virtual onlyOwner returns (bool){
        _feeAddr = feeAddress_;
        return true;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function burn(uint256 amount) public override {
        address owner = _msgSender();
        _burn(owner, amount);
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    function _transfer(address from_, address to_, uint256 amount_) internal virtual {
        require(from_ != address(0), "ERC20: transfer from the zero address");
        require(to_ != address(0), "ERC20: transfer to the zero address");
        require(amount_ > 0, "ERC20: Transfer amount must be greater than zero");

        uint tFee_ = 0; 
        
        if (ahdPairs[from_]) { // buy
            if(!_isExcludedFromFee[to_]){
                tFee_ = amount_.mul(FEES_BUY).div(100);
            }
        }
        else { 
            if (ahdPairs[to_]) { 
                if (IERC20(to_).totalSupply() == 0) { 
                    require(from_ == _initPoolAddr, "ERC20: Transaction not open" );
                }
                else if(!_isExcludedFromFee[from_]) {
                    tFee_ = amount_.mul(FEES_SELL).div(100);
                }
            }
        }
    
        uint tTransferAmt_ = amount_;
        if (tFee_ > 0) {
            _takeTo(from_, _feeAddr, tFee_);
            tTransferAmt_ = amount_.sub(tFee_, "ERC20: FEE MAX");
        }
        
        _takeTransfer(from_, to_, amount_, tTransferAmt_);
    }

    function _takeTo(address from_, address to_, uint256 tValue_) private {
        _balances[to_] = _balances[to_].add(tValue_);
        emit Transfer(from_, to_, tValue_);
    }

    function _takeTransfer(address from_, address to_, uint256 sendVal_, uint256 receviedVal_ ) private {
        _balances[from_] = _balances[from_].sub(sendVal_, "ERC20: transfer amount exceeds balance");
        _balances[to_] = _balances[to_].add(receviedVal_);
        emit Transfer(from_, to_, receviedVal_);
    }

    function _mint(address account, uint256 amount) internal virtual {
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        uint256 accountBalance = _balances[account];
        _balances[account] = accountBalance.sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }
}