
// File: /contracts/utgdao.sol
/**
 *Submitted for verification at BscScan.com on 2022-02-16
*/

pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed

// import "hardhat/console.sol";

interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }


    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false
library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}


contract Ownable is Context {
    address internal _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }  
   
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
   
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function getUnlockTime() public view returns (uint256) {
        return _lockTime;
    }
   
    function getTime() public view returns (uint256) {
        return block.timestamp;
    }

    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }
   
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}


// pragma solidity >=0.5.0;
//工厂合约
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;
//lp代币合约
interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
   
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;
//路由合约1
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// pragma solidity >=0.6.2;
//路由合约2
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract UTGDAO is Context, IERC20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isBlocked;

    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal;
	uint256 private _tTotalMaxFee;
    uint256 private _rTotal;
    uint256 private _tFeeTotal;

    string private _name;
    string private _symbol;
    uint256 private _decimals;
    
    // 分红代数
    uint256 private   feeLevels;
    uint256[] private  feeRate;
    uint256 private destroyRate;

    address public immutable  _destroyAddress = address(0x000000000000000000000000000000000000dEaD);
    mapping(address => address) public inviter;
    
    address public uniswapV2Pair;
    address public fundAddress; //utg+utgdao双重挖矿lp质押池地址

    uint256 public liquidityDivisor; //回流到dex的流动池比率
    uint256 public fundDivisor;  //回流到lp质押挖矿池比率

    IUniswapV2Router02 public uniswapV2Router;
   
    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = false;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
   
    event SwapTokensForETH(
        uint256 amountIn,
        address[] path
    );
   
    //防止重入
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }


    constructor(address tokenOwner,uint256 _liquidityDivisor,uint256 _fundDivisor,uint256 _destroyRate,uint256[] memory initFee) {
        _name = "UTGDAO";
        _symbol = "UD";
        _decimals = 18;
        _tTotal = 10000000 * 10**_decimals;
		_tTotalMaxFee = _tTotal.div(10).mul(9);//通缩到最后100万个停止，总通缩值=1000万-100万
		
        //_rTotal是反射总量，用来控制实际流通总量，而_tTotal是用来显示的总发行量，不能用这个数来控制流通量
        _rTotal = (MAX - (MAX % _tTotal));
        _rOwned[tokenOwner] = _rTotal;
        
        _isExcludedFromFee[msg.sender] = true;//合约owner转账不分红不扣税
        _isExcludedFromFee[address(this)] = true;//合约自身转账出去不分红不扣税
        // fundAddress = _fundAddress;

        liquidityDivisor = _liquidityDivisor;
        fundDivisor = _fundDivisor;

        // Pancake Router Testnet v2
        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);
        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);
        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x870526b7973b56163a6997bB7C886F5E4EA53638);
       
        // uniswap Router Mainnet v2
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        //LP币地址（UDAO<=>WETH）
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;

        destroyRate = _destroyRate;
        feeLevels = initFee.length;
        require(feeLevels>0 && feeLevels < 9,"Init Fee arry length must>0 and <9");
        for (uint256 i=0; i<feeLevels; i++){
           feeRate.push(initFee[i]);     
        }

        _owner = msg.sender;
        emit Transfer(address(0), tokenOwner, _tTotal);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rOwned[account]);
    }

    function tokenFromReflection(uint256 rAmount)
        public
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        //发行数量与其反射数的比值，用_rtotal/_ttotal计算出来，_rtotal算的是最大反射数，比如当总发行199个，最大数MAX是1000
        //那么_rtotal就是995，而_rtotal/_ttotal就是5，所以这个方法就会返回通缩或者通胀后的数额
        //地址的币账户余额记录的是反射数量，真正返回余额的时候需要处以倍数得到真是余额
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {

        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(amount,"BEP20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function setBlocked(address account,bool isBlock) public onlyOwner {
        require(account != _owner && account != address(0),"Can't set owner or zero");
        _isBlocked[account] = isBlock;
    }

    function excludeFromFee(address account) public onlyOwner {
        require(account != _owner && account != address(0),"Can't set owner or zero");
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        require(account !=_owner && account !=address(0),"Can't set owner or zero");
        _isExcludedFromFee[account] = false;
    }

    function getAllAddress() public view returns (address,address,address) {
        return (fundAddress,uniswapV2Pair,address(uniswapV2Router));
    }

    function getInviter() public view returns (address) {
        return inviter[msg.sender];
    }

    function getAnyInviter(address account) public view returns (address) {
        return inviter[account];
    }

    function setInviter(address account,address newinviter) public onlyOwner returns(bool){
        bool isok = false;
        
        require(account != address(0) && !isContract(account), "BEP20: account from the zero or contract address");
        require(newinviter != address(0) && !isContract(newinviter), "BEP20: new inviter to the zero or contract address");
        
        inviter[account] = newinviter;
        isok = true;
        return isok;
    }

    function getFeeArry() public view returns(uint256,uint256,uint256,uint256,uint256[] memory){
        return (fundDivisor ,liquidityDivisor ,destroyRate ,feeLevels, feeRate);
    }

    function setFeeArry(
            uint256 _fundDivisor,
            uint256 _liqudityDivisor,
            uint256 _destroyRate,
            uint256 _levs,
            uint256[] memory _feerate
    ) public onlyOwner {
        uint256 setlen = _feerate.length;
        require(_levs==setlen && _levs<9,"Error arry lenth set");
        
        fundDivisor = _fundDivisor;
        liquidityDivisor = _liqudityDivisor;
        destroyRate = _destroyRate;
        feeLevels = _levs;
        uint256 len = feeLevels >= feeRate.length ? feeLevels : feeRate.length;
        for (uint256 i=0; i<len; i++){
            uint256 ele = i >= _feerate.length ? 0 : _feerate[i];
            if (i+1> feeRate.length){
                feeRate.push(ele);
            }else{
                feeRate[i]=ele;
            }           
        }
    }

    //to recieve BNB from uniswapV2Router when swaping
    //用来接收dex交易所转进来的eth
    receive() external payable {}


    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    //返回总反射量与总发行量比率
    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    //合约owner取走合约中的bnb币
    function claimTokens() public onlyOwner {
        // (bool sent,bytes memory data) = _owner.call{value:address(this).balance}("");
        // require(sent,"Failed to send");
        payable(_owner).transfer(address(this).balance);
    }

    //从合约地址上取走其他代币
    function claimOtherTokens(address token,address to, uint256 amount) public onlyOwner returns(bool sent){
        require(to != address(this) && to != address(0), "Error target address");
        uint256 _contractBalance = IERC20(token).balanceOf(address(this));
        if (token == address(this)){
            require(amount<_contractBalance ,"Can't let you take all native token");
        }
        if (amount>0 && amount <= _contractBalance){
            sent = IERC20(token).transfer(to, amount);
        }else{
            return false;
        }
    }

    //授权spender地址可以消费本合约地址上的token代币
    function approveForTokens(address token,address spender, uint256 amount) public onlyOwner {
        require(token != address(0) && spender != address(0), "Error token or spender address");
        require(token != address(this) && amount>0, "Can't take native token or error approve amount");
        IERC20(token).approve(spender, amount);
    }

    function isBlocked(address account) public view returns (bool) {
        return _isBlocked[account];
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        //用一半的代币兑换成eth
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        //把swap回来的eth加上另一半的代币加入流动池做流动性
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);
        
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapAndExchange(uint256 contractTokenBalance) private lockTheSwap {
        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        //用一半的代币兑换成eth
        swapTokensForEth(contractTokenBalance); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        //swap回来的bnb数量
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // 需要将换回来的bnb发送到utg合约去挖出utg到本合约
        TransferHelper.safeTransferETH(fundAddress, newBalance);        
    }


    //用代币换eth
    function swapTokensForEth(uint256 tokenAmount) private {
        // Generate the uniswap pair path of token -> WETH
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount+100000);

        // Make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // Accept any amount of ETH
            path,
            address(this), // The contract换回来的wbnb回到本合约地址
            block.timestamp
        );
       
        emit SwapTokensForETH(tokenAmount, path);
    }
   
    //添加流动性
    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // Approve token transfer to cover all possible scenarios
        //授权dex可以消费本合约地址上的tokenAmount数量代币
        _approve(address(this), address(uniswapV2Router), tokenAmount+100000);

        // Add the liquidity
        //把eth与代币同时发送到dex做流动性
        //生成的lp token转给了owner
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // Slippage is unavoidable 忽略滑点
            0, // Slippage is unavoidable 忽略滑点
            owner(),
            block.timestamp
        );
    }
   
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");
        require(!_isBlocked[from] && !_isBlocked[to], "Sender or recipient is Blocked!");
        // console.log(from,to,amount);
        // console.log('inSwapAndLiquify',inSwapAndLiquify);
        // console.log(balanceOf(from),balanceOf(to));

        if (from == address(uniswapV2Router)){
            require(amount > 0 && amount <= balanceOf(from), "Sender insufficient funds");
        }else{
            require(amount > 0 && amount <= balanceOf(from).sub(10**_decimals), "Sender insufficient funds");
        }
        
        bool shouldSetInviter = balanceOf(to) == 0 &&
            inviter[to] == address(0) &&
            from != uniswapV2Pair &&
            !isContract(from) && !isContract(to);
		
        bool needLiquidity = false;
        bool takeFee = true;	
		uint256 destroyAmount = balanceOf(_destroyAddress);
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || destroyAmount >= _tTotalMaxFee) {
            takeFee = false;
            
        }else{
            //必须是转入或者转出交易所的时候才会触发分红和扣税
            if(from != uniswapV2Pair && to != uniswapV2Pair && from != address(uniswapV2Router)){
                takeFee = false;
            }else{
                if (to == address(uniswapV2Router)){
                    takeFee = false;
                }else{
                    //合约自身持币数量要大于拿来回流的数量
                    uint256 contractTokenBalance = balanceOf(address(this));
                    bool overMinTokenBalance = contractTokenBalance >= amount.mul(liquidityDivisor.add(fundDivisor)).div(1000);
                    if (overMinTokenBalance &&
                        !inSwapAndLiquify &&
                        swapAndLiquifyEnabled
                    ) { 
                        needLiquidity = true;
                        if (to == uniswapV2Pair){
                            //取消，因为dex不支持反向操作，买入和撤出流动性都是从流动池流出代币，此时不能调用dex再将代币流入流动池
                            //因此买入和撤流动性的时候，因为回流的部分直接加回了流动池，因此在卖出和添加流动性方向时，原本做流动性的
                            //部分都拿去换utg，不需要在额外添加流动性了
                            //swap and add liquidity添加流动性 
                            // uint256 swapAmount = amount.div(1000).mul(liquidityDivisor);
                            // swapAndLiquify(swapAmount);
                            //补回因为做流动性而损失在此合约上的代币数量
                            // _takeLiquidity(swapAmount);                            

                            //处理兑换其他代币的部分
                            if (fundDivisor>0 && fundAddress!=address(0)){
                                uint256 swapAmount1 = amount.div(1000).mul(fundDivisor.add(liquidityDivisor));
                                swapAndExchange(swapAmount1);
                                //补回兑换其他代币损失的代币
                                _takeLiquidity(swapAmount1);
                            } 
                        } 
                    }
                }
            }
        }
        
        // console.log(takeFee, needLiquidity);
        _tokenTransfer(from, to, amount, takeFee, needLiquidity);
        // console.log(balanceOf(from),balanceOf(to));

 
        //锁定推荐关系
        if (shouldSetInviter) {
            inviter[to] = from;
        }
        // console.log(takeFee, needLiquidity, shouldSetInviter);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee,
        bool needLiquidity
    ) private {
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount.mul(currentRate);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);

        uint256 rate = 0;
        if (takeFee) {
            if (feeLevels>0){
                _takeInviterFee(sender, recipient, tAmount, currentRate);//分发推荐奖励
            }			
            if (destroyRate>0){
                _takeTransfer(
                    sender,_destroyAddress,tAmount.div(1000).mul(destroyRate),currentRate);
            }
            //如果开通了回流流动池以及兑换其他代币就需要把他们的税率加上
            if (needLiquidity){
                if (sender == uniswapV2Pair || sender == address(uniswapV2Router)){
                    _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(rAmount.div(1000).mul(liquidityDivisor));
                }
                rate = destroyRate + liquidityDivisor;
                //如果兑换其他代币的fundAddress地址和兑换税率有设置，就得把此部分税率加上
                if (fundDivisor>0 && fundAddress != address(0)){
                    if (sender == uniswapV2Pair || sender == address(uniswapV2Router)){
                        _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(rAmount.div(1000).mul(fundDivisor));
                    }
                    rate = rate + fundDivisor;
                } 
            }else{
                rate = destroyRate;
            }
            
            for (uint i=0; i<feeLevels; i++){
                rate += feeRate[i];
            }
        }
        uint256 recipientRate = 1000 - rate;
        if (rate>0){
            _rOwned[recipient] = _rOwned[recipient].add(
                rAmount.div(1000).mul(recipientRate));
            emit Transfer(sender, recipient, tAmount.div(1000).mul(recipientRate));
        }else{
             _rOwned[recipient] = _rOwned[recipient].add(rAmount);
             emit Transfer(sender, recipient, tAmount);
        }

    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount,
        uint256 currentRate
    ) private {
        uint256 rAmount = tAmount.mul(currentRate);
        _rOwned[to] = _rOwned[to].add(rAmount);
        emit Transfer(sender, to, tAmount);
    }

    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);//合约地址上补回因回流流动而损失的反射数
    }

    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 currentRate
    ) private {
        address cur;
		address reciver;
        uint256 curTAmount;
        uint256 curRAmount;

        if (sender == uniswapV2Pair ||sender == address(uniswapV2Router)) {
            cur = recipient;
        } else {
            cur = sender;
        }

        for (uint256 i = 0; i < feeLevels; i++) {
            curTAmount = tAmount.div(1000).mul(feeRate[i]);
            curRAmount = curTAmount.mul(currentRate);

            cur = inviter[cur];

            if (cur == address(0)) {    
				reciver = _destroyAddress;
            }else{
				reciver = cur;
			}

            if (curTAmount>0){
                if (!_isExcludedFromFee[reciver]) {
                //加入判断此人是否是分红黑名单，是的话不能分红
                    _rOwned[reciver] = _rOwned[reciver].add(curRAmount);
                    emit Transfer(sender, reciver, curTAmount);
                }else{
                    _rOwned[_destroyAddress] = _rOwned[_destroyAddress].add(curRAmount);
                    emit Transfer(sender, _destroyAddress, curTAmount);
                }
            }
        }
    }

    function changeRouteAddress(address _router) public onlyOwner {
        require(_router != address(0),"Error zero router address");
        require(_router != _owner,"Error router address can't be owner");
        require(_router != address(uniswapV2Router),"Error new router address can't be same to old");
        // require(isContract(_router),"Error! New router address should be a contract");
        uniswapV2Router = IUniswapV2Router02(_router);
    }


    function changePairAddress(address _pair) public onlyOwner {
        require(_pair != address(0),"Error zero pair address");
        require(_pair != _owner,"Error pair address can't be owner");
        require(_pair != uniswapV2Pair,"Error new pair address can't be same to old");
        // require(isContract(_pair),"Error, New pair address should be a contract");
        uniswapV2Pair = _pair;
    }

    function changeFundAddress(address _fundAddress) public onlyOwner {
        require(_fundAddress != address(0), "Error zero fund address");
        require(_fundAddress != _owner,"Error fund address can't be owner");
        require(_fundAddress != fundAddress,"Error new fund address can't be same to old");
        // require(isContract(_fundAddress),"Error, New fund address should be a contract");
        if (fundAddress != address(0)){
            //原来的地址从白名单排除
            _isExcludedFromFee[fundAddress] = false;
        }
        fundAddress = _fundAddress;
        _isExcludedFromFee[fundAddress] = true;

    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }
}
