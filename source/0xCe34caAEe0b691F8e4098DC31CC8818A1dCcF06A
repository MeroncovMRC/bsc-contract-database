{"Context.sol":{"content":"pragma solidity 0.5.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/trxeum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"Ownable.sol":{"content":"pragma solidity 0.5.12;\r\n\r\nimport \u0027./Context.sol\u0027;\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \u0027Ownable: new owner is the zero address\u0027\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(a, b, \u0027SafeMath: addition overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n}\r\n"},"Token.sol":{"content":"pragma solidity 0.5.12;\r\n\r\nimport \u0027./Ownable.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\n\r\n\r\ncontract PLAS is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \u0027Plastic Token\u0027;\r\n\r\n    /// @notice EIP-20 token symbol for this token \r\n    string public constant symbol = \u0027PLAS\u0027;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint256 private _totalSupply = 0;\r\n\r\n    uint256 private _maxSupply = 239e5 * 10 ** uint256(decimals); \r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal allowances;\r\n\r\n    mapping(address =\u003e uint256) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address =\u003e address) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint256 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address =\u003e mapping(uint256 =\u003e Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address =\u003e uint256) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract\u0027s domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\r\n        \u0027EIP712Domain(string name,address verifyingContract)\u0027\r\n    );\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\r\n        \u0027Delegation(address delegatee,uint256 nonce,uint256 expiry)\u0027\r\n    );\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address =\u003e uint256) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account\u0027s vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    \r\n    function _mint(address _to, uint256 _amount) internal {\r\n        require(_to != address(0), \u0027PLAS::_mint: mint to the zero address\u0027);\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        _moveDelegates(address(0), delegates[_to], _amount);\r\n    }\r\n\r\n    function mint(address _to, uint256 amount) public onlyOwner returns (bool) {\r\n        require(_totalSupply.add(amount, \u0027PLAS::mint: mint amount overflows\u0027) \u003c= _maxSupply, \u0027PLAS::mint: max supply exceeded\u0027);\r\n        _mint(_to, amount);\r\n        return true;\r\n    }\r\n    \r\n  function burn(uint256 amount) public  returns(bool) {\r\n        address account = msg.sender;\r\n        require(amount != 0);\r\n        require(amount \u003c= balances[account]);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _maxSupply = _maxSupply.sub(amount);\r\n        balances[account] = balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n        return true;\r\n      }\r\n\r\n    function allowance(address account, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function maxSupply() external view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint256 spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src \u0026\u0026 spenderAllowance != uint256(-1)) {\r\n            uint256 newAllowance = spenderAllowance.sub(amount);\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function delegate(address delegatee) public {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), address(this))\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\u0027\\x19\\x01\u0027, domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \u0027PLAS::delegateBySig: invalid signature\u0027\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \u0027PLAS::delegateBySig: invalid nonce\u0027\r\n        );\r\n        require(block.timestamp \u003c= expiry, \u0027PLAS::delegateBySig: signature expired\u0027);\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint256 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints \u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n   \r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            blockNumber \u003c block.number,\r\n            \u0027PLAS::getPriorVotes: not yet determined\u0027\r\n        );\r\n\r\n        uint256 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock \u003c= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock \u003e blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lower = 0;\r\n        uint256 upper = nCheckpoints - 1;\r\n        while (upper \u003e lower) {\r\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock \u003c blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint256 delegatorBalance = balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) internal {\r\n        require(\r\n            src != address(0),\r\n            \u0027PLAS::_transferTokens: cannot transfer from the zero address\u0027\r\n        );\r\n        require(\r\n            dst != address(0),\r\n            \u0027PLAS::_transferTokens: cannot transfer to the zero address\u0027\r\n        );\r\n\r\n        balances[src] = balances[src].sub(amount, \u0027PLAS::_transferTokens: transfer amount exceeds balance\u0027);\r\n        balances[dst] = balances[dst].add(amount, \u0027PLAS::_transferTokens: transfer amount overflows\u0027);\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 amount\r\n    ) internal {\r\n        if (srcRep != dstRep \u0026\u0026 amount \u003e 0) {\r\n            if (srcRep != address(0)) {\r\n                uint256 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum \u003e 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint256 srcRepNew = srcRepOld.add(amount, \u0027PLAS::_moveVotes: vote amount underflows\u0027);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint256 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum \u003e 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount, \u0027PLAS::_moveVotes: vote amount overflows\u0027);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint256 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal {\r\n        uint256 blockNumber = block.number;\r\n\r\n        if (\r\n            nCheckpoints \u003e 0 \u0026\u0026\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n}\r\n"}}