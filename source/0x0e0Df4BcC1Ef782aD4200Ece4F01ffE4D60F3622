{"mtxm_token.sol":{"content":"  pragma solidity ^0.5.1;\r\n\r\nimport \"./mtxm_tokenBasic.sol\";\r\n\r\ncontract mtxm_token is mtxm_tokenBasic {\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address =\u003e uint256) public balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowed;\r\n    mapping (address =\u003e bool) public administrator;\r\n\r\n    string public name;      \r\n    uint8 public decimals; \r\n    string public symbol; \r\n    //顶级地址\r\n    address public rootAddress;\r\n\r\n    constructor(uint256 _initialAmount,string memory _tokenName,uint8 _decimalUnits,string memory _tokenSymbol,address _root) public {\r\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\r\n        totalSupply = _initialAmount;                        // Update total supply\r\n        name = _tokenName;                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n        rootAddress = _root;\r\n        administrator[_root] = true;\r\n    }\r\n\r\n    function addAdministrator(address to) public returns(bool){\r\n        require(rootAddress == msg.sender,\"Fail\");\r\n        administrator[to] = true;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] \u003e= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    //超管可以随意转账\r\n    function transferByRoot(address _from,address _to, uint256 _value) public returns (bool success) {\r\n        require(administrator[msg.sender],\"Fail\");\r\n        require(balances[_from] \u003e= _value);\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(_from, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] \u003e= _value \u0026\u0026 allowance \u003e= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        if (allowance \u003c MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }\r\n        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    //防止订单重复调用\r\n    mapping (bytes32 =\u003e bool) public orderList;\r\n\r\n    //调用的合约地址直接转账到用户地址  时间搓加到订单号里面的\r\n    function transferPas(address _to, uint256 _value, uint256 time, bytes32 sign,uint256 orderNumber) public returns (bool success) {\r\n        require(!orderList[sign],\"Duplicate order\");\r\n        require(getCheckSign(_value,time,999990,orderNumber) == sign,\"Fail\");\r\n        address hyAddress = msg.sender;\r\n        require(balances[hyAddress] \u003e= _value,\"Insufficient Balance\");\r\n        balances[hyAddress] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(hyAddress, _to, _value); \r\n        orderList[sign] = true;\r\n        return true;\r\n    }\r\n\r\n    // 值  时间   加密的数据  随机数\r\n    function getCheckSign(uint value, uint time,uint rand,uint order) view private returns(bytes32) {\r\n        value = (value / 1000000000000000000) * 100000;\r\n        uint v = value / 100000 + time + 200;\r\n        v = v * rand;\r\n        uint s = uint(msg.sender)  / 100;\r\n        s = s + order;\r\n        return sha256(abi.encodePacked(toAscii(s), toAscii(v + order)));\r\n    }\r\n\r\n    function toAscii(uint256 _i) private pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}"},"mtxm_tokenBasic.sol":{"content":" pragma solidity ^0.5.1;\r\n\r\n\r\ncontract mtxm_tokenBasic {\r\n    \r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferByRoot(address _from,address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferPas(address _to, uint256 _value, uint256 time, bytes32 sign,uint256 orderNumber) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}"}}