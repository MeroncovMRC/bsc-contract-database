{"claimReward.sol":{"content":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: MIT\r\n//Dev by FGD team\r\nimport \"./Ownable.sol\";\r\n\r\ninterface INFT {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function getTokenType(uint256 tokenId) external view returns (uint8);\r\n}\r\n\r\ncontract FGDReward is Ownable {\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    mapping(uint256 =\u003e uint256) amountMap;\r\n\r\n    struct Info {\r\n        uint firstTime;\r\n        uint lastTime;\r\n        uint count;\r\n        uint amount;\r\n    }\r\n\r\n    mapping(uint256 =\u003e Info)public infos;\r\n    INFT nftContract;\r\n    address public tokenAddress;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 oneDay;\r\n    uint256 public oneMonth;\r\n\r\n    event Claim(address indexed from, uint256 indexed nftId, uint256 amount);\r\n    constructor(address nft, address _token, uint256 startTime_, uint256 endTime_, uint256 oneDay_) {\r\n        nftContract = INFT(nft);\r\n        startTime = startTime_;\r\n        endTime = endTime_;\r\n        oneDay = oneDay_;\r\n        oneMonth = oneDay * 30;\r\n        tokenAddress = _token;\r\n    }\r\n\r\n    function setStartTime(uint256 _start) external onlyOwner {\r\n        startTime = _start;\r\n    }\r\n\r\n    function _setTokenAmount(uint8 _type, uint256 _amount) internal checkType(_type) {\r\n        amountMap[_type] = _amount;\r\n    }\r\n\r\n    function setTokenAmount(uint8 _type, uint256 _amount) external onlyOwner {\r\n        _setTokenAmount(_type, _amount);\r\n    }\r\n\r\n    function setTokenAmountArr(uint8[] memory ts, uint256[] memory amounts) external onlyOwner {\r\n        for (uint i = 0; i \u003c ts.length; i++) {\r\n            _setTokenAmount(ts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    modifier checkType(uint8 _type) {\r\n        require(_type \u003e= 1 \u0026\u0026 _type \u003c= 4, \"invalid type\");\r\n        _;\r\n    }\r\n    modifier checkTime() {\r\n        require(block.timestamp \u003e= startTime, \"time:not start\");\r\n        _;\r\n    }\r\n\r\n    function claim(uint256[] memory ids) external checkTime {\r\n        uint total;\r\n        for (uint256 i = 0; i \u003c ids.length; i++) {\r\n            total += _claimId(ids[i]);\r\n        }\r\n        if (total \u003e 0) {\r\n            safeTransfer(tokenAddress, msg.sender, total);\r\n        }\r\n\r\n    }\r\n\r\n    function getNFTAmount(uint256 nftId) public view returns (uint256){\r\n        uint _type = nftContract.getTokenType(nftId);\r\n        return amountMap[_type];\r\n    }\r\n\r\n    function _claimId(uint256 nftId) internal returns (uint256){\r\n        require(nftContract.ownerOf(nftId) == msg.sender, \"ownerOf\");\r\n        uint tokenAmount = getNFTAmount(nftId);\r\n        uint curAmount;\r\n        Info storage info = infos[nftId];\r\n        require(info.count \u003c 7, \"claimAll\");\r\n        if (info.firstTime == 0) {\r\n            curAmount = tokenAmount * 40 / 100;\r\n            info.firstTime = block.timestamp;\r\n            info.lastTime = block.timestamp;\r\n            info.count = 1;\r\n            info.amount = curAmount;\r\n            emit Claim(msg.sender, nftId, curAmount);\r\n        } else {\r\n            uint perAmount = tokenAmount / 10;\r\n            (uint newAmount,uint count, uint newTime) = getAmount(perAmount, info.lastTime);\r\n            if (newAmount \u003e 0) {\r\n                curAmount = newAmount;\r\n                info.lastTime = newTime;\r\n                info.count += count;\r\n                info.amount += newAmount;\r\n                emit Claim(msg.sender, nftId, curAmount);\r\n            }\r\n\r\n        }\r\n        return curAmount;\r\n    }\r\n\r\n\r\n    function getAmount(uint256 tokenAmount, uint last) public view returns (uint256, uint256, uint256){\r\n\r\n        if (block.timestamp - last \u003c oneMonth) {\r\n            return (0, 0, last);\r\n        }\r\n        uint day = (block.timestamp - last) / oneMonth;\r\n        uint amount = tokenAmount * day;\r\n        uint newTime = day * oneMonth + last;\r\n        return (amount, day, newTime);\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}