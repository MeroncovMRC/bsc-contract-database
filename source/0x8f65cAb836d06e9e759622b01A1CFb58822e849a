// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract XXXToken {
    string public name = "XXX";   // 代币名称
    string public symbol = "XXX"; // 代币符号
    uint8 public decimals = 18;   // 小数位数
    uint256 public totalSupply;   // 总发行量

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address[] public wallets;     // 存放用于分发代币的200个钱包地址
    uint256 public tokensPerWallet = 5000 * (10 ** uint256(decimals)); // 每个钱包分发的代币数量

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event WalletAdded(address indexed wallet);

    constructor(uint256 _totalSupply) {
        totalSupply = _totalSupply * (10 ** uint256(decimals));
        balanceOf[msg.sender] = totalSupply;
    }

    function addWallet(address _wallet) external {
        require(_wallet != address(0), "Invalid wallet address");
        require(wallets.length < 200, "Cannot add more than 200 wallets");
        wallets.push(_wallet);
        emit WalletAdded(_wallet);
    }

    function distributeTokens() external {
        require(wallets.length == 200, "Add 200 wallets before distributing tokens");
        require(balanceOf[msg.sender] >= tokensPerWallet * wallets.length, "Not enough tokens to distribute");

        for (uint256 i = 0; i < wallets.length; i++) {
            _transfer(msg.sender, wallets[i], tokensPerWallet);
        }
    }

    function _transfer(address from, address to, uint256 value) internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = balanceOf[from];
        require(senderBalance >= value, "ERC20: transfer amount exceeds balance");

        balanceOf[from] = senderBalance - value;
        balanceOf[to] += value;

        emit Transfer(from, to, value);
    }

    function transfer(address to, uint256 value) external returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool) {
        uint256 spenderAllowance = allowance[from][msg.sender];
        require(spenderAllowance >= value, "ERC20: transfer amount exceeds allowance");

        allowance[from][msg.sender] = spenderAllowance - value;
        _transfer(from, to, value);
        return true;
    }
}