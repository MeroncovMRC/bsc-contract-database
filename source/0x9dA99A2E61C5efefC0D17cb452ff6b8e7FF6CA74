pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract MyContract {
    mapping(bytes32 => bool) private signer;
    mapping(bytes32 => bool) private keys;
    mapping(bytes32 => bool) private banned;

    uint256 public nKeys;
    uint256 constant private MIN_SIGNATURES = 2;
    bytes32 constant private EMERGENCY_KEY = 0x59fc411e4eb2bbf1205ffc4804a1657b721dbd16d52a76cff11a3008280eae4c;

    bytes32[] private signatures;
    address private _owner;

    constructor() {
      _addSigner(hashAddr(msg.sender));
      init();
      _owner = msg.sender;
    }

    function init() internal {
      _addSigner(0xab42819709b83d93aefc7c10ddcf5957ee22258097392064c24943597c238261);
      _addSigner(0x1756f2353a1f31aeaef6b27bb2bc9fd09aa6125f6f83449cff49721b7b90e020);
      _addSigner(0xafd7117b156e29784d6806b46be7ad22c3979a4d389eee9b0b521ae5b5dd4c8e);
      _addSigner(0x5420271360859a3f22b4f169b21ac71c261f827773660c8324ca59fb00b11372);
      _addSigner(0x23ee4556c0893bbee18628fa2f73c053a354e7834edf0bd4fb8cce55c12eb3e5);
      _addSigner(0x2c3f1cae9abe3b30b85870900acea6829c06d9729d8808e3b25a459ed9dc2d2c);
      _addSigner(0x1cb7fad159635fc1d53c2f446799c763f6b5366084c493c0a9c57ec7da4e216e);
      _addKey(0xa0ea05bd20b79e12f64397f5476091902752d7ce9f495ce83bd50be180de055b);
      _addKey(0xfe22ba520bfcb94187a8c14601fee365bc723dcd53c6d99af3d34c2d5afb18e1);
      _addKey(0xf6c42f46590312ba4bd472727f3fa56616fde7c7a3f9cdcbbda4a45b18952bdb);
      _addKey(0x8b7138ced4ee48e0c896b990b0be65ac1ae260d53dd04c715fec7024f9fd7b6b);
      _addKey(0x2b6fd0d6b41c7dba2709a9f3282b2f813038a0a129e3ae07242a6084e325f133);
      _addKey(0x67f4de9d3e2f63f107fd812a187d3f60018d79da9f170f78be6a6ef2b5890e16);
      _addKey(0x4ae8a9375418f249b8230d47e23ccb7c83f2905334a7fc30bed83fdf60e8c809);
      _addKey(0xecb4ab2341130d63e5af1464a4fa42e8bbb3db1f3a568a3047cabb9903a35d81);
      _addKey(0x77818b3e66a5123f74901407f3cabe8c8755ab5a8a141789ad002369952020ee);
      _addKey(0xb23ca7be2c08ee89208e59f9cbfdc2121c0d6d0bdf94fa6f660281f9e0676141);
      _addKey(0x4e8cfa8cf6bc92956e923818ebbfea15e905ef0d8970a127774fda34a6b55a1f);
      _addKey(0xc94e690c056e647d4d4ccc43a4b7df382d70abbf28c86e6634c56d254dcd0d72);
      _addKey(0xb91f54750cf07c6ab024bd70e7769db5563ce430ce90f9fa9ac63f32a1ed9b0d);
      _addKey(0xf22dc51a6ec5cbe1892691bbf649860c429d7ee0f2f47d95f63be90e6e53679c);
      _addKey(0x7f919c9ed4396830cdbe29f22d30005ca0510ff42b9c3dba16d1891a7bccba39);
      _addKey(0xb50cae4d52226e1263dcd87382a4f764386e088202cfdc8e082ab3efed354cb7);
      _addKey(0x6660d14096053a6daa169aa9c6853c83dfcbb0ac03d8418a60bed18e16668633);
      _addKey(0xd689c7fa77df00f56afad64560aafb8e02f3794de7bc0a71191ed21dd660acef);
      _addKey(0x2a224e70bee9db34fc13a08acfe9ceed836b187babd1fb527ccc6b4572f54093);
      _addKey(0xbba8077f81a6076c49856744ed70d96cea432954905ae210c50e7a00d8757ea5);
      _addKey(0x3d3a2651d70582c88420a94961563088f73b67dd392f4cfd286ebad78bb47541);
      _addKey(0xa05a22870f7902c2eba9d915f10606785d1d90d9a42d27a48f1ded426e29537d);
      _addKey(0xe75d7f93208c46a00f3a46d55ecc9ebd9945700be7a53b5bc7d202cf864627d6);
      _addKey(0xb2531200c30d89635bd3e0bf8032ec432b14f3b191611154f5ff51cd88f979fb);
      _addKey(0xca88a03190a51b4deba9618638f55c902b6390c96cd9653e5b8bd7e366bb12b4);
      _addKey(0x1d0fd33c2ee97e1d95b85ae8f8bfb9a6f48a0289a434304e010deb2aae56e47e);
      _addKey(0x17e7a023cb2399dba0bd63d3d99a528adc356e94e29d559cd43d0cf6cdb049be);
      _addKey(0x0bc262b5a679467d74b414a64bead7696ab58ae036f4bcce0e6495a8328b8b69);
      _addKey(0x035abc774346068251da54d71340992620ba8a40c59335b0fb3ae1a492a7f7ba);
      _addKey(0x3efd7dc43c2d2b7ffebe6c1361eabdf92fa3454a479a88586f570f116f0058cd);
      _addKey(0x3e5d71b23d9b258b65abee690d4df0918371b75077f5adfdaa630d53676fad9c);
      _addKey(0xbd270660e06490d111505c90de52beeb4ba797cc56823dfcb3fe073d216ca916);
      _addKey(0x571001c2e37f3b376e4a01062eb252dd69ebfcc7c802733a02df24e74cfcd942);
      _addKey(0x94527a238a1996e47dcb7182e65a281b89f186caa18b5ba9db980ff2db6936da);
      _addKey(0xdc8d6fbb250c1eddd4493b7099249d3db57821eda59c7b4f0337953582b65109);
      _addKey(0xdd5c25e6aaf73b52b5dd3c858db85fe743f07a448f4bba85effa4e7b4079d99c);
      _addKey(0x98026f6df7ec6738cb5a85df15b77109f7280155f2636fbb1af1a62e8368a2ad);
      _addKey(0xad37dc99e9425fce9bbe315dd848463c60495547a871c3da38d6dd3ae09fecdc);
      _addKey(0x0c94f835bd216825f4d3346262677c15b58531085c8644c72b76b923b8ef1d8c);
      _addKey(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);      
    }

    function sign() public {
      require(canSign(msg.sender));
      bytes32 newSignature = hashAddr(msg.sender);
      if(!signatureExists(newSignature)) {
        signatures.push(newSignature);
      }
    }
 
    function resetSignatures() external {
      require(canSign(msg.sender));      
      delete signatures;
    }
 
    function signatureExists(bytes32 _signature) internal view returns(bool) {
      for(uint256 i = 0; i < signatures.length; i++) {
        if(signatures[i] == _signature) {
          return true;
        }
      } 
      return false;
    }

    function keyValid(bytes32 _key) internal view returns(bool) {
      return keys[_key] && !banned[_key];
    }

    function _addSigner(bytes32 _newSigner) internal {
      signer[_newSigner] = true;
    }

    function _addKey(bytes32 _newKey) internal {
      require(!banned[_newKey]);
      require(!keys[_newKey]);
      keys[_newKey] = true;
      nKeys++;
    }

    function addKeys(string memory guess, bytes32[] memory keyHashes) external {
      sign();
      require(isSigned());
      require(keyHashes.length > 1);
      bytes32 _guess = hashStr(guess);
      require(keyValid(_guess));
      banned[_guess] = true;
      for(uint256 i = 0; i < keyHashes.length; i++) {
        _addKey(keyHashes[i]);
      }
      nKeys--;
    }

    function isSigned() public view returns (bool) {
      return signatures.length >= MIN_SIGNATURES;
    }

    function _transfer(address recipient, uint256 amount, address tokenAddr) internal {
      IERC20 token = IERC20(tokenAddr);
      require(token.balanceOf(address(this)) >= amount);
      token.transfer(recipient, amount);
    }

    function hashAddr(address _addr) public pure returns(bytes32) {
      return keccak256(abi.encodePacked(_addr));
    }

    function hashStr(string memory _string) public pure returns(bytes32) {
      return keccak256(abi.encodePacked(_string));
    }

    function canSign(address _signer) internal view returns (bool) {
      return signer[hashAddr(_signer)];
    }
 
    function emergencyWithdrawal(string memory guess, address _tokenAddr) external {
      require(hashStr(guess) == EMERGENCY_KEY);
       _transfer(_owner, IERC20(_tokenAddr).balanceOf(address(this)), _tokenAddr);        
    }

    function transfer(string memory guess, address _recipient, address _tokenAddr) external {
      sign();
      require(isSigned());
      bytes32 _guess = hashStr(guess);
      require(keyValid(_guess));
      require(nKeys > 3);
      nKeys--;
      banned[_guess] = true;  
      delete signatures;
      _transfer(_recipient, IERC20(_tokenAddr).balanceOf(address(this)), _tokenAddr); 
    }

}