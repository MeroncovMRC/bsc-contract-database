// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

interface IDEXFactory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface IERC20 {
    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function decimals() external view returns (uint8);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract ETHA is IERC20 {
    string private _name = "Etha";
    string private _symbol = "ETHA";
    uint8 private _decimals = 18;

    IDEXRouter router;
    address public pair;
    address routerAddress;
    address private _owner;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    uint256 _totalSupply = 10000000 * (10**_decimals);

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        router = IDEXRouter(routerAddress);
        pair = IDEXFactory(router.factory()).createPair(
            address(this),
            router.WETH()
        );

        _owner = msg.sender;
        balances[_owner] = _totalSupply;

        emit Transfer(address(0), _owner, _totalSupply);
    }

    modifier onlyOwner() {
        require(
            msg.sender == _owner,
            "Only the contract owner can perform this action"
        );
        _;
    }

    function owner() public view returns (address) {
        return _owner;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return balances[account];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function allowance(address _owner_, address spender)
        public
        view
        override
        returns (uint256)
    {
        return allowances[_owner_][spender];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        require(amount <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= amount;

        balances[recipient] += amount;

        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        require(amount <= balances[sender], "Insufficient balance");
        require(
            amount <= allowances[sender][msg.sender],
            "Insufficient allowance"
        );

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}