// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin\contracts\token\ERC721\IERC721.sol





/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
      * @dev Safely transfers `tokenId` token from `from` to `to`.
      *
      * Requirements:
      *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
      * - `tokenId` token must exist and be owned by `from`.
      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
      *
      * Emits a {Transfer} event.
      */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

// File: @openzeppelin\contracts\math\SafeMath.sol





/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin\contracts\GSN\Context.sol





/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

// File: @openzeppelin\contracts\access\Ownable.sol





/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: @openzeppelin\contracts\utils\ReentrancyGuard.sol





/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: contracts\NEO\Trusteeship.sol



interface CustomERC721 {
    function mintItem(address recipient, uint256 propertyId) external returns (uint256);

    function burnItem(uint256 tokenId) external returns (uint256);
}

contract Trusteeship is Ownable, ReentrancyGuard {
    using SafeMath for uint256;

    address[] public adminList;

    // orderId list orderId => timestamp
    mapping(uint256 => uint256) orderList;

    // fee amount
    uint256 public feeAmount;

    // mint nft fee amount
    uint256 public mintFeeAmount;

    // receive fee address
    address public feeTo;

    struct userInfo {
        address userAddress;
        bool retrievable;
    }

    // NFT token => tokenId => user info
    mapping(address => mapping(uint256 => userInfo)) public trustList;

    struct nftInfo {
        uint256[] propertyIdList;
        bool isTrust;
    }

    // user address => (nft address => nft info)
    mapping(address => mapping(address => nftInfo)) public nftList;

    constructor() public {
        adminList.push(msg.sender);
        feeTo = msg.sender;
    }

    // check order is exist
    function checkOrderIdIsExist(uint256 _orderId) public view returns (bool){
        if (orderList[_orderId] > 0) {
            return true;
        } else {
            return false;
        }
    }

    // set fee to
    function setFeeTo(address _feeTo) public nonReentrant onlyAdmin {
        require(_feeTo != address(0), "NONEMPTY_ADDRESS");
        feeTo = _feeTo;
    }

    // set fee amount
    function setFeeAmount(uint256 _feeAmount) public nonReentrant onlyAdmin {
        feeAmount = _feeAmount;
    }

    // set mint fee amount
    function setMintFeeAmount(uint256 _mintFeeAmount) public nonReentrant onlyAdmin {
        mintFeeAmount = _mintFeeAmount;
    }

    // set admin list
    function setAdminList(address[] memory _list) public nonReentrant onlyOwner {
        require(_list.length > 0, "NONEMPTY_ADDRESS_LIST");

        for (uint256 nIndex = 0; nIndex < _list.length; nIndex++) {
            require(_list[nIndex] != address(0), "ADMIN_NONEMPTY_ADDRESS");
        }
        adminList = _list;
    }

    // get admin list
    function getAdminList() public view returns (address[] memory) {
        return adminList;
    }

    function onlyAdminCheck(address _adminAddress) internal view returns (bool) {
        for (uint256 nIndex = 0; nIndex < adminList.length; nIndex++) {
            if (adminList[nIndex] == _adminAddress) {
                return true;
            }
        }
        return false;
    }

    modifier onlyAdmin() {
        require(onlyAdminCheck(msg.sender) == true, "ONLY_ADMIN_OPERATE");

        _;
    }

    event AddNftBalance(address _user, address _nftToken, uint256 _propertyId, uint256 _orderID, uint256 _at);
    event BatchAddNftBalance(address _user, address _nftToken, uint256[] _propertyIdList, uint256 _orderID, uint256 _at);
    event Claim(address _user, address _nftToken, uint256[] _tokenIdList, uint256[] _propertyIdList, uint256 _at);
    event Trust(address _user, address _nftToken, uint256 _tokenId, uint256 _at);
    event BatchTrust(address _user, address _nftToken, uint256[] _tokenIds, uint256 _at);
    event RetrieveAuthorization(address _user, address _nftToken, uint256 _tokenId, uint256 _at);
    event BatchRetrieveAuthorization(address _user, address _nftToken, uint256[] _tokenIds, uint256 _at);
    event Retrieve(address _user, address _nftToken, uint256 _tokenId, uint256 _at);
    event BatchRetrieve(address _user, address _nftToken, uint256[] _tokenIds, uint256 _at);
    event BatchBurn(address _nftToken, uint256[] _tokenIdList);

    function addNftBalance(address _toAddress, address _nftToken, uint256 _propertyId, uint256 _orderID) public nonReentrant onlyAdmin {
        require(_toAddress != address(0), "NONEMPTY_USER_ADDRESS");
        require(_nftToken != address(0), "NONEMPTY_NFT_ADDRESS");
        require(_propertyId > 0, "NONEMPTY_PROPERTY_ID");
        require(_orderID > 0, "NONEMPTY_ORDER_ID");
        require(checkOrderIdIsExist(_orderID) == false, "ORDER_ID_IS_EXISTED");
        if (nftList[_toAddress][_nftToken].isTrust == true) {
            nftList[_toAddress][_nftToken].isTrust = false;
        }

        orderList[_orderID] = block.timestamp;
        nftList[_toAddress][_nftToken].propertyIdList.push(_propertyId);
        emit AddNftBalance(_toAddress, _nftToken, _propertyId, _orderID, block.timestamp);
    }

    function batchAddNftBalance(address _toAddress, address _nftToken, uint256[] memory _propertyIdList, uint256 _orderID) public nonReentrant onlyAdmin {
        require(_toAddress != address(0), "NONEMPTY_USER_ADDRESS");
        require(_nftToken != address(0), "NONEMPTY_NFT_ADDRESS");
        require(_orderID > 0, "NONEMPTY_ORDER_ID");
        require(checkOrderIdIsExist(_orderID) == false, "ORDER_ID_IS_EXISTED");
        if (nftList[_toAddress][_nftToken].isTrust == true) {
            nftList[_toAddress][_nftToken].isTrust = false;
        }

        orderList[_orderID] = block.timestamp;
        uint256 len = _propertyIdList.length;
        for (uint256 i = 0; i < len; i++) {
            require(_propertyIdList[i] > 0, "NONEMPTY_PROPERTY_ID");
            nftList[_toAddress][_nftToken].propertyIdList.push(_propertyIdList[i]);
        }

        emit BatchAddNftBalance(_toAddress, _nftToken, _propertyIdList, _orderID, block.timestamp);
    }

    function resetNftBalance(address _toAddress, address _nftToken, uint256[] memory _propertyIdList) public nonReentrant onlyAdmin {
        require(_toAddress != address(0), "NONEMPTY_USER_ADDRESS");
        require(_nftToken != address(0), "NONEMPTY_NFT_ADDRESS");

        nftList[_toAddress][_nftToken].propertyIdList = _propertyIdList;
    }

    function getNftBalance(address _userAddress, address _nftToken) public view returns (uint256[] memory, uint256, bool){
        require(_userAddress != address(0), "NONEMPTY_USER_ADDRESS");
        require(_nftToken != address(0), "NONEMPTY_NFT_ADDRESS");
        return (nftList[_userAddress][_nftToken].propertyIdList, nftList[_userAddress][_nftToken].propertyIdList.length, nftList[_userAddress][_nftToken].isTrust);
    }

    function claim(address _nftToken) public payable nonReentrant {
        require(_nftToken != address(0), "NONEMPTY_NFT_ADDRESS");
        require(nftList[msg.sender][_nftToken].isTrust == false, "NFT_ALREADY_RECEIVED");
        uint256[] memory _propertyIdList = nftList[msg.sender][_nftToken].propertyIdList;
        uint256 len = _propertyIdList.length;
        require(len > 0, "NO_NFT_TO_CLAIM");
        nftList[msg.sender][_nftToken].isTrust = true;
        nftList[msg.sender][_nftToken].propertyIdList = new uint256[](0);

        if (mintFeeAmount > 0 && feeTo != address(0)) {
            uint256 feeAmountTotal = mintFeeAmount.mul(len);
            require(msg.value == feeAmountTotal, "FEE_ERROR");
            address payable _feeTo = address(uint160(feeTo));
            _feeTo.transfer(feeAmountTotal);
        }

        uint256[] memory _tokenIdList = new uint256[](len);
        for (uint256 i = 0; i < len; i++) {
            require(_propertyIdList[i] > 0, "NONEMPTY_PROPERTY_ID");
            uint256 _tokenId = CustomERC721(_nftToken).mintItem(address(this), _propertyIdList[i]);
            _tokenIdList[i] = _tokenId;
            trustList[_nftToken][_tokenId].userAddress = msg.sender;
        }

        emit Claim(msg.sender, _nftToken, _tokenIdList, _propertyIdList, block.timestamp);
    }

    function trust(address _nftToken, uint256 _tokenId) public nonReentrant {
        require(_nftToken != address(0), "NONEMPTY_ADDRESS");
        require((trustList[_nftToken][_tokenId].userAddress == address(0)), "TOKEN_ERROR");

        trustList[_nftToken][_tokenId].userAddress = msg.sender;
        IERC721(_nftToken).transferFrom(msg.sender, address(this), _tokenId);
        emit Trust(msg.sender, _nftToken, _tokenId, block.timestamp);
    }

    function batchTrust(address _nftToken, uint256[] memory _tokenIds) public nonReentrant {
        require(_nftToken != address(0), "NONEMPTY_ADDRESS");

        uint256 len = _tokenIds.length;
        for (uint256 i = 0; i < len; i++) {
            require((trustList[_nftToken][_tokenIds[i]].userAddress == address(0)), "TOKEN_ERROR");

            trustList[_nftToken][_tokenIds[i]].userAddress = msg.sender;
            IERC721(_nftToken).transferFrom(msg.sender, address(this), _tokenIds[i]);
        }

        emit BatchTrust(msg.sender, _nftToken, _tokenIds, block.timestamp);
    }

    function retrieveAuthorization(address _user, address _nftToken, uint256 _tokenId) public nonReentrant onlyAdmin {
        require((_user != address(0)) && (_nftToken != address(0)), "NONEMPTY_ADDRESS");
        require(_user != _nftToken, "ADDRESS_ERROR");
        require((trustList[_nftToken][_tokenId].userAddress == _user), "TOKEN_NOT_OWNER");

        trustList[_nftToken][_tokenId].retrievable = true;

        emit RetrieveAuthorization(_user, _nftToken, _tokenId, block.timestamp);
    }

    function batchRetrieveAuthorization(address _user, address _nftToken, uint256[] memory _tokenIds) public nonReentrant onlyAdmin {
        require((_user != address(0)) && (_nftToken != address(0)), "NONEMPTY_ADDRESS");
        require(_user != _nftToken, "ADDRESS_ERROR");
        uint256 len = _tokenIds.length;
        for (uint256 i = 0; i < len; i++) {
            require((trustList[_nftToken][_tokenIds[i]].userAddress == _user), "TOKEN_NOT_OWNER");
            trustList[_nftToken][_tokenIds[i]].retrievable = true;
        }

        emit BatchRetrieveAuthorization(_user, _nftToken, _tokenIds, block.timestamp);
    }

    function retrieve(address _nftToken, uint256 _tokenId) public payable nonReentrant {
        require((_nftToken != address(0)), "NONEMPTY_ADDRESS");
        require((trustList[_nftToken][_tokenId].userAddress == msg.sender), "TOKEN_NOT_OWNER");
        require((trustList[_nftToken][_tokenId].retrievable == true), "NO_PERMISSION_TO_RETRIEVE");

        trustList[_nftToken][_tokenId].userAddress = address(0);
        trustList[_nftToken][_tokenId].retrievable = false;
        if (feeAmount > 0 && feeTo != address(0)) {
            require(msg.value == feeAmount, "FEE_ERROR");
            address payable _feeTo = address(uint160(feeTo));
            _feeTo.transfer(feeAmount);
        }
        IERC721(_nftToken).safeTransferFrom(address(this), msg.sender, _tokenId);

        emit Retrieve(msg.sender, _nftToken, _tokenId, block.timestamp);
    }

    function batchRetrieve(address _nftToken, uint256[] memory _tokenIds) public payable nonReentrant {
        require((_nftToken != address(0)), "NONEMPTY_ADDRESS");
        uint256 len = _tokenIds.length;

        if (feeAmount > 0 && feeTo != address(0)) {
            uint256 feeAmountTotal = feeAmount.mul(len);
            require(msg.value == feeAmountTotal, "FEE_ERROR");
            address payable _feeTo = address(uint160(feeTo));
            _feeTo.transfer(feeAmountTotal);
        }
        for (uint256 i = 0; i < len; i++) {
            require((trustList[_nftToken][_tokenIds[i]].userAddress == msg.sender), "TOKEN_NOT_OWNER");
            require((trustList[_nftToken][_tokenIds[i]].retrievable == true), "NO_PERMISSION_TO_RETRIEVE");
            trustList[_nftToken][_tokenIds[i]].userAddress = address(0);
            trustList[_nftToken][_tokenIds[i]].retrievable = false;
        }
        for (uint256 j = 0; j < len; j++) {
            IERC721(_nftToken).safeTransferFrom(address(this), msg.sender, _tokenIds[j]);
        }

        emit BatchRetrieve(msg.sender, _nftToken, _tokenIds, block.timestamp);
    }

    function batchBurn(address _nftToken, uint256[] memory _tokenIdList) public nonReentrant onlyAdmin {
        require(_nftToken != address(0), "NONEMPTY_ADDRESS");

        uint256 len = _tokenIdList.length;
        for (uint256 i = 0; i < len; i++) {
            trustList[_nftToken][_tokenIdList[i]].userAddress = address(0);
            trustList[_nftToken][_tokenIdList[i]].retrievable = false;
            CustomERC721(_nftToken).burnItem(_tokenIdList[i]);
        }

        emit BatchBurn(_nftToken, _tokenIdList);
    }

}