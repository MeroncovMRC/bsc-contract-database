
// File: contracts/WAIFUS/UWMarketplace/UWMarketplace.sol
// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

// so we can draw fees outand send to rewards pool and liquidity pool

/**
 * @title UWMarketplace
 * @author karan (@cryptofluencerr, https://cryptofluencerr.com)
 * @dev This Contract will be used to trade Underground Waifus (UW) NFTs.
 * @dev Users will be able to list, purchase, cancel listing, modify listed item,
 * @dev  add bid, remove bid, accept bid for UW NFTs.
 */

import "../Waifus Minting/RoyaltiesV2Impl.sol";

//============== UW Marketplace ==============
error UWMarketplace__AcceptBid_YouAreNotTheRightfulOwner();

contract UWMarketplace is
    ERC721,
    Ownable,
    Pausable,
    ReentrancyGuard,
    RoyaltiesV2Impl
{
    using Counters for Counters.Counter;
    //============== VARIABLES ==============
    Counters.Counter public _itemsListed;
    uint16 listingPercentageBasisPoints = 500;
    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;

    //============== MAPPINGS ==============
    mapping(uint256 => mapping(address => MarketItem)) private marketItems;

    //============== STRUCTS ==============
    struct BidDetail {
        bool ifBidIsThere;
        address bidder;
        uint256 bid;
        uint256 fees;
        address tokenAddress;
    }
    struct MarketItem {
        bool listed;
        uint256 tokenId;
        address contractAdd;
        address owner;
        address seller;
        uint256 price;
        bool sold;
        address royaltyReceiver;
        uint256 royaltyValue;
        uint256 timestamp;
        address tokenAddress;
        mapping(address => BidDetail) userBid;
    }

    //============== EVENTS ==============

    event Offered(
        uint256 tokenId,
        address indexed conAdd,
        address owner,
        address indexed seller,
        uint256 price,
        address royaltyReceiver,
        uint256 royaltyValue,
        address tokenAddress,
        uint256 timestamp
    );
    event Modified(
        uint256 tokenId,
        address indexed conAdd,
        address owner,
        address indexed seller,
        uint256 price,
        address royaltyReceiver,
        uint256 royaltyValue,
        address tokenAddress,
        uint256 timestamp
    );
    event Bought(
        uint256 tokenId,
        address contractAdd,
        address indexed buyer,
        address indexed seller,
        uint256 price,
        uint256 feesPaid,
        address royaltyReceiver,
        uint256 royaltyPaid,
        address tokenAddress,
        uint256 timestamp
    );
    event CancelListing(
        uint256 indexed tokenId,
        address contractAdd,
        address indexed owner,
        address seller,
        uint256 price,
        uint256 timestamp
    );
    event AddBid(
        uint256 indexed tokenId,
        address contractAdd,
        uint256 bid,
        uint256 fees,
        address bidder,
        address tokenAddress,
        uint256 timestamp
    );
    event CancelBid(
        address contractAdd,
        uint256 tokenId,
        uint256 bid,
        uint256 fees,
        address bidder,
        address tokenAddress,
        uint256 timestamp
    );
    event SetListingPricePercentage(uint16 listingPricePercentage_);

    //============== MODIFIERS ==============

    modifier checkCreateMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price
    ) {
        (bool _listed, , , , , , , , , , ) = getMarketItems(tokenId, conAdd);
        IERC721 nft = IERC721(conAdd);
        uint256 NFTBal = nft.balanceOf(_msgSender());
        address ownerOfNFT = nft.ownerOf(tokenId);

        require(!_listed, "Create Item: Item already listed.");
        require(NFTBal > 0, "Create Item: Insufficient Balance.");
        require(ownerOfNFT == _msgSender(), "Create Item: Not an owner.");
        require(price > 0, "Create Item: Price must be more than 0 Wei.");
        _;
    }

    modifier checkModifyMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price
    ) {
        (
            bool _listed,
            uint256 _tokenId,
            address _conAdd,
            address _owner,
            address _seller,
            ,
            ,
            ,
            ,
            ,

        ) = getMarketItems(tokenId, conAdd);

        require(price > 0, "Create Item: Price must be more than 0 Wei.");
        require(_listed, "Modify Item: Need to list item first.");
        require(_tokenId == tokenId, "Modify Item: Item doesn't match.");
        require(_conAdd == conAdd, "Modify Item: Contract address not match.");
        require(_owner == address(this), "Modify Item: Item is not listed.");
        require(_seller == _msgSender(), "Modify Item: Not the seller.");
        _;
    }

    modifier checkPurchaseMarketItem(uint256 tokenId, address conAdd) {
        (
            bool _listed,
            uint256 _tokenId,
            address _conAdd,
            address _owner,
            address _seller,
            ,
            bool _sold,
            ,
            ,
            ,

        ) = getMarketItems(tokenId, conAdd);

        require(_seller != _msgSender(), "Purchase Item: Item not listed.");
        require(_listed, "Purchase Item: Item not listed.");
        require(!_sold, "Purchase Item: Item already sold.");
        require(_tokenId == tokenId, "Purchase Item: TokenId mismatch.");
        require(_conAdd == conAdd, "Purchase Item: Contract address mismatch.");
        require(_owner == address(this), "Purchase Item: Item already sold.");
        _;
    }

    modifier checkCancelListing(uint256 tokenId, address conAdd) {
        (
            bool _listed,
            uint256 _tokenId,
            ,
            address _owner,
            address _seller,
            ,
            ,
            ,
            ,
            ,

        ) = getMarketItems(tokenId, conAdd);

        require(_listed, "Cancel Listing: Item not listed.");
        require(_tokenId == tokenId, "Cancel Listing: Incorrect Token Id.");
        require(_owner == address(this), "Cancel Listing: Item not listed.");
        require(_seller == _msgSender(), "Cancel Listing: Not an owner.");
        _;
    }

    modifier checkAddBid(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    ) {
        BidDetail memory bid = marketItems[tokenId][conAdd].userBid[
            _msgSender()
        ];
        (bool _listed, , , , address _seller, , , , , , ) = getMarketItems(
            tokenId,
            conAdd
        );
        require(price > 0, "Add Bid: Price must be more than 0 Wei.");

        if (_listed) {
            require(_seller != _msgSender(), "Add Bid: Owner cannot Bid.");
        } else {
            IERC721 nft = IERC721(conAdd);
            address owner = nft.ownerOf(tokenId);
            require(owner != _msgSender(), "Add Bid: Owner cannot Bid.");
        }

        if (bid.ifBidIsThere) {
            require(bid.bidder == _msgSender(), "Add Bid: Bidder mismatch.");
            require(
                bid.tokenAddress == tokenAddress,
                "Add Bid: Token Address need to be same."
            );
        }
        _;
    }

    modifier checkAcceptBid(
        uint256 tokenId,
        address conAdd,
        address chosenBidder,
        address tokenAddress
    ) {
        MarketItem storage cItem = marketItems[tokenId][conAdd];
        BidDetail memory bid = cItem.userBid[chosenBidder];

        require(bid.ifBidIsThere, "Accept Bid: Bid does not exist.");
        require(bid.bidder == chosenBidder, "Accept Bid: Bidder mismatch.");
        require(
            bid.tokenAddress == tokenAddress,
            "Accept Bid: Incorrect token address."
        );
        _;
    }

    //============== CONSTRUCTOR ==============
    constructor() ERC721("NFT Marketplace", "NFTT") {}

    //============== EXTERNAL FUNCTIONS ==============
    /**
     * @notice Lists the NFT to the marketplace and sends it to this contract
     * @dev setApprovalForAll need to be true for this operator
     * @param conAdd contract address of the NFT that will be listed/transferred
     * @param tokenId tokenId of the NFT that will be listed/transferred
     * @param price Price at which user wants to list NFT
     * @param tokenAddress ERC20 token address which they want in exchange of this NFT
     */
    function createMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    )
        external
        checkCreateMarketItem(tokenId, conAdd, price)
        whenNotPaused
        nonReentrant
    {
        checkIfContract(tokenAddress);
        _createMarketItem(tokenId, conAdd, price, tokenAddress);
    }

    /**
     * @notice Modifies the listed item details like, price, royalty, token, etc
     * @dev put correct price, tokenAddress & other details
     * @param conAdd contract address of the NFT that will be listed/transferred
     * @param tokenId tokenId of the NFT that will be listed/transferred
     * @param price Price at which user wants to list NFT
     * @param tokenAddress ERC20 token address which they want in exchange of this NFT
     */
    function modifyMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    ) external checkModifyMarketItem(tokenId, conAdd, price) whenNotPaused {
        checkIfContract(tokenAddress);
        _modifyMarketItem(tokenId, conAdd, price, tokenAddress);
    }

    /**
     * @notice Buyer can purchase NFT with this function
     * @notice Transfers ownership of the item, as well as funds between parties
     * @dev need to have adequate token balance for this func to work
     * @dev need to approve this marketplace to receive ERC20 token
     * @dev uses Token.transferFrom() function
     * @param conAdd contract address of the NFT that will be listed/transferred
     * @param tokenId tokenId of the NFT that will be listed/transferred
     */
    function purchaseMarketItem(
        uint256 tokenId,
        address conAdd
    )
        external
        checkPurchaseMarketItem(tokenId, conAdd)
        whenNotPaused
        nonReentrant
    {
        _purchaseMarketItem(tokenId, conAdd);
    }

    /**
     * @notice allows seller to cancel a listing
     * @dev must be marketItems[tokenId][contractAdd].seller == _msgSender()
     * @param tokenId tokenId of the NFT that will be cancelled from the listing
     * @param contractAdd contract address of the NFT that will be cancelled from the listing
     */
    function cancelListing(
        uint256 tokenId,
        address contractAdd
    ) external checkCancelListing(tokenId, contractAdd) whenNotPaused {
        _cancelListing(tokenId, contractAdd);
    }

    /**
     * @notice allows buyer to cancel bid for a particular token of an NFT
     * @dev need to put correct details in params else it wont match
     * @param conAdd contract address of the NFT for which bid to be added
     * @param tokenId tokenId of the NFT for which bid to be added
     * @param price bid amount of the NFT
     * @param tokenAddress ERC20 token address which they want to bid in
     */
    function addBid(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    )
        external
        checkAddBid(tokenId, conAdd, price, tokenAddress)
        whenNotPaused
        nonReentrant
    {
        _addBid(tokenId, conAdd, price, tokenAddress);
    }

    /**
     * @notice allows seller to accept the bid which they want
     * @dev only seller can acceptBid
     * @dev this function takes high gas
     * @param conAdd contract address of the NFT for which bid to be accepted
     * @param tokenId tokenId of the NFT for which bid to be accepted
     * @param chosenBidder address of the bidder which seller wants to accept
     * @param tokenAddress ERC20 token address which they want to accept bid in
     */
    function acceptBid(
        uint256 tokenId,
        address conAdd,
        address chosenBidder,
        address tokenAddress
    )
        external
        checkAcceptBid(tokenId, conAdd, chosenBidder, tokenAddress)
        whenNotPaused
        nonReentrant
    {
        _acceptBid(tokenId, conAdd, chosenBidder, tokenAddress);
    }

    /**
     * @dev  Sets percentage basis points for fees can be calculated by dividing with 100
     * @dev 250 = 2.5% || 1000 = 10%
     * @param listingPricePercentage_ contract address of the Token
     */
    function setListingPricePercentage(
        uint16 listingPricePercentage_
    ) external onlyOwner {
        require(
            listingPricePercentage_ < 1000,
            "Set Listing Price: Cannot set Listing Price Percentage nore than 10 percent"
        );
        listingPercentageBasisPoints = listingPricePercentage_;
        emit SetListingPricePercentage(listingPricePercentage_);
    }

    /**
     * @notice can see whether an NFT is listed in the market or not
     * @dev can be used from frontend
     * @param contractAdd contract address of the NFT
     * @param tokenId tokenId of the NFT
     * @return listed bool whether an NFT is listed or not
     */
    function checkIfListed(
        address contractAdd,
        uint256 tokenId
    ) external view returns (bool) {
        return marketItems[tokenId][contractAdd].listed;
    }

    /**
     * @notice can view marketItems for a particular NFT
     * @dev can be used from frontend
     * @param tokenId tokenId of the NFT
     * @param contractAdd contract address of the NFT
     * @return bidDetail which is a struct which keeps the bid of a particular address
     */
    function showBid(
        uint256 tokenId,
        address contractAdd,
        address userAddress
    ) external view returns (BidDetail memory) {
        return marketItems[tokenId][contractAdd].userBid[userAddress];
    }

    /**
     * @notice can view marketItems for a particular NFT
     * @dev can be used from frontend
     * @param tokenId tokenId of the NFT
     * @param contractAdd contract address of the NFT
     * @return marketItems which is a struct which keeps marketItems data
     */
    function showMarketItems(
        uint256 tokenId,
        address contractAdd
    )
        external
        view
        returns (
            bool,
            uint256,
            address,
            address,
            address,
            uint256,
            bool,
            address,
            uint256,
            uint256,
            address
        )
    {
        return getMarketItems(tokenId, contractAdd);
    }

    //============== PUBLIC FUNCTIONS ==============

    /**
     * @notice buyer can cancel their bids for NFTs
     * @dev _msgSender() need to be equal to buyers address
     * @param contractAdd contract address of the NFT for which bid to be cancelled
     * @param tokenId tokenId of the NFT for which bid to be cancelled
     */
    function cancelBid(uint256 tokenId, address contractAdd) public {
        BidDetail storage bid = marketItems[tokenId][contractAdd].userBid[
            _msgSender()
        ];
        BidDetail memory _bid = bid;
        uint256 totalBid = _bid.bid + _bid.fees;

        require(
            _bid.bidder == _msgSender(),
            "Cancel Bid: You are not the correct Bidder."
        );

        (bid.ifBidIsThere, bid.bidder, bid.bid, bid.fees, bid.tokenAddress) = (
            false,
            address(0),
            0,
            0,
            address(0)
        );

        ERC20TokenTransfer(_bid.tokenAddress, _bid.bidder, totalBid);

        emit CancelBid(
            contractAdd,
            tokenId,
            _bid.bid,
            _bid.fees,
            _bid.bidder,
            _bid.tokenAddress,
            block.timestamp
        );
    }

    /**
     * @notice can view amount of fees need to paid by the bidder
     * @dev can be used from frontend to calculate the fees
     * @param bidAmount contract address of the NFT for which bid to be cancelled
     * @return fees which is initially 5%
     */
    function getTotalBidFees(uint256 bidAmount) public view returns (uint256) {
        return (bidAmount * listingPercentageBasisPoints) / 10000;
    }

    /**
     * @notice updates the listing price of the particular NFT
     * @dev can be used from frontend and inside the contract
     * @param tokenId tokenId of the NFT
     * @param conAdd contract address of the NFT
     * @return price which is used while listing from the contract or from frontend
     */
    function getTotalPrice(
        uint256 tokenId,
        address conAdd
    ) public view returns (uint256) {
        return
            (marketItems[tokenId][conAdd].price *
                (10000 + listingPercentageBasisPoints)) / 10000;
    }

    //============== INTERNAL FUNCTION =============

    function _createMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    ) internal {
        MarketItem storage currentItem = marketItems[tokenId][conAdd];
        address royaltyReceiver;
        uint256 royaltyValue;

        if (checkRoyalties(conAdd)) {
            IERC2981 nftRoyalty = IERC2981(conAdd);
            (royaltyReceiver, royaltyValue) = nftRoyalty.royaltyInfo(
                tokenId,
                price
            );
        } else {
            royaltyReceiver = address(0);
            royaltyValue = 0;
        }

        currentItem.listed = true;
        currentItem.tokenId = tokenId;
        currentItem.contractAdd = conAdd;
        currentItem.owner = address(this);
        currentItem.seller = _msgSender();
        currentItem.price = price;
        currentItem.sold = false;
        currentItem.royaltyReceiver = royaltyReceiver;
        currentItem.royaltyValue = royaltyValue;
        currentItem.timestamp = block.timestamp;
        currentItem.tokenAddress = tokenAddress;

        _itemsListed.increment();
        ERC721TokenTransferFrom(conAdd, _msgSender(), address(this), tokenId);

        emit Offered(
            tokenId,
            conAdd,
            address(this),
            _msgSender(),
            price,
            royaltyReceiver,
            royaltyValue,
            tokenAddress,
            block.timestamp
        );
    }

    function _modifyMarketItem(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    ) internal {
        MarketItem storage cItem = marketItems[tokenId][conAdd];

        address royaltyReceiver;
        uint256 royaltyValue;

        if (checkRoyalties(conAdd)) {
            IERC2981 nftRoyalty = IERC2981(conAdd);
            (royaltyReceiver, royaltyValue) = nftRoyalty.royaltyInfo(
                tokenId,
                price
            );
        } else {
            royaltyReceiver = address(0);
            royaltyValue = 0;
        }

        cItem.price = price;
        cItem.royaltyReceiver = royaltyReceiver;
        cItem.royaltyValue = royaltyValue;
        cItem.timestamp = block.timestamp;
        cItem.tokenAddress = tokenAddress;

        emit Modified(
            tokenId,
            conAdd,
            address(this),
            _msgSender(),
            price,
            royaltyReceiver,
            royaltyValue,
            tokenAddress,
            block.timestamp
        );
    }

    function _purchaseMarketItem(uint256 tokenId, address conAdd) internal {
        (
            ,
            ,
            ,
            ,
            address _seller,
            uint256 _price,
            ,
            address _royRec,
            uint256 _royVal,
            ,
            address _tokenAdd
        ) = getMarketItems(tokenId, conAdd);
        // Check whether tokenAddress is a contract or an EOA
        checkIfContract(_tokenAdd);

        MarketItem storage cItem = marketItems[tokenId][conAdd];
        BidDetail memory bid = cItem.userBid[_msgSender()];

        (cItem.listed, cItem.owner, cItem.sold, cItem.timestamp) = (
            false,
            _msgSender(),
            true,
            block.timestamp
        );

        uint256 totalPrice = getTotalPrice(tokenId, conAdd);
        uint256 marketFees = totalPrice - _price;
        uint256 toSeller = totalPrice - marketFees - _royVal;

        _itemsListed.decrement();
        // If royalty is there
        if (_royVal > 0) {
            ERC20TokenTransferFrom(_tokenAdd, _msgSender(), _royRec, _royVal);
        }
        // Fees paid to Marketplace Owner
        ERC20TokenTransferFrom(_tokenAdd, _msgSender(), owner(), marketFees);
        // To seller
        ERC20TokenTransferFrom(_tokenAdd, _msgSender(), _seller, toSeller);

        ERC721TokenTransferFrom(conAdd, address(this), _msgSender(), tokenId);

        if (bid.ifBidIsThere) {
            cancelBid(tokenId, conAdd);
        }

        emit Bought(
            tokenId,
            conAdd,
            _msgSender(),
            _seller,
            _price,
            marketFees,
            _royRec,
            _royVal,
            _tokenAdd,
            block.timestamp
        );
    }

    function _cancelListing(uint256 tokenId, address conAdd) internal {
        MarketItem storage currentItem = marketItems[tokenId][conAdd];

        currentItem.listed = false;
        currentItem.owner = _msgSender();
        currentItem.seller = address(this);
        currentItem.price = 0;
        currentItem.sold = false;
        currentItem.royaltyReceiver = address(0);
        currentItem.royaltyValue = 0;
        currentItem.timestamp = block.timestamp;
        currentItem.tokenAddress = address(0);

        _itemsListed.decrement();

        ERC721TokenTransferFrom(conAdd, address(this), _msgSender(), tokenId);

        emit CancelListing(
            tokenId,
            conAdd,
            _msgSender(),
            address(this),
            0,
            block.timestamp
        );
    }

    function _addBid(
        uint256 tokenId,
        address conAdd,
        uint256 price,
        address tokenAddress
    ) internal {
        checkIfContract(tokenAddress);
        BidDetail storage bid = marketItems[tokenId][conAdd].userBid[
            _msgSender()
        ];

        uint256 fees = getTotalBidFees(price);
        uint256 totalPrice = price + fees;
        // If the userBid is already there
        if (bid.ifBidIsThere) {
            uint256 oldBid = bid.bid + bid.fees;
            // If new bid is bigger than old bid
            if (totalPrice >= oldBid) {
                ERC20TokenTransferFrom(
                    tokenAddress,
                    _msgSender(),
                    address(this),
                    totalPrice - oldBid
                );
            }
            // If old bid is bigger than new bid
            else {
                ERC20TokenTransfer(
                    tokenAddress,
                    _msgSender(),
                    oldBid - totalPrice
                );
            }
        }
        // If the userBid is not there
        else {
            ERC20TokenTransferFrom(
                tokenAddress,
                _msgSender(),
                address(this),
                totalPrice
            );
            bid.ifBidIsThere = true;
            bid.bidder = _msgSender();
            bid.tokenAddress = tokenAddress;
        }
        bid.bid = price;
        bid.fees = fees;

        emit AddBid(
            tokenId,
            conAdd,
            price,
            fees,
            _msgSender(),
            tokenAddress,
            block.timestamp
        );
    }

    function _acceptBid(
        uint256 tokenId,
        address conAdd,
        address chosenBidder,
        address tokenAddress
    ) internal {
        MarketItem storage cItem = marketItems[tokenId][conAdd];
        BidDetail memory _bid = cItem.userBid[chosenBidder];
        address _owner = IERC721(conAdd).ownerOf(tokenId);
        address from;

        checkIfContract(_bid.tokenAddress);

        // the person who is interacting with the contract is the owner of the NFT
        bool msgSenderIsOwner = _owner == _msgSender();
        // this marketplace is the owner of the NFT
        bool marketplaceIsOwner = _owner == address(this) &&
            cItem.seller == _msgSender();

        if (marketplaceIsOwner) {
            from = address(this);
            cItem.owner = _msgSender();
        } else if (msgSenderIsOwner) {
            from = _msgSender();
            cItem.owner = _msgSender();
        } else {
            revert UWMarketplace__AcceptBid_YouAreNotTheRightfulOwner();
        }

        {
            // scope to avoid stack too deep errors
            BidDetail storage bid = cItem.userBid[chosenBidder];
            bid.ifBidIsThere = false;
            bid.bidder = address(0);
            bid.bid = 0;
            bid.fees = 0;
            bid.tokenAddress = address(0);
        }

        address royRec;
        uint256 royVal;
        if (checkRoyalties(conAdd)) {
            IERC2981 nftRoyalty = IERC2981(conAdd);
            (royRec, royVal) = nftRoyalty.royaltyInfo(tokenId, _bid.bid);
        } else {
            royRec = address(0);
            royVal = 0;
        }

        if (cItem.listed) {
            _itemsListed.decrement();
        } else {
            cItem.tokenId = tokenId;
            cItem.contractAdd = conAdd;
            cItem.seller = _msgSender();
        }
        cItem.listed = false;
        cItem.owner = _bid.bidder;
        cItem.price = _bid.bid;
        cItem.sold = true;
        cItem.royaltyReceiver = royRec;
        cItem.royaltyValue = royVal;
        cItem.timestamp = block.timestamp;
        cItem.tokenAddress = _bid.tokenAddress;

        // If royalty is there
        if (royVal > 0) {
            ERC20TokenTransfer(tokenAddress, royRec, royVal);
        }
        // Marketfees to owner
        ERC20TokenTransfer(tokenAddress, owner(), _bid.fees);
        // Fees paid to Marketplace Owner
        ERC20TokenTransfer(tokenAddress, _msgSender(), _bid.bid - royVal);
        // NFT transferred to buyer
        ERC721TokenTransferFrom(conAdd, from, _bid.bidder, tokenId);

        emit Bought(
            tokenId,
            conAdd,
            _bid.bidder,
            _msgSender(),
            _bid.bid,
            _bid.fees,
            royRec,
            royVal,
            _bid.tokenAddress,
            block.timestamp
        );
    }

    function getMarketItems(
        uint256 tokenId,
        address conAdd
    )
        internal
        view
        returns (
            bool,
            uint256,
            address,
            address,
            address,
            uint256,
            bool,
            address,
            uint256,
            uint256,
            address
        )
    {
        MarketItem storage cItem = marketItems[tokenId][conAdd];
        return (
            cItem.listed,
            cItem.tokenId,
            cItem.contractAdd,
            cItem.owner,
            cItem.seller,
            cItem.price,
            cItem.sold,
            cItem.royaltyReceiver,
            cItem.royaltyValue,
            cItem.timestamp,
            cItem.tokenAddress
        );
    }

    /**
     * @dev  Address.isContract() Returns true if `account` is a contract
     * @dev throws error if the address is an EOA
     * @param tokenAddress contract address of the Token
     */
    function checkIfContract(address tokenAddress) internal view {
        require(
            Address.isContract(tokenAddress),
            "Create Item: Cannot be an EOA."
        );
    }

    /**
     * @dev this func checks whether NFT contract supports EIP2981
     * @dev it returns bol
     * @param  contractAdd contract address for the NFT
     * @return success it returns true = yes & false = no
     */
    function checkRoyalties(address contractAdd) internal view returns (bool) {
        bool success = IERC165(contractAdd).supportsInterface(
            _INTERFACE_ID_ERC2981
        );
        return success;
    }

    function ERC20TokenTransfer(
        address tokenAddress,
        address to,
        uint256 amount
    ) internal {
        IERC20 token = IERC20(tokenAddress);
        bool success = token.transfer(to, amount);
        require(success, "ERC20TokenTransfer: Unable to transfer ERC20 token.");
        // token.approve(to, amount);
    }

    function ERC20TokenTransferFrom(
        address tokenAddress,
        address from,
        address to,
        uint256 amount
    ) internal {
        IERC20 token = IERC20(tokenAddress);
        bool success = token.transferFrom(from, to, amount);
        require(
            success,
            "ERC20TokenTransferFrom: Unable to transfer ERC20 token."
        );
        // token.approve(to, amount);
    }

    function ERC721TokenTransferFrom(
        address conAdd,
        address from,
        address to,
        uint256 tokenId
    ) internal {
        IERC721 token = IERC721(conAdd);
        token.transferFrom(from, to, tokenId);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/ERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC721Receiver.sol";
import "./extensions/IERC721Metadata.sol";
import "../../utils/Address.sol";
import "../../utils/Context.sol";
import "../../utils/Strings.sol";
import "../../utils/introspection/ERC165.sol";

/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: address zero is not a valid owner");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _ownerOf(tokenId);
        require(owner != address(0), "ERC721: invalid token ID");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        _requireMinted(tokenId);

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overridden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not token owner or approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        _requireMinted(tokenId);

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
        _safeTransfer(from, to, tokenId, data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
     */
    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
        return _owners[tokenId];
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _ownerOf(tokenId) != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId, 1);

        // Check that tokenId was not minted by `_beforeTokenTransfer` hook
        require(!_exists(tokenId), "ERC721: token already minted");

        unchecked {
            // Will not overflow unless all 2**256 token ids are minted to the same owner.
            // Given that tokens are minted one by one, it is impossible in practice that
            // this ever happens. Might change if we allow batch minting.
            // The ERC fails to describe this case.
            _balances[to] += 1;
        }

        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId, 1);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     * This is an internal function that does not check if the sender is authorized to operate on the token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId, 1);

        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook
        owner = ERC721.ownerOf(tokenId);

        // Clear approvals
        delete _tokenApprovals[tokenId];

        unchecked {
            // Cannot overflow, as that would require more tokens to be burned/transferred
            // out than the owner initially received through minting and transferring in.
            _balances[owner] -= 1;
        }
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId, 1);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId, 1);

        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");

        // Clear approvals from the previous owner
        delete _tokenApprovals[tokenId];

        unchecked {
            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:
            // `from`'s balance is the number of token held, which is at least one before the current
            // transfer.
            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require
            // all 2**256 token ids to be minted, which in practice is impossible.
            _balances[from] -= 1;
            _balances[to] += 1;
        }
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId, 1);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits an {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits an {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Reverts if the `tokenId` has not been minted yet.
     */
    function _requireMinted(uint256 tokenId) internal view virtual {
        require(_exists(tokenId), "ERC721: invalid token ID");
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.
     * - When `from` is zero, the tokens will be minted for `to`.
     * - When `to` is zero, ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256, /* firstTokenId */
        uint256 batchSize
    ) internal virtual {
        if (batchSize > 1) {
            if (from != address(0)) {
                _balances[from] -= batchSize;
            }
            if (to != address(0)) {
                _balances[to] += batchSize;
            }
        }
    }

    /**
     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is
     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.
     * - When `from` is zero, the tokens were minted for `to`.
     * - When `to` is zero, ``from``'s tokens were burned.
     * - `from` and `to` are never both zero.
     * - `batchSize` is non-zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)

pragma solidity ^0.8.0;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: contracts/WAIFUS/Waifus Minting/RoyaltiesV2Impl.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

interface IERC2981 {
    /// ERC165 bytes to add to interface array - set in parent contract
    /// implementing this standard
    ///
    /// bytes4(keccak256("royaltyInfo(uint256,uint256)")) == 0x2a55205a
    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;
    /// _registerInterface(_INTERFACE_ID_ERC2981);

    /// @notice Called with the sale price to determine how much royalty
    //          is owed and to whom.
    /// @param _tokenId - the NFT asset queried for royalty information
    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId
    /// @return receiver - address of who should be sent the royalty payment
    /// @return royaltyAmount - the royalty payment amount for _salePrice
    function royaltyInfo(
        uint256 _tokenId,
        uint256 _salePrice
    ) external view returns (address receiver, uint256 royaltyAmount);
}

library LibPart {
    bytes32 public constant TYPE_HASH =
        keccak256("Part(address account,uint96 value)");

    struct Part {
        address payable account;
        uint96 value;
    }

    function hash(Part memory part) internal pure returns (bytes32) {
        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));
    }
}

library LibRoyaltiesV2 {
    /*
        bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca
     */
    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;
}

interface RoyaltiesV2 {
    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);

    function getRaribleV2Royalties(
        uint256 id
    ) external view returns (LibPart.Part[] memory);
}

abstract contract AbstractRoyalties {
    mapping(uint256 => LibPart.Part[]) internal royalties;

    function _saveRoyalties(
        uint256 id,
        LibPart.Part[] memory _royalties
    ) internal {
        uint256 totalValue;
        for (uint256 i = 0; i < _royalties.length; i++) {
            require(
                _royalties[i].account != address(0x0),
                "Recipient should be present"
            );
            require(
                _royalties[i].value != 0,
                "Royalty value should be positive"
            );
            totalValue += _royalties[i].value;
            royalties[id].push(_royalties[i]);
        }
        require(totalValue < 10000, "Royalty total value should be < 10000");
        _onRoyaltiesSet(id, _royalties);
    }

    function _updateAccount(uint256 _id, address _from, address _to) internal {
        uint256 length = royalties[_id].length;
        for (uint256 i = 0; i < length; i++) {
            if (royalties[_id][i].account == _from) {
                royalties[_id][i].account = payable(address(uint160(_to)));
            }
        }
    }

    function _onRoyaltiesSet(
        uint256 id,
        LibPart.Part[] memory _royalties
    ) internal virtual;
}

contract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2, IERC2981 {
    function getRaribleV2Royalties(
        uint256 id
    ) external view override returns (LibPart.Part[] memory) {
        return royalties[id];
    }

    function _onRoyaltiesSet(
        uint256 id,
        LibPart.Part[] memory _royalties
    ) internal override {
        emit RoyaltiesSet(id, _royalties);
    }

    /*
     *Token (ERC721, ERC721Minimal, ERC721MinimalMeta, ERC1155 ) can have a number of different royalties beneficiaries
     *calculate sum all royalties, but royalties beneficiary will be only one royalties[0].account, according to rules of IERC2981
     */

    function royaltyInfo(
        uint256 id,
        uint256 _salePrice
    ) external view override returns (address receiver, uint256 royaltyAmount) {
        if (royalties[id].length == 0) {
            receiver = address(0);
            royaltyAmount = 0;
            return (receiver, royaltyAmount);
        }
        LibPart.Part[] memory _royalties = royalties[id];
        receiver = _royalties[0].account;
        uint256 percent;
        for (uint256 i = 0; i < _royalties.length; i++) {
            percent += _royalties[i].value;
        }
        //don`t need require(percent < 10000, "Token royalty > 100%"); here, because check later in calculateRoyalties
        royaltyAmount = (percent * _salePrice) / 10000;
    }
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC721.sol";

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: @openzeppelin/contracts/utils/introspection/ERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;

import "./IERC165.sol";

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


// File: @openzeppelin/contracts/utils/math/Math.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}

