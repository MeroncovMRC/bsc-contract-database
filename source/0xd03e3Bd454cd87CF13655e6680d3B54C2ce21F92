// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EVA {
    string public constant name = "EVA";
    string public constant symbol = "EVA";
    uint8 public constant decimals = 18;
    uint256 private constant INITIAL_SUPPLY = 1_000_000_000 * 10 ** decimals;

    mapping(address => uint256) private _balances;
    uint256 private _totalSupply;

    address payable private _owner;
    uint256 public price = 1_000_000_000_000_000; // 0.001 BNB in Wei
    uint256 public priceIncreasePercent = 77; // 0.77%

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Buy(address indexed buyer, uint256 amount);

    constructor() {
        _owner = payable(msg.sender);
        _totalSupply = INITIAL_SUPPLY;
        _balances[_owner] = _totalSupply;
        emit Transfer(address(0), _owner, _totalSupply);
    }

    function buyTokens() public payable {
        require(msg.value > 0, "Amount should be greater than 0");

        uint256 tokens = msg.value * 10 ** decimals / price;
        _transfer(_owner, msg.sender, tokens);
        emit Buy(msg.sender, tokens);

        price = price + (price * priceIncreasePercent) / 10000;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(amount <= _balances[sender], "Insufficient balance");

        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;

        emit Transfer(sender, recipient, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    receive() external payable {
        buyTokens();
    }
}