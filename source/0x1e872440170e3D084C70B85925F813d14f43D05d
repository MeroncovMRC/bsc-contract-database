// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.12;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract IACC {
    using SafeMath for uint256;

    string public name = "IACC";
    string public symbol = "IACC";
    uint8 public decimals = 9;
    mapping(address => mapping(address => uint256)) public allowance;

    address public owner;
    address public deadAddress = 0x000000000000000000000000000000000000dEaD; 
    address private routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; 
    address public marketAddress = 0x96e12851424bd20DC2C506eDFDA3c04F626Ed8Cd; 
    address public fundAddress = 0x96e12851424bd20DC2C506eDFDA3c04F626Ed8Cd; 

 
    uint256 public constant MAX = ~uint256(0);
    uint256 public _tTotal = 1000000000 * 10**decimals; 
    uint256 private _rTotal = (MAX - (MAX % _tTotal)); 
    mapping(address => uint256) public _rOwned; 
    mapping(address => uint256) public _tOwned;
    uint256 public _tFeeTotal;
    uint256 public minTotalSupply = 1000000 * 10**decimals; 

    mapping(address => bool) public isExcludedFromFee; 
    mapping(address => bool) public isTxLimitExempt; 
    mapping(address => bool) public isExcludedReflection; 
    address[] public _excludedReflection; 

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapPair;
    mapping(address => bool) public isMarketPair; 

    mapping(address => address) public inviter; 
    mapping(address => uint256) public airdropAmount; 
    mapping(address => uint256) public _allSell; 
    mapping(address => uint256) public _allBuy; 

    uint256 public _taxFee = 2;
    uint256 public _liquidityFee = 2;
    uint256 public _burnFee = 3;
    uint256 public _inviterFee = 3; 
    uint256 public _marketFee = 1; 
    uint256 public _fundFee = 1; 
    uint256 public _totalTaxFee = 12;

    uint256 public _maxTxAmount = 50000000 * 10**decimals; 
    uint256 public hasAmountLimit = 1000 * 10**decimals; 

    uint256 public startTime;
    bool public inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true; 
    bool public swapAndLiquifyByLimitOnly = false; 
    uint256 public minimumTokensBeforeSwap = _maxTxAmount.div(2); 

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed holder,
        address indexed spender,
        uint256 value
    );
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    event SwapTokensForEth(uint256 amountIn, address[] path);

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() {
        owner = msg.sender;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);

        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            _uniswapV2Router.WETH()
        );

        uniswapV2Router = _uniswapV2Router;
        allowance[address(this)][address(uniswapV2Router)] = MAX;
        _totalTaxFee = _liquidityFee
            .add(_marketFee)
            .add(_burnFee)
            .add(_fundFee)
            .add(_inviterFee)
            .add(_taxFee);

        isExcludedFromFee[owner] = true;
        isExcludedFromFee[address(this)] = true;
        isExcludedFromFee[address(0)] = true;
        isExcludedFromFee[deadAddress] = true;
        isExcludedFromFee[fundAddress] = true;
        isExcludedFromFee[marketAddress] = true;

        isTxLimitExempt[owner] = true;
        isTxLimitExempt[owner] = true;
        isTxLimitExempt[address(this)] = true;
        isTxLimitExempt[address(0)] = true;
        isTxLimitExempt[deadAddress] = true;
        isTxLimitExempt[fundAddress] = true;
        isTxLimitExempt[marketAddress] = true;

        isMarketPair[address(uniswapPair)] = true;

        _rOwned[owner] = _rTotal;
        emit Transfer(address(0), owner, _tTotal);
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    modifier onlyOwner() {
        require(owner == msg.sender, "caller is not the owner");
        _;
    }

    function setOwner(address owner_) public onlyOwner {
        owner = owner_;
    }

    function totalSupply() public view returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (isExcludedReflection[account]) {
            return _tOwned[account]; 
        }

        return tokenFromReflection(_rOwned[account]); 
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        if (startTime == 0 && recipient == uniswapPair) {
            startTime = block.timestamp;
        }

        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            allowance[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            allowance[msg.sender][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            allowance[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function tokenFromReflection(uint256 rAmount)
        public
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function _getRate() public view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excludedReflection.length; i++) {
            if (
                _rOwned[_excludedReflection[i]] > rSupply ||
                _tOwned[_excludedReflection[i]] > tSupply
            ) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excludedReflection[i]]);
            tSupply = tSupply.sub(_tOwned[_excludedReflection[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _approve(
        address holder,
        address spender,
        uint256 amount
    ) private {
        require(holder != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowance[holder][spender] = amount;
        emit Approval(holder, spender, amount);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        if (
            inSwapAndLiquify ||
            (sender == address(this) && isMarketPair[recipient])
        ) {
            return _basicTransfer(sender, recipient, amount);
        } else {
            
            // bool isLimit = startTime.add(600)>block.timestamp;
            if (!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {
                require(
                    amount <= _maxTxAmount,
                    "Transfer amount exceeds the maxTxAmount."
                );
            }

            //空投用户
            if (isMarketPair[sender] || isMarketPair[recipient]) {
               
                if (airdropAmount[recipient] > _allSell[recipient]) {
                    _allBuy[recipient] = _allBuy[recipient].add(amount);
                }

                //空投用户卖出
                if (airdropAmount[sender] > _allSell[sender]) {
                    uint256 allowSell = _allBuy[sender] * 5; 

                    if (allowSell < airdropAmount[sender]) {
                        require(
                            allowSell >= amount.add(_allSell[sender]),
                            "airdrop user sell amount overflow"
                        );
                    }

                    _allSell[sender] = _allSell[sender].add(amount);
                }
            }

            if (swapAndLiquifyEnabled && !inSwapAndLiquify) {
                uint256 contractTokenBalance = balanceOf(address(this));
                bool overMinimumTokenBalance = contractTokenBalance >=
                    minimumTokensBeforeSwap;

                if (overMinimumTokenBalance && !isMarketPair[sender]) {
                    if (swapAndLiquifyByLimitOnly) {
                        contractTokenBalance = minimumTokensBeforeSwap;
                    }

                    swapAndLiquify(contractTokenBalance);
                }
            }

            bool shouldSetInviter = balanceOf(recipient) == 0 &&
                inviter[recipient] == address(0) &&
                !isMarketPair[sender];

            //transfer amount, it will take tax, burn, liquidity fee
            _tokenTransfer(sender, recipient, amount, true);

            if (shouldSetInviter) {
                inviter[recipient] = sender;
            }

            return true;
        }
    }

    function _basicTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) internal returns (bool) {
        _tokenTransfer(sender, recipient, tAmount, false);
        return true;
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool isTakeFee
    ) private {
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount.mul(currentRate);

        _subOwned(sender, tAmount, rAmount);

        uint256 finalTAmount = tAmount;

        if (
            isTakeFee &&
            !isExcludedFromFee[sender] &&
            !isExcludedFromFee[recipient]
        ) {
            finalTAmount = takeFee(sender, recipient, currentRate, tAmount); //扣减手续费
            rAmount = finalTAmount.mul(currentRate);
        }


        _addOwned(recipient, finalTAmount, rAmount);
        emit Transfer(sender, recipient, finalTAmount);
    }

    function _subOwned(
        address sender,
        uint256 tAmount,
        uint256 rAmount
    ) private {
        _changeOwned(sender, tAmount, rAmount, false);
    }

    function _addOwned(
        address recipient,
        uint256 tAmount,
        uint256 rAmount
    ) private {
        _changeOwned(recipient, tAmount, rAmount, true);
    }

    function _changeOwned(
        address account,
        uint256 tAmount,
        uint256 rAmount,
        bool isAdd
    ) private {
        excludeFromReward(account);
        if (isAdd) {
            if (isExcludedReflection[account]) {
                _tOwned[account] = _tOwned[account].add(tAmount);
            }
            _rOwned[account] = _rOwned[account].add(rAmount);
        } else {
            if (isExcludedReflection[account]) {
                _tOwned[account] = _tOwned[account].sub(
                    tAmount,
                    "Insufficient Balance"
                );
            }
            _rOwned[account] = _rOwned[account].sub(
                rAmount,
                "Insufficient Balance"
            );
        }
        includeInReward(account);
    }

    function excludeFromReward(address account) private {
        if (!isExcludedReflection[account]) {
            if (_rOwned[account] > 0 && _tOwned[account] == 0) {
           
                _tOwned[account] = tokenFromReflection(_rOwned[account]);
            }

           
            if (_tOwned[account] < hasAmountLimit) {
                isExcludedReflection[account] = true;
                _excludedReflection.push(account);
            }
        }
    }


    function includeInReward(address account) private {
        if (isExcludedReflection[account]) {
            for (uint256 i = 0; i < _excludedReflection.length; i++) {
                if (_excludedReflection[i] == account) {
                   
                    if (_tOwned[account] >= hasAmountLimit) {
                        _excludedReflection[i] = _excludedReflection[
                            _excludedReflection.length - 1
                        ];
                        _tOwned[account] = 0;
                        isExcludedReflection[account] = false;
                        _excludedReflection.pop();
                    }
                    break;
                }
            }
        }
    }


    function takeFee(
        address sender,
        address recipient,
        uint256 currentRate,
        uint256 tAmount
    ) internal returns (uint256 finalTAmount) {
        uint256 _tAmount = 0;

        uint256 _tSupply = getCirculatingSupply();

        if (_tSupply > minTotalSupply) {
            _tAmount += _chargeUserFee(
                sender,
                deadAddress,
                tAmount,
                _burnFee,
                currentRate
            );
        }

        _tAmount += _chargeUserFee(
            sender,
            address(this),
            tAmount,
            _liquidityFee,
            currentRate
        );

        _tAmount += _chargeUserFee(
            sender,
            marketAddress,
            tAmount,
            _marketFee,
            currentRate
        );

        _tAmount += _chargeUserFee(
            sender,
            fundAddress,
            tAmount,
            _fundFee,
            currentRate
        );

        _tAmount += _takeInviterFee(sender, recipient, tAmount, currentRate);

        _tAmount += _takeTaxFee(tAmount, currentRate);

        return tAmount.sub(_tAmount);
    }

    function _chargeUserFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 _userFee,
        uint256 currentRate
    ) private returns (uint256 _tAmount) {
        if (_userFee == 0) return 0;

        _tAmount = tAmount.mul(_userFee).div(100);
        uint256 _rAmount = _tAmount.mul(currentRate);

        _addOwned(recipient, _tAmount, _rAmount);
        emit Transfer(sender, recipient, _tAmount);
    }

    function _takeTaxFee(uint256 tAmount, uint256 currentRate)
        private
        returns (uint256 _tAmount)
    {
        if (_taxFee == 0) return 0;

        _tAmount = tAmount.mul(_taxFee).div(100);
        uint256 _rAmount = _tAmount.mul(currentRate);

        _rTotal = _rTotal.sub(_rAmount);
        _tFeeTotal = _tFeeTotal.add(_tAmount);
        return _tAmount;
    }

    function _takeInviterFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 currentRate
    ) private returns (uint256 _tAmount) {
        if (_inviterFee == 0) return 0;

        address curUser;
        if (isMarketPair[sender]) {
            curUser = recipient;
        } else if (isMarketPair[recipient]) {
            curUser = sender;
        }
        if (curUser == address(0)) {
            return 0;
        }

        for (int256 i = 0; i < 2; i++) {
            uint256 rate;
            if (i == 0) {
                rate = 2;
            } else {
                rate = 1;
            }
            curUser = inviter[curUser];
            if (curUser == address(0)) {
                break;
            }

            uint256 curTAmount = _chargeUserFee(
                sender,
                curUser,
                tAmount,
                rate,
                currentRate
            );

            _tAmount = _tAmount.add(curTAmount);
            emit Transfer(sender, curUser, curTAmount);
        }
        return _tAmount;
    }

    function setTxTaxes(
        uint256 taxFee,
        uint256 liquidityFee,
        uint256 burnFee,
        uint256 marketFee,
        uint256 fundFee
    ) external onlyOwner {
        _taxFee = taxFee;
        _liquidityFee = liquidityFee;
        _burnFee = burnFee;
        _marketFee = marketFee;
        _fundFee = fundFee;

        _totalTaxFee = _liquidityFee
            .add(_marketFee)
            .add(_burnFee)
            .add(_fundFee)
            .add(_inviterFee)
            .add(_taxFee);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap

        if (newBalance > 0 && otherHalf > 0) {
            addLiquidity(otherHalf, newBalance);
        }
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
        emit SwapTokensForEth(tokenAmount, path);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            address(this), //lp接收
            block.timestamp
        );
    }

    function setMarketPairStatus(address _pair, bool newValue)
        public
        onlyOwner
    {
        isMarketPair[_pair] = newValue;
    }

    function setIsExcludedFromFee(address account, bool newValue)
        public
        onlyOwner
    {
        isExcludedFromFee[account] = newValue;
    }

    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner {
        minimumTokensBeforeSwap = newLimit;
    }

    function setIsTxLimitExempt(address holder, bool exempt)
        external
        onlyOwner
    {
        isTxLimitExempt[holder] = exempt;
    }

    function setMaxTxLimit(uint256 newLimit) external onlyOwner {
        _maxTxAmount = newLimit;
    }

    function setHasAmountLimit(uint256 newLimit) external onlyOwner {
        hasAmountLimit = newLimit;
    }

    function setMarketingWalletAddress(address newAddress) external onlyOwner {
        marketAddress = payable(newAddress);
    }

    function setFundWalletAddress(address newAddress) external onlyOwner {
        fundAddress = payable(newAddress);
    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
    }

    function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {
        swapAndLiquifyByLimitOnly = newValue;
    }

    function setAirdropUser(address user_, uint256 amount_) external onlyOwner {
        airdropAmount[user_] = amount_;
    }

    function getCirculatingSupply() public view returns (uint256) {
        return _tTotal.sub(balanceOf(deadAddress));
    }
}