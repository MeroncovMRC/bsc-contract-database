
// File: contracts/ThenaDependencies.sol
pragma solidity ^0.8.17;

// SPDX-License-Identifier: MIT


library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.
     */
    modifier initializer() {
        bool isTopLevelCall = _setInitializedVersion(1);
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original
     * initialization step. This is essential to configure modules that are added through upgrades and that require
     * initialization.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     */
    modifier reinitializer(uint8 version) {
        bool isTopLevelCall = _setInitializedVersion(version);
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(version);
        }
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     */
    function _disableInitializers() internal virtual {
        _setInitializedVersion(type(uint8).max);
    }

    function _setInitializedVersion(uint8 version) private returns (bool) {
        // If the contract is initializing we ignore whether _initialized is set in order to support multiple
        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level
        // of initializers, because in other contexts the contract may have been reentered.
        if (_initializing) {
            require(
                version == 1 && !AddressUpgradeable.isContract(address(this)),
                "Initializable: contract is already initialized"
            );
            return false;
        } else {
            require(_initialized < version, "Initializable: contract is already initialized");
            _initialized = version;
            return true;
        }
    }
}

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuardUpgradeable is Initializable {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    function __ReentrancyGuard_init() internal onlyInitializing {
        __ReentrancyGuard_init_unchained();
    }

    function __ReentrancyGuard_init_unchained() internal onlyInitializing {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
 /**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}

abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}


interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender,uint256 value);
}

library SafeERC20 {

    using AddressUpgradeable for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector,spender,newAllowance));
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/ThenaStrategyNew.sol
pragma solidity 0.8.17;

// SPDX-License-Identifier: MIT

import "./ThenaDependencies.sol";


// @title WBNB Interface 

interface IWBNB is IERC20 {
    function deposit() external payable;
    function withdraw(uint256 wad) external;
}

// @title Thena GuageV2 Interface

interface IThenaStrategyGaugeV2 {
    function deposit(uint depositAmount) external;
    function withdraw(uint withdrawAmount) external;
    function getReward() external;
    function balanceOf(address account) external view returns (uint256);
    function earned(address account) external view returns (uint256);

    function depositAll() external;
    function withdrawAll() external;
    function emergencyWithdrawAmount(uint256 emergencyWithdrawAmount) external;

}

// @title Planet's Router Interface (Routes struct only)

interface IPlanetRouter {
    struct Routes {
        address from;
        address to;
        bool stable;
    }
}

// @title Planet's Router Interface (general)

interface IPlanetRouter2 is IPlanetRouter {
    function swapSolidlyToGamma(
        uint amountIn,
        uint amountOutMin,
        Routes[] calldata routes,
        address to,
        uint deadline,
        address solidlyRouterAddress
    ) external returns (uint[] memory amounts);
}

// @title StratX2
// @author Planet
// @notice Contract with definitions for all the variables and functions used in AggregatedStrategy_GAMMA

contract StratX2 is OwnableUpgradeable, ReentrancyGuardUpgradeable, IPlanetRouter {

    using SafeERC20 for IERC20;
    address public wantAddress; // Address of Token that is deposited into Thena Gauge V2
    address public GAMMAAddress; 
    address public THENAAddress;

    address public wbnbAddress;
    address public gammaFarmAddress; // Address of Farm associated with this strategy
    address public rewardsAddress; // Address to which generated fees flow
    address public thenaStrategyAddress; // Address of Thena Guage V2 for wantAddress
    address public planetRouterAddress;
    address public thenaRouterAddress;

    uint256 public wantLockedTotal; 
    uint256 public sharesTotal; 
    uint256 public pid; // pid of pool in farmContractAddress

    uint256 public entranceFeeFactor; 
    uint256 public constant entranceFeeFactorMax = 50; // maximum entrance fee = 0.5%

    uint256 public withdrawFeeFactor;
    uint256 public constant withdrawFeeFactorMax = 200; // maximum withdraw fee = 2%

    uint256 public performanceFeeFactor; 
    uint256 public constant performanceFeeFactorMax = 2000; // maximum performance fee = 20%

    Routes[] public route; // Route for swap through ThenaRouter while converting Thena to Gamma

    event SetSettings(uint _entranceFeeFactor, uint _withdrawFeeFactor, uint performanceFeeFactor);
    event SetRewardsAddress(address _rewardsAddress);
    event SetTHENAAddress(address _THENAAddress);
    event SetPlanetRouterAddress(address _planetRouterAddress);
    event SetThenaRouterAddress(address _thenaRouterAddress);
    event SetThenaStrategyAddress(address _thenaStrategyAddress);
    event SetTHENAToPlanetRoute(Routes[] _route);


    error Unauthorized(address caller);

    bool public hasMigrated;

    // @notice initializing Proxy

    function subInitialize() internal{
        __Ownable_init();
        __ReentrancyGuard_init();
    }

    // @notice Ensures deposit, withdraw and claim calls made to this strategy come only through the Farm

    function checkForFarmAddressCall() private view  {
        if(msg.sender != gammaFarmAddress) 
        {
            revert Unauthorized(msg.sender);
        }
    }

    // @notice Claims rewards from Thena Strategy Address, converts them to Gamma and sends them to the farm, which increases accGammaPerShare for the pool. This function is called by the farm every time update is called for this strategy's Pid
    // @returns earned Earn Gamma profits after deducting fees

    function earnGammaProfits() external returns (uint256){
        checkForFarmAddressCall();
        if(wantLockedTotal == 0){
            return 0;
        }
        IThenaStrategyGaugeV2(thenaStrategyAddress).getReward();
        uint256 earned = IERC20(THENAAddress).balanceOf(address(this));

        if (earned == 0){
            return 0;
        }

        IERC20(THENAAddress).safeIncreaseAllowance(
            planetRouterAddress,
            earned
        );

        _safeSwap(
            planetRouterAddress,
            earned,
            route,
            address(this),
            (block.timestamp + 600),
            thenaRouterAddress
        );
        earned = IERC20(GAMMAAddress).balanceOf(address(this));

        uint256 performanceFee = (earned * performanceFeeFactor) / 10000;  
        earned = earned - performanceFee;

        IERC20(GAMMAAddress).safeTransfer(rewardsAddress, performanceFee);
        IERC20(GAMMAAddress).safeTransfer(address(msg.sender), earned);
	    
        return earned;
    }

    // @notice Internal function to swap Thena rewards to Gamma through Planet Router
    // @param _planetRouterAddress Address of Planet's Router
    // @param _amountIn Amount of tokens to swap
    // @param _route Part of the swap to take place through Thena's router
    // @param _to Address to receive swapped tokens
    // @param _deadline Time by which the function call must execute. If crossed, the call is reverted
    // @param _thenaRouterAddress Address of router through which swap of paths in _route is executed

    function _safeSwap(
        address _planetRouterAddress,
        uint256 _amountIn,
        Routes[] memory _route,
        address _to,
        uint256 _deadline,
        address _thenaRouterAddress) internal {

        IPlanetRouter2(_planetRouterAddress)
            .swapSolidlyToGamma( 
            _amountIn,
            1,
            _route,
            _to,
            _deadline,
            _thenaRouterAddress
        );
    }


    // @notice Deposits want tokens recieved from the user through the farm into Thena GaugeV2 after deducting fees
    // @param _wantAmt Amount of want tokens that the user is depositing
    // @returns sharesAdded Shares to be added to the user corresponding to his deposit amount

    function deposit(uint256 _wantAmt) external virtual nonReentrant returns (uint256) {
        checkForFarmAddressCall();

        uint256 depositFee = (_wantAmt * entranceFeeFactor)/ 10000;
        uint256 sharesAdded = _wantAmt - depositFee;
        wantLockedTotal = sharesTotal = sharesTotal + sharesAdded;

        if(depositFee != 0){
            IERC20(wantAddress).safeTransfer(rewardsAddress, depositFee);
        }
        IERC20(wantAddress).safeIncreaseAllowance(thenaStrategyAddress, sharesAdded);
        IThenaStrategyGaugeV2(thenaStrategyAddress).deposit(sharesAdded);

        return (sharesAdded);
    }

    // @notice Delegates the call to an internal function that withdraws want from Thena Gauge V2 and sends it to the farm, after deducting fees, which in turn sends it to the user
    // @notice _wantAmt Amount of want tokens that the user wishes to withdraw
    // @returns sharesRemoved Shares to be removed corresponding to the user's withdraw amount
    // @returns _wantAmt Want tokens to be sent to the user after deducting fees
    function withdraw(uint256 _wantAmt) external virtual nonReentrant returns (uint256, uint256) {
        return _withdraw(_wantAmt, false);
    }

    // @notice Delegates the call to an internal function that withdraws want from Thena Gauge V2 without accruing rewards and sends it to the farm, after deducting fees, which in turn sends it to the user. Called by the farm through the function emergencyWithdraw in the farm
    // @dev emergencyWithdraw can only be called when Thena Gauge V2 allows emergency withdrawal in case of emergencies
    // @notice _wantAmt Amount of want tokens that the user wishes to withdraw. Farm sends the user's balance as this amount
    // @returns sharesRemoved Shares to be removed corresponding to the user's withdraw amount
    // @returns _wantAmt Want tokens to be sent to the user after deducting fees

    function emergencyWithdraw(uint256 _wantAmt) external virtual nonReentrant returns (uint256, uint256) {
        require(_wantAmt != 0, "_wantAmt <= 0");
        return _withdraw(_wantAmt, true);
    }

    // @notice Returns wantLockedTotal and sharesTotal of the Strategy
    // @Returns wantLockedTotal Total want tokens present with the strategy, deposited into Thena Gauge V2
    // @Returns sharesTotal Total shares corresponding to tokens in the strategy. This is equal to wantLockedTotal as the strategy is not compounding want tokens

    function getShares() external virtual view returns (uint256, uint256) {
        return (wantLockedTotal, sharesTotal);
    }

    // @notice Reports Rewards to be collected by this strategy from Gauge V2
    // @returns Pending Rewards

    function getStratPendingRewards() external virtual view returns (uint256){
        return (IThenaStrategyGaugeV2(thenaStrategyAddress).earned(address(this)));
    }

    // @notice Sets fees. Fees cannot be set higher than corresponding Max amounts
    // @param _entranceFeeFactor New Entrance Fee 
    // @param _withdrawFeeFactor New Withdraw Fee
    // @param _performanceFeeFactor New Performance Fee

    function setSettings(uint256 _entranceFeeFactor, uint256 _withdrawFeeFactor, uint256 _performanceFeeFactor) external virtual onlyOwner {

        require(_entranceFeeFactor <= entranceFeeFactorMax, "_entranceFeeFactor too high");
        entranceFeeFactor = _entranceFeeFactor;

        require(_withdrawFeeFactor <= withdrawFeeFactorMax, "_withdrawFeeFactor too high");
        withdrawFeeFactor = _withdrawFeeFactor;

        require(_performanceFeeFactor <= performanceFeeFactorMax, "_performanceFeeFactor too high");
        performanceFeeFactor = _performanceFeeFactor;

        emit SetSettings(_entranceFeeFactor, _withdrawFeeFactor, _performanceFeeFactor);

    }

    // @notice Sets Rewards Address to which fees generated flow
    // @param _rewardsAddress New Rewards Address

    function setRewardsAddress(address _rewardsAddress) external virtual onlyOwner {
        rewardsAddress = _rewardsAddress;
        emit SetRewardsAddress(_rewardsAddress);
    }

    // @notice Sets Thena Address 
    // @param _THENAAddress New Thena Address

    function setTHENAAddress(address _THENAAddress) external virtual onlyOwner {
        THENAAddress = _THENAAddress;
        emit SetTHENAAddress(_THENAAddress);
    }

    // @notice Sets Thena Strategy Address 
    // @param _thenaStrategyAddress New Thena Strategy Address

    function setThenaStrategyAddress(address _thenaStrategyAddress) external virtual onlyOwner {
        thenaStrategyAddress = _thenaStrategyAddress;
        emit SetThenaStrategyAddress(_thenaStrategyAddress);
    }

    // @notice Sets Planet Router Address 
    // @param _planetRouterAddress New Planet Router Address

    function setPlanetRouterAddress(address _planetRouterAddress) external virtual onlyOwner {
        planetRouterAddress = _planetRouterAddress;
        emit SetPlanetRouterAddress(_planetRouterAddress);
    }

    // @notice Sets Thena Router Address 
    // @param _thenaRouterAddress New Thena Router Address

    function setThenaRouterAddress(address _thenaRouterAddress) external virtual onlyOwner {
        thenaRouterAddress = _thenaRouterAddress;
        emit SetThenaRouterAddress(_thenaRouterAddress);
    }

    // @notice Sets Route to swap from Thena to Planet
    // @param _route New route to swap from Thena to Planet

    function setTHENAToPlanetRoute(Routes[] memory _route) external virtual onlyOwner{
        delete route;

        uint len = _route.length;
         
        for (uint i = 0 ; i < len; ++i){
            route.push(_route[i]);
        }
    
        emit SetTHENAToPlanetRoute(_route);
    }

    // @notice Withdraws tokens sent by mistake to the strategy. Note: Want tokens sent to the strategy cannot be removed.
    // @param _token Token to be withdraw
    // @param _amount Amount of _token to be withdrawn from the strategy
    // @param _to Address to which withdrawn tokens are to be sent
    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external virtual onlyOwner {
        require(_token != wantAddress, "!safe");
        IERC20(_token).safeTransfer(_to, _amount);
    }

    // @notice Internal function to wrap BNB into wBNB
    function _wrapBNB() internal virtual {
        uint256 bnbBal = address(this).balance;
        if (bnbBal != 0) {
            IWBNB(wbnbAddress).deposit{value: bnbBal}(); // BNB -> WBNB
        }
    }

    // @notice Function to wrap BNB into wBNB
    function wrapBNB() external virtual onlyOwner {
        _wrapBNB();
    }

    // @notice Withdraws want from Thena Gauge V2 and sends it to the farm, after deducting fees, which in turn sends it to the user
    // @notice _wantAmt Amount of want tokens that the user wishes to withdraw
    // @returns sharesRemoved Shares to be removed corresponding to the user's withdraw amount
    // @returns _wantAmt Want tokens to be sent to the user after deducting fees
    function _withdraw(uint256 _wantAmt, bool _emergency) internal virtual returns (uint256, uint256) {
        checkForFarmAddressCall();

        uint256 wantAmt = IThenaStrategyGaugeV2(thenaStrategyAddress).balanceOf(address(this));
        if (_wantAmt > wantAmt) {
            _wantAmt = wantAmt;
        }

        if (_wantAmt > sharesTotal) {
            _wantAmt = sharesTotal;
        }

        sharesTotal = wantLockedTotal = wantLockedTotal - _wantAmt;

        uint256 sharesRemoved = _wantAmt;

        if(_emergency){
		    IThenaStrategyGaugeV2(thenaStrategyAddress).emergencyWithdrawAmount(_wantAmt);
        }
        else{
		    IThenaStrategyGaugeV2(thenaStrategyAddress).withdraw(_wantAmt);
        }
        sharesRemoved = _wantAmt = IERC20(wantAddress).balanceOf(address(this));

        uint256 withdrawFee = (_wantAmt*withdrawFeeFactor)/10000;
        _wantAmt = _wantAmt - withdrawFee;
	    
        if(withdrawFee != 0){
        	IERC20(wantAddress).safeTransfer(rewardsAddress, withdrawFee);
	    }
        IERC20(wantAddress).safeTransfer(gammaFarmAddress, _wantAmt);
        
	    return (sharesRemoved, _wantAmt);
    }

}

// @title Planet's Aggregated Strategy for Thena Gauge V2
// @author Planet
contract AggregatedStrategy_GAMMA is Initializable, StratX2 {

    function initialize(
        address[] memory _addresses,
        uint256 _pid,
        uint256 _entranceFeeFactor,
        uint256 _withdrawFeeFactor,
        uint256 _performanceFeeFactor
    ) public initializer(){
        subInitialize();

        wbnbAddress = _addresses[0];
        gammaFarmAddress = _addresses[1];
        GAMMAAddress = _addresses[2];
        wantAddress = _addresses[3];
        rewardsAddress = _addresses[4];
        THENAAddress = _addresses[5];
        planetRouterAddress = _addresses[6];
        thenaRouterAddress = _addresses[7];
        thenaStrategyAddress = _addresses[8];
        
        pid = _pid;     

        entranceFeeFactor = _entranceFeeFactor;
        withdrawFeeFactor = _withdrawFeeFactor;
        performanceFeeFactor = _performanceFeeFactor;
    }
}

