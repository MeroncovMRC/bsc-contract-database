// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVault {
    function addWhitelist(address addr) external;

    function removeWhitelist(address addr) external;

    function withdraw(
        address tokenAddress,
        address to,
        uint256 amount
    ) external;

    function isWhitelist(address addr) external view returns (bool);
}

// File: src/lib/IUniswapV2Pair.sol


pragma solidity ^0.8.9;

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// File: src/IRegister.sol



pragma solidity ^0.8.0;

interface IRegister {
    event Regist(address player, address inviter);

    function addDefaultInviter(address addr) external returns (bool);

    function regist(address _inviter) external returns (bool);

    function registed(address _player) external view returns (bool);

    function myInviter(address _player) external view returns (address);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: src/Fleet.sol



pragma solidity ^0.8.0;






contract Fleet is Ownable {
    IERC20 public token;
    IERC20 public usdt;
    IUniswapV2Pair public uniswapV2Pair;
    IRegister public register;
    // IVault public fleetVault;
    IVault public inviterVault;
    uint256 public constant MIN_DEPOSIT_TOKEN_OF_USDT = 100 * 1e18;
    uint256 public constant MIN_DEPOSIT_TOKEN = 1000 * 1e18;
    address public constant DESTROY_ADDRESS = address(0x000000000000000000000000000000000000dEaD);

    uint256 public breakEvenPoolBalance;
    uint256 public staticPoolBalance;
    uint256 public nodeFundPoolBalance;
    uint256 public foundationsPoolBalance;
    uint256 public genesisFoundationsPoolBalance;

    uint256 public depositRewardRate = 500; //0.5%

    uint256 public breakEvenRate = 70000; //70%
    uint256 public staticRate = 28970; //28.97%
    uint256 public inviteRate = 780; //0.78%
    uint256 public foundationsRate = 100; //0.1%
    uint256 public genesisFoundationsRate = 150; //0.15%
    uint256 public baseRate = 100000;

    uint256 public id;
    uint256 public startTime = block.timestamp;
    uint256 public withdrawDuration = 24 hours;
    uint256 public compensationAmountReleaseDuration = 60 days;
    uint256 public fusingTime;
    bool public fusing;
    address[] public nodes;
    address[] public genesisNodes;
    mapping(address => UserDeposit) public userDepositMap;

    mapping(address => bool) public isNode;
    mapping(address => bool) public isGenesisNode;
    mapping(address => bool) public isFoundations;
    mapping(address => bool) public isGenesisFoundations;

    mapping(address => uint256) public principalWithdrewAfterFusingMap;
    mapping(address => uint256) public compensationWithdrewMap;
    mapping(address => uint256) public compensationLastWithdrewTimeMap;
    mapping(address => uint256) public nodeFundWithdrewMap;
    mapping(address => uint256) public nodeFundGenesisWithdrewMap;
    mapping(address => uint256) public foundationWithdrewMap;
    mapping(address => uint256) public genesisFoundationWithdrewMap;

    event Withdraw(uint256 id, address user, uint256 principal, uint256 reward);

    event Deposit(uint256 id, address user, uint256 principal);

    event TakeInvite(uint256 id, address user, uint256 amount);

    event Fusing();

    event WithdrawPrincipalAfterFusing(address user, uint256 amount);

    event WithdrawCompensationAmountAfterFusing(address user, uint256 amount);

    event WithdrawNodeFund(address user, uint256 amount);

    event WithdrawGenesisNodeFund(address user, uint256 amount);

    event WithdrawBonus(address user, uint256 amount);

    event WithdrawFoundationsReward(address user, uint256 amount);

    event WithdrawGenesisFoundationsReward(address user, uint256 amount);

    modifier onFusing() {
        require(fusing, "Fleet: not fusing");
        _;
    }

    modifier notFusing() {
        require(!fusing, "Fleet: fusing");
        _;
    }

    modifier deposited() {
        UserDeposit memory userDeposit = userDepositMap[msg.sender];
        require(userDeposit.deposited, "FLEET: Not deposit");
        _;
    }

    struct UserDeposit {
        uint256 id;
        uint256 principal;
        uint256 depositTime;
        bool deposited;
    }

    struct GameInfo {
        uint256 breakEvenPoolBalance;
        uint256 staticPoolBalance;
        uint256 bonusPoolBalance; //ignore
        uint256 nodeFundPoolBalance;
        uint256 time;
        uint256 minDepositAmount;
    }

    struct UserRewardInfo {
        uint256 principal;
        uint256 withdrawablePrincipal;
        uint256 totalCompensationAmount;
        uint256 lockedCompensationAmount;
        uint256 withdrewCompensationAmount;
        uint256 withdrawableCompensationAmount;
        uint256 lastWithdrawCompensationAmountTime;
        uint256 withdrawableBonus; //ignore
        uint256 withdrawableNodeFundAmount;
        uint256 withdrawableGenesisNodeFundAmount;
        uint256 withdrawableFoundationAmount;
        uint256 withdrawableGenesisFoundationAmount;
        bool exist;
    }

    constructor(
        IERC20 token_,
        IERC20 usdt_,
        address uniswapV2Pair_,
        IRegister register_,
        // IVault fleetVault_,
        IVault inviterVault_
    ) {
        token = token_;
        usdt = usdt_;
        uniswapV2Pair = IUniswapV2Pair(uniswapV2Pair_);
        register = register_;
        // fleetVault = fleetVault_;
        inviterVault = inviterVault_;
     
        //mainnet
        isFoundations[0x0710f447969aCc5Ee1eE74029D5d440EF9222A0a] = true;
        isFoundations[0xF4A948221d9D8680717253aD73aBD4E172F97367] = true;
        isFoundations[0x8555bC9023566862584db873Df743d565d7A289b] = true;
        isFoundations[0xc69323f191d1e15707504225EAd518892F299C42] = true;
        isFoundations[0x69D1Abb4F956096204226c5219F73Ca4fFd7D146] = true;

        isGenesisFoundations[0x40B302D5F57B5a4C655A739A07B59Af3290CBCb1] = true;
        isGenesisFoundations[0xD9c51a3272EecF10a6A3E09A9333456777279C71] = true;
        isGenesisFoundations[0xA8887c4aA150Ba3ed7f72c102085253C2A8D8924] = true;
        isGenesisFoundations[0x08c3951B6F338faeA3CDFB397d6064C3c6606AdC] = true;
        isGenesisFoundations[0x82f4D6f1829562Fa74D4dA49e3c540c3df82715B] = true;
    }

    function deposit(uint256 amount) public notFusing {
        // uint256 minDepositAmount = usdtToToken(MIN_DEPOSIT_TOKEN_OF_USDT);
        require(amount >= MIN_DEPOSIT_TOKEN, "Fleet: Invalid deposit amount");
        address user = msg.sender;
        UserDeposit storage userDeposit = userDepositMap[user];
        require(register.registed(user), "FLEET: Not registed");
        require(!userDeposit.deposited, "FLEET: deposited");
        uint256 depositId = ++id;
        userDeposit.id = depositId;
        userDeposit.depositTime = block.timestamp;
        userDeposit.principal = amount;
        userDeposit.deposited = true;
        userDepositMap[user] = userDeposit;

        require(token.transferFrom(user, address(this), amount), "FLEET: Transfer token from user to contract faild");

        breakEvenPoolBalance += (amount * breakEvenRate) / baseRate;
        staticPoolBalance += (amount * staticRate) / baseRate;
        foundationsPoolBalance += (amount * foundationsRate) / baseRate;
        genesisFoundationsPoolBalance += (amount * genesisFoundationsRate) / baseRate;

        uint256 inviteReward = (amount * inviteRate) / baseRate;
        require(token.transfer(address(inviterVault), inviteReward), "FLEET: Transfer token to inviter vault failed");
        emit TakeInvite(depositId, user, inviteReward);
        emit Deposit(depositId, user, amount);
    }

    function withdraw() public deposited notFusing {
        address user = msg.sender;
        UserDeposit storage userDeposit = userDepositMap[user];
        uint256 withdrawId = userDeposit.id;
        require(block.timestamp >= userDeposit.depositTime + withdrawDuration, "Fleet: Not time");
        uint256 userPrincipal = userDeposit.principal;
        uint256 reward = (userPrincipal * depositRewardRate) / baseRate;
        uint256 userBreakEvenPoolAmount = (userPrincipal * breakEvenRate) / baseRate;
        uint256 leftPrincipal = userPrincipal - userBreakEvenPoolAmount;
        if (staticPoolBalance >= leftPrincipal + reward) {
            breakEvenPoolBalance -= userBreakEvenPoolAmount;
            staticPoolBalance -= leftPrincipal + reward;
            require(token.transfer(user, userPrincipal + reward), "FLEET: withdraw transfer token failed");
            UserDeposit memory newUserDeposit = UserDeposit({id: 0, principal: 0, depositTime: 0, deposited: false});
            userDepositMap[user] = newUserDeposit;
            emit Withdraw(withdrawId, user, userPrincipal, reward);
        } else {
            fusing = true;
            fusingTime = block.timestamp;
            require(token.transfer(DESTROY_ADDRESS, staticPoolBalance), "FLEET: burn token failed");
            staticPoolBalance = 0;
            emit Fusing();
        }
    }

    function withdrawPrincipalAfterFusing() public deposited onFusing {
        address user = msg.sender;
        uint256 amount = getUserWithdrawablePrincipalAfterFusing(user);
        require(amount > 0, "FLEET: zero balance");
        principalWithdrewAfterFusingMap[user] += amount;
        require(token.transfer(user, amount), "FLEET: withdraw token failed");
        emit WithdrawPrincipalAfterFusing(user, amount);
    }

    function withdrawCompensationAmountAfterFusing() public deposited onFusing {
        address user = msg.sender;
        (,,, uint256 amount) = getUserCompensationInfo(user);
        require(amount > 0, "FLEET: zero balance");
        compensationWithdrewMap[user] += amount;
        compensationLastWithdrewTimeMap[user] = block.timestamp;
        require(token.transfer(user, amount), "FLEET: withdraw token failed");
        emit WithdrawCompensationAmountAfterFusing(user, amount);
    }

    function withdrawFoundationsReward() public {
        address user = msg.sender;
        uint256 amount = getUserWithdrawableFoundationReward(user);
        require(amount > 0, "FLEET: zero balance");
        foundationWithdrewMap[user] += amount;
        require(token.transfer(user, amount), "FLEET: withdraw token failed");
        emit WithdrawFoundationsReward(user, amount);
    }

    function withdrawGenesisFoundationsReward() public {
        address user = msg.sender;
        uint256 amount = getUserWithdrawableGenesisFoundationReward(user);
        require(amount > 0, "FLEET: zero balance");
        genesisFoundationWithdrewMap[user] += amount;
        require(token.transfer(user, amount), "FLEET: withdraw token failed");
        emit WithdrawGenesisFoundationsReward(user, amount);
    }

    function getUserWithdrawablePrincipalAfterFusing(address user) private view returns (uint256) {
        UserDeposit memory userDeposit = userDepositMap[user];
        if (userDeposit.deposited) {
            if (fusing) {
                return userDeposit.principal * breakEvenRate / baseRate - principalWithdrewAfterFusingMap[user];
            } else {
                return 0;
            }
        } else {
            return 0;
        }
    }

    function getUserCompensationInfo(address user) private view returns (uint256, uint256, uint256, uint256) {
        UserDeposit memory userDeposit = userDepositMap[user];
        if (userDeposit.deposited) {
            if (fusing) {
                uint256 totalBonus = 0;
                uint256 compensationAmount = ((userDeposit.principal * (baseRate - breakEvenRate)) / baseRate) * 2;
                if (totalBonus > compensationAmount) {
                    return (0, 0, 0, 0);
                } else {
                    uint256 total = compensationAmount - totalBonus;
                    uint256 releasePerSecond = total / compensationAmountReleaseDuration;
                    uint256 lastWithdrawTime = compensationLastWithdrewTimeMap[user];
                    if (lastWithdrawTime == 0) {
                        lastWithdrawTime = fusingTime;
                    }
                    uint256 withdrawable = (block.timestamp - lastWithdrawTime) * releasePerSecond;
                    uint256 withdrew = compensationWithdrewMap[user];
                    if (withdrawable + withdrew > total) {
                        withdrawable = total - withdrew;
                    }
                    uint256 locked = total - withdrew - withdrawable;
                    return (total, locked, withdrew, withdrawable);
                }
            } else {
                return (0, 0, 0, 0);
            }
        } else {
            return (0, 0, 0, 0);
        }
    }

    function getUserWithdrawableFoundationReward(address user) private view returns (uint256) {
        if (isFoundations[user]) {
            uint256 reward = foundationsPoolBalance / 5;
            return reward - foundationWithdrewMap[user];
        } else {
            return 0;
        }
    }

    function getUserWithdrawableGenesisFoundationReward(address user) private view returns (uint256) {
        if (isGenesisFoundations[user]) {
            uint256 reward = genesisFoundationsPoolBalance / 5;
            return reward - genesisFoundationWithdrewMap[user];
        } else {
            return 0;
        }
    }

    function getUserRewardInfo(address user) public view returns (UserRewardInfo memory info) {
        UserDeposit memory userDeposit = userDepositMap[user];
        if (userDeposit.deposited) {
            info.principal = userDeposit.principal;
            if (fusing) {
                info.withdrawablePrincipal = getUserWithdrawablePrincipalAfterFusing(user);
                (
                    uint256 totalCompensationAmount,
                    uint256 lockedCompensationAmount,
                    uint256 withdrewCompensationAmount,
                    uint256 withdrawableCompensationAmount
                ) = getUserCompensationInfo(user);
                info.totalCompensationAmount = totalCompensationAmount;
                info.lockedCompensationAmount = lockedCompensationAmount;
                info.withdrewCompensationAmount = withdrewCompensationAmount;
                info.withdrawableCompensationAmount = withdrawableCompensationAmount;
                info.lastWithdrawCompensationAmountTime = compensationLastWithdrewTimeMap[user];
            }
        }
        info.withdrawableFoundationAmount = getUserWithdrawableFoundationReward(user);
        info.withdrawableGenesisFoundationAmount = getUserWithdrawableGenesisFoundationReward(user);
        return info;
    }

    function getGameInfo() public view returns (GameInfo memory) {
        return GameInfo({
            breakEvenPoolBalance: breakEvenPoolBalance,
            staticPoolBalance: staticPoolBalance,
            bonusPoolBalance: 0,
            nodeFundPoolBalance: nodeFundPoolBalance,
            time: startTime,
            // minDepositAmount: usdtToToken(MIN_DEPOSIT_TOKEN_OF_USDT)
            minDepositAmount: MIN_DEPOSIT_TOKEN
        });
    }

    function getUserDepositInfo(address user) public view returns (UserDeposit memory) {
        return userDepositMap[user];
    }

    function setWithdrawDuration(uint256 duration) public onlyOwner {
        withdrawDuration = duration;
    }

    function setCompensationAmountReleaseDuration(uint256 duration) public onlyOwner {
        compensationAmountReleaseDuration = duration;
    }

    function usdtToToken(uint256 amount) public view returns (uint256) {
        (uint256 r0, uint256 r1,) = uniswapV2Pair.getReserves();
        uint256 usdtReserve;
        uint256 beleReserve;
        if (address(usdt) < address(token)) {
            usdtReserve = r0;
            beleReserve = r1;
        } else {
            usdtReserve = r1;
            beleReserve = r0;
        }
        return amount * beleReserve / usdtReserve;
    }
}