// SPDX-License-Identifier: UNLICENSED  
pragma solidity ^0.8.13;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        //  require(isContract(target), "Address: call to non-contract"); 
        (bool success, bytes memory returndata) = target.call{value: value}(
            data
        );
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionStaticCall(address target, bytes memory data)
        internal
        view
        returns (bytes memory)
    {
        return
            functionStaticCall(
                target,
                data,
                "Address: low-level static call failed"
            );
    }

    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function functionDelegateCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return
            functionDelegateCall(
                target,
                data,
                "Address: low-level delegate call failed"
            );
    }

    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transfer.selector, to, value)
        );
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)
        );
    }

    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(token.approve.selector, spender, value)
        );
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(
            token,
            abi.encodeWithSelector(
                token.approve.selector,
                spender,
                newAllowance
            )
        );
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(
                oldAllowance >= value,
                "SafeERC20: decreased allowance below zero"
            );
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(
                token,
                abi.encodeWithSelector(
                    token.approve.selector,
                    spender,
                    newAllowance
                )
            );
        }
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(
            data,
            "SafeERC20: low-level call failed"
        );
        if (returndata.length > 0) {
            require(
                abi.decode(returndata, (bool)),
                "SafeERC20: ERC20 operation did not succeed"
            );
        }
    }
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function sub( uint256 a, uint256 b) internal pure returns (uint256) {
        unchecked {
            require(b <= a, "SafeMath: Error" );
            return a - b;
        }
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        return c;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

}

abstract contract ReentrancyGuard {
    bool internal locked;
    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

struct SplUser{
    uint256 totWithdrawn;
    uint256 totalSplits;
    uint256 splitCount;
    uint256 maxPayout;
    uint256 ncount;
    uint256 reserves;
    SplitStake [] SplitStakeList;
}

struct SplitStake{
    uint256 splitid;
    uint256 blocktime;
    uint256 purchaseprice;
    uint256 sellprice;
}

struct SplitProf{
    uint256 spid;
    uint256 spamount;
    uint256 sppayout;
    uint256 sptimestamp;
    uint256 spenddate;
    uint256 sptotalwithdrawn;
    uint256 sptotalusercount;
}

struct Nominees{
    bytes projectName;
    address contractAddy;
    uint256 nomID;
    uint256 risklevel;
}

struct Voters{
    bytes ProjName;
    uint256 VotersID;
    uint256 voteCountYes;
    uint256 voteCountNo;
    uint256 voteStart;
    uint256 voteEnd;
    uint256 rl;
}

struct DailyData {
    uint256 dailydate;
    uint256 splitpoool;
    uint256 injtotal;
}

contract WealthMountainSplit is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    IERC20 public USDT;
    uint256 public AllTimeUniqueUsers;
    uint256 public AllTimeSplitStakesCount;
    uint256 public AllTimeSumOfSplitPurchases;
    uint256 public AllTimeSplitProfits;
    uint256 public SplitBuybackPool;
    uint256 public SplitProfitCount;
    uint256 public CurrentSplitStakeCount;
    uint256 public CurrentSplitUsers;
    uint256 public nmID;
    uint256 public vID;
    uint256 public minimumNominate;
    uint256 public minimumVote;
    uint256 public dynamicPrice;
    uint256 public injectedTotal;
    uint256 public dailyValueTime;
    uint256 public MaxSupply;
    uint256 public profEndTime;
    uint256 public LFunds;
    address public InvWallet;
    uint256 public initialPrice = 500 ether;

    DailyData [] public dailyValueArray;
    Nominees [] NominationList;
    Voters [] VoterList;
    mapping (address => mapping(uint256 => bool)) public VotedIDs;
    mapping (address => mapping(uint256 => uint256)) public Staked;
    mapping (address => mapping (uint256 => bool)) public SplProfTaken;
    mapping (address => SplUser) public SplUserKey;
    mapping (uint256 => SplitProf) public SProf;
    mapping (address => bool) public UserCount;

    constructor(){
        USDT = IERC20(0x55d398326f99059fF775485246999027B3197955); 
        InvWallet = 0xBa1c8411f9Af83f4f8B964Ae82833D18561de397;
        dailyValueTime = block.timestamp;
        dynamicPrice = initialPrice;
        MaxSupply = 200;
        minimumVote = 1;
        minimumNominate = 2; 
        profEndTime = 30 days;
    }


    function DepoSplitProfits(uint256 proffamt) public noReentrant {
        require(proffamt >= 1000 ether, "Minimum distribution amount required = $1000.");
        USDT.safeTransferFrom(msg.sender, address(this), proffamt);
        uint256 profamt = proffamt + LFunds;
        AllTimeSplitProfits += profamt;
        SplitProf storage profit = SProf[SplitProfitCount];
        uint256 curusers = CurrentSplitStakeCount;
        require (profamt > curusers, "No users left");
        profit.spid = SplitProfitCount;
        profit.spamount = profamt;
        profit.sppayout = profamt.div(curusers);
        profit.sptimestamp = block.timestamp;
        profit.spenddate = block.timestamp + profEndTime;
        injectedTotal += profamt;
        SplitProfitCount += 1;
        addDailyValues();
    }

    function StakeSplit(uint256 splitamt, uint256 quantity) public noReentrant{
        SplUser storage user = SplUserKey[msg.sender]; 
        require (quantity + CurrentSplitStakeCount <= MaxSupply, "Can not exceed max amount of stakes");
        require (quantity <= 20 && quantity > 0, "Quantity is not sufficient");
        require (splitamt == dynamicPrice.mul(quantity), "Did not put enough in for quantity");
        USDT.safeTransferFrom(msg.sender, address(this), splitamt);
        
        checkUsers(msg.sender);
        
        uint256 dprice = priceCalc();
        
        if (user.SplitStakeList.length < 1){
            CurrentSplitUsers += 1;
        }
        for (uint256 i = 0; i < quantity; i++){
            user.SplitStakeList.push(SplitStake({
            splitid: user.splitCount,
            blocktime: block.timestamp,
            purchaseprice: dprice,
            sellprice: dprice.div(4)
        }));
            user.splitCount += 1;
        }
        user.reserves += dprice.div(4);
        uint256 splitfee = splitamt.mul(750).div(1000);
        USDT.safeTransfer(InvWallet, splitfee);
        uint256 newamt = splitamt.sub(splitfee);
        user.totalSplits += quantity;
        user.maxPayout += splitamt.mul(3);
        AllTimeSplitStakesCount += 1;
        AllTimeSumOfSplitPurchases += splitamt;
        SplitBuybackPool += newamt;
        CurrentSplitStakeCount += quantity;
        setDynamicPrice();
        addDailyValues();
    }

    function WithdrawSplitProfit(uint256 pkey) public noReentrant{
        SplUser storage user = SplUserKey[msg.sender];
        SplitProf storage profit = SProf[pkey];
        require (user.totWithdrawn < user.maxPayout, "Already maxed out!"); 
        require (SplProfTaken[msg.sender][profit.spid] == false, "Already pulled profits!");
        require (block.timestamp < profit.spenddate);
        uint256 z;
        uint256 scount;
        uint256 ramount;
        for (uint256 i = 0; i < user.SplitStakeList.length; i++) {
            if (user.SplitStakeList[i].blocktime < profit.sptimestamp && user.SplitStakeList[i].blocktime != 0){
                scount++;
            }
        }
        uint256 pamount = profit.sppayout.mul(scount);
        if (pamount + user.totWithdrawn >= user.maxPayout){
            pamount = user.maxPayout.sub(user.totWithdrawn);
            CurrentSplitStakeCount -= scount;
            z = returnsells(msg.sender);
            user.totalSplits = 0;
            setDynamicPrice();
        }
        ramount = pamount+z;
        profit.sptotalwithdrawn += pamount;
        profit.sptotalusercount += scount;
        user.totWithdrawn += pamount;
        USDT.safeTransfer(msg.sender, ramount);
        SplProfTaken[msg.sender][profit.spid] = true;
        addDailyValues();
    }  

    function sellStakes(uint256 stakeID) public noReentrant{
        SplUser storage user = SplUserKey[msg.sender];
        uint256 payoutamt;
        uint256 maxamt;
        for (uint256 y = 0; y < user.splitCount; y++){
            if (user.SplitStakeList[y].splitid == stakeID){
                payoutamt += user.SplitStakeList[y].sellprice;
                maxamt += user.SplitStakeList[y].purchaseprice.mul(3);
                delete user.SplitStakeList[y];
            }
        }
        require (payoutamt > 0, "Stake does not exist anymore!");
        SplitBuybackPool -= payoutamt;
        CurrentSplitStakeCount -= 1;
        user.totalSplits -= 1;
        user.maxPayout -= maxamt;
        USDT.safeTransfer(msg.sender, payoutamt);
        setDynamicPrice();
        addDailyValues();
    }

    function TransferLeftovers(uint256 prokey) public onlyOwner{
        SplitProf storage prof = SProf[prokey];
        uint256 tamount;
        if (block.timestamp > prof.spenddate){
            tamount = prof.spamount.sub(prof.sptotalwithdrawn);
            prof.sptotalwithdrawn = prof.spamount;
        }
        LFunds += tamount;
    }
    
    function priceCalc() public view returns (uint256) {
        return dynamicPrice;
    }

    function setDynamicPrice() internal {	
            uint256 splitCount = CurrentSplitStakeCount.mul(3);	
            uint256 oneEther = 1 ether;
            uint256 countInEther = splitCount * oneEther;	
            dynamicPrice = countInEther + initialPrice;	
        }
        
    function setInitialPrice(uint256 setter) public onlyOwner {
        initialPrice = setter;
    }

    function checkUsers(address theAddy) internal { 
        if (UserCount[theAddy] == false){
            AllTimeUniqueUsers += 1;
            UserCount[theAddy] = true;
        }  
    }

    function addDailyValues() internal {
        if (block.timestamp.sub(dailyValueTime) > 86400){
            dailyValueArray.push(DailyData({
                dailydate: block.timestamp,
                splitpoool: AllTimeSumOfSplitPurchases,
                injtotal: injectedTotal
            }));
        } 
    }

    function mintStakes(uint256 quantity, uint256 newinit) public onlyOwner {
        MaxSupply += quantity;
        initialPrice = newinit;
    }

    function showSplitStakes(address spladdys) public view returns (SplitStake [] memory spl) {
        SplUser storage user = SplUserKey[spladdys];
        return (user.SplitStakeList);
    }

    function returnsells(address selladdys) internal returns (uint256) {
        SplUser storage user = SplUserKey[selladdys];

        uint256 ramt;

        for (uint256 i = 0; i < user.SplitStakeList.length; i++){
            user.SplitStakeList[i].blocktime = 0;
            user.SplitStakeList[i].purchaseprice = 0;
            user.SplitStakeList[i].sellprice = 0;
        }

        ramt = user.reserves;
        user.reserves = 0;
        SplitBuybackPool -= ramt;

       return ramt;
    }

    function vote(uint256 voID, uint256 choice) public noReentrant{
        require (voID < VoterList.length, "Invalid input");
        require(VotedIDs[msg.sender][voID] != true, "already voted");
        uint256 x = checkActiveStakes(msg.sender);
        require (x >= minimumVote, "Not enough stakes");
        for (uint256 i = 0; i < VoterList.length; i++){
            if (VoterList[i].VotersID == voID){
                
                require (VoterList[i].voteEnd > block.timestamp);
            
                if (choice == 1){
                VoterList[i].voteCountYes += x;
                VotedIDs[msg.sender][voID] = true;
                Staked[msg.sender][voID] = x;
                }

                if (choice == 2){
                VoterList[i].voteCountNo += x;
                VotedIDs[msg.sender][voID] = true;
                Staked[msg.sender][voID] = x;
                }
            }
        }
    }

    function userNominate(bytes memory projectNm, address cAddress, uint256 risklev) public noReentrant{
        SplUser storage user = SplUserKey[msg.sender];
        uint256 x = checkActiveStakes(msg.sender);
        require (user.ncount <= x);
        require (projectNm.length <= 32);
        require (x >= minimumNominate, "You don't have enough stakes");
            NominationList.push(Nominees({
                projectName: projectNm,
                contractAddy: cAddress,
                nomID: nmID,
                risklevel: risklev
            }));
            user.ncount += 1;
            nmID += 1;
    }

    function ownerNominate(bytes memory projName, uint256 rlevl) public onlyOwner{
        require (projName.length < 32, "name is too big");
        VoterList.push(Voters({
            ProjName: projName,
            VotersID: vID,
            voteCountYes: 0, 
            voteCountNo: 0,
            voteStart: block.timestamp,
            voteEnd: block.timestamp + 7 days,
            rl: rlevl
        }));
        vID++;
    }

    function removeNomination(uint256 nID) public onlyOwner{
        for (uint256 i = 0; i < NominationList.length; i++){
            if (NominationList[i].nomID == nID){
                delete NominationList[i]; 
            }
        }
    }

    function showNominations() public view returns (Nominees [] memory NominationLists) {
        return NominationList;
    }

    function nominationSelection(uint256 nomsID) public onlyOwner{
        for (uint256 i = 0; i < NominationList.length; i++){
            if (NominationList[i].nomID == nomsID){
                VoterList.push(Voters({
                    ProjName: NominationList[i].projectName,
                    VotersID: vID,
                    voteCountYes: 0, 
                    voteCountNo: 0,
                    voteStart: block.timestamp,
                    voteEnd: block.timestamp + 7 days,
                    rl: NominationList[i].risklevel
                }));
                delete NominationList[i];  
            }
        }
        vID++;
    }

    function showVotables() public view returns (Voters [] memory VoterLists) {
        return VoterList;
    }

    function removeVotables(uint256 xid) public onlyOwner{
        for (uint256 i = 0; i < VoterList.length; i++){
            if (VoterList[i].VotersID == xid){
                delete VoterList[i];
            }
        }
    }

    function changeOwner(address newowner) public onlyOwner{
        transferOwnership(newowner);
    }

    function changenmID(uint256 newnmID) public onlyOwner{
        nmID = newnmID;
    }

    function checkActiveStakes(address usraddy) public view returns (uint256) {
        SplUser storage user = SplUserKey[usraddy];
        return user.totalSplits;
    }

    function setVoteStakeCount(uint256 t) public onlyOwner{
        minimumVote = t;
    }

    function setNominateStakeCount(uint256 z) public onlyOwner{
        minimumNominate = z;
    }

}