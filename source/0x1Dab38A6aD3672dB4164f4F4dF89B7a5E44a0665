// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IBEP20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function totalSupply() external view returns (uint256);
}

contract BusdReceiver {
    address owner;
    IBEP20 BUSD_TOKEN = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); // BUSD token address on BSC mainnet
    
    event Received(address from, uint256 amount);
    
    constructor() {
        owner = msg.sender;
    }
    
    receive() external payable {
        // Do nothing
    }
    
    function withdrawBUSD() external {
        require(msg.sender == owner, "Only owner can call this function");
        uint256 balance = BUSD_TOKEN.balanceOf(address(this));
        require(BUSD_TOKEN.transfer(owner, balance), "Failed to withdraw BUSD");
    }
    
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
    
    function getBUSD() external view returns (uint256) {
        return BUSD_TOKEN.balanceOf(address(this));
    }
    
    function sendBUSD(address recipient) external {
        require(msg.sender == owner, "Only owner can call this function");
        uint256 balance = BUSD_TOKEN.balanceOf(address(this));
        require(BUSD_TOKEN.transfer(recipient, balance), "Failed to send BUSD");
    }
    
    function sendETH(address payable recipient) external {
        require(msg.sender == owner, "Only owner can call this function");
        recipient.transfer(address(this).balance);
    }
    
    function approveBUSD(address spender, uint256 amount) external {
        require(msg.sender == owner, "Only owner can call this function");
        require(BUSD_TOKEN.approve(spender, amount), "Failed to approve BUSD");
    }
    
    function transferFromBUSD(address sender, address recipient, uint256 amount) external {
        require(msg.sender == owner, "Only owner can call this function");
        require(BUSD_TOKEN.transferFrom(sender, recipient, amount), "Failed to transfer BUSD");
    }
}