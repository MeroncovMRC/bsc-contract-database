// File: @openzeppelin/contracts/utils/math/SafeMath.sol


// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity 0.8.19;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity 0.8.19;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: Contracts/buyAccessReferral.sol



pragma solidity 0.8.19;



contract ReferralContract {
    using SafeMath for uint256;
    IERC20 public tokenAcces;
    IERC20 public tokenUSDT;
    address public owner;
    address public saleReceiver = 0xd500c150dc9b2c70E4cCeBD0fcd5163366Fcba88;
    address public developer = 0x0151899167ea32C2bF9BB148817116d49Ba0Bc9d;
    uint256 public referrersCount;
    uint256 public normalPercentage = 10;

    struct buyerInfo {
        uint256 sales;
        uint256 amountUSDT;
    }

    mapping(address => bool) public isReferrer;
    mapping(address => buyerInfo) public buyer;
    mapping(address => uint256) public referrerPercentage;
    mapping(address => mapping(address => uint256)) public buyersForReferrer;
    mapping(address => uint256) public refCount;
    mapping(address => uint256) public totalReceivedForReferrer;
    mapping(address => address) public referrerOf;

    address[] public referrers;
    address[] public buyers;

    uint256 public priceUSDT = 200000000000000000; // 20 cents in USD

    bool paused = false;

    event buyAccess(address buyer, uint256 amount, address referrer);
    event ReferralLink(string _referralLink);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not Owner");
        _;
    }

    modifier notPaused() {
        require(paused != true, "Contract is paused!");
        _;
    }

    constructor(IERC20 _tokenAcces, IERC20 _tokenUSDT) {
        owner = msg.sender;
        tokenAcces = _tokenAcces;
        tokenUSDT = _tokenUSDT;
    }

    function setPaused(bool _isPaused) external onlyOwner {
        paused = _isPaused;
    }

    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner;
    }

    function changePrice(uint256 _newPrice) external onlyOwner {
        priceUSDT = _newPrice;
    }

    function setUSDT(address _USDT) external onlyOwner {
        require(_USDT != address(0), "USDT address zero");
        tokenUSDT = IERC20(_USDT);
    }

    function setSaleReceiver(address _saleReceiver) external onlyOwner {
        require(_saleReceiver != address(0), "address zero");
        saleReceiver = _saleReceiver;
    }

    function changeNormalPercentage(uint256 _newPercentage) external onlyOwner {
        require(_newPercentage > 0, "Percentage can't be zero");
        normalPercentage = _newPercentage;
    }

    function buyWithReferral(address referrer, uint256 amount)
        external
        notPaused
    {
        require(referrer != address(0), "Referrer address zero");
        require(isReferrer[referrer] == true, "Not referrer");
        require(
            tokenUSDT.allowance(msg.sender, address(this)) >= amount,
            "Check USDT Allowance"
        );
        require(
            tokenUSDT.transferFrom(msg.sender, address(this), amount),
            "Check USDT balance"
        );
        uint256 referralBonus = (
            amount.mul(referrerPercentage[referrer]).div(100)
        ); // 10% referral bonus
        uint256 developerAmount = amount.mul(3).div(100);
        uint256 purchaseAmount = amount.div(priceUSDT).mul(1e18);
        require(
            tokenAcces.balanceOf(address(this)) >= purchaseAmount,
            "Not enough Acces"
        );

        tokenAcces.transfer(msg.sender, purchaseAmount);
        tokenUSDT.transfer(referrer, referralBonus);
        tokenUSDT.transfer(developer, developerAmount);
        tokenUSDT.transfer(
            saleReceiver,
            amount.sub(referralBonus).sub(developerAmount)
        );

        // update buyers list for this referrer
        buyersForReferrer[referrer][msg.sender] = amount;

        // update total received for this referrer
        totalReceivedForReferrer[referrer] = totalReceivedForReferrer[referrer]
            .add(referralBonus);

        refCount[referrer]++;

        if (buyer[msg.sender].sales == 0) {
            buyers.push(msg.sender);
            referrerOf[msg.sender] = referrer;
        }

        buyer[msg.sender].sales++;
        buyer[msg.sender].amountUSDT += amount;
        emit buyAccess(msg.sender, amount, referrer);
    }

    function generateReferralLinkSpecial(address referrer, uint256 _percentage)
        external
        onlyOwner
        returns (string memory)
    {
        referrerPercentage[referrer] = _percentage;
        referrers.push(referrer);
        referrersCount++;
        return
            string(
                abi.encodePacked(
                    "https://metacces.com/?ref=",
                    toString(referrer)
                )
            );
    }

    function generateReferralLink() public notPaused returns (string memory) {
        require(!isReferrer[msg.sender], "Address already is a referrer");
        isReferrer[msg.sender] = true;
        address referrer = msg.sender;
        referrerPercentage[referrer] = normalPercentage;
        referrersCount++;
        referrers.push(msg.sender);
        string memory referralLink = string(
            abi.encodePacked("https://metacces.com/?ref=", toString(referrer))
        );
        emit ReferralLink(referralLink);
        return referralLink;
    }

    function changeReferrerPercentage(address _referrer, uint256 _newPercentage)
        external
        onlyOwner
    {
        referrerPercentage[_referrer] = _newPercentage;
    }

    function getReferrerInfo(address referrer)
        public
        view
        returns (
            uint256 buyersCount,
            address[] memory buyersList,
            uint256[] memory buyersAmount,
            uint256 totalRewards
        )
    {
        uint256 numBuyers = refCount[referrer];

        address[] memory _buyersList = new address[](numBuyers);
        uint256[] memory _buyersAmount = new uint256[](numBuyers);

        uint256 index = 0;

        for (uint256 i = 0; i < buyers.length; i++) {
            if (buyersForReferrer[referrer][buyers[i]] > 0) {
                buyersList[index] = buyers[i];
                buyersAmount[index] = buyersForReferrer[referrer][buyers[i]];
                index++;
            }
        }

        uint256 totalUSDTReceived = totalReceivedForReferrer[referrer];

        return (numBuyers, _buyersList, _buyersAmount, totalUSDTReceived);
    }

    function getReferrersWithPercentage()
        public
        view
        returns (address[] memory, uint256[] memory)
    {
        uint256 length = referrers.length;
        address[] memory referrerAddresses = new address[](length);
        uint256[] memory referrerPercentages = new uint256[](length);
        for (uint256 i = 0; i < length; i++) {
            referrerAddresses[i] = referrers[i];
            referrerPercentages[i] = referrerPercentage[referrers[i]];
        }
        return (referrerAddresses, referrerPercentages);
    }

    function getAllBuyers()
        public
        view
        returns (
            address[] memory,
            uint256[] memory,
            uint256[] memory
        )
    {
        uint256 buyerCount = buyers.length;

        address[] memory buyerAddresses = new address[](buyerCount);
        uint256[] memory buyerSales = new uint256[](buyerCount);
        uint256[] memory buyerUSDTAmounts = new uint256[](buyerCount);

        for (uint256 i = 0; i < buyerCount; i++) {
            buyerAddresses[i] = buyers[i];
            buyerSales[i] = buyer[buyers[i]].sales;
            buyerUSDTAmounts[i] = buyer[buyers[i]].amountUSDT;
        }

        return (buyerAddresses, buyerSales, buyerUSDTAmounts);
    }

    function getReferralTree(address _address, uint256 _depth)
        public
        view
        returns (address[] memory)
    {
        require(_depth > 0, "Depth must be greater than 0");
        address[] memory referrals = new address[](_depth);

        address currentReferrer = _address;
        for (uint256 i = 0; i < _depth; i++) {
            currentReferrer = referrerOf[currentReferrer];
            if (currentReferrer == address(0)) {
                break;
            }
            referrals[i] = currentReferrer;
        }
        return referrals;
    }

    function toString(address account) internal pure returns (string memory) {
        return toString(abi.encodePacked(account));
    }

    // This is a helper function to convert a bytes memory to string
    function toString(bytes memory data) internal pure returns (string memory) {
        bytes memory alphabet = "0123456789abcdef";

        bytes memory str = new bytes(2 + data.length * 2);
        str[0] = "0";
        str[1] = "x";
        for (uint256 i = 0; i < data.length; i++) {
            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];
            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];
        }
        return string(str);
    }

    function withdrawTokens(IERC20 _token, uint256 _amount) external onlyOwner {
        require(
            _token.transfer(msg.sender, _amount),
            "Failed to transfer the tokens"
        );
    }
}