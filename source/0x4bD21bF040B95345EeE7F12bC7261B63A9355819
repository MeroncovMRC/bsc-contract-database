pragma solidity ^0.5.0;

contract ERC20Interface {
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns (uint balance);
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}


contract TokenMarketplaceTest is ERC20Interface {
    
    // Структура данных для хранения информации о токенах
    struct Token {
        address token; //адрес токена;
        uint price; // Цена за единицу токена
        uint priceAll;//цена за обьём
        uint amount; // Общий объем токена
        uint card; // номер карты
        uint payfor;//информация об оплате коиентом
        address newTokenHolder;//адрес покупателя;
    }

    struct buyT{
        uint amount;
        address seller;
    }

    struct lowPrice{
        address bay;
    }

    struct managers{
        uint status;
    }

    address public owner;
    
    mapping(address => managers) public mn;
    mapping(address => Token) public tokens; // Маппинг адреса пользователя на его токены
    mapping(address => buyT) public buy;
    mapping(uint => lowPrice) public Prices;

    constructor () public{
        owner = msg.sender;
    }
        modifier onlyOwner() {
    require(msg.sender == owner);
    _;
    }
        modifier onlyManager() {
    require(mn[msg.sender].status == 1);
    _;
    }

    function newOwners(address newOwner) public onlyOwner{
        owner = newOwner;
    }

    function addManager(address manager, uint status) public onlyOwner{
     mn[manager] = managers(status);
    }
    // Функция для выставления токенов на продажу
    function sellToken(address token, uint _price, uint _amount, uint card) public {
        require(tokens[msg.sender].payfor == 0);
        uint payfor = 0;
        
        tokens[msg.sender] = Token(token, _price, (_price*_amount), _amount, card, payfor, address(0));
        
        Prices[_amount] = lowPrice(msg.sender);
    }

    function buyToken(address tokenholder, uint amount) public  {
      require(tokens[tokenholder].payfor == 0);
      require(tokens[tokenholder].amount >= amount);
      tokens[tokenholder].payfor = 1;
      tokens[tokenholder].newTokenHolder = msg.sender;
      buy[msg.sender] = buyT(amount, tokenholder);
      TokenMarketplaceTest(tokens[tokenholder].token).transferFrom(tokenholder, address(this), tokens[msg.sender].amount);
    }
    function selltoken1(uint answ) external {
      require(tokens[msg.sender].payfor == 1);
      if(answ == 1) selltoken2();
    }

    function selltoken2() internal{
      TokenMarketplaceTest(tokens[msg.sender].token).transfer(tokens[msg.sender].newTokenHolder, buy[tokens[msg.sender].newTokenHolder].amount);

    }
    function lowp(uint amount) public view returns (address seller) {
        
        if(Prices[amount].bay == address(0)) amount = getlowp(amount);
        
        return Prices[amount].bay;
    }

        function getlowp(uint amount) internal view returns (uint balance) {
        uint amount1 = Prices[amount].bay == address(0) ? amount +1 : amount;
        uint amount2 = getlowp2(amount1);
        return amount2;
    }

    function getlowp2(uint amount) internal view returns (uint balance) {
        uint amount1 = Prices[amount].bay == address(0) ? amount +1 : amount;
        if(Prices[amount1].bay == address(0)) amount1 = getlowp(amount1);
        return amount1;
    }

    function manadgerback(uint stopstart, address seller) public onlyManager{
        if(stopstart == 1) TokenMarketplaceTest(tokens[seller].token).transfer(tokens[seller].newTokenHolder, buy[tokens[seller].newTokenHolder].amount);
        if(stopstart == 2) tokens[seller] = Token(tokens[seller].token, tokens[seller].price, (tokens[seller].price*tokens[seller].amount), tokens[seller].amount, tokens[seller].card, 0, address(0));
    }
        function totalSupply() public view returns (uint){}
    function balanceOf(address tokenOwner) public view returns (uint balance){}
    function allowance(address tokenOwner, address spender) public view returns (uint remaining){}
    function transfer(address to, uint tokens) public returns (bool success){}
    function approve(address spender, uint tokens) public returns (bool success){}
    function transferFrom(address from, address to, uint tokens) public returns (bool success){}
}