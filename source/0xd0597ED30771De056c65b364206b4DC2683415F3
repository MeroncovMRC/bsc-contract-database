//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Conversation {

    struct Users {
        address user1Address;
        address user2Address;
        mapping (address => int) userID;
    }

    uint256 public messageCount;

    string public fullConvo;

    string lastMessage;

    Users public users;

    address[] public userArray;

    string[] public viewMessages;

    constructor(address recipient){

        users.user1Address = tx.origin;
        users.user2Address = recipient;

        users.userID[tx.origin] = 1;
        users.userID[recipient] = 2;
        userArray.push(users.user1Address);
        userArray.push(users.user2Address);

    }

    function sendMessage(string memory _message) public returns (string memory){

        string memory userID;

        if(address(msg.sender) == users.user1Address){
            userID = "1: ";
        }

        else{
            userID = "2: ";
        }

        string memory userIDInMessage = " USER ";
        string memory fullID = string.concat(userIDInMessage, userID);
        string memory fullMessage = string.concat(fullID, _message);

        lastMessage = fullMessage;
        fullConvo = string.concat(fullConvo, lastMessage);

        viewMessages.push(fullConvo);
        return fullMessage;
    } 
}

contract ConversationFactory{

    event newConversationMade(address creator, address recipient, address theContract);
    address owner;
    constructor(){
        owner = msg.sender;
    }

    address[] convoList;

    mapping(Conversation => address) convoToAddress;

    function newConversation(address recipient) public returns (address){
        Conversation newConvo = new Conversation(recipient);

        convoList.push(address(newConvo));
        emit newConversationMade(msg.sender, recipient, address(newConvo));
        return address(newConvo);

    } 

   
}