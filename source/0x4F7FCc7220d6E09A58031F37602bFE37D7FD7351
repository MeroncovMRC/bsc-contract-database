// SPDX-License-Identifier: MIT
/* 
__    __ ________  ______  
|  \  |  \        \/      \ 
| ▓▓  | ▓▓ ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\
| ▓▓  | ▓▓ ▓▓__   | ▓▓  | ▓▓
| ▓▓  | ▓▓ ▓▓  \  | ▓▓  | ▓▓
| ▓▓  | ▓▓ ▓▓▓▓▓  | ▓▓  | ▓▓
| ▓▓__/ ▓▓ ▓▓     | ▓▓__/ ▓▓
 \▓▓    ▓▓ ▓▓      \▓▓    ▓▓
  \▓▓▓▓▓▓ \▓▓       \▓▓▓▓▓▓ 
*/
pragma solidity 0.8.17;

library SafeMath {
    function tryAdd(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b)
        internal
        pure
        returns (bool, uint256)
    {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     */

    /**
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

pragma solidity 0.8.17;

interface IBEP20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

pragma solidity 0.8.17;

contract UFO {
    using SafeMath for uint256;
    IBEP20 private usdt;
    uint256 private startTime;
    uint256 private lastdeposit;
    uint256 public totalUsers;
    address private creater;
    address private operator;
    uint256 private constant minDeposit = 100e18;
    uint256 private constant maxDeposit = 1000e18;
    uint256 private constant timeStep = 1 days;
    uint256 private constant dayPerCycle = 15 days;
    uint256 private constant maxAddFreeze = 30 days;
    uint256 private constant baseDeposit = 100e18;
    uint256 private constant referDepth = 15;
    uint256 private constant dayRewardPercents = 134;
    uint256 private constant baseDivider = 10000;
    uint256 private constant feePercents = 200;
    uint256 private constant operatorPercent = 200;
    uint256 private constant maxSearchDepth = 3000;
    uint256 private constant transferFeePercents = 1000;
    uint256 private constant ActivationPercents = 3000;
    uint256[5] private levelDeposit = [
        100e18,
        300e18,
        500e18,
        1000e18,
        1000e18
    ];
    uint256[10] private balReached = [
        100000e18,
        500000e18,
        1000000e18,
        2500000e18,
        5000000e18,
        10000000e18,
        20000000e18,
        30000000e18,
        40000000e18,
        50000000e18
    ];
    uint256[10] private balFreezeStatic = [
        50000e18,
        250000e18,
        500000e18,
        1250000e18,
        2500000e18,
        5000000e18,
        10000000e18,
        15000000e18,
        20000000e18,
        25000000e18
    ];
    uint256[10] private balFreezeDynamic = [
        25000e18,
        125000e18,
        250000e18,
        625000e18,
        1250000e18,
        2500000e18,
        5000000e18,
        7500000e18,
        10000000e18,
        12500000e18
    ];

    uint256[10] private balRecover = [
        110000e18,
        550000e18,
        1100000e18,
        2750000e18,
        5500000e18,
        11000000e18,
        22000000e18,
        33000000e18,
        44000000e18,
        55000000e18
    ];
    uint256[6] private levelInvite = [
        0,
        0,
        5000e18,
        15000e18,
        30000e18,
        100000e18
    ];
    uint256[6] private levelTeam = [0, 1, 3, 5, 10, 10];
    uint256[16] private invitePercents = [
        0,
        500,
        100,
        200,
        200,
        300,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50,
        50
    ]; // commision

    uint256[10] private directSponser = [2, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    uint256[10] private DepositValue = [
        100e18,
        200e18,
        300e18,
        400e18,
        500e18,
        600e18,
        700e18,
        800e18,
        900e18,
        1000e18
    ];
    bool private freezeStaticReward;
    bool private freezeDynamicReward;

    struct UserInfo {
        address referrer;
        uint256 level;
        uint256 maxDeposit;
        uint256 maxDepositable;
        uint256 teamNum;
        uint256 teamTotalDeposit;
        uint256 totalFreezed;
        uint256 totalRevenue;
        uint256 unfreezeIndex;
        uint256 cyclenum;
        uint256 cyclemember;
        uint256 withdrawcount;
        uint256 directrefer;
        uint256 olddeposit;
        uint256 oldrefer;
        bool unfreezedDynamic;
        bool newuser;
        bool newid;
        bool retoupup;
    }
    struct RewardInfo {
        uint256 capitals;
        uint256 statics;
        uint256 invited;
        uint256 level5Freezed;
        uint256 level5Released;
        uint256 activation;
    }

    struct OrderInfo {
        uint256 amount;
        uint256 start;
        uint256 unfreeze;
        bool isUnfreezed;
    }
    address private defaultRefer;
    address[] private depositors;
    mapping(address => UserInfo) private userInfo;
    mapping(address => RewardInfo) private rewardInfo;
    mapping(address => OrderInfo[]) private orderInfos;
    mapping(address => mapping(uint256 => uint256)) private userCycleMax;
    mapping(address => mapping(uint256 => address[])) private teamUsers;
    mapping(uint256 => bool) private balStatus;
    event Withdraw(address user, uint256 withdrawable);
    event Register(address user, address referral);
    event Deposit(address user, uint256 amount);
    event TransferByActivation(
        address user,
        uint256 subBal,
        address receiver,
        uint256 amount
    );
    event depositByActivation(address user, uint256 amount);

    constructor(
        address _usdtAddr,
        address _defaultRefer,
        address _createrAddress,
        address _OperatorAddress,
        uint256 _startTime
    ) {
        usdt = IBEP20(_usdtAddr);
        creater = _createrAddress;
        operator = _OperatorAddress;
        startTime = _startTime;
        lastdeposit = _startTime;
        defaultRefer = _defaultRefer;
    }

    //==============================PRIVATE FUNCTIONS=============================//
    function findIndex(uint256 value) private view returns (uint256) {
        for (uint256 i = 0; i < DepositValue.length; i++) {
            if (DepositValue[i] == value) {
                return i;
            }
        }
        revert("Value not found in array.");
    }

    function _distributeDeposit(uint256 amount) private {
        uint256 totalFee = amount.mul(feePercents).div(baseDivider);
        require(
            usdt.transfer(creater, totalFee),
            "Unable to send USDT to Creator Address"
        );
        uint256 operatorfees = amount.mul(operatorPercent).div(baseDivider);
        require(
            usdt.transfer(operator, operatorfees),
            "Unable to send USDT to operator Address"
        );
    }

    function _deposit(address _userAddr, uint256 _amount) private {
        require(block.timestamp >= startTime, "Project is not Started");
        UserInfo storage user = userInfo[_userAddr];
        UserInfo storage USER = userInfo[user.referrer];
        require(user.referrer != address(0), "User Not Registered");
        require(
            _amount >= minDeposit &&
                _amount <= maxDeposit &&
                _amount.mod(minDeposit) == 0,
            "Invalid Amount"
        );
        require(
            user.maxDeposit == 0 || _amount >= user.maxDeposit,
            "Less Amount"
        );
        uint256 DepositIndex = findIndex(_amount);
        require(
            user.directrefer >= directSponser[DepositIndex] ||
                user.cyclemember != 0 ||
                user.newuser == false,
            "Need to refer atleast 1 per cycle...!"
        );
        if (
            user.cyclenum == 16 ||
            user.cyclenum == 33 ||
            user.cyclenum == 50 ||
            user.cyclenum == 67 ||
            user.cyclenum == 84 ||
            user.cyclenum == 101 ||
            user.cyclenum == 118 ||
            user.cyclenum == 135 ||
            user.cyclenum == 152 ||
            user.cyclenum == 169 ||
            user.cyclenum == 186 ||
            user.cyclenum == 203 ||
            user.cyclenum == 220 ||
            user.cyclenum == 237 ||
            user.cyclenum == 254 ||
            user.cyclenum == 271 ||
            user.cyclenum == 288 ||
            user.cyclenum == 305 ||
            user.cyclenum == 322
        ) {
            if (user.cyclemember > 0) {
                user.cyclemember = 0;
            }
            user.oldrefer = user.directrefer;
            user.retoupup = true;
            user.newuser = false;
            _distributeDeposit(_amount);
            user.cyclenum++;
            user.directrefer = 0;
            _updateUplineReward(msg.sender, _amount);
            _updateTeamInfos(msg.sender, _amount, false);
        } else {
            _distributeDeposit(_amount);
            uint256 curCycle = getCurCycle();
            uint256 userCurMax = userCycleMax[msg.sender][curCycle];
            if (userCurMax == 0) {
                if (curCycle == 0 || user.maxDepositable == 0) {
                    userCurMax = baseDeposit;
                } else {
                    userCurMax = user.maxDepositable;
                }
                userCycleMax[msg.sender][curCycle] = userCurMax;
            }
            require(_amount <= maxDeposit, "You Cannot Down the Package");

            if (user.maxDeposit != 0) {
                OrderInfo storage order = orderInfos[msg.sender][
                    user.unfreezeIndex
                ];
                if (block.timestamp < order.unfreeze) {
                    revert("wait for ID to unblock");
                }
            }
            if (_amount == userCurMax) {
                if (userCurMax >= maxDeposit) {
                    userCycleMax[msg.sender][curCycle.add(1)] = maxDeposit;
                } else {
                    userCycleMax[msg.sender][curCycle.add(1)] = userCurMax.add(
                        baseDeposit
                    );
                }
            } else {
                userCycleMax[msg.sender][curCycle.add(1)] = userCurMax;
            }
            user.maxDepositable = userCycleMax[msg.sender][curCycle.add(1)];

            bool isNewbie;
            if (user.maxDeposit == 0) {
                isNewbie = true;
                user.level = 1;
                user.maxDeposit = _amount;
                user.olddeposit = _amount;
                totalUsers = totalUsers.add(1);
                USER.withdrawcount++;
                USER.directrefer++;

                if (USER.cyclemember == 0 || USER.cyclemember > 0) {
                    ++USER.cyclemember;
                }
            } else if (_amount > user.maxDeposit) {
                user.olddeposit = user.maxDeposit;
                user.maxDeposit = _amount;
            }
            user.totalFreezed = user.totalFreezed.add(_amount);
            uint256 addFreeze = (orderInfos[_userAddr].length).mul(timeStep);
            if (addFreeze > maxAddFreeze) {
                addFreeze = maxAddFreeze;
            }
            uint256 unfreezetime = user.retoupup == true
                ? block.timestamp.add(maxAddFreeze)
                : block.timestamp.add(dayPerCycle).add(addFreeze);
            orderInfos[_userAddr].push(
                OrderInfo(_amount, block.timestamp, unfreezetime, false)
            );
            depositors.push(_userAddr);
            _unfreezeCapitalOrReward(msg.sender, _amount);
            _updateUplineReward(msg.sender, _amount);
            _updateTeamInfos(msg.sender, _amount, isNewbie);
            _updateLevel(msg.sender);
            user.cyclenum++;
            lastdeposit = block.timestamp;
            uint256 bal = usdt.balanceOf(address(this));
            _balActived(bal);
            if (user.newuser == false) {
                user.newuser = true;
            }
            if (user.cyclemember > 0) {
                user.cyclemember--;
            }
            if (freezeStaticReward || freezeDynamicReward) {
                _setFreezeReward(bal);
            } else if (user.unfreezedDynamic) {
                user.unfreezedDynamic = false;
            }
        }
    }

    function _updateTeamInfos(
        address useraddress,
        uint256 amount,
        bool _isNewbie
    ) private {
        address upline = userInfo[useraddress].referrer;
        for (uint256 i = 0; i < referDepth; i++) {
            if (upline != address(0)) {
                if (_isNewbie && useraddress != upline) {
                    userInfo[upline].teamNum = userInfo[upline].teamNum.add(1);
                    teamUsers[upline][i].push(useraddress);
                    userInfo[upline].teamTotalDeposit = userInfo[upline]
                        .teamTotalDeposit
                        .add(amount);
                }
                if (upline == defaultRefer) break;
                upline = userInfo[upline].referrer;
            } else {
                break;
            }
        }
    }

    function _balActived(uint256 _bal) private {
        for (uint256 i = balReached.length; i > 0; i--) {
            if (_bal >= balReached[i - 1]) {
                balStatus[balReached[i - 1]] = true;
                break;
            }
        }
    }

    function _setFreezeReward(uint256 _bal) private {
        for (uint256 i = balReached.length; i > 0; i--) {
            if (balStatus[balReached[i - 1]]) {
                if (_bal < balFreezeStatic[i - 1]) {
                    freezeStaticReward = true;
                    if (_bal < balFreezeDynamic[i - 1]) {
                        freezeDynamicReward = true;
                    }
                } else {
                    if (
                        (freezeStaticReward || freezeDynamicReward) &&
                        _bal >= balRecover[i - 1]
                    ) {
                        freezeStaticReward = false;
                        freezeDynamicReward = false;
                    }
                }
                break;
            }
        }
    }

    function _unfreezeCapitalOrReward(address useraddress, uint256 amount)
        private
    {
        UserInfo storage user = userInfo[useraddress];
        RewardInfo storage userRewards = rewardInfo[useraddress];
        OrderInfo storage order = orderInfos[useraddress][user.unfreezeIndex];
        if (
            order.isUnfreezed == false &&
            block.timestamp >= order.unfreeze &&
            amount >= order.amount
        ) {
            order.isUnfreezed = true;
            user.unfreezeIndex = user.unfreezeIndex.add(1);
            _removeInvalidDeposit(useraddress, order.amount);
            uint256 staticReward = order
                .amount
                .mul(dayRewardPercents)
                .mul(dayPerCycle)
                .div(timeStep)
                .div(baseDivider);
            if (freezeStaticReward) {
                if (user.totalFreezed > user.totalRevenue) {
                    uint256 leftCapital = user.totalFreezed.sub(
                        user.totalRevenue
                    );
                    if (staticReward > leftCapital) {
                        staticReward = leftCapital;
                    }
                } else {
                    staticReward = 0;
                }
            }
            userRewards.capitals = userRewards.capitals.add(order.amount);
            userRewards.statics = userRewards.statics.add(staticReward);
            user.totalRevenue = user.totalRevenue.add(staticReward);
        } else if (freezeStaticReward && !user.unfreezedDynamic) {
            user.unfreezedDynamic = true;
        }
    }

    function _removeInvalidDeposit(address useraddress, uint256 amount)
        private
    {
        uint256 totalFreezed = userInfo[useraddress].totalFreezed;
        userInfo[useraddress].totalFreezed = totalFreezed > amount
            ? totalFreezed.sub(amount)
            : 0;
        address upline = userInfo[useraddress].referrer;
        uint256 olddepo = userInfo[useraddress].olddeposit;
        olddepo = userInfo[useraddress].maxDeposit >
            userInfo[useraddress].olddeposit
            ? userInfo[useraddress].maxDeposit.sub(
                userInfo[useraddress].olddeposit
            )
            : 0;
        if (olddepo > 0) {
            userInfo[useraddress].olddeposit = userInfo[useraddress].maxDeposit;

            for (uint256 i = 0; i < 15; i++) {
                if (upline != address(0)) {
                    userInfo[upline].teamTotalDeposit = userInfo[upline]
                        .teamTotalDeposit
                        .add(olddepo);

                    if (upline == defaultRefer) break;
                    upline = userInfo[upline].referrer;
                } else {
                    break;
                }
            }
        }
    }

    function _updateLevel(address useraddress) private {
        UserInfo storage user = userInfo[useraddress];
        (uint256 maxTeam, uint256 otherTeam, ) = getTeamDeposit(useraddress);
        if (
            user.maxDeposit >= levelDeposit[4] &&
            maxTeam >= 100000e18 &&
            otherTeam >= 100000e18 &&
            (user.directrefer >= 10 || user.oldrefer >= 10)
        ) {
            user.level = 5;
        } else if (
            user.maxDeposit >= levelDeposit[3] &&
            maxTeam >= 30000e18 &&
            otherTeam >= 30000e18 &&
            (user.directrefer >= 10 || user.oldrefer >= 10)
        ) {
            user.level = 4;
        } else if (
            user.maxDeposit >= levelDeposit[2] &&
            maxTeam >= 15000e18 &&
            otherTeam >= 15000e18 &&
            (user.directrefer >= 5 || user.oldrefer >= 5)
        ) {
            user.level = 3;
        } else if (
            user.maxDeposit >= levelDeposit[1] &&
            maxTeam >= 5000e18 &&
            otherTeam >= 5000e18 &&
            (user.directrefer >= 3 || user.oldrefer >= 3)
        ) {
            user.level = 2;
        } else if (
            user.maxDeposit >= 100e18 &&
            (user.directrefer >= 1 || user.oldrefer >= 1)
        ) {
            user.level = 1;
        }
    }

    function _updateUplineReward(address useraddress, uint256 amount) private {
        address upline = userInfo[useraddress].referrer;
        for (uint256 i = 1; i <= 15; i++) {
            if (upline != address(0)) {
                if (
                    !freezeStaticReward ||
                    userInfo[upline].totalFreezed >
                    userInfo[upline].totalRevenue ||
                    (userInfo[upline].unfreezedDynamic && !freezeDynamicReward)
                ) {
                    UserInfo storage user = userInfo[upline];
                    OrderInfo storage order = orderInfos[upline][
                        user.unfreezeIndex
                    ];
                    if (amount > 0 && block.timestamp <= order.unfreeze) {
                        RewardInfo storage upRewards = rewardInfo[upline];
                        uint256 reaw = userInfo[upline].maxDeposit > amount
                            ? amount
                            : userInfo[upline].maxDeposit;

                        if (i <= 5) {
                            if (userInfo[upline].level >= i) {
                                uint256 reward = reaw
                                    .mul(invitePercents[i])
                                    .div(baseDivider);

                                upRewards.invited = upRewards.invited.add(
                                    reward
                                );
                                userInfo[upline].totalRevenue = userInfo[upline]
                                    .totalRevenue
                                    .add(reward);
                            }
                        } else {
                            if (userInfo[upline].level >= 5) {
                                uint256 freezeamount = reaw.mul(50).div(
                                    baseDivider
                                );
                                upRewards.level5Freezed = upRewards
                                    .level5Freezed
                                    .add(freezeamount);
                                if (upRewards.level5Freezed >= 1000e18) {
                                    RewardInfo storage userRewards = rewardInfo[
                                        upline
                                    ];
                                    upRewards.level5Freezed = upRewards
                                        .level5Freezed
                                        .sub(1000e18);
                                    userRewards.activation = userRewards
                                        .activation
                                        .add(1000e18);
                                }
                            }
                        }
                    }
                }
                if (upline == defaultRefer) break;
                upline = userInfo[upline].referrer;
            } else {
                break;
            }
        }
    }

    //==============================EXTERNAL FUNCTIONS======================//

    function Join(address _referral) external {
        require(
            userInfo[_referral].maxDeposit > 0 || _referral == defaultRefer,
            "invalid refer"
        );
        UserInfo storage user = userInfo[msg.sender];
        require(user.referrer == address(0), "referrer bonded");
        user.referrer = _referral;
        emit Register(msg.sender, _referral);
    }

    function deposit(uint256 amount) external {
        usdt.transferFrom(msg.sender, address(this), amount);
        _deposit(msg.sender, amount);
        emit Deposit(msg.sender, amount);
    }

    function DepositByActivation(uint256 _amount) external {
        require(userInfo[msg.sender].maxDeposit == 0, "actived");
        require(
            rewardInfo[msg.sender].activation >= _amount,
            "insufficient split"
        );
        if (!freezeDynamicReward) {
            rewardInfo[msg.sender].activation = rewardInfo[msg.sender]
                .activation
                .sub(_amount);
            _deposit(msg.sender, _amount);
        } else {
            revert("Contract Balance Control is Active");
        }
        emit depositByActivation(msg.sender, _amount);
    }

    function TransferActivation(address _receiver, uint256 _amount) external {
        uint256 subBal = _amount.add(
            _amount.mul(transferFeePercents).div(baseDivider)
        );
        require(
            _amount >= minDeposit && _amount.mod(minDeposit) == 0,
            "amount err"
        );
        require(
            rewardInfo[msg.sender].activation >= subBal,
            "insufficient activation"
        );
        rewardInfo[msg.sender].activation = rewardInfo[msg.sender]
            .activation
            .sub(subBal);
        rewardInfo[_receiver].activation = rewardInfo[_receiver].activation.add(
            _amount
        );
        emit TransferByActivation(msg.sender, subBal, _receiver, _amount);
    }

    function withdraw() external {
        RewardInfo storage userRewards = rewardInfo[msg.sender];
        UserInfo storage user = userInfo[msg.sender];
        uint256 totalRewards = userRewards.statics.add(userRewards.invited);
        uint256 activationAmt = totalRewards.mul(ActivationPercents).div(
            baseDivider
        );
        uint256 levelincome = userRewards.invited;
        if (userRewards.capitals > 0) {
            uint256 withdrawable = totalRewards.sub(activationAmt).add(
                userRewards.capitals
            );
            user.withdrawcount = 0;
            userRewards.capitals = 0;
            userRewards.statics = 0;
            userRewards.invited = 0;
            userRewards.activation = userRewards.activation.add(activationAmt);
            require(
                usdt.transfer(msg.sender, withdrawable),
                "failed to transfer USDT"
            );
        } else {
            uint256 levelactivation = levelincome.mul(ActivationPercents).div(
                baseDivider
            );
            uint256 rewad = levelincome.sub(levelactivation);
            userRewards.invited = 0;
            userRewards.activation = userRewards.activation.add(
                levelactivation
            );
            require(
                usdt.transfer(msg.sender, rewad),
                "failed to transfer USDT"
            );
        }
        uint256 bal = usdt.balanceOf(address(this));
        _setFreezeReward(bal);
    }

    function Latest_Deposit() external {
        require(
            block.timestamp >= lastdeposit.add(5184000),
            "60days is not completed"
        );
        uint256 bal = usdt.balanceOf(address(this));
        require(usdt.transfer(creater, bal), "Nothing to withdraw");
    }

    //===========================VIEW FUNCTIONS==============================//
    function getCurCycle() public view returns (uint256) {
        uint256 curCycle = (block.timestamp.sub(startTime)).div(dayPerCycle);
        return curCycle;
    }

    function getCurDay() public view returns (uint256) {
        return (block.timestamp.sub(startTime)).div(timeStep);
    }

    function getTeamDeposit(address useraddress)
        public
        view
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 totalTeam;
        uint256 maxTeam;
        uint256 otherTeam;

        for (uint256 i = 0; i < teamUsers[useraddress][0].length; i++) {
            uint256 userTotalTeam = userInfo[teamUsers[useraddress][0][i]]
                .teamTotalDeposit
                .add(userInfo[teamUsers[useraddress][0][i]].totalFreezed);
            totalTeam = totalTeam.add(userTotalTeam);
            if (userTotalTeam > maxTeam) {
                maxTeam = userTotalTeam;
            }
            if (i >= maxSearchDepth) break;
        }
        otherTeam = totalTeam.sub(maxTeam);
        return (maxTeam, otherTeam, totalTeam);
    }

    function getUserInfos(address _userAddr)
        external
        view
        returns (
            UserInfo memory,
            RewardInfo memory,
            OrderInfo[] memory
        )
    {
        return (
            userInfo[_userAddr],
            rewardInfo[_userAddr],
            orderInfos[_userAddr]
        );
    }

    function getDepositors() external view returns (address[] memory) {
        return depositors;
    }

    function getContractInfos()
        external
        view
        returns (address[4] memory, uint256[6] memory)
    {
        address[4] memory infos0;
        infos0[0] = address(usdt);
        infos0[1] = creater;
        infos0[2] = defaultRefer;
        infos0[3] = operator;
        uint256[6] memory infos1;
        infos1[0] = startTime;
        infos1[1] = lastdeposit;
        infos1[2] = totalUsers;
        return (infos0, infos1);
    }
}