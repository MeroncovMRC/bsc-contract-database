// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPancakeRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external payable returns (
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );
}

interface IPancakeFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract DwarfViking {
    string public name = "Dwarf Viking";
    string public symbol = "DWRF";
    uint256 public totalSupply = 1000000 * 10**9;
    uint8 public decimals = 9;
    uint256 private _maxWalletPercent = 5;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    address private _owner;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function.");
        _;
    }

    constructor() {
        _owner = msg.sender;
        _balances[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedValue, "Decreased allowance below zero");
        _approve(msg.sender, spender, currentAllowance - subtractedValue);
        return true;
    }

    function renounceOwnership() external onlyOwner {
        _owner = address(0);
    }

    function setMaxWalletPercent(uint256 percent) external onlyOwner {
        require(percent <= 100, "Max wallet percentage must be <= 100");
        _maxWalletPercent = percent;
    }

    function addLiquidity() external payable {
        require(msg.value > 0, "Insufficient ETH");

        uint256 contractTokenBalance = _balances[address(this)];
        require(contractTokenBalance > 0, "Contract token balance is zero");

        address pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        address pancakeFactoryAddress = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;

        IPancakeRouter pancakeRouter = IPancakeRouter(pancakeRouterAddress);
        IPancakeFactory pancakeFactory = IPancakeFactory(pancakeFactoryAddress);

        // Create a PancakeSwap pair for the token
        pancakeFactory.createPair(address(this), pancakeRouter.WETH());

        // Approve token transfer to the PancakeSwap Router
        _approve(address(this), pancakeRouterAddress, contractTokenBalance);

        // Add liquidity
        pancakeRouter.addLiquidityETH{value: msg.value}(
            address(this),
            contractTokenBalance,
            0,
            0,
            address(this),
            block.timestamp
        );

        // Transfer remaining tokens to the contract owner
        uint256 remainingTokenBalance = _balances[address(this)];
        if (remainingTokenBalance > 0) {
            _transfer(address(this), _owner, remainingTokenBalance);
        }
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "Transfer amount exceeds balance");

        if (sender != _owner) {
            require(amount <= _maxWalletPercent * totalSupply / 100, "Transfer amount exceeds max wallet percentage");
        }

        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}