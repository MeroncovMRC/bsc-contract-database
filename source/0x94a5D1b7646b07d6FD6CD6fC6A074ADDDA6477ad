// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;


contract Router  {
    address                                           public usdt = 0x55d398326f99059fF775485246999027B3197955;
    address                                           public  tmd = 0x0f27d12182f7f4D879d267B31BD02dd27086e7Ce;
    address                                           public  tmt = 0x0C3bE46AF643AE51c42dD67A4a8CcA0722B54f39;
    uint public rate1 = 100;
    uint public rate2 = 10000;

    mapping (address => uint) public wards;
    function rely(address usr) external  auth { wards[usr] = 1; }
    function deny(address usr) external  auth { wards[usr] = 0; }
    modifier auth {
        require(wards[msg.sender] == 1, "Router/not-authorized");
        _;
    }
    constructor() {
        wards[msg.sender] = 1;
    }
    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts){
        uint length = path.length;
        amounts = new uint[](length);
        uint outAmount;
        if(path[1] == usdt) outAmount = amountIn*rate1/10000;
        else if(path[1] == tmd) outAmount = amountIn*10000/rate2;
        else if(path[1] == tmt) outAmount = amountIn*10000/rate1;
        amounts[0] = amountIn;
        amounts[1] = outAmount;
    }
    function set1(uint _rate1) public auth{
        rate1 = _rate1;
    }
    function set2(uint _rate2) public auth{
        rate2 = _rate2;
    }
}