pragma solidity ^0.8.0;

// SPDX-License-Identifier: MIT

abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        _status = _NOT_ENTERED;
    }

    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

library Counters {
    struct Counter {
        uint256 _value;
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library SafeMath {

    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

contract StakerrrApp {
    using SafeMath for uint256;

    IERC20 public stakingToken;
    uint256 public constant APY = 15;
    uint256 public blockReward;
    uint256 public constant BLOCKS_PER_YEAR = 10512000;
    uint256 public constant UNSTAKING_FEE = 3;
    uint256 public totalStakers;
    uint256 public totalStaked;
    uint256 public totalRewards;
    address public owner;

    mapping(address => bool) public hasStaked; 
    mapping(address => uint256) public stakingBalances;
    mapping(address => uint256) public lastRewardBlock;

    event Staked(address indexed user, uint256 amount, uint256 timestamp);
    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);
    event RewardClaimed(address indexed user, uint256 reward, uint256 timestamp);

    constructor(IERC20 _stakingToken) {
        stakingToken = _stakingToken;
        owner = msg.sender;
        blockReward = APY.mul(1e18).div(BLOCKS_PER_YEAR);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function stake(uint256 _amount) external {
        require(_amount > 0, "Amount should be greater than 0");
        require(stakingToken.balanceOf(msg.sender) >= _amount, "Insufficient token balance");

        if(hasStaked[msg.sender]) {
            uint256 reward = calculateReward(msg.sender);
            stakingToken.transfer(msg.sender, reward);
            totalRewards = totalRewards.add(reward);
        }

        stakingToken.transferFrom(msg.sender, address(this), _amount);
        stakingBalances[msg.sender] = stakingBalances[msg.sender].add(_amount);
        totalStaked = totalStaked.add(_amount);
        lastRewardBlock[msg.sender] = block.number;

        if(!hasStaked[msg.sender]){
            totalStakers = totalStakers.add(1);
            hasStaked[msg.sender] = true;
        }

        emit Staked(msg.sender, _amount, block.timestamp);
    }

    function unstake(uint256 _amount) external {
        require(stakingBalances[msg.sender] >= _amount, "Insufficient staking balance");

        uint256 reward = calculateReward(msg.sender);
        stakingToken.transfer(msg.sender, reward);
        totalRewards = totalRewards.add(reward);

        uint256 fee = _amount.mul(UNSTAKING_FEE).div(100);
        uint256 unstakeAmount = _amount.sub(fee);
        stakingBalances[msg.sender] = stakingBalances[msg.sender].sub(unstakeAmount);
        totalStaked = totalStaked.sub(unstakeAmount);
        stakingToken.transfer(msg.sender, unstakeAmount);
        lastRewardBlock[msg.sender] = block.number;

        if(stakingBalances[msg.sender] == 0){
            totalStakers = totalStakers.sub(1);
            hasStaked[msg.sender] = false;
        }

        emit Unstaked(msg.sender, _amount, block.timestamp);
    }

    function claimReward() public {
        uint256 reward = calculateReward(msg.sender);
        require(reward > 0, "No rewards available");
        stakingToken.transfer(msg.sender, reward);
        totalRewards = totalRewards.add(reward);
        lastRewardBlock[msg.sender] = block.number;
    }

    function calculateReward(address _user) public view returns (uint256) {
        uint256 blockCount = block.number.sub(lastRewardBlock[_user]);
        uint256 reward = stakingBalances[_user].mul(blockReward).mul(blockCount).div(1e18);
        return reward;
    }

    function getStakingBalance(address _user) external view returns (uint256) {
        return stakingBalances[_user];
    }

    function getRewardBalance(address _user) external view returns (uint256) {
        return calculateReward(_user);
    }

    function emergencyWithdraw() external onlyOwner {
        uint256 contractBalance = stakingToken.balanceOf(address(this));
        stakingToken.transfer(owner, contractBalance);
    }

    function getTotalStakers() external view returns (uint256) {
        return totalStakers;
    }

    function getTotalStaked() external view returns (uint256) {
        return totalStaked;
    }
}