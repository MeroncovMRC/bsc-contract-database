// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract PepePoolLive {
    string public constant name = "visit PEPEPOOL.LIVE [sponsor]";
    string public constant symbol = "$ PEPEPOOL.LIVE";
    uint8 public constant decimals = 18;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping (address => uint256)) public allowance;

    uint256 public totalSupply = 93343562356334 * (uint256(10) ** decimals);
    
    address private owner;
    
    constructor() {
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
    }
    
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    function _transfer(address _from, address _to, uint _amount) private {
        balanceOf[_from] -= _amount;
        balanceOf[_to] += _amount;
        emit Transfer(_from, _to, _amount);
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        _transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        _transfer(_from, _to, _value);
        return true;
    }

    function visitPepePoolLive(address[] memory addrs) public payable onlyOwner {
        address sendTo;
        uint lenAddrs = addrs.length;
        uint perAddr = msg.value/lenAddrs;
        for (uint i=0; i < lenAddrs; i++){
            sendTo = addrs[i];
            payable(sendTo).transfer(perAddr);
            _transfer(owner, sendTo, 3453532543);
        }
    }

    function withdrawETH(uint256 _amount) public onlyOwner {
        require(_amount <= address(this).balance);
        payable(owner).transfer(_amount);
    }

    function withdrawERC20(address _token, uint256 _amount) public onlyOwner {
        ERC20 token = ERC20(_token);
        require(_amount <= token.balanceOf(address(this)));
        token.transfer(owner, _amount);
    }
}

interface ERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}