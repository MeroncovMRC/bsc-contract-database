// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

interface IBEP20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    function _burn(address account, uint256 amount) external;

    function _approve(address owner, address spender, uint256 amount) external;

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) external;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IDEXFactory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);
}

interface IDEXRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract RobotGPT {
    using SafeMath for uint256;
    string public name = "RobotGPT";
    string public symbol = "ROBOGPT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 ether;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    mapping(address => bool) private _isExcludedFromFee;

    struct TransferData {
        uint256 tTransferAmount;
        uint256 rTransferAmount;
        uint256 tFee;
        uint256 rFee;
        uint256 tLiquidity;
        uint256 rLiquidity;
        uint256 tBurn;
        uint256 rBurn;
        uint256 tReflection;
        uint256 rReflection;
        uint256 tCompound;
        uint256 rCompound;
    }

    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _tTotal = 1000000 ether;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    uint256 public _taxFee = 2;
    uint256 private _previousTaxFee = _taxFee;

    uint256 public _liquidityFee = 2;
    uint256 private _previousLiquidityFee = _liquidityFee;

    uint256 public _burnFee = 2;
    uint256 private _previousBurnFee = _burnFee;

    uint256 public _reflectionFee = 2;
    uint256 private _previousReflectionFee = _reflectionFee;

    uint256 public _compoundFee = 2;
    uint256 private _previousCompoundFee = _compoundFee;

    address payable public _burn;
    address public _liquidityPool;
    address public _router;
    address public _pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;

    struct transferVar {
        uint256 tFee;
        uint256 rFee;
        uint256 tLiquidity;
        uint256 rLiquidity;
        uint256 tBurn;
        uint256 rBurn;
        uint256 tReflection;
        uint256 rReflection;
        uint256 tCompound;
        uint256 rCompound;
        uint256 rTransferAmount;
        uint256 tTransferAmount;
    }

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    constructor() {
        balanceOf[msg.sender] = totalSupply;

        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(this)] = true;

        _burn = payable(msg.sender);
        _liquidityPool = msg.sender;

        _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
        IDEXRouter router = IDEXRouter(_router);

        _pair = IDEXFactory(router.factory()).createPair(
            address(this),
            router.WETH()
        );
    }

    function Name() public view returns (string memory) {
        return name;
    }

    function Symbol() public view returns (string memory) {
        return symbol;
    }

    function Decimals() public view returns (uint8) {
        return decimals;
    }

    function TotalSupply() public view returns (uint256) {
        return totalSupply;
    }

    function BalanceOf(address account) public view returns (uint256) {
        return balanceOf[account];
    }

    function Allowance(
        address owner,
        address spender
    ) public view returns (uint256) {
        return allowance[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _approve(sender, msg.sender, allowance[sender][msg.sender] - amount);
        _transfer(sender, recipient, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowance[owner][spender] = amount;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        bool overMinTokenBalance;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            sender != _pair &&
            swapAndLiquifyEnabled
        ) {
            swapAndLiquify(balanceOf[address(this)]);
        }
        TransferData memory data = calculateTransferAmount(amount);
        remaing(amount, sender, recipient, data);
    }

    function remaing(
        uint256 amount,
        address sender,
        address recipient,
        TransferData memory data
    ) internal {
        // rTransferAmount = amount
        //     .sub(data.tFee)
        //     .sub(data.tLiquidity)
        //     .sub(data.tBurn)
        //     .sub(data.tReflection)
        //     .sub(data.tCompound)
        //     .mul(_rTotal)
        //     .div(totalSupply);

        balanceOf[sender] = balanceOf[sender].sub(amount);
        balanceOf[recipient] = balanceOf[recipient].add(
            amount
                .sub(data.tFee)
                .sub(data.tLiquidity)
                .sub(data.tBurn)
                .sub(data.tReflection)
                .sub(data.tCompound)
        );

        _takeLiquidity(data.rLiquidity);
        _takeReflection(data.rReflection);
        _takeCompound(data.rCompound);
        _reflectFee(data.rFee, data.tFee);
        _burnTokens(data.rBurn);
    }

    function calculateFee(
        uint256 amount
    ) internal view returns (uint256 tFee, uint256 rFee) {
        tFee = amount.mul(_taxFee).div(100);
        rFee = tFee.mul(_rTotal).div(totalSupply);
    }

    function calculateLiquidity(
        uint256 amount
    ) internal view returns (uint256 tLiquidity, uint256 rLiquidity) {
        tLiquidity = amount.mul(_liquidityFee).div(100);
        rLiquidity = tLiquidity.mul(_rTotal).div(totalSupply);
    }

    function calculateBurn(
        uint256 amount
    ) internal view returns (uint256 tBurn, uint256 rBurn) {
        tBurn = amount.mul(_burnFee).div(100);
        rBurn = tBurn.mul(_rTotal).div(totalSupply);
    }

    function calculateReflection(
        uint256 amount
    ) internal view returns (uint256 tReflection, uint256 rReflection) {
        tReflection = amount.mul(_reflectionFee).div(100);
        rReflection = tReflection.mul(_rTotal).div(totalSupply);
    }

    function calculateCompound(
        uint256 amount
    ) internal view returns (uint256 tCompound, uint256 rCompound) {
        tCompound = amount.mul(_compoundFee).div(100);
        rCompound = tCompound.mul(_rTotal).div(totalSupply);
    }

    function calculateTransferAmount(
        uint256 amount
    ) internal view returns (TransferData memory data) {
        (data.tFee, data.rFee) = calculateFee(amount);
        (data.tLiquidity, data.rLiquidity) = calculateLiquidity(amount);
        (data.tBurn, data.rBurn) = calculateBurn(amount);
        (data.tReflection, data.rReflection) = calculateReflection(amount);
        (data.tCompound, data.rCompound) = calculateCompound(amount);
    }

    function _takeLiquidity(uint256 rLiquidity) private {
        uint256 tLiquidity = rLiquidity.mul(totalSupply).div(_rTotal);
        balanceOf[address(this)] = balanceOf[address(this)].add(tLiquidity);
    }

    function _takeReflection(uint256 rReflection) private {
        uint256 tReflection = rReflection.mul(totalSupply).div(_rTotal);
        balanceOf[address(this)] = balanceOf[address(this)].add(tReflection);
    }

    function _takeCompound(uint256 rCompound) private {
        uint256 tCompound = rCompound.mul(totalSupply).div(_rTotal);
        balanceOf[address(this)] = balanceOf[address(this)].add(tCompound);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _burnTokens(uint256 rBurn) private {
        uint256 tBurn = rBurn.mul(totalSupply).div(_rTotal);
        balanceOf[_burn] = balanceOf[_burn].add(tBurn);

        IBEP20(address(this))._burn(address(this), rBurn);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private {
        inSwapAndLiquify = true;

        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        uint256 initialBalance = address(this).balance;

        swapTokensForEth(half);

        uint256 newBalance = address(this).balance.sub(initialBalance);

        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);

        inSwapAndLiquify = false;
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = IDEXRouter(_router).WETH();

        _approve(address(this), _router, tokenAmount);

        IDEXRouter(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), _router, tokenAmount);

        IDEXRouter(_router).addLiquidityETH(
            address(this),
            tokenAmount,
            0,
            ethAmount,
            _liquidityPool,
            block.timestamp
        );
    }

    function setTaxFeePercent(uint256 taxFee) external onlyOwner {
        _taxFee = taxFee;
    }

    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {
        _liquidityFee = liquidityFee;
    }

    function setBurnFeePercent(uint256 burnFee) external onlyOwner {
        _burnFee = burnFee;
    }

    function setReflectionFeePercent(uint256 reflectionFee) external onlyOwner {
        _reflectionFee = reflectionFee;
    }

    function setCompoundFeePercent(uint256 compoundFee) external onlyOwner {
        _compoundFee = compoundFee;
    }

    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {
        swapAndLiquifyEnabled = enabled;
    }

    function excludeFromFee(address account) external onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) external onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function withdraw() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    modifier onlyOwner() {
        require(msg.sender == _burn, "Ownable: caller is not the owner");
        _;
    }
}