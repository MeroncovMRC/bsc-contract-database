// SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.10;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
 
contract ElonMars is Ownable {

    struct RoomDetail {
        address roomid;
        uint8 price;
        uint8 status;
    }

    event EvtRoomCreated(address indexed user, uint8 enterValue);
    event EvtJoinedRoom(address indexed user, uint8 enterValue);
    event EvtReceivedBattleReward(address indexed user, uint8 enterValue);

    IERC20 private busd;
    address public serverAddress = 0xAccEe92795919145843132a3E6c135f27c897C6E;
    address public busdTokenAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;


    RoomDetail[] public createdRoomList;
    mapping(address => uint32) private createdRoomId;
    uint256 public totalRoomCreationBalance;

    constructor() {
        busd = IERC20(busdTokenAddress);
        totalRoomCreationBalance = 0;
    }

    function createRoom(uint8 value) public payable { // 5, 10, 20, 30, 40, 50

        uint32 index = createdRoomId[msg.sender];
        require(index == 0, "You alraedy created the room");

        // IERC20(busdTokenAddress).approve(address(this), 10 ** 18 * count);
        IERC20(busdTokenAddress).transferFrom(msg.sender, address(this), 10 ** 18 * value);
        
        createdRoomList.push(RoomDetail(msg.sender, value, 0));
        createdRoomId[msg.sender] = uint32(createdRoomList.length);
    
        totalRoomCreationBalance += value;

        emit EvtRoomCreated(msg.sender, value);
    }

    function removeItem(uint index) public {

        address creator = createdRoomList[index].roomid;
        createdRoomId[creator] = 0;

        // Shift all elements down to overwrite the element at the specified index
        for (uint i = index; i < createdRoomList.length - 1; i++) {
            createdRoomList[i] = createdRoomList[i + 1];
        }
        createdRoomList.pop();
    }

    function removeCreatedRoom() public payable {

        uint32 index = createdRoomId[msg.sender];
        require(index != 0, "You didn't create any room");
        
        uint8 value = createdRoomList[index-1].price;

        if(createdRoomList[index-1].status == 0) {
            removeItem(index-1);

            busd.approve(msg.sender, 10 ** 18 * value);
            busd.transfer(msg.sender, 10 ** 18 * value);
            totalRoomCreationBalance -= value;
        }
    }
    
    function removeLeftRoom(address user) public {
        uint32 index = createdRoomId[user];

        require(index != 0, "User didn't create the room");
        require(msg.sender == serverAddress, "You are not server");
        
        uint8 value = createdRoomList[index-1].price;

        removeItem(index-1);

        totalRoomCreationBalance -= value;
    }

    function removeUsersRoom(address user) public onlyOwner {

        uint32 index = createdRoomId[user];
        require(index != 0, "User didn't create any room");
        
        uint8 value = createdRoomList[index-1].price;

        removeItem(index-1);

        totalRoomCreationBalance -= value;
    }

    function enterCreatedRoom(address constructorAddress) public payable {

        uint32 index = createdRoomId[constructorAddress];
        require(index != 0, "The room created by the constructor does not exist.");

        uint8 value = createdRoomList[index-1].price;
        busd.transferFrom(msg.sender, address(this), 10 ** 18 * value);

        createdRoomList[index - 1].status = 1; 

        emit EvtJoinedRoom(msg.sender, value);
    }

    function getRoomList() public view returns (RoomDetail[] memory) {
        return createdRoomList;
    }

    function sendReward(address user, address constructorAddress) public payable {
        
        uint32 index = createdRoomId[constructorAddress];
        require(index != 0, "This constructor didn't create the room");
        require(msg.sender == serverAddress, "You are not server");

        uint8 value = createdRoomList[index-1].price;
        busd.transfer(user, 16 * value * 10 ** 17);
        
        removeItem(index-1);

        emit EvtReceivedBattleReward(user, value);
    }

    function updateServerAddress(address _serverAddress) public onlyOwner {
        serverAddress = _serverAddress;
    }

    function withdrawToAdmin(address admin, bool force) public onlyOwner {
        uint256 balance = busd.balanceOf(address(this));
        if(!force) {
            require(balance > totalRoomCreationBalance * 10 ** 18, "Contract has no BUSD balance.");
            busd.transfer(admin, balance - totalRoomCreationBalance * 10 ** 18);
        } else {
            busd.transfer(admin, balance * 10 ** 18);
        }
        
    }
}