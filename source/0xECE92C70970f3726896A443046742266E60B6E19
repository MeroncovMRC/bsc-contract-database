
// File: contracts/Relation.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./utils/SafeToken.sol";

contract Relation is Ownable {
    using SafeToken for address;

    uint256 public maxNmbrella;
    struct Referrer {
        address owner;
        uint256 row;
    }
    mapping(address => Referrer) private _referrers;
    mapping(address => address[]) private _umbrellas;

    event CreateReferrer(uint256 indexed userRow, address indexed owner, address indexed user);

    constructor( ) {
        _referrers[address(0)] = Referrer(
            address(this),
            0
        );
    }
    
    function setMaxNmber(uint256 _maxNmbrella) external onlyOwner {
        maxNmbrella =  _maxNmbrella;
    }

    function umbrellaNumOf(address _owner) public view returns(uint256) {
        return _umbrellas[_owner].length;
    }

    function umbrella(address _owner) external view returns(address[] memory) {
        return _umbrellas[_owner];
    }

    function referrer(address _owner) external view returns(address, uint256) {
        return (_referrers[_owner].owner, _referrers[_owner].row);
    }

    function getReferrerFor(address _owner, uint _size) external view returns(address[] memory refs) {
        address[] memory _refs = new address[](_size);
        uint len;
        address owner_refs = _owner;
        for(uint256 i = 0; i < _size; i++) {
            owner_refs = _referrers[owner_refs].owner;
            if ( owner_refs == address(this) || owner_refs == address(0)) break;
            _refs[len] = owner_refs;
                len++;
        }
        refs = new address[](len);
        for(uint256 i = 0; i < len; i++) {
            refs[i] = _refs[i];
        }
    }
    
    function addReferrer(address _referrer_) external {
        _addReferrerFor(_msgSender(),_referrer_);
    }

    function _addReferrerFor(address _owner,address _referrer_) internal {
        Referrer storage _ref = _referrers[_owner];
        Referrer memory _ref_referrers = _referrers[_referrer_];
        require(_referrer_ != _owner, "referrer cannot self");
        require(_referrer_ != address(0), "referrer cannot 0x00");
        require(_ref.owner == address(0), "Referrered");
        require(_ref_referrers.owner != address(0) || _referrer_ == address(this), "referrer need referrered");
        require(_ref_referrers.owner != _owner, "Referrered error");
        _ref.owner = _referrer_;
        _ref.row = _ref_referrers.row + 1;
        _umbrellas[_referrer_].push(
            _owner
        );
        require(maxNmbrella == 0 || umbrellaNumOf(_referrer_) <= maxNmbrella, "maxNmbrella overflow");
        emit CreateReferrer(_ref.row, _referrer_, _msgSender());
    }

    function revertToken(address token, address to) external onlyOwner {
        token.safeTransfer(to, token.myBalance());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/utils/SafeToken.sol
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ERC20Interface {
    function balanceOf(address user) external view returns (uint256);
}

library SafeToken {
    function myBalance(address token) internal view returns (uint256) {
        return ERC20Interface(token).balanceOf(address(this));
    }

    function balanceOf(address token, address user) internal view returns (uint256) {
        return ERC20Interface(token).balanceOf(user);
    }

    function safeApprove(address token, address to, uint256 value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "!safeApprove");
    }

    function safeTransfer(address token, address to, uint256 value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "!safeTransfer");
    }

    function safeTransferFrom(address token, address from, address to, uint256 value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "!safeTransferFrom");
    }

    function safeTransferETH(address to, uint256 value) internal {
        (bool success, ) = to.call{value:value}(new bytes(0));
        require(success, "!safeTransferETH");
    }
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

