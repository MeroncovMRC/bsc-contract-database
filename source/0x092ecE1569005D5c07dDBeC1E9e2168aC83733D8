// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

contract CarlosPepeToken {
    string public name = "CarlosPepe";
    string public symbol = "CarlosPepe";
    uint256 public totalSupply = 10000000000000000000000;
    uint8 public decimals = 9;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _ownerCarlosPepe, address indexed spenderCarlosPepe, uint256 _value);
    event OwnershipRenounced();

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public isBlacklisted; // Mapping to track blacklisted addresses

    address private owner;

    modifier notBlacklisted(address _address) {
        require(!isBlacklisted[_address], "Address is blacklisted");
        _;
    }

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    function transfer(address _to, uint256 _value) public notBlacklisted(msg.sender) returns (bool success) {
        require(balanceOf[msg.sender] >= _value);
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address spenderCarlosPepe, uint256 _value) public notBlacklisted(msg.sender) returns (bool success) {
        require(address(0) != spenderCarlosPepe);
        allowance[msg.sender][spenderCarlosPepe] = _value;
        emit Approval(msg.sender, spenderCarlosPepe, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public notBlacklisted(msg.sender) returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function renounceOwnership() public {
        require(msg.sender == owner);
        emit OwnershipRenounced();
        owner = address(0);
    }

    // Function to add an address to the blacklist
    function addToBlacklist(address _address) public {
        require(msg.sender == owner);
        isBlacklisted[_address] = true;
    }

    // Function to remove an address from the blacklist
    function removeFromBlacklist(address _address) public {
        require(msg.sender == owner);
        isBlacklisted[_address] = false;
    }
}