
// File: /contracts/TrustLaunchAdmins.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
pragma solidity 0.8.17;

contract Ownable is Context {

    address private MichaelAddr = address(0xB8eB3E13ace872CCc3A122D728F656fB1953444F);
    address private JanAddr = address(0xeD67d371121D9A17FD5A19F52Ee7255b89639d12);
    address private _initialOwner;

    constructor () {
        address msgSender = _msgSender();
        _initialOwner = msgSender;
    }

    function _onlyTrustLaunchTeam() private view {
        address msgSender = _msgSender();
        require(MichaelAddr == msgSender || JanAddr == msgSender, "O: E2");        
    }

    modifier onlyTrustLaunchTeam() {
        _onlyTrustLaunchTeam();
        _;
    }
}

interface ITrustLaunchContract  {
    function setAddress(uint256 _index, address _address) external;
}

pragma solidity 0.8.17;

contract TrustLaunchAdmins is Ownable {  

    using EnumerableSet for EnumerableSet.UintSet;
 

    mapping(address => EnumerableSet.UintSet) private allowedActionCodes;
    EnumerableSet.UintSet private setIndexesContracts;

    mapping(uint256 => address) contractAddresses;

    mapping(uint256 => address) currentAddresses;

    mapping(uint256 => address) offerJanAddresses;
    mapping(uint256 => address) offerMichaelAddresses;


    mapping (address => bool) isAdmin;
    mapping (uint256 => bool) doesnotHaveSetArray;
    mapping (address => uint256) adminLevel;
    event AdminChanged (
        address who,
        address admin,
        bool isAdmin
    );
    event ContractAddressSet (
        address who,
        uint256 counter,
        address contractAddress
    );

    event setFactoryCall(
        address whichContract,
        uint256 whichIndex,
        address newValue
    );

    constructor() {
        currentAddresses[0] = address(0xB8eB3E13ace872CCc3A122D728F656fB1953444F); //michael
        currentAddresses[1] = address(0xeD67d371121D9A17FD5A19F52Ee7255b89639d12); //jan
        currentAddresses[2] = address(0xC73B330B38274b7A81EC321F5fc9bd62E14Fa9D5); //cronjobs
    }

    modifier onlyMichael() {
        address msgSender = _msgSender();
        require(currentAddresses[0] == msgSender, "Only Michael can call this function");
        _;
    }

    modifier onlyJan(){
        address msgSender = _msgSender();
        require(currentAddresses[1] == msgSender, "Only Jan can call this function");
        _;
    }

    function verifySameOffer(uint256 addressId) private {
        if(
            offerJanAddresses[addressId] == offerMichaelAddresses[addressId] && offerJanAddresses[addressId] != address(0)) {
            currentAddresses[addressId] = offerMichaelAddresses[addressId];
        }
    }

    function setJanOffer(uint256 addressId, address newAddress) external onlyJan {
        require(newAddress != address(0), "bad Address");
        offerJanAddresses[addressId] = newAddress;
        verifySameOffer(addressId);
    }

    function setMichaelOffer(uint256 addressId, address newAddress) external onlyMichael {
        require(newAddress != address(0), "bad Address");
        offerMichaelAddresses[addressId] = newAddress;
        verifySameOffer(addressId);
    }


    function _isAllowed(address _address, uint256 actionCode) private view returns (bool allowed) {
        if( 
            _address == currentAddresses[0] || 
            _address == currentAddresses[1]) {
            return true;
        }
        if( isAdmin[_address]) {
            return allowedActionCodes[_address].contains(actionCode);
        }
        return false;
    }

    function getAddress(uint256 index) external view returns (address addr) {
        return currentAddresses[index];
    }
    function getContractAddresses(uint256 index) external view returns (address addr) {
        return contractAddresses[index];
    }
    function isAdminsContract() external pure returns (bool response){
        return true;
    }

    

    function _isMichaelOrJan(address _address) private view returns (bool allowed){
        if( _address == currentAddresses[0] || 
            _address == currentAddresses[1]) {
            return true;
        }
        return false;
    }

    function isMichaelOrJan(address _address) external view returns (bool allowed) {
        return _isMichaelOrJan(_address);
    }

    function isAllowed(address _address, uint256 actionCode) external view returns (bool allowed) {
        return _isAllowed(_address, actionCode);
    }
    function setDoesnotHaveSetArray(uint256 _index, bool set) public {
        require(_isMichaelOrJan(msg.sender), "Access denied");
        doesnotHaveSetArray[_index] = set;
    }

    function setAdmin(address _address, bool _isAdmin) public {
        require(_isAllowed(msg.sender, 2), "Access denied");
        isAdmin[_address] = _isAdmin;
        emit AdminChanged(msg.sender, _address, _isAdmin);
    }

    function getTotalAllowedCodesForUser(
        address _address
    ) public view returns (uint256 total) {
        return allowedActionCodes[_address].length();
    }

    function _findDataFromArray(EnumerableSet.UintSet storage arrayToSearch, uint256 start,uint256 end) private view returns(uint256[] memory) {
        if (end > arrayToSearch.length()) {
            end = arrayToSearch.length();
        }
        uint256 length = end - start;
        uint256[] memory codesToReturn = new uint256[](length);
        uint256 currentIndex = 0;
        for (uint256 i = start; i < end; i++) {
            codesToReturn[currentIndex] = arrayToSearch.at(i);
            currentIndex++;
        }
        return codesToReturn;   
    }


    function getAllowedCodesForUser(
        address _address,
        uint256 start,
        uint256 end
    ) public view returns (uint256[] memory) {
        return _findDataFromArray(allowedActionCodes[_address], start, end);
    }


    function addAllowedActionCodes(address _address, uint256[] memory actionCodes) public {
        require(_isAllowed(msg.sender, 1), "Access denied");
        for(uint256 a = 0; a < actionCodes.length; a++) {
            allowedActionCodes[_address].add(actionCodes[a]);
        }
    }

    function setContractAddress(address _address, uint256 index) public {
        require(_isAllowed(msg.sender, 4), "Access denied");
        if( _address == address(0x0000000000000000000000000000000000000000)){
          setIndexesContracts.remove(index);  
        }
        else{
          setIndexesContracts.add(index);  
        }
        contractAddresses[index] = _address;
    }

    function getIndexesLength() public view returns (uint256 val) {
        return setIndexesContracts.length();
    }

    function getIndexesAt(uint256 index) public view returns (uint256 val) {
        return setIndexesContracts.at(index);
    }


    function _updateSingle(uint256 processed, address addr) private {
        for (uint256 ii = 0; ii < setIndexesContracts.length(); ii++) {
            uint256 contractId = setIndexesContracts.at(ii);
            if (contractId != processed) {
                if(!doesnotHaveSetArray[contractId]){
                    ITrustLaunchContract tc = ITrustLaunchContract(contractAddresses[contractId]);
                    tc.setAddress(processed, addr);
                    emit setFactoryCall(contractAddresses[contractId], processed, addr);
                }
            }
        }
    }

    function updateSingleAtOne(uint256 contractId, uint256 targetContractId) public{
        require(_isAllowed(msg.sender, 5), "Access denied");
        address addr = contractAddresses[contractId];
        ITrustLaunchContract tc = ITrustLaunchContract(contractAddresses[targetContractId]);
        tc.setAddress(contractId, addr);
        emit setFactoryCall(contractAddresses[contractId], contractId, addr);

    }


    function updateSingle(uint256 contractId) public{
        require(_isAllowed(msg.sender, 5), "Access denied");
        address addr = contractAddresses[contractId];
        _updateSingle(contractId, addr);

    }

    function updateAll() public {
        require(_isAllowed(msg.sender, 5), "Access denied");
        for (uint256 i = 0; i < setIndexesContracts.length(); i++) {
            uint256 contractId = setIndexesContracts.at(i);
            address addr = contractAddresses[contractId];
            _updateSingle(contractId, addr);
        }
    }




    function removeAllowedActionCodes(address _address, uint256[] memory actionCodes) public {
        require(_isAllowed(msg.sender, 1), "Access denied");
        for(uint256 a = 0; a < actionCodes.length; a++) {
            allowedActionCodes[_address].remove(actionCodes[a]);
        }
    }



}


// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastvalue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastvalue;
                // Update the index for the moved value
                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}

