pragma solidity ^0.8.0;

contract Whitelist {
    mapping(address => bool) private _whitelist;
    address private _owner;

    event AddedToWhitelist(address indexed account);
    event RemovedFromWhitelist(address indexed account);

    constructor() {
        _owner = msg.sender;
    }

    function isWhitelisted(address account) external view returns (bool) {
        return _whitelist[account];
    }

    function addToWhitelist() external {
        require(!_whitelist[msg.sender], "Account is already whitelisted");
        _whitelist[msg.sender] = true;
        emit AddedToWhitelist(msg.sender);
    }

    function removeFromWhitelist(address account) external onlyOwner {
        require(_whitelist[account], "Account is not whitelisted");
        _whitelist[account] = false;
        emit RemovedFromWhitelist(account);
    }

    modifier onlyOwner() {
        require(msg.sender == _owner, "Only the contract owner can call this function");
        _;
    }
}