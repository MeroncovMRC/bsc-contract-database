/*

Mel ($GIBSON) - The myth, the Man, the legend

Telegram:
https://t.me/MelGibsonBSC

Website:
http://onegibson.biz


  mmmmmmmmmddhyso++++++oossyhhhhyyyssssoooossyyyyyyyyhhhhhhhhddddhhysoo++++//+++oossyyyyyyyyhhdddddddhhyyso++++++ooosyhddddddddddhhyyyssoo+++/////:::---
mmmmmmmmmdhysoo+++//+oossyhhhhhhyyssssssssyyhhhhhhhhhhhhhhdddddhyysoo+++++++o++/://///++osyyhhhhhdddhhyso++///++++oosyhhhhhhhhhhhhhyysso++//////::::::
mmmmmmmmmdhysoo+++++oosyyhhhddddhyyyyyyyyyyhddddddddddhhhhdddhhhyssoooo+///::-......`.``..-/oyyddhdddhhsso++////+++oosyyyyyyyhhhhhhyyyso+///:://::::::
mmmmmmmmmddhyysoooossyyhhddddddddhhyyyyyhhhhdmmmmmdddddddddddhhyysssoo/-......-.....--........--+yhddhhhosoo++++++++ooossssssyyyhhhhyyso+////:///::://
mmmmmmmmmmdddhhyyyyhhhddddddmmmddhhhhhhhhhhddmmmmmmdddddddddhhhyys+/:-.---:.------::-/::::----....-ohdhdyyysoo+++++++++ooooosssyyhhhhysoo++////////+++
mmmmmmmmmmmddddddhhdddddddddddddhyyyyyyyyyhdmmmmmmmmmdddddddhhys+:-::-:+:/+-::-:/:::://///+::::--...-+yyddhyysooooo+++++++++ooosyyhhhhyssoo++++++oosso
mmmmmmmmmddddddddhddddddddddddhyyyssssssssyhdddddddddddddddhhys/---::::/+/:::/:::-::////::-::////------+ydhhhyysssooo++++//++oossyhhhhhyyssooooossyyys
mmmmmmmmdhhhhhhhhhhddddddddddhyysssooooooosyhhddddddddddddhhyo-.--:-::+/++/:/+oo/:::::::-----::-:::-::-./doshhyyyyssooo++++++oosyyhddddhhhyyyyyyyhhhhy
mmmmmmmdhyyyyyyyyyhhddddddddhyysoooo+++++oossyyhhhhhhhhdddhho...-:/++/+soy+:+oos+//+o/+/--:::::+/::::::-.-+yyhhhhhyyyssooooooossyhhddddddhhhhhddddddhy
mmmmmddhyysssoossyyhdddddhhhyyssoo+++++++++ooossyyyyyhhhhhhy-..---:++ooysss++s+o++/++/o+:::::///+o/////--.-///+osyyhhyyssooosssyyhddddddddhhddddmmddhy
mmmmmddhysooooooosyhdddddhhhyyssoo+++++++++++++oosssyyyhhhhs.-::///+oosyssososoo+//+++/+:+/://+/++o+++o/:--..---:/+osyyysssssyyyhhdddddhhhhhhhddddddhy
mmmmmdhyso+++++oosyhddddhhhyyyysso+++++++////++++oosssyyhhh/`-:/+o++ooo+//////+oo++o+o+//o+/+///o+ooooso/--......--:/+syyyyyyyhhhddddhhyyysssyhhhdddhy
mmmmddhso++/++++osyhhddddhhhhhyyysso+++++///////++++ossyyys..-://++++/:------://+ooo+o+/oo+:++/++/++ossso/:-````...--:/oyhhhhhhhdddhhhysssooossyyhhddh
mmmmdhyso+////++osyhhddddhhhhhhhyyysoo+++///////////+osyyho..-:://+++/--------:/+oso+oooys/++///:::/+syso/:-``````...-:/shdddddddddhhysoo++//+oosyyhhd
mmmddyso++////++osyhddddddhhhhhhhhyyssoo++///////////+osyho..-::/+++/:--::-:::::/osooo+os+/o//:----::+sso+:-.```````..-:+sdddddddddhyyso+//:://+oosyhh
mmddhyso+/////++osyhhdddddhhhhhhhhhyyyso++///////////++osho...-:/++//::::::/://///syos+oo++/::-------/so+//:.```````...-:ohmmmmmmmddhyso+//::://+ossyh
dddhhyso+/////++osyhdddddddhhhhhhhhhyysso++//////:////+::+o..-//+o++/:://://///////+s+++o+///:::::-:-/sso/::.```````...-:/ydmmmmmmddhyso+///:://+oosyh
dddhyso+//////+osyyhddddddddddddddhhhyyyso++////:::://-+//:--//osys+///::////:////+++++/++////////:::/ssss+.`````````..-:/sdmmmmmmmdhysoo+//:://++osyy
dddhyso++////++osyhhddddhhhdddddddhhhhyyssso++////:::::ys+++/oooss+//////////////////////////+////:::+yhso:``````````..-:/ohmmmmmmmdhhyso++/////++osyy
ddhhyso+++//++ossyhhhhhhhhhhhhddhhhhhhhyyyssoo++//////:ss//+//yyy+::::////::://////////////////:::/::+yys/.``````````..-:/ohdmmmmmmddhysoo+/////++osyy
hhhysso++++++oosyyhhhhhhhhhhhhhhhhhhhhhhyyyssooo+++//+//s:oyo.oyy+//-/syhhys+//::/::/++//:::::/:://-/shy+-``````````...--/oydmmmmmmddhhysoo++++++ossyh
yysoo+++++++oosyyhhhhhhhhhhhhhhhhhhhhhhhhhyyysssoo+++++//:oh/.+so:::+ysosyyhhhhyo++/+://+/////:::/::/shy++:```````.....-:/+yhddddmmddhhyssooo+oooossyy
o+++//////++osyyhhhdhhhhhhhhhhhhhhhhhhhhhhhyyysssoo+++++-/:o--/o+./ssssyyyhhddhhyo+/+//osyhhhhyso//:/hh:ss-..`.......---:/osyyhhhddddhhyssooo+oooossyy
++////////++osyhhhdhhhhhhhhhhhhhhhhhyyhhhhhhhyyyyso+++++:-.:://oyooooo+/oshhyhdddyoo+osyyhhdddhyyy/:oss++-..........---::/+ossyyyhhdhhhyssooooooosssyy
//////////+oosyhhhhhhhhhhhhhhyyyyyyyyyyyhhhhhhhhyso++////--:/o/-hmdhhhhyyyhhhhdhhs/::+hddhyhdyshso+-:/o//::::--------:::://++osssyyhhhhyssooooosssssyy
//////////+oosyyhhhhhhhhhhhhhyyyyyyyyyyyyhhhhhhhhso+////:---/+/./mdhyyhhhhhhhhhhhs//:+yhdhhhyo+/os+::/oys++////:::-:::::::://++ossyyyhyyyssooossssssss
++++////+++oossyyyhhhhhhhhhhyyyyyyyyyyyyyhhhhhhhyso/////::::+o/.-mdhhyyyyyhhhyhydddddddhhhhhhhhyyyyyhhyhysoo+///::::::::::::://+ossyyyyyssoossssssssss
oosssoooo++++ooossyyyhhyyyyyyyyyyyyssssyyyyyyhhhhso+/////:--/++:-yhyhddhhhhhhhhhdyoohdhyhhhhhyyyyyshdhhdhyyso++/////::::::::://+osssyyyysoooossssyssso
syyhhhyso++///+++osyyyyyyyyyyssssssoossssssyyhhhhyso++++:--./oo+:-ohddddmdddddddo:--+dhhhyyyyyyyyyhmoydmddhysoo++++///:::::::/++osssyyyyssoosssyyyyyso
yyhhhhyso+//////++osssyysssssssooooooooosossyyyhhhysoo+:-/..+syo//::/oshdddddhs:-::--hddddddhhhhyhd+.sdmmmmdhyyssso+//////////+osyyyyyysssoosssyyyyyys
yyhhyyyso+//::://+ossssssoooooo++++++++oooossyyhhso/--:-:o`-+syss//++oooos+osys/-::--:shdddddddhy+/./hdmmmmmddhyyso++////////++syyyyyyyssooossyyyhhhyy
yyyyyysso+//::://+oosssooo+++++++++++oooooo++/:---::://:/o`:/oyoo/oo+hdhyysssyhdyo++yyyoooys+:--/+o/sddmmmmmddhyyso++//++///++osyyyyyyyssoossyyyhhddhh
yyyyyyyso+///:///+oooooooo++++++++//::-......--/+o+:++::+s`:+/o+oso+ohmhsddyoosyddddyhysyyhdy/++s+/syddmmmmddhyysoo++///+++++osyyyhhhyyssoossyhhhddddd
syhhhhhyso++/+++ossoo++/:--....---..------.-:+yhh+:+++//oh.-o::oysyssddhyossyy+:/:/+shyyhdmdoss/s+:hdddddddhysso+++//////++++osssyyyyyysssssyhhhddmmdd
syhhhhhhhyssoo+/::--.------.....---::://:--/shhs///+++//oh:`++-:ossossyhhysoooosssso+osshddsoys:/:--/oyhhhhyso++/////:://+++++ooooooooooooosyhhddmmmdd
yhhddddddy/-.--------::------:::::///+:--:+syys+/+++oo+/oys`-s+:-/--::+yssyyyysoooyyyyy+osyyyo:::-:-...-:/+++++///:::::////++++///////::///+oyhddmmmdd
yhddddmmy----:::::::::::::::///////+/:-:+osyyyo+o+++oo/+syh:`+y+--...-:/+oooo++++osyyhyo::ohs-`//://:-.--.-----:::::::::////////:::::----::/+oyddmmmdh
hhddmmdo---:/+///+//::://///////+oo/::/+osyyys+oo++os++oyyys`.sy+:...--::/://+////+o++/:-./s-`.o/://///-:/-.--------::///////::::----------::/oydmmmdh
hddddd+.-://:/++o///////////++++++/:/+ossyyysooso++so+osssyh:`.yhs+:....---:/+::://::--..:+s.`:o/////+o/-/oo/:-:::---.---::::::---.......---:/+shdmddh
hhdddh--::/++///+//++///+++++++++/+++osyyysso+oo++osoossssyhs``-ydhs/....---:/:-:/--...`:oh+``+s+////+oo/-:+oo/::///:--...-------..........--:/oydmmdh
hhhhhs:-////+o++oo+++++o++++++//++++osyyysoo+oso++ooossssssyh-``-hdhyo/-..-.:/:---.....:sdh.``yso//+/+oss/--/oo+:://///:------..--..........-:/+yhdmdh
yyhs:-::/+oo++oo+o+++oooooo+++++++++osyss+ooooso++ossssssssyh+```-hdhhhs...--::-.---:+oydd/``-yos+///+osss/:-/oo+/://+o+/:::::::--:--.......--:+shdddh
sys:-////++ossoossoooooossooo++++++osssoo+osooso+osssssssssyyy````-ydhhys/-://::+soyyhddm+```osoos+///+osss/:-/++/:/+/+oo/:::::/+/::--::-....-:/ohddhy
o/--:+o/+++++oss+o+oooossssoooooooossssoooooyso++ssosssssssyyh:```.-yhhhhhyyyyyyyyyhhhdd+````ysoo+o+//+oosso/:-/++///++++o+///::/++//:-+/:...-:/+shhhy
--:///+++++soo+osssoooosssssosooooosssooooooossossosssssssssyho``-...shyyyyhhhhyyyyhhdd+`.:--hoooo+o+:/+osyso//:/+////+oo+o+///::/+////o//:..--:/oyyys
--//o++ooo++osssosooosooosoossssssoooooossssoossooosssssssssyyy`.--.`-hyyyyhysssssyhhdy``./:+yoooo++o+:/+sysoo+/:/+////+oo+oo+//:/++//+so+/-..-::+osss
:///+o++osso+++oosoossoooosssssssssoooossyysssooossssssssssssyh:.....`oysyyyyssssyyhhdo```/.osooooo++o+///ssosyo+/+++++++o+++o++/:/+///sso+-.---:/+ooo
//+oo+oooosyssssoooosooooosssssssssssooossssoooooosssssssssssyhs..````.yhyyyssyyyyyyhdy```:.ss+ossooo++o+/+syhys++++++++++++++oo+//+o++s+/+/----::/+oo


*/


// SPDX-License-Identifier: MIT                                                                               
                                                    
pragma solidity 0.8.10;

interface IUniswapV2Pair {
    function sync() external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}


contract ERC20 is IERC20, IERC20Metadata {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual override returns (string memory) {
        return _name;
    }

    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Authorized{
    address private _owner;
    address private _previousOwner;
    mapping (address => bool) _authorized;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        _authorized[_owner] = true;
        emit OwnershipTransferred(address(0), msgSender);
    }
    
    function owner() public view returns (address) {
        return _owner;
    }
    
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }
    
    modifier onlyAuthorized {
        require(_authorized[msg.sender], "Authorization: caller is not the authorized");
        _;
    }
    
    function manageAuthorization(address account, bool authorize) public onlyOwner {
        _authorized[account] = authorize;
    }
    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != -1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }

    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }
    
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? -a : a;
    }

    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

library SafeMathUint {
  function toInt256Safe(uint256 a) internal pure returns (int256) {
    int256 b = int256(a);
    require(b >= 0);
    return b;
  }
}


interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
   
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract MelGibson is ERC20, Authorized {
    using SafeMath for uint256;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    address public constant deadAddress = address(0xdead);

    bool private swapping;

    address public marketingWallet;
    address public buybackWallet;
    address public autoLiquidityReceiver;
    
    uint256 public maxTransactionAmount;
    uint256 public swapTokensAtAmount;
    uint256 public maxWallet;
    
    uint256 public percentForLPBurn = 25; // 25 = .25%
    bool public lpBurnEnabled = true;
    uint256 public lpBurnFrequency = 3600 seconds;
    uint256 public lastLpBurnTime;
    
    uint256 public manualBurnFrequency = 30 minutes;
    uint256 public lastManualLpBurnTime;

    bool public limitsInEffect = true;
    bool public hasLaunched = false;
    bool public swapEnabled = false;
    
     // Anti-bot and anti-whale mappings and variables
    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch
    bool public transferDelayEnabled = true;

    uint256 public buyTotalFees;
    uint256 public buyMarketingFee;
    uint256 public buyLiquidityFee;
    uint256 public buyBuybackFee;
    
    uint256 public sellTotalFees;
    uint256 public sellMarketingFee;
    uint256 public sellLiquidityFee;
    uint256 public sellBuybackFee;
    
    uint256 public tokensForMarketing;
    uint256 public tokensForLiquidity;
    uint256 public tokensForBuyback;
    
    /******************/

    // exlcude from fees and max transaction amount
    mapping (address => bool) private _isExcludedFromFees;
    mapping (address => bool) public _isExcludedMaxTransactionAmount;

    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses
    // could be subject to a maximum transfer amount
    mapping (address => bool) public automatedMarketMakerPairs;

    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);

    event ExcludeFromFees(address indexed account, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);
    
    event buybackWalletUpdated(address indexed newWallet, address indexed oldWallet);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiquidity
    );
    
    event AutoNukeLP();
    
    event ManualNukeLP();

    constructor() ERC20("Mel", "$GIBSON") {
        
        
        // PancakeSwap (Mainnet)
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

        excludeFromMaxTransaction(address(_uniswapV2Router), true);
        uniswapV2Router = _uniswapV2Router;
        
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        excludeFromMaxTransaction(address(uniswapV2Pair), true);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);
        
        uint256 _buyMarketingFee = 3;
        uint256 _buyLiquidityFee = 1;
        uint256 _buyBuybackFee = 2;

        uint256 _sellMarketingFee = 10;
        uint256 _sellLiquidityFee = 6;
        uint256 _sellBuybackFee = 2;
        
        uint256 totalSupply = 1 * 1e18; // 1 $GIBSON
        
        maxTransactionAmount = totalSupply * 10 / 1000; // 1% maxTransactionAmount
        maxWallet = totalSupply * 20 / 1000;            // 2% maxWalletAmount
        swapTokensAtAmount = totalSupply * 2 / 1000;    // 0.2% swapAmount

        buyMarketingFee = _buyMarketingFee;
        buyLiquidityFee = _buyLiquidityFee;
        buyBuybackFee = _buyBuybackFee;
        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBuybackFee;
        
        sellMarketingFee = _sellMarketingFee;
        sellLiquidityFee = _sellLiquidityFee;
        sellBuybackFee = _sellBuybackFee;
        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBuybackFee;
        

        marketingWallet = address(0x05d8790947579b495E378B07d42CCa7F744B8Fa5); 
        buybackWallet = address(0xBa1b4e4508bc5361B4Eb76DBe18662476B144e38);   
        autoLiquidityReceiver = address(owner());   // set as liquidity wallet
        

        // exclude from paying fees or having max transaction amount
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);
        excludeFromFees(address(buybackWallet), true);
        
        excludeFromMaxTransaction(owner(), true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(0xdead), true);
        excludeFromMaxTransaction(address(buybackWallet), true);
        
        /*
            _mint is an internal function in ERC20.sol that is only called here,
            and CANNOT be called ever again
        */
        _mint(msg.sender, totalSupply);
    }

    receive() external payable {

  	}

    // once enabled, can never be turned off
    function enableTrading() external onlyOwner {
        hasLaunched = true;
        swapEnabled = true;
        lastLpBurnTime = block.timestamp;
    }
    
    // remove limits after token is stable
    function removeLimits() external onlyOwner returns (bool){
        limitsInEffect = false;
        return true;
    }
    
    // disable Transfer delay - cannot be reenabled
    function disableTransferDelay() external onlyOwner returns (bool){
        transferDelayEnabled = false;
        return true;
    }
    
     // change the minimum amount of tokens to sell from fees
    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){
  	    require(newAmount >= totalSupply() * 1 / 100000, "Swap amount cannot be lower than 0.001% total supply.");
  	    require(newAmount <= totalSupply() * 5 / 1000, "Swap amount cannot be higher than 0.5% total supply.");
  	    swapTokensAtAmount = newAmount;
  	    return true;
  	}
    
    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {
        require(newNum >= (totalSupply() * 1 / 1000)/1e18, "Cannot set maxTransactionAmount lower than 0.1%");
        maxTransactionAmount = newNum * (10**18);
    }

    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {
        require(newNum >= (totalSupply() * 5 / 1000)/1e18, "Cannot set maxWallet lower than 0.5%");
        maxWallet = newNum * (10**18);
    }
    
    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }
    
    // only use to disable contract sales if absolutely necessary (emergency use only)
    function updateSwapEnabled(bool enabled) external onlyOwner(){
        swapEnabled = enabled;
    }
    
    function updateBuyTax(uint256 _marketingFee, uint256 _liquidityFee, uint256 _buyBuybackFee) external onlyOwner {
        buyMarketingFee = _marketingFee;
        buyLiquidityFee = _liquidityFee;
        buyBuybackFee = _buyBuybackFee;
        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBuybackFee;
        require(buyTotalFees <= 20, "Must keep fees at 20% or less");
    }
    
    function updateSellTax(uint256 _marketingFee, uint256 _liquidityFee, uint256 _sellBuybackFee) external onlyOwner {
        sellMarketingFee = _marketingFee;
        sellLiquidityFee = _liquidityFee;
        sellBuybackFee = _sellBuybackFee;
        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBuybackFee;
        require(sellTotalFees <= 25, "Must keep fees at 25% or less");
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {
        require(pair != uniswapV2Pair, "The pair cannot be removed from automatedMarketMakerPairs");

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {
        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);
        marketingWallet = newMarketingWallet;
    }
    
    function updateBuybackWallet(address newWallet) external onlyOwner {
        emit buybackWalletUpdated(newWallet, buybackWallet);
        buybackWallet = newWallet;
    }
    

    function isExcludedFromFees(address account) public view returns(bool) {
        return _isExcludedFromFees[account];
    }
    
    event BoughtEarly(address indexed sniper);

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        
         if(amount == 0) {
            super._transfer(from, to, 0);
            return;
        }
        
        if(limitsInEffect){
            if (
                from != owner() &&
                to != owner() &&
                to != address(0) &&
                to != address(0xdead) &&
                !swapping
            ){
                if(!hasLaunched){
                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], "Trading is not active.");
                }

                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  
                if (transferDelayEnabled){
                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){
                        require(_holderLastTransferTimestamp[tx.origin] < block.number, "_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.");
                        _holderLastTransferTimestamp[tx.origin] = block.number;
                    }
                }
                 
                //when buy
                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {
                        require(amount <= maxTransactionAmount, "Buy transfer amount exceeds the maxTransactionAmount.");
                        require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }
                
                //when sell
                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {
                        require(amount <= maxTransactionAmount, "Sell transfer amount exceeds the maxTransactionAmount.");
                }
                else if(!_isExcludedMaxTransactionAmount[to]){
                    require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }
            }
        }
        
        
        
		uint256 contractTokenBalance = balanceOf(address(this));
        
        bool canSwap = contractTokenBalance >= swapTokensAtAmount;

        if( 
            canSwap &&
            swapEnabled &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;
            
            swapBack();

            swapping = false;
        }
        
        if(!swapping && automatedMarketMakerPairs[to] && lpBurnEnabled && block.timestamp >= lastLpBurnTime + lpBurnFrequency && !_isExcludedFromFees[from]){
            autoBurnLiquidityPairTokens();
        }

        bool takeFee = !swapping;

        // if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }
        
        uint256 fees = 0;
        // only take fees on buys/sells, do not take on wallet transfers
        if(takeFee){
            // on sell
            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){
                fees = amount.mul(sellTotalFees).div(100);
                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;
                tokensForBuyback += fees * sellBuybackFee / sellTotalFees;
                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;
            }
            // on buy
            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {
        	    fees = amount.mul(buyTotalFees).div(100);
        	    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;
                tokensForBuyback += fees * buyBuybackFee / buyTotalFees;
                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;
            }
            
            if(fees > 0){    
                super._transfer(from, address(this), fees);
            }
        	
        	amount -= fees;
        }

        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {

        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
        
    }
    
    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            autoLiquidityReceiver,
            block.timestamp
        );
    }

    function swapBack() private {
        uint256 contractBalance = balanceOf(address(this));
        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForBuyback;
        bool success;
        
        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}

        if(contractBalance > swapTokensAtAmount * 20){
          contractBalance = swapTokensAtAmount * 20;
        }
        
        // Halve the amount of liquidity tokens
        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;
        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);
        
        uint256 initialETHBalance = address(this).balance;

        swapTokensForEth(amountToSwapForETH); 
        
        uint256 ethBalance = address(this).balance.sub(initialETHBalance);
        
        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);
        uint256 ethForBuyback = ethBalance.mul(tokensForBuyback).div(totalTokensToSwap);
        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForBuyback;
        
        tokensForLiquidity = 0;
        tokensForMarketing = 0;
        tokensForBuyback = 0;
        
        (success,) = address(buybackWallet).call{value: ethForBuyback}("");
        
        if(liquidityTokens > 0 && ethForLiquidity > 0){
            addLiquidity(liquidityTokens, ethForLiquidity);
            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);
        }
        
        (success,) = address(marketingWallet).call{value: address(this).balance}("");
    }
    
    function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyAuthorized {
        require(_frequencyInSeconds >= 600, "cannot set buyback more often than every 10 minutes");
        require(_percent <= 1000 && _percent >= 0, "Must set auto LP burn percent between 0% and 10%");
        lpBurnFrequency = _frequencyInSeconds;
        percentForLPBurn = _percent;
        lpBurnEnabled = _Enabled;
    }
    
    function autoBurnLiquidityPairTokens() internal returns (bool){
        
        lastLpBurnTime = block.timestamp;
        
        // get balance of liquidity pair
        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);
        
        // calculate amount to burn
        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(10000);
        
        // pull tokens from pancakePair liquidity and move to dead address permanently
        if (amountToBurn > 0){
            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);
        }
        
        //sync price since this is not in a swap transaction!
        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);
        pair.sync();
        emit AutoNukeLP();
        return true;
    }

    function buyback(uint256 slippage) payable public onlyAuthorized{ 

        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);

        uint256 estimatedBuyback = uniswapV2Router.getAmountsOut(msg.value, path)[1];

        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(
            estimatedBuyback * (100 - slippage) / 100,  
            path,
            deadAddress, 
            block.timestamp
        );
    } 
    
    function manualBurnLiquidityPairTokens(uint256 percent) external onlyAuthorized returns (bool){
        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , "Must wait for cooldown to finish");
        require(percent <= 1000, "May not nuke more than 10% of tokens in LP");
        lastManualLpBurnTime = block.timestamp;
        
        // get balance of liquidity pair
        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);
        
        // calculate amount to burn
        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);
        
        // pull tokens from pancakePair liquidity and move to dead address permanently
        if (amountToBurn > 0){
            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);
        }
        
        //sync price since this is not in a swap transaction!
        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);
        pair.sync();
        emit ManualNukeLP();
        return true;
    }
}