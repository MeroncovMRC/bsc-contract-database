// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

interface ICompound {
    event Deposit(address user, uint256 amount);
    event WithdrawLP(address user, uint256 amount);

    struct UserInfo {
        uint256 depositedLPAmount;
        bool exist;
    }

    function deposit(uint256 amount) external;

    function withdrawLP(uint256 amount) external;

    function viewUserInfo(address user) external view returns (UserInfo memory);

    function getLPTopUsers(uint256 number) external view returns (address[] memory);

    function tops(uint256 number, address user) external view returns (address[] memory, uint256[] memory, uint256);
}

// File: src/lib/IUniswapV2Pair.sol


pragma solidity ^0.8.9;

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: src/Compound.sol


pragma solidity ^0.8.7;




contract Compound is ICompound, Ownable {
    IUniswapV2Pair public uniswapV2Pair;
    address[] public topUsers = new address[](50);
    uint256[] public topUsersLpAmount = new uint256[](50);
    mapping(address => UserInfo) public userInfoMap;

    constructor() {}

    function setPair(address pair) public onlyOwner {
        uniswapV2Pair = IUniswapV2Pair(pair);
    }

    function deposit(uint256 amount) public {
        address user = msg.sender;
        require(
            uniswapV2Pair.transferFrom(user, address(this), amount),
            "Compound: transfer LP from user to contract failed"
        );
        UserInfo memory userInfo = userInfoMap[user];
        uint256 oldLPAmount = userInfo.depositedLPAmount;
        if (userInfo.exist) {
            userInfo.depositedLPAmount += amount;
        } else {
            userInfo.depositedLPAmount = amount;
            userInfo.exist = true;
        }
        userInfoMap[user] = userInfo;
        uint256 newLPAmount = userInfo.depositedLPAmount;
        uint256 minLpAmount = topUsersLpAmount[topUsers.length - 1];

        if (newLPAmount > minLpAmount) {
            //already in top
            if (oldLPAmount >= minLpAmount && oldLPAmount != 0) {
                for (uint256 i = 0; i < topUsers.length; i++) {
                    if (topUsers[i] == user) {
                        topUsersLpAmount[i] = newLPAmount;
                        break;
                    }
                }
            } else {
                // new in top
                topUsers[topUsers.length - 1] = user;
                topUsersLpAmount[topUsers.length - 1] = newLPAmount;
            }
            (topUsersLpAmount, topUsers) = intertionSort(topUsersLpAmount, topUsers);
        }
        emit Deposit(user, amount);
    }

    function withdrawLP(uint256 amount) public {
        address user = msg.sender;
        UserInfo memory userInfo = userInfoMap[user];
        require(userInfo.exist, "Compound: user not exist");
        uint256 lpAmount = userInfo.depositedLPAmount;
        require(lpAmount >= amount, "Compound: Not sufficient funds");
        uint256 minLpAmount = topUsersLpAmount[topUsers.length - 1];
        uint256 leftLpAmount = lpAmount - amount;
        // in top
        if (lpAmount >= minLpAmount) {
            //out top
            if (leftLpAmount < minLpAmount || leftLpAmount == 0) {
                for (uint256 i = 0; i < topUsers.length; i++) {
                    if (topUsers[i] == user) {
                        topUsers[i] = address(0);
                        topUsersLpAmount[i] = 0;
                        break;
                    }
                }
            } else {
                //still in top
                for (uint256 i = 0; i < topUsers.length; i++) {
                    if (topUsers[i] == user) {
                        topUsersLpAmount[i] = leftLpAmount;
                        break;
                    }
                }
            }

            (topUsersLpAmount, topUsers) = intertionSort(topUsersLpAmount, topUsers);
        }
        userInfo.depositedLPAmount = leftLpAmount;
        require(uniswapV2Pair.transfer(user, amount), "Compound: Transfer LP to user failed");
        emit WithdrawLP(user, amount);
        if (leftLpAmount == 0) {
            delete userInfoMap[user];
        } else {
            userInfoMap[user] = userInfo;
        }
    }

    function viewUserInfo(address user) public view returns (UserInfo memory) {
        return userInfoMap[user];
    }

    function intertionSort(uint256[] memory lpAmounts, address[] memory users)
        private
        pure
        returns (uint256[] memory, address[] memory)
    {
        for (uint256 i = 1; i < lpAmounts.length; i++) {
            uint256 tempLPAmount = lpAmounts[i];
            address tempUser = users[i];
            uint256 j = i;
            while ((j >= 1) && (tempLPAmount > lpAmounts[j - 1])) {
                lpAmounts[j] = lpAmounts[j - 1];
                users[j] = users[j - 1];
                j--;
            }
            lpAmounts[j] = tempLPAmount;
            users[j] = tempUser;
        }
        return (lpAmounts, users);
    }

    function getLPTopUsers(uint256 number) public view returns (address[] memory) {
        address[] memory addrs = new address[](number);
        for (uint256 i = 0; i < number; i++) {
            addrs[i] = topUsers[i];
        }
        return addrs;
    }

    function tops(uint256 number, address user) public view returns (address[] memory, uint256[] memory, uint256) {
        address[] memory addrs = new address[](number);
        uint256 ranking;
        for (uint256 i = 0; i < number; i++) {
            address addr = topUsers[i];
            addrs[i] = addr;
            if (addr == user) {
                ranking = i + 1;
            }
        }

        uint256[] memory amounts = new uint256[](number);
        for (uint256 i = 0; i < number; i++) {
            amounts[i] = topUsersLpAmount[i];
        }
        return (addrs, amounts, ranking);
    }
}