{"interfaces.sol":{"content":"\r\npragma solidity  \u003e=0.5.16;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) \u003e= x, \u0027ds-math-add-overflow\u0027);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003c= x, \u0027ds-math-sub-underflow\u0027);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \u0027ds-math-mul-overflow\u0027);\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint ) {\r\n        require((y) != 0 , \u0027ds-math-div-zero\u0027);\r\n        return x/y;\r\n    }\r\n}\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\ninterface IUnifiCallee {\r\n    function unifiCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n\r\ninterface IFarmController {\r\n    function notifyFarm(uint amount) external;\r\n}\r\n\r\ninterface IEventBroadcaster {\r\n    function broadcastEvent(bool isDeposit, bool isWithdrawl, bool isClaim, uint currentLiquidity, uint liquidity,address user , address pool) external;\r\n}\r\ninterface IUnifiERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IUP {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address to, uint256 value) external payable returns (bool);\r\n}\r\npragma solidity =0.5.16;\r\n\r\n\r\ninterface IUnifiFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function feeTo() external returns(address);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    \r\n    function feeController() external view returns (address);\r\n    function router() external view returns (address);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n\r\n}\r\n\r\ninterface IUnifiRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n    \r\n}\r\n\r\n\r\ninterface IUnifiPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address,address) external;\r\n}\r\n\r\n\r\nlibrary UnifiLibrary {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \u0027UnifiLibrary: IDENTICAL_ADDRESSES\u0027);\r\n        (token0, token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \u0027UnifiLibrary: ZERO_ADDRESS\u0027);\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u0027d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\u0027 // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUnifiPair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_AMOUNT\u0027);\r\n        require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_INPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint amountInWithFee = amountIn.mul(998);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\r\n        require(reserveIn \u003e 0 \u0026\u0026 reserveOut \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_LIQUIDITY\u0027);\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(998);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027UnifiLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i \u003c path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length \u003e= 2, \u0027UnifiLibrary: INVALID_PATH\u0027);\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i \u003e 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\npragma solidity \u003e=0.5.16;\r\n\r\ninterface IUnifiController {\r\n    function lp_BuyBackAmount(address pool) external pure returns(uint);\r\n    function feeSetter() external pure returns (address);\r\n    function WBNB() external pure returns (address);\r\n    function nativeFee() external pure returns(uint);\r\n    function nativeFeeTo() external pure returns(address);\r\n    function UNIFIUPVault() external pure returns (address);\r\n    function maxFee() external pure returns (uint );\r\n    function defaultFee() external pure returns (uint );\r\n    function isDisableFlashLoan(address pool) external pure returns (bool);\r\n    function pairFees(address pool) external pure returns (uint );\r\n    function UPMintable(address pool) external pure returns (bool );\r\n    function getMintRate(address _pool ) external pure returns (uint );\r\n    function getPairFee(address _pair) external view returns (uint);\r\n    function setUNIFIUPVault(address _UNIFIUPVault) external ;\r\n    function setDefaultFee( uint _fee) external ; \r\n    function getPairUPFee(address _pair) external view returns(uint);\r\n    function defaultUPFeesTo() external view  returns(address);\r\n    function setPairFee(address _pair, uint _fee)external ;\r\n    function setFeeSetter(address _feeSetter)external ;\r\n    function admin(address _user)external view returns (bool);\r\n    function getMintFeeConfig(address _pool) external view returns(uint,uint);\r\n    function poolPaused(address _pool)external view returns(bool);\r\n    function owner() external pure returns (address);\r\n    function ufc() external pure returns (address);\r\n    function uptoken() external pure returns (address);\r\n    function lp_UP_Balance(address pool) external pure returns (uint );\r\n    function lp_RewardPerToken(address pool) external pure returns (uint );\r\n    function lp_FeeState(address pool) external view returns (uint);\r\n    function lp_LastTrade(address pool) external returns (uint);\r\n    function lp_UPRemaining(address pool) external returns (uint);\r\n    function setMaxFee( uint _fee) external ; \r\n    function lp_pathToTrade (address pool) external returns( address[] memory path);\r\n    function pathToTrade(address _pool)external view returns (address []memory path);\r\n    function setUPMintable( address _pair , bool _value) external ; \r\n    function updateLPBalance(address _pair, uint _fee)external returns (bool);\r\n    function updateLPFeeState(address _pair, uint _fee)external returns (bool);\r\n    function updateLPLastTrade(address _pair, uint _fee)external returns (bool);\r\n    function updateLPLUPRemaining(address _pair, uint _fee)external returns (bool);\r\n    function mintUP(address toLP  )external payable  returns (uint);\r\n    function mintNativeUP(address to) external payable returns(uint);\r\n    function claimUP(address to,address upRecipient , uint liquidity,bool isDeposit,bool isWithdrawl, bool isClaim )external  returns (uint);\r\n}\r\n"},"UnifiERC20.sol":{"content":"pragma solidity =0.5.16;\r\n\r\nimport \u0027./interfaces.sol\u0027;\r\n\r\n\r\ncontract UnifiERC20 is IUnifiERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public  name = \u0027Unifi LP\u0027;\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address =\u003e uint) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address =\u003e uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\u0027EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\u0027),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\u00271\u0027)),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline \u003e= block.timestamp, \u0027Unifi: EXPIRED\u0027);\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \u0027\\x19\\x01\u0027,\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) \u0026\u0026 recoveredAddress == owner, \u0027Unifi: INVALID_SIGNATURE\u0027);\r\n        _approve(owner, spender, value);\r\n    }\r\n}"},"UnifiPair.sol":{"content":"pragma solidity = 0.5 .16;\n\nimport \u0027./UnifiERC20.sol\u0027;\nimport \u0027./interfaces.sol\u0027;\n\n\ncontract UnifiPair is IUnifiPair, UnifiERC20 {\n    using SafeMath\n    for uint;\n    using UQ112x112\n    for uint224;\n    struct pairData {\n        uint balance0;\n        uint balance1;\n        uint fees;\n        uint token0Fees;\n        uint token1Fees;\n        IUnifiController iUC;\n        uint upFees;\n\n    }\n\n    string public symbol;\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\n    bytes4 private constant APPROVE = bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\n\n    address public factory;\n    address public token0;\n    address public token1;\n    address public WBNB;\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public price0CumulativeLast;\n    uint public price1CumulativeLast;\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \u0027Unifi: LOCKED\u0027);\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves() public view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027Unifi: TRANSFER_FAILED\u0027);\n    }\n\n    function _safeApprove(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(APPROVE, to, value));\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027Unifi: APPROVE_FAILED\u0027);\n    }\n\n\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function() external payable {\n\n    }\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1, address _wbnb) external {\n        require(msg.sender == factory, \u0027Unifi: FORBIDDEN\u0027); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n        WBNB = _wbnb;\n        if(_token0 == _wbnb \u0026\u0026 _token1 != _wbnb){\n            symbol =  string(abi.encodePacked(\"u\",IERC20(token1).symbol()));\n        }else if (_token1 == _wbnb \u0026\u0026 _token0 != _wbnb){\n            symbol =  string(abi.encodePacked(\"u\",IERC20(token0).symbol()));\n        }else{\n            symbol =  string(abi.encodePacked(\"u\",IERC20(token1).symbol(), \"_\", IERC20(token0).symbol()));            \n        }\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 \u003c= uint112(-1) \u0026\u0026 balance1 \u003c= uint112(-1), \u0027Unifi: OVERFLOW\u0027);\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed \u003e 0 \u0026\u0026 _reserve0 != 0 \u0026\u0026 _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns(uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n            IUnifiController(((IUnifiFactory(factory).feeController()))).claimUP(to, to, liquidity, true, false, false);\n\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n            IUnifiController(((IUnifiFactory(factory).feeController()))).claimUP(to, to, liquidity, true, false, false);\n\n        }\n        require(liquidity \u003e 0, \u0027Unifi: INSUFFICIENT_LIQUIDITY_MINTED\u0027);\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        // \n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns(uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 \u003e 0 \u0026\u0026 amount1 \u003e 0, \u0027Unifi: INSUFFICIENT_LIQUIDITY_BURNED\u0027);\n        IUnifiController((IUnifiFactory(factory).feeController())).claimUP(to, to, liquidity, true, false, false);\n\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function claimUP(address to) external lock returns(uint) {\n        IUnifiController(IUnifiFactory(factory).feeController()).claimUP(to, to, 0, false, false, true);\n    }\n\n    function getPairFee() external view returns(uint) {\n\n        address controllerAddress = (IUnifiFactory(factory).feeController());\n        uint fees = IUnifiController(controllerAddress).getPairFee(address(this));\n        return fees;\n\n    }\n\n    function transfer(address to, uint value) external returns(bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        this.claimUP(from);\n        this.claimUP(to);\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function transferFrom(address from, address to, uint value) external returns(bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out \u003e 0 || amount1Out \u003e 0, \u0027Unifi: INSUFFICIENT_OUTPUT_AMOUNT\u0027);\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(amount0Out \u003c _reserve0 \u0026\u0026 amount1Out \u003c _reserve1, \u0027Unifi: INSUFFICIENT_LIQUIDITY\u0027);\n\n        pairData memory pd;\n        pd.iUC = IUnifiController((IUnifiFactory(factory).feeController()));\n        require(pd.iUC.poolPaused(address(this)) == false, \u0027Unifi: Contract is on pause\u0027);\n        pd.fees = pd.iUC.getPairFee(address(this));\n\n\n        { // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 \u0026\u0026 to != _token1, \u0027Unifi: INVALID_TO\u0027);\n            if (amount0Out \u003e 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out \u003e 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length \u003e 0 \u0026\u0026 !pd.iUC.isDisableFlashLoan(address(this))) IUnifiCallee(to).unifiCall(msg.sender, amount0Out, amount1Out, data);\n            pd.balance0 = IERC20(_token0).balanceOf(address(this));\n            pd.balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = pd.balance0 \u003e _reserve0 - amount0Out ? pd.balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = pd.balance1 \u003e _reserve1 - amount1Out ? pd.balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In \u003e 0 || amount1In \u003e 0, \u0027Unifi: INSUFFICIENT_INPUT_AMOUNT\u0027); { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = pd.balance0.mul(1000).sub(amount0In.mul(pd.fees));\n        uint balance1Adjusted = pd.balance1.mul(1000).sub(amount1In.mul(pd.fees));\n        require(balance0Adjusted.mul(balance1Adjusted) \u003e= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), \u0027Unifi: K\u0027);\n\n\n        }\n        uint fees = 0;\n        if (pd.iUC.UPMintable(address(this))) {\n            pd.token0Fees = amount0In.mul(pd.fees).div(1000);\n            pd.token1Fees = amount1In.mul(pd.fees).div(1000);\n            if (token0 == WBNB || token1 ==WBNB) {\n                if (pd.token0Fees  \u003e 0) {\n                    if (token0 != WBNB) {\n                        //perform a swap quote\n                        fees = quote(pd.token0Fees, pd.balance0, pd.balance1);\n                        pd.upFees = pd.upFees.add(fees);\n                        pd.balance1 = pd.balance1.sub(fees);\n                    } else {\n                        pd.upFees = pd.upFees.add(pd.token0Fees);\n                        pd.balance0 = pd.balance0.sub(pd.token0Fees);\n                    }\n                }\n                if (pd.token1Fees  \u003e 0) {\n                    if (token1 != WBNB) {\n                        fees = quote(pd.token1Fees , pd.balance1, pd.balance0);\n                        pd.upFees = pd.upFees.add(fees);\n                        pd.balance0 = pd.balance0.sub(fees);\n                    } else {\n                        pd.upFees = pd.upFees.add(pd.token1Fees);\n                        pd.balance1 = pd.balance1.sub(pd.token1Fees);\n                    }\n\n                }\n                if (pd.upFees \u003e 0) {\n\n                    IWETH(WBNB).withdraw(pd.upFees);\n                    pd.iUC.mintUP.value(address(this).balance)(address(this));\n\n                }\n\n            } else { //pair isnt WBNB\n\n                // get the path\n                // get the addres[0] to know which coin we need to change to\n                address[] memory pathToTrade = IUnifiController(address(pd.iUC)).pathToTrade(address(this));\n                if (pathToTrade.length \u003e 0 \u0026\u0026 pathToTrade[pathToTrade.length - 1] == WBNB) {\n                    if (amount0In.mul(pd.fees) \u003e 0) {\n                        if (token0 != pathToTrade[0] \u0026\u0026 pathToTrade[0] == token1) {\n                            //perform a swap quote\n                            fees = quote(pd.token0Fees, pd.balance0, pd.balance1);\n                            pd.upFees = pd.upFees.add(fees);\n                            pd.balance1 = pd.balance1.sub(fees);\n                        } else { //straight away perform trade\n                            pd.upFees = pd.upFees.add(amount0In.mul(pd.fees));\n                            pd.balance0 = pd.balance0.sub(pd.token0Fees);\n                        }\n                    }\n                    if (amount1In.mul(pd.fees) \u003e 0) {\n                        if (token1 != pathToTrade[0] \u0026\u0026 pathToTrade[0] == token0) {\n                            fees = quote(pd.token1Fees, pd.balance1, pd.balance0);\n                            pd.upFees = pd.upFees.add(fees);\n                            pd.balance0 = pd.balance0.sub(fees);\n                        } else { //straight away perform trade\n                            pd.upFees = pd.upFees.add(pd.token1Fees);\n                            pd.balance1 = pd.balance1.sub(pd.token1Fees);\n                        }\n                    }\n                    if (pd.upFees \u003e 0) {\n                        _safeApprove(pathToTrade[0], IUnifiFactory(factory).router(), pd.upFees);\n                        IUnifiRouter(IUnifiFactory(factory).router()).swapExactTokensForETH(pd.upFees, 1, pathToTrade, address(pd.iUC), (block.timestamp).add(1800)); //get the WBNB back\n                        pd.iUC.mintUP.value(0)(address(this));\n                    }\n                }\n            }\n\n        }\n        pd.balance0 = IERC20(token0).balanceOf(address(this));\n        pd.balance1 = IERC20(token1).balanceOf(address(this));\n        _update(pd.balance0, pd.balance1, _reserve0, _reserve1); //balance is wrong\n\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n         IUnifiController iUC = IUnifiController((IUnifiFactory(factory).feeController()));\n         if(iUC.admin(msg.sender)){\n            address _token0 = token0; // gas savings\n            address _token1 = token1; // gas savings\n            _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n            _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n         }\n    }\n\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns(uint amountB) {\n        require(amountA \u003e 0, \u0027UnifiLibrary Pair: INSUFFICIENT_AMOUNT\u0027);\n        require(reserveA \u003e 0 \u0026\u0026 reserveB \u003e 0, \u0027UnifiLibrary: INSUFFICIENT_LIQUIDITY\u0027);\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n    // if fee is on, mint liquidity equivalent to 8/25 of the growth in sqrt(k)\n\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns(bool feeOn) {\n        address feeTo = IUnifiFactory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n\n        IUnifiController ufc = IUnifiController((IUnifiFactory(factory).feeController()));\n\n        if (feeOn \u0026\u0026 ufc.UPMintable(address(this)) == false) {\n            (uint numeratorConfig, uint denominatorConfig) = ufc.getMintFeeConfig(address(this));\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK \u003e rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast)).mul(numeratorConfig);\n                    uint denominator = rootK.mul(denominatorConfig).add(rootKLast.mul(numeratorConfig));\n                    uint liquidity = numerator / denominator;\n                    if (liquidity \u003e 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n\n}"}}