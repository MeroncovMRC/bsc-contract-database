
// File: contracts/Ola/Core/Interfaces/EIP20Interface.sol
pragma solidity ^0.5.16;

/**
 * @title ERC 20 Token Standard Interface
 *  https://eips.ethereum.org/EIPS/eip-20
 */
interface EIP20Interface {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);

    /**
      * @notice Get the total number of tokens in circulation
      * @return The supply of tokens
      */
    function totalSupply() external view returns (uint256);

    /**
     * @notice Gets the balance of the specified address
     * @param owner The address from which the balance will be retrieved
     * @return The balance
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
      * @notice Transfer `amount` tokens from `msg.sender` to `dst`
      * @param dst The address of the destination account
      * @param amount The number of tokens to transfer
      * @return Whether or not the transfer succeeded
      */
    function transfer(address dst, uint256 amount) external returns (bool success);

    /**
      * @notice Transfer `amount` tokens from `src` to `dst`
      * @param src The address of the source account
      * @param dst The address of the destination account
      * @param amount The number of tokens to transfer
      * @return Whether or not the transfer succeeded
      */
    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);

    /**
      * @notice Approve `spender` to transfer up to `amount` from `src`
      * @dev This will overwrite the approval amount for `spender`
      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
      * @param spender The address of the account which may transfer tokens
      * @param amount The number of tokens that are approved (-1 means infinite)
      * @return Whether or not the approval succeeded
      */
    function approve(address spender, uint256 amount) external returns (bool success);

    /**
      * @notice Get the current allowance from `owner` for `spender`
      * @param owner The address of the account which owns the tokens to be spent
      * @param spender The address of the account which may transfer tokens
      * @return The number of tokens allowed to be spent (-1 means infinite)
      */
    function allowance(address owner, address spender) external view returns (uint256 remaining);

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}


// File: contracts/Ola/Peripheral/Lens/OlaLens.sol
pragma solidity ^0.5.16;
pragma experimental ABIEncoderV2;

import "../../Core/LendingNetwork/OTokens/CToken.sol";
import "../../Core/LendingNetwork/PriceOracle/PriceOracle.sol";
import "../../Core/Interfaces/EIP20Interface.sol";

interface CErc20ForUniswapConfigOlaLens {
    function underlying() external view returns (address);
}

interface DynamicRainMakerForOlaLens {
    function compSpeeds(address cToken) external view returns (uint);

    function compSupplySpeeds(address cToken) external view returns (uint);

    function compBorrowSpeeds(address cToken) external view returns (uint);

    function claimComp(address holder) external;

    function compAccrued(address holder) external view returns (uint);

    function lnIncentiveTokenAddress() external view returns (EIP20Interface);
}

interface MinistryOlaLensInterface {
    function getOracleForAsset(address asset) external view returns (PriceOracle);

    function getPriceForAsset(address asset) external view returns (uint256);
}

interface ComptrollerOlaLensInterface {
    // isListed, collateralFactorMantissa, liquidationFactorMantissa, liquidationIncentiveMantissa
    function markets(address) external view returns (bool, uint, uint, uint);
    // function oracle() external view returns (PriceOracle);
    function getAccountLiquidity(address) external view returns (uint, uint, uint);
    // OLA_ADDITIONS : liquidity by factor
    function getAccountLiquidityByLiquidationFactor(address) external view returns (uint, uint, uint);

    function getAssetsIn(address) external view returns (CToken[] memory);

    function getAllMarkets() external view returns (CToken[] memory);
    // function claimComp(address) external;
    // function compAccrued(address) external view returns (uint);
    // function compSpeeds(address) external view returns (uint);

    function getRegistry() external view returns (MinistryOlaLensInterface);

    // NOTE : For now assuming only one type of RainMaker
    function rainMaker() external view returns (DynamicRainMakerForOlaLens);

    function hasRainMaker() view external returns (bool);
}

// IMPORTANT : We currently assume that the native coin has 18 decimals.

contract OlaLens {
    struct RainBalances {
        uint balance;
        uint allocated;
    }

    function calculateActiveRainBalances(ComptrollerOlaLensInterface comptroller, address account) external returns (RainBalances memory) {
        uint balance;
        uint allocated;

        if (comptroller.hasRainMaker()) {
            return calculateRainBalancesInternal(comptroller.rainMaker(), account);
        } else {
            return RainBalances({
            balance : 0,
            allocated : 0
            });
        }
    }

    function calculateRainBalances(DynamicRainMakerForOlaLens rainMaker, address account) external returns (RainBalances memory) {
        return calculateRainBalancesInternal(rainMaker, account);
    }

    function calculateRainBalancesInternal(DynamicRainMakerForOlaLens rainMaker, address account) internal returns (RainBalances memory) {
        EIP20Interface rainyToken = rainMaker.lnIncentiveTokenAddress();

        uint balance = rainyToken.balanceOf(account);

        rainMaker.claimComp(account);

        uint newBalance = rainyToken.balanceOf(account);
        uint accrued = 0;

        accrued = rainMaker.compAccrued(account);

        uint total = add(accrued, newBalance, "sum comp total");
        uint allocated = sub(total, balance, "sub allocated");

        return RainBalances({
        balance : balance,
        allocated : allocated
        });
    }

    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, errorMessage);
        return c;
    }

    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;
        return c;
    }
}


// File: contracts/Ola/Core/LendingNetwork/OTokens/CToken.sol
pragma solidity ^0.5.16;

import "../Comptroller/ComptrollerInterface.sol";
import "./CTokenInterfaces.sol";
import "../ErrorReporter/ErrorReporter.sol";
import "../../Math/Exponential.sol";
import "../../Interfaces/EIP20Interface.sol";
import "../../OlaPlatform/InterestRateModels/InterestRateModel.sol";

interface RegistryForOToken {
    function isSupportedInterestRateModel(address interestRateModel) external returns (bool);
    function olaBankAddress() external view returns (address payable);
    function blocksBased() external view returns (bool);
}

interface ComptrollerForOToken {
    function adminBankAddress() external view returns (address payable);
}

/**
 * @title Compound's CToken Contract
 * @notice Abstract base for CTokens
 * @author Compound
 */
contract CToken is CTokenStorage, CTokenInterface, CTokenViewInterface, Exponential, TokenErrorReporter {
    /**
     * @notice Initialize the money market
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ EIP-20 name of this token
     * @param symbol_ EIP-20 symbol of this token
     * @param decimals_ EIP-20 decimal precision of this token
     */
    function initialize(ComptrollerInterface comptroller_,
                        InterestRateModel interestRateModel_,
                        uint initialExchangeRateMantissa_,
                        string memory name_,
                        string memory symbol_,
                        uint8 decimals_) public {
        require(msg.sender == admin, "only admin may initialize the market");
        require(accrualBlockNumber == 0 && borrowIndex == 0, "market may only be initialized once");

        // Set initial exchange rate
        initialExchangeRateMantissa = initialExchangeRateMantissa_;
        require(initialExchangeRateMantissa > 0, "initial exchange rate must be greater than zero.");

        // Set the Comptroller
        uint err = _setComptroller(comptroller_);
        require(err == uint(Error.NO_ERROR), "setting comptroller failed");

        // Initialize block number and borrow index (block number mocks depend on Comptroller being set)
        accrualBlockNumber = getBlockNumber();
        accrualBlockTimestamp = getBlockTimestamp();
        borrowIndex = mantissaOne;

        // Set the calculation based flag from the ministry
        RegistryForOToken ministry = RegistryForOToken(comptroller.getRegistry());
        blocksBased = ministry.blocksBased();

        // Set the interest rate model (depends on block number / borrow index)
        err = _setInterestRateModelFresh(interestRateModel_);
        require(err == uint(Error.NO_ERROR), "setting interest rate model failed");

        name = name_;
        symbol = symbol_;
        decimals = decimals_;

        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)
        _notEntered = true;
    }

    /**
     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`
     * @dev Called by both `transfer` and `transferFrom` internally
     * @param spender The address of the account performing the transfer
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param tokens The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {
        /* Fail if transfer not allowed */
        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);
        }

        /* Do not allow self-transfers */
        if (src == dst) {
            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);
        }

        /* Get the allowance, infinite for the account owner */
        uint startingAllowance = 0;
        if (spender == src) {
            startingAllowance = uint(-1);
        } else {
            startingAllowance = transferAllowances[src][spender];
        }

        /* Do the calculations, checking for {under,over}flow */
        MathError mathErr;
        uint allowanceNew;
        uint srcTokensNew;
        uint dstTokensNew;

        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);
        }

        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);
        }

        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        accountTokens[src] = srcTokensNew;
        accountTokens[dst] = dstTokensNew;

        /* Eat some of the allowance (if necessary) */
        if (startingAllowance != uint(-1)) {
            transferAllowances[src][spender] = allowanceNew;
        }

        /* We emit a Transfer event */
        emit Transfer(src, dst, tokens);

        // unused function
         comptroller.transferVerify(address(this), src, dst, tokens);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {
        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);
    }

    /**
     * @notice Transfer `amount` tokens from `src` to `dst`
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {
        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);
    }

    /**
     * @notice Approve `spender` to transfer up to `amount` from `src`
     * @dev This will overwrite the approval amount for `spender`
     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * @param spender The address of the account which may transfer tokens
     * @param amount The number of tokens that are approved (-1 means infinite)
     * @return Whether or not the approval succeeded
     */
    function approve(address spender, uint256 amount) external returns (bool) {
        address src = msg.sender;
        transferAllowances[src][spender] = amount;
        emit Approval(src, spender, amount);
        return true;
    }

    /**
     * @notice Get the current allowance from `owner` for `spender`
     * @param owner The address of the account which owns the tokens to be spent
     * @param spender The address of the account which may transfer tokens
     * @return The number of tokens allowed to be spent (-1 means infinite)
     */
    function allowance(address owner, address spender) external view returns (uint256) {
        return transferAllowances[owner][spender];
    }

    /**
     * @notice Get the token balance of the `owner`
     * @param owner The address of the account to query
     * @return The number of tokens owned by `owner`
     */
    function balanceOf(address owner) external view returns (uint256) {
        return accountTokens[owner];
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @dev This also accrues interest in a transaction
     * @param owner The address of the account to query
     * @return The amount of underlying owned by `owner`
     */
    function balanceOfUnderlying(address owner) external returns (uint) {
        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});
        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);
        require(mErr == MathError.NO_ERROR, "balance could not be calculated");
        return balance;
    }

    /**
     * @notice Get a snapshot of the account's balances, and the cached exchange rate
     * @dev This is used by Comptroller to more efficiently perform liquidity checks.
     * @param account Address of the account to snapshot
     * @return (possible error, token balance, borrow balance, exchange rate mantissa)
     */
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
        uint cTokenBalance = accountTokens[account];
        uint borrowBalance;
        uint exchangeRateMantissa;

        MathError mErr;

        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);
        if (mErr != MathError.NO_ERROR) {
            return (uint(Error.MATH_ERROR), 0, 0, 0);
        }

        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();
        if (mErr != MathError.NO_ERROR) {
            return (uint(Error.MATH_ERROR), 0, 0, 0);
        }

        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);
    }

    /**
     * @dev Function to simply retrieve block number
     *  This exists mainly for inheriting test contracts to stub this result.
     */
    function getBlockNumber() internal view returns (uint) {
        return block.number;
    }

    /**
     * @dev Function to simply retrieve block timestamp
     *  This exists mainly for inheriting test contracts to stub this result.
     */
    function getBlockTimestamp() internal view returns (uint) {
        return block.timestamp;
    }

    /**
     * @notice Returns the current per-block borrow interest rate for this cToken
     * @return The borrow interest rate per block, scaled by 1e18
     */
    function borrowRatePerBlock() external view returns (uint) {
        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);
    }

    /**
     * @notice Returns the current per-block supply interest rate for this cToken
     * @return The supply interest rate per block, scaled by 1e18
     */
    function supplyRatePerBlock() external view returns (uint) {
        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);
    }

    /**
     * @notice Returns the current total borrows plus accrued interest
     * @return The total borrows with interest
     */
    function totalBorrowsCurrent() external nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return totalBorrows;
    }

    /**
     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     * @return The calculated balance
     */
    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return borrowBalanceStored(account);
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return The calculated balance
     */
    function borrowBalanceStored(address account) public view returns (uint) {
        (MathError err, uint result) = borrowBalanceStoredInternal(account);
        require(err == MathError.NO_ERROR, "borrowBalanceStored: borrowBalanceStoredInternal failed");
        return result;
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return (error code, the calculated balance or 0 if error code is non-zero)
     */
    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {
        /* Note: we do not assert that the market is up to date */
        MathError mathErr;
        uint principalTimesIndex;
        uint result;

        /* Get borrowBalance and borrowIndex */
        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];

        /* If borrowBalance = 0 then borrowIndex is likely also 0.
         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.
         */
        if (borrowSnapshot.principal == 0) {
            return (MathError.NO_ERROR, 0);
        }

        /* Calculate new borrow balance using the interest index:
         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex
         */
        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        return (MathError.NO_ERROR, result);
    }

    /**
     * @notice Accrue interest then return the up-to-date exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateCurrent() public nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return exchangeRateStored();
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateStored() public view returns (uint) {
        (MathError err, uint result) = exchangeRateStoredInternal();
        require(err == MathError.NO_ERROR, "exchangeRateStored: exchangeRateStoredInternal failed");
        return result;
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return (error code, calculated exchange rate scaled by 1e18)
     */
    function exchangeRateStoredInternal() internal view returns (MathError, uint) {
        uint _totalSupply = totalSupply;
        if (_totalSupply == 0) {
            /*
             * If there are no tokens minted:
             *  exchangeRate = initialExchangeRate
             */
            return (MathError.NO_ERROR, initialExchangeRateMantissa);
        } else {
            /*
             * Otherwise:
             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply
             */
            uint totalCash = getCashPrior();
            uint cashPlusBorrowsMinusReserves;
            Exp memory exchangeRate;
            MathError mathErr;

            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);
            if (mathErr != MathError.NO_ERROR) {
                return (mathErr, 0);
            }

            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);
            if (mathErr != MathError.NO_ERROR) {
                return (mathErr, 0);
            }

            return (MathError.NO_ERROR, exchangeRate.mantissa);
        }
    }

    /**
     * @notice Get cash balance of this cToken in the underlying asset
     * @return The quantity of underlying asset owned by this contract
     */
    function getCash() external view returns (uint) {
        return getCashPrior();
    }

    /**
     * @notice Get the accrual block number of this cToken
     * @return The accrual block number
     */
    function getAccrualBlockNumber() external view returns (uint) {
        return accrualBlockNumber;
    }

    /**
     * @notice Applies accrued interest to total borrows and reserves
     * @dev This calculates interest accrued from the last checkpointed block
     *   up to the current block and writes new checkpoint to storage.
     */
    function accrueInterest() public returns (uint) {
        /* Remember the initial block number */
        uint currentBlockNumber = getBlockNumber();
        uint accrualBlockNumberPrior = accrualBlockNumber;
        uint currentBlockTimestamp = getBlockTimestamp();

        /* Short-circuit accumulating 0 interest */
        if (accrualBlockNumberPrior == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

        // OLA_ADDITIONS : Distinction between time and block based calculations
        /* Calculate the number of blocks elapsed since the last accrual */
        MathError mathErr;
        uint delta;

        if (blocksBased) {
            (mathErr, delta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);
        } else {
            // This variable is defined here due to solidity limits
            uint accrualBlockTimestampPrior = accrualBlockTimestamp;

            /* Short-circuit accumulating 0 interest on time based chains + extra safety for weird timestamps */
            if (currentBlockTimestamp <= accrualBlockTimestampPrior) {
                return uint(Error.NO_ERROR);
            }

            (mathErr, delta) = subUInt(currentBlockTimestamp, accrualBlockTimestampPrior);
        }
        require(mathErr == MathError.NO_ERROR, "could not calculate delta");

        /* Read the previous values out of storage */
        uint cashPrior = getCashPrior();
        uint borrowsPrior = totalBorrows;
        uint reservesPrior = totalReserves;
        uint borrowIndexPrior = borrowIndex;

        /* Calculate the current borrow interest rate */
        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);
        require(borrowRateMantissa <= borrowRateMaxMantissa, "borrow rate is absurdly high");

        /*
         * Calculate the interest accumulated into borrows and reserves and the new index:
         *  simpleInterestFactor = borrowRate * delta
         *  interestAccumulated = simpleInterestFactor * totalBorrows
         *  totalBorrowsNew = interestAccumulated + totalBorrows
         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves
         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex
         */

        Exp memory simpleInterestFactor;
        uint interestAccumulated;
        uint totalBorrowsNew;
        uint totalReservesNew;
        uint borrowIndexNew;

        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), delta);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));
        }

        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));
        }

        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));
        }

        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));
        }

        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We write the previously calculated values into storage */
        accrualBlockNumber = currentBlockNumber;
        accrualBlockTimestamp = currentBlockTimestamp;
        borrowIndex = borrowIndexNew;
        totalBorrows = totalBorrowsNew;
        totalReserves = totalReservesNew;

        /* We emit an AccrueInterest event */
        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param mintAmount The amount of the underlying asset to supply
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.
     */
    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);
        }
        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to
        return mintFresh(msg.sender, mintAmount);
    }

    struct MintLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint mintTokens;
        uint totalSupplyNew;
        uint accountTokensNew;
        uint actualMintAmount;
    }

    /**
     * @notice User supplies assets into the market and receives cTokens in exchange
     * @dev Assumes interest has already been accrued up to the current block
     * @param minter The address of the account which is supplying the assets
     * @param mintAmount The amount of the underlying asset to supply
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.
     */
    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {
        /* Fail if mint not allowed */
        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);
        }

        MintLocalVars memory vars;

        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();
        if (vars.mathErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         *  We call `doTransferIn` for the minter and the mintAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if
         *  side-effects occurred. The function returns the amount actually transferred,
         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`
         *  of cash.
         */
        vars.actualMintAmount = doTransferIn(minter, mintAmount);

        /*
         * We get the current exchange rate and calculate the number of cTokens to be minted:
         *  mintTokens = actualMintAmount / exchangeRate
         */

        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));
        require(vars.mathErr == MathError.NO_ERROR, "MINT_EXCHANGE_CALCULATION_FAILED");

        /*
         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:
         *  totalSupplyNew = totalSupply + mintTokens
         *  accountTokensNew = accountTokens[minter] + mintTokens
         */
        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);
        require(vars.mathErr == MathError.NO_ERROR, "MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED");

        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);
        require(vars.mathErr == MathError.NO_ERROR, "MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED");

        /* We write previously calculated values into storage */
        totalSupply = vars.totalSupplyNew;
        accountTokens[minter] = vars.accountTokensNew;

        /* We emit a Mint event, and a Transfer event */
        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);
        emit Transfer(address(this), minter, vars.mintTokens);

        /* We call the defense hook */
        // unused function
        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);

        return (uint(Error.NO_ERROR), vars.actualMintAmount);
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed
            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);
        }
        // redeemFresh emits redeem-specific logs on errors, so we don't need to
        return redeemFresh(msg.sender, redeemTokens, 0);
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to receive from redeeming cTokens
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed
            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);
        }
        // redeemFresh emits redeem-specific logs on errors, so we don't need to
        return redeemFresh(msg.sender, 0, redeemAmount);
    }

    struct RedeemLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint redeemTokens;
        uint redeemAmount;
        uint totalSupplyNew;
        uint accountTokensNew;
    }

    /**
     * @notice User redeems cTokens in exchange for the underlying asset
     * @dev Assumes interest has already been accrued up to the current block
     * @param redeemer The address of the account which is redeeming the tokens
     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)
     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {
        require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of redeemTokensIn or redeemAmountIn must be zero");

        RedeemLocalVars memory vars;

        /* exchangeRate = invoke Exchange Rate Stored() */
        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));
        }

        /* If redeemTokensIn > 0: */
        if (redeemTokensIn > 0) {
            /*
             * We calculate the exchange rate and the amount of underlying to be redeemed:
             *  redeemTokens = redeemTokensIn
             *  redeemAmount = redeemTokensIn x exchangeRateCurrent
             */
            vars.redeemTokens = redeemTokensIn;

            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);
            if (vars.mathErr != MathError.NO_ERROR) {
                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));
            }
        } else {
            /*
             * We get the current exchange rate and calculate the amount to be redeemed:
             *  redeemTokens = redeemAmountIn / exchangeRate
             *  redeemAmount = redeemAmountIn
             */

            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));
            if (vars.mathErr != MathError.NO_ERROR) {
                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));
            }

            vars.redeemAmount = redeemAmountIn;
        }

        /* Fail if redeem not allowed */
        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);
        }

        /*
         * We calculate the new total supply and redeemer balance, checking for underflow:
         *  totalSupplyNew = totalSupply - redeemTokens
         *  accountTokensNew = accountTokens[redeemer] - redeemTokens
         */
        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        /* Fail gracefully if protocol has insufficient cash */
        if (getCashPrior() < vars.redeemAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We invoke doTransferOut for the redeemer and the redeemAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken has redeemAmount less of cash.
         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
         */
        doTransferOut(redeemer, vars.redeemAmount);

        /* We write previously calculated values into storage */
        totalSupply = vars.totalSupplyNew;
        accountTokens[redeemer] = vars.accountTokensNew;

        /* We emit a Transfer event, and a Redeem event */
        emit Transfer(redeemer, address(this), vars.redeemTokens);
        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);

        /* We call the defense hook */
        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {
        uint error = accrueInterest();

        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);
        }
        // borrowFresh emits borrow-specific logs on errors, so we don't need to
        return borrowFresh(msg.sender, borrowAmount);
    }

    struct BorrowLocalVars {
        MathError mathErr;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
    }

    /**
      * @notice Users borrow assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {
        /* Fail if borrow not allowed */
        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);

        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);
        }


        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);
        }

        /* Fail gracefully if protocol has insufficient underlying cash */
        if (getCashPrior() < borrowAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);
        }

        BorrowLocalVars memory vars;

        /*
         * We calculate the new borrower and total borrow balances, failing on overflow:
         *  accountBorrowsNew = accountBorrows + borrowAmount
         *  totalBorrowsNew = totalBorrows + borrowAmount
         */
        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We invoke doTransferOut for the borrower and the borrowAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken borrowAmount less of cash.
         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
         */
        doTransferOut(borrower, borrowAmount);

        /* We write the previously calculated values into storage */
        accountBorrows[borrower].principal = vars.accountBorrowsNew;
        accountBorrows[borrower].interestIndex = borrowIndex;
        totalBorrows = vars.totalBorrowsNew;

        /* We emit a Borrow event */
        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

        /* We call the defense hook */
        // unused function
        // Comptroller.borrowVerify(address(this), borrower, borrowAmount);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sender repays their own borrow
     * @param repayAmount The amount to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);
        }
        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to
        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);
    }

    /**
     * @notice Sender repays a borrow belonging to borrower
     * @param borrower the account with the debt being payed off
     * @param repayAmount The amount to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);
        }
        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to
        return repayBorrowFresh(msg.sender, borrower, repayAmount);
    }

    struct RepayBorrowLocalVars {
        Error err;
        MathError mathErr;
        uint repayAmount;
        uint borrowerIndex;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
        uint actualRepayAmount;
    }

    /**
     * @notice Borrows are repaid by another user (possibly the borrower).
     * @param payer the account paying off the borrow
     * @param borrower the account with the debt being payed off
     * @param repayAmount the amount of undelrying tokens being returned
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {
        /* Fail if repayBorrow not allowed */
        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);
        }

        RepayBorrowLocalVars memory vars;

        /* We remember the original borrowerIndex for verification purposes */
        vars.borrowerIndex = accountBorrows[borrower].interestIndex;

        /* We fetch the amount the borrower owes, with accumulated interest */
        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);
        if (vars.mathErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);
        }

        /* If repayAmount == -1, repayAmount = accountBorrows */
        if (repayAmount == uint(-1)) {
            vars.repayAmount = vars.accountBorrows;
        } else {
            vars.repayAmount = repayAmount;
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We call doTransferIn for the payer and the repayAmount
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken holds an additional repayAmount of cash.
         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.
         *   it returns the amount actually transferred, in case of a fee.
         */
        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);

        /*
         * We calculate the new borrower and total borrow balances, failing on underflow:
         *  accountBorrowsNew = accountBorrows - actualRepayAmount
         *  totalBorrowsNew = totalBorrows - actualRepayAmount
         */
        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");

        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");

        /* We write the previously calculated values into storage */
        accountBorrows[borrower].principal = vars.accountBorrowsNew;
        accountBorrows[borrower].interestIndex = borrowIndex;
        totalBorrows = vars.totalBorrowsNew;

        /* We emit a RepayBorrow event */
        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

        /* We call the defense hook */
        // unused function
        // Comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);

        return (uint(Error.NO_ERROR), vars.actualRepayAmount);
    }

    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed
            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);
        }

        error = cTokenCollateral.accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed
            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);
        }

        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to
        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);
    }

    /**
     * @notice The liquidator liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param liquidator The address repaying the borrow and seizing collateral
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {
        /* Fail if liquidate not allowed */
        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);
        }

        /* Verify cTokenCollateral market's block number equals current block number */
        if (cTokenCollateral.getAccrualBlockNumber() != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);
        }

        /* Fail if borrower = liquidator */
        if (borrower == liquidator) {
            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);
        }

        /* Fail if repayAmount = 0 */
        if (repayAmount == 0) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);
        }

        /* Fail if repayAmount = -1 */
        if (repayAmount == uint(-1)) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);
        }


        /* Fail if repayBorrow fails */
        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);
        if (repayBorrowError != uint(Error.NO_ERROR)) {
            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We calculate the number of collateral tokens that will be seized */
        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);
        require(amountSeizeError == uint(Error.NO_ERROR), "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");

        /* Revert if borrower collateral token balance < seizeTokens */
        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, "LIQUIDATE_SEIZE_TOO_MUCH");

        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call
        uint seizeError;
        if (address(cTokenCollateral) == address(this)) {
            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);
        } else {
            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);
        }

        /* Revert if seize tokens fails (since we cannot be sure of side effects) */
        require(seizeError == uint(Error.NO_ERROR), "token seizure failed");

        /* We emit a LiquidateBorrow event */
        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);

        /* We call the defense hook */
        // unused function
        // Comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);

        return (uint(Error.NO_ERROR), actualRepayAmount);
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Will fail unless called by another cToken during the process of liquidation.
     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {
        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.
     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.
     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
        /* Fail if seize not allowed */
        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);
        }

        /* Fail if borrower = liquidator */
        if (borrower == liquidator) {
            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);
        }

        MathError mathErr;
        uint borrowerTokensNew;
        uint liquidatorTokensNew;

        /*
         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:
         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens
         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens
         */
        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));
        }

        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We write the previously calculated values into storage */
        accountTokens[borrower] = borrowerTokensNew;
        accountTokens[liquidator] = liquidatorTokensNew;

        /* Emit a Transfer event */
        emit Transfer(borrower, liquidator, seizeTokens);

        /* We call the defense hook */
        // Transfer verify is required here due to tokens being transferred, and have to keep the
        // ACC accounting in check
        // This works, because the 'borrower' has to be in this market. and so, the active collateral usage can either remain unchanged
        // (if the liquidator is also in the market) or reduce (if the liquidator is not in the market)
        comptroller.transferVerify(address(this), borrower, liquidator, seizeTokens);

        /* We call the defense hook */
        // unused function
        // Comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);

        return uint(Error.NO_ERROR);
    }


    /*** Admin Functions ***/

    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
        // Check caller = admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);
        }

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() external returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        if (msg.sender != pendingAdmin || msg.sender == address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);
        }

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Made internal and removes Admin check.
      * @notice Sets a new Comptroller for the market
      * @dev Admin function to set a new Comptroller
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {
        ComptrollerInterface oldComptroller = comptroller;
        // Ensure invoke Comptroller.isComptroller() returns true
        require(newComptroller.isComptroller(), "marker method returned false");

        // Set market's Comptroller to newComptroller
        comptroller = newComptroller;

        // Emit NewComptroller(oldComptroller, newComptroller)
        emit NewComptroller(oldComptroller, newComptroller);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh
      * @dev Admin function to accrue interest and set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.
            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);
        }
        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.
        return _setReserveFactorFresh(newReserveFactorMantissa);
    }

    /**
      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)
      * @dev Admin function to set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);
        }

        // Verify market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);
        }

        // Check newReserveFactor ≤ maxReserveFactor
        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {
            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
        }

        // OLA_ADDITIONS :This constraint
        // Check newReserveFactor >= minReserveFactor
        if (newReserveFactorMantissa < reserveFactorMinMantissa) {
            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
        }

        uint oldReserveFactorMantissa = reserveFactorMantissa;
        reserveFactorMantissa = newReserveFactorMantissa;

        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Accrues interest and reduces reserves by transferring to admin
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.
            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
        }



        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.
        return _reduceReservesFresh(reduceAmount);
    }

    /**
     * @notice Reduces reserves by transferring to the LeN admin and to Ola bank their respective shares
     * @dev Requires fresh interest accrual
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
        // totalReserves - reduceAmount
        uint totalReservesNew;

        // OLA_ADDITIONS : Allowing anyone to reduce reserves
        // Check caller is admin
        // if (msg.sender != admin) {
        //     return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
        // }

        // We fail gracefully unless market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
        }

        // Fail gracefully if protocol has insufficient underlying cash
        if (getCashPrior() < reduceAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
        }

        // Check reduceAmount ≤ reserves[n] (totalReserves)
        if (reduceAmount > totalReserves) {
            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
        }

        // OLA_ADDITIONS : Dividing the reduced amount between the Admin and Ola (+validations)
        //                 Important to notice that we have added Math calculations to this function.
        //                 Where as before, it only used pre-calculated numbers.
        MathError mathErr;
        uint adminPart;
        uint olaPart;
        uint olaReserveFactor = fetchOlaReserveFactorMantissa();
        address payable olaBankAddress = fetchOlaBankAddress();
        address payable adminBankAddress = fetchAdminBankAddress();

        // Calculate olaPart
        (mathErr, olaPart) = mulScalarTruncate(Exp({mantissa: olaReserveFactor}), reduceAmount);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED, uint(mathErr));
        }

        // Sanity check, should never be a problem in a well parameterized system
        if (olaPart >= reduceAmount) {
            return fail(Error.BAD_SYSTEM_PARAMS, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        // Calculate admin part
        adminPart = reduceAmount - olaPart;
        // We checked olaPart < reduceAmount above, so this should never revert.
        require(adminPart < reduceAmount, "reduce reserves unexpected adminPart underflow");

        totalReservesNew = totalReserves - reduceAmount;
        // We checked reduceAmount <= totalReserves above, so this should never revert.
        require(totalReservesNew <= totalReserves, "reduce reserves unexpected underflow");

        // Store reserves[n+1] = reserves[n] - reduceAmount
        totalReserves = totalReservesNew;

        // OLA_ADDITIONS : Transfer reserves to both admin and Ola bank addresses
        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
        doTransferOut(adminBankAddress, adminPart);
        doTransferOut(olaBankAddress, olaPart);

        emit ReservesReduced(adminBankAddress, adminPart, olaBankAddress, olaPart, totalReservesNew);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh
     * @dev Admin function to accrue interest and update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed
            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);
        }
        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.
        return _setInterestRateModelFresh(newInterestRateModel);
    }

    /**
     * @notice updates the interest rate model (*requires fresh interest accrual)
     * @dev Admin function to update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {

        // Used to store old model for use in the event that is emitted on success
        InterestRateModel oldInterestRateModel;

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);
        }

        // We fail gracefully unless market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);
        }

        // Ensure interest rate model is an approved contracts
        RegistryForOToken registry = RegistryForOToken(comptroller.getRegistry());

        require(registry.isSupportedInterestRateModel(address(newInterestRateModel)), "Unapproved interest rate model");

        // Track the market's current interest rate model
        oldInterestRateModel = interestRateModel;

        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true
        require(newInterestRateModel.isInterestRateModel(), "marker method returned false");

        // Set the interest rate model to newInterestRateModel
        interestRateModel = newInterestRateModel;

        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)
        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);

        return uint(Error.NO_ERROR);
    }

    /*** Safe Token ***/

    /**
     * @notice Gets balance of this contract in terms of the underlying
     * @dev This excludes the value of the current message, if any
     * @return The quantity of underlying owned by this contract
     */
    function getCashPrior() internal view returns (uint);

    /**
     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.
     *  This may revert due to insufficient balance or insufficient allowance.
     */
    function doTransferIn(address from, uint amount) internal returns (uint);

    /**
     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.
     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.
     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.
     */
    function doTransferOut(address payable to, uint amount) internal;

    /**
     * OLA_ADDITIONS: This function
     * @dev Returns the ola reserves factor.
     */
    function fetchOlaReserveFactorMantissa() internal pure returns (uint) {
        return olaReserveFactorMantissa;
    }

    /**
     * OLA_ADDITIONS: This function
     * @dev Fetches the ola bank address.
     */
    function fetchOlaBankAddress() internal returns (address payable) {
        return RegistryForOToken(comptroller.getRegistry()).olaBankAddress();
    }

    /**
     * OLA_ADDITIONS: This function
     * @dev Fetches the admin bank address.
     */
    function fetchAdminBankAddress() internal view returns (address payable) {
        return ComptrollerForOToken(address(comptroller)).adminBankAddress();
    }

    /*** Reentrancy Guard ***/

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     */
    modifier nonReentrant() {
        require(_notEntered, "re-entered");
        _notEntered = false;
        _;
        _notEntered = true; // get a gas-refund post-Istanbul
    }
}


// File: contracts/Ola/Core/LendingNetwork/PriceOracle/PriceOracle.sol
pragma solidity ^0.5.16;

import "../OTokens/CToken.sol";

contract PriceOracle {
    /// @notice Indicator that this is a PriceOracle contract (for inspection)
    bool public constant isPriceOracle = true;

    /**
     * OLA_ADDITIONS : This function
     * @notice Get the price an asset
     * @param asset The asset to get the price of
     * @return The asset price mantissa (scaled by 1e18).
     *  Zero means the price is unavailable.
     */
    function getAssetPrice(address asset) external view returns (uint);

    /**
     * OLA_ADDITIONS : This function
     * @notice Get the price update timestamp for the asset
     * @param asset The asset address for price update timestamp retrieval.
     * @return Last price update timestamp for the asset
     */
    function getAssetPriceUpdateTimestamp(address asset) external view returns (uint);

    /**
      * @notice Get the underlying price of a cToken asset
      * @param cToken The cToken to get the underlying price of
      * @return The underlying asset price mantissa (scaled by 1e18).
      *  Zero means the price is unavailable.
      */
    function getUnderlyingPrice(CToken cToken) external view returns (uint);

    /**
     * OLA_ADDITIONS : This function
     * @notice Get the price update timestamp for the cToken underlying
     * @param cToken The cToken address for price update timestamp retrieval.
     * @return Last price update timestamp for the cToken underlying asset
     */
    function getUnderlyingPriceUpdateTimestamp(address cToken) external view returns (uint);
}

// File: contracts/Ola/Core/LendingNetwork/Comptroller/ComptrollerInterface.sol
pragma solidity ^0.5.16;

import "../OTokens/CToken.sol";

contract ComptrollerInterface {
    /// @notice Indicator that this is a Comptroller contract (for inspection)
    bool public constant isComptroller = true;

    /*** OLA_ADDITIONS : registry getter ***/
    /*** Registry ***/
    function getRegistry() external view returns (address);

    /*** Assets supported by the Comptroller ***/
    function getAllMarkets() public view returns (CToken[] memory);

    /*** OLA_ADDITIONS : peripheral checkers ***/
    /*** Peripherals ***/
    function hasRainMaker() view public returns (bool);
    function hasBouncer() view public returns (bool);

    /*** Assets You Are In ***/

    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);
    function exitMarket(address cToken) external returns (uint);

    /*** Policy Hooks ***/

    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);
    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;

    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);
    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;

    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);
    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;

    function repayBorrowAllowed(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint);
    function repayBorrowVerify(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount,
        uint borrowerIndex) external;

    function liquidateBorrowAllowed(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint);
    function liquidateBorrowVerify(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount,
        uint seizeTokens) external;

    function seizeAllowed(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint);
    function seizeVerify(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external;

    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);
    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;

    /*** Liquidity/Liquidation Calculations ***/

    function liquidateCalculateSeizeTokens(
        address cTokenBorrowed,
        address cTokenCollateral,
        uint repayAmount) external view returns (uint, uint);
}


// File: contracts/Ola/Core/LendingNetwork/OTokens/CTokenInterfaces.sol
pragma solidity ^0.5.16;

import "../Comptroller/ComptrollerInterface.sol";
import "../../OlaPlatform/InterestRateModels/InterestRateModel.sol";
import "../../Interfaces/EIP20NonStandardInterface.sol";

/**
 * OLA_ADDITIONS : This base admin storage.
 */
contract CTokenAdminStorage {
    /**
     * @notice Administrator for this contract
     */
    address payable public admin;

    /**
     * @notice Pending administrator for this contract
     */
    address payable public pendingAdmin;

    /**
     * @notice Contract which oversees inter-cToken operations
     */
    ComptrollerInterface public comptroller;

    /**
     * @notice Implementation address for this contract
     */
    address public implementation;

    // OLA_ADDITIONS : Contract hash name
    bytes32 public contractNameHash;
}

/**
 * @notice DO NOT ADD ANY MORE STORAGE VARIABLES HERE (add them to their respective type storage)
 */
contract CTokenStorage is CTokenAdminStorage {
    /**
     * @dev Guard variable for re-entrancy checks
     */
    bool internal _notEntered;

    /**
     * @notice EIP-20 token name for this token
     */
    string public name;

    /**
     * @notice EIP-20 token symbol for this token
     */
    string public symbol;

    /**
     * @notice EIP-20 token decimals for this token
     */
    uint8 public decimals;

    /**
     * @notice Underlying asset for this CToken
     */
    address public underlying;

    // @notice Indicates if the calculations should be blocks or time based
    bool public blocksBased;

    /**
     * @notice Model which tells what the current interest rate should be
     */
    InterestRateModel public interestRateModel;

    /**
     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)
     */
    uint internal initialExchangeRateMantissa;

    /**
     * @notice Fraction of interest currently set aside for reserves
     */
    uint public reserveFactorMantissa;

    /**
     * @notice Block number that interest was last accrued at
     */
    uint public accrualBlockNumber;

    /**
     * @notice Block number that interest was last accrued at
     */
    uint public accrualBlockTimestamp;

    /**
     * @notice Accumulator of the total earned interest rate since the opening of the market
     */
    uint public borrowIndex;

    /**
     * @notice Total amount of outstanding borrows of the underlying in this market
     */
    uint public totalBorrows;

    /**
     * OLA_ADDITIONS : Removed option to 'add reserves' as it makes no sense when reducing reserves
     *                 sends a part to Ola Bank.
     * @notice Total amount of reserves of the underlying held in this market
     */
    uint public totalReserves;

    /**
     * @notice Total number of tokens in circulation
     */
    uint public totalSupply;

    /**
     * @notice Official record of token balances for each account
     */
    mapping (address => uint) internal accountTokens;

    /**
     * @notice Approved token transfer amounts on behalf of others
     */
    mapping (address => mapping (address => uint)) internal transferAllowances;

    /**
     * @notice Container for borrow balance information
     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action
     * @member interestIndex Global borrowIndex as of the most recent balance-changing action
     */
    struct BorrowSnapshot {
        uint principal;
        uint interestIndex;
    }

    /**
     * @notice Mapping of account addresses to outstanding borrow balances
     */
    mapping(address => BorrowSnapshot) internal accountBorrows;

    // IMPORTANT : DO NOT ADD ANY MORE STORAGE VARIABLES HERE (add them to their respective type storage)
}

contract CTokenDelegatorInterface {

    /*** Implementation Events ***/

    /**
     * @notice Emitted when implementation is changed
     */
    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);

    /**
     * @notice Emitted when implementation is not changed under a system version update
     */
    event ImplementationDidNotChange(address indexed implementation);


    /*** Implementation functions ***/

    // OLA_ADDITIONS : Update implementation from the Registry
    function updateImplementationFromRegistry(bool allowResign, bytes calldata becomeImplementationData) external returns (bool);
}

contract CTokenInterface {
    // OLA_ADDITIONS : "Underlying field"
    address constant public nativeCoinUnderlying = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

    /**
     * OLA_ADDITIONS : This field
     * @notice This value is hard coded to 0.5 (50% for the Ola ecosystem and the LeN owner each)
     */
    uint constant public olaReserveFactorMantissa = 0.5e18;

    /**
     * @notice Indicator that this is a CToken contract (for inspection)
     */
    bool public constant isCToken = true;

    /**
     * @notice Maximum borrow rate that can ever be applied (.0005% / block)
     */
    uint internal constant borrowRateMaxMantissa = 0.0005e16;

    /**
     * @notice Maximum fraction of interest that can be set aside for reserves
     */
    uint internal constant reserveFactorMaxMantissa = 0.3e18;

    /**
     * OLA_ADDITIONS : This value
     * @notice Minimum fraction of interest that can be set aside for reserves
     */
    uint internal constant reserveFactorMinMantissa = 0.05e18;

    /*** Market Events ***/

    /**
     * @notice Event emitted when interest is accrued
     */
    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);

    /**
     * @notice Event emitted when tokens are minted
     */
    event Mint(address minter, uint mintAmount, uint mintTokens);

    /**
     * @notice Event emitted when tokens are redeemed
     */
    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);

    /**
     * @notice Event emitted when underlying is borrowed
     */
    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);

    /**
     * @notice Event emitted when a borrow is repaid
     */
    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);

    /**
     * @notice Event emitted when a borrow is liquidated
     */
    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);


    /*** Admin Events ***/

    /**
     * @notice Event emitted when pendingAdmin is changed
     */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated
     */
    event NewAdmin(address oldAdmin, address newAdmin);

    /**
     * @notice Event emitted when Comptroller is changed
     */
    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);

    /**
     * @notice Event emitted when interestRateModel is changed
     */
    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);

    /**
     * @notice Event emitted when the reserve factor is changed
     */
    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);

    // TODO : Change to 'adminBank'
    /**
     * @notice Event emitted when the reserves are reduced
     */
    event ReservesReduced(address admin, uint adminPart, address olaBank, uint olaPart, uint newTotalReserves);

    /**
     * @notice EIP20 Transfer event
     */
    event Transfer(address indexed from, address indexed to, uint amount);

    /**
     * @notice EIP20 Approval event
     */
    event Approval(address indexed owner, address indexed spender, uint amount);

    /**
     * @notice Failure event
     */
    event Failure(uint error, uint info, uint detail);

    /*** User Interface ***/

    function transfer(address dst, uint amount) external returns (bool);
    function transferFrom(address src, address dst, uint amount) external returns (bool);
    function approve(address spender, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function balanceOfUnderlying(address owner) external returns (uint);
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);
    function borrowBalanceStored(address account) public view returns (uint);
    function exchangeRateStored() public view returns (uint);
    function getAccrualBlockNumber() external view returns (uint);
    function accrueInterest() public returns (uint);
    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);

    /*** Admin Functions ***/

    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);
    function _acceptAdmin() external returns (uint);
    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);
    function _reduceReserves(uint reduceAmount) external returns (uint);
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);
}

/**
 * View functions that are not used by the core contracts.
 */
contract CTokenViewInterface {
    /*** View Interface ***/
    function borrowRatePerBlock() external view returns (uint);
    function supplyRatePerBlock() external view returns (uint);
    function totalBorrowsCurrent() external returns (uint);

    /**
     * @notice Used by the Maximilion
     */
    function borrowBalanceCurrent(address account) external returns (uint);
    function exchangeRateCurrent() public returns (uint);
    function getCash() external view returns (uint);
}

contract CErc20Interface {
    /*** User Interface ***/

    function mint(uint mintAmount) external returns (uint);
    function redeem(uint redeemTokens) external returns (uint);
    function redeemUnderlying(uint redeemAmount) external returns (uint);
    function borrow(uint borrowAmount) external returns (uint);
    function repayBorrow(uint repayAmount) external returns (uint);
    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);
    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);
    function sweepToken(EIP20NonStandardInterface token) external;
}

contract CErc20StorageV0_01 {}

contract CErc20StorageV0_02 is CErc20StorageV0_01 {}

contract ONativeInterface {
    /*** User Interface ***/

    function mint() external payable;
    function redeem(uint redeemTokens) external returns (uint);
    function redeemUnderlying(uint redeemAmount) external returns (uint);
    function borrow(uint borrowAmount) external returns (uint);
    function repayBorrow() external payable;
    function repayBorrowBehalf(address borrower) external payable;
    function liquidateBorrow(address borrower, CTokenInterface cTokenCollateral) external payable;
    function sweepToken(EIP20NonStandardInterface token) external;
}

contract CEtherStorageV0_01 {}

contract CEtherStorageV0_02 is CEtherStorageV0_01 {}

contract CDelegateInterface {
    /**
     * @notice Called by the delegator on a delegate to initialize it for duty
     * @dev Should revert if any issues arise which make it unfit for delegation
     * @param data The encoded bytes data for any initialization
     */
    function _becomeImplementation(bytes memory data) public;

    /**
     * @notice Called by the delegator on a delegate to forfeit its responsibility
     */
    function _resignImplementation() public;
}

contract CLPStakingStorageV0_05 {

    /**
     * @notice The token that is distributed via the farm
     */
    address public rewardToken;

    /**
     * @notice The farm contract
     */
    address public farmAddress;

    /**
     * @notice The pool id in the farm
     */
    uint public pid;

    /**
     * @notice The market's last updated staking index
     */
    uint public marketStakingIndex;

    /// @notice The Reward Token index for each supplier as of the last time they accrued rewards
    mapping(address => uint) public supplierStakingIndex;

    /// @notice The Reward Token accrued but not yet transferred to each supplier
    mapping(address => uint) public rewardsAccrued;
}

contract CLPStakingInterfaceV0_05 {
    /**
     * @notice Event emitted when rewards-interest is accrued
     */
    event AccrueRewardsInterest(uint oldStakingIndex, uint newStakingIndex, uint oldReserves, uint newReserves);

    event DistributeSupplierRewards(address supplier, uint supplierDelta, uint marketStakignIndex);
}

// File: contracts/Ola/Core/LendingNetwork/ErrorReporter/ErrorReporter.sol
pragma solidity ^0.5.16;

contract ComptrollerErrorReporter {
    enum Error {
        NO_ERROR,
        UNAUTHORIZED,
        COMPTROLLER_MISMATCH,
        INSUFFICIENT_SHORTFALL,
        INSUFFICIENT_LIQUIDITY,
        INVALID_CLOSE_FACTOR,
        INVALID_COLLATERAL_FACTOR,
        INVALID_LIQUIDATION_INCENTIVE,
        MARKET_NOT_ENTERED, // no longer possible
        MARKET_NOT_LISTED,
        MARKET_ALREADY_LISTED,
        MATH_ERROR,
        NONZERO_BORROW_BALANCE,
        PRICE_ERROR,
        REJECTION,
        SNAPSHOT_ERROR,
        TOO_MANY_ASSETS,
        TOO_MUCH_REPAY,

        // OLA_ADDITIONS : All Enums from here
        NOT_IN_MARKET,
        TOO_LITTLE_BORROW,
        IN_FRESH_LIQUIDATION_LIMITED_PERIOD,
        INVALID_LIQUIDATION_FACTOR,
        BORROWED_AGAINST_FAILED,
        TOTAL_BORROWED_AGAINST_TOO_HIGH,
        TOO_MUCH_COLLATERAL_ACTIVATION,

        // V0.02
        NOT_APPROVED_TO_MINT,
        NOT_APPROVED_TO_BORROW
    }

    enum FailureInfo {
        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,
        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,
        EXIT_MARKET_BALANCE_OWED,
        EXIT_MARKET_REJECTION,
        SET_CLOSE_FACTOR_OWNER_CHECK,
        SET_CLOSE_FACTOR_VALIDATION,
        SET_COLLATERAL_FACTOR_OWNER_CHECK,
        SET_COLLATERAL_FACTOR_NO_EXISTS,
        SET_COLLATERAL_FACTOR_VALIDATION,
        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,
        SET_IMPLEMENTATION_OWNER_CHECK,
        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,
        SET_LIQUIDATION_INCENTIVE_VALIDATION,
        SET_MAX_ASSETS_OWNER_CHECK,
        SET_PENDING_ADMIN_OWNER_CHECK,
        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,
        SET_PRICE_ORACLE_OWNER_CHECK,
        SUPPORT_MARKET_EXISTS,
        SUPPORT_MARKET_OWNER_CHECK,
        SET_PAUSE_GUARDIAN_OWNER_CHECK,

        // OLA_ADDITIONS : All Enums from here
        SET_LIQUIDATION_INCENTIVE_NO_EXISTS,
        SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE,
        SET_LIQUIDATION_FACTOR_OWNER_CHECK,
        SET_LIQUIDATION_FACTOR_NO_EXISTS,
        SET_LIQUIDATION_FACTOR_VALIDATION,
        SET_LIQUIDATION_FACTOR_WITHOUT_PRICE,
        SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR,
        SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR,
        SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR,
        SET_RAIN_MAKER_OWNER_CHECK,
        ENTER_MARKET_NOT_ALLOWED,
        UPDATE_LN_VERSION_ADMIN_OWNER_CHECK,
        // V0.002
        SET_BOUNCER_OWNER_CHECK,
        SET_LIMIT_MINTING_OWNER_CHECK,
        SET_LIMIT_BORROWING_OWNER_CHECK,
        SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK,
        SUPPORT_NEW_MARKET_OWNER_CHECK,
        SUPPORT_NEW_MARKET_COMBINATION_CHECK
    }

    /**
      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary
      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.
      **/
    event Failure(uint error, uint info, uint detail);

    /**
      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator
      */
    function fail(Error err, FailureInfo info) internal returns (uint) {
        emit Failure(uint(err), uint(info), 0);

        return uint(err);
    }

    /**
      * @dev use this when reporting an opaque error from an upgradeable collaborator contract
      */
    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {
        emit Failure(uint(err), uint(info), opaqueError);

        return uint(err);
    }
}

contract TokenErrorReporter {
    enum Error {
        NO_ERROR,
        UNAUTHORIZED,
        BAD_INPUT,
        COMPTROLLER_REJECTION,
        COMPTROLLER_CALCULATION_ERROR,
        INTEREST_RATE_MODEL_ERROR,
        INVALID_ACCOUNT_PAIR,
        INVALID_CLOSE_AMOUNT_REQUESTED,
        INVALID_COLLATERAL_FACTOR,
        MATH_ERROR,
        MARKET_NOT_FRESH,
        MARKET_NOT_LISTED,
        TOKEN_INSUFFICIENT_ALLOWANCE,
        TOKEN_INSUFFICIENT_BALANCE,
        TOKEN_INSUFFICIENT_CASH,
        TOKEN_TRANSFER_IN_FAILED,
        TOKEN_TRANSFER_OUT_FAILED,

        // OLA_ADDITIONS : All Enums from here
        BAD_SYSTEM_PARAMS
    }

    /*
     * Notice: FailureInfo (but not Error) is kept in alphabetical order
     *       This is because FailureInfo grows significantly faster, and
     *       the order of Error has some meaning, while the order of FailureInfo
     *       is entirely arbitrary.
     */
    enum FailureInfo {
        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,
        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,
        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,
        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,
        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,
        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,
        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,
        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,
        BORROW_ACCRUE_INTEREST_FAILED,
        BORROW_CASH_NOT_AVAILABLE,
        BORROW_FRESHNESS_CHECK,
        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,
        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,
        BORROW_MARKET_NOT_LISTED,
        BORROW_COMPTROLLER_REJECTION,
        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,
        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,
        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,
        LIQUIDATE_COMPTROLLER_REJECTION,
        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,
        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,
        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,
        LIQUIDATE_FRESHNESS_CHECK,
        LIQUIDATE_LIQUIDATOR_IS_BORROWER,
        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,
        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,
        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,
        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,
        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,
        LIQUIDATE_SEIZE_TOO_MUCH,
        MINT_ACCRUE_INTEREST_FAILED,
        MINT_COMPTROLLER_REJECTION,
        MINT_EXCHANGE_CALCULATION_FAILED,
        MINT_EXCHANGE_RATE_READ_FAILED,
        MINT_FRESHNESS_CHECK,
        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,
        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,
        MINT_TRANSFER_IN_FAILED,
        MINT_TRANSFER_IN_NOT_POSSIBLE,
        REDEEM_ACCRUE_INTEREST_FAILED,
        REDEEM_COMPTROLLER_REJECTION,
        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,
        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,
        REDEEM_EXCHANGE_RATE_READ_FAILED,
        REDEEM_FRESHNESS_CHECK,
        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,
        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,
        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,
        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,
        REDUCE_RESERVES_ADMIN_CHECK,
        REDUCE_RESERVES_CASH_NOT_AVAILABLE,
        REDUCE_RESERVES_FRESH_CHECK,
        REDUCE_RESERVES_VALIDATION,
        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,
        REPAY_BORROW_ACCRUE_INTEREST_FAILED,
        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,
        REPAY_BORROW_COMPTROLLER_REJECTION,
        REPAY_BORROW_FRESHNESS_CHECK,
        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,
        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,
        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,
        SET_COLLATERAL_FACTOR_OWNER_CHECK,
        SET_COLLATERAL_FACTOR_VALIDATION,
        SET_COMPTROLLER_OWNER_CHECK,
        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,
        SET_INTEREST_RATE_MODEL_FRESH_CHECK,
        SET_INTEREST_RATE_MODEL_OWNER_CHECK,
        SET_MAX_ASSETS_OWNER_CHECK,
        SET_ORACLE_MARKET_NOT_LISTED,
        SET_PENDING_ADMIN_OWNER_CHECK,
        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,
        SET_RESERVE_FACTOR_ADMIN_CHECK,
        SET_RESERVE_FACTOR_FRESH_CHECK,
        SET_RESERVE_FACTOR_BOUNDS_CHECK,
        TRANSFER_COMPTROLLER_REJECTION,
        TRANSFER_NOT_ALLOWED,
        TRANSFER_NOT_ENOUGH,
        TRANSFER_TOO_MUCH,
        ADD_RESERVES_ACCRUE_INTEREST_FAILED,
        ADD_RESERVES_FRESH_CHECK,
        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,

        // OLA_ADDITIONS : All Enums from here
        REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED
    }

    /**
      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary
      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.
      **/
    event Failure(uint error, uint info, uint detail);

    /**
      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator
      */
    function fail(Error err, FailureInfo info) internal returns (uint) {
        emit Failure(uint(err), uint(info), 0);

        return uint(err);
    }

    /**
      * @dev use this when reporting an opaque error from an upgradeable collaborator contract
      */
    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {
        emit Failure(uint(err), uint(info), opaqueError);

        return uint(err);
    }
}

// File: contracts/Ola/Core/Math/Exponential.sol
pragma solidity ^0.5.16;

import "./CarefulMath.sol";
import "./ExponentialNoError.sol";

/**
 * @title Exponential module for storing fixed-precision decimals
 * @author Compound
 * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError
 * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.
 *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:
 *         `Exp({mantissa: 5100000000000000000})`.
 */
contract Exponential is CarefulMath, ExponentialNoError {
    /**
     * @dev Creates an exponential from numerator and denominator values.
     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,
     *            or if `denom` is zero.
     */
    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {
        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);
        if (err0 != MathError.NO_ERROR) {
            return (err0, Exp({mantissa: 0}));
        }

        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);
        if (err1 != MathError.NO_ERROR) {
            return (err1, Exp({mantissa: 0}));
        }

        return (MathError.NO_ERROR, Exp({mantissa: rational}));
    }

    /**
     * @dev Adds two exponentials, returning a new exponential.
     */
    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {
        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);

        return (error, Exp({mantissa: result}));
    }

    /**
     * @dev Subtracts two exponentials, returning a new exponential.
     */
    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {
        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);

        return (error, Exp({mantissa: result}));
    }

    /**
     * @dev Multiply an Exp by a scalar, returning a new Exp.
     */
    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {
        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);
        if (err0 != MathError.NO_ERROR) {
            return (err0, Exp({mantissa: 0}));
        }

        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));
    }

    /**
     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.
     */
    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {
        (MathError err, Exp memory product) = mulScalar(a, scalar);
        if (err != MathError.NO_ERROR) {
            return (err, 0);
        }

        return (MathError.NO_ERROR, truncate(product));
    }

    /**
     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.
     */
    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {
        (MathError err, Exp memory product) = mulScalar(a, scalar);
        if (err != MathError.NO_ERROR) {
            return (err, 0);
        }

        return addUInt(truncate(product), addend);
    }

    /**
     * @dev Divide an Exp by a scalar, returning a new Exp.
     */
    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {
        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);
        if (err0 != MathError.NO_ERROR) {
            return (err0, Exp({mantissa: 0}));
        }

        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));
    }

    /**
     * @dev Divide a scalar by an Exp, returning a new Exp.
     */
    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {
        /*
          We are doing this as:
          getExp(mulUInt(expScale, scalar), divisor.mantissa)

          How it works:
          Exp = a / b;
          Scalar = s;
          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`
        */
        (MathError err0, uint numerator) = mulUInt(expScale, scalar);
        if (err0 != MathError.NO_ERROR) {
            return (err0, Exp({mantissa: 0}));
        }
        return getExp(numerator, divisor.mantissa);
    }

    /**
     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.
     */
    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {
        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);
        if (err != MathError.NO_ERROR) {
            return (err, 0);
        }

        return (MathError.NO_ERROR, truncate(fraction));
    }

    /**
     * @dev Multiplies two exponentials, returning a new exponential.
     */
    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {

        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);
        if (err0 != MathError.NO_ERROR) {
            return (err0, Exp({mantissa: 0}));
        }

        // We add half the scale before dividing so that we get rounding instead of truncation.
        //  See "Listing 6" and text above it at https://accu.org/index.php/journals/1717
        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.
        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);
        if (err1 != MathError.NO_ERROR) {
            return (err1, Exp({mantissa: 0}));
        }

        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);
        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.
        assert(err2 == MathError.NO_ERROR);

        return (MathError.NO_ERROR, Exp({mantissa: product}));
    }

    /**
     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.
     */
    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {
        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));
    }

    /**
     * @dev Multiplies three exponentials, returning a new exponential.
     */
    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {
        (MathError err, Exp memory ab) = mulExp(a, b);
        if (err != MathError.NO_ERROR) {
            return (err, ab);
        }
        return mulExp(ab, c);
    }

    /**
     * @dev Divides two exponentials, returning a new exponential.
     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,
     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)
     */
    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {
        return getExp(a.mantissa, b.mantissa);
    }
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/InterestRateModel.sol
pragma solidity ^0.5.16;

/**
  * @title Compound's InterestRateModel Interface
  * @author Compound
  */
contract InterestRateModel {
    /// @notice Indicator that this is an InterestRateModel contract (for inspection)
    bool public constant isInterestRateModel = true;

    /**
      * @notice Calculates the current borrow interest rate per block
      * @param cash The total amount of cash the market has
      * @param borrows The total amount of borrows the market has outstanding
      * @param reserves The total amount of reserves the market has
      * @return The borrow rate per block (as a percentage, and scaled by 1e18)
      */
    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);

    /**
      * @notice Calculates the current supply interest rate per block
      * @param cash The total amount of cash the market has
      * @param borrows The total amount of borrows the market has outstanding
      * @param reserves The total amount of reserves the market has
      * @param reserveFactorMantissa The current reserve factor the market has
      * @return The supply rate per block (as a percentage, and scaled by 1e18)
      */
    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);

}


// File: contracts/Ola/Core/Interfaces/EIP20NonStandardInterface.sol
pragma solidity ^0.5.16;

/**
 * @title EIP20NonStandardInterface
 * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`
 *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
 */
interface EIP20NonStandardInterface {

    /**
     * @notice Get the total number of tokens in circulation
     * @return The supply of tokens
     */
    function totalSupply() external view returns (uint256);

    /**
     * @notice Gets the balance of the specified address
     * @param owner The address from which the balance will be retrieved
     * @return The balance
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    ///
    /// !!!!!!!!!!!!!!
    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification
    /// !!!!!!!!!!!!!!
    ///

    /**
      * @notice Transfer `amount` tokens from `msg.sender` to `dst`
      * @param dst The address of the destination account
      * @param amount The number of tokens to transfer
      */
    function transfer(address dst, uint256 amount) external;

    ///
    /// !!!!!!!!!!!!!!
    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification
    /// !!!!!!!!!!!!!!
    ///

    /**
      * @notice Transfer `amount` tokens from `src` to `dst`
      * @param src The address of the source account
      * @param dst The address of the destination account
      * @param amount The number of tokens to transfer
      */
    function transferFrom(address src, address dst, uint256 amount) external;

    /**
      * @notice Approve `spender` to transfer up to `amount` from `src`
      * @dev This will overwrite the approval amount for `spender`
      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
      * @param spender The address of the account which may transfer tokens
      * @param amount The number of tokens that are approved
      * @return Whether or not the approval succeeded
      */
    function approve(address spender, uint256 amount) external returns (bool success);

    /**
      * @notice Get the current allowance from `owner` for `spender`
      * @param owner The address of the account which owns the tokens to be spent
      * @param spender The address of the account which may transfer tokens
      * @return The number of tokens allowed to be spent
      */
    function allowance(address owner, address spender) external view returns (uint256 remaining);

    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}


// File: contracts/Ola/Core/Math/CarefulMath.sol
pragma solidity ^0.5.16;

/**
  * @title Careful Math
  * @author Compound
  * @notice Derived from OpenZeppelin's SafeMath library
  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol
  */
contract CarefulMath {

    /**
     * @dev Possible error codes that we can return
     */
    enum MathError {
        NO_ERROR,
        DIVISION_BY_ZERO,
        INTEGER_OVERFLOW,
        INTEGER_UNDERFLOW
    }

    /**
    * @dev Multiplies two numbers, returns an error on overflow.
    */
    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {
        if (a == 0) {
            return (MathError.NO_ERROR, 0);
        }

        uint c = a * b;

        if (c / a != b) {
            return (MathError.INTEGER_OVERFLOW, 0);
        } else {
            return (MathError.NO_ERROR, c);
        }
    }

    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {
        if (b == 0) {
            return (MathError.DIVISION_BY_ZERO, 0);
        }

        return (MathError.NO_ERROR, a / b);
    }

    /**
    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).
    */
    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {
        if (b <= a) {
            return (MathError.NO_ERROR, a - b);
        } else {
            return (MathError.INTEGER_UNDERFLOW, 0);
        }
    }

    /**
    * @dev Adds two numbers, returns an error on overflow.
    */
    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {
        uint c = a + b;

        if (c >= a) {
            return (MathError.NO_ERROR, c);
        } else {
            return (MathError.INTEGER_OVERFLOW, 0);
        }
    }

    /**
    * @dev add a and b and then subtract c
    */
    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {
        (MathError err0, uint sum) = addUInt(a, b);

        if (err0 != MathError.NO_ERROR) {
            return (err0, 0);
        }

        return subUInt(sum, c);
    }
}

// File: contracts/Ola/Core/Math/ExponentialNoError.sol
pragma solidity ^0.5.16;

/**
 * @title Exponential module for storing fixed-precision decimals
 * @author Compound
 * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.
 *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:
 *         `Exp({mantissa: 5100000000000000000})`.
 */
contract ExponentialNoError {
    uint constant expScale = 1e18;
    uint constant doubleScale = 1e36;
    uint constant halfExpScale = expScale/2;
    uint constant mantissaOne = expScale;

    struct Exp {
        uint mantissa;
    }

    struct Double {
        uint mantissa;
    }

    /**
     * @dev Truncates the given exp to a whole number value.
     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15
     */
    function truncate(Exp memory exp) pure internal returns (uint) {
        // Note: We are not using careful Math here as we're performing a division that cannot fail
        return exp.mantissa / expScale;
    }

    /**
     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.
     */
    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {
        Exp memory product = mul_(a, scalar);
        return truncate(product);
    }

    /**
     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.
     */
    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {
        Exp memory product = mul_(a, scalar);
        return add_(truncate(product), addend);
    }

    /**
     * @dev Checks if first Exp is less than second Exp.
     */
    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {
        return left.mantissa < right.mantissa;
    }

    /**
     * @dev Checks if left Exp <= right Exp.
     */
    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {
        return left.mantissa <= right.mantissa;
    }

    /**
     * @dev Checks if left Exp > right Exp.
     */
    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {
        return left.mantissa > right.mantissa;
    }

    /**
     * @dev returns true if Exp is exactly zero
     */
    function isZeroExp(Exp memory value) pure internal returns (bool) {
        return value.mantissa == 0;
    }

    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {
        require(n < 2**224, errorMessage);
        return uint224(n);
    }

    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {
        require(n < 2**32, errorMessage);
        return uint32(n);
    }

    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
        return Exp({mantissa: add_(a.mantissa, b.mantissa)});
    }

    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {
        return Double({mantissa: add_(a.mantissa, b.mantissa)});
    }

    function add_(uint a, uint b) pure internal returns (uint) {
        return add_(a, b, "addition overflow");
    }

    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
        uint c = a + b;
        require(c >= a, errorMessage);
        return c;
    }

    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});
    }

    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {
        return Double({mantissa: sub_(a.mantissa, b.mantissa)});
    }

    function sub_(uint a, uint b) pure internal returns (uint) {
        return sub_(a, b, "subtraction underflow");
    }

    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
        require(b <= a, errorMessage);
        return a - b;
    }

    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});
    }

    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {
        return Exp({mantissa: mul_(a.mantissa, b)});
    }

    function mul_(uint a, Exp memory b) pure internal returns (uint) {
        return mul_(a, b.mantissa) / expScale;
    }

    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {
        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});
    }

    function mul_(Double memory a, uint b) pure internal returns (Double memory) {
        return Double({mantissa: mul_(a.mantissa, b)});
    }

    function mul_(uint a, Double memory b) pure internal returns (uint) {
        return mul_(a, b.mantissa) / doubleScale;
    }

    function mul_(uint a, uint b) pure internal returns (uint) {
        return mul_(a, b, "multiplication overflow");
    }

    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
        if (a == 0 || b == 0) {
            return 0;
        }
        uint c = a * b;
        require(c / a == b, errorMessage);
        return c;
    }

    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});
    }

    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {
        return Exp({mantissa: div_(a.mantissa, b)});
    }

    function div_(uint a, Exp memory b) pure internal returns (uint) {
        return div_(mul_(a, expScale), b.mantissa);
    }

    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {
        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});
    }

    function div_(Double memory a, uint b) pure internal returns (Double memory) {
        return Double({mantissa: div_(a.mantissa, b)});
    }

    function div_(uint a, Double memory b) pure internal returns (uint) {
        return div_(mul_(a, doubleScale), b.mantissa);
    }

    function div_(uint a, uint b) pure internal returns (uint) {
        return div_(a, b, "divide by zero");
    }

    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
        require(b > 0, errorMessage);
        return a / b;
    }

    function fraction(uint a, uint b) pure internal returns (Double memory) {
        return Double({mantissa: div_(mul_(a, doubleScale), b)});
    }
}


// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/SingleAssetRainMaker.sol
pragma solidity ^0.5.16;

import "./RainMakerStorage.sol";
import "./RainMakerInterface.sol";
import "../../../Core/Math/ExponentialNoError.sol";
import "../IComptrollerPeripheral.sol";
import "../../../Core/LendingNetwork/OTokens/CToken.sol";

interface Erc20ForSingleAssetRainMaker {
    function balanceOf(address _owner) external view returns (uint256 balance);
    function transfer(address _to, uint256 _value) external returns (bool success);
}

contract SingleAssetRainMaker is SingleAssetRainMakerStorage, SingleAssetRainMakerInterface, ExponentialNoError, IComptrollerPeripheral {
    bytes32 constant public SingleAssetRainMakerContractHash = keccak256("SingleAssetRainMaker");

    /// @notice The initial COMP index for a market
    uint224 public constant compInitialIndex = 1e36;

    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /**
      * @notice Emitted when pendingAdmin is changed
      */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
      * @notice Emitted when pendingAdmin is accepted, which means admin is updated
      */
    event NewAdmin(address oldAdmin, address newAdmin);

    /// @notice Emitted when lnIncentiveTokenAddress is set by admin
    event LnIncentiveTokenUpdated(address lnIncentiveToken, uint blockNumber);

    /// @notice Emitted when a new COMP speed is calculated for a market
    event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);

    /// @notice Emitted when COMP is distributed to a supplier
    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);

    /// @notice Emitted when COMP is distributed to a borrower
    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);

    /*** Constructor ***/
    constructor(address _comptroller, address _admin) public {
        admin = _admin;
        comptroller = ComptrollerInterface(_comptroller);
        contractNameHash = SingleAssetRainMakerContractHash;

        // Ensure supported markets are synced with the Comptroller
        CToken[] memory markets = comptroller.getAllMarkets();
        uint marketsCount = markets.length;
        for (uint i = 0; i < marketsCount; i++) {
            CToken market = markets[i];
            _supportMarketInternal(address(market));
        }
    }

    /**
     * @notice Return the address of the COMP token
     * @return The address of COMP
     */
    function getLnIncentiveTokenAddress() public view returns (address) {
        return lnIncentiveTokenAddress;
    }

    /*** Comp claiming ***/

    /**
     * @notice Claim all the comp accrued by holder in all markets
     * @param holder The address to claim COMP for
     */
    function claimComp(address holder) public {
        return claimComp(holder, allMarkets);
    }

    /**
     * @notice Claim all the comp accrued by holder in the specified markets
     * @param holder The address to claim COMP for
     * @param cTokens The list of markets to claim COMP in
     */
    function claimComp(address holder, CToken[] memory cTokens) public {
        address[] memory holders = new address[](1);
        holders[0] = holder;
        claimComp(holders, cTokens, true, true);
    }

    /**
     * @notice Claim all comp accrued by the holders
     * @param holders The addresses to claim COMP for
     * @param cTokens The list of markets to claim COMP in
     * @param borrowers Whether or not to claim COMP earned by borrowing
     * @param suppliers Whether or not to claim COMP earned by supplying
     */
    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {
        for (uint i = 0; i < cTokens.length; i++) {
            CToken cToken = cTokens[i];
            require(isListed[address(cToken)], "market must be listed");
            if (borrowers == true) {
                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});
                updateCompBorrowIndexInternal(address(cToken), borrowIndex);
                for (uint j = 0; j < holders.length; j++) {
                    distributeBorrowerCompInternal(address(cToken), holders[j], borrowIndex);
                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);
                }
            }
            if (suppliers == true) {
                updateCompSupplyIndexInternal(address(cToken));
                for (uint j = 0; j < holders.length; j++) {
                    distributeSupplierCompInternal(address(cToken), holders[j]);
                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);
                }
            }
        }
    }

    /*** Comp Distribution ***/
    function updateCompSupplyIndex(address cToken) external {
        require(isComptroller(), "Not comptroller");
        updateCompSupplyIndexInternal(cToken);
    }

    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external {
        require(isComptroller(), "Not comptroller");
        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});
        updateCompBorrowIndexInternal(cToken, marketBorrowIndex);
    }

    function distributeSupplierComp(address cToken, address supplier) external {
        require(isComptroller(), "Not comptroller");
        distributeSupplierCompInternal(cToken, supplier);
    }

    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external {
        require(isComptroller(), "Not comptroller");
        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});
        distributeBorrowerCompInternal(cToken, borrower, marketBorrowIndex);
    }

    /*** Comp Distribution internal ***/
    /**
     * @notice Accrue COMP to the market by updating the supply index
     * @param cToken The market whose supply index to update
     */
    function updateCompSupplyIndexInternal(address cToken) internal {
        if (isRetired) {
            return;
        }

        CompMarketState storage supplyState = compSupplyState[cToken];
        uint supplySpeed = compSpeeds[cToken];
        uint blockNumber = getBlockNumber();
        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));
        if (deltaBlocks > 0 && supplySpeed > 0) {
            uint supplyTokens = CToken(cToken).totalSupply();
            uint compAccrued = mul_(deltaBlocks, supplySpeed);
            Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa: 0});
            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);
            compSupplyState[cToken] = CompMarketState({
            index: safe224(index.mantissa, "new index exceeds 224 bits"),
            block: safe32(blockNumber, "block number exceeds 32 bits")
            });
        } else if (deltaBlocks > 0) {
            supplyState.block = safe32(blockNumber, "block number exceeds 32 bits");
        }
    }

    /**
     * @notice Accrue COMP to the market by updating the borrow index
     * @param cToken The market whose borrow index to update
     */
    function updateCompBorrowIndexInternal(address cToken, Exp memory marketBorrowIndex) internal {
        if (isRetired) {
            return;
        }

        CompMarketState storage borrowState = compBorrowState[cToken];
        uint borrowSpeed = compSpeeds[cToken];
        uint blockNumber = getBlockNumber();
        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));
        if (deltaBlocks > 0 && borrowSpeed > 0) {
            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);
            uint compAccrued = mul_(deltaBlocks, borrowSpeed);
            Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa: 0});
            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);
            compBorrowState[cToken] = CompMarketState({
            index: safe224(index.mantissa, "new index exceeds 224 bits"),
            block: safe32(blockNumber, "block number exceeds 32 bits")
            });
        } else if (deltaBlocks > 0) {
            borrowState.block = safe32(blockNumber, "block number exceeds 32 bits");
        }
    }

    /**
     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them
     * @param cToken The market in which the supplier is interacting
     * @param supplier The address of the supplier to distribute COMP to
     */
    function distributeSupplierCompInternal(address cToken, address supplier) internal {
        CompMarketState storage supplyState = compSupplyState[cToken];
        Double memory supplyIndex = Double({mantissa: supplyState.index});
        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});
        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;

        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {
            supplierIndex.mantissa = compInitialIndex;
        }

        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);
        uint supplierTokens = CToken(cToken).balanceOf(supplier);
        uint supplierDelta = mul_(supplierTokens, deltaIndex);
        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);
        compAccrued[supplier] = supplierAccrued;
        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);
    }

    /**
     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them
     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.
     * @param cToken The market in which the borrower is interacting
     * @param borrower The address of the borrower to distribute COMP to
     */
    function distributeBorrowerCompInternal(address cToken, address borrower, Exp memory marketBorrowIndex) internal {
        CompMarketState storage borrowState = compBorrowState[cToken];
        Double memory borrowIndex = Double({mantissa: borrowState.index});
        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});
        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;

        if (borrowerIndex.mantissa > 0) {
            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);
            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);
            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);
            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);
            compAccrued[borrower] = borrowerAccrued;
            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);
        }
    }

    /**
     * OLA_ADDITIONS : Changes from 'Comp' to the generic ERC20.
     * @notice Transfer COMP to the user
     * @dev Note: If there is not enough COMP, we do not perform the transfer all.
     * @param user The address of the user to transfer COMP to
     * @param amount The amount of COMP to (possibly) transfer
     * @return The amount of COMP which was NOT transferred to the user
     */
    function grantCompInternal(address user, uint amount) internal returns (uint) {
        Erc20ForSingleAssetRainMaker lnToken = Erc20ForSingleAssetRainMaker(getLnIncentiveTokenAddress());
        uint lnTokenRemaining = lnToken.balanceOf(address(this));
        if (amount > 0 && amount <= lnTokenRemaining) {
            lnToken.transfer(user, amount);
            return 0;
        }
        return amount;
    }

    /**
     * @notice Set COMP speed for a single market
     * @param cToken The market whose COMP speed to update
     * @param compSpeed New COMP speed for market
     */
    function setCompSpeedInternal(CToken cToken, uint compSpeed) internal {
        uint currentCompSpeed = compSpeeds[address(cToken)];
        if (currentCompSpeed != 0) {
            // note that COMP speed could be set to 0 to halt liquidity rewards for a market
            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});
            updateCompSupplyIndexInternal(address(cToken));
            updateCompBorrowIndexInternal(address(cToken), borrowIndex);
        } else if (compSpeed != 0) {
            // Add the COMP market
            require(isListed[address(cToken)] == true, "comp market is not listed");

            if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) {
                compSupplyState[address(cToken)] = CompMarketState({
                index: compInitialIndex,
                block: safe32(getBlockNumber(), "block number exceeds 32 bits")
                });
            }

            if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {
                compBorrowState[address(cToken)] = CompMarketState({
                index: compInitialIndex,
                block: safe32(getBlockNumber(), "block number exceeds 32 bits")
                });
            }
        }

        if (currentCompSpeed != compSpeed) {
            compSpeeds[address(cToken)] = compSpeed;
            emit CompSpeedUpdated(cToken, compSpeed);
        }
    }

    /*** Comp Distribution Admin ***/

    /**
     * @notice Set COMP speeds for a multiple markets
     * @param _cTokens The markets whose COMP speeds to update
     * @param _compSpeeds New COMP speed per market
     */
    function _setCompSpeeds(CToken[] calldata _cTokens, uint[] calldata _compSpeeds) external {
        require(_cTokens.length == _compSpeeds.length, "markets and speeds should be 1:1");
        require(isAdmin(), "only admin can set comp speed");

        for (uint i = 0; i < _cTokens.length; i++) {
            setCompSpeedInternal(_cTokens[i], _compSpeeds[i]);
        }
    }

    /**
     * @notice Set COMP speed for a single market
     * @param cToken The market whose COMP speed to update
     * @param compSpeed New COMP speed for market
     */
    function _setCompSpeed(CToken cToken, uint compSpeed) public {
        require(isAdmin(), "only admin can set comp speed");
        setCompSpeedInternal(cToken, compSpeed);
    }

    /*** Comptroller Functions ***/
    function _supportMarket(address cToken) external  {
        require(isComptroller(), "Not comptroller");
        require(!isListed[cToken], "Already listed");

        _supportMarketInternal(address(cToken));
    }

    function _supportMarketInternal(address cToken) internal {
        CToken(cToken).isCToken(); // Sanity check to make sure its really a CToken
        allMarkets.push(CToken(cToken));
        isListed[cToken] = true;
        emit MarketListed(CToken(cToken));
    }

    /*** Admin Functions ***/


    /**
     * @notice Periphery hook. Does nothing at the moment.
     */
    function connect(bytes calldata params) external {
        // Shh -- currently unused
        params;
    }

    /**
     * @notice Periphery hook. Syncs for the last time for all supported markets and prevents this RainMaker from updating any more.
     */
    function retire(bytes calldata params) external {
        // Shh -- currently unused
        params;

        retireInternal();
    }

    /**
     * Legacy function
     */
    function retireRainMaker() external {
        retireInternal();
    }

    function retireInternal() internal {
        require(isComptroller(), "Not comptroller");

        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken cToken = allMarkets[i];

            // Extra sanity
            if (isListed[address(cToken)]) {
                // Update supply incentive  index
                updateCompSupplyIndexInternal(address(cToken));

                // Update borrow incentive index
                uint borrowIndex = cToken.borrowIndex();
                Exp memory marketBorrowIndex = Exp({mantissa: borrowIndex});
                updateCompBorrowIndexInternal(address(cToken), marketBorrowIndex);
            }
        }

        // This basically locks the supply and borrow indexes to their current values
        // and by thus, stops the accumulating.
        isRetired = true;
    }

    /**
     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * @param newPendingAdmin New pending admin.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {
        // Check caller = admin
        require(msg.sender == admin, "Not Admin");

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return 0;
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() public returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        require(msg.sender == pendingAdmin && msg.sender != address(0), "Not the EXISTING pending admin");

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return 0;
    }

    /**
     * @notice Set lnTokenAddress.
     * @param incentiveTokenAddress The ERC20 compatible token to be used for incentivizing the system.
     */
    function _setLnIncentiveToken(address incentiveTokenAddress) public {
        require(isAdmin(), "only admin can set comp speed");
        require(incentiveTokenAddress != address(0), "LN incentive token must have a proper address");
        require(getLnIncentiveTokenAddress() == address(0), "Cannot change the LN incentive token once it is set");

        lnIncentiveTokenAddress = incentiveTokenAddress;
        emit LnIncentiveTokenUpdated(lnIncentiveTokenAddress, block.number);
    }

    /**
     * @notice Checks caller is Comptroller
     */
    function isComptroller() internal view returns (bool) {
        return msg.sender == address(comptroller);
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /*** Utils ***/

    function getBlockNumber() public view returns (uint)
    {
        return block.number;
    }
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/RainMakerStorage.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.5.16;

import "../../../Core/LendingNetwork/Comptroller/ComptrollerInterface.sol";

contract RainMakerAdminStorage {
    /**
    * @notice Administrator for this contract
    */
    address public admin;

    /**
    * @notice Comptroller for this contract
    */
    ComptrollerInterface public comptroller;

    /**
    * @notice Pending administrator for this contract
    */
    address public pendingAdmin;
}

contract SingleAssetRainMakerStorage is RainMakerAdminStorage {
    /**
    * @notice If true - stops updating supply and borrow indexes
    */
    bool public isRetired;

    struct CompMarketState {
        /// @notice The market's last updated compBorrowIndex or compSupplyIndex
        uint224 index;

        /// @notice The block number the index was last updated at
        uint32 block;
    }

    /// @notice A list of all markets
    CToken[] public allMarkets;

    /// @notice OToken => is market listed by Comptroller
    mapping(address => bool) public isListed;

    /// @notice The amount of incentive tokens each side (supply and borrow) receives per block.
    mapping(address => uint) public compSpeeds;

    /// @notice The COMP market supply state for each market
    mapping(address => CompMarketState) public compSupplyState;

    /// @notice The COMP market borrow state for each market
    mapping(address => CompMarketState) public compBorrowState;

    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP
    mapping(address => mapping(address => uint)) public compSupplierIndex;

    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP
    mapping(address => mapping(address => uint)) public compBorrowerIndex;

    /// @notice The COMP accrued but not yet transferred to each user
    mapping(address => uint) public compAccrued;

    /// @notice The address of the erc20 token used by the network for participation incentive.
    address public lnIncentiveTokenAddress;
}

contract SingleAssetDynamicRainMakerStorage is RainMakerAdminStorage {
    /**
    * @notice If true - stops updating supply and borrow indexes
    */
    bool public isRetired;

    struct CompMarketState {
        /// @notice The market's last updated compBorrowIndex or compSupplyIndex
        uint224 index;

        /// @notice The block number the index was last updated at
        uint32 block;
    }

    /// @notice A list of all markets
    CToken[] public allMarkets;

    /// @notice OToken => is market listed by Comptroller
    mapping(address => bool) public isListed;

    /// @notice The amount of incentive tokens the whole supply side receives per block.
    mapping(address => uint) public compSupplySpeeds;

    /// @notice The amount of incentive tokens the whole borrow side receives per block.
    mapping(address => uint) public compBorrowSpeeds;

    /// @notice The COMP market supply state for each market
    mapping(address => CompMarketState) public compSupplyState;

    /// @notice The COMP market borrow state for each market
    mapping(address => CompMarketState) public compBorrowState;

    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP
    mapping(address => mapping(address => uint)) public compSupplierIndex;

    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP
    mapping(address => mapping(address => uint)) public compBorrowerIndex;

    /// @notice The COMP accrued but not yet transferred to each user
    mapping(address => uint) public compAccrued;

    /// @notice The address of the erc20 token used by the network for participation incentive.
    address public lnIncentiveTokenAddress;

    /// @notice (market => base unit) The base unit (1 of) for this market underlying
    mapping(address => uint) public baseUnits;
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol
pragma solidity ^0.5.16;

import "../../../Core/LendingNetwork/OTokens/CToken.sol";

contract RainMakerInterface {
    bool public isRainMaker = true;
    bytes32 public contractNameHash;

    /*** Market support ***/
    function _supportMarket(address cToken) external;

    /*** Comp Distribution ***/
    function updateCompSupplyIndex(address cToken) external;
    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external;
    function distributeSupplierComp(address cToken, address supplier) external;
    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external;
}

contract SingleAssetRainMakerInterface is RainMakerInterface {
    /*** Comp claiming ***/
    function claimComp(address holder) external;
    function claimComp(address holder, CToken[] calldata cTokens) external;
    function claimComp(address[] calldata holders, CToken[] calldata cTokens, bool borrowers, bool suppliers) external;
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol
pragma solidity ^0.5.16;

interface IComptrollerPeripheral {
    /**
     * Called when the contract is connected to the comptroller
     */
    function connect(bytes calldata params) external;

    /**
     * Called when the contract is disconnected from the comptroller
     */
    function retire(bytes calldata params) external;
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/SingleAssetDynamicRainMaker.sol
pragma solidity ^0.5.16;

import "./RainMakerStorage.sol";
import "./RainMakerInterface.sol";
import "../../../Core/Math/ExponentialNoError.sol";
import "../IComptrollerPeripheral.sol";
import "../../../Core/LendingNetwork/OTokens/CToken.sol";

interface IMinistryForSingleAssetDynamicRainMaker {
    function isAssetSupported(address asset) external view returns (bool);
}

contract SingleAssetDynamicRainMaker is SingleAssetDynamicRainMakerStorage, SingleAssetRainMakerInterface, ExponentialNoError, IComptrollerPeripheral {
    bytes32 constant public SingleAssetDynamicRainMakerContractHash = keccak256("SingleAssetDynamicRainMaker");

    /// @notice The initial COMP index for a market
    uint224 public constant compInitialIndex = 1e36;

    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /**
      * @notice Emitted when pendingAdmin is changed
      */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
      * @notice Emitted when pendingAdmin is accepted, which means admin is updated
      */
    event NewAdmin(address oldAdmin, address newAdmin);

    /// @notice Emitted when lnIncentiveTokenAddress is set by admin
    event LnIncentiveTokenUpdated(address lnIncentiveToken, uint blockNumber);

    /// @notice Emitted when a new COMP supply speed is calculated for a market
    event CompSupplySpeedUpdated(CToken indexed cToken, uint newSpeed);

    /// @notice Emitted when a new COMP borrow speed is calculated for a market
    event CompBorrowSpeedUpdated(CToken indexed cToken, uint newSpeed);

    /// @notice Emitted when COMP is distributed to a supplier
    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);

    /// @notice Emitted when COMP is distributed to a borrower
    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);

    // V1.0
    uint public constant version = 100;

    /*** Constructor ***/
    constructor(address _comptroller, address _admin) public {
        admin = _admin;
        comptroller = ComptrollerInterface(_comptroller);
        contractNameHash = SingleAssetDynamicRainMakerContractHash;

        // Ensure supported markets are synced with the Comptroller
        CToken[] memory markets = comptroller.getAllMarkets();
        uint marketsCount = markets.length;
        for (uint i = 0; i < marketsCount; i++) {
            CToken market = markets[i];
            _supportMarketInternal(address(market));
        }
    }

    /**
     * @notice Return the address of the COMP token
     * @return The address of COMP
     */
    function getLnIncentiveTokenAddress() public view returns (address) {
        return lnIncentiveTokenAddress;
    }

    /*** Comp claiming ***/

    /**
     * @notice Claim all the comp accrued by holder in all markets
     * @param holder The address to claim COMP for
     */
    function claimComp(address holder) public {
        return claimComp(holder, allMarkets);
    }

    /**
     * @notice Claim all the comp accrued by holder in the specified markets
     * @param holder The address to claim COMP for
     * @param cTokens The list of markets to claim COMP in
     */
    function claimComp(address holder, CToken[] memory cTokens) public {
        address[] memory holders = new address[](1);
        holders[0] = holder;
        claimComp(holders, cTokens, true, true);
    }

    /**
     * @notice Claim all comp accrued by the holders
     * @param holders The addresses to claim COMP for
     * @param cTokens The list of markets to claim COMP in
     * @param borrowers Whether or not to claim COMP earned by borrowing
     * @param suppliers Whether or not to claim COMP earned by supplying
     */
    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {
        for (uint i = 0; i < cTokens.length; i++) {
            CToken cToken = cTokens[i];
            require(isListed[address(cToken)], "market must be listed");
            if (borrowers == true) {
                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});
                updateCompBorrowIndexInternal(address(cToken), borrowIndex);
                for (uint j = 0; j < holders.length; j++) {
                    distributeBorrowerCompInternal(address(cToken), holders[j], borrowIndex);
                }
            }
            if (suppliers == true) {
                updateCompSupplyIndexInternal(address(cToken));
                for (uint j = 0; j < holders.length; j++) {
                    distributeSupplierCompInternal(address(cToken), holders[j]);
                }
            }
        }

        for (uint j = 0; j < holders.length; j++) {
            compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);
        }
    }

    /*** Comp Distribution ***/
    function updateCompSupplyIndex(address cToken) external {
        require(isComptroller(), "Not comptroller");
        updateCompSupplyIndexInternal(cToken);
    }

    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external {
        require(isComptroller(), "Not comptroller");
        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});
        updateCompBorrowIndexInternal(cToken, marketBorrowIndex);
    }

    function distributeSupplierComp(address cToken, address supplier) external {
        require(isComptroller(), "Not comptroller");
        distributeSupplierCompInternal(cToken, supplier);
    }

    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external {
        require(isComptroller(), "Not comptroller");
        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});
        distributeBorrowerCompInternal(cToken, borrower, marketBorrowIndex);
    }

    /*** Comp Distribution internal ***/

    /**
     * @notice Accrue COMP to the market by updating the supply index
     * @param cToken The market whose supply index to update
     * @dev Index is a cumulative sum of the COMP per cToken accrued.
     */
    function updateCompSupplyIndexInternal(address cToken) internal {
        if (isRetired) {
            return;
        }

        CompMarketState storage supplyState = compSupplyState[cToken];
        uint supplySpeed = compSupplySpeeds[cToken];
        uint32 blockNumber = safe32(getBlockNumber(), "block number exceeds 32 bits");
        uint deltaBlocks = sub_(uint(blockNumber), uint(supplyState.block));
        if (deltaBlocks > 0 && supplySpeed > 0) {
            uint supplyTokens = CToken(cToken).totalSupply();
            uint supplyCompAccrued = mul_(deltaBlocks, supplySpeed);
            uint baseUnit = baseUnits[cToken];
            Double memory ratio = supplyTokens > baseUnit ? fraction(supplyCompAccrued, supplyTokens) : Double({mantissa: 0});
            supplyState.index = safe224(add_(Double({mantissa: supplyState.index}), ratio).mantissa, "new index exceeds 224 bits");
            supplyState.block = blockNumber;
        } else if (deltaBlocks > 0) {
            supplyState.block = blockNumber;
        }
    }

    /**
     * @notice Accrue COMP to the market by updating the borrow index
     * @param cToken The market whose borrow index to update
     * @dev Index is a cumulative sum of the COMP per cToken accrued.
     */
    function updateCompBorrowIndexInternal(address cToken, Exp memory marketBorrowIndex) internal {
        if (isRetired) {
            return;
        }

        CompMarketState storage borrowState = compBorrowState[cToken];
        uint borrowSpeed = compBorrowSpeeds[cToken];
        uint32 blockNumber = safe32(getBlockNumber(), "block number exceeds 32 bits");
        uint deltaBlocks = sub_(uint(blockNumber), uint(borrowState.block));
        if (deltaBlocks > 0 && borrowSpeed > 0) {
            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);
            uint borrowCompAccrued = mul_(deltaBlocks, borrowSpeed);
            uint baseUnit = baseUnits[cToken];
            Double memory ratio = borrowAmount > baseUnit ? fraction(borrowCompAccrued, borrowAmount) : Double({mantissa: 0});
            borrowState.index = safe224(add_(Double({mantissa: borrowState.index}), ratio).mantissa, "new index exceeds 224 bits");
            borrowState.block = blockNumber;
        } else if (deltaBlocks > 0) {
            borrowState.block = blockNumber;
        }
    }

    /**
     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them
     * @param cToken The market in which the supplier is interacting
     * @param supplier The address of the supplier to distribute COMP to
     */
    function distributeSupplierCompInternal(address cToken, address supplier) internal {
        CompMarketState storage supplyState = compSupplyState[cToken];
        uint supplyIndex = supplyState.index;
        uint supplierIndex = compSupplierIndex[cToken][supplier];

        // Update supplier's index to the current index since we are distributing accrued COMP
        compSupplierIndex[cToken][supplier] = supplyIndex;

        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {
            // Covers the case where users supplied tokens before the market's supply state index was set.
            // Rewards the user with COMP accrued from the start of when supplier rewards were first
            // set for the market.
            supplierIndex = isRetired ? supplyIndex : compInitialIndex;
        }

        // Calculate change in the cumulative sum of the COMP per cToken accrued
        Double memory deltaIndex = Double({mantissa: sub_(supplyIndex, supplierIndex)});

        uint supplierTokens = CToken(cToken).balanceOf(supplier);

        // Calculate COMP accrued: cTokenAmount * accruedPerCToken
        uint supplierDelta = mul_(supplierTokens, deltaIndex);

        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);
        compAccrued[supplier] = supplierAccrued;

        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex);
    }

    /**
     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them
     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.
     * @param cToken The market in which the borrower is interacting
     * @param borrower The address of the borrower to distribute COMP to
     */
    function distributeBorrowerCompInternal(address cToken, address borrower, Exp memory marketBorrowIndex) internal {

        CompMarketState storage borrowState = compBorrowState[cToken];
        uint borrowIndex = borrowState.index;
        uint borrowerIndex = compBorrowerIndex[cToken][borrower];

        // Update borrowers's index to the current index since we are distributing accrued COMP
        compBorrowerIndex[cToken][borrower] = borrowIndex;

        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {
            // Covers the case where users borrowed tokens before the market's borrow state index was set.
            // Rewards the user with COMP accrued from the start of when borrower rewards were first
            // set for the market.

            borrowerIndex = isRetired ? borrowIndex : compInitialIndex;
        }

        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued
        Double memory deltaIndex = Double({mantissa: sub_(borrowIndex, borrowerIndex)});

        uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);

        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit
        uint borrowerDelta = mul_(borrowerAmount, deltaIndex);

        uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);
        compAccrued[borrower] = borrowerAccrued;

        emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex);
    }

    /**
     * OLA_ADDITIONS : Changes from 'Comp' to the generic ERC20.
     * @notice Transfer COMP to the user
     * @dev Note: If there is not enough COMP, we do not perform the transfer all.
     * @param user The address of the user to transfer COMP to
     * @param amount The amount of COMP to (possibly) transfer
     * @return The amount of COMP which was NOT transferred to the user
     */
    function grantCompInternal(address user, uint amount) internal returns (uint) {
        EIP20Interface lnToken = EIP20Interface(getLnIncentiveTokenAddress());
        uint lnTokenRemaining = lnToken.balanceOf(address(this));
        if (amount > 0 && amount <= lnTokenRemaining) {
            lnToken.transfer(user, amount);
            return 0;
        }
        return amount;
    }

    /**
     * @notice Set COMP supply speed for a single market
     * @param cToken The market whose COMP speed to update
     * @param compSupplySpeed New COMP supply speed for market
     */
    function setCompSupplySpeedInternal(CToken cToken, uint compSupplySpeed) internal {
        uint currentCompSupplySpeed = compSupplySpeeds[address(cToken)];

        if (currentCompSupplySpeed != compSupplySpeed) {
            // Supply speed updated so let's update supply state to ensure that
            //  1. COMP accrued properly for the old speed, and
            //  2. COMP accrued at the new speed starts after this block.
            // note that COMP speed could be set to 0 to halt liquidity rewards for a market
            updateCompSupplyIndexInternal(address(cToken));

            compSupplySpeeds[address(cToken)] = compSupplySpeed;
            emit CompSupplySpeedUpdated(cToken, compSupplySpeed);
        }
    }

    /**
     * @notice Set COMP speed for a single market
     * @param cToken The market whose COMP speed to update

     * @param compBorrowSpeed New COMP borrow speed for market
     */
    function setCompBorrowSpeedInternal(CToken cToken, uint compBorrowSpeed) internal {
        uint currentCompBorrowSpeed = compBorrowSpeeds[address(cToken)];

        if (currentCompBorrowSpeed != compBorrowSpeed) {
            // Borrow speed updated so let's update borrow state to ensure that
            //  1. COMP accrued properly for the old speed, and
            //  2. COMP accrued at the new speed starts after this block.
            // note that COMP speed could be set to 0 to halt liquidity rewards for a market
            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});
            updateCompBorrowIndexInternal(address(cToken), borrowIndex);

            compBorrowSpeeds[address(cToken)] = compBorrowSpeed;
            emit CompBorrowSpeedUpdated(cToken, compBorrowSpeed);
        }
    }

    /*** Comp Distribution Admin ***/

    /**
     * @notice Set COMP speeds for a multiple markets
     * @param _cTokens The markets whose COMP speeds to update
     * @param _compSupplySpeeds New COMP speed per market
     * @param _compBorrowSpeeds New COMP speed per market
     */
    function _setDynamicCompSpeeds(CToken[] calldata _cTokens, uint[] calldata _compSupplySpeeds, uint[] calldata _compBorrowSpeeds) external {
        require(_cTokens.length == _compSupplySpeeds.length, "markets and supply speeds should be 1:1");
        require(_cTokens.length == _compBorrowSpeeds.length, "markets and borrow speeds should be 1:1");
        require(isAdmin(), "only admin can set comp speed");

        for (uint i = 0; i < _cTokens.length; i++) {
            CToken cToken = _cTokens[i];
            require(isListed[address(cToken)], "market not listed");
            setCompSupplySpeedInternal(cToken, _compSupplySpeeds[i]);
            setCompBorrowSpeedInternal(cToken, _compBorrowSpeeds[i]);
        }
    }

    /**
     * @notice Set COMP speed for a single market
     * @param cToken The market whose COMP speed to update
     * @param compSupplySpeed New COMP supply speed for market
     * @param compBorrowSpeed New COMP borrow speed for market
     */
    function _setDynamicCompSpeed(CToken cToken, uint compSupplySpeed, uint compBorrowSpeed) public {
        require(isAdmin(), "only admin can set comp speed");
        require(isListed[address(cToken)], "market not listed");
        setCompSupplySpeedInternal(cToken, compSupplySpeed);
        setCompBorrowSpeedInternal(cToken, compBorrowSpeed);
    }

    /*** Comptroller Functions ***/
    function _supportMarket(address cToken) external  {
        require(isComptroller(), "Not comptroller");
        require(!isListed[cToken], "Already listed");

        _supportMarketInternal(address(cToken));
    }

    function _supportMarketInternal(address cToken) internal {
        CToken(cToken).isCToken(); // Sanity check to make sure its really a CToken

        allMarkets.push(CToken(cToken));
        isListed[cToken] = true;

        _initializeMarket(cToken);

        emit MarketListed(CToken(cToken));
    }

    /**
     * Should only be called once for market
     */
    function _initializeMarket(address cToken) internal {
        uint32 blockNumber = safe32(getBlockNumber(), "block number exceeds 32 bits");

        address underlying = CToken(cToken).underlying();
        bool isForNativeCoin = underlying == CToken(cToken).nativeCoinUnderlying();

        // Set the base unit
        uint8 decimals = isForNativeCoin ? 18 : EIP20Interface(underlying).decimals();
        uint baseUnit = 10 ** decimals;
        baseUnits[cToken] = baseUnit;

        CompMarketState storage supplyState = compSupplyState[cToken];
        CompMarketState storage borrowState = compBorrowState[cToken];

        /*
         * Update market state indices
         */
        if (supplyState.index == 0) {
            // Initialize supply state index with default value
            supplyState.index = compInitialIndex;
            // Update market state block numbers
            supplyState.block = blockNumber;
        }

        if (borrowState.index == 0) {
            // Initialize borrow state index with default value
            borrowState.index = compInitialIndex;
            borrowState.block = blockNumber;
        }
    }

    /*** Admin Functions ***/


    /**
     * @notice Periphery hook. Does nothing at the moment.
     */
    function connect(bytes calldata params) external {
        // Shh -- currently unused
        params;
    }

    /**
     * @notice Periphery hook. Syncs for the last time for all supported markets and prevents this RainMaker from updating any more.
     */
    function retire(bytes calldata params) external {
        // Shh -- currently unused
        params;

        retireInternal();
    }

    /**
     * Legacy function
     */
    function retireRainMaker() external {
        retireInternal();
    }

    function retireInternal() internal {
        require(isComptroller(), "Not comptroller");

        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken cToken = allMarkets[i];

            // Extra sanity
            if (isListed[address(cToken)]) {
                // Update supply incentive  index
                updateCompSupplyIndexInternal(address(cToken));

                // Update borrow incentive index
                uint borrowIndex = cToken.borrowIndex();
                Exp memory marketBorrowIndex = Exp({mantissa: borrowIndex});
                updateCompBorrowIndexInternal(address(cToken), marketBorrowIndex);
            }
        }

        // This basically locks the supply and borrow indexes to their current values
        // and by thus, stops the accumulating.
        isRetired = true;
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
        // Check caller = admin
        require(msg.sender == admin, "Not Admin");

        EIP20NonStandardInterface rainToken = EIP20NonStandardInterface(lnIncentiveTokenAddress);

        uint256 balance = EIP20NonStandardInterface(lnIncentiveTokenAddress).balanceOf(address(this));
        rainToken.transfer(admin, balance);
    }

    /**
     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
     * @param newPendingAdmin New pending admin.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {
        // Check caller = admin
        require(msg.sender == admin, "Not Admin");

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return 0;
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() public returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        require(msg.sender == pendingAdmin && msg.sender != address(0), "Not the EXISTING pending admin");

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return 0;
    }

    /**
     * @notice Set lnTokenAddress.
     * @param incentiveTokenAddress The ERC20 compatible token to be used for incentivizing the system.
     */
    function _setLnIncentiveToken(address incentiveTokenAddress) public {
        require(isAdmin(), "only admin can set comp speed");
        require(incentiveTokenAddress != address(0), "LN incentive token must have a proper address");
        require(getLnIncentiveTokenAddress() == address(0), "Cannot change the LN incentive token once it is set");

        require(IMinistryForSingleAssetDynamicRainMaker(comptroller.getRegistry()).isAssetSupported(incentiveTokenAddress), "Token not supported");

        lnIncentiveTokenAddress = incentiveTokenAddress;
        emit LnIncentiveTokenUpdated(lnIncentiveTokenAddress, block.number);
    }

    /**
     * @notice Checks caller is Comptroller
     */
    function isComptroller() internal view returns (bool) {
        return msg.sender == address(comptroller);
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /*** Compound Lens Compatibility ***/

    /**
     * Keeping this to be somewhat compatible with the uniform rainmaker
     */
    function compSpeeds(address market) public view returns (uint) {
        return compSupplySpeeds[market];
    }

    /*** Utils ***/

    function getBlockNumber() public view returns (uint)
    {
        return block.number;
    }
}

// File: contracts/Ola/Legacy/BorrowedAgainst.sol
pragma solidity ^0.5.16;

import "../Core/LendingNetwork/PriceOracle/PriceOracle.sol";
import "../Core/LendingNetwork/OTokens/CTokenInterfaces.sol";
import "../Core/Math/Exponential.sol";
import "./BorrowedAgainstInterface.sol";

contract AdjustedComptrollerInterface {
    /// @notice The address (and interface) of the contract that checks the borrowedAgainst caps
    BorrowedAgainstInterface public borrowedAgainst;

    function markets(address) external view returns (bool);
    function getAssetsIn(address) external view returns (CToken[] memory);
    function getAllMarkets() public view returns (CToken[] memory);
}



contract BorrowedAgainstErrorReporter {
    enum Error {
        NO_ERROR,
        SANITY,
        MATH_ERROR,
        PRICE_ERROR,
        UNAUTHORIZED,
        CANT_GET_CTOKENCOLLATERAL
    }

    enum FailureInfo {
        BORROWER_ASSETS_NOT_TWO,
        BORROWER_NOT_IN_CTOKEN,
        ACCRUAL_BLOCK_NUMBER_FROM_PAST,
        BORROW_BALANCE_TOO_SMALL,
        PRICE_RETURNED_ZERO,
        BORROW_ALLOWED_CALLER_CHECK,
        UPDATE_BORROWED_AGAINST_CALLER_CHECK,
        SET_PENDING_ADMIN_OWNER_CHECK,
        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,
        SET_PRICE_ORACLE_OWNER_CHECK,
        SET_BORROWED_AGAINST_OWNER_CHECK,
        BORROW_BALANCE_CALCULATION_FAILED,
        ADD_BORROW_BALANCE_AND_AMOUNT_FAILED,
        SUB_BORROW_BALANCE_AND_AMOUNT_FAILED
    }

    /**
      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary
      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.
      **/
    event Failure(uint error, uint info, uint detail);

    /**
      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator
      */
    function fail(Error err, FailureInfo info) internal returns (uint) {
        emit Failure(uint(err), uint(info), 0);

        return uint(err);
    }

    /**
      * @dev use this when reporting an opaque error from an upgradeable collaborator contract
      */
    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {
        emit Failure(uint(err), uint(info), opaqueError);

        return uint(err);
    }
}



contract BorrowedAgainst is Exponential, BorrowedAgainstErrorReporter {


    /*** Events ***/


    // TODO: add more events 
    
    /**
      * @notice Emitted when pendingAdmin is changed
      */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
      * @notice Emitted when pendingAdmin is accepted, which means admin is updated
      */
    event NewAdmin(address oldAdmin, address newAdmin);

    /**
      * @notice Emitted when price oracle is changed
      */
    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);

    /**
      * @notice Emitted when a new usd cap is set for cTokenCollateral
      */
    event NewMaxAllowedBorrowedAgainst(address cTokenCollateral, uint oldUsdCap, uint newUsdCap);

    
    /*** State ***/


    /**
    * @notice Administrator for this contract
    */
    address public admin;

    /**
    * @notice Pending administrator for this contract
    */
    address public pendingAdmin;

    /**
     * @notice Contract which oversees inter-cToken operations
     */
    AdjustedComptrollerInterface public comptroller;

    /**
     * @notice Oracle which gives the price of any given asset
     */
    PriceOracle public oracle;

    /**
     * @notice mapping from cTokenCollateral to the max allowed usd value that can be borrowed against that type of collateral 
     */
    mapping (address => uint) public maxAllowedBorrowedAgainst;

    // TODO: fix bug. doesn't recognize struct Borrowsnapshot defined in CTokenInterfaces.sol, so needed to redfine here
    struct NewBorrowSnapshot {
        uint principal;
        uint interestIndex;
    }

    /**
     * @notice mapping from cTokenCollateral and cTokenBorrow to the current amount of tokens that are borrowed against that type of collateral     
        struct BorrowSnapshot {
            uint principal;
            uint interestIndex;
        }
     */
    mapping (address => mapping (address => NewBorrowSnapshot)) public borrowedAgainstMap;


    /*** Logic Functions ***/


    constructor() public {
        admin = msg.sender;
    }

    // called from cTokenBorrow.borrow()
    function commitBorrowedAgainstBorrow(address borrower, uint borrowAmount) 
    external 
    // onlyCToken 
    returns (uint)
    {
        address cTokenBorrow = msg.sender;
        bool isListed = comptroller.markets(cTokenBorrow);
        if (!isListed) {
            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_BORROWED_AGAINST_CALLER_CHECK);
        }

        address cTokenCollateral;
        uint err;
        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);
        if (err != uint(Error.NO_ERROR)) {
            return err;
        }
        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];

        if (CToken(cTokenBorrow).accrualBlockNumber() < block.number) {
            return fail(Error.SANITY, FailureInfo.ACCRUAL_BLOCK_NUMBER_FROM_PAST);
        }

        uint borrowBalance;
        MathError mErr;
        (mErr, borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, cTokenBorrow);
        if (mErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr));
        }
        if (borrowBalance < borrowSnapshot.principal) {
            return fail(Error.SANITY, FailureInfo.BORROW_BALANCE_TOO_SMALL);
        }

        uint borrowAmountAfter;
        (mErr, borrowAmountAfter) = addUInt(borrowBalance, borrowAmount);
        if (mErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ADD_BORROW_BALANCE_AND_AMOUNT_FAILED, uint(mErr));
        }

        // TODO: make sure this writes to storage 
        borrowSnapshot.principal = borrowAmountAfter;
        borrowSnapshot.interestIndex = CToken(cTokenBorrow).borrowIndex();
        return uint(Error.NO_ERROR);
    }

    // called from cTokenBorrow.repayBorrow()
    function commitBorrowedAgainstRepayBorrow(address borrower, uint repayBorrowAmount) 
    external
    // onlyCToken 
    returns (uint)
    {
        address cTokenBorrow = msg.sender;
        bool isListed = comptroller.markets(cTokenBorrow);
        if (!isListed) {
            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_BORROWED_AGAINST_CALLER_CHECK);
        }
        
        address cTokenCollateral;
        uint err;
        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);
        if (err != uint(Error.NO_ERROR)) {
            return err;
        }
        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];

        if (CToken(cTokenBorrow).accrualBlockNumber() < block.number) {
            return fail(Error.SANITY, FailureInfo.ACCRUAL_BLOCK_NUMBER_FROM_PAST);
        }

        uint borrowBalance;
        MathError mErr;
        (mErr, borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, cTokenBorrow);
        if (mErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr));
        }
        if (borrowBalance < borrowSnapshot.principal) {
            return fail(Error.SANITY, FailureInfo.BORROW_BALANCE_TOO_SMALL);
        }

        uint borrowAmountAfter;
        (mErr, borrowAmountAfter) = subUInt(borrowBalance, repayBorrowAmount);
        if (mErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.SUB_BORROW_BALANCE_AND_AMOUNT_FAILED, uint(mErr));
        }

        // TODO: make sure this writes to storage  
        borrowSnapshot.principal = borrowAmountAfter;
        borrowSnapshot.interestIndex = CToken(cTokenBorrow).borrowIndex();
        return uint(Error.NO_ERROR);
    }

    // called from Comptroller.borrowAllowed()
    function borrowAllowedBorrowedAgainst(address borrower, address cTokenBorrow, uint borrowAmountUsd)
    external
    // onlyComptroller
    returns (uint, bool)
    {
        if (msg.sender != address(comptroller)) {
            return (fail(Error.UNAUTHORIZED, FailureInfo.BORROW_ALLOWED_CALLER_CHECK), false);
        }

        address cTokenCollateral;
        uint err;
        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);
        if (err != uint(Error.NO_ERROR)) {
            return (err, false);
        }

        if (maxAllowedBorrowedAgainst[cTokenCollateral] == 0) {
            return (uint(Error.NO_ERROR), true);
        }

        // get all cTokens
        CToken[] memory cTokenBorrows = comptroller.getAllMarkets();

        uint sumBorrowBalanceUsd;
        for (uint i = 0; i < cTokenBorrows.length; i++) {
            CToken cTokenBorrow = cTokenBorrows[i];

            // get the normalized price of the asset
            uint oraclePriceMantissa = oracle.getUnderlyingPrice(cTokenBorrow);
            if (oraclePriceMantissa == 0) {
                return (fail(Error.PRICE_ERROR, FailureInfo.PRICE_RETURNED_ZERO), false);
            }
            Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});

            // note: we're using a borrowIndex from the past.. if we want absolute accuracy we need to accrue interest first in cTokenBorrow
            (MathError mErr, uint borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, address(cTokenBorrow));
            if (mErr != MathError.NO_ERROR) {
                return (failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr)), false);
            }
            
            sumBorrowBalanceUsd = mul_ScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrowBalanceUsd);
        }
        (MathError mErr, uint borrowBalanceTotalUsd) = addUInt(sumBorrowBalanceUsd, borrowAmountUsd);
        if (mErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr)), false);
        }
 
        if (borrowBalanceTotalUsd > maxAllowedBorrowedAgainst[cTokenCollateral]) {
            return (uint(Error.NO_ERROR), false);
        }

        return (uint(Error.NO_ERROR), true);
    }

    function getCTokenCollateralInternal(address borrower, address cTokenBorrow) 
    internal 
    returns (uint, address)
    {
        CToken[] memory assets = comptroller.getAssetsIn(borrower);
        if (assets.length != 2) {
            return (fail(Error.CANT_GET_CTOKENCOLLATERAL, FailureInfo.BORROWER_ASSETS_NOT_TWO), address(0));
        }

        if (address(assets[0]) != cTokenBorrow) {
            if (address(assets[1]) == cTokenBorrow) {
                return (uint(Error.NO_ERROR), address(assets[0]));
            }
            // error: borrowerNotInCTokenBorrow
            return (fail(Error.CANT_GET_CTOKENCOLLATERAL, FailureInfo.BORROWER_NOT_IN_CTOKEN), address(0));
        }

        if (address(assets[1]) != cTokenBorrow) {
            return (uint(Error.NO_ERROR), address(assets[1]));
        }

        // note: cTokenCollateral == cTokenBorrow
        return (uint(Error.NO_ERROR), cTokenBorrow);
    }

    // /**
    //  * @dev passes only if invoked by a listed cToken.
    //  */
    // modifier onlyCToken() 
    // {
    //     // is this syntax ok? markets() returns a tuple 
    //     (bool isListed, ) = Comptroller.markets(msg.sender);
    //     require(isListed, "invoker must be listed as a mraket");
    //     _;
    // }

    // /**
    //  * @dev passes only if invoked by the Comptroller.
    //  */
    // modifier onlyComptroller() 
    // {
    //     require(msg.sender == address(Comptroller), "invoker must be the Comptroller");
    //     _;
    // }


    // from CToken.sol
    /**
     * @notice Return the total balance borrowed from cTokenBorrow whose collateral is cTokenCollateral 
     * @param cTokenCollateral cTokenCollateral
     * @param cTokenBorrow cTokenBorrow
     * @return (error code, the calculated balance or 0 if error code is non-zero)
     */
    function borrowBalanceStoredInternal(address cTokenCollateral, address cTokenBorrow) 
    internal
    view 
    returns (MathError, uint) 
    {
        /* Note: we do not assert that the market is up to date */
        MathError mathErr;
        uint principalTimesIndex;
        uint result;

        /* Get borrowBalance and borrowIndex */
        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];

        /* If borrowBalance = 0 then borrowIndex is likely also 0.
         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.
         */
        if (borrowSnapshot.principal == 0) {
            return (MathError.NO_ERROR, 0);
        }

        /* Calculate new borrow balance using the interest index:
         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex
         */
        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, CToken(cTokenBorrow).borrowIndex());
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        return (MathError.NO_ERROR, result);
    }


    /*** Admin Functions ***/


    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address newPendingAdmin) 
    public 
    returns (uint) 
    {
        // Check caller = admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);
        }

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() 
    public 
    returns (uint) 
    {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        if (msg.sender != pendingAdmin || msg.sender == address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);
        }

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets a new price oracle for the Comptroller
      * @dev Admin function to set a new price oracle
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPriceOracle(PriceOracle newOracle) 
    public 
    returns (uint) 
    {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);
        }

        // Track the old oracle for the Comptroller
        PriceOracle oldOracle = oracle;

        // Set Comptroller's oracle to newOracle
        oracle = newOracle;

        // Emit NewPriceOracle(oldOracle, newOracle)
        emit NewPriceOracle(oldOracle, newOracle);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets a new price oracle for the Comptroller
      * @dev Admin function to set a new price oracle
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setMaxAllowedBorrowedAgainst(address cTokenCollateral, uint newUsdCap) 
    public 
    returns (uint) 
    {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BORROWED_AGAINST_OWNER_CHECK);
        }

        // Track the old max for cTokenCollateral
        uint oldUsdCap = maxAllowedBorrowedAgainst[cTokenCollateral];

        // Set max for cTokenCollateral to newUsdCap
        maxAllowedBorrowedAgainst[cTokenCollateral] = newUsdCap;

        // Emit NewPriceOracle(oldOracle, newOracle)
        emit NewMaxAllowedBorrowedAgainst(cTokenCollateral, oldUsdCap, newUsdCap);

        return uint(Error.NO_ERROR);
    }


}

// File: contracts/Ola/Legacy/BorrowedAgainstInterface.sol
pragma solidity ^0.5.16;

contract BorrowedAgainstInterface {
    function commitBorrowedAgainstBorrow(address borrower, uint borrowAmount) external returns (uint);
    function commitBorrowedAgainstRepayBorrow(address borrower, uint repayBorrowAmount) external returns (uint);
    function borrowAllowedBorrowedAgainst(address borrower, address cTokenBorrow, uint borrowAmountUsd) external returns (uint, bool);
}


// File: contracts/Ola/Core/LendingNetwork/OTokens/CLPStake.sol
pragma solidity ^0.5.16;

import "../Comptroller/ComptrollerInterface.sol";
import "./CTokenInterfaces.sol";
import "../ErrorReporter/ErrorReporter.sol";
import "../../Math/Exponential.sol";
import "../../Interfaces/EIP20Interface.sol";
import "../../OlaPlatform/InterestRateModels/InterestRateModel.sol";
import "./CToken.sol";

/**
 * @title Compound's CToken Contract
 * @notice Abstract base for CTokens
 * @author Compound
 */
contract CLPSTake is CTokenStorage, CLPStakingStorageV0_05, CTokenInterface, CTokenViewInterface, CLPStakingInterfaceV0_05, Exponential, TokenErrorReporter {
    /**
     * @notice Initialize the money market
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ EIP-20 name of this token
     * @param symbol_ EIP-20 symbol of this token
     * @param decimals_ EIP-20 decimal precision of this token
     */
    function initialize(ComptrollerInterface comptroller_,
                        // TODO : DES : Remove IRM
                        InterestRateModel interestRateModel_,
                        // TODO : DES : Add params for farm contract,
                        // TODO : DES : Add params for farm PID,
                        uint initialExchangeRateMantissa_,
                        string memory name_,
                        string memory symbol_,
                        uint8 decimals_) public {
        require(msg.sender == admin, "only admin may initialize the market");
        require(accrualBlockNumber == 0 && borrowIndex == 0, "market may only be initialized once");

        // TODO : DES : Change to be always 1 (better UX)
        // Set initial exchange rate
        initialExchangeRateMantissa = initialExchangeRateMantissa_;
        require(initialExchangeRateMantissa > 0, "initial exchange rate must be greater than zero.");

        // Set the Comptroller
        uint err = _setComptroller(comptroller_);
        require(err == uint(Error.NO_ERROR), "setting comptroller failed");

        // Initialize block number and borrow index (block number mocks depend on Comptroller being set)
        accrualBlockNumber = getBlockNumber();
        accrualBlockTimestamp = getBlockTimestamp();
        borrowIndex = mantissaOne;

        // Set the calculation based flag from the ministry
        RegistryForOToken ministry = RegistryForOToken(comptroller.getRegistry());
        blocksBased = ministry.blocksBased();

        // TODO : DES : Initialzie marketStakingIndex with something link 'stakingInitialIndex'
        // TODO : DES : Add setters for new fields + ministry verifications (farm, reward etc...)

        // Set the interest rate model (depends on block number / borrow index)
        // TODO : DES : Remove IRM
        err = _setInterestRateModelFresh(interestRateModel_);
        require(err == uint(Error.NO_ERROR), "setting interest rate model failed");

        name = name_;
        symbol = symbol_;
        decimals = decimals_;

        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)
        _notEntered = true;
    }

    // TODO : DES : Remove Function
    /**
     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`
     * @dev Called by both `transfer` and `transferFrom` internally
     * @param spender The address of the account performing the transfer
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param tokens The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {
        /* Fail if transfer not allowed */
        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);
        }

        /* Do not allow self-transfers */
        if (src == dst) {
            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);
        }

        /* Get the allowance, infinite for the account owner */
        uint startingAllowance = 0;
        if (spender == src) {
            startingAllowance = uint(-1);
        } else {
            startingAllowance = transferAllowances[src][spender];
        }

        /* Do the calculations, checking for {under,over}flow */
        MathError mathErr;
        uint allowanceNew;
        uint srcTokensNew;
        uint dstTokensNew;

        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);
        }

        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);
        }

        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);
        if (mathErr != MathError.NO_ERROR) {
            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        accountTokens[src] = srcTokensNew;
        accountTokens[dst] = dstTokensNew;

        /* Eat some of the allowance (if necessary) */
        if (startingAllowance != uint(-1)) {
            transferAllowances[src][spender] = allowanceNew;
        }

        /* We emit a Transfer event */
        emit Transfer(src, dst, tokens);

        // unused function
         comptroller.transferVerify(address(this), src, dst, tokens);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {
        // TODO : DES : Revert
        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);
    }

    /**
     * @notice Transfer `amount` tokens from `src` to `dst`
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {
        // TODO : DES : Revert
        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);
    }

    /**
     * @notice Approve `spender` to transfer up to `amount` from `src`
     * @dev This will overwrite the approval amount for `spender`
     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * @param spender The address of the account which may transfer tokens
     * @param amount The number of tokens that are approved (-1 means infinite)
     * @return Whether or not the approval succeeded
     */
    function approve(address spender, uint256 amount) external returns (bool) {
        // TODO : DES : Revert
        address src = msg.sender;
        transferAllowances[src][spender] = amount;
        emit Approval(src, spender, amount);
        return true;
    }

    /**
     * @notice Get the current allowance from `owner` for `spender`
     * @param owner The address of the account which owns the tokens to be spent
     * @param spender The address of the account which may transfer tokens
     * @return The number of tokens allowed to be spent (-1 means infinite)
     */
    function allowance(address owner, address spender) external view returns (uint256) {
        return transferAllowances[owner][spender];
    }

    /**
     * @notice Get the token balance of the `owner`
     * @param owner The address of the account to query
     * @return The number of tokens owned by `owner`
     */
    function balanceOf(address owner) external view returns (uint256) {
        return accountTokens[owner];
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @dev This also accrues interest in a transaction
     * @param owner The address of the account to query
     * @return The amount of underlying owned by `owner`
     */
    function balanceOfUnderlying(address owner) external returns (uint) {
        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});
        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);
        require(mErr == MathError.NO_ERROR, "balance could not be calculated");
        return balance;
    }

    /**
     * @notice Get a snapshot of the account's balances, and the cached exchange rate
     * @dev This is used by Comptroller to more efficiently perform liquidity checks.
     * @param account Address of the account to snapshot
     * @return (possible error, token balance, borrow balance, exchange rate mantissa)
     */
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
        uint cTokenBalance = accountTokens[account];
        uint borrowBalance;
        uint exchangeRateMantissa;

        MathError mErr;

        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);
        if (mErr != MathError.NO_ERROR) {
            return (uint(Error.MATH_ERROR), 0, 0, 0);
        }

        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();
        if (mErr != MathError.NO_ERROR) {
            return (uint(Error.MATH_ERROR), 0, 0, 0);
        }

        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);
    }

    /**
     * @dev Function to simply retrieve block number
     *  This exists mainly for inheriting test contracts to stub this result.
     */
    function getBlockNumber() internal view returns (uint) {
        return block.number;
    }

    /**
     * @dev Function to simply retrieve block timestamp
     *  This exists mainly for inheriting test contracts to stub this result.
     */
    function getBlockTimestamp() internal view returns (uint) {
        return block.timestamp;
    }

    /**
     * @notice Returns the current per-block borrow interest rate for this cToken
     * @return The borrow interest rate per block, scaled by 1e18
     */
    function borrowRatePerBlock() external view returns (uint) {
        // TODO : DES : Return 0
        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);
    }

    /**
     * @notice Returns the current per-block supply interest rate for this cToken
     * @return The supply interest rate per block, scaled by 1e18
     */
    function supplyRatePerBlock() external view returns (uint) {
        // TODO : DES : Return 0 or manage to calculate the interest on-demand (from the farming contract)
        //              Add abstract function
        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);
    }

    /**
     * @notice Returns the current total borrows plus accrued interest
     * @return The total borrows with interest
     */
    function totalBorrowsCurrent() external nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return totalBorrows;
    }

    /**
     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     * @return The calculated balance
     */
    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return borrowBalanceStored(account);
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return The calculated balance
     */
    function borrowBalanceStored(address account) public view returns (uint) {
        (MathError err, uint result) = borrowBalanceStoredInternal(account);
        require(err == MathError.NO_ERROR, "borrowBalanceStored: borrowBalanceStoredInternal failed");
        return result;
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return (error code, the calculated balance or 0 if error code is non-zero)
     */
    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {
        // TODO : DES : Return 0
        /* Note: we do not assert that the market is up to date */
        MathError mathErr;
        uint principalTimesIndex;
        uint result;

        /* Get borrowBalance and borrowIndex */
        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];

        /* If borrowBalance = 0 then borrowIndex is likely also 0.
         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.
         */
        if (borrowSnapshot.principal == 0) {
            return (MathError.NO_ERROR, 0);
        }

        /* Calculate new borrow balance using the interest index:
         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex
         */
        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);
        if (mathErr != MathError.NO_ERROR) {
            return (mathErr, 0);
        }

        return (MathError.NO_ERROR, result);
    }

    /**
     * @notice Accrue interest then return the up-to-date exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateCurrent() public nonReentrant returns (uint) {
        require(accrueInterest() == uint(Error.NO_ERROR), "accrue interest failed");
        return exchangeRateStored();
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateStored() public view returns (uint) {
        (MathError err, uint result) = exchangeRateStoredInternal();
        require(err == MathError.NO_ERROR, "exchangeRateStored: exchangeRateStoredInternal failed");
        return result;
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return (error code, calculated exchange rate scaled by 1e18)
     */
    function exchangeRateStoredInternal() internal view returns (MathError, uint) {
        // TODO : DES : Return initialExchangeRateMantissa

        uint _totalSupply = totalSupply;
        if (_totalSupply == 0) {
            /*
             * If there are no tokens minted:
             *  exchangeRate = initialExchangeRate
             */
            return (MathError.NO_ERROR, initialExchangeRateMantissa);
        } else {
            /*
             * Otherwise:
             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply
             */
            uint totalCash = getCashPrior();
            uint cashPlusBorrowsMinusReserves;
            Exp memory exchangeRate;
            MathError mathErr;

            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);
            if (mathErr != MathError.NO_ERROR) {
                return (mathErr, 0);
            }

            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);
            if (mathErr != MathError.NO_ERROR) {
                return (mathErr, 0);
            }

            return (MathError.NO_ERROR, exchangeRate.mantissa);
        }
    }

    /**
     * @notice Get cash balance of this cToken in the underlying asset
     * @return The quantity of underlying asset owned by this contract
     */
    function getCash() external view returns (uint) {
        return getCashPrior();
    }

    /**
     * @notice Get the accrual block number of this cToken
     * @return The accrual block number
     */
    function getAccrualBlockNumber() external view returns (uint) {
        return accrualBlockNumber;
    }

    /**
     * @notice Applies accrued interest to total borrows and reserves
     * @dev This calculates interest accrued from the last checkpointed block
     *   up to the current block and writes new checkpoint to storage.
     */
    function accrueInterest() public returns (uint) {
        /* Remember the initial block number */
        uint currentBlockNumber = getBlockNumber();
        uint accrualBlockNumberPrior = accrualBlockNumber;
        uint currentBlockTimestamp = getBlockTimestamp();
        uint currentMarketStakingIndex = marketStakingIndex;
        MathError mathErr;

        /* Short-circuit accumulating 0 interest */
        if (accrualBlockNumberPrior == currentBlockNumber) {
            return uint(Error.NO_ERROR);
        }

        uint deltaBlocks = sub_(currentBlockNumber, accrualBlockNumberPrior);


        uint rewardsReceived = doClaimFromFarm();

        uint marketStakingIndexNew = currentMarketStakingIndex;
        if (rewardsReceived > 0) {
            uint supplyTokens = totalSupply;
            Double memory ratio = supplyTokens > 0 ? fraction(rewardsReceived, supplyTokens) : Double({mantissa: 0});
            marketStakingIndexNew = uint(add_(Double({ mantissa: currentMarketStakingIndex}), ratio).mantissa);
        }

        /* Read the previous values out of storage */
        uint reservesPrior = totalReserves;
        uint totalReservesNew;

        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), rewardsReceived, reservesPrior);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We write the previously calculated values into storage */
        accrualBlockNumber = currentBlockNumber;
        accrualBlockTimestamp = currentBlockTimestamp;
        totalReserves = totalReservesNew;
        marketStakingIndex = marketStakingIndexNew;

        /* We emit an AccrueRewardsInterest event */
        emit AccrueRewardsInterest(currentMarketStakingIndex, marketStakingIndex, reservesPrior, totalReservesNew);

        return uint(Error.NO_ERROR);
    }

    /**
    * @notice Calculate Rewards accrued by a supplier.
    * @param supplier The address of the supplier to distribute Rewards to
    */
    function distributeSupplierRewardsInternal(address supplier) internal {
        uint supplyIndex = marketStakingIndex;
        uint supplierIndex = supplierStakingIndex[supplier];

        // Update supplier's index to the current index since we are distributing accrued COMP
        supplierStakingIndex[supplier] = supplyIndex;

        uint supplierDelta = 0;

        if (supplierIndex > 0) {
            // Calculate change in the cumulative sum of the Rewards per cToken accrued
            Double memory deltaIndex = Double({mantissa: sub_(supplyIndex, supplierIndex)});
            uint supplierTokens = accountTokens[supplier];

            // Calculate Rewards accrued: cTokenAmount * accruedPerCToken
            supplierDelta = mul_(supplierTokens, deltaIndex);

            uint supplierAccrued = add_(rewardsAccrued[supplier], supplierDelta);
            rewardsAccrued[supplier] = supplierAccrued;
        }

        emit DistributeSupplierRewards(supplier, supplierDelta, supplyIndex);
    }

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param mintAmount The amount of the underlying asset to supply
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.
     */
    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);
        }

        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to
        return mintFresh(msg.sender, mintAmount);
    }

    struct MintLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint mintTokens;
        uint totalSupplyNew;
        uint accountTokensNew;
        uint actualMintAmount;
    }

    /**
     * @notice User supplies assets into the market and receives cTokens in exchange
     * @dev Assumes interest has already been accrued up to the current block
     * @param minter The address of the account which is supplying the assets
     * @param mintAmount The amount of the underlying asset to supply
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.
     */
    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {
        /* Fail if mint not allowed */
        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);
        }

        MintLocalVars memory vars;

        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();
        if (vars.mathErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        // TODO : DES : Added this
        distributeSupplierRewardsInternal(minter);

        /*
         *  We call `doTransferIn` for the minter and the mintAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if
         *  side-effects occurred. The function returns the amount actually transferred,
         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`
         *  of cash.
         */
        vars.actualMintAmount = doTransferIn(minter, mintAmount);

        // TODO : DES : Stake LP tokens in farm contract


        /*
         * We get the current exchange rate and calculate the number of cTokens to be minted:
         *  mintTokens = actualMintAmount / exchangeRate
         */

        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));
        require(vars.mathErr == MathError.NO_ERROR, "MINT_EXCHANGE_CALCULATION_FAILED");

        /*
         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:
         *  totalSupplyNew = totalSupply + mintTokens
         *  accountTokensNew = accountTokens[minter] + mintTokens
         */
        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);
        require(vars.mathErr == MathError.NO_ERROR, "MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED");

        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);
        require(vars.mathErr == MathError.NO_ERROR, "MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED");

        /* We write previously calculated values into storage */
        totalSupply = vars.totalSupplyNew;
        accountTokens[minter] = vars.accountTokensNew;

        /* We emit a Mint event, and a Transfer event */
        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);
        emit Transfer(address(this), minter, vars.mintTokens);

        /* We call the defense hook */
        // unused function
        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);

        return (uint(Error.NO_ERROR), vars.actualMintAmount);
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed
            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);
        }
        // redeemFresh emits redeem-specific logs on errors, so we don't need to
        return redeemFresh(msg.sender, redeemTokens, 0);
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to receive from redeeming cTokens
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed
            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);
        }
        // redeemFresh emits redeem-specific logs on errors, so we don't need to
        return redeemFresh(msg.sender, 0, redeemAmount);
    }

    struct RedeemLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint redeemTokens;
        uint redeemAmount;
        uint totalSupplyNew;
        uint accountTokensNew;
    }

    /**
     * @notice User redeems cTokens in exchange for the underlying asset
     * @dev Assumes interest has already been accrued up to the current block
     * @param redeemer The address of the account which is redeeming the tokens
     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)
     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {
        require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of redeemTokensIn or redeemAmountIn must be zero");

        RedeemLocalVars memory vars;

        /* exchangeRate = invoke Exchange Rate Stored() */
        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));
        }

        /* If redeemTokensIn > 0: */
        if (redeemTokensIn > 0) {
            /*
             * We calculate the exchange rate and the amount of underlying to be redeemed:
             *  redeemTokens = redeemTokensIn
             *  redeemAmount = redeemTokensIn x exchangeRateCurrent
             */
            vars.redeemTokens = redeemTokensIn;

            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);
            if (vars.mathErr != MathError.NO_ERROR) {
                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));
            }
        } else {
            /*
             * We get the current exchange rate and calculate the amount to be redeemed:
             *  redeemTokens = redeemAmountIn / exchangeRate
             *  redeemAmount = redeemAmountIn
             */

            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));
            if (vars.mathErr != MathError.NO_ERROR) {
                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));
            }

            vars.redeemAmount = redeemAmountIn;
        }

        /* Fail if redeem not allowed */
        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);
        }

        /*
         * We calculate the new total supply and redeemer balance, checking for underflow:
         *  totalSupplyNew = totalSupply - redeemTokens
         *  accountTokensNew = accountTokens[redeemer] - redeemTokens
         */
        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        /* Fail gracefully if protocol has insufficient cash */
        if (getCashPrior() < vars.redeemAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        // TODO : DES : Added this function
        distributeSupplierRewardsInternal(redeemer);

        // TODO : DES : Withdraw required amount from farm contract (vars.redeemAmount)

        /*
         * We invoke doTransferOut for the redeemer and the redeemAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken has redeemAmount less of cash.
         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
         */
        doTransferOut(redeemer, vars.redeemAmount);

        /* We write previously calculated values into storage */
        totalSupply = vars.totalSupplyNew;
        accountTokens[redeemer] = vars.accountTokensNew;

        /* We emit a Transfer event, and a Redeem event */
        emit Transfer(redeemer, address(this), vars.redeemTokens);
        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);

        /* We call the defense hook */
        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);

        return uint(Error.NO_ERROR);
    }

    // TODO : DES : Remove borrow function
    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {
        uint error = accrueInterest();

        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);
        }
        // borrowFresh emits borrow-specific logs on errors, so we don't need to
        return borrowFresh(msg.sender, borrowAmount);
    }

    // TODO : DES : Remove borrow function
    struct BorrowLocalVars {
        MathError mathErr;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
    }

    // TODO : DES : Remove borrow function
    /**
      * @notice Users borrow assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {
        /* Fail if borrow not allowed */
        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);

        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);
        }


        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);
        }

        /* Fail gracefully if protocol has insufficient underlying cash */
        if (getCashPrior() < borrowAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);
        }

        BorrowLocalVars memory vars;

        /*
         * We calculate the new borrower and total borrow balances, failing on overflow:
         *  accountBorrowsNew = accountBorrows + borrowAmount
         *  totalBorrowsNew = totalBorrows + borrowAmount
         */
        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);
        if (vars.mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We invoke doTransferOut for the borrower and the borrowAmount.
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken borrowAmount less of cash.
         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
         */
        doTransferOut(borrower, borrowAmount);

        /* We write the previously calculated values into storage */
        accountBorrows[borrower].principal = vars.accountBorrowsNew;
        accountBorrows[borrower].interestIndex = borrowIndex;
        totalBorrows = vars.totalBorrowsNew;

        /* We emit a Borrow event */
        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

        /* We call the defense hook */
        // unused function
        // Comptroller.borrowVerify(address(this), borrower, borrowAmount);

        return uint(Error.NO_ERROR);
    }

    // TODO : DES : Remove borrow function
    /**
     * @notice Sender repays their own borrow
     * @param repayAmount The amount to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);
        }
        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to
        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);
    }

    // TODO : DES : Remove borrow function
    /**
     * @notice Sender repays a borrow belonging to borrower
     * @param borrower the account with the debt being payed off
     * @param repayAmount The amount to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed
            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);
        }
        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to
        return repayBorrowFresh(msg.sender, borrower, repayAmount);
    }

    // TODO : DES : Remove borrow function
    struct RepayBorrowLocalVars {
        Error err;
        MathError mathErr;
        uint repayAmount;
        uint borrowerIndex;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
        uint actualRepayAmount;
    }

    // TODO : DES : Remove borrow function
    /**
     * @notice Borrows are repaid by another user (possibly the borrower).
     * @param payer the account paying off the borrow
     * @param borrower the account with the debt being payed off
     * @param repayAmount the amount of undelrying tokens being returned
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {
        /* Fail if repayBorrow not allowed */
        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);
        }

        RepayBorrowLocalVars memory vars;

        /* We remember the original borrowerIndex for verification purposes */
        vars.borrowerIndex = accountBorrows[borrower].interestIndex;

        /* We fetch the amount the borrower owes, with accumulated interest */
        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);
        if (vars.mathErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);
        }

        /* If repayAmount == -1, repayAmount = accountBorrows */
        if (repayAmount == uint(-1)) {
            vars.repayAmount = vars.accountBorrows;
        } else {
            vars.repayAmount = repayAmount;
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We call doTransferIn for the payer and the repayAmount
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken holds an additional repayAmount of cash.
         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.
         *   it returns the amount actually transferred, in case of a fee.
         */
        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);

        /*
         * We calculate the new borrower and total borrow balances, failing on underflow:
         *  accountBorrowsNew = accountBorrows - actualRepayAmount
         *  totalBorrowsNew = totalBorrows - actualRepayAmount
         */
        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");

        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");

        /* We write the previously calculated values into storage */
        accountBorrows[borrower].principal = vars.accountBorrowsNew;
        accountBorrows[borrower].interestIndex = borrowIndex;
        totalBorrows = vars.totalBorrowsNew;

        /* We emit a RepayBorrow event */
        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

        /* We call the defense hook */
        // unused function
        // Comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);

        return (uint(Error.NO_ERROR), vars.actualRepayAmount);
    }

    // TODO : DES : Remove borrow function
    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed
            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);
        }

        error = cTokenCollateral.accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed
            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);
        }

        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to
        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);
    }

    // TODO : DES : Remove borrow function
    /**
     * @notice The liquidator liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param liquidator The address repaying the borrow and seizing collateral
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.
     */
    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {
        /* Fail if liquidate not allowed */
        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);
        }

        /* Verify cTokenCollateral market's block number equals current block number */
        if (cTokenCollateral.getAccrualBlockNumber() != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);
        }

        /* Fail if borrower = liquidator */
        if (borrower == liquidator) {
            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);
        }

        /* Fail if repayAmount = 0 */
        if (repayAmount == 0) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);
        }

        /* Fail if repayAmount = -1 */
        if (repayAmount == uint(-1)) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);
        }


        /* Fail if repayBorrow fails */
        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);
        if (repayBorrowError != uint(Error.NO_ERROR)) {
            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We calculate the number of collateral tokens that will be seized */
        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);
        require(amountSeizeError == uint(Error.NO_ERROR), "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");

        /* Revert if borrower collateral token balance < seizeTokens */
        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, "LIQUIDATE_SEIZE_TOO_MUCH");

        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call
        uint seizeError;
        if (address(cTokenCollateral) == address(this)) {
            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);
        } else {
            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);
        }

        /* Revert if seize tokens fails (since we cannot be sure of side effects) */
        require(seizeError == uint(Error.NO_ERROR), "token seizure failed");

        /* We emit a LiquidateBorrow event */
        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);

        /* We call the defense hook */
        // unused function
        // Comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);

        return (uint(Error.NO_ERROR), actualRepayAmount);
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Will fail unless called by another cToken during the process of liquidation.
     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {
        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.
     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.
     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
        /* Fail if seize not allowed */
        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);
        if (allowed != 0) {
            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);
        }

        /* Fail if borrower = liquidator */
        if (borrower == liquidator) {
            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);
        }

        MathError mathErr;
        uint borrowerTokensNew;
        uint liquidatorTokensNew;

        /*
         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:
         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens
         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens
         */
        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));
        }

        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        // TODO : DES : Added this functions
        distributeSupplierRewardsInternal(borrower);
        distributeSupplierRewardsInternal(liquidator);

        /* We write the previously calculated values into storage */
        accountTokens[borrower] = borrowerTokensNew;
        accountTokens[liquidator] = liquidatorTokensNew;

        /* Emit a Transfer event */
        emit Transfer(borrower, liquidator, seizeTokens);

        /* We call the defense hook */
        // Transfer verify is required here due to tokens being transferred, and have to keep the
        // ACC accounting in check
        // This works, because the 'borrower' has to be in this market. and so, the active collateral usage can either remain unchanged
        // (if the liquidator is also in the market) or reduce (if the liquidator is not in the market)
        comptroller.transferVerify(address(this), borrower, liquidator, seizeTokens);

        /* We call the defense hook */
        // unused function
        // Comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);

        return uint(Error.NO_ERROR);
    }

    /*** Admin Functions ***/

    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
        // Check caller = admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);
        }

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() external returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        if (msg.sender != pendingAdmin || msg.sender == address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);
        }

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Made internal and removes Admin check.
      * @notice Sets a new Comptroller for the market
      * @dev Admin function to set a new Comptroller
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {
        ComptrollerInterface oldComptroller = comptroller;
        // Ensure invoke Comptroller.isComptroller() returns true
        require(newComptroller.isComptroller(), "marker method returned false");

        // Set market's Comptroller to newComptroller
        comptroller = newComptroller;

        // Emit NewComptroller(oldComptroller, newComptroller)
        emit NewComptroller(oldComptroller, newComptroller);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh
      * @dev Admin function to accrue interest and set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.
            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);
        }
        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.
        return _setReserveFactorFresh(newReserveFactorMantissa);
    }

    /**
      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)
      * @dev Admin function to set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);
        }

        // Verify market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);
        }

        // Check newReserveFactor ≤ maxReserveFactor
        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {
            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
        }

        // OLA_ADDITIONS :This constraint
        // Check newReserveFactor >= minReserveFactor
        if (newReserveFactorMantissa < reserveFactorMinMantissa) {
            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);
        }

        uint oldReserveFactorMantissa = reserveFactorMantissa;
        reserveFactorMantissa = newReserveFactorMantissa;

        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Accrues interest and reduces reserves by transferring to admin
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.
            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);
        }

        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.
        return _reduceReservesFresh(reduceAmount);
    }

    /**
     * @notice Reduces reserves by transferring to the LeN admin and to Ola bank their respective shares
     * @dev Requires fresh interest accrual
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
        // totalReserves - reduceAmount
        uint totalReservesNew;

        // OLA_ADDITIONS : Allowing anyone to reduce reserves
        // Check caller is admin
        // if (msg.sender != admin) {
        //     return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);
        // }

        // We fail gracefully unless market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);
        }

        // Fail gracefully if protocol has insufficient underlying cash
        if (getCashPrior() < reduceAmount) {
            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);
        }

        // Check reduceAmount ≤ reserves[n] (totalReserves)
        if (reduceAmount > totalReserves) {
            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);
        }

        // OLA_ADDITIONS : Dividing the reduced amount between the Admin and Ola (+validations)
        //                 Important to notice that we have added Math calculations to this function.
        //                 Where as before, it only used pre-calculated numbers.
        MathError mathErr;
        uint adminPart;
        uint olaPart;
        uint olaReserveFactor = fetchOlaReserveFactorMantissa();
        address payable olaBankAddress = fetchOlaBankAddress();
        address payable adminBankAddress = fetchAdminBankAddress();

        // Calculate olaPart
        (mathErr, olaPart) = mulScalarTruncate(Exp({mantissa: olaReserveFactor}), reduceAmount);
        if (mathErr != MathError.NO_ERROR) {
            return failOpaque(Error.MATH_ERROR, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED, uint(mathErr));
        }

        // Sanity check, should never be a problem in a well parameterized system
        if (olaPart >= reduceAmount) {
            return fail(Error.BAD_SYSTEM_PARAMS, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        // Calculate admin part
        adminPart = reduceAmount - olaPart;
        // We checked olaPart < reduceAmount above, so this should never revert.
        require(adminPart < reduceAmount, "reduce reserves unexpected adminPart underflow");

        totalReservesNew = totalReserves - reduceAmount;
        // We checked reduceAmount <= totalReserves above, so this should never revert.
        require(totalReservesNew <= totalReserves, "reduce reserves unexpected underflow");

        // Store reserves[n+1] = reserves[n] - reduceAmount
        totalReserves = totalReservesNew;

        // OLA_ADDITIONS : Transfer reserves to both admin and Ola bank addresses
        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.
        doTransferOut(adminBankAddress, adminPart);
        doTransferOut(olaBankAddress, olaPart);

        emit ReservesReduced(adminBankAddress, adminPart, olaBankAddress, olaPart, totalReservesNew);

        return uint(Error.NO_ERROR);
    }

    // TODO : DES : Remove IRM functions
    /**
     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh
     * @dev Admin function to accrue interest and update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
        uint error = accrueInterest();
        if (error != uint(Error.NO_ERROR)) {
            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed
            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);
        }
        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.
        return _setInterestRateModelFresh(newInterestRateModel);
    }

    // TODO : DES : Remove IRM functions
    /**
     * @notice updates the interest rate model (*requires fresh interest accrual)
     * @dev Admin function to update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {

        // Used to store old model for use in the event that is emitted on success
        InterestRateModel oldInterestRateModel;

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);
        }

        // We fail gracefully unless market's block number equals current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);
        }

        // Ensure interest rate model is an approved contracts
        RegistryForOToken registry = RegistryForOToken(comptroller.getRegistry());

        require(registry.isSupportedInterestRateModel(address(newInterestRateModel)), "Unapproved interest rate model");

        // Track the market's current interest rate model
        oldInterestRateModel = interestRateModel;

        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true
        require(newInterestRateModel.isInterestRateModel(), "marker method returned false");

        // Set the interest rate model to newInterestRateModel
        interestRateModel = newInterestRateModel;

        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)
        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);

        return uint(Error.NO_ERROR);
    }

    /*** Safe Token ***/

    /**
     * @notice Gets balance of this contract in terms of the underlying
     * @dev This excludes the value of the current message, if any
     * @return The quantity of underlying owned by this contract
     */
    function getCashPrior() internal view returns (uint);

    /**
     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.
     *  This may revert due to insufficient balance or insufficient allowance.
     */
    function doTransferIn(address from, uint amount) internal returns (uint);

    /**
     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.
     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.
     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.
     */
    function doTransferOut(address payable to, uint amount) internal;

    // TODO : DES : Implement
    function doStake(uint amount) internal;

    // TODO : DES : Implement
    function doUnstake(uint amount) internal returns (uint);

    // TODO : DES : Implement
    function doClaimFromFarm() internal returns (uint);

    // TODO : DES : Implement
    function claimSupplierRewards() internal;

    /**
     * OLA_ADDITIONS: This function
     * @dev Returns the ola reserves factor.
     */
    function fetchOlaReserveFactorMantissa() internal pure returns (uint) {
        return olaReserveFactorMantissa;
    }

    /**
     * OLA_ADDITIONS: This function
     * @dev Fetches the ola bank address.
     */
    function fetchOlaBankAddress() internal returns (address payable) {
        return RegistryForOToken(comptroller.getRegistry()).olaBankAddress();
    }

    /**
     * OLA_ADDITIONS: This function
     * @dev Fetches the admin bank address.
     */
    function fetchAdminBankAddress() internal view returns (address payable) {
        return ComptrollerForOToken(address(comptroller)).adminBankAddress();
    }

    /*** Reentrancy Guard ***/

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     */
    modifier nonReentrant() {
        require(_notEntered, "re-entered");
        _notEntered = false;
        _;
        _notEntered = true; // get a gas-refund post-Istanbul
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.05/CLPStakeV0_05.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../../OTokens/CLPStake.sol";

interface IMasterChefForClpStateV0_05 {
    // Deposit LP tokens to MasterChef for SPIRIT allocation.
    function deposit(uint256 _pid, uint256 _amount) external;

    // Withdraw LP tokens from MasterChef.
    function withdraw(uint256 _pid, uint256 _amount) external;
}

/**
 * @title Ola's CErc20 Contract V0.01
 * @notice CTokens which wrap an EIP-20 underlying
 * @author Ola
 */
contract CLPStakeV0_05 is CLPSTake {
    /**
     * @notice Initialize the new money market
     * @param underlying_ The address of the underlying asset
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     */
    function initialize(address underlying_,
                        ComptrollerInterface comptroller_,
                        InterestRateModel interestRateModel_,
                        uint initialExchangeRateMantissa_,
                        string memory name_,
                        string memory symbol_,
                        uint8 decimals_) public {
        // CToken initialize does the bulk of the work
        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);

        // Set underlying and sanity check it
        underlying = underlying_;
        EIP20Interface(underlying).totalSupply();
    }

    /*** User Interface ***/

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param mintAmount The amount of the underlying asset to supply
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function mint(uint mintAmount) external returns (uint) {
        (uint err,) = mintInternal(mintAmount);
        return err;
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeem(uint redeemTokens) external returns (uint) {
        return redeemInternal(redeemTokens);
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to redeem
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlying(uint redeemAmount) external returns (uint) {
        return redeemUnderlyingInternal(redeemAmount);
    }

    // TODO : DES : Remove borrow functions / Revert
    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrow(uint borrowAmount) external returns (uint) {
        return borrowInternal(borrowAmount);
    }

    // TODO : DES : Remove borrow functions / Revert
    /**
     * @notice Sender repays their own borrow
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrow(uint repayAmount) external returns (uint) {
        (uint err,) = repayBorrowInternal(repayAmount);
        return err;
    }

    // TODO : DES : Remove borrow functions / Revert
    /**
     * @notice Sender repays a borrow belonging to borrower
     * @param borrower the account with the debt being payed off
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {
        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);
        return err;
    }

    // TODO : DES : Remove borrow functions / Revert
    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {
        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);
        return err;
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
    	require(address(token) != underlying, "CErc20::sweepToken: can not sweep underlying token");
    	uint256 balance = token.balanceOf(address(this));
    	token.transfer(admin, balance);
    }

    /*** Safe Token ***/

    /**
     * @notice Gets balance of this contract in terms of the underlying
     * @dev This excludes the value of the current message, if any
     * @return The quantity of underlying tokens owned by this contract
     */
    function getCashPrior() internal view returns (uint) {
        EIP20Interface token = EIP20Interface(underlying);
        return token.balanceOf(address(this));
    }

    /**
     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.
     *      This will revert due to insufficient balance or insufficient allowance.
     *      This function returns the actual amount received,
     *      which may be less than `amount` if there is a fee attached to the transfer.
     *
     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
     */
    function doTransferIn(address from, uint amount) internal returns (uint) {
        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);
        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));
        token.transferFrom(from, address(this), amount);

        bool success;
        assembly {
            switch returndatasize()
                case 0 {                       // This is a non-standard ERC-20
                    success := not(0)          // set success to true
                }
                case 32 {                      // This is a compliant ERC-20
                    returndatacopy(0, 0, 32)
                    success := mload(0)        // Set `success = returndata` of external call
                }
                default {                      // This is an excessively non-compliant ERC-20, revert.
                    revert(0, 0)
                }
        }
        require(success, "TOKEN_TRANSFER_IN_FAILED");

        // Calculate the amount that was *actually* transferred
        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");
        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract
    }

    /**
     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory
     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to
     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified
     *      it is >= amount, this should not revert in normal conditions.
     *
     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
     */
    function doTransferOut(address payable to, uint amount) internal {
        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);
        token.transfer(to, amount);

        bool success;
        assembly {
            switch returndatasize()
                case 0 {                      // This is a non-standard ERC-20
                    success := not(0)          // set success to true
                }
                case 32 {                     // This is a compliant ERC-20
                    returndatacopy(0, 0, 32)
                    success := mload(0)        // Set `success = returndata` of external call
                }
                default {                     // This is an excessively non-compliant ERC-20, revert.
                    revert(0, 0)
                }
        }
        require(success, "TOKEN_TRANSFER_OUT_FAILED");
    }

    function doStake(uint amount) internal {
        // TODO : DES : Think about reverting if rewards were received due to deposit

        safeApprove(underlying, farmAddress, 0);
        safeApprove(underlying, farmAddress, amount);

        IMasterChefForClpStateV0_05(farmAddress).deposit(pid, amount);
    }

    function doUnstake(uint amount) internal returns (uint) {
        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));

        // TODO : DES : Think about reverting if rewards were received due to withdraw (Does not go together with the 'doClaimFromFarm')
        IMasterChefForClpStateV0_05(farmAddress).withdraw(pid, amount);

        // Calculate the amount that was *actually* transferred
        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");
        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract
    }

    function doClaimFromFarm() internal returns (uint) {
        uint balanceBefore = EIP20Interface(rewardToken).balanceOf(address(this));
        // Expected to receive rewards
        doUnstake(0);

        // Calculate the amount that was *actually* transferred
        uint balanceAfter = EIP20Interface(rewardToken).balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "REWARD_CLAIMING_IN_OVERFLOW");
        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract
    }

    // https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol
    function safeApprove(
        address token,
        address to,
        uint256 value
    ) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            'TransferHelper::safeApprove: approve failed'
        );
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.05/delegates/CLPStakeDelegateV0_05.sol
pragma solidity ^0.5.16;

import "../CLPStakeV0_05.sol";

/**
 * @title Compound's CErc20Delegate Contract
 * @notice CTokens which wrap an EIP-20 underlying and are delegated to
 * @author Compound
 */
contract CLPStakeDelegateV0_05 is CLPStakeV0_05, CDelegateInterface {
    /**
     * @notice Construct an empty delegate
     */
    constructor() public {}

    /**
     * @notice Called by the delegator on a delegate to initialize it for duty
     * @param data The encoded bytes data for any initialization
     */
    function _becomeImplementation(bytes memory data) public {
        // Shh -- currently unused
        data;

        // Shh -- we don't ever want this hook to be marked pure
        if (false) {
            implementation = address(0);
        }

        // OLA_ADDITION : The 'or Comptroller'
        // The only time where msg.sender is the admin is during construction of the 'delegator' contract
        require(msg.sender == admin || msg.sender == address(comptroller), "only the admin and comptroller may call _becomeImplementation");
    }

    /**
     * @notice Called by the delegator on a delegate to forfeit its responsibility
     */
    function _resignImplementation() public {
        // Shh -- we don't ever want this hook to be marked pure
        if (false) {
            implementation = address(0);
        }

        // OLA_ADDITION : Was 'only admin'. Now, 'only Comptroller'
        require(msg.sender == address(comptroller), "only the comptroller may call _resignImplementation");
    }
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/JumpRateModelV2.sol
pragma solidity ^0.5.16;

import "./BaseJumpRateModelV2.sol";
import "./InterestRateModel.sol";


/**
  * @title Compound's JumpRateModel Contract V2 for V2 cTokens
  * @author Arr00
  * @notice Supports only for V2 cTokens
  */
contract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {

	/**
     * @notice Calculates the current borrow rate per block
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {
        return getBorrowRateInternal(cash, borrows, reserves);
    }

    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)
    	BaseJumpRateModelV2(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/BaseJumpRateModelV2.sol
pragma solidity ^0.5.16;

import "../../Math/SafeMath.sol";

/**
  * @title Logic for Compound's JumpRateModel Contract V2.
  * @author Compound (modified by Dharma Labs, refactored by Arr00)
  * @notice Version 2 modifies Version 1 by enabling updateable parameters.
  */
contract BaseJumpRateModelV2 {
    using SafeMath for uint;

    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);

    /**
     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly
     */
    address public owner;

    /**
     * @notice The approximate number of blocks per year that is assumed by the interest rate model
     */
    uint public blocksPerYear;

    /**
     * @notice The multiplier of utilization rate that gives the slope of the interest rate
     */
    uint public multiplierPerBlock;

    /**
     * @notice The base interest rate which is the y-intercept when utilization rate is 0
     */
    uint public baseRatePerBlock;

    /**
     * @notice The multiplierPerBlock after hitting a specified utilization point
     */
    uint public jumpMultiplierPerBlock;

    /**
     * @notice The utilization point at which the jump multiplier is applied
     */
    uint public kink;

    /**
     * @notice Construct an interest rate model
     * @param blocksPerYear_ The approximate number of blocks per year that is assumed by the interest rate model
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)
     */
    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) internal {
        owner = owner_;
        blocksPerYear = blocksPerYear_;

        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);
    }

    /**
     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     */
    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) external {
        require(msg.sender == owner, "only the owner may call this function.");

        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);
    }

    /**
     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market (currently unused)
     * @return The utilization rate as a mantissa between [0, 1e18]
     */
    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {
        // Utilization rate is 0 when there are no borrows
        if (borrows == 0) {
            return 0;
        }

        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));
    }

    /**
     * @notice Calculates the current borrow rate per block, with the error code expected by the market
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {
        uint util = utilizationRate(cash, borrows, reserves);

        if (util <= kink) {
            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);
        } else {
            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);
            uint excessUtil = util.sub(kink);
            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);
        }
    }

    /**
     * @notice Calculates the current supply rate per block
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @param reserveFactorMantissa The current reserve factor for the market
     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {
        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);
        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);
        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);
        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);
    }

    /**
     * @notice Internal function to update the parameters of the interest rate model
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     */
    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {
        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);
        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));
        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);
        kink = kink_;

        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);
    }
}


// File: contracts/Ola/Core/Math/SafeMath.sol
pragma solidity ^0.5.16;

// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol
// Subject to the MIT license.

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, errorMessage);

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot underflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction underflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot underflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, errorMessage);

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers.
     * Reverts on division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers.
     * Reverts with custom message on division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/LegacyJumpRateModelV2.sol
pragma solidity ^0.5.16;

import "./BaseJumpRateModelV2.sol";
import "./LegacyInterestRateModel.sol";


/**
  * @title Compound's JumpRateModel Contract V2 for Legacy cTokens
  * @author Arr00
  * @notice Supports only Legacy cTokens
  */
contract LegacyJumpRateModelV2 is LegacyInterestRateModel, BaseJumpRateModelV2  {

	/**
     * @notice Calculates the current borrow rate per block, with the error code expected by the market
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @return (Error, The borrow rate percentage per block as a mantissa (scaled by 1e18))
     */
    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint, uint) {
        return (0,getBorrowRateInternal(cash, borrows, reserves));
    }
    
    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)
    	BaseJumpRateModelV2(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/LegacyInterestRateModel.sol
pragma solidity ^0.5.16;

/**
  * @title Compound's Legacy InterestRateModel Interface
  * @author Compound (modified by Arr00)
  */
contract LegacyInterestRateModel {
    /// @notice Indicator that this is an InterestRateModel contract (for inspection)
    bool public constant isInterestRateModel = true;

    /**
      * @notice Calculates the current borrow interest rate per block
      * @param cash The total amount of cash the market has
      * @param borrows The total amount of borrows the market has outstanding
      * @param reserves The total amount of reserves the market has
      * @return error code (0 = no error), The borrow rate per block (as a percentage, and scaled by 1e18)
      */
    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint,uint);

    /**
      * @notice Calculates the current supply interest rate per block
      * @param cash The total amount of cash the market has
      * @param borrows The total amount of borrows the market has outstanding
      * @param reserves The total amount of reserves the market has
      * @param reserveFactorMantissa The current reserve factor the market has
      * @return The supply rate per block (as a percentage, and scaled by 1e18)
      */
    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);

}


// File: contracts/Ola/Peripheral/Timelock/Timelock.sol
pragma solidity ^0.5.16;

import "../../Core/Math/SafeMath.sol";

contract Timelock {
    using SafeMath for uint;

    event NewAdmin(address indexed newAdmin);
    event NewPendingAdmin(address indexed newPendingAdmin);
    event NewDelay(uint indexed newDelay);
    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);
    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);
    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);

    uint public constant GRACE_PERIOD = 14 days;
    uint public constant MINIMUM_DELAY = 2 days;
    uint public constant MAXIMUM_DELAY = 30 days;
    // OLA_ADDITIONS : This constant
    // We would like to prevent the scheduling of transactions too distant in the future
    uint public constant ETA_TIME_FRAME = 30 days;

    address public admin;
    address public pendingAdmin;
    uint public delay;

    mapping (bytes32 => bool) public queuedTransactions;


    constructor(address admin_, uint delay_) public {
        require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay must exceed minimum delay.");
        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");

        admin = admin_;
        delay = delay_;
    }

    function() external payable { }

    function setDelay(uint delay_) public {
        require(msg.sender == address(this), "Timelock::setDelay: Call must come from Timelock.");
        require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must exceed minimum delay.");
        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");
        delay = delay_;

        emit NewDelay(delay);
    }

    function acceptAdmin() public {
        require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call must come from pendingAdmin.");
        admin = msg.sender;
        pendingAdmin = address(0);

        emit NewAdmin(admin);
    }

    function setPendingAdmin(address pendingAdmin_) public {
        require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");
        pendingAdmin = pendingAdmin_;

        emit NewPendingAdmin(pendingAdmin);
    }

    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {
        require(msg.sender == admin, "Timelock::queueTransaction: Call must come from admin.");
        require(eta >= getBlockTimestamp().add(delay), "Timelock::queueTransaction: Estimated execution block must satisfy delay.");
        require(eta <= getBlockTimestamp().add(delay).add(ETA_TIME_FRAME), "Timelock::queueTransaction: Estimated execution block must satisfy the scheduling time frame.");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = true;

        emit QueueTransaction(txHash, target, value, signature, data, eta);
        return txHash;
    }

    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {
        require(msg.sender == admin, "Timelock::cancelTransaction: Call must come from admin.");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, target, value, signature, data, eta);
    }

    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {
        require(msg.sender == admin, "Timelock::executeTransaction: Call must come from admin.");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));
        require(queuedTransactions[txHash], "Timelock::executeTransaction: Transaction hasn't been queued.");
        require(getBlockTimestamp() >= eta, "Timelock::executeTransaction: Transaction hasn't surpassed time lock.");
        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), "Timelock::executeTransaction: Transaction is stale.");

        queuedTransactions[txHash] = false;

        bytes memory callData;

        if (bytes(signature).length == 0) {
            callData = data;
        } else {
            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);
        }

        // solium-disable-next-line security/no-call-value
        (bool success, bytes memory returnData) = target.call.value(value)(callData);
        require(success, "Timelock::executeTransaction: Transaction execution reverted.");

        emit ExecuteTransaction(txHash, target, value, signature, data, eta);

        return returnData;
    }

    function getBlockTimestamp() internal view returns (uint) {
        // solium-disable-next-line security/no-block-members
        return block.timestamp;
    }
}

// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/BaseImmutableJumpRateModel.sol
pragma solidity ^0.5.16;

import "../../Math/SafeMath.sol";

/**
  * @title Logic for immutable JumpRateModel.
  * @author Ola
  */
contract BaseImmutableJumpRateModel {
    using SafeMath for uint;

    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);

    /**
     * @notice The approximate number of blocks per year that is assumed by the interest rate model
     */
    uint public blocksPerYear;

    /**
     * @notice The multiplier of utilization rate that gives the slope of the interest rate
     */
    uint public multiplierPerBlock;

    /**
     * @notice The base interest rate which is the y-intercept when utilization rate is 0
     */
    uint public baseRatePerBlock;

    /**
     * @notice The multiplierPerBlock after hitting a specified utilization point
     */
    uint public jumpMultiplierPerBlock;

    /**
     * @notice The utilization point at which the jump multiplier is applied
     */
    uint public kink;

    /**
     * @notice Construct an immutable interest rate model
     * @param blocksPerYear_ The approximate number of blocks per year that is assumed by the interest rate model
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     */
    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {
        blocksPerYear = blocksPerYear_;

        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);
    }

    /**
     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market (currently unused)
     * @return The utilization rate as a mantissa between [0, 1e18]
     */
    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {
        // Utilization rate is 0 when there are no borrows
        if (borrows == 0) {
            return 0;
        }

        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));
    }

    /**
     * @notice Calculates the current borrow rate per block, with the error code expected by the market
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {
        uint util = utilizationRate(cash, borrows, reserves);

        if (util <= kink) {
            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);
        } else {
            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);
            uint excessUtil = util.sub(kink);
            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);
        }
    }

    /**
     * @notice Calculates the current supply rate per block
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @param reserveFactorMantissa The current reserve factor for the market
     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {
        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);
        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);
        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);
        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);
    }

    /**
     * @notice Internal function to update the parameters of the interest rate model
     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param kink_ The utilization point at which the jump multiplier is applied
     */
    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {
        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);
        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));
        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);
        kink = kink_;

        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);
    }
}


// File: contracts/Ola/Core/OlaPlatform/InterestRateModels/ImmutableJumpRateModel.sol
pragma solidity ^0.5.16;

import "./BaseImmutableJumpRateModel.sol";
import "./InterestRateModel.sol";


/**
  * @title Compound's JumpRateModel Contract V2 for V2 cTokens
  * @author Arr00
  * @notice Supports only for V2 cTokens
  */
contract ImmutableJumpRateModel is InterestRateModel, BaseImmutableJumpRateModel  {

	/**
     * @notice Calculates the current borrow rate per block
     * @param cash The amount of cash in the market
     * @param borrows The amount of borrows in the market
     * @param reserves The amount of reserves in the market
     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)
     */
    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {
        return getBorrowRateInternal(cash, borrows, reserves);
    }

    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_)
        BaseImmutableJumpRateModel(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_) public {}
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.04/ComptrollerV0_04.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../../ErrorReporter/ErrorReporter.sol";
import "../../PriceOracle/PriceOracle.sol";
import "../../Comptroller/ComptrollerInterface.sol";
import "../../Comptroller/ComptrollerStorage.sol";
import "../../Comptroller/Unitroller.sol";
import "../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol";
import "../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol";
import "../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol";

interface RegistryForComptrollerV0_04 {
    function deployOToken(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        address admin,
        bytes calldata becomeImplementationData) external returns (address);

    function deployPeripheralContract(bytes32 contractNameHash,
        bytes calldata params,
        address contractAdmin) external returns (address);

    function getPriceForUnderling(address cToken) external view returns (uint256);
}

interface IBouncerForComptroller {
    function isAccountApproved(address account) external view returns (bool);
}

/**
 * @title Ola's Comptroller Contract V0.02
 * @author Ola
 * -- Changes form V0.02 :
 * --- Same as V0.02
 */
contract ComptrollerV0_04 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {
    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /// @notice Emitted when an account enters a market
    event MarketEntered(CToken cToken, address account);

    /// @notice Emitted when an account exits a market
    event MarketExited(CToken cToken, address account);

    /// @notice Emitted when a collateral factor is changed by admin
    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);

    /// @notice Emitted when a liquidation factor is changed by admin
    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);

    /// @notice Emitted when liquidation incentive is changed by admin
    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'
    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the Rain Maker is changed
    event NewRainMaker(address oldRainMaker, address newRainMaker);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the bouncer is changed
    event NewBouncer(address oldBouncer, address newBouncer);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the min borrow amount is changed
    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);

    /// @notice Emitted when pause guardian is changed
    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);

    /// @notice Emitted when an action is paused globally
    event ActionPaused(string action, bool pauseState);

    /// @notice Emitted when an action is paused on a market
    event ActionPaused(CToken cToken, string action, bool pauseState);

    /// @notice Emitted when borrow cap for a cToken is changed
    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);

    /// @notice Emitted when borrow cap guardian is changed
    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);

    /// @notice Emitted when admin bank address is changed
    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);

    /// @notice Emitted when active collateral cap for a cToken is changed
    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);

    /// @notice Emitted when active collateral usage for a cToken is changed
    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Minting' flag is changed
    event LimitMintingFlagChanged(bool newValue);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Borrowing' flag is changed
    event LimitBorrowingFlagChanged(bool newValue);

    // No collateralFactorMantissa may exceed this value
    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9

    // No liquidationFactorMantissa may exceed this value
    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9

    // liquidationIncentiveMantissa of any market must be strictly greater than this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05

    // liquidationIncentiveMantissa of any market must not exceed this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3

    // Hard coded value to limit amount of asset in a single LN
    // OLA_ADDITIONS: This field
    uint internal constant maxAllowedAssets = 25;

    // Hard coded value for the liquidation close factor
    // OLA_ADDITIONS: This field
    uint internal constant fixedCloseFactorMantissa = 0.5e18;

    constructor() public {
        admin = msg.sender;
    }

    /*** Registry ***/

    function getRegistry() public view returns (address) {
        return address(registry);
    }

    /*** Assets You Are In ***/

    /**
     * @notice Returns the assets an account has entered
     * @param account The address of the account to pull assets for
     * @return A dynamic list with the assets the account has entered
     */
    function getAssetsIn(address account) external view returns (CToken[] memory) {
        CToken[] memory assetsIn = accountAssets[account];

        return assetsIn;
    }

    /**
     * @notice Returns whether the given account is entered in the given asset
     * @param account The address of the account to check
     * @param cToken The cToken to check
     * @return True if the account is in the asset, otherwise false.
     */
    function checkMembership(address account, CToken cToken) external view returns (bool) {
        return markets[address(cToken)].accountMembership[account];
    }

    /**
     * @notice Add assets to be included in account liquidity calculation
     * @param cTokens The list of addresses of the cToken markets to be enabled
     * @return Success indicator for whether each corresponding market was entered
     */
    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {
        uint len = cTokens.length;

        uint[] memory results = new uint[](len);
        for (uint i = 0; i < len; i++) {
            CToken cToken = CToken(cTokens[i]);

            // OLA_ADDITIONS : Emitting Failure events
            Error error = addToMarketInternal(cToken, msg.sender);
            if (error != Error.NO_ERROR) {
                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);
            }

            results[i] = uint(error);
        }

        return results;
    }

    /**
     * @notice Checks if the account should be allowed to activate this additional amount of collateral.
     * @param cToken The cToken to verify the active collateral cap against
     * @param market The market to verify the active collateral cap against (assumes the given market is listed)
     * @param cTokensToActivate The amount of cTokens being activated as collateral
     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {
        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;
        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;

        // 0 Means "No Cap"
        if (activeCollateralUSDCap == 0) {
            return uint(Error.NO_ERROR);
        }

        // No amount ? no problem
        if (cTokensToActivate == 0) {
            return uint(Error.NO_ERROR);
        }

        // Calculate new usage USD value
        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);

        uint exchangeRateMantissa = cToken.exchangeRateStored();

        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});

        // Get the normalized price of the asset
        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));

        if (oraclePriceMantissa == 0) {
            return uint(Error.PRICE_ERROR);
        }

        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});

        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);
        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);

        // Is it within the allowed cap ?
        if (newUsageValueInUsd <= activeCollateralUSDCap) {
            // All good here
            return uint(Error.NO_ERROR);
        } else {
            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);
        }
    }

    /**
     * @notice Increases the underlying actively used as collateral.
     */
    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Reduces the underlying actively used as collateral.
    */
    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Add the market to the borrower's "assets in" for liquidity calculations
     * @param cToken The market to enter
     * @param borrower The address of the account to modify
     * @return Success indicator for whether the market was entered
     */
    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {
        Market storage marketToJoin = markets[address(cToken)];

        if (!marketToJoin.isListed) {
            // market is not listed, cannot join
            return Error.MARKET_NOT_LISTED;
        }

        if (marketToJoin.accountMembership[borrower] == true) {
            // already joined
            return Error.NO_ERROR;
        }


        // NOTE : This function call will
        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);
        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);

        // OLA_ADDITIONS : This test
        if (collateralActivationError != uint(Error.NO_ERROR)) {
            return Error(collateralActivationError);
        }

        // Increase active collateral used
        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);

        // survived the gauntlet, add to list
        // NOTE: we store these somewhat redundantly as a significant optimization
        //  this avoids having to iterate through the list for the most common use cases
        //  that is, only when we need to perform liquidity checks
        //  and not whenever we want to check if an account is in a particular market
        marketToJoin.accountMembership[borrower] = true;
        accountAssets[borrower].push(cToken);

        emit MarketEntered(cToken, borrower);

        return Error.NO_ERROR;
    }

    /**
     * @notice Removes asset from sender's account liquidity calculation
     * @dev Sender must not have an outstanding borrow balance in the asset,
     *  or be providing necessary collateral for an outstanding borrow.
     * @param cTokenAddress The address of the asset to be removed
     * @return Whether or not the account successfully exited the market
     */
    function exitMarket(address cTokenAddress) external returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        /* Get sender tokensHeld and amountOwed underlying from the cToken */
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        /* Fail if the sender has a borrow balance */
        if (amountOwed != 0) {
            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);
        }

        /* Fail if the sender is not permitted to redeem all of their tokens */
        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);
        if (allowed != 0) {
            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);
        }

        Market storage marketToExit = markets[cTokenAddress];

        /* Return true if the sender is not already ‘in’ the market */
        if (marketToExit.accountMembership[msg.sender]) {
            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);

            // If no err, reduce
            if (err != uint(Error.NO_ERROR)) {
                return err;
            }

            // Reduce the active collateral usage - Only if removal from market
            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);
            return uint(Error.NO_ERROR);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Checks if the account is done (no supply and no borrow at all) in the given market
     * and if so, exits the market for the user.
     * @dev .
     * @param cTokenAddress The address of the asset to be removed
     * @param account The account which would exit the market (if done with it)
     * @return If done - returns the result of 'exitMarketInternal' and if not done - "No error".
     */
    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        if (tokensHeld == 0 && amountOwed == 0) {
            Market storage marketToExit = markets[cTokenAddress];

            /* Return true if the sender is not already ‘in’ the market */
            if (marketToExit.accountMembership[account]) {
                return exitMarketInternal(marketToExit, cTokenAddress, account);
            } else {
                return uint(Error.NO_ERROR);
            }
        } else {
            return uint(Error.NO_ERROR);
        }
    }

    /**
      * @notice Performs the state change that Removes asset from sender's account liquidity calculation
      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism
      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding
      * debts or active collateral) AND only for users who are actually in the market.
      * @param cTokenAddress The address of the asset to be removed
      * @param account The account which would exit the market
      * @return Whether or not the account successfully exited the market
     */
    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {
        /* Set cToken account membership to false */
        delete marketToExit.accountMembership[account];

        /* Delete cToken from the account’s list of assets */
        // load into memory for faster iteration
        CToken[] memory userAssetList = accountAssets[account];
        uint len = userAssetList.length;
        uint assetIndex = len;
        for (uint i = 0; i < len; i++) {
            if (userAssetList[i] == CToken(cTokenAddress)) {
                assetIndex = i;
                break;
            }
        }

        // We *must* have found the asset in the list or our redundant data structure is broken
        require(assetIndex < len);

        // copy last item in list to location of item to be removed, reduce length by 1
        CToken[] storage storedList = accountAssets[account];
        storedList[assetIndex] = storedList[storedList.length - 1];
        storedList.length--;

        emit MarketExited(CToken(cTokenAddress), account);

        return uint(Error.NO_ERROR);
    }

    /*** Policy Hooks ***/

    /**
     * @notice Checks if the account should be allowed to mint tokens in the given market
     * @param cToken The market to verify the mint against
     * @param minter The account which would get the minted tokens
     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens
     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!mintGuardianPaused[cToken], "paused");

        // Shh - currently unused
        minter;
        mintAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit minting
        // If borrowing is limited the account has to be approved
        if (limitMinting && !isAccountApprovedInternal(minter)) {
            return uint (Error.NOT_APPROVED_TO_MINT);
        }

        // Keep the flywheel moving
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates mint and reverts on rejection. May emit logs.
     * @param cToken Asset being minted
     * @param minter The address minting the tokens
     * @param actualMintAmount The amount of the underlying asset being minted
     * @param mintTokens The number of tokens being minted
     */
    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'mintVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToMintIn = markets[address(cToken)];
        require(marketToMintIn.isListed, "!listed");

        // We only care about active collateral caps if the minter is part of the market
        if (marketToMintIn.accountMembership[minter]) {
            // Is activating that much new collateral allowed ?
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "activation not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to redeem tokens in the given market
     * @param cToken The market to verify the redeem against
     * @param redeemer The account which would redeem the tokens
     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market
     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {
        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);
        }

        return uint(Error.NO_ERROR);
    }

    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {
        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */
        if (!markets[cToken].accountMembership[redeemer]) {
            return uint(Error.NO_ERROR);
        }

        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates redeem and reverts on rejection. May emit logs.
     * @param cToken Asset being redeemed
     * @param redeemer The address redeeming the tokens
     * @param redeemAmount The amount of the underlying asset being redeemed
     * @param redeemTokens The number of tokens being redeemed
     */
    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {
        // Require tokens is zero or amount is also zero
        if (redeemTokens == 0 && redeemAmount > 0) {
            revert("redeemTokens zero");
        }

        // OLA_ADDITIONS : All from here
        // only cTokens may call 'redeemVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToRedeemFrom = markets[address(cToken)];
        require(marketToRedeemFrom.isListed, "!listed");

        // We only care about active collateral caps if the minter is in the market
        if (marketToRedeemFrom.accountMembership[redeemer]) {
            // Some cleanups, if the user is done with this market
            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), "Exit failure");

            // The redeemer is reducing the collateral value in a market they are part of.
            // let's reduce the used active collateral.
            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market
     * @param cToken The market to verify the borrow against
     * @param borrower The account which would borrow the asset
     * @param borrowAmount The amount of underlying the account would borrow
     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!borrowGuardianPaused[cToken], "paused");


        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit borrow
        // If borrowing is limited the account has to be approved
        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {
            return uint (Error.NOT_APPROVED_TO_BORROW);
        }

        if (!markets[cToken].accountMembership[borrower])
{
            // only cTokens may call borrowAllowed if borrower not in market
            require(msg.sender == cToken, "!cToken");

            // attempt to add borrower to the market
            Error err = addToMarketInternal(CToken(msg.sender), borrower);
            if (err != Error.NO_ERROR) {
                return uint(err);
            }

            // it should be impossible to break the important invariant
            assert(markets[cToken].accountMembership[borrower]);
        }

        if (getUnderlyingPriceForCToken(cToken) == 0) {
            return uint(Error.PRICE_ERROR);
        }

        uint borrowCap = borrowCaps[cToken];
        // Borrow cap of 0 corresponds to unlimited borrowing
        if (borrowCap != 0) {
            uint totalBorrows = CToken(cToken).totalBorrows();
            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);
            require(nextTotalBorrows < borrowCap, "Borrow cap reached");
        }

        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        // OLA_ADDITIONS : Adds 'min borrow usd' requirement
        if (borrowAmountUsd < minBorrowAmountUsd) {
            return uint(Error.TOO_LITTLE_BORROW);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates borrow and reverts on rejection. May emit logs.
     * @param cToken Asset whose underlying is being borrowed
     * @param borrower The address borrowing the underlying
     * @param borrowAmount The amount of the underlying asset requested to borrow
     */
    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {
        // Shh - currently unused
        cToken;
        borrower;
        borrowAmount;

        // Uncomment if adding logic
        // Only cTokens may call 'borrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to repay a borrow in the given market
     * @param cToken The market to verify the repay against
     * @param payer The account which would repay the asset
     * @param borrower The account which would borrowed the asset
     * @param repayAmount The amount of the underlying asset the account would repay
     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function repayBorrowAllowed(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        payer;
        borrower;
        repayAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates repayBorrow and reverts on rejection. May emit logs.
     * @param cToken Asset being repaid
     * @param payer The address repaying the borrow
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function repayBorrowVerify(
        address cToken,
        address payer,
        address borrower,
        uint actualRepayAmount,
        uint borrowerIndex) external {

        // Only cTokens may call 'repayBorrowVerify'
        require(msg.sender == cToken, "!cToken");

        // Some cleanups, if the user is done with this market
        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), "Exit failure");
    }

    /**
     * @notice Checks if the liquidation should be allowed to occur
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param repayAmount The amount of underlying being repaid
     */
    function liquidateBorrowAllowed(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        liquidator;

        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* The borrower must have shortfall in order to be liquidateable */
        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation
        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall == 0) {
            return uint(Error.INSUFFICIENT_SHORTFALL);
        }

        /* The liquidator may not repay more than what is allowed by the closeFactor */
        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);
        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')
        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);
        if (repayAmount > maxClose) {
            return uint(Error.TOO_MUCH_REPAY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function liquidateBorrowVerify(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint actualRepayAmount,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenBorrowed;
        cTokenCollateral;
        liquidator;
        borrower;
        actualRepayAmount;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'liquidateBorrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the seizing of assets should be allowed to occur
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeAllowed(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint) {
        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)
        // Pausing is a very serious situation - we revert to sound the alarms
        // require(!seizeGuardianPaused, "seize is paused");

        // Shh - currently unused
        seizeTokens;

        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {
            return uint(Error.COMPTROLLER_MISMATCH);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates seize and reverts on rejection. May emit logs.
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeVerify(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenCollateral;
        cTokenBorrowed;
        liquidator;
        borrower;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'seizeVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to transfer tokens in the given market
     * @param cToken The market to verify the transfer against
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!transferGuardianPaused, "transfer paused");

        // Currently the only consideration is whether or not
        //  the src is allowed to redeem this many tokens
        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates transfer and reverts on rejection. May emit logs.
     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is
     *             imperative to make sure that any change to this function is in line with
     *             the logic requirements of 'seizeInternal'.
     * @param cToken Asset being transferred
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     */
    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'transferVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToTransferIn = markets[address(cToken)];
        require(marketToTransferIn.isListed, "!listed");

        bool srcMembership = marketToTransferIn.accountMembership[src];
        bool dstMembership = marketToTransferIn.accountMembership[dst];

        // If no side is in the market, the active collateral is not changed.
        // If both of them are in the market, the active collateral stays the same.
        if (srcMembership == dstMembership) {
            return;
        } else if (srcMembership) {
            // This is an easy one, active collateral usage only decreases
            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        } else if (dstMembership) {
            // This is a complex one. The dst might not be able to receive the transferred cTokens if
            // it will exceed the allowed active collateral cap.
            // So, let's check whether activating that much new collateral is allowed.
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "Collateral activation is not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        }
    }

    /*** Liquidity/Liquidation Calculations ***/

    /**
     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.
     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,
     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.
     */
    struct AccountLiquidityLocalVars {
        uint sumCollateral;
        uint sumBorrowPlusEffects;
        uint cTokenBalance;
        uint borrowBalance;
        uint exchangeRateMantissa;
        uint oraclePriceMantissa;
        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'
        Exp collateralOrLiquidationFactor;
        Exp exchangeRate;
        Exp oraclePrice;
        Exp tokensToDenom;

        // OLA_ADDITIONS : Added 'borrowAmountUsd' for "min borrow usd check"
        uint borrowAmountUsd;
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA ADDITIONS : This function
     * @notice Determine the current account liquidity wrt liquidation requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of liquidation requirements,
     *          account shortfall below liquidation requirements)
     */
    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code,
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {
        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);
        return (err, liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements)
     */
    function getHypotheticalAccountLiquidity(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of liquidation requirements,
     *          hypothetical account shortfall below liquidation requirements)
     */
    function getHypotheticalAccountLiquidityByLiquidationFactor(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @param useCollateralFactor True - use the "default" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'
     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,
     *  without calculating accumulated interest.
     * @return (possible error code,
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements,
     *          USD value of the given borrowAmount)
     */
    function getHypotheticalAccountLiquidityInternal(
        address account,
        CToken cTokenModify,
        uint redeemTokens,
        uint borrowAmount,
        // OLA_ADDITIONS : added 'useCollateralFactor'
        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {

        AccountLiquidityLocalVars memory vars; // Holds all our calculation results
        uint oErr;

        // For each asset the account is in
        CToken[] memory assets = accountAssets[account];
        for (uint i = 0; i < assets.length; i++) {
            CToken asset = assets[i];

            // Read the balances and exchange rate from the cToken
            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);
            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades
                return (Error.SNAPSHOT_ERROR, 0, 0, 0);
            }

            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa
            if (useCollateralFactor) {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});
            } else {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});
            }

            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});

            // Get the normalized price of the asset
            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));

            if (vars.oraclePriceMantissa == 0) {
                return (Error.PRICE_ERROR, 0, 0, 0);
            }
            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});

            // Pre-compute a conversion factor from tokens -> ether (normalized price value)
            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);
            // sumCollateral += tokensToDenom * cTokenBalance
            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);

            // sumBorrowPlusEffects += oraclePrice * borrowBalance
            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);

            // Calculate effects of interacting with cTokenModify
            if (asset == cTokenModify) {
                // redeem effect
                // sumBorrowPlusEffects += tokensToDenom * redeemTokens
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);

                // borrow effect
                // sumBorrowPlusEffects += oraclePrice * borrowAmount
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);

                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'
                // This will only have a non-zero value when the calculation is made for a 'borrow' action.
                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);
            }
        }

        // These are safe, as the underflow condition is checked first
        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {
            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);
        } else {
            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);
        }
    }

    /**
     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount
     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)
     * @param cTokenBorrowed The address of the borrowed cToken
     * @param cTokenCollateral The address of the collateral cToken
     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens
     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)
     */
    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {
        /* Read oracle prices for borrowed and collateral markets */
        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);
        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);
        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {
            return (uint(Error.PRICE_ERROR), 0);
        }

        /*
         * Get the exchange rate and calculate the number of collateral tokens to seize:
         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral
         *  seizeTokens = seizeAmount / exchangeRate
         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)
         */
        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error
        uint seizeTokens;
        Exp memory numerator;
        Exp memory denominator;
        Exp memory ratio;

        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.
        // notice: will be 0 for unsupported 'cTokenCollateral'
        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));
        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));
        ratio = div_(numerator, denominator);

        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);

        return (uint(Error.NO_ERROR), seizeTokens);
    }

    /*** Admin Functions ***/

    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);
        }

        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)
        if (hasRainMaker()) {
            IComptrollerPeripheral(rainMaker).retire(retireParams);
        }

        // Track the old rain maker for the Comptroller
        address oldRainMaker = rainMaker;

        address newRainMaker = address(0);

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new RainMaker for us
            newRainMaker = RegistryForComptrollerV0_04(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a rainMaker was deployed
            require(RainMakerInterface(newRainMaker).isRainMaker());

            // Call initialization hook
            IComptrollerPeripheral(newRainMaker).connect(connectParams);
        }

        // Set Comptroller's RainMaker to newRainMaker
        rainMaker = newRainMaker;

        // Emit NewRainMaker(oldRainMaker, newRainMaker)
        emit NewRainMaker(oldRainMaker, newRainMaker);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)
     * @dev deployParams Dynamic parameters to be used for the contract deployment.
     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.
     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);
        }

        // Track the bouncer for the Comptroller
        address oldBouncer = bouncer;
        address newBouncer = address(0);

        // Before saying goodbye, run all retirement logic
        if (hasBouncer()) {
            IComptrollerPeripheral(bouncer).retire(retireParams);
        }

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new Bouncer for us
            newBouncer = RegistryForComptrollerV0_04(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a bouncer was deployed
            require(IBouncer(newBouncer).isBouncer());

            // Call initialization hook
            IComptrollerPeripheral(newBouncer).connect(connectParams);
        }

        // Set Comptroller's bouncer to newBouncer
        bouncer = newBouncer;

        emit NewBouncer(oldBouncer, bouncer);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit supplying' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitSupplying'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitMinting(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);
        }

        if (limitMinting != flagValue) {
            limitMinting = flagValue;
            emit LimitMintingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitBorrowing'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitBorrowing(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);
        }

        if (limitBorrowing != flagValue) {
            limitBorrowing = flagValue;
            emit LimitBorrowingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)
     * @dev Admin function to set value for 'minBorrowAmountUsd'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);
        }

        uint oldMinBorrowAmount = minBorrowAmountUsd;
        minBorrowAmountUsd = minBorrowAmountUsd_;

        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the collateralFactor for a market
      * @dev Admin function to set per-market collateralFactor
      * @param cToken The market to set the factor on
      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);
        }

        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});

        // Check collateral factor <= 0.9
        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});
        if (lessThanExp(highLimit, newCollateralFactorExp)) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);
        }

        // Ensure liquidationFactor is greater or equal to the new collateralFactor
        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);
        }

        // If collateral factor != 0, fail if price == 0
        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);
        }

        // Set market's collateral factor to new collateral factor, remember old value
        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;
        market.collateralFactorMantissa = newCollateralFactorMantissa;

        // Emit event with asset, old collateral factor, and new collateral factor
        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the liquidationFactor for a market.
      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -
      *                     This value can only be increased.
      * @dev Admin function to set per-market liquidationFactor
      * @param cToken The market to set the factor on
      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);
        }

        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});

        // Check liquidation factor <= 0.9
        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});
        if (lessThanExp(highLimit, newLiquidationFactorExp)) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);
        }

        // Ensure new liquidationFactor is greater or equal to the collateralFactor
        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;
        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);
        }

        // Ensure new liquidation factor is strictly greater than the existing one
        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);
        }

        // If liquidation factor != 0, fail if price == 0
        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);
        }

        // Set market's liquidation factor to new liquidation factor, remember old value
        market.liquidationFactorMantissa = newLiquidationFactorMantissa;

        // Emit event with asset, old liquidation factor, and new liquidation factor
        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'
      * @notice Sets liquidationIncentive
      * @dev Admin function to set liquidationIncentive
      * @param cToken The market to set the factor on
      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);
        }

        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'
        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});

        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]
        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});
        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});
        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {
            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);
        }

        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)
        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);
        }

        // Save current value for use in log
        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;

        // Set liquidation incentive to new incentive
        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;

        // Emit event with old incentive, new incentive
        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Add the market to the markets mapping and set it as listed
     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market
     * @param underlying The address of the asset (token or native) to be used for the market
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _supportNewMarket(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        bytes calldata becomeImplementationData) external returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);
        }

        // We allow one instance of the same underlying-contractName combination
        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);
        }

        // IMPORTANT : No graceful failure after contract deployment !
        address deployedCToken = RegistryForComptrollerV0_04(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);

        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken

        // OLA_ADDITIONS : Changed to require
        // Legacy safety
        require(!markets[deployedCToken].isListed, "SUPPORT_MARKET_EXISTS");

        // Save asset - contract combination
        existingMarketTypes[underlying][contractNameHash] = deployedCToken;

        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'
        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,
        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,
        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0
        });

        _addMarketInternal(deployedCToken);

        emit MarketListed(CToken(deployedCToken));

        return uint(Error.NO_ERROR);
    }

    function _addMarketInternal(address cToken) internal {
        // OLA_ADDITIONS : Added this 'max assets' limitation
        require(allMarkets.length <= maxAllowedAssets, "Too many assets");

        for (uint i = 0; i < allMarkets.length; i ++) {
            require(allMarkets[i] != CToken(cToken), "Already added");
        }
        allMarkets.push(CToken(cToken));

        // OLA_ADDITIONS : Initializing the market at the RainMaker as well
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker)._supportMarket(cToken);
        }
    }

    /**
      * OLA_ADDITIONS : This function
      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.
      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.
      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for
      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {
        require(msg.sender == admin, "!Admin");

        uint numMarkets = cTokens.length;
        uint numActiveCollateralCaps = newActiveCollateralCaps.length;

        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            Market storage marketToJoin = markets[address(cTokens[i])];

            require(marketToJoin.isListed,"!listed");

            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];

            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the admin bank address
     * @param newAdminBankAddress The new admin bank address
     */
    function _setAdminBankAddress(address payable newAdminBankAddress) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldAdminBankAddress = adminBankAddress;

        // Store adminBankAddress with value newAdminBankAddress
        adminBankAddress = newAdminBankAddress;

        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)
        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);
    }

    /**
      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.
      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.
      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for
      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {
    	require(msg.sender == admin || msg.sender == borrowCapGuardian, "!admin||borrow cap guardian");

        uint numMarkets = cTokens.length;
        uint numBorrowCaps = newBorrowCaps.length;

        require(numMarkets != 0 && numMarkets == numBorrowCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];
            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the Borrow Cap Guardian
     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian
     */
    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldBorrowCapGuardian = borrowCapGuardian;

        // Store borrowCapGuardian with value newBorrowCapGuardian
        borrowCapGuardian = newBorrowCapGuardian;

        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)
        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);
    }

    /**
     * @notice Admin function to change the Pause Guardian
     * @param newPauseGuardian The address of the new Pause Guardian
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);
        }

        // Save current value for inclusion in log
        address oldPauseGuardian = pauseGuardian;

        // Store pauseGuardian with value newPauseGuardian
        pauseGuardian = newPauseGuardian;

        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)
        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);

        return uint(Error.NO_ERROR);
    }

    function _setMintPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        mintGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Mint", state);
        return state;
    }

    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        borrowGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Borrow", state);
        return state;
    }

    function _setTransferPaused(bool state) public returns (bool) {
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        transferGuardianPaused = state;
        emit ActionPaused("Transfer", state);
        return state;
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Ensures all markets are updating their implementation from the Registry
     */
    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {
        require(isAdmin(), "!admin");

        // Update all markets
        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken oToken = allMarkets[i];
            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), "Update failed");
        }
    }

    /**
     * @notice Return all of the markets
     * @dev The automatic getter may be used to access an individual market.
     * @return The list of market addresses
     */
    function getAllMarkets() public view returns (CToken[] memory) {
        return allMarkets;
    }


    /**
     * Fetches the underlying price from the ministry.
     * 0 means an error.
     */
    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {
        return RegistryForComptrollerV0_04(registry).getPriceForUnderling(cToken);
    }

    function hasRainMaker() view public returns (bool) {
        return address(rainMaker) != address(0);
    }

    function hasBouncer() view public returns (bool) {
        return address(bouncer) != address(0);
    }

    function isAccountApproved(address account) view external returns (bool) {
        return isAccountApprovedInternal(account);
    }

    /**
     * @notice This function assumes that any account not actively approved is denied
     *         and so, if no bouncer is set, the response is always false.
     */
    function isAccountApprovedInternal(address account) view internal returns (bool) {
        if (hasBouncer()) {
            return IBouncerForComptroller(bouncer).isAccountApproved(account);
        } else {
            return false;
        }
    }
}


// File: contracts/Ola/Core/LendingNetwork/Comptroller/ComptrollerStorage.sol
pragma solidity ^0.5.16;

import "../OTokens/CToken.sol";
import "../PriceOracle/PriceOracle.sol";

contract UnitrollerAdminStorage {
    /**
    * @notice Administrator for this contract
    */
    address public admin;

    /**
    * @notice Pending administrator for this contract
    */
    address public pendingAdmin;

    /**
    * @notice Registry address
    */
    address public registry;

    address public implementation;

    // OLA_ADDITIONS : This contract name hash
    bytes32 constant public unitrollerContractHash = keccak256("Unitroller");
}

contract ComptrollerV1Storage is UnitrollerAdminStorage {
    /**
     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow
     */
    uint public closeFactorMantissa;

    /**
     * @notice Max number of assets a single account can participate in (borrow or use as collateral)
     */
    uint public maxAssets;

    /**
     * @notice Per-account mapping of "assets you are in", capped by maxAssets
     */
    mapping(address => CToken[]) public accountAssets;

}

contract ComptrollerV2Storage is ComptrollerV1Storage {
    struct Market {
        /// @notice Whether or not this market is listed
        bool isListed;

        /**
         * @notice Multiplier representing the most one can borrow against their collateral in this market.
         *  For instance, 0.9 to allow borrowing 90% of collateral value.
         *  Must be between 0 and 1, and stored as a mantissa.
         */
        uint collateralFactorMantissa;

        /**
         * OLA_ADDITIONS : Added the field liquidationFactorMantissa.
         * @notice Multiplier representing the borrow to collateral ratio from which liquidations can occur in this market.
         *  For instance, 0.9 indicates that liquidations can occur when the borrowed value reaches 90% (or more) of collateral value.
         *  Must be between 0 and 1, and stored as a mantissa.
         *  Must be greater or equal to 'collateralFactorMantissa'.
         */
        uint liquidationFactorMantissa;

        /**
         * @notice Multiplier representing the discount on collateral that a liquidator receives
         * OLA_ADDITIONS : Now supports incentives per market (Added this)
         */
        uint liquidationIncentiveMantissa;

        /// @notice Per-market mapping of "accounts in this asset"
        mapping(address => bool) accountMembership;

        // OLA_ADDITIONS : Fields after this line

        // @notice Active collateral caps enforced by  for each cToken address. Defaults to zero which corresponds to unlimited active collateral.
        uint activeCollateralUSDCap;

        // @notice Amount of cTokens actively used as collateral.
        uint activeCollateralCTokenUsage;
    }

    /**
     * @notice Official mapping of cTokens -> Market metadata
     * @dev Used e.g. to determine if a market is supported
     */
    mapping(address => Market) public markets;


    /**
     * @notice The Pause Guardian can pause certain actions as a safety mechanism.
     *  Actions which allow users to remove their own assets cannot be paused.
     *  Liquidation / seizing / transfer can only be paused globally, not by market.
     */
    address public pauseGuardian;
    bool public _mintGuardianPaused;
    bool public _borrowGuardianPaused;
    bool public transferGuardianPaused;

    bool public seizeGuardianPaused;
    mapping(address => bool) public mintGuardianPaused;
    mapping(address => bool) public borrowGuardianPaused;
}

contract ComptrollerV3Storage is ComptrollerV2Storage {
    /// @notice A list of all markets
    CToken[] public allMarkets;
}

contract ComptrollerV4Storage is ComptrollerV3Storage {
    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.
    address public borrowCapGuardian;

    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.
    mapping(address => uint) public borrowCaps;
}

contract ComptrollerV5Storage is ComptrollerV4Storage {

}

contract ComptrollerStorageOlaV0_01 is ComptrollerV5Storage {
    /// @notice Borrow requests for less than this USD amount will not be approved.
    uint public minBorrowAmountUsd;

    // @notice an address to turn to in order to distribute tokens for participation
    address public rainMaker;
}

contract ComptrollerStorageOlaV0_02 is ComptrollerStorageOlaV0_01 {
    // The address to send the 'Admin Part' when reducing reserves.
    address payable public adminBankAddress;

    // Underlying asset -> contractNameHash -> deployed oTokens
    mapping(address => mapping(bytes32 => address)) public existingMarketTypes;

    // @notice An address to turn to in order to check if an account is approved for specific actions.
    address public bouncer;

    // If on, supplying will be limited only to approved accounts
    bool public limitMinting;
    // If on, borrowing will be limited only to approved accounts
    bool public limitBorrowing;
}

/// @notice Time period (in seconds) in which liquidation is to be limited (e.g: 60 for one minute)
//    uint public freshLiquidationLimitedPeriod;

/// @notice The liquidators that are allowed to liquidate while still in the 'freshLiquidationLimitedPeriod'
//    mapping(address => bool) whitelistedLiquidators;


// File: contracts/Ola/Core/LendingNetwork/Comptroller/Unitroller.sol
pragma solidity ^0.5.16;

import "../ErrorReporter/ErrorReporter.sol";
import "./ComptrollerStorage.sol";

interface RegistryForUnitroller {
    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external returns (address);
    function getLnVersion(address lnUnitroller) external returns (uint256);
    function updateLnVersion(uint256 newVersion) external returns (bool);
}

/**
 * @title ComptrollerCore
 * @dev Storage for the Comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.
 * CTokens should reference this contract as their Comptroller.
 */
contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {
    /**
     * @notice Emitted when pendingComptrollerImplementation is accepted, which means Comptroller implementation is updated
     */
    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);

    /**
     * @notice Emitted when implementation is not changed under a system version update
     */
    event ImplementationDidNotChange(address indexed implementation);

    /**
      * @notice Emitted when pendingAdmin is changed
      */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
      * @notice Emitted when pendingAdmin is accepted, which means admin is updated
      */
    event NewAdmin(address oldAdmin, address newAdmin);

    constructor(address registry_) public {
        // Set admin to caller
        admin = msg.sender;

        // Set once and do not change
        registry = registry_;
    }

    /**
     * OLA_ADDITIONS : This function.
     * Should be registered before calling this function.
     */
    function initialize() external {
        require(msg.sender == admin, "Not Admin");
        require(implementation == address(0), "Already initialized");

        address comptrollerImplementation = RegistryForUnitroller(address(registry)).getImplementationForLn(address(this), unitrollerContractHash);

        implementation = comptrollerImplementation;
    }

    /*** Admin Functions ***/

    /**
     * @notice Updates the LN to the given version. And then refreshes implementation addresses from the Registry
     * for this contract (unitroller) and for all markets (OTokenDelegators)
     * @dev Admin function to update version on LN
     * @return uint true=success, otherwise a failure (Will revert on failure)
     */
    function _upgradeLnSystemVersion(uint256 newSystemVersion, bytes calldata becomeImplementationData) external returns (uint) {
        // Check caller = admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_LN_VERSION_ADMIN_OWNER_CHECK);
        }

        // Update Version
        bool updateSuccessful = RegistryForUnitroller(registry).updateLnVersion(newSystemVersion);
        require(updateSuccessful, "Version update failed");

        // First, update the implementation used by the unitroller
        address comptrollerImplementation = RegistryForUnitroller(registry).getImplementationForLn(address(this), unitrollerContractHash);

        if (comptrollerImplementation != implementation) {
            address oldImplementation = implementation;
            implementation = comptrollerImplementation;
            emit NewImplementation(oldImplementation, implementation);
        } else {
            emit ImplementationDidNotChange(implementation);
        }

        // Update all of the implementation addresses
        delegateToImplementation(abi.encodeWithSignature("updateDelegatedImplementations(bytes)", becomeImplementationData));

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {
        // Check caller = admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);
        }

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() public returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        if (msg.sender != pendingAdmin || pendingAdmin == address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);
        }

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Delegates execution to the implementation contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     * @param data The raw data to delegatecall
     * @return The returned bytes from the delegatecall
     */
    function delegateToImplementation(bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returnData) = implementation.delegatecall(data);
        assembly {
            if eq(success, 0) {
                revert(add(returnData, 0x20), returndatasize)
            }
        }
        return returnData;
    }

    /**
     * @dev Delegates execution to an implementation contract.
     * It returns to the external caller whatever the implementation returns
     * or forwards reverts.
     */
    function () payable external {
        // delegate all other functions to current implementation
        (bool success, ) = implementation.delegatecall(msg.data);

        assembly {
              let free_mem_ptr := mload(0x40)
              returndatacopy(free_mem_ptr, 0, returndatasize)

              switch success
              case 0 { revert(free_mem_ptr, returndatasize) }
              default { return(free_mem_ptr, returndatasize) }
        }
    }
}


// File: contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol
pragma solidity ^0.5.16;

contract IBouncer {
    bool public isBouncer = true;
    bytes32 public contractNameHash;

    function isAccountApproved(address account) external view returns (bool);
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/WhiteListBouncer.sol
pragma solidity ^0.5.16;

import "./IBouncer.sol";
import "../IComptrollerPeripheral.sol";

contract WhiteListBouncer is IBouncer, IComptrollerPeripheral {
    bytes32 constant public WhiteListBouncerContractHash = keccak256("WhiteListBouncer");
    address public admin;
    address public comptroller;

    mapping(address => bool) public whitelist;

    event WhitelistedAddressAdded(address addr);
    event WhitelistedAddressRemoved(address addr);

    constructor(address _comptroller, address _admin) public {
        comptroller = _comptroller;

        admin = _admin;

        contractNameHash = WhiteListBouncerContractHash;
    }

    /**
     * @notice Periphery hook. Does nothing at the moment.
     */
    function connect(bytes calldata params) external {

    }

    /**
     * @notice Periphery hook. Does nothing at the moment.
     */
    function retire(bytes calldata params) external {

    }

    function isAccountApproved(address account) external view returns (bool) {
        return whitelist[account];
    }

    // @notice Adds the given account to the whitelist
    // @param account The account to add
    function approveAccount(address account) external {
        require(isAdmin(), "only admin can approve account");
        approveAccountInternal(account);
    }

    // @notice Adds the given account to the whitelist
    // @param accounts The accounts to add
    function approveAccounts(address[] calldata accounts) external {
        require(isAdmin(), "only admin can approve accounts");
        for (uint256 i =0; i < accounts.length; i++) {
            approveAccountInternal(accounts[i]);
        }
    }

    // @notice Removes the given account from the whitelist
    // @param account The account to remove
    function denyAccount(address account) external {
        require(isAdmin(), "only admin can set deny account");
        denyAccountInternal(account);
    }

    // @notice Removes the given account from the whitelist
    // @param accounts The accounts to remove
    function denyAccounts(address[] calldata accounts) external {
        require(isAdmin(), "only admin can set deny accounts");
        for (uint256 i =0; i < accounts.length; i++) {
            denyAccountInternal(accounts[i]);
        }
    }

    // @notice Adds the account to the whitelist if it is not there yet,
    // @param account The account to add
    function approveAccountInternal(address account) internal {
        if (!whitelist[account]) {
            whitelist[account] = true;
            emit WhitelistedAddressAdded(account);
        }
    }

    // @notice Removes the account to the whitelist if it is there,
    // @param account The account to remove
    function denyAccountInternal(address account) internal {
        if (whitelist[account]) {
            whitelist[account] = false;
            emit WhitelistedAddressRemoved(account);
        }
    }

    /**
         * @notice Checks caller is admin
         */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/deployers/WhiteListBouncerDeployer.sol
pragma solidity ^0.5.16;

import "../WhiteListBouncer.sol";

contract WhiteListBouncerDeployer {
    function deploy(address _comptroller, address _admin) external returns (address) {
        WhiteListBouncer whitelistBouncer = new WhiteListBouncer(_comptroller, _admin);

        return address(whitelistBouncer);
    }
}

// File: contracts/Ola/Core/LendingNetwork/versions/0.03/ComptrollerV0_03.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../../ErrorReporter/ErrorReporter.sol";
import "../../PriceOracle/PriceOracle.sol";
import "../../Comptroller/ComptrollerInterface.sol";
import "../../Comptroller/ComptrollerStorage.sol";
import "../../Comptroller/Unitroller.sol";
import "../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol";
import "../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol";
import "../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol";

interface RegistryForComptrollerV0_03 {
    function deployOToken(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        address admin,
        bytes calldata becomeImplementationData) external returns (address);

    function deployPeripheralContract(bytes32 contractNameHash,
        bytes calldata params,
        address contractAdmin) external returns (address);

    function getPriceForUnderling(address cToken) external view returns (uint256);
}

interface IBouncerForComptroller {
    function isAccountApproved(address account) external view returns (bool);
}

/**
 * @title Ola's Comptroller Contract V0.02
 * @author Ola
 * -- Changes form V0.02 :
 * --- Adds 'changeMinistry' function
 */
contract ComptrollerV0_03 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {
    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /// @notice Emitted when an account enters a market
    event MarketEntered(CToken cToken, address account);

    /// @notice Emitted when an account exits a market
    event MarketExited(CToken cToken, address account);

    /// @notice Emitted when a collateral factor is changed by admin
    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);

    /// @notice Emitted when a liquidation factor is changed by admin
    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);

    /// @notice Emitted when liquidation incentive is changed by admin
    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'
    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the Rain Maker is changed
    event NewRainMaker(address oldRainMaker, address newRainMaker);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the bouncer is changed
    event NewBouncer(address oldBouncer, address newBouncer);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the min borrow amount is changed
    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);

    /// @notice Emitted when pause guardian is changed
    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);

    /// @notice Emitted when an action is paused globally
    event ActionPaused(string action, bool pauseState);

    /// @notice Emitted when an action is paused on a market
    event ActionPaused(CToken cToken, string action, bool pauseState);

    /// @notice Emitted when borrow cap for a cToken is changed
    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);

    /// @notice Emitted when borrow cap guardian is changed
    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);

    /// @notice Emitted when admin bank address is changed
    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);

    /// @notice Emitted when active collateral cap for a cToken is changed
    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);

    /// @notice Emitted when active collateral usage for a cToken is changed
    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Minting' flag is changed
    event LimitMintingFlagChanged(bool newValue);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Borrowing' flag is changed
    event LimitBorrowingFlagChanged(bool newValue);

    // No collateralFactorMantissa may exceed this value
    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9

    // No liquidationFactorMantissa may exceed this value
    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9

    // liquidationIncentiveMantissa of any market must be strictly greater than this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05

    // liquidationIncentiveMantissa of any market must not exceed this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3

    // Hard coded value to limit amount of asset in a single LN
    // OLA_ADDITIONS: This field
    uint internal constant maxAllowedAssets = 25;

    // Hard coded value for the liquidation close factor
    // OLA_ADDITIONS: This field
    uint internal constant fixedCloseFactorMantissa = 0.5e18;

    constructor() public {
        admin = msg.sender;
    }

    /*** Registry ***/

    function getRegistry() public view returns (address) {
        return address(registry);
    }

    /*** Assets You Are In ***/

    /**
     * @notice Returns the assets an account has entered
     * @param account The address of the account to pull assets for
     * @return A dynamic list with the assets the account has entered
     */
    function getAssetsIn(address account) external view returns (CToken[] memory) {
        CToken[] memory assetsIn = accountAssets[account];

        return assetsIn;
    }

    /**
     * @notice Returns whether the given account is entered in the given asset
     * @param account The address of the account to check
     * @param cToken The cToken to check
     * @return True if the account is in the asset, otherwise false.
     */
    function checkMembership(address account, CToken cToken) external view returns (bool) {
        return markets[address(cToken)].accountMembership[account];
    }

    /**
     * @notice Add assets to be included in account liquidity calculation
     * @param cTokens The list of addresses of the cToken markets to be enabled
     * @return Success indicator for whether each corresponding market was entered
     */
    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {
        uint len = cTokens.length;

        uint[] memory results = new uint[](len);
        for (uint i = 0; i < len; i++) {
            CToken cToken = CToken(cTokens[i]);

            // OLA_ADDITIONS : Emitting Failure events
            Error error = addToMarketInternal(cToken, msg.sender);
            if (error != Error.NO_ERROR) {
                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);
            }

            results[i] = uint(error);
        }

        return results;
    }

    /**
     * @notice Checks if the account should be allowed to activate this additional amount of collateral.
     * @param cToken The cToken to verify the active collateral cap against
     * @param market The market to verify the active collateral cap against (assumes the given market is listed)
     * @param cTokensToActivate The amount of cTokens being activated as collateral
     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {
        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;
        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;

        // 0 Means "No Cap"
        if (activeCollateralUSDCap == 0) {
            return uint(Error.NO_ERROR);
        }

        // No amount ? no problem
        if (cTokensToActivate == 0) {
            return uint(Error.NO_ERROR);
        }

        // Calculate new usage USD value
        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);

        uint exchangeRateMantissa = cToken.exchangeRateStored();

        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});

        // Get the normalized price of the asset
        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));

        if (oraclePriceMantissa == 0) {
            return uint(Error.PRICE_ERROR);
        }

        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});

        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);
        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);

        // Is it within the allowed cap ?
        if (newUsageValueInUsd <= activeCollateralUSDCap) {
            // All good here
            return uint(Error.NO_ERROR);
        } else {
            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);
        }
    }

    /**
     * @notice Increases the underlying actively used as collateral.
     */
    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Reduces the underlying actively used as collateral.
    */
    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Add the market to the borrower's "assets in" for liquidity calculations
     * @param cToken The market to enter
     * @param borrower The address of the account to modify
     * @return Success indicator for whether the market was entered
     */
    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {
        Market storage marketToJoin = markets[address(cToken)];

        if (!marketToJoin.isListed) {
            // market is not listed, cannot join
            return Error.MARKET_NOT_LISTED;
        }

        if (marketToJoin.accountMembership[borrower] == true) {
            // already joined
            return Error.NO_ERROR;
        }


        // NOTE : This function call will
        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);
        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);

        // OLA_ADDITIONS : This test
        if (collateralActivationError != uint(Error.NO_ERROR)) {
            return Error(collateralActivationError);
        }

        // Increase active collateral used
        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);

        // survived the gauntlet, add to list
        // NOTE: we store these somewhat redundantly as a significant optimization
        //  this avoids having to iterate through the list for the most common use cases
        //  that is, only when we need to perform liquidity checks
        //  and not whenever we want to check if an account is in a particular market
        marketToJoin.accountMembership[borrower] = true;
        accountAssets[borrower].push(cToken);

        emit MarketEntered(cToken, borrower);

        return Error.NO_ERROR;
    }

    /**
     * @notice Removes asset from sender's account liquidity calculation
     * @dev Sender must not have an outstanding borrow balance in the asset,
     *  or be providing necessary collateral for an outstanding borrow.
     * @param cTokenAddress The address of the asset to be removed
     * @return Whether or not the account successfully exited the market
     */
    function exitMarket(address cTokenAddress) external returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        /* Get sender tokensHeld and amountOwed underlying from the cToken */
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        /* Fail if the sender has a borrow balance */
        if (amountOwed != 0) {
            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);
        }

        /* Fail if the sender is not permitted to redeem all of their tokens */
        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);
        if (allowed != 0) {
            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);
        }

        Market storage marketToExit = markets[cTokenAddress];

        /* Return true if the sender is not already ‘in’ the market */
        if (marketToExit.accountMembership[msg.sender]) {
            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);

            // If no err, reduce
            if (err != uint(Error.NO_ERROR)) {
                return err;
            }

            // Reduce the active collateral usage - Only if removal from market
            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);
            return uint(Error.NO_ERROR);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Checks if the account is done (no supply and no borrow at all) in the given market
     * and if so, exits the market for the user.
     * @dev .
     * @param cTokenAddress The address of the asset to be removed
     * @param account The account which would exit the market (if done with it)
     * @return If done - returns the result of 'exitMarketInternal' and if not done - "No error".
     */
    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        if (tokensHeld == 0 && amountOwed == 0) {
            Market storage marketToExit = markets[cTokenAddress];

            /* Return true if the sender is not already ‘in’ the market */
            if (marketToExit.accountMembership[account]) {
                return exitMarketInternal(marketToExit, cTokenAddress, account);
            } else {
                return uint(Error.NO_ERROR);
            }
        } else {
            return uint(Error.NO_ERROR);
        }
    }

    /**
      * @notice Performs the state change that Removes asset from sender's account liquidity calculation
      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism
      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding
      * debts or active collateral) AND only for users who are actually in the market.
      * @param cTokenAddress The address of the asset to be removed
      * @param account The account which would exit the market
      * @return Whether or not the account successfully exited the market
     */
    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {
        /* Set cToken account membership to false */
        delete marketToExit.accountMembership[account];

        /* Delete cToken from the account’s list of assets */
        // load into memory for faster iteration
        CToken[] memory userAssetList = accountAssets[account];
        uint len = userAssetList.length;
        uint assetIndex = len;
        for (uint i = 0; i < len; i++) {
            if (userAssetList[i] == CToken(cTokenAddress)) {
                assetIndex = i;
                break;
            }
        }

        // We *must* have found the asset in the list or our redundant data structure is broken
        require(assetIndex < len);

        // copy last item in list to location of item to be removed, reduce length by 1
        CToken[] storage storedList = accountAssets[account];
        storedList[assetIndex] = storedList[storedList.length - 1];
        storedList.length--;

        emit MarketExited(CToken(cTokenAddress), account);

        return uint(Error.NO_ERROR);
    }

    /*** Policy Hooks ***/

    /**
     * @notice Checks if the account should be allowed to mint tokens in the given market
     * @param cToken The market to verify the mint against
     * @param minter The account which would get the minted tokens
     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens
     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!mintGuardianPaused[cToken], "paused");

        // Shh - currently unused
        minter;
        mintAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit minting
        // If borrowing is limited the account has to be approved
        if (limitMinting && !isAccountApprovedInternal(minter)) {
            return uint (Error.NOT_APPROVED_TO_MINT);
        }

        // Keep the flywheel moving
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates mint and reverts on rejection. May emit logs.
     * @param cToken Asset being minted
     * @param minter The address minting the tokens
     * @param actualMintAmount The amount of the underlying asset being minted
     * @param mintTokens The number of tokens being minted
     */
    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'mintVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToMintIn = markets[address(cToken)];
        require(marketToMintIn.isListed, "!listed");

        // We only care about active collateral caps if the minter is part of the market
        if (marketToMintIn.accountMembership[minter]) {
            // Is activating that much new collateral allowed ?
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "activation not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to redeem tokens in the given market
     * @param cToken The market to verify the redeem against
     * @param redeemer The account which would redeem the tokens
     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market
     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {
        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);
        }

        return uint(Error.NO_ERROR);
    }

    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {
        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */
        if (!markets[cToken].accountMembership[redeemer]) {
            return uint(Error.NO_ERROR);
        }

        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates redeem and reverts on rejection. May emit logs.
     * @param cToken Asset being redeemed
     * @param redeemer The address redeeming the tokens
     * @param redeemAmount The amount of the underlying asset being redeemed
     * @param redeemTokens The number of tokens being redeemed
     */
    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {
        // Require tokens is zero or amount is also zero
        if (redeemTokens == 0 && redeemAmount > 0) {
            revert("redeemTokens zero");
        }

        // OLA_ADDITIONS : All from here
        // only cTokens may call 'redeemVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToRedeemFrom = markets[address(cToken)];
        require(marketToRedeemFrom.isListed, "!listed");

        // We only care about active collateral caps if the minter is in the market
        if (marketToRedeemFrom.accountMembership[redeemer]) {
            // Some cleanups, if the user is done with this market
            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), "Exit failure");

            // The redeemer is reducing the collateral value in a market they are part of.
            // let's reduce the used active collateral.
            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market
     * @param cToken The market to verify the borrow against
     * @param borrower The account which would borrow the asset
     * @param borrowAmount The amount of underlying the account would borrow
     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!borrowGuardianPaused[cToken], "paused");


        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit borrow
        // If borrowing is limited the account has to be approved
        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {
            return uint (Error.NOT_APPROVED_TO_BORROW);
        }

        if (!markets[cToken].accountMembership[borrower])
{
            // only cTokens may call borrowAllowed if borrower not in market
            require(msg.sender == cToken, "!cToken");

            // attempt to add borrower to the market
            Error err = addToMarketInternal(CToken(msg.sender), borrower);
            if (err != Error.NO_ERROR) {
                return uint(err);
            }

            // it should be impossible to break the important invariant
            assert(markets[cToken].accountMembership[borrower]);
        }

        if (getUnderlyingPriceForCToken(cToken) == 0) {
            return uint(Error.PRICE_ERROR);
        }

        uint borrowCap = borrowCaps[cToken];
        // Borrow cap of 0 corresponds to unlimited borrowing
        if (borrowCap != 0) {
            uint totalBorrows = CToken(cToken).totalBorrows();
            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);
            require(nextTotalBorrows < borrowCap, "Borrow cap reached");
        }

        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        // OLA_ADDITIONS : Adds 'min borrow usd' requirement
        if (borrowAmountUsd < minBorrowAmountUsd) {
            return uint(Error.TOO_LITTLE_BORROW);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates borrow and reverts on rejection. May emit logs.
     * @param cToken Asset whose underlying is being borrowed
     * @param borrower The address borrowing the underlying
     * @param borrowAmount The amount of the underlying asset requested to borrow
     */
    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {
        // Shh - currently unused
        cToken;
        borrower;
        borrowAmount;

        // Uncomment if adding logic
        // Only cTokens may call 'borrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to repay a borrow in the given market
     * @param cToken The market to verify the repay against
     * @param payer The account which would repay the asset
     * @param borrower The account which would borrowed the asset
     * @param repayAmount The amount of the underlying asset the account would repay
     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function repayBorrowAllowed(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        payer;
        borrower;
        repayAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates repayBorrow and reverts on rejection. May emit logs.
     * @param cToken Asset being repaid
     * @param payer The address repaying the borrow
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function repayBorrowVerify(
        address cToken,
        address payer,
        address borrower,
        uint actualRepayAmount,
        uint borrowerIndex) external {

        // Only cTokens may call 'repayBorrowVerify'
        require(msg.sender == cToken, "!cToken");

        // Some cleanups, if the user is done with this market
        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), "Exit failure");
    }

    /**
     * @notice Checks if the liquidation should be allowed to occur
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param repayAmount The amount of underlying being repaid
     */
    function liquidateBorrowAllowed(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        liquidator;

        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* The borrower must have shortfall in order to be liquidateable */
        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation
        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall == 0) {
            return uint(Error.INSUFFICIENT_SHORTFALL);
        }

        /* The liquidator may not repay more than what is allowed by the closeFactor */
        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);
        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')
        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);
        if (repayAmount > maxClose) {
            return uint(Error.TOO_MUCH_REPAY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function liquidateBorrowVerify(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint actualRepayAmount,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenBorrowed;
        cTokenCollateral;
        liquidator;
        borrower;
        actualRepayAmount;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'liquidateBorrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the seizing of assets should be allowed to occur
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeAllowed(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint) {
        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)
        // Pausing is a very serious situation - we revert to sound the alarms
        // require(!seizeGuardianPaused, "seize is paused");

        // Shh - currently unused
        seizeTokens;

        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {
            return uint(Error.COMPTROLLER_MISMATCH);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates seize and reverts on rejection. May emit logs.
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeVerify(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenCollateral;
        cTokenBorrowed;
        liquidator;
        borrower;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'seizeVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to transfer tokens in the given market
     * @param cToken The market to verify the transfer against
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!transferGuardianPaused, "transfer paused");

        // Currently the only consideration is whether or not
        //  the src is allowed to redeem this many tokens
        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates transfer and reverts on rejection. May emit logs.
     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is
     *             imperative to make sure that any change to this function is in line with
     *             the logic requirements of 'seizeInternal'.
     * @param cToken Asset being transferred
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     */
    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'transferVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToTransferIn = markets[address(cToken)];
        require(marketToTransferIn.isListed, "!listed");

        bool srcMembership = marketToTransferIn.accountMembership[src];
        bool dstMembership = marketToTransferIn.accountMembership[dst];

        // If no side is in the market, the active collateral is not changed.
        // If both of them are in the market, the active collateral stays the same.
        if (srcMembership == dstMembership) {
            return;
        } else if (srcMembership) {
            // This is an easy one, active collateral usage only decreases
            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        } else if (dstMembership) {
            // This is a complex one. The dst might not be able to receive the transferred cTokens if
            // it will exceed the allowed active collateral cap.
            // So, let's check whether activating that much new collateral is allowed.
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "Collateral activation is not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        }
    }

    /*** Liquidity/Liquidation Calculations ***/

    /**
     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.
     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,
     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.
     */
    struct AccountLiquidityLocalVars {
        uint sumCollateral;
        uint sumBorrowPlusEffects;
        uint cTokenBalance;
        uint borrowBalance;
        uint exchangeRateMantissa;
        uint oraclePriceMantissa;
        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'
        Exp collateralOrLiquidationFactor;
        Exp exchangeRate;
        Exp oraclePrice;
        Exp tokensToDenom;

        // OLA_ADDITIONS : Added 'borrowAmountUsd' for "min borrow usd check"
        uint borrowAmountUsd;
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA ADDITIONS : This function
     * @notice Determine the current account liquidity wrt liquidation requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of liquidation requirements,
     *          account shortfall below liquidation requirements)
     */
    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code,
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {
        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);
        return (err, liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements)
     */
    function getHypotheticalAccountLiquidity(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of liquidation requirements,
     *          hypothetical account shortfall below liquidation requirements)
     */
    function getHypotheticalAccountLiquidityByLiquidationFactor(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @param useCollateralFactor True - use the "default" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'
     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,
     *  without calculating accumulated interest.
     * @return (possible error code,
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements,
     *          USD value of the given borrowAmount)
     */
    function getHypotheticalAccountLiquidityInternal(
        address account,
        CToken cTokenModify,
        uint redeemTokens,
        uint borrowAmount,
        // OLA_ADDITIONS : added 'useCollateralFactor'
        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {

        AccountLiquidityLocalVars memory vars; // Holds all our calculation results
        uint oErr;

        // For each asset the account is in
        CToken[] memory assets = accountAssets[account];
        for (uint i = 0; i < assets.length; i++) {
            CToken asset = assets[i];

            // Read the balances and exchange rate from the cToken
            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);
            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades
                return (Error.SNAPSHOT_ERROR, 0, 0, 0);
            }

            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa
            if (useCollateralFactor) {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});
            } else {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});
            }

            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});

            // Get the normalized price of the asset
            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));

            if (vars.oraclePriceMantissa == 0) {
                return (Error.PRICE_ERROR, 0, 0, 0);
            }
            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});

            // Pre-compute a conversion factor from tokens -> ether (normalized price value)
            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);
            // sumCollateral += tokensToDenom * cTokenBalance
            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);

            // sumBorrowPlusEffects += oraclePrice * borrowBalance
            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);

            // Calculate effects of interacting with cTokenModify
            if (asset == cTokenModify) {
                // redeem effect
                // sumBorrowPlusEffects += tokensToDenom * redeemTokens
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);

                // borrow effect
                // sumBorrowPlusEffects += oraclePrice * borrowAmount
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);

                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'
                // This will only have a non-zero value when the calculation is made for a 'borrow' action.
                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);
            }
        }

        // These are safe, as the underflow condition is checked first
        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {
            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);
        } else {
            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);
        }
    }

    /**
     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount
     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)
     * @param cTokenBorrowed The address of the borrowed cToken
     * @param cTokenCollateral The address of the collateral cToken
     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens
     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)
     */
    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {
        /* Read oracle prices for borrowed and collateral markets */
        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);
        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);
        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {
            return (uint(Error.PRICE_ERROR), 0);
        }

        /*
         * Get the exchange rate and calculate the number of collateral tokens to seize:
         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral
         *  seizeTokens = seizeAmount / exchangeRate
         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)
         */
        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error
        uint seizeTokens;
        Exp memory numerator;
        Exp memory denominator;
        Exp memory ratio;

        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.
        // notice: will be 0 for unsupported 'cTokenCollateral'
        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));
        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));
        ratio = div_(numerator, denominator);

        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);

        return (uint(Error.NO_ERROR), seizeTokens);
    }

    /*** Admin Functions ***/

    /**
     * @notice Sets a new rain-maker for the Comptroller (
     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets
     *                      already supported by this contract.
     * @dev Admin function to set a new rain maker
     * @dev deployParams Dynamic parameters to be used for the contract deployment.
     * @dev retireParams Dynamic parameters to be used for the retire function of the existing rain maker.
     * @dev connectParams Dynamic parameters to be used for the connection of the new rain maker.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setMinistry(address _newMinistry) external {
        require(msg.sender == admin && _newMinistry != address(0));
        registry = _newMinistry;
    }

    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);
        }

        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)
        if (hasRainMaker()) {
            IComptrollerPeripheral(rainMaker).retire(retireParams);
        }

        // Track the old rain maker for the Comptroller
        address oldRainMaker = rainMaker;

        address newRainMaker = address(0);

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new RainMaker for us
            newRainMaker = RegistryForComptrollerV0_03(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a rainMaker was deployed
            require(RainMakerInterface(newRainMaker).isRainMaker());

            // Call initialization hook
            IComptrollerPeripheral(newRainMaker).connect(connectParams);
        }

        // Set Comptroller's RainMaker to newRainMaker
        rainMaker = newRainMaker;

        // Emit NewRainMaker(oldRainMaker, newRainMaker)
        emit NewRainMaker(oldRainMaker, newRainMaker);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)
     * @dev deployParams Dynamic parameters to be used for the contract deployment.
     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.
     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);
        }

        // Track the bouncer for the Comptroller
        address oldBouncer = bouncer;
        address newBouncer = address(0);

        // Before saying goodbye, run all retirement logic
        if (hasBouncer()) {
            IComptrollerPeripheral(bouncer).retire(retireParams);
        }

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new Bouncer for us
            newBouncer = RegistryForComptrollerV0_03(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a bouncer was deployed
            require(IBouncer(newBouncer).isBouncer());

            // Call initialization hook
            IComptrollerPeripheral(newBouncer).connect(connectParams);
        }

        // Set Comptroller's bouncer to newBouncer
        bouncer = newBouncer;

        emit NewBouncer(oldBouncer, bouncer);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit supplying' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitSupplying'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitMinting(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);
        }

        if (limitMinting != flagValue) {
            limitMinting = flagValue;
            emit LimitMintingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitBorrowing'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitBorrowing(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);
        }

        if (limitBorrowing != flagValue) {
            limitBorrowing = flagValue;
            emit LimitBorrowingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)
     * @dev Admin function to set value for 'minBorrowAmountUsd'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);
        }

        uint oldMinBorrowAmount = minBorrowAmountUsd;
        minBorrowAmountUsd = minBorrowAmountUsd_;

        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the collateralFactor for a market
      * @dev Admin function to set per-market collateralFactor
      * @param cToken The market to set the factor on
      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);
        }

        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});

        // Check collateral factor <= 0.9
        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});
        if (lessThanExp(highLimit, newCollateralFactorExp)) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);
        }

        // Ensure liquidationFactor is greater or equal to the new collateralFactor
        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);
        }

        // If collateral factor != 0, fail if price == 0
        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);
        }

        // Set market's collateral factor to new collateral factor, remember old value
        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;
        market.collateralFactorMantissa = newCollateralFactorMantissa;

        // Emit event with asset, old collateral factor, and new collateral factor
        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the liquidationFactor for a market.
      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -
      *                     This value can only be increased.
      * @dev Admin function to set per-market liquidationFactor
      * @param cToken The market to set the factor on
      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);
        }

        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});

        // Check liquidation factor <= 0.9
        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});
        if (lessThanExp(highLimit, newLiquidationFactorExp)) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);
        }

        // Ensure new liquidationFactor is greater or equal to the collateralFactor
        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;
        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);
        }

        // Ensure new liquidation factor is strictly greater than the existing one
        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);
        }

        // If liquidation factor != 0, fail if price == 0
        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);
        }

        // Set market's liquidation factor to new liquidation factor, remember old value
        market.liquidationFactorMantissa = newLiquidationFactorMantissa;

        // Emit event with asset, old liquidation factor, and new liquidation factor
        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'
      * @notice Sets liquidationIncentive
      * @dev Admin function to set liquidationIncentive
      * @param cToken The market to set the factor on
      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);
        }

        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'
        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});

        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]
        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});
        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});
        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {
            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);
        }

        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)
        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);
        }

        // Save current value for use in log
        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;

        // Set liquidation incentive to new incentive
        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;

        // Emit event with old incentive, new incentive
        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Add the market to the markets mapping and set it as listed
     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market
     * @param underlying The address of the asset (token or native) to be used for the market
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _supportNewMarket(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        bytes calldata becomeImplementationData) external returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);
        }

        // We allow one instance of the same underlying-contractName combination
        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);
        }

        // IMPORTANT : No graceful failure after contract deployment !
        address deployedCToken = RegistryForComptrollerV0_03(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);

        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken

        // OLA_ADDITIONS : Changed to require
        // Legacy safety
        require(!markets[deployedCToken].isListed, "SUPPORT_MARKET_EXISTS");

        // Save asset - contract combination
        existingMarketTypes[underlying][contractNameHash] = deployedCToken;

        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'
        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,
        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,
        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0
        });

        _addMarketInternal(deployedCToken);

        emit MarketListed(CToken(deployedCToken));

        return uint(Error.NO_ERROR);
    }

    function _addMarketInternal(address cToken) internal {
        // OLA_ADDITIONS : Added this 'max assets' limitation
        require(allMarkets.length <= maxAllowedAssets, "Too many assets");

        for (uint i = 0; i < allMarkets.length; i ++) {
            require(allMarkets[i] != CToken(cToken), "Already added");
        }
        allMarkets.push(CToken(cToken));

        // OLA_ADDITIONS : Initializing the market at the RainMaker as well
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker)._supportMarket(cToken);
        }
    }

    /**
      * OLA_ADDITIONS : This function
      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.
      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.
      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for
      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {
        require(msg.sender == admin, "!Admin");

        uint numMarkets = cTokens.length;
        uint numActiveCollateralCaps = newActiveCollateralCaps.length;

        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            Market storage marketToJoin = markets[address(cTokens[i])];

            require(marketToJoin.isListed,"!listed");

            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];

            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the admin bank address
     * @param newAdminBankAddress The new admin bank address
     */
    function _setAdminBankAddress(address payable newAdminBankAddress) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldAdminBankAddress = adminBankAddress;

        // Store adminBankAddress with value newAdminBankAddress
        adminBankAddress = newAdminBankAddress;

        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)
        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);
    }

    /**
      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.
      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.
      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for
      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {
    	require(msg.sender == admin || msg.sender == borrowCapGuardian, "!admin||borrow cap guardian");

        uint numMarkets = cTokens.length;
        uint numBorrowCaps = newBorrowCaps.length;

        require(numMarkets != 0 && numMarkets == numBorrowCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];
            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the Borrow Cap Guardian
     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian
     */
    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldBorrowCapGuardian = borrowCapGuardian;

        // Store borrowCapGuardian with value newBorrowCapGuardian
        borrowCapGuardian = newBorrowCapGuardian;

        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)
        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);
    }

    /**
     * @notice Admin function to change the Pause Guardian
     * @param newPauseGuardian The address of the new Pause Guardian
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);
        }

        // Save current value for inclusion in log
        address oldPauseGuardian = pauseGuardian;

        // Store pauseGuardian with value newPauseGuardian
        pauseGuardian = newPauseGuardian;

        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)
        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);

        return uint(Error.NO_ERROR);
    }

    function _setMintPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        mintGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Mint", state);
        return state;
    }

    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        borrowGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Borrow", state);
        return state;
    }

    function _setTransferPaused(bool state) public returns (bool) {
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        transferGuardianPaused = state;
        emit ActionPaused("Transfer", state);
        return state;
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Ensures all markets are updating their implementation from the Registry
     */
    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {
        require(isAdmin(), "!admin");

        // Update all markets
        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken oToken = allMarkets[i];
            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), "Update failed");
        }
    }

    /**
     * @notice Return all of the markets
     * @dev The automatic getter may be used to access an individual market.
     * @return The list of market addresses
     */
    function getAllMarkets() public view returns (CToken[] memory) {
        return allMarkets;
    }


    /**
     * Fetches the underlying price from the ministry.
     * 0 means an error.
     */
    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {
        return RegistryForComptrollerV0_03(registry).getPriceForUnderling(cToken);
    }

    function hasRainMaker() view public returns (bool) {
        return address(rainMaker) != address(0);
    }

    function hasBouncer() view public returns (bool) {
        return address(bouncer) != address(0);
    }

    function isAccountApproved(address account) view external returns (bool) {
        return isAccountApprovedInternal(account);
    }

    /**
     * @notice This function assumes that any account not actively approved is denied
     *         and so, if no bouncer is set, the response is always false.
     */
    function isAccountApprovedInternal(address account) view internal returns (bool) {
        if (hasBouncer()) {
            return IBouncerForComptroller(bouncer).isAccountApproved(account);
        } else {
            return false;
        }
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.02/ComptrollerV0_02.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../../ErrorReporter/ErrorReporter.sol";
import "../../PriceOracle/PriceOracle.sol";
import "../../Comptroller/ComptrollerInterface.sol";
import "../../Comptroller/ComptrollerStorage.sol";
import "../../Comptroller/Unitroller.sol";
import "../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol";
import "../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol";
import "../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol";

interface RegistryForComptrollerV0_02 {
    function deployOToken(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        address admin,
        bytes calldata becomeImplementationData) external returns (address);

    function deployPeripheralContract(bytes32 contractNameHash,
        bytes calldata params,
        address contractAdmin) external returns (address);

    function getPriceForUnderling(address cToken) external view returns (uint256);
}

interface IBouncerForComptroller {
    function isAccountApproved(address account) external view returns (bool);
}

/**
 * @title Ola's Comptroller Contract V0.02
 * @author Ola
 * -- Changes form V0.01 :
 * --- Setters&Events for new storage state.
 * --- Supports bouncer
 */
contract ComptrollerV0_02 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {
    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /// @notice Emitted when an account enters a market
    event MarketEntered(CToken cToken, address account);

    /// @notice Emitted when an account exits a market
    event MarketExited(CToken cToken, address account);

    /// @notice Emitted when a collateral factor is changed by admin
    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);

    /// @notice Emitted when a liquidation factor is changed by admin
    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);

    /// @notice Emitted when liquidation incentive is changed by admin
    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'
    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the Rain Maker is changed
    event NewRainMaker(address oldRainMaker, address newRainMaker);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the bouncer is changed
    event NewBouncer(address oldBouncer, address newBouncer);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the min borrow amount is changed
    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);

    /// @notice Emitted when pause guardian is changed
    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);

    /// @notice Emitted when an action is paused globally
    event ActionPaused(string action, bool pauseState);

    /// @notice Emitted when an action is paused on a market
    event ActionPaused(CToken cToken, string action, bool pauseState);

    /// @notice Emitted when borrow cap for a cToken is changed
    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);

    /// @notice Emitted when borrow cap guardian is changed
    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);

    /// @notice Emitted when admin bank address is changed
    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);

    /// @notice Emitted when active collateral cap for a cToken is changed
    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);

    /// @notice Emitted when active collateral usage for a cToken is changed
    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Minting' flag is changed
    event LimitMintingFlagChanged(bool newValue);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when the 'Limit Borrowing' flag is changed
    event LimitBorrowingFlagChanged(bool newValue);

    // No collateralFactorMantissa may exceed this value
    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9

    // No liquidationFactorMantissa may exceed this value
    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9

    // liquidationIncentiveMantissa of any market must be strictly greater than this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05

    // liquidationIncentiveMantissa of any market must not exceed this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3

    // Hard coded value to limit amount of asset in a single LN
    // OLA_ADDITIONS: This field
    uint internal constant maxAllowedAssets = 25;

    // Hard coded value for the liquidation close factor
    // OLA_ADDITIONS: This field
    uint internal constant fixedCloseFactorMantissa = 0.5e18;

    constructor() public {
        admin = msg.sender;
    }

    /*** Registry ***/

    function getRegistry() public view returns (address) {
        return address(registry);
    }

    /*** Assets You Are In ***/

    /**
     * @notice Returns the assets an account has entered
     * @param account The address of the account to pull assets for
     * @return A dynamic list with the assets the account has entered
     */
    function getAssetsIn(address account) external view returns (CToken[] memory) {
        CToken[] memory assetsIn = accountAssets[account];

        return assetsIn;
    }

    /**
     * @notice Returns whether the given account is entered in the given asset
     * @param account The address of the account to check
     * @param cToken The cToken to check
     * @return True if the account is in the asset, otherwise false.
     */
    function checkMembership(address account, CToken cToken) external view returns (bool) {
        return markets[address(cToken)].accountMembership[account];
    }

    /**
     * @notice Add assets to be included in account liquidity calculation
     * @param cTokens The list of addresses of the cToken markets to be enabled
     * @return Success indicator for whether each corresponding market was entered
     */
    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {
        uint len = cTokens.length;

        uint[] memory results = new uint[](len);
        for (uint i = 0; i < len; i++) {
            CToken cToken = CToken(cTokens[i]);

            // OLA_ADDITIONS : Emitting Failure events
            Error error = addToMarketInternal(cToken, msg.sender);
            if (error != Error.NO_ERROR) {
                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);
            }

            results[i] = uint(error);
        }

        return results;
    }

    /**
     * @notice Checks if the account should be allowed to activate this additional amount of collateral.
     * @param cToken The cToken to verify the active collateral cap against
     * @param market The market to verify the active collateral cap against (assumes the given market is listed)
     * @param cTokensToActivate The amount of cTokens being activated as collateral
     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {
        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;
        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;

        // 0 Means "No Cap"
        if (activeCollateralUSDCap == 0) {
            return uint(Error.NO_ERROR);
        }

        // No amount ? no problem
        if (cTokensToActivate == 0) {
            return uint(Error.NO_ERROR);
        }

        // Calculate new usage USD value
        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);

        uint exchangeRateMantissa = cToken.exchangeRateStored();

        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});

        // Get the normalized price of the asset
        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));

        if (oraclePriceMantissa == 0) {
            return uint(Error.PRICE_ERROR);
        }

        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});

        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);
        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);

        // Is it within the allowed cap ?
        if (newUsageValueInUsd <= activeCollateralUSDCap) {
            // All good here
            return uint(Error.NO_ERROR);
        } else {
            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);
        }
    }

    /**
     * @notice Increases the underlying actively used as collateral.
     */
    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Reduces the underlying actively used as collateral.
    */
    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Add the market to the borrower's "assets in" for liquidity calculations
     * @param cToken The market to enter
     * @param borrower The address of the account to modify
     * @return Success indicator for whether the market was entered
     */
    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {
        Market storage marketToJoin = markets[address(cToken)];

        if (!marketToJoin.isListed) {
            // market is not listed, cannot join
            return Error.MARKET_NOT_LISTED;
        }

        if (marketToJoin.accountMembership[borrower] == true) {
            // already joined
            return Error.NO_ERROR;
        }


        // NOTE : This function call will
        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);
        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);

        // OLA_ADDITIONS : This test
        if (collateralActivationError != uint(Error.NO_ERROR)) {
            return Error(collateralActivationError);
        }

        // Increase active collateral used
        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);

        // survived the gauntlet, add to list
        // NOTE: we store these somewhat redundantly as a significant optimization
        //  this avoids having to iterate through the list for the most common use cases
        //  that is, only when we need to perform liquidity checks
        //  and not whenever we want to check if an account is in a particular market
        marketToJoin.accountMembership[borrower] = true;
        accountAssets[borrower].push(cToken);

        emit MarketEntered(cToken, borrower);

        return Error.NO_ERROR;
    }

    /**
     * @notice Removes asset from sender's account liquidity calculation
     * @dev Sender must not have an outstanding borrow balance in the asset,
     *  or be providing necessary collateral for an outstanding borrow.
     * @param cTokenAddress The address of the asset to be removed
     * @return Whether or not the account successfully exited the market
     */
    function exitMarket(address cTokenAddress) external returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        /* Get sender tokensHeld and amountOwed underlying from the cToken */
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        /* Fail if the sender has a borrow balance */
        if (amountOwed != 0) {
            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);
        }

        /* Fail if the sender is not permitted to redeem all of their tokens */
        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);
        if (allowed != 0) {
            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);
        }

        Market storage marketToExit = markets[cTokenAddress];

        /* Return true if the sender is not already ‘in’ the market */
        if (marketToExit.accountMembership[msg.sender]) {
            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);

            // If no err, reduce
            if (err != uint(Error.NO_ERROR)) {
                return err;
            }

            // Reduce the active collateral usage - Only if removal from market
            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);
            return uint(Error.NO_ERROR);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Checks if the account is done (no supply and no borrow at all) in the given market
     * and if so, exits the market for the user.
     * @dev .
     * @param cTokenAddress The address of the asset to be removed
     * @param account The account which would exit the market (if done with it)
     * @return If done - returns the result of 'exitMarketInternal' and if not done - "No error".
     */
    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);
        require(oErr == 0, "Snapshot failed"); // semi-opaque error code

        if (tokensHeld == 0 && amountOwed == 0) {
            Market storage marketToExit = markets[cTokenAddress];

            /* Return true if the sender is not already ‘in’ the market */
            if (marketToExit.accountMembership[account]) {
                return exitMarketInternal(marketToExit, cTokenAddress, account);
            } else {
                return uint(Error.NO_ERROR);
            }
        } else {
            return uint(Error.NO_ERROR);
        }
    }

    /**
      * @notice Performs the state change that Removes asset from sender's account liquidity calculation
      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism
      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding
      * debts or active collateral) AND only for users who are actually in the market.
      * @param cTokenAddress The address of the asset to be removed
      * @param account The account which would exit the market
      * @return Whether or not the account successfully exited the market
     */
    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {
        /* Set cToken account membership to false */
        delete marketToExit.accountMembership[account];

        /* Delete cToken from the account’s list of assets */
        // load into memory for faster iteration
        CToken[] memory userAssetList = accountAssets[account];
        uint len = userAssetList.length;
        uint assetIndex = len;
        for (uint i = 0; i < len; i++) {
            if (userAssetList[i] == CToken(cTokenAddress)) {
                assetIndex = i;
                break;
            }
        }

        // We *must* have found the asset in the list or our redundant data structure is broken
        require(assetIndex < len);

        // copy last item in list to location of item to be removed, reduce length by 1
        CToken[] storage storedList = accountAssets[account];
        storedList[assetIndex] = storedList[storedList.length - 1];
        storedList.length--;

        emit MarketExited(CToken(cTokenAddress), account);

        return uint(Error.NO_ERROR);
    }

    /*** Policy Hooks ***/

    /**
     * @notice Checks if the account should be allowed to mint tokens in the given market
     * @param cToken The market to verify the mint against
     * @param minter The account which would get the minted tokens
     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens
     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!mintGuardianPaused[cToken], "paused");

        // Shh - currently unused
        minter;
        mintAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit minting
        // If borrowing is limited the account has to be approved
        if (limitMinting && !isAccountApprovedInternal(minter)) {
            return uint (Error.NOT_APPROVED_TO_MINT);
        }

        // Keep the flywheel moving
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates mint and reverts on rejection. May emit logs.
     * @param cToken Asset being minted
     * @param minter The address minting the tokens
     * @param actualMintAmount The amount of the underlying asset being minted
     * @param mintTokens The number of tokens being minted
     */
    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'mintVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToMintIn = markets[address(cToken)];
        require(marketToMintIn.isListed, "!listed");

        // We only care about active collateral caps if the minter is part of the market
        if (marketToMintIn.accountMembership[minter]) {
            // Is activating that much new collateral allowed ?
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "activation not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to redeem tokens in the given market
     * @param cToken The market to verify the redeem against
     * @param redeemer The account which would redeem the tokens
     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market
     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {
        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);
        }

        return uint(Error.NO_ERROR);
    }

    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {
        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */
        if (!markets[cToken].accountMembership[redeemer]) {
            return uint(Error.NO_ERROR);
        }

        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates redeem and reverts on rejection. May emit logs.
     * @param cToken Asset being redeemed
     * @param redeemer The address redeeming the tokens
     * @param redeemAmount The amount of the underlying asset being redeemed
     * @param redeemTokens The number of tokens being redeemed
     */
    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {
        // Require tokens is zero or amount is also zero
        if (redeemTokens == 0 && redeemAmount > 0) {
            revert("redeemTokens zero");
        }

        // OLA_ADDITIONS : All from here
        // only cTokens may call 'redeemVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToRedeemFrom = markets[address(cToken)];
        require(marketToRedeemFrom.isListed, "!listed");

        // We only care about active collateral caps if the minter is in the market
        if (marketToRedeemFrom.accountMembership[redeemer]) {
            // Some cleanups, if the user is done with this market
            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), "Exit failure");

            // The redeemer is reducing the collateral value in a market they are part of.
            // let's reduce the used active collateral.
            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market
     * @param cToken The market to verify the borrow against
     * @param borrower The account which would borrow the asset
     * @param borrowAmount The amount of underlying the account would borrow
     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!borrowGuardianPaused[cToken], "paused");


        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // OLA_ADDITIONS : Can limit borrow
        // If borrowing is limited the account has to be approved
        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {
            return uint (Error.NOT_APPROVED_TO_BORROW);
        }

        if (!markets[cToken].accountMembership[borrower])
{
            // only cTokens may call borrowAllowed if borrower not in market
            require(msg.sender == cToken, "!cToken");

            // attempt to add borrower to the market
            Error err = addToMarketInternal(CToken(msg.sender), borrower);
            if (err != Error.NO_ERROR) {
                return uint(err);
            }

            // it should be impossible to break the important invariant
            assert(markets[cToken].accountMembership[borrower]);
        }

        if (getUnderlyingPriceForCToken(cToken) == 0) {
            return uint(Error.PRICE_ERROR);
        }

        uint borrowCap = borrowCaps[cToken];
        // Borrow cap of 0 corresponds to unlimited borrowing
        if (borrowCap != 0) {
            uint totalBorrows = CToken(cToken).totalBorrows();
            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);
            require(nextTotalBorrows < borrowCap, "Borrow cap reached");
        }

        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        // OLA_ADDITIONS : Adds 'min borrow usd' requirement
        if (borrowAmountUsd < minBorrowAmountUsd) {
            return uint(Error.TOO_LITTLE_BORROW);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates borrow and reverts on rejection. May emit logs.
     * @param cToken Asset whose underlying is being borrowed
     * @param borrower The address borrowing the underlying
     * @param borrowAmount The amount of the underlying asset requested to borrow
     */
    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {
        // Shh - currently unused
        cToken;
        borrower;
        borrowAmount;

        // Uncomment if adding logic
        // Only cTokens may call 'borrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to repay a borrow in the given market
     * @param cToken The market to verify the repay against
     * @param payer The account which would repay the asset
     * @param borrower The account which would borrowed the asset
     * @param repayAmount The amount of the underlying asset the account would repay
     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function repayBorrowAllowed(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        payer;
        borrower;
        repayAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates repayBorrow and reverts on rejection. May emit logs.
     * @param cToken Asset being repaid
     * @param payer The address repaying the borrow
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function repayBorrowVerify(
        address cToken,
        address payer,
        address borrower,
        uint actualRepayAmount,
        uint borrowerIndex) external {

        // Only cTokens may call 'repayBorrowVerify'
        require(msg.sender == cToken, "!cToken");

        // Some cleanups, if the user is done with this market
        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), "Exit failure");
    }

    /**
     * @notice Checks if the liquidation should be allowed to occur
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param repayAmount The amount of underlying being repaid
     */
    function liquidateBorrowAllowed(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        liquidator;

        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* The borrower must have shortfall in order to be liquidateable */
        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation
        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall == 0) {
            return uint(Error.INSUFFICIENT_SHORTFALL);
        }

        /* The liquidator may not repay more than what is allowed by the closeFactor */
        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);
        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')
        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);
        if (repayAmount > maxClose) {
            return uint(Error.TOO_MUCH_REPAY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function liquidateBorrowVerify(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint actualRepayAmount,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenBorrowed;
        cTokenCollateral;
        liquidator;
        borrower;
        actualRepayAmount;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'liquidateBorrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the seizing of assets should be allowed to occur
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeAllowed(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint) {
        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)
        // Pausing is a very serious situation - we revert to sound the alarms
        // require(!seizeGuardianPaused, "seize is paused");

        // Shh - currently unused
        seizeTokens;

        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {
            return uint(Error.COMPTROLLER_MISMATCH);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates seize and reverts on rejection. May emit logs.
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeVerify(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenCollateral;
        cTokenBorrowed;
        liquidator;
        borrower;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'seizeVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to transfer tokens in the given market
     * @param cToken The market to verify the transfer against
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!transferGuardianPaused, "transfer paused");

        // Currently the only consideration is whether or not
        //  the src is allowed to redeem this many tokens
        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates transfer and reverts on rejection. May emit logs.
     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is
     *             imperative to make sure that any change to this function is in line with
     *             the logic requirements of 'seizeInternal'.
     * @param cToken Asset being transferred
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     */
    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'transferVerify'
        require(msg.sender == cToken, "!cToken");

        // Get market + safety
        Market storage marketToTransferIn = markets[address(cToken)];
        require(marketToTransferIn.isListed, "!listed");

        bool srcMembership = marketToTransferIn.accountMembership[src];
        bool dstMembership = marketToTransferIn.accountMembership[dst];

        // If no side is in the market, the active collateral is not changed.
        // If both of them are in the market, the active collateral stays the same.
        if (srcMembership == dstMembership) {
            return;
        } else if (srcMembership) {
            // This is an easy one, active collateral usage only decreases
            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        } else if (dstMembership) {
            // This is a complex one. The dst might not be able to receive the transferred cTokens if
            // it will exceed the allowed active collateral cap.
            // So, let's check whether activating that much new collateral is allowed.
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "Collateral activation is not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        }
    }

    /*** Liquidity/Liquidation Calculations ***/

    /**
     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.
     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,
     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.
     */
    struct AccountLiquidityLocalVars {
        uint sumCollateral;
        uint sumBorrowPlusEffects;
        uint cTokenBalance;
        uint borrowBalance;
        uint exchangeRateMantissa;
        uint oraclePriceMantissa;
        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'
        Exp collateralOrLiquidationFactor;
        Exp exchangeRate;
        Exp oraclePrice;
        Exp tokensToDenom;

        // OLA_ADDITIONS : Added 'borrowAmountUsd' for "min borrow usd check"
        uint borrowAmountUsd;
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA ADDITIONS : This function
     * @notice Determine the current account liquidity wrt liquidation requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of liquidation requirements,
     *          account shortfall below liquidation requirements)
     */
    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code,
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {
        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);
        return (err, liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements)
     */
    function getHypotheticalAccountLiquidity(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of liquidation requirements,
     *          hypothetical account shortfall below liquidation requirements)
     */
    function getHypotheticalAccountLiquidityByLiquidationFactor(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @param useCollateralFactor True - use the "default" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'
     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,
     *  without calculating accumulated interest.
     * @return (possible error code,
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements,
     *          USD value of the given borrowAmount)
     */
    function getHypotheticalAccountLiquidityInternal(
        address account,
        CToken cTokenModify,
        uint redeemTokens,
        uint borrowAmount,
        // OLA_ADDITIONS : added 'useCollateralFactor'
        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {

        AccountLiquidityLocalVars memory vars; // Holds all our calculation results
        uint oErr;

        // For each asset the account is in
        CToken[] memory assets = accountAssets[account];
        for (uint i = 0; i < assets.length; i++) {
            CToken asset = assets[i];

            // Read the balances and exchange rate from the cToken
            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);
            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades
                return (Error.SNAPSHOT_ERROR, 0, 0, 0);
            }

            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa
            if (useCollateralFactor) {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});
            } else {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});
            }

            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});

            // Get the normalized price of the asset
            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));

            if (vars.oraclePriceMantissa == 0) {
                return (Error.PRICE_ERROR, 0, 0, 0);
            }
            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});

            // Pre-compute a conversion factor from tokens -> ether (normalized price value)
            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);
            // sumCollateral += tokensToDenom * cTokenBalance
            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);

            // sumBorrowPlusEffects += oraclePrice * borrowBalance
            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);

            // Calculate effects of interacting with cTokenModify
            if (asset == cTokenModify) {
                // redeem effect
                // sumBorrowPlusEffects += tokensToDenom * redeemTokens
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);

                // borrow effect
                // sumBorrowPlusEffects += oraclePrice * borrowAmount
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);

                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'
                // This will only have a non-zero value when the calculation is made for a 'borrow' action.
                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);
            }
        }

        // These are safe, as the underflow condition is checked first
        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {
            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);
        } else {
            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);
        }
    }

    /**
     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount
     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)
     * @param cTokenBorrowed The address of the borrowed cToken
     * @param cTokenCollateral The address of the collateral cToken
     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens
     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)
     */
    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {
        /* Read oracle prices for borrowed and collateral markets */
        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);
        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);
        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {
            return (uint(Error.PRICE_ERROR), 0);
        }

        /*
         * Get the exchange rate and calculate the number of collateral tokens to seize:
         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral
         *  seizeTokens = seizeAmount / exchangeRate
         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)
         */
        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error
        uint seizeTokens;
        Exp memory numerator;
        Exp memory denominator;
        Exp memory ratio;

        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.
        // notice: will be 0 for unsupported 'cTokenCollateral'
        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));
        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));
        ratio = div_(numerator, denominator);

        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);

        return (uint(Error.NO_ERROR), seizeTokens);
    }

    /*** Admin Functions ***/

    /**
     * @notice Sets a new rain-maker for the Comptroller (
     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets
     *                      already supported by this contract.
     * @dev Admin function to set a new rain maker
     * @dev deployParams Dynamic parameters to be used for the contract deployment.
     * @dev retireParams Dynamic parameters to be used for the retire function of the existing rain maker.
     * @dev connectParams Dynamic parameters to be used for the connection of the new rain maker.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);
        }

        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)
        if (hasRainMaker()) {
            IComptrollerPeripheral(rainMaker).retire(retireParams);
        }

        // Track the old rain maker for the Comptroller
        address oldRainMaker = rainMaker;

        address newRainMaker = address(0);

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new RainMaker for us
            newRainMaker = RegistryForComptrollerV0_02(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a rainMaker was deployed
            require(RainMakerInterface(newRainMaker).isRainMaker());

            // Call initialization hook
            IComptrollerPeripheral(newRainMaker).connect(connectParams);
        }

        // Set Comptroller's RainMaker to newRainMaker
        rainMaker = newRainMaker;

        // Emit NewRainMaker(oldRainMaker, newRainMaker)
        emit NewRainMaker(oldRainMaker, newRainMaker);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)
     * @dev deployParams Dynamic parameters to be used for the contract deployment.
     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.
     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);
        }

        // Track the bouncer for the Comptroller
        address oldBouncer = bouncer;
        address newBouncer = address(0);

        // Before saying goodbye, run all retirement logic
        if (hasBouncer()) {
            IComptrollerPeripheral(bouncer).retire(retireParams);
        }

        if (contractNameHash != bytes32(0)) {
            // Ask the ministry to deploy a new Bouncer for us
            newBouncer = RegistryForComptrollerV0_02(registry).deployPeripheralContract(contractNameHash, deployParams, admin);

            // Sanity, ensure a bouncer was deployed
            require(IBouncer(newBouncer).isBouncer());

            // Call initialization hook
            IComptrollerPeripheral(newBouncer).connect(connectParams);
        }

        // Set Comptroller's bouncer to newBouncer
        bouncer = newBouncer;

        emit NewBouncer(oldBouncer, bouncer);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit supplying' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitSupplying'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitMinting(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);
        }

        if (limitMinting != flagValue) {
            limitMinting = flagValue;
            emit LimitMintingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)
     * @dev Admin function to set value for 'limitBorrowing'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setLimitBorrowing(bool flagValue) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);
        }

        if (limitBorrowing != flagValue) {
            limitBorrowing = flagValue;
            emit LimitBorrowingFlagChanged(flagValue);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)
     * @dev Admin function to set value for 'minBorrowAmountUsd'
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);
        }

        uint oldMinBorrowAmount = minBorrowAmountUsd;
        minBorrowAmountUsd = minBorrowAmountUsd_;

        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the collateralFactor for a market
      * @dev Admin function to set per-market collateralFactor
      * @param cToken The market to set the factor on
      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);
        }

        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});

        // Check collateral factor <= 0.9
        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});
        if (lessThanExp(highLimit, newCollateralFactorExp)) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);
        }

        // Ensure liquidationFactor is greater or equal to the new collateralFactor
        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);
        }

        // If collateral factor != 0, fail if price == 0
        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);
        }

        // Set market's collateral factor to new collateral factor, remember old value
        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;
        market.collateralFactorMantissa = newCollateralFactorMantissa;

        // Emit event with asset, old collateral factor, and new collateral factor
        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the liquidationFactor for a market.
      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -
      *                     This value can only be increased.
      * @dev Admin function to set per-market liquidationFactor
      * @param cToken The market to set the factor on
      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);
        }

        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});

        // Check liquidation factor <= 0.9
        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});
        if (lessThanExp(highLimit, newLiquidationFactorExp)) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);
        }

        // Ensure new liquidationFactor is greater or equal to the collateralFactor
        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;
        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);
        }

        // Ensure new liquidation factor is strictly greater than the existing one
        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);
        }

        // If liquidation factor != 0, fail if price == 0
        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);
        }

        // Set market's liquidation factor to new liquidation factor, remember old value
        market.liquidationFactorMantissa = newLiquidationFactorMantissa;

        // Emit event with asset, old liquidation factor, and new liquidation factor
        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'
      * @notice Sets liquidationIncentive
      * @dev Admin function to set liquidationIncentive
      * @param cToken The market to set the factor on
      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);
        }

        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'
        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});

        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]
        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});
        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});
        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {
            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);
        }

        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)
        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);
        }

        // Save current value for use in log
        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;

        // Set liquidation incentive to new incentive
        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;

        // Emit event with old incentive, new incentive
        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Add the market to the markets mapping and set it as listed
     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market
     * @param underlying The address of the asset (token or native) to be used for the market
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _supportNewMarket(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        bytes calldata becomeImplementationData) external returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);
        }

        // We allow one instance of the same underlying-contractName combination
        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);
        }

        // IMPORTANT : No graceful failure after contract deployment !
        address deployedCToken = RegistryForComptrollerV0_02(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);

        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken

        // OLA_ADDITIONS : Changed to require
        // Legacy safety
        require(!markets[deployedCToken].isListed, "SUPPORT_MARKET_EXISTS");

        // Save asset - contract combination
        existingMarketTypes[underlying][contractNameHash] = deployedCToken;

        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'
        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,
        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,
        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0
        });

        _addMarketInternal(deployedCToken);

        emit MarketListed(CToken(deployedCToken));

        return uint(Error.NO_ERROR);
    }

    function _addMarketInternal(address cToken) internal {
        // OLA_ADDITIONS : Added this 'max assets' limitation
        require(allMarkets.length <= maxAllowedAssets, "Too many assets");

        for (uint i = 0; i < allMarkets.length; i ++) {
            require(allMarkets[i] != CToken(cToken), "Already added");
        }
        allMarkets.push(CToken(cToken));

        // OLA_ADDITIONS : Initializing the market at the RainMaker as well
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker)._supportMarket(cToken);
        }
    }

    /**
      * OLA_ADDITIONS : This function
      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.
      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.
      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for
      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {
        require(msg.sender == admin, "!Admin");

        uint numMarkets = cTokens.length;
        uint numActiveCollateralCaps = newActiveCollateralCaps.length;

        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            Market storage marketToJoin = markets[address(cTokens[i])];

            require(marketToJoin.isListed,"!listed");

            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];

            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the admin bank address
     * @param newAdminBankAddress The new admin bank address
     */
    function _setAdminBankAddress(address payable newAdminBankAddress) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldAdminBankAddress = adminBankAddress;

        // Store adminBankAddress with value newAdminBankAddress
        adminBankAddress = newAdminBankAddress;

        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)
        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);
    }

    /**
      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.
      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.
      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for
      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {
    	require(msg.sender == admin || msg.sender == borrowCapGuardian, "!admin||borrow cap guardian");

        uint numMarkets = cTokens.length;
        uint numBorrowCaps = newBorrowCaps.length;

        require(numMarkets != 0 && numMarkets == numBorrowCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];
            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the Borrow Cap Guardian
     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian
     */
    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {
        require(msg.sender == admin, "!admin");

        // Save current value for inclusion in log
        address oldBorrowCapGuardian = borrowCapGuardian;

        // Store borrowCapGuardian with value newBorrowCapGuardian
        borrowCapGuardian = newBorrowCapGuardian;

        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)
        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);
    }

    /**
     * @notice Admin function to change the Pause Guardian
     * @param newPauseGuardian The address of the new Pause Guardian
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);
        }

        // Save current value for inclusion in log
        address oldPauseGuardian = pauseGuardian;

        // Store pauseGuardian with value newPauseGuardian
        pauseGuardian = newPauseGuardian;

        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)
        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);

        return uint(Error.NO_ERROR);
    }

    function _setMintPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        mintGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Mint", state);
        return state;
    }

    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "!listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        borrowGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Borrow", state);
        return state;
    }

    function _setTransferPaused(bool state) public returns (bool) {
        require(msg.sender == pauseGuardian || msg.sender == admin, "!pause guardian||admin");
        require(msg.sender == admin || state == true, "!admin");

        transferGuardianPaused = state;
        emit ActionPaused("Transfer", state);
        return state;
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Ensures all markets are updating their implementation from the Registry
     */
    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {
        require(isAdmin(), "!admin");

        // Update all markets
        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken oToken = allMarkets[i];
            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), "Update failed");
        }
    }

    /**
     * @notice Return all of the markets
     * @dev The automatic getter may be used to access an individual market.
     * @return The list of market addresses
     */
    function getAllMarkets() public view returns (CToken[] memory) {
        return allMarkets;
    }


    /**
     * Fetches the underlying price from the ministry.
     * 0 means an error.
     */
    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {
        return RegistryForComptrollerV0_02(registry).getPriceForUnderling(cToken);
    }

    function hasRainMaker() view public returns (bool) {
        return address(rainMaker) != address(0);
    }

    function hasBouncer() view public returns (bool) {
        return address(bouncer) != address(0);
    }

    function isAccountApproved(address account) view external returns (bool) {
        return isAccountApprovedInternal(account);
    }

    /**
     * @notice This function assumes that any account not actively approved is denied
     *         and so, if no bouncer is set, the response is always false.
     */
    function isAccountApprovedInternal(address account) view internal returns (bool) {
        if (hasBouncer()) {
            return IBouncerForComptroller(bouncer).isAccountApproved(account);
        } else {
            return false;
        }
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.01/ComptrollerV0_01.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../../ErrorReporter/ErrorReporter.sol";
import "../../PriceOracle/PriceOracle.sol";
import "../../Comptroller/ComptrollerInterface.sol";
import "../../Comptroller/ComptrollerStorage.sol";
import "../../Comptroller/Unitroller.sol";
import "../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol";
import "../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol";

interface RegistryForComptrollerV0_01 {
    function getOracleForAsset(address asset) external view returns (address);
}

/**
 * @title Compound's Comptroller Contract
 * @author Compound
 */
contract ComptrollerV0_01 is ComptrollerStorageOlaV0_01, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {
    /// @notice Emitted when an admin supports a market
    event MarketListed(CToken cToken);

    /// @notice Emitted when an account enters a market
    event MarketEntered(CToken cToken, address account);

    /// @notice Emitted when an account exits a market
    event MarketExited(CToken cToken, address account);

    /// @notice Emitted when a collateral factor is changed by admin
    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);

    /// @notice Emitted when a liquidation factor is changed by admin
    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);

    /// @notice Emitted when liquidation incentive is changed by admin
    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'
    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);

    // OLA_ADDITIONS : This event
    /// @notice Emitted when price rain maker is changed
    event NewRainMaker(address oldRainMaker, address newRainMaker);

    /// @notice Emitted when pause guardian is changed
    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);

    /// @notice Emitted when an action is paused globally
    event ActionPaused(string action, bool pauseState);

    /// @notice Emitted when an action is paused on a market
    event ActionPaused(CToken cToken, string action, bool pauseState);

    /// @notice Emitted when borrow cap for a cToken is changed
    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);

    /// @notice Emitted when borrow cap guardian is changed
    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);

    /// @notice Emitted when active collateral cap for a cToken is changed
    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);

    /// @notice Emitted when active collateral usage for a cToken is changed
    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);

    // No collateralFactorMantissa may exceed this value
    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9

    // No liquidationFactorMantissa may exceed this value
    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9

    // liquidationIncentiveMantissa of any market must be strictly greater than this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05

    // liquidationIncentiveMantissa of any market must not exceed this value
    // OLA_ADDITIONS: This field
    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3

    // Hard coded value to limit amount of asset in a single LN
    // OLA_ADDITIONS: This field
    uint internal constant maxAllowedAssets = 8;

    // Hard coded value for the liquidation close factor
    // OLA_ADDITIONS: This field
    uint internal constant fixedCloseFactorMantissa = 0.5e18;

    constructor() public {
        admin = msg.sender;
    }

    /*** Registry ***/

    function getRegistry() public view returns (address) {
        return address(registry);
    }

    /*** Assets You Are In ***/

    /**
     * @notice Returns the assets an account has entered
     * @param account The address of the account to pull assets for
     * @return A dynamic list with the assets the account has entered
     */
    function getAssetsIn(address account) external view returns (CToken[] memory) {
        CToken[] memory assetsIn = accountAssets[account];

        return assetsIn;
    }

    /**
     * @notice Returns whether the given account is entered in the given asset
     * @param account The address of the account to check
     * @param cToken The cToken to check
     * @return True if the account is in the asset, otherwise false.
     */
    function checkMembership(address account, CToken cToken) external view returns (bool) {
        return markets[address(cToken)].accountMembership[account];
    }

    /**
     * @notice Add assets to be included in account liquidity calculation
     * @param cTokens The list of addresses of the cToken markets to be enabled
     * @return Success indicator for whether each corresponding market was entered
     */
    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {
        uint len = cTokens.length;

        uint[] memory results = new uint[](len);
        for (uint i = 0; i < len; i++) {
            CToken cToken = CToken(cTokens[i]);

            // OLA_ADDITIONS : Emitting Failure events
            Error error = addToMarketInternal(cToken, msg.sender);
            if (error != Error.NO_ERROR) {
                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);
            }

            results[i] = uint(error);
        }

        return results;
    }

    /**
     * @notice Checks if the account should be allowed to activate this additional amount of collateral.
     * @param cToken The cToken to verify the active collateral cap against
     * @param market The market to verify the active collateral cap against (assumes the given market is listed)
     * @param cTokensToActivate The amount of cTokens being activated as collateral
     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {
        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;
        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;

        // 0 Means "No Cap"
        if (activeCollateralUSDCap == 0) {
            return uint(Error.NO_ERROR);
        }

        // No amount ? no problem
        if (cTokensToActivate == 0) {
            return uint(Error.NO_ERROR);
        }

        // Calculate new usage USD value
        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);

        uint exchangeRateMantissa = cToken.exchangeRateStored();

        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});

        // Get the normalized price of the asset
        PriceOracle oracle = getOracleForCToken(address(cToken));
        uint oraclePriceMantissa = oracle.getUnderlyingPrice(cToken);

        if (oraclePriceMantissa == 0) {
            return uint(Error.PRICE_ERROR);
        }

        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});

        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);
        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);

        // Is it within the allowed cap ?
        if (newUsageValueInUsd <= activeCollateralUSDCap) {
            // All good here
            return uint(Error.NO_ERROR);
        } else {
            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);
        }
    }

    /**
     * @notice Increases the underlying actively used as collateral.
     */
    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Reduces the underlying actively used as collateral.
    */
    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {
        uint oldCTokenUsage = market.activeCollateralCTokenUsage;
        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);
        market.activeCollateralCTokenUsage = newCTokenUsage;
        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);
    }

    /**
     * @notice Add the market to the borrower's "assets in" for liquidity calculations
     * @param cToken The market to enter
     * @param borrower The address of the account to modify
     * @return Success indicator for whether the market was entered
     */
    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {
        Market storage marketToJoin = markets[address(cToken)];

        if (!marketToJoin.isListed) {
            // market is not listed, cannot join
            return Error.MARKET_NOT_LISTED;
        }

        if (marketToJoin.accountMembership[borrower] == true) {
            // already joined
            return Error.NO_ERROR;
        }


        // NOTE : This function call will
        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);
        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);

        // OLA_ADDITIONS : This test
        if (collateralActivationError != uint(Error.NO_ERROR)) {
            return Error(collateralActivationError);
        }

        // Increase active collateral used
        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);

        // survived the gauntlet, add to list
        // NOTE: we store these somewhat redundantly as a significant optimization
        //  this avoids having to iterate through the list for the most common use cases
        //  that is, only when we need to perform liquidity checks
        //  and not whenever we want to check if an account is in a particular market
        marketToJoin.accountMembership[borrower] = true;
        accountAssets[borrower].push(cToken);

        emit MarketEntered(cToken, borrower);

        return Error.NO_ERROR;
    }

    /**
     * @notice Removes asset from sender's account liquidity calculation
     * @dev Sender must not have an outstanding borrow balance in the asset,
     *  or be providing necessary collateral for an outstanding borrow.
     * @param cTokenAddress The address of the asset to be removed
     * @return Whether or not the account successfully exited the market
     */
    function exitMarket(address cTokenAddress) external returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        /* Get sender tokensHeld and amountOwed underlying from the cToken */
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);
        require(oErr == 0, "exitMarket: getAccountSnapshot failed"); // semi-opaque error code

        /* Fail if the sender has a borrow balance */
        if (amountOwed != 0) {
            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);
        }

        /* Fail if the sender is not permitted to redeem all of their tokens */
        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);
        if (allowed != 0) {
            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);
        }

        Market storage marketToExit = markets[cTokenAddress];

        /* Return true if the sender is not already ‘in’ the market */
        if (marketToExit.accountMembership[msg.sender]) {
            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);

            // If no err, reduce
            if (err != uint(Error.NO_ERROR)) {
                return err;
            }

            // Reduce the active collateral usage - Only if removal from market
            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);
            return uint(Error.NO_ERROR);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Checks if the account is done (no supply and no borrow at all) in the given market
     * and if so, exits the market for the user.
     * @dev .
     * @param cTokenAddress The address of the asset to be removed
     * @param account The account which would exit the market (if done with it)
     * @return If done - returns the result of 'exitMarketInternal' and if not done - "No error".
     */
    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {
        CToken cToken = CToken(cTokenAddress);
        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);
        require(oErr == 0, "exitMarketIfDone: getAccountSnapshot failed"); // semi-opaque error code

        if (tokensHeld == 0 && amountOwed == 0) {
            Market storage marketToExit = markets[cTokenAddress];

            /* Return true if the sender is not already ‘in’ the market */
            if (marketToExit.accountMembership[account]) {
                return exitMarketInternal(marketToExit, cTokenAddress, account);
            } else {
                return uint(Error.NO_ERROR);
            }
        } else {
            return uint(Error.NO_ERROR);
        }
    }

    /**
      * @notice Performs the state change that Removes asset from sender's account liquidity calculation
      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism
      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding
      * debts or active collateral) AND only for users who are actually in the market.
      * @param cTokenAddress The address of the asset to be removed
      * @param account The account which would exit the market
      * @return Whether or not the account successfully exited the market
     */
    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {
        /* Set cToken account membership to false */
        delete marketToExit.accountMembership[account];

        /* Delete cToken from the account’s list of assets */
        // load into memory for faster iteration
        CToken[] memory userAssetList = accountAssets[account];
        uint len = userAssetList.length;
        uint assetIndex = len;
        for (uint i = 0; i < len; i++) {
            if (userAssetList[i] == CToken(cTokenAddress)) {
                assetIndex = i;
                break;
            }
        }

        // We *must* have found the asset in the list or our redundant data structure is broken
        require(assetIndex < len);

        // copy last item in list to location of item to be removed, reduce length by 1
        CToken[] storage storedList = accountAssets[account];
        storedList[assetIndex] = storedList[storedList.length - 1];
        storedList.length--;

        emit MarketExited(CToken(cTokenAddress), account);

        return uint(Error.NO_ERROR);
    }

    /*** Policy Hooks ***/

    /**
     * @notice Checks if the account should be allowed to mint tokens in the given market
     * @param cToken The market to verify the mint against
     * @param minter The account which would get the minted tokens
     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens
     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!mintGuardianPaused[cToken], "mint is paused");

        // Shh - currently unused
        minter;
        mintAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        // Keep the flywheel moving
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates mint and reverts on rejection. May emit logs.
     * @param cToken Asset being minted
     * @param minter The address minting the tokens
     * @param actualMintAmount The amount of the underlying asset being minted
     * @param mintTokens The number of tokens being minted
     */
    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'mintVerify'
        require(msg.sender == cToken, "sender must be cToken");

        // Get market + safety
        Market storage marketToMintIn = markets[address(cToken)];
        require(marketToMintIn.isListed, "Market is not listed");

        // We only care about active collateral caps if the minter is part of the market
        if (marketToMintIn.accountMembership[minter]) {
            // Is activating that much new collateral allowed ?
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "Collateral activation is not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to redeem tokens in the given market
     * @param cToken The market to verify the redeem against
     * @param redeemer The account which would redeem the tokens
     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market
     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {
        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);
        }

        return uint(Error.NO_ERROR);
    }

    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {
        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */
        if (!markets[cToken].accountMembership[redeemer]) {
            return uint(Error.NO_ERROR);
        }

        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates redeem and reverts on rejection. May emit logs.
     * @param cToken Asset being redeemed
     * @param redeemer The address redeeming the tokens
     * @param redeemAmount The amount of the underlying asset being redeemed
     * @param redeemTokens The number of tokens being redeemed
     */
    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {
        require(msg.sender == cToken, "sender must be cToken");

        // Require tokens is zero or amount is also zero
        if (redeemTokens == 0 && redeemAmount > 0) {
            revert("redeemTokens zero");
        }

        // OLA_ADDITIONS : All from here
        // only cTokens may call 'redeemVerify'
        require(msg.sender == cToken, "sender must be cToken");

        // Get market + safety
        Market storage marketToRedeemFrom = markets[address(cToken)];
        require(marketToRedeemFrom.isListed, "Market is not listed");

        // We only care about active collateral caps if the minter is in the market
        if (marketToRedeemFrom.accountMembership[redeemer]) {
            // Some cleanups, if the user is done with this market
            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), "Exit market failure");

            // The redeemer is reducing the collateral value in a market they are part of.
            // let's reduce the used active collateral.
            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));
        }
    }

    /**
     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market
     * @param cToken The market to verify the borrow against
     * @param borrower The account which would borrow the asset
     * @param borrowAmount The amount of underlying the account would borrow
     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!borrowGuardianPaused[cToken], "borrow is paused");


        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (!markets[cToken].accountMembership[borrower])
{
            // only cTokens may call borrowAllowed if borrower not in market
            require(msg.sender == cToken, "sender must be cToken");

            // attempt to add borrower to the market
            Error err = addToMarketInternal(CToken(msg.sender), borrower);
            if (err != Error.NO_ERROR) {
                return uint(err);
            }

            // it should be impossible to break the important invariant
            assert(markets[cToken].accountMembership[borrower]);
        }

        PriceOracle oracle = getOracleForCToken(cToken);
        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {
            return uint(Error.PRICE_ERROR);
        }


        uint borrowCap = borrowCaps[cToken];
        // Borrow cap of 0 corresponds to unlimited borrowing
        if (borrowCap != 0) {
            uint totalBorrows = CToken(cToken).totalBorrows();
            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);
            require(nextTotalBorrows < borrowCap, "market borrow cap reached");
        }

        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall > 0) {
            return uint(Error.INSUFFICIENT_LIQUIDITY);
        }

        // OLA_ADDITIONS : Adds 'min borrow usd' requirement
        if (borrowAmountUsd < minBorrowAmountUsd) {
            return uint(Error.TOO_LITTLE_BORROW);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates borrow and reverts on rejection. May emit logs.
     * @param cToken Asset whose underlying is being borrowed
     * @param borrower The address borrowing the underlying
     * @param borrowAmount The amount of the underlying asset requested to borrow
     */
    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {
        // Shh - currently unused
        cToken;
        borrower;
        borrowAmount;

        // Uncomment if adding logic
        // Only cTokens may call 'borrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to repay a borrow in the given market
     * @param cToken The market to verify the repay against
     * @param payer The account which would repay the asset
     * @param borrower The account which would borrowed the asset
     * @param repayAmount The amount of the underlying asset the account would repay
     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function repayBorrowAllowed(
        address cToken,
        address payer,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        payer;
        borrower;
        repayAmount;

        if (!markets[cToken].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            uint borrowIndex = CToken(cToken).borrowIndex();
            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);
            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates repayBorrow and reverts on rejection. May emit logs.
     * @param cToken Asset being repaid
     * @param payer The address repaying the borrow
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function repayBorrowVerify(
        address cToken,
        address payer,
        address borrower,
        uint actualRepayAmount,
        uint borrowerIndex) external {

        // Only cTokens may call 'repayBorrowVerify'
        require(msg.sender == cToken, "sender must be cToken");

        // Some cleanups, if the user is done with this market
        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), "Exit market failure");
    }

    /**
     * @notice Checks if the liquidation should be allowed to occur
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param repayAmount The amount of underlying being repaid
     */
    function liquidateBorrowAllowed(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint repayAmount) external returns (uint) {
        // Shh - currently unused
        liquidator;

        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        /* The borrower must have shortfall in order to be liquidateable */
        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation
        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);
        if (err != Error.NO_ERROR) {
            return uint(err);
        }
        if (shortfall == 0) {
            return uint(Error.INSUFFICIENT_SHORTFALL);
        }

        /* The liquidator may not repay more than what is allowed by the closeFactor */
        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);
        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')
        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);
        if (repayAmount > maxClose) {
            return uint(Error.TOO_MUCH_REPAY);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param actualRepayAmount The amount of underlying being repaid
     */
    function liquidateBorrowVerify(
        address cTokenBorrowed,
        address cTokenCollateral,
        address liquidator,
        address borrower,
        uint actualRepayAmount,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenBorrowed;
        cTokenCollateral;
        liquidator;
        borrower;
        actualRepayAmount;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'liquidateBorrowVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the seizing of assets should be allowed to occur
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeAllowed(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external returns (uint) {
        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)
        // Pausing is a very serious situation - we revert to sound the alarms
        // require(!seizeGuardianPaused, "seize is paused");

        // Shh - currently unused
        seizeTokens;

        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {
            return uint(Error.MARKET_NOT_LISTED);
        }

        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {
            return uint(Error.COMPTROLLER_MISMATCH);
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);
            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates seize and reverts on rejection. May emit logs.
     * @param cTokenCollateral Asset which was used as collateral and will be seized
     * @param cTokenBorrowed Asset which was borrowed by the borrower
     * @param liquidator The address repaying the borrow and seizing the collateral
     * @param borrower The address of the borrower
     * @param seizeTokens The number of collateral tokens to seize
     */
    function seizeVerify(
        address cTokenCollateral,
        address cTokenBorrowed,
        address liquidator,
        address borrower,
        uint seizeTokens) external {
        // Shh - currently unused
        cTokenCollateral;
        cTokenBorrowed;
        liquidator;
        borrower;
        seizeTokens;

        // Uncomment if adding logic
        // Only cTokens may call 'seizeVerify'
        // require(msg.sender == cToken, "sender must be cToken");

        // Shh - we don't ever want this hook to be marked pure
        if (false) {
            maxAssets = maxAssets;
        }
    }

    /**
     * @notice Checks if the account should be allowed to transfer tokens in the given market
     * @param cToken The market to verify the transfer against
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)
     */
    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {
        // Pausing is a very serious situation - we revert to sound the alarms
        require(!transferGuardianPaused, "transfer is paused");

        // Currently the only consideration is whether or not
        //  the src is allowed to redeem this many tokens
        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);
        if (allowed != uint(Error.NO_ERROR)) {
            return allowed;
        }

        if (hasRainMaker()) {
            // Keep the flywheel moving
            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);
            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);
        }

        return uint(Error.NO_ERROR);
    }

    /**
     * @notice Validates transfer and reverts on rejection. May emit logs.
     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is
     *             imperative to make sure that any change to this function is in line with
     *             the logic requirements of 'seizeInternal'.
     * @param cToken Asset being transferred
     * @param src The account which sources the tokens
     * @param dst The account which receives the tokens
     * @param transferTokens The number of cTokens to transfer
     */
    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {
        // OLA_ADDITIONS : All from here
        // only cTokens may call 'transferVerify'
        require(msg.sender == cToken, "sender must be cToken");

        // Get market + safety
        Market storage marketToTransferIn = markets[address(cToken)];
        require(marketToTransferIn.isListed, "Market is not listed");

        bool srcMembership = marketToTransferIn.accountMembership[src];
        bool dstMembership = marketToTransferIn.accountMembership[dst];

        // If no side is in the market, the active collateral is not changed.
        // If both of them are in the market, the active collateral stays the same.
        if (srcMembership == dstMembership) {
            return;
        } else if (srcMembership) {
            // This is an easy one, active collateral usage only decreases
            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        } else if (dstMembership) {
            // This is a complex one. The dst might not be able to receive the transferred cTokens if
            // it will exceed the allowed active collateral cap.
            // So, let's check whether activating that much new collateral is allowed.
            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);
            require(collateralActivationError == uint(Error.NO_ERROR), "Collateral activation is not allowed");

            // All seems to be ok, increase the usage count
            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));
        }
    }

    /*** Liquidity/Liquidation Calculations ***/

    /**
     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.
     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,
     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.
     */
    struct AccountLiquidityLocalVars {
        uint sumCollateral;
        uint sumBorrowPlusEffects;
        uint cTokenBalance;
        uint borrowBalance;
        uint exchangeRateMantissa;
        uint oraclePriceMantissa;
        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'
        Exp collateralOrLiquidationFactor;
        Exp exchangeRate;
        Exp oraclePrice;
        Exp tokensToDenom;

        // OLA_ADDITIONS : Added 'borrowAmountUsd' for "min borrow usd check"
        uint borrowAmountUsd;
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA ADDITIONS : This function
     * @notice Determine the current account liquidity wrt liquidation requirements
     * @return (possible error code (semi-opaque),
                account liquidity in excess of liquidation requirements,
     *          account shortfall below liquidation requirements)
     */
    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);

        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine the current account liquidity wrt collateral requirements
     * @return (possible error code,
                account liquidity in excess of collateral requirements,
     *          account shortfall below collateral requirements)
     */
    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {
        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);
        return (err, liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements)
     */
    function getHypotheticalAccountLiquidity(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @return (possible error code (semi-opaque),
                hypothetical account liquidity in excess of liquidation requirements,
     *          hypothetical account shortfall below liquidation requirements)
     */
    function getHypotheticalAccountLiquidityByLiquidationFactor(
        address account,
        address cTokenModify,
        uint redeemTokens,
        uint borrowAmount) public view returns (uint, uint, uint) {
        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);
        return (uint(err), liquidity, shortfall);
    }

    /**
     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed
     * @param cTokenModify The market to hypothetically redeem/borrow in
     * @param account The account to determine liquidity for
     * @param redeemTokens The number of tokens to hypothetically redeem
     * @param borrowAmount The amount of underlying to hypothetically borrow
     * @param useCollateralFactor True - use the "default" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'
     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,
     *  without calculating accumulated interest.
     * @return (possible error code,
                hypothetical account liquidity in excess of collateral requirements,
     *          hypothetical account shortfall below collateral requirements)
     */
    function getHypotheticalAccountLiquidityInternal(
        address account,
        CToken cTokenModify,
        uint redeemTokens,
        uint borrowAmount,
        // OLA_ADDITIONS : added 'useCollateralFactor'
        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {

        AccountLiquidityLocalVars memory vars; // Holds all our calculation results
        uint oErr;

        // For each asset the account is in
        CToken[] memory assets = accountAssets[account];
        for (uint i = 0; i < assets.length; i++) {
            CToken asset = assets[i];

            // Read the balances and exchange rate from the cToken
            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);
            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades
                return (Error.SNAPSHOT_ERROR, 0, 0, 0);
            }

            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa
            if (useCollateralFactor) {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});
            } else {
                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});
            }

            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});

            // Get the normalized price of the asset
            PriceOracle oracle = getOracleForCToken(address(asset));
            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);

            if (vars.oraclePriceMantissa == 0) {
                return (Error.PRICE_ERROR, 0, 0, 0);
            }
            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});

            // Pre-compute a conversion factor from tokens -> ether (normalized price value)
            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);
            // sumCollateral += tokensToDenom * cTokenBalance
            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);

            // sumBorrowPlusEffects += oraclePrice * borrowBalance
            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);

            // Calculate effects of interacting with cTokenModify
            if (asset == cTokenModify) {
                // redeem effect
                // sumBorrowPlusEffects += tokensToDenom * redeemTokens
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);

                // borrow effect
                // sumBorrowPlusEffects += oraclePrice * borrowAmount
                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);

                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'
                // This will only have a non-zero value when the calculation is made for a 'borrow' action.
                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);
            }
        }

        // These are safe, as the underflow condition is checked first
        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {
            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);
        } else {
            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);
        }
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what is the latest price update timestamp between all of the markets the account is in.
     * @param account The account to determine liquidity for
     * @return (possible error code (semi-opaque),
     *          latest price update timestamp for all of the assets the account has liquidity/borrow balance,
     */
//    function getLastPriceUpdateTimestampForAccount(
//        address account) public view returns (Error, uint) {
//        return getLastPriceUpdateTimestampForAccountInternal(account);
//    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Determine what is the latest price update timestamp between all of the markets the account is in.
     * @param account The account to determine liquidity for
     * @return (possible error code (semi-opaque),
     *          latest price update timestamp for all of the assets the account has liquidity/borrow balance,
     */
//    function getLastPriceUpdateTimestampForAccountInternal(
//        address account) internal view returns (Error, uint) {
//        uint latestPriceUpdateTimestamp = 0;
//
//        // For each asset the account is in
//        CToken[] memory assets = accountAssets[account];
//        for (uint i = 0; i < assets.length; i++) {
//            CToken asset = assets[i];
//
//            // Read the balances and exchange rate from the cToken
//            (uint oErr, uint cTokenBalance, uint borrowBalance, ) = asset.getAccountSnapshot(account);
//            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades
//                return (Error.SNAPSHOT_ERROR, 0);
//            } else if (cTokenBalance > 0 || borrowBalance > 0) { // Account has any balance in asset ?
//                uint priceUpdateTimestampForAsset = oracle.getUnderlyingPriceUpdateTimestamp(address(asset));
//
    //                if (priceUpdateTimestampForAsset > latestPriceUpdateTimestamp) {
//                // Is this asset the last one to get it's price updated ?
//                    latestPriceUpdateTimestamp = priceUpdateTimestampForAsset;
//                }
//            }
//        }
//
//        return (Error.NO_ERROR, latestPriceUpdateTimestamp);
//    }

    /**
     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount
     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)
     * @param cTokenBorrowed The address of the borrowed cToken
     * @param cTokenCollateral The address of the collateral cToken
     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens
     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)
     */
    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {
        /* Read oracle prices for borrowed and collateral markets */
        uint priceBorrowedMantissa = getOracleForCToken(cTokenBorrowed).getUnderlyingPrice(CToken(cTokenBorrowed));
        uint priceCollateralMantissa = getOracleForCToken(cTokenCollateral).getUnderlyingPrice(CToken(cTokenCollateral));
        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {
            return (uint(Error.PRICE_ERROR), 0);
        }

        /*
         * Get the exchange rate and calculate the number of collateral tokens to seize:
         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral
         *  seizeTokens = seizeAmount / exchangeRate
         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)
         */
        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error
        uint seizeTokens;
        Exp memory numerator;
        Exp memory denominator;
        Exp memory ratio;

        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.
        // notice: will be 0 for unsupported 'cTokenCollateral'
        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));
        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));
        ratio = div_(numerator, denominator);

        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);

        return (uint(Error.NO_ERROR), seizeTokens);
    }

    /*** Admin Functions ***/

    /**
     * @notice Sets a new rain-maker for the Comptroller
     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets
     *                      already supported by this contract.
     * @dev Admin function to set a new rain maker
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setRainMaker(address newRainMaker) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);
        }

        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)
        if (hasRainMaker()) {
            bytes memory retireParams;
            IComptrollerPeripheral(rainMaker).retire(retireParams);
        }

        // Track the old rain maker for the Comptroller
        address oldRainMaker = rainMaker;

        // Set Comptroller's RainMaker to newRainMaker
        rainMaker = newRainMaker;

        // Emit NewRainMaker(oldRainMaker, newRainMaker)
        emit NewRainMaker(oldRainMaker, newRainMaker);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the collateralFactor for a market
      * @dev Admin function to set per-market collateralFactor
      * @param cToken The market to set the factor on
      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);
        }

        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});

        // Check collateral factor <= 0.9
        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});
        if (lessThanExp(highLimit, newCollateralFactorExp)) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);
        }

        // Ensure liquidationFactor is greater or equal to the new collateralFactor
        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {
            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);
        }

        // If collateral factor != 0, fail if price == 0
        PriceOracle oracle = getOracleForCToken(address(cToken));
        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);
        }

        // Set market's collateral factor to new collateral factor, remember old value
        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;
        market.collateralFactorMantissa = newCollateralFactorMantissa;

        // Emit event with asset, old collateral factor, and new collateral factor
        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Sets the liquidationFactor for a market.
      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -
      *                     This value can only be increased.
      * @dev Admin function to set per-market liquidationFactor
      * @param cToken The market to set the factor on
      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);
        }

        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});

        // Check liquidation factor <= 0.9
        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});
        if (lessThanExp(highLimit, newLiquidationFactorExp)) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);
        }

        // Ensure new liquidationFactor is greater or equal to the collateralFactor
        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;
        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);
        }

        // Ensure new liquidation factor is strictly greater than the existing one
        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;
        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {
            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);
        }

        // If liquidation factor != 0, fail if price == 0
        PriceOracle oracle = getOracleForCToken(address(cToken));
        if (newLiquidationFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);
        }

        // Set market's liquidation factor to new liquidation factor, remember old value
        market.liquidationFactorMantissa = newLiquidationFactorMantissa;

        // Emit event with asset, old liquidation factor, and new liquidation factor
        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'
      * @notice Sets liquidationIncentive
      * @dev Admin function to set liquidationIncentive
      * @param cToken The market to set the factor on
      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18
      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)
      */
    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {

        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);
        }

        // Verify market is listed
        Market storage market = markets[address(cToken)];
        if (!market.isListed) {
            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);
        }

        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'
        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});

        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]
        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});
        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});
        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {
            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);
        }

        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)
        PriceOracle oracle = getOracleForCToken(address(cToken));
        if (newLiquidationIncentiveMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {
            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);
        }

        // Save current value for use in log
        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;

        // Set liquidation incentive to new incentive
        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;

        // Emit event with old incentive, new incentive
        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);

        return uint(Error.NO_ERROR);
    }

    /**
      * @notice Add the market to the markets mapping and set it as listed
      * @dev Admin function to set isListed and add support for the market
      * @param cToken The address of the market (token) to list
      * @return uint 0=success, otherwise a failure. (See enum Error for details)
      */
    function _supportMarket(CToken cToken) external returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);
        }

        if (markets[address(cToken)].isListed) {
            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);
        }

        cToken.isCToken(); // Sanity check to make sure its really a CToken

        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa', 'activeCollateralUSDCap', 'activeCollateralCTokenUsage'
        markets[address(cToken)] = Market({isListed: true, collateralFactorMantissa: 0,
        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,
        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0
        });

        _addMarketInternal(address(cToken));

        emit MarketListed(cToken);

        return uint(Error.NO_ERROR);
    }

    function _addMarketInternal(address cToken) internal {
        // OLA_ADDITIONS : Added this 'max assets' limitation
        require(allMarkets.length < maxAllowedAssets, "Too many assets");

        for (uint i = 0; i < allMarkets.length; i ++) {
            require(allMarkets[i] != CToken(cToken), "market already added");
        }
        allMarkets.push(CToken(cToken));

        // OLA_ADDITIONS : Initializing the market at the RainMaker as well
        if (hasRainMaker()) {
            RainMakerInterface(rainMaker)._supportMarket(cToken);
        }
    }


    /**
      * OLA_ADDITIONS : This function
      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.
      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.
      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for
      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {
        require(msg.sender == admin, "only admin can set active collateral caps");

        uint numMarkets = cTokens.length;
        uint numActiveCollateralCaps = newActiveCollateralCaps.length;

        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            Market storage marketToJoin = markets[address(cTokens[i])];

            require(marketToJoin.isListed,"Market not listed");

            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];

            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);
        }
    }

    /**
      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.
      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.
      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for
      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.
      */
    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {
    	require(msg.sender == admin || msg.sender == borrowCapGuardian, "only admin or borrow cap guardian can set borrow caps"); 

        uint numMarkets = cTokens.length;
        uint numBorrowCaps = newBorrowCaps.length;

        require(numMarkets != 0 && numMarkets == numBorrowCaps, "invalid input");

        for(uint i = 0; i < numMarkets; i++) {
            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];
            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);
        }
    }

    /**
     * @notice Admin function to change the Borrow Cap Guardian
     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian
     */
    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {
        require(msg.sender == admin, "only admin can set borrow cap guardian");

        // Save current value for inclusion in log
        address oldBorrowCapGuardian = borrowCapGuardian;

        // Store borrowCapGuardian with value newBorrowCapGuardian
        borrowCapGuardian = newBorrowCapGuardian;

        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)
        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);
    }

    /**
     * @notice Admin function to change the Pause Guardian
     * @param newPauseGuardian The address of the new Pause Guardian
     * @return uint 0=success, otherwise a failure. (See enum Error for details)
     */
    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);
        }

        // Save current value for inclusion in log
        address oldPauseGuardian = pauseGuardian;

        // Store pauseGuardian with value newPauseGuardian
        pauseGuardian = newPauseGuardian;

        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)
        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);

        return uint(Error.NO_ERROR);
    }

    function _setMintPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "cannot pause a market that is not listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");
        require(msg.sender == admin || state == true, "only admin can unpause");

        mintGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Mint", state);
        return state;
    }

    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {
        require(markets[address(cToken)].isListed, "cannot pause a market that is not listed");
        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");
        require(msg.sender == admin || state == true, "only admin can unpause");

        borrowGuardianPaused[address(cToken)] = state;
        emit ActionPaused(cToken, "Borrow", state);
        return state;
    }

    function _setTransferPaused(bool state) public returns (bool) {
        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");
        require(msg.sender == admin || state == true, "only admin can unpause");

        transferGuardianPaused = state;
        emit ActionPaused("Transfer", state);
        return state;
    }

    /**
     * @notice Checks caller is admin
     */
    function isAdmin() internal view returns (bool) {
        return msg.sender == admin;
    }

    /**
     * OLA_ADDITIONS : This function
     * @notice Ensures all markets are updating their implementation from the Registry
     */
    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {
        require(isAdmin(), "Only admin can implement");

        // Update all markets
        for (uint i = 0; i < allMarkets.length; i ++) {
            CToken oToken = allMarkets[i];
            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), "Update failed");
        }
    }

    /**
     * @notice Return all of the markets
     * @dev The automatic getter may be used to access an individual market.
     * @return The list of market addresses
     */
    function getAllMarkets() public view returns (CToken[] memory) {
        return allMarkets;
    }

    function getOracleForCToken(address cToken) view public returns (PriceOracle) {
        PriceOracle oracle = PriceOracle(RegistryForComptrollerV0_01(registry).getOracleForAsset(CToken(cToken).underlying()));
        return oracle;
    }

    function hasRainMaker() view public returns (bool) {
        return address(rainMaker) != address(0);
    }
}


// File: contracts/Ola/Core/OlaPlatform/versions/1/RegistryV1.sol
pragma solidity ^0.5.16;

import "../../Registry/RegistryInterface.sol";
import "../../Registry/RegistryStorage.sol";
import "../../Registry/Ministry.sol";
import "../../../LendingNetwork/Comptroller/ComptrollerInterface.sol";
import "../../../LendingNetwork/PriceOracle/PriceOracle.sol";

interface ICTokenForRegistryV1 {
    function underlying() external view returns (address);
}

interface OTokensFactoryForRegistry {
    function deployODelegator(
        address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address comptroller,
        address interestRateModel,
        address admin,
        bytes calldata becomeImplementationData
    ) external returns (address);
}

interface PeripheralFactoryForRegistry {
    function deployPeripheryContract(bytes32 contractNameHash, address _comptroller, address _admin, bytes calldata params) external returns (address);
}

/**
 * @title Ola's Registry Contract V1
 * @author Ola
 */
contract RegistryV1 is RegistryV1Storage, RegistryV1Interface {
    /// @notice Emitted when an admin changes Ola reserve factor
    event NewOlaReserveFactor(uint oldOlaReserveFactorMantissa, uint newOlaReserveFactorMantissa);

    /// @notice Emitted when an admin changes Ola reserve factor
    event NewOlaBankAddress(address oldOlaBankAddress, address newOlaBankAddress);

    /// @notice Emitted when an admin changes the price oracle of an asset
    event NewOracleForAsset(address indexed asset, address indexed oldOracle, address indexed newOracle);

    /// @notice Emitted when an admin changes the factory for a peripheral contract
    event NewPeripheralFactory(bytes32 indexed contracNameHash, address indexed oldFactory, address indexed newFactory);

    /// @notice Emitted when Ola network publishes a new system version
    event OlaSystemVersionPublished(uint indexed systemVersion);

    /// @notice Emitted when Ola network publishes a new system version
    event OlaLatestSystemVersionUpdated(uint indexed oldLatestystemVersion, uint indexed newLatestystemVersion);

    /// @notice Emitted when a LeN has been registered
    event LendingNetworkRegistered(address indexed lnUnitroller, uint indexed systemVersion);

    /// @notice Emitted when a LeN has upgraded it's system version
    event LendingNetworkVersionUpdated(address indexed lnUnitroller, uint indexed oldVersion, uint indexed newVersion);

    /// @notice Emitted when a new OToken is deployed
    event OTokenDeployed(address indexed lendingNetwork, address indexed underlying, address oTokenAddress, address indexed admin);

    /// @notice Emitted when a new peripheral contract is deployed
    event PeripheralContractDeployed(address indexed lendingNetwork, address indexed admin, bytes32 indexed contracNameHash);

    constructor() public {
        admin = msg.sender;
    }

    /*** Price oracles ***/

    /**
     * Returns the oracle address for the given asset
     */
    function getOracleForAsset(address asset) external view returns (address) {
        return priceOracles[asset];
    }

    /**
     * Returns the oracle price for the given asset
     */
    function getPriceForAsset(address asset) external view returns (uint256) {
        return getPriceForAssetInternal(asset);
    }

    /**
     * Returns the oracle price for the given cToken's underlying asset
     */
    function getPriceForUnderling(address cToken) external view returns (uint256) {
        return getPriceForAssetInternal(ICTokenForRegistryV1(cToken).underlying());
    }

    /*** Interest rate model ***/
    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool) {
        return isInterestRateModelSupportedInternal(interestRateModel);
    }

    /*** Versions and implementations ***/

    /**
     *
     */
    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool) {
        return supportedSystemVersions[systemVersion];
    }

    function isLnRegistered(address lnUnitroller) public view returns (bool) {
        return lnVersions[lnUnitroller] != 0;
    }

    /**
     * @notice Returns implementation address for the given contract name hash for the version of the given LeN
     */
    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address) {
        uint256 lnSystemVersion = getLnVersion(lnUnitroller);

        require(isLnRegistered(lnUnitroller), "No version found");

        return getImplementation(lnSystemVersion, contractNameHash);
    }

    /**
     * @notice Returns the implementation address for the given contract name hash and system version
     */
    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) public view returns (address) {
        return implementations[systemVersion][contractNameHash];
    }

    /**
     * @notice Returns the version that is associated with the given LeN
     */
    function getLnVersion(address lnUnitroller) public view returns (uint256) {
        return lnVersions[lnUnitroller];
    }

    /*** LN Admin functions ***/

    function updateLnVersion(uint256 newVersion) external returns (bool) {
        address lnUnitroller = msg.sender;

        // Only the Unitroller can update itself
        require(isLnRegistered(lnUnitroller), "Not Registered");

        // Ensure valid version
        require(isSystemVersionSupported(newVersion), "Wrong Version");

        // Only going forward
        uint256 currentLnVersion = lnVersions[lnUnitroller];
        require(currentLnVersion < newVersion, "Only going forward");

        // Ensure it is in range
        require(newVersion <= latestSystemVersion, "Too high version");

        // Finally, update the ln version
        return updateLnVersionInternal(lnUnitroller, newVersion);
    }

    /**
     * @notice Called by the comptroller in order to create a new oToken instance.
     * @param underlying The asset to be managed by the created oToken
     * @param contractNameHash The hash of the wanted contract identifier
     * @param params Dynamic array to allow expansion of logic without interface change
     * @param interestRateModel The address for the wanted IRM
     * @param contractAdmin The admin address for the newly created oToken
     * @param becomeImplementationData Legacy byte array to pass to 'become implementation'
     */
    function deployOToken(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        address contractAdmin,
        bytes calldata becomeImplementationData) external returns (address) {
        address lnUnitroller = msg.sender;

        // Only the Unitroller can ask for oToken deployment
        require(isLnRegistered(lnUnitroller), "Not Registered");

        // Must provide supported interest rate model
        require(isInterestRateModelSupportedInternal(interestRateModel), "IRM not supported");

        uint256 currentLnVersion = lnVersions[lnUnitroller];

        // Must be a supported contract name for current LeN current LeN version
        require(isContractNameHashSupportedForVersion(currentLnVersion, contractNameHash), "Contract not supported for LeN version");

        // Ensure the underlying is supported (has price oracle)
        require(isAssetSupported(underlying), "Asset not supported");

        address oTokensFactory = tokenFactories[currentLnVersion];
        require(oTokensFactory != address(0), "No OTokensFactory found");

        address deployedOToken =  OTokensFactoryForRegistry(oTokensFactory).deployODelegator(underlying, contractNameHash, params, lnUnitroller, interestRateModel, contractAdmin, becomeImplementationData);

        emit OTokenDeployed(lnUnitroller, underlying, deployedOToken, contractAdmin);

        return deployedOToken;
    }

    /**
     * @notice Called by the comptroller in order to create a new peripheral contract instance.
     * @param contractNameHash The hash of the wanted contract identifier
     * @param params Dynamic array to allow expansion of logic without interface change
     * @param contractAdmin The admin address for the newly created contract
     */
    function deployPeripheralContract(bytes32 contractNameHash,
        bytes calldata params,
        address contractAdmin) external returns (address) {
        address lnUnitroller = msg.sender;

        // Only the Unitroller can ask for a peripheral contract deployment
        require(isLnRegistered(lnUnitroller), "Not Registered");

        address peripheralFactory = peripheralFactories[contractNameHash];
        require(peripheralFactory != address(0), "No peripheral factory found");

        address deployedPeripheralContract = PeripheralFactoryForRegistry(peripheralFactory).deployPeripheryContract(contractNameHash, lnUnitroller, contractAdmin, params);

        emit PeripheralContractDeployed(lnUnitroller, contractAdmin, contractNameHash);

        return deployedPeripheralContract;
    }

    /*** Initialization functions ***/
    function _become(Ministry ministry) public {
        require(msg.sender == ministry.admin(), "only Ministry admin can change brains");
        require(ministry._acceptImplementation() == 0, "change not authorized");
    }

    /*** Admin functions ***/

    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata contractImplementations, address oTokensFactory) external {
        require(msg.sender == admin, "Not Admin");
        require(contractNameHashes.length == contractImplementations.length, "Arrays must be 1:1");

        require(!supportedSystemVersions[systemVersion], "Already published");

        // Adds the flag.
        supportedSystemVersions[systemVersion] = true;

        // Set the implementations
        for (uint i = 0; i < contractNameHashes.length; i++) {
            bytes32 contractNameHash = contractNameHashes[i];
            address contractImplementation = contractImplementations[i];

            implementations[systemVersion][contractNameHash] = contractImplementation;
        }

        // Set the OTokens Factory
        require(oTokensFactory != address(0), "Must have oTokens factory");
        tokenFactories[systemVersion] = oTokensFactory;

        if (systemVersion > latestSystemVersion) {
            uint oldLatestSystemVersion  = latestSystemVersion;
            latestSystemVersion = systemVersion;
            emit OlaLatestSystemVersionUpdated(oldLatestSystemVersion, latestSystemVersion);
        }


        emit OlaSystemVersionPublished(systemVersion);
    }

    function registerNewLn(address lnUnitroller) external {
        require(msg.sender == admin, "Not Admin");
        require(lnUnitroller != address(0), "Empty unitroller");
        require(!isLnRegistered(lnUnitroller), "Already registered");

        registerNewLnInternal(lnUnitroller);
    }

    function setOlaBankAddress(address olaBankAddress_) external {
        require(msg.sender == admin, "Not admin");
        address oldOlaBankAddress = olaBankAddress;
        olaBankAddress = olaBankAddress_;
        emit NewOlaBankAddress(oldOlaBankAddress, olaBankAddress);
    }

    function registerNewLnInternal(address lnUnitroller) internal {
        lnVersions[lnUnitroller] = latestSystemVersion;

        emit LendingNetworkRegistered(lnUnitroller, latestSystemVersion);
    }

    function updateLnVersionInternal(address lnUnitroller, uint256 newVersion) internal returns (bool) {
        uint previousVersion = lnVersions[lnUnitroller];

        lnVersions[lnUnitroller] = newVersion;

        emit LendingNetworkVersionUpdated(lnUnitroller, previousVersion, newVersion);

        return true;
    }

    function setOracleForAsset(address asset, address oracleAddress) external returns (bool) {
        // TODO : Add price fetching check
        require(msg.sender == admin, "Not Admin");

        address oldOracle = priceOracles[asset];

        priceOracles[asset] = oracleAddress;

        emit NewOracleForAsset(asset, oldOracle, oracleAddress);

        return true;
    }

    function setFactoryForPeripheralContract(bytes32 contractNameHash, address factory) external returns (bool) {
        require(msg.sender == admin, "Not Admin");

        address oldFactory = peripheralFactories[contractNameHash];

        peripheralFactories[contractNameHash] = factory;

        emit NewPeripheralFactory(contractNameHash, oldFactory, factory);

        return true;
    }

    function setSupportedInterestRateModel(address interestRateModel) external returns (bool) {
        require(msg.sender == admin, "Not Admin");

        supportedInterestRateModels[interestRateModel] = true;

        return true;
    }

    function removeSupportedInterestRateModel(address interestRateModel) external returns (bool) {
        require(msg.sender == admin, "Not Admin");
        require(supportedInterestRateModels[interestRateModel], "IRM is not supported");

        supportedInterestRateModels[interestRateModel] = false;

        return true;
    }

    /*** Util checkers ***/

    /**
     * @notice Asset is considered supported if it has a price oracle
     */
    function isAssetSupported(address asset) public view returns (bool) {
        return priceOracles[asset] != address(0);
    }

    /**
     * @notice Check if the given contract name hash is supported for the given version
     */
    function isContractNameHashSupportedForVersion(uint systemVersion, bytes32 contractNameHash) public view returns (bool) {
        return implementations[systemVersion][contractNameHash] != address(0);
    }

    function isInterestRateModelSupportedInternal(address interestRateModel) internal view returns (bool) {
        return supportedInterestRateModels[interestRateModel];
    }

    /**
     * Fetches the oracle price for the given asset (Or 0 if no oracle is defined)
     */
    function getPriceForAssetInternal(address asset) internal view returns (uint256) {
        address priceOracle = priceOracles[asset];

        if (priceOracle != address(0)) {
            return PriceOracle(priceOracle).getAssetPrice(asset);
        } else {
            return 0;
        }
    }
}


// File: contracts/Ola/Core/OlaPlatform/Registry/RegistryInterface.sol
pragma solidity ^0.5.16;

contract RegistryBaseInterface {
    /// @notice Indicator that this is a Registry contract (for inspection)
    bool public constant isRegistry = true;

    /*** Interest rate model ***/
    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool);

    /*** Price oracles ***/
    function getOracleForAsset(address asset) external view returns (address);
    function getPriceForAsset(address asset) external view returns (uint256);
    function getPriceForUnderling(address cToken) external view returns (uint256);

    /*** Versions and implementations ***/
    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool);
    function isLnRegistered(address lnUnitroller) external view  returns (bool);
    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address);
    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) external view returns (address);
    function getLnVersion(address lnUnitroller) public view returns (uint256);

    /*** LN Admin functions ***/
    function updateLnVersion(uint256 newVersion) external returns (bool);
}

contract RegistryV0Interface is RegistryBaseInterface {
    /*** Admin functions ***/
    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata implementations) external;
    function registerNewLn(address lnUnitroller) external;
    function setOlaBankAddress(address olaAddress_) external;
    function setOlaReserveFactorMantissa(uint256 olaReserveFactorMantissa_) external;
    function setOracleForAsset(address asset, address oracleAddress) external returns (bool);
    function setSupportedInterestRateModel(address interestRateModel) external returns (bool);
}

contract RegistryV1Interface is RegistryBaseInterface {
    /*** LN Admin functions ***/
    function deployOToken(address underlying,
        bytes32 contractNameHash,
        bytes calldata params,
        address interestRateModel,
        address admin,
        bytes calldata becomeImplementationData) external returns (address);

    /*** Admin functions ***/
    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata implementations, address oTokensFactory) external;
    function registerNewLn(address lnUnitroller) external;
    function setOlaBankAddress(address olaAddress_) external;
    function setOracleForAsset(address asset, address oracleAddress) external returns (bool);
    function setSupportedInterestRateModel(address interestRateModel) external returns (bool);
}


// File: contracts/Ola/Core/OlaPlatform/Registry/RegistryStorage.sol
pragma solidity ^0.5.16;

contract UnistryAdminStorage {
    /**
    * @notice Administrator for this contract
    */
    address public admin;

    /**
    * @notice Pending administrator for this contract
    */
    address public pendingAdmin;

    /**
    * @notice Active brains of Ministry
    */
    address public implementation;

    /**
    * @notice Pending brains of Ministry
    */
    address public pendingImplementation;

    // Indicates if calculations should be block based or time based
    bool public blocksBased;
}

contract RegistryV0Storage is UnistryAdminStorage {
    // The address to send the 'Ola Part' when reducing reserves.
    address public olaBankAddress;

    // Part of reserves that are allocated to Ola (Deprecated)
    uint256 public olaReservesFactorMantissa;

    // Asset address -> Price oracle address
    mapping(address => address) public priceOracles;

    // The latest system version
    uint256 public latestSystemVersion;

    // Unitroller address -> System version (MAX_INT means always take latest)
    mapping(address => uint256) public lnVersions;

    // System version -> (contract name hash -> implementation)
    mapping(uint256 => mapping(bytes32 => address)) public implementations;

    // System versions => isSupported
    mapping(uint256 => bool) public supportedSystemVersions;

    // Interest rate model address => isSupported
    mapping(address => bool) public supportedInterestRateModels;
}

contract RegistryV1Storage is RegistryV0Storage {
    // System version -> OTokens Factory
    mapping(uint256 => address) public tokenFactories;

    // Contract name hash => Contract factory
    mapping(bytes32 => address) public peripheralFactories;
}


// File: contracts/Ola/Core/OlaPlatform/Registry/Ministry.sol
pragma solidity ^0.5.16;

import "./RegistryStorage.sol";

/**
 * @title RegistryCore
 * @dev Storage for the Registry is at this address, while execution is delegated to the `implementation`.
 * OTokens and Unitrollers should reference this contract as their Registry.
 */
contract Ministry is UnistryAdminStorage {

    /**
      * @notice Emitted when implementation is changed
      */
    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);

    /**
      * @notice Emitted when pendingImplementation is accepted, which means Registry implementation is updated
      */
    event NewImplementation(address oldImplementation, address newImplementation);

    /**
      * @notice Emitted when pendingAdmin is changed
      */
    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);

    /**
      * @notice Emitted when pendingAdmin is accepted, which means admin is updated
      */
    event NewAdmin(address oldAdmin, address newAdmin);

    constructor(bool _blocksBased) public {
        // Set admin to caller
        admin = msg.sender;

        // Set the calculation base for this blockchain contracts
        blocksBased = _blocksBased;
    }

    /*** Admin Functions ***/
    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {

        require(msg.sender == admin, "Not Admin");

        address oldPendingImplementation = pendingImplementation;

        pendingImplementation = newPendingImplementation;

        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);

//        return uint(Error.NO_ERROR);
        return 0;
    }

    /**
    * @notice Accepts new implementation of Registry. msg.sender must be pendingImplementation
    * @dev Admin function for new implementation to accept it's role as implementation
    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
    */
    function _acceptImplementation() public returns (uint) {
        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)
        require(msg.sender == pendingImplementation && pendingImplementation != address(0), "Not the EXISTING registry implementation");

        // Save current values for inclusion in log
        address oldImplementation = implementation;
        address oldPendingImplementation = pendingImplementation;

        implementation = pendingImplementation;

        pendingImplementation = address(0);

        emit NewImplementation(oldImplementation, implementation);
        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);

        return 0;
    }


    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {
        // Check caller = admin
        require(msg.sender == admin, "Not Admin");

        // Save current value, if any, for inclusion in log
        address oldPendingAdmin = pendingAdmin;

        // Store pendingAdmin with value newPendingAdmin
        pendingAdmin = newPendingAdmin;

        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);

//        return uint(Error.NO_ERROR);
        return 0;
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() public returns (uint) {
        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
        require(msg.sender == pendingAdmin && pendingAdmin != address(0), "Not the EXISTING pending admin");

        // Save current values for inclusion in log
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;

        // Store admin with value pendingAdmin
        admin = pendingAdmin;

        // Clear the pending value
        pendingAdmin = address(0);

        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);

//        return uint(Error.NO_ERROR);
        return 0;
    }

    /**
     * @dev Delegates execution to an implementation contract.
     * It returns to the external caller whatever the implementation returns
     * or forwards reverts.
     */
    function () payable external {
        // delegate all other functions to current implementation
        (bool success, ) = implementation.delegatecall(msg.data);

        assembly {
              let free_mem_ptr := mload(0x40)
              returndatacopy(free_mem_ptr, 0, returndatasize)

              switch success
              case 0 { revert(free_mem_ptr, returndatasize) }
              default { return(free_mem_ptr, returndatasize) }
        }
    }
}


// File: contracts/Ola/Core/OlaPlatform/versions/0/RegistryV0.sol
pragma solidity ^0.5.16;

import "../../Registry/RegistryInterface.sol";
import "../../Registry/RegistryStorage.sol";
import "../../Registry/Ministry.sol";
import "../../../LendingNetwork/Comptroller/ComptrollerInterface.sol";
import "../../../LendingNetwork/PriceOracle/PriceOracle.sol";

interface ICTokenForRegistryV0 {
    function underlying() external view returns (address);
}

/**
 * @title Ola's Registry Contract
 * @author Ola
 */
contract RegistryV0 is RegistryV0Storage, RegistryV0Interface {
    /// @notice Emitted when an admin changes Ola reserve factor
    event NewOlaReserveFactor(uint oldOlaReserveFactorMantissa, uint newOlaReserveFactorMantissa);

    /// @notice Emitted when an admin changes Ola reserve factor
    event NewOlaBankAddress(address oldOlaBankAddress, address newOlaBankAddress);

    /// @notice Emitted when an admin changes the price oracle of an asset
    event NewOracleForAsset(address indexed asset, address indexed oldOracle, address indexed newOracle);

    /// @notice Emitted when Ola network publishes a new system version
    event OlaSystemVersionPublished(uint indexed systemVersion);

    /// @notice Emitted when Ola network publishes a new system version
    event OlaLatestSystemVersionUpdated(uint indexed oldLatestystemVersion, uint indexed newLatestystemVersion);

    /// @notice Emitted when a LeN has been registered
    event LendingNetworkRegistered(address indexed lnUnitroller, uint indexed systemVersion);

    /// @notice Emitted when a LeN has upgraded it's system version
    event LendingNetworkVersionUpdated(address indexed lnUnitroller, uint indexed oldVersion, uint indexed newVersion);



    constructor() public {
        admin = msg.sender;
    }

    /*** Price oracles ***/

    /**
     * Returns the oracle address for the given asset
     */
    function getOracleForAsset(address asset) external view returns (address) {
        return priceOracles[asset];
    }

    /**
     * Returns the oracle price for the given asset
     */
    function getPriceForAsset(address asset) external view returns (uint256) {
        return getPriceForAssetInternal(asset);
    }

    /**
     * Returns the oracle price for the given cToken's underlying asset
     */
    function getPriceForUnderling(address cToken) external view returns (uint256) {
        return getPriceForAssetInternal(ICTokenForRegistryV0(cToken).underlying());
    }

    /*** Interest rate model ***/
    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool) {
        return supportedInterestRateModels[interestRateModel];
    }

    /*** Versions and implementations ***/

    /**
     *
     */
    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool) {
        return supportedSystemVersions[systemVersion];
    }

    function isLnRegistered(address lnUnitroller) public view returns (bool) {
        return lnVersions[lnUnitroller] != 0;
    }

    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address) {
        uint256 lnSystemVersion = getLnVersion(lnUnitroller);

        require(isLnRegistered(lnUnitroller), "No version found");

        return getImplementation(lnSystemVersion, contractNameHash);
    }

    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) public view returns (address) {
        return implementations[systemVersion][contractNameHash];
    }

    function getLnVersion(address lnUnitroller) public view returns (uint256) {
        return lnVersions[lnUnitroller];
    }

    /*** LN Admin functions ***/

    function updateLnVersion(uint256 newVersion) external returns (bool) {
        address lnUnitroller = msg.sender;

        // Only the Unitroller can update itself
        require(isLnRegistered(lnUnitroller), "Not Registered");

        // Ensure valid version
        require(isSystemVersionSupported(newVersion), "Wrong Version");

        // Only going forward
        uint256 currentLnVersion = lnVersions[lnUnitroller];
        require(currentLnVersion < newVersion, "Only going forward");

        // Ensure it is in range
        require(newVersion <= latestSystemVersion, "Too high version");

        // Finally, update the ln version
        return updateLnVersionInternal(lnUnitroller, newVersion);
    }

    /*** Initialization functions ***/
    function _become(Ministry ministry) public {
        require(msg.sender == ministry.admin(), "only Ministry admin can change brains");
        require(ministry._acceptImplementation() == 0, "change not authorized");
    }

    /*** Admin functions ***/

    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata contractImplementations) external {
        require(msg.sender == admin, "Not Admin");
        require(contractNameHashes.length == contractImplementations.length, "Arrays must be 1:1");

        require(!supportedSystemVersions[systemVersion], "Already published");

        // Adds the flag.
        supportedSystemVersions[systemVersion] = true;

        // Set the implementations
        for (uint i = 0; i < contractNameHashes.length; i++) {
            bytes32 contractNameHash = contractNameHashes[i];
            address contractImplementation = contractImplementations[i];

            implementations[systemVersion][contractNameHash] = contractImplementation;
        }

        if (systemVersion > latestSystemVersion) {
            uint oldLatestSystemVersion  = latestSystemVersion;
            latestSystemVersion = systemVersion;
            emit OlaLatestSystemVersionUpdated(oldLatestSystemVersion, latestSystemVersion);
        }

        emit OlaSystemVersionPublished(systemVersion);
    }


    function registerNewLn(address lnUnitroller) external {
        require(msg.sender == admin, "Not Admin");
        require(lnUnitroller != address(0), "Empty unitroller");
        require(!isLnRegistered(lnUnitroller), "Already registered");

        registerNewLnInternal(lnUnitroller);
    }

    function setOlaBankAddress(address olaBankAddress_) external {
        require(msg.sender == admin, "Not admin");
        address oldOlaBankAddress = olaBankAddress;
        olaBankAddress = olaBankAddress_;
        emit NewOlaBankAddress(oldOlaBankAddress, olaBankAddress);
    }

    function setOlaReserveFactorMantissa(uint256 olaReserveFactorMantissa_) external {
        require(msg.sender == admin, "Not admin");
        uint oldOlaReservesFactorMantissa = olaReservesFactorMantissa;
        olaReservesFactorMantissa = olaReserveFactorMantissa_;
        emit NewOlaReserveFactor(oldOlaReservesFactorMantissa, olaReservesFactorMantissa);
    }

    function registerNewLnInternal(address lnUnitroller) internal {
        uint256 latestSystemVersion = latestSystemVersion;

        lnVersions[lnUnitroller] = latestSystemVersion;

        emit LendingNetworkRegistered(lnUnitroller, latestSystemVersion);
    }

    function updateLnVersionInternal(address lnUnitroller, uint256 newVersion) internal returns (bool) {
        uint previousVersion = lnVersions[lnUnitroller];

        lnVersions[lnUnitroller] = newVersion;

        emit LendingNetworkVersionUpdated(lnUnitroller, previousVersion, newVersion);

        return true;
    }

    function setOracleForAsset(address asset, address oracleAddress) external returns (bool) {
        require(msg.sender == admin, "Not Admin");

        address oldOracle = priceOracles[asset];

        priceOracles[asset] = oracleAddress;

        emit NewOracleForAsset(asset, oldOracle, oracleAddress);

        return true;
    }

    function setSupportedInterestRateModel(address interestRateModel) external returns (bool) {
        require(msg.sender == admin, "Not Admin");

        supportedInterestRateModels[interestRateModel] = true;

        return true;
    }

    /**
     * Fetches the oracle price for the given asset (Or 0 if no oracle is defined)
     */
    function getPriceForAssetInternal(address asset) internal view returns (uint256) {
        address priceOracle = priceOracles[asset];

        if (priceOracle != address(0)) {
            return PriceOracle(priceOracle).getAssetPrice(asset);
        } else {
            return 0;
        }
    }
}


// File: contracts/Others/forTest/TestRegistry.sol
pragma solidity ^0.5.16;

import "../../Ola/Core/OlaPlatform/Registry/RegistryStorage.sol";
import "../../Ola/Core/OlaPlatform/Registry/RegistryInterface.sol";


import "../../Ola/Core/OlaPlatform/versions/0/RegistryV0.sol";

/**
 * @title Ola's Test Registry Contract
 * @author Ola
 */
contract TestRegistry is RegistryV0 {
    // DEV_NOTE : A field that will indicate that this is indeed the test contract
    bool public isTestRegistry;

    function _become(Ministry ministry) public {


        super._become(ministry);
    }

    function setTestFlags() public {

        isTestRegistry = true;
    }
}


// File: contracts/Ola/Core/OlaPlatform/Factories/deployers/ONativeDelegatorDeployer.sol
pragma solidity ^0.5.16;

import "../../../LendingNetwork/Comptroller/ComptrollerInterface.sol";
import "../../../LendingNetwork/Delegators/ONativeDelegator.sol";

contract ONativeDelegatorDeployer {
    function deployODelegator(
        // Unused, just to keep the signature
        address underlying_,
        ComptrollerInterface comptroller_,
        InterestRateModel interestRateModel_,
        uint initialExchangeRateMantissa_,
        string calldata name_,
        string calldata symbol_,
        uint8 decimals_,
        address payable admin_,
        bytes calldata becomeImplementationData
    ) external returns (address) {
        ONativeDelegator oNativeDelegator = new ONativeDelegator(
                comptroller_,
                interestRateModel_,
                initialExchangeRateMantissa_,
                name_,
                symbol_,
                decimals_,
                admin_,
                becomeImplementationData);
        address oNativeDelegatorAddress = address(oNativeDelegator);

        return oNativeDelegatorAddress;
    }
}

// File: contracts/Ola/Core/LendingNetwork/Delegators/ONativeDelegator.sol
pragma solidity ^0.5.16;

import "../OTokens/CTokenInterfaces.sol";
import "./ODelegator.sol";

/**
 * @title Ola's ONativeDelegator Contract
 * @notice OTokens which wrap a native coin underlying and delegate to an implementation
 * @author Ola
 */
contract ONativeDelegator is ODelegator, CTokenInterface, ONativeInterface {
    // OLA_ADDITIONS : This contract name hash
    bytes32 constant public ONativeDelegatorContractHash = keccak256("ONativeDelegator");

    /**
     * @notice Construct a new money market
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     * @param admin_ Address of the administrator of this token
     * @param becomeImplementationData The encoded args for becomeImplementation
     */
    constructor(ComptrollerInterface comptroller_,
                InterestRateModel interestRateModel_,
                uint initialExchangeRateMantissa_,
                string memory name_,
                string memory symbol_,
                uint8 decimals_,
                address payable admin_,
                bytes memory becomeImplementationData) public {
        // Creator of the contract is admin during initialization
        admin = msg.sender;

        // Initialize name hash
        contractNameHash = ONativeDelegatorContractHash;

        address oNativeImplementation = RegistryForODelegator(comptroller_.getRegistry()).getImplementationForLn(address(comptroller_), ONativeDelegatorContractHash);

        // First delegate gets to initialize the delegator (i.e. storage contract)
        delegateTo(oNativeImplementation, abi.encodeWithSignature("initialize(address,address,uint256,string,string,uint8)",
                                                            comptroller_,
                                                            interestRateModel_,
                                                            initialExchangeRateMantissa_,
                                                            name_,
                                                            symbol_,
                                                            decimals_));

        // New implementations always get set via the setter (post-initialize)
        _setImplementation(oNativeImplementation, false, becomeImplementationData);

        // Set the proper admin now that initialization is done
        admin = admin_;
    }

    /**
 * @notice Sender supplies assets into the market and receives OTokens in exchange
 * @dev Reverts upon any failure
 */
    function mint() external payable {
        delegateToImplementation(abi.encodeWithSignature("mint()"));
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeem(uint redeemTokens) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("redeem(uint256)", redeemTokens));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to redeem
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlying(uint redeemAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("redeemUnderlying(uint256)", redeemAmount));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrow(uint borrowAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("borrow(uint256)", borrowAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender repays their own borrow
     * @dev Reverts upon any failure
     */
    function repayBorrow() external payable {
        delegateToImplementation(abi.encodeWithSignature("repayBorrow()"));
    }

    /**
     * @notice Sender repays a borrow belonging to borrower
     * @dev Reverts upon any failure
     * @param borrower the account with the debt being payed off
     */
    function repayBorrowBehalf(address borrower) external payable {
        delegateToImplementation(abi.encodeWithSignature("repayBorrowBehalf(address)", borrower));
    }

    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @dev Reverts upon any failure
     * @param borrower The borrower of this cToken to be liquidated
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     */
    function liquidateBorrow(address borrower, CTokenInterface cTokenCollateral) external payable {
        delegateToImplementation(abi.encodeWithSignature("liquidateBorrow(address,address)", borrower, cTokenCollateral));
    }

    /**
     * @notice Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transfer(address dst, uint amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("transfer(address,uint256)", dst, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Transfer `amount` tokens from `src` to `dst`
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("transferFrom(address,address,uint256)", src, dst, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Approve `spender` to transfer up to `amount` from `src`
     * @dev This will overwrite the approval amount for `spender`
     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * @param spender The address of the account which may transfer tokens
     * @param amount The number of tokens that are approved (-1 means infinite)
     * @return Whether or not the approval succeeded
     */
    function approve(address spender, uint256 amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("approve(address,uint256)", spender, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Get the current allowance from `owner` for `spender`
     * @param owner The address of the account which owns the tokens to be spent
     * @param spender The address of the account which may transfer tokens
     * @return The number of tokens allowed to be spent (-1 means infinite)
     */
    function allowance(address owner, address spender) external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("allowance(address,address)", owner, spender));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the token balance of the `owner`
     * @param owner The address of the account to query
     * @return The number of tokens owned by `owner`
     */
    function balanceOf(address owner) external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("balanceOf(address)", owner));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @dev This also accrues interest in a transaction
     * @param owner The address of the account to query
     * @return The amount of underlying owned by `owner`
     */
    function balanceOfUnderlying(address owner) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("balanceOfUnderlying(address)", owner));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get a snapshot of the account's balances, and the cached exchange rate
     * @dev This is used by Comptroller to more efficiently perform liquidity checks.
     * @param account Address of the account to snapshot
     * @return (possible error, token balance, borrow balance, exchange rate mantissa)
     */
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getAccountSnapshot(address)", account));
        return abi.decode(data, (uint, uint, uint, uint));
    }

    /**
     * @notice Returns the current per-block borrow interest rate for this cToken
     * @return The borrow interest rate per block, scaled by 1e18
     */
    function borrowRatePerBlock() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("borrowRatePerBlock()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Returns the current per-block supply interest rate for this cToken
     * @return The supply interest rate per block, scaled by 1e18
     */
    function supplyRatePerBlock() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("supplyRatePerBlock()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Returns the current total borrows plus accrued interest
     * @return The total borrows with interest
     */
    function totalBorrowsCurrent() external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("totalBorrowsCurrent()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     * @return The calculated balance
     */
    function borrowBalanceCurrent(address account) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("borrowBalanceCurrent(address)", account));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return The calculated balance
     */
    function borrowBalanceStored(address account) public view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("borrowBalanceStored(address)", account));
        return abi.decode(data, (uint));
    }

   /**
     * @notice Accrue interest then return the up-to-date exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateCurrent() public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("exchangeRateCurrent()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateStored() public view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("exchangeRateStored()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get cash balance of this cToken in the underlying asset
     * @return The quantity of underlying asset owned by this contract
     */
    function getCash() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getCash()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the accrual block number of this cToken
     * @return The accrual block number
     */
    function getAccrualBlockNumber() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getAccrualBlockNumber()"));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Applies accrued interest to total borrows and reserves.
      * @dev This calculates interest accrued from the last checkpointed block
      *      up to the current block and writes new checkpoint to storage.
      */
    function accrueInterest() public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("accrueInterest()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Will fail unless called by another cToken during the process of liquidation.
     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("seize(address,address,uint256)", liquidator, borrower, seizeTokens));
        return abi.decode(data, (uint));
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
        delegateToImplementation(abi.encodeWithSignature("sweepToken(address)", token));
    }


    /*** Admin Functions ***/

    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setPendingAdmin(address)", newPendingAdmin));
        return abi.decode(data, (uint));
    }

    /**
      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh
      * @dev Admin function to accrue interest and set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setReserveFactor(uint256)", newReserveFactorMantissa));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_acceptAdmin()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrues interest and reduces reserves by transferring to admin
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReserves(uint reduceAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_reduceReserves(uint256)", reduceAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh
     * @dev Admin function to accrue interest and update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setInterestRateModel(address)", newInterestRateModel));
        return abi.decode(data, (uint));
    }
}


// File: contracts/Ola/Core/LendingNetwork/Delegators/ODelegator.sol
pragma solidity ^0.5.16;

import "../OTokens/CTokenInterfaces.sol";
import "../OTokens/CToken.sol";

interface RegistryForODelegator {
    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external returns (address);
}

/**
 * @title Ola's ODelegator Contract
 * @notice OTokens which delegate to an implementation
 * @author Ola
 */
contract ODelegator is CTokenAdminStorage, CTokenDelegatorInterface {

    /**
     * @notice Called by the Comptroller (most of the time) or by the admin (only via the constructor) to update the
     *         implementation of the delegator
     * @param implementation_ The address of the new implementation for delegation
     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation
     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation
     */
    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) internal {
        if (allowResign) {
            delegateToImplementation(abi.encodeWithSignature("_resignImplementation()"));
        }

        // Basic sanity
        require(CToken(implementation_).isCToken(), "Not CTokens");

        address oldImplementation = implementation;
        implementation = implementation_;


        delegateToImplementation(abi.encodeWithSignature("_becomeImplementation(bytes)", becomeImplementationData));

        emit NewImplementation(oldImplementation, implementation);
    }

    /**
     * @notice Internal method to delegate execution to another contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     * @param callee The contract to delegatecall
     * @param data The raw data to delegatecall
     * @return The returned bytes from the delegatecall
     */
    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returnData) = callee.delegatecall(data);
        assembly {
            if eq(success, 0) {
                revert(add(returnData, 0x20), returndatasize)
            }
        }
        return returnData;
    }

    /**
     * @notice Delegates execution to the implementation contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     * @param data The raw data to delegatecall
     * @return The returned bytes from the delegatecall
     */
    function delegateToImplementation(bytes memory data) public returns (bytes memory) {
        return delegateTo(implementation, data);
    }

    /**
     * @notice Delegates execution to an implementation contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.
     * @param data The raw data to delegatecall
     * @return The returned bytes from the delegatecall
     */
    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {
        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature("delegateToImplementation(bytes)", data));
        assembly {
            if eq(success, 0) {
                revert(add(returnData, 0x20), returndatasize)
            }
        }
        return abi.decode(returnData, (bytes));
    }

    function updateImplementationFromRegistry(bool allowResign, bytes calldata becomeImplementationData) external returns (bool) {
        require(msg.sender == address(comptroller), "Not comptroller");
        address implementationToSet = RegistryForODelegator(comptroller.getRegistry()).getImplementationForLn(address(comptroller), contractNameHash);
        require(implementationToSet != address(0), "No implementation");

        if (implementationToSet != implementation) {
            // New implementations always get set via the setter (post-initialize)
            _setImplementation(implementationToSet, allowResign, becomeImplementationData);
        } else {
            emit ImplementationDidNotChange(implementation);
        }

        return true;
    }

    /**
     * @notice Delegates execution to an implementation contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     */
    function () external payable {
        require(msg.value == 0,"ODelegator:fallback: cannot send value to fallback");

        // delegate all other functions to current implementation
        (bool success, ) = implementation.delegatecall(msg.data);

        assembly {
            let free_mem_ptr := mload(0x40)
            returndatacopy(free_mem_ptr, 0, returndatasize)

            switch success
            case 0 { revert(free_mem_ptr, returndatasize) }
            default { return(free_mem_ptr, returndatasize) }
        }
    }
}


// File: contracts/Ola/Core/LendingNetwork/Delegators/CErc20Delegator.sol
pragma solidity ^0.5.16;

import "../OTokens/CTokenInterfaces.sol";
import "./ODelegator.sol";
/**
 * @title Compound's CErc20Delegator Contract
 * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation
 * @author Compound
 */
contract CErc20Delegator is ODelegator, CTokenInterface, CErc20Interface {
    // OLA_ADDITIONS : This contract name hash
    bytes32 constant public CErc20DelegatorContractHash = keccak256("CErc20Delegator");

    /**
     * @notice Construct a new money market
     * @param underlying_ The address of the underlying asset
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     * @param admin_ Address of the administrator of this token
     * @param becomeImplementationData The encoded args for becomeImplementation
     */
    constructor(address underlying_,
                ComptrollerInterface comptroller_,
                InterestRateModel interestRateModel_,
                uint initialExchangeRateMantissa_,
                string memory name_,
                string memory symbol_,
                uint8 decimals_,
                address payable admin_,
                bytes memory becomeImplementationData) public {
        // Creator of the contract is admin during initialization
        admin = msg.sender;

        // Initialize name hash
        contractNameHash = CErc20DelegatorContractHash;

        address cErc20Implementation = RegistryForODelegator(comptroller_.getRegistry()).getImplementationForLn(address(comptroller_), CErc20DelegatorContractHash);

        // First delegate gets to initialize the delegator (i.e. storage contract)
        delegateTo(cErc20Implementation, abi.encodeWithSignature("initialize(address,address,address,uint256,string,string,uint8)",
                                                            underlying_,
                                                            comptroller_,
                                                            interestRateModel_,
                                                            initialExchangeRateMantissa_,
                                                            name_,
                                                            symbol_,
                                                            decimals_));

        // New implementations always get set via the setter (post-initialize)
        _setImplementation(cErc20Implementation, false, becomeImplementationData);

        // Set the proper admin now that initialization is done
        admin = admin_;
    }

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param mintAmount The amount of the underlying asset to supply
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function mint(uint mintAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("mint(uint256)", mintAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeem(uint redeemTokens) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("redeem(uint256)", redeemTokens));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to redeem
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlying(uint redeemAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("redeemUnderlying(uint256)", redeemAmount));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrow(uint borrowAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("borrow(uint256)", borrowAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender repays their own borrow
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrow(uint repayAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("repayBorrow(uint256)", repayAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Sender repays a borrow belonging to borrower
     * @param borrower the account with the debt being payed off
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("repayBorrowBehalf(address,uint256)", borrower, repayAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("liquidateBorrow(address,uint256,address)", borrower, repayAmount, cTokenCollateral));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transfer(address dst, uint amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("transfer(address,uint256)", dst, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Transfer `amount` tokens from `src` to `dst`
     * @param src The address of the source account
     * @param dst The address of the destination account
     * @param amount The number of tokens to transfer
     * @return Whether or not the transfer succeeded
     */
    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("transferFrom(address,address,uint256)", src, dst, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Approve `spender` to transfer up to `amount` from `src`
     * @dev This will overwrite the approval amount for `spender`
     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * @param spender The address of the account which may transfer tokens
     * @param amount The number of tokens that are approved (-1 means infinite)
     * @return Whether or not the approval succeeded
     */
    function approve(address spender, uint256 amount) external returns (bool) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("approve(address,uint256)", spender, amount));
        return abi.decode(data, (bool));
    }

    /**
     * @notice Get the current allowance from `owner` for `spender`
     * @param owner The address of the account which owns the tokens to be spent
     * @param spender The address of the account which may transfer tokens
     * @return The number of tokens allowed to be spent (-1 means infinite)
     */
    function allowance(address owner, address spender) external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("allowance(address,address)", owner, spender));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the token balance of the `owner`
     * @param owner The address of the account to query
     * @return The number of tokens owned by `owner`
     */
    function balanceOf(address owner) external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("balanceOf(address)", owner));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @dev This also accrues interest in a transaction
     * @param owner The address of the account to query
     * @return The amount of underlying owned by `owner`
     */
    function balanceOfUnderlying(address owner) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("balanceOfUnderlying(address)", owner));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get a snapshot of the account's balances, and the cached exchange rate
     * @dev This is used by Comptroller to more efficiently perform liquidity checks.
     * @param account Address of the account to snapshot
     * @return (possible error, token balance, borrow balance, exchange rate mantissa)
     */
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getAccountSnapshot(address)", account));
        return abi.decode(data, (uint, uint, uint, uint));
    }

    /**
     * @notice Returns the current per-block borrow interest rate for this cToken
     * @return The borrow interest rate per block, scaled by 1e18
     */
    function borrowRatePerBlock() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("borrowRatePerBlock()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Returns the current per-block supply interest rate for this cToken
     * @return The supply interest rate per block, scaled by 1e18
     */
    function supplyRatePerBlock() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("supplyRatePerBlock()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Returns the current total borrows plus accrued interest
     * @return The total borrows with interest
     */
    function totalBorrowsCurrent() external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("totalBorrowsCurrent()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     * @return The calculated balance
     */
    function borrowBalanceCurrent(address account) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("borrowBalanceCurrent(address)", account));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Return the borrow balance of account based on stored data
     * @param account The address whose balance should be calculated
     * @return The calculated balance
     */
    function borrowBalanceStored(address account) public view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("borrowBalanceStored(address)", account));
        return abi.decode(data, (uint));
    }

   /**
     * @notice Accrue interest then return the up-to-date exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateCurrent() public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("exchangeRateCurrent()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Calculates the exchange rate from the underlying to the CToken
     * @dev This function does not accrue interest before calculating the exchange rate
     * @return Calculated exchange rate scaled by 1e18
     */
    function exchangeRateStored() public view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("exchangeRateStored()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get cash balance of this cToken in the underlying asset
     * @return The quantity of underlying asset owned by this contract
     */
    function getCash() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getCash()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Get the accrual block number of this cToken
     * @return The accrual block number
     */
    function getAccrualBlockNumber() external view returns (uint) {
        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature("getAccrualBlockNumber()"));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Applies accrued interest to total borrows and reserves.
      * @dev This calculates interest accrued from the last checkpointed block
      *      up to the current block and writes new checkpoint to storage.
      */
    function accrueInterest() public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("accrueInterest()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Will fail unless called by another cToken during the process of liquidation.
     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("seize(address,address,uint256)", liquidator, borrower, seizeTokens));
        return abi.decode(data, (uint));
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
        delegateToImplementation(abi.encodeWithSignature("sweepToken(address)", token));
    }


    /*** Admin Functions ***/

    /**
      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.
      * @param newPendingAdmin New pending admin.
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setPendingAdmin(address)", newPendingAdmin));
        return abi.decode(data, (uint));
    }

    /**
      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh
      * @dev Admin function to accrue interest and set a new reserve factor
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setReserveFactor(uint256)", newReserveFactorMantissa));
        return abi.decode(data, (uint));
    }

    /**
      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin
      * @dev Admin function for pending admin to accept role and update admin
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function _acceptAdmin() external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_acceptAdmin()"));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrues interest and reduces reserves by transferring to admin
     * @param reduceAmount Amount of reduction to reserves
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _reduceReserves(uint reduceAmount) external returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_reduceReserves(uint256)", reduceAmount));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh
     * @dev Admin function to accrue interest and update the interest rate model
     * @param newInterestRateModel the new interest rate model to use
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
        bytes memory data = delegateToImplementation(abi.encodeWithSignature("_setInterestRateModel(address)", newInterestRateModel));
        return abi.decode(data, (uint));
    }

    /**
     * @notice Delegates execution to an implementation contract
     * @dev It returns to the external caller whatever the implementation returns or forwards reverts
     */
    function () external payable {
        require(msg.value == 0,"CErc20Delegator:fallback: cannot send value to fallback");

        // delegate all other functions to current implementation
        (bool success, ) = implementation.delegatecall(msg.data);

        assembly {
            let free_mem_ptr := mload(0x40)
            returndatacopy(free_mem_ptr, 0, returndatasize)

            switch success
            case 0 { revert(free_mem_ptr, returndatasize) }
            default { return(free_mem_ptr, returndatasize) }
        }
    }
}


// File: contracts/Ola/Core/OlaPlatform/Factories/deployers/CErc20DelegatorDeployer.sol
pragma solidity ^0.5.16;

import "../../../LendingNetwork/Delegators/CErc20Delegator.sol";
import "../../../LendingNetwork/Comptroller/ComptrollerInterface.sol";

contract CErc20DelegatorDeployer {
    function deployODelegator(
        address underlying_,
        ComptrollerInterface comptroller_,
        InterestRateModel interestRateModel_,
        uint initialExchangeRateMantissa_,
        string calldata name_,
        string calldata symbol_,
        uint8 decimals_,
        address payable admin_,
        bytes calldata becomeImplementationData
    ) external returns (address) {
        CErc20Delegator cErc20Delegator = new CErc20Delegator(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_, admin_, becomeImplementationData);
        address cErc20DelegatorAddress = address(cErc20Delegator);

        return cErc20DelegatorAddress;
    }
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/deployers/SingleAssetDynamicRainMakerDeployer.sol
pragma solidity ^0.5.16;

import "../SingleAssetDynamicRainMaker.sol";

contract SingleAssetDynamicRainMakerDeployer {
    function deploy(address _comptroller, address _admin) external returns (address) {
        SingleAssetDynamicRainMaker singleAssetDynamicRainMaker = new SingleAssetDynamicRainMaker(_comptroller, _admin);

        return address(singleAssetDynamicRainMaker);
    }
}

// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/deployers/SingleAssetRainMakerDeployer.sol
pragma solidity ^0.5.16;

import "../SingleAssetRainMaker.sol";

contract SingleAssetRainMakerDeployer {
    function deploy(address _comptroller, address _admin) external returns (address) {
        SingleAssetRainMaker singleAssetRainMaker = new SingleAssetRainMaker(_comptroller, _admin);

        return address(singleAssetRainMaker);
    }
}

// File: contracts/Ola/Core/LendingNetwork/OTokens/Maximillion.sol
pragma solidity ^0.5.16;

import "../versions/0.01/CEtherV0_01.sol";

/**
 * @title Compound's Maximillion Contract
 * @author Compound
 */
contract Maximillion {
    /**
     * @notice The default cEther market to repay in
     */
    ONativeInterface public cEther;

    /**
     * @notice Construct a Maximillion to repay max in a CEther market
     */
    constructor(ONativeInterface cEther_) public {
        cEther = cEther_;
    }

    /**
     * @notice msg.sender sends Ether to repay an account's borrow in the cEther market
     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded
     * @param borrower The address of the borrower account to repay on behalf of
     */
    function repayBehalf(address borrower) public payable {
        repayBehalfExplicit(borrower, cEther);
    }

    /**
     * @notice msg.sender sends Ether to repay an account's borrow in a cEther market
     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded
     * @param borrower The address of the borrower account to repay on behalf of
     * @param cEther_ The address of the cEther contract to repay in
     */
    function repayBehalfExplicit(address borrower, ONativeInterface cEther_) public payable {
        uint received = msg.value;
        uint borrows = CTokenViewInterface(address(cEther_)).borrowBalanceCurrent(borrower);
        if (received > borrows) {
            cEther_.repayBorrowBehalf.value(borrows)(borrower);
            msg.sender.transfer(received - borrows);
        } else {
            cEther_.repayBorrowBehalf.value(received)(borrower);
        }
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.01/CEtherV0_01.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";

/**
 * @title Compound's CEther Contract
 * @notice CToken which wraps Ether
 * @author Compound
 */
contract CEtherV0_01 is CToken, CEtherStorageV0_01 {
    /**
     * OLA_ADDITIONS : Now using initialize for Native
     * @notice Initialize the new (native) money market
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     */
    function initialize(
        ComptrollerInterface comptroller_,
        InterestRateModel interestRateModel_,
        uint initialExchangeRateMantissa_,
        string memory name_,
        string memory symbol_,
        uint8 decimals_) public {

        // OLA_ADDITIONS : All 'CEther' are considered to be the native coin 'cToken' for the chain
        underlying = nativeCoinUnderlying;

        // CToken initialize does the bulk of the work
        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);
    }

    /*** User Interface ***/

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Reverts upon any failure
     */
    function mint() external payable {
        (uint err,) = mintInternal(msg.value);
        requireNoError(err, "mint failed");
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeem(uint redeemTokens) external returns (uint) {
        return redeemInternal(redeemTokens);
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to redeem
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlying(uint redeemAmount) external returns (uint) {
        return redeemUnderlyingInternal(redeemAmount);
    }

    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrow(uint borrowAmount) external returns (uint) {
        return borrowInternal(borrowAmount);
    }

    /**
     * @notice Sender repays their own borrow
     * @dev Reverts upon any failure
     */
    function repayBorrow() external payable {
        (uint err,) = repayBorrowInternal(msg.value);
        requireNoError(err, "repayBorrow failed");
    }

    /**
     * @notice Sender repays a borrow belonging to borrower
     * @dev Reverts upon any failure
     * @param borrower the account with the debt being payed off
     */
    function repayBorrowBehalf(address borrower) external payable {
        (uint err,) = repayBorrowBehalfInternal(borrower, msg.value);
        requireNoError(err, "repayBorrowBehalf failed");
    }

    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @dev Reverts upon any failure
     * @param borrower The borrower of this cToken to be liquidated
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     */
    function liquidateBorrow(address borrower, CToken cTokenCollateral) external payable {
        (uint err,) = liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);
        requireNoError(err, "liquidateBorrow failed");
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
        require(address(token) != underlying, "CErc20::sweepToken: can not sweep underlying token");
        uint256 balance = token.balanceOf(address(this));
        token.transfer(admin, balance);
    }

    /**
     * @notice Send Ether to CEther to mint
     */
//    function () external payable {

//        (uint err,) = mintInternal(msg.value);

//        requireNoError(err, "mint failed");
//    }

    /*** Safe Token ***/

    /**
     * @notice Gets balance of this contract in terms of Ether, before this message
     * @dev This excludes the value of the current message, if any
     * @return The quantity of Ether owned by this contract
     */
    function getCashPrior() internal view returns (uint) {
        (MathError err, uint startingBalance) = subUInt(address(this).balance, msg.value);
        require(err == MathError.NO_ERROR);
        return startingBalance;
    }

    /**
     * @notice Perform the actual transfer in, which is a no-op
     * @param from Address sending the Ether
     * @param amount Amount of Ether being sent
     * @return The actual amount of Ether transferred
     */
    function doTransferIn(address from, uint amount) internal returns (uint) {
        // Sanity checks
        require(msg.sender == from, "sender mismatch");
        require(msg.value == amount, "value mismatch");
        return amount;
    }

    function doTransferOut(address payable to, uint amount) internal {
        /* Send the Ether, with minimal gas and revert on failure */
        to.transfer(amount);
    }

    function requireNoError(uint errCode, string memory message) internal pure {
        if (errCode == uint(Error.NO_ERROR)) {
            return;
        }

        bytes memory fullMessage = new bytes(bytes(message).length + 5);
        uint i;

        for (i = 0; i < bytes(message).length; i++) {
            fullMessage[i] = bytes(message)[i];
        }

        fullMessage[i+0] = byte(uint8(32));
        fullMessage[i+1] = byte(uint8(40));
        fullMessage[i+2] = byte(uint8(48 + ( errCode / 10 )));
        fullMessage[i+3] = byte(uint8(48 + ( errCode % 10 )));
        fullMessage[i+4] = byte(uint8(41));

        require(errCode == uint(Error.NO_ERROR), string(fullMessage));
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.02/CErc20V0_02.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";
import "../0.01/CErc20V0_01.sol";

/**
 * @title Ola's CErc20 Contract V0.01
 * @notice CTokens which wrap an EIP-20 underlying
 * @author Ola
 * -- Changes form V0.01 : NONE
 */
contract CErc20V0_02 is CErc20V0_01, CErc20StorageV0_02 {
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.01/CErc20V0_01.sol
pragma solidity ^0.5.16;

import "../../OTokens/CToken.sol";

/**
 * @title Ola's CErc20 Contract V0.01
 * @notice CTokens which wrap an EIP-20 underlying
 * @author Ola
 */
contract CErc20V0_01 is CToken, CErc20StorageV0_01 {
    /**
     * @notice Initialize the new money market
     * @param underlying_ The address of the underlying asset
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     */
    function initialize(address underlying_,
                        ComptrollerInterface comptroller_,
                        InterestRateModel interestRateModel_,
                        uint initialExchangeRateMantissa_,
                        string memory name_,
                        string memory symbol_,
                        uint8 decimals_) public {
        // CToken initialize does the bulk of the work
        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);

        // Set underlying and sanity check it
        underlying = underlying_;
        EIP20Interface(underlying).totalSupply();
    }

    /*** User Interface ***/

    /**
     * @notice Sender supplies assets into the market and receives cTokens in exchange
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param mintAmount The amount of the underlying asset to supply
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function mint(uint mintAmount) external returns (uint) {
        (uint err,) = mintInternal(mintAmount);
        return err;
    }

    /**
     * @notice Sender redeems cTokens in exchange for the underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemTokens The number of cTokens to redeem into underlying
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeem(uint redeemTokens) external returns (uint) {
        return redeemInternal(redeemTokens);
    }

    /**
     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset
     * @dev Accrues interest whether or not the operation succeeds, unless reverted
     * @param redeemAmount The amount of underlying to redeem
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function redeemUnderlying(uint redeemAmount) external returns (uint) {
        return redeemUnderlyingInternal(redeemAmount);
    }

    /**
      * @notice Sender borrows assets from the protocol to their own address
      * @param borrowAmount The amount of the underlying asset to borrow
      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
      */
    function borrow(uint borrowAmount) external returns (uint) {
        return borrowInternal(borrowAmount);
    }

    /**
     * @notice Sender repays their own borrow
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrow(uint repayAmount) external returns (uint) {
        (uint err,) = repayBorrowInternal(repayAmount);
        return err;
    }

    /**
     * @notice Sender repays a borrow belonging to borrower
     * @param borrower the account with the debt being payed off
     * @param repayAmount The amount to repay
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {
        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);
        return err;
    }

    /**
     * @notice The sender liquidates the borrowers collateral.
     *  The collateral seized is transferred to the liquidator.
     * @param borrower The borrower of this cToken to be liquidated
     * @param repayAmount The amount of the underlying borrowed asset to repay
     * @param cTokenCollateral The market in which to seize collateral from the borrower
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {
        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);
        return err;
    }

    /**
     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)
     * @param token The address of the ERC-20 token to sweep
     */
    function sweepToken(EIP20NonStandardInterface token) external {
    	require(address(token) != underlying, "CErc20::sweepToken: can not sweep underlying token");
    	uint256 balance = token.balanceOf(address(this));
    	token.transfer(admin, balance);
    }

    /*** Safe Token ***/

    /**
     * @notice Gets balance of this contract in terms of the underlying
     * @dev This excludes the value of the current message, if any
     * @return The quantity of underlying tokens owned by this contract
     */
    function getCashPrior() internal view returns (uint) {
        EIP20Interface token = EIP20Interface(underlying);
        return token.balanceOf(address(this));
    }

    /**
     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.
     *      This will revert due to insufficient balance or insufficient allowance.
     *      This function returns the actual amount received,
     *      which may be less than `amount` if there is a fee attached to the transfer.
     *
     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
     */
    function doTransferIn(address from, uint amount) internal returns (uint) {
        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);
        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));
        token.transferFrom(from, address(this), amount);

        bool success;
        assembly {
            switch returndatasize()
                case 0 {                       // This is a non-standard ERC-20
                    success := not(0)          // set success to true
                }
                case 32 {                      // This is a compliant ERC-20
                    returndatacopy(0, 0, 32)
                    success := mload(0)        // Set `success = returndata` of external call
                }
                default {                      // This is an excessively non-compliant ERC-20, revert.
                    revert(0, 0)
                }
        }
        require(success, "TOKEN_TRANSFER_IN_FAILED");

        // Calculate the amount that was *actually* transferred
        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");
        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract
    }

    /**
     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory
     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to
     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified
     *      it is >= amount, this should not revert in normal conditions.
     *
     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
     */
    function doTransferOut(address payable to, uint amount) internal {
        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);
        token.transfer(to, amount);

        bool success;
        assembly {
            switch returndatasize()
                case 0 {                      // This is a non-standard ERC-20
                    success := not(0)          // set success to true
                }
                case 32 {                     // This is a compliant ERC-20
                    returndatacopy(0, 0, 32)
                    success := mload(0)        // Set `success = returndata` of external call
                }
                default {                     // This is an excessively non-compliant ERC-20, revert.
                    revert(0, 0)
                }
        }
        require(success, "TOKEN_TRANSFER_OUT_FAILED");
    }
}


// File: contracts/Ola/Core/LendingNetwork/versions/0.01/CErc20ImmutableV0_01.sol
pragma solidity ^0.5.16;

import "./CErc20V0_01.sol";

/**
 * @title Compound's CErc20Immutable Contract
 * @notice CTokens which wrap an EIP-20 underlying and are immutable
 * @author Compound
 */
contract CErc20ImmutableV0_01 is CErc20V0_01 {
    /**
     * @notice Construct a new money market
     * @param underlying_ The address of the underlying asset
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ ERC-20 name of this token
     * @param symbol_ ERC-20 symbol of this token
     * @param decimals_ ERC-20 decimal precision of this token
     * @param admin_ Address of the administrator of this token
     */
    constructor(address underlying_,
                ComptrollerInterface comptroller_,
                InterestRateModel interestRateModel_,
                uint initialExchangeRateMantissa_,
                string memory name_,
                string memory symbol_,
                uint8 decimals_,
                address payable admin_) public {
        // Creator of the contract is admin during initialization
        admin = msg.sender;

        // Initialize the market
        initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);

        // Set the proper admin now that initialization is done
        admin = admin_;
    }
}


// File: contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/Reservoir.sol
pragma solidity ^0.5.16;

import "../../../Core/Interfaces/EIP20Interface.sol";

/**
 * @title Reservoir Contract
 * @notice Distributes a token to a different contract at a fixed rate.
 * @dev This contract must be poked via the `drip()` function every so often.
 * @author Compound
 */
contract Reservoir {

  /// @notice The block number when the Reservoir started (immutable)
  uint public dripStart;

  /// @notice Tokens per block that to drip to target (immutable)
  uint public dripRate;

  /// @notice Reference to token to drip (immutable)
  EIP20Interface public token;

  /// @notice Target to receive dripped tokens (immutable)
  address public target;

  /// @notice Amount that has already been dripped
  uint public dripped;

  /**
    * @notice Constructs a Reservoir
    * @param dripRate_ Numer of tokens per block to drip
    * @param token_ The token to drip
    * @param target_ The recipient of dripped tokens
    */
  constructor(uint dripRate_, EIP20Interface token_, address target_) public {
    dripStart = block.number;
    dripRate = dripRate_;
    token = token_;
    target = target_;
    dripped = 0;
  }

  /**
    * @notice Drips the maximum amount of tokens to match the drip rate since inception
    * @dev Note: this will only drip up to the amount of tokens available.
    * @return The amount of tokens dripped in this call
    */
  function drip() public returns (uint) {
    // First, read storage into memory
    EIP20Interface token_ = token;
    uint reservoirBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call
    uint dripRate_ = dripRate;
    uint dripStart_ = dripStart;
    uint dripped_ = dripped;
    address target_ = target;
    uint blockNumber_ = block.number;

    // Next, calculate intermediate values
    uint dripTotal_ = mul(dripRate_, blockNumber_ - dripStart_, "dripTotal overflow");
    uint deltaDrip_ = sub(dripTotal_, dripped_, "deltaDrip underflow");
    uint toDrip_ = min(reservoirBalance_, deltaDrip_);
    uint drippedNext_ = add(dripped_, toDrip_, "tautological");

    // Finally, write new `dripped` value and transfer tokens to target
    dripped = drippedNext_;
    token_.transfer(target_, toDrip_);

    return toDrip_;
  }

  /* Internal helper functions for safe Math */

  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
    uint c = a + b;
    require(c >= a, errorMessage);
    return c;
  }

  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
    require(b <= a, errorMessage);
    uint c = a - b;
    return c;
  }

  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
    if (a == 0) {
      return 0;
    }
    uint c = a * b;
    require(c / a == b, errorMessage);
    return c;
  }

  function min(uint a, uint b) internal pure returns (uint) {
    if (a <= b) {
      return a;
    } else {
      return b;
    }
  }
}

