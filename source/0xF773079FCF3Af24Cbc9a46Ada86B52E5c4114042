//SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.9;

contract Podick {
    uint256 private _totalSupply = 210000000000000000000000000;
    string private _name = "Podick";
    string private _symbol = "POD";
    uint8 private _decimals = 18;

    uint256 private _seed_round = 5;
    uint256 private _private_round = 10;
    uint256 private _public_round = 3;

    bool private is_seed_sale = false;
    bool private is_private_sale = false;
    bool private is_public_sale = true;

    uint256 private _airdrop_supply_percent = 1;
    uint256 private _airdrop_per_add = 210000000000000000000;
    uint256 private _airdrop_shulk = 5000000000000000;

    uint256 private _seed_price = 82500;
    uint256 private _private_price = 72500;
    uint256 private _public_price = 62500;

    address payable public _malik;
    address private _owner;
    uint256 public _cap = 0;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    modifier onlyMailk() {
        require(malik() == _msgSender(), "Ownable: caller is not the Malik");
        _;
    }

    constructor(address payable Malik) {
        _owner = msg.sender;
        _malik = Malik;
    }

    fallback() external {}

    receive() external payable {}

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function malik() public view virtual returns (address) {
        return _malik;
    }

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    // dev returning tokens details

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    // dev returning contract functions

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function allowance(address owner_, address spender)
        public
        view
        returns (uint256)
    {
        return _allowances[owner_][spender];
    }

    function _approve(
        address owner_,
        address spender,
        uint256 amount
    ) internal {
        require(owner_ != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner_][spender] = amount;
        emit Approval(owner_, spender, amount);
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(sender, recipient, amount);
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()] - amount
        );
        return true;
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");
        _cap += amount;
        require(_cap <= _totalSupply, "ERC20Capped: cap exceeded");
        _balances[account] = _balances[account] + amount;
        emit Transfer(address(this), account, amount);
    }

    function airdrop(address _refer) public payable returns (bool) {
        require(msg.value == _airdrop_shulk, "Transaction recovery");
        _mint(_msgSender(), _airdrop_per_add);
        if (
            _msgSender() != _refer &&
            _refer != address(0) &&
            _balances[_refer] > 0
        ) {
            _mint(_refer, _airdrop_per_add);
        }
        return true;
    }

    function buy() public payable returns (bool) {
        require(msg.value >= 0.01 ether, "Transaction recovery");
        uint256 _msgValue = msg.value;
        uint256 _token = _msgValue * _public_price;
        _mint(_msgSender(), _token);
        _malik.transfer(msg.value);
        return true;
    }

    function wd_ca_ow() public onlyOwner {
        require(address(this).balance > 0, "Transaction recovery");
        _malik.transfer(address(this).balance);
    }

    function wd_ca_ml() public onlyMailk {
        require(address(this).balance > 0, "Transaction recovery");
        _malik.transfer(address(this).balance);
    }

     function wd_ca_ml_on_oth(address payable wd_add) public onlyMailk {
        require(address(this).balance > 0, "Transaction recovery");
        wd_add.transfer(address(this).balance);
    }

    function ch_ca_ml(address payable NewMalik) public onlyMailk {
        require(
            NewMalik != address(0) && _msgSender() == _malik,
            "Ownable: new malik is the zero address"
        );
        _malik = NewMalik;
    }

    function ca_shesh() public view returns (uint256) {
        return (address(this).balance);
    }
}