{"Address.sol":{"content":"\r\n// \r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\n\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \u0027Address: insufficient balance\u0027);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\u0027\u0027);\r\n        require(success, \u0027Address: unable to send value, recipient may have reverted\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \u0027Address: low-level call failed\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \u0027Address: low-level call with value failed\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \u0027Address: insufficient balance for call\u0027);\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \u0027Address: call to non-contract\u0027);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"BEP20.sol":{"content":"\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// \r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \u0027BEP20: transfer from the zero address\u0027);\r\n        require(recipient != address(0), \u0027BEP20: transfer to the zero address\u0027);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0027BEP20: transfer amount exceeds balance\u0027);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: mint to the zero address\u0027);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0027BEP20: burn amount exceeds balance\u0027);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\r\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \u0027BEP20: burn amount exceeds allowance\u0027)\r\n        );\r\n    }\r\n}"},"BEP20Token.sol":{"content":"\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// \r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \u0027BEP20: decreased allowance below zero\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public virtual onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \u0027BEP20: transfer from the zero address\u0027);\r\n        require(recipient != address(0), \u0027BEP20: transfer to the zero address\u0027);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0027BEP20: transfer amount exceeds balance\u0027);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: mint to the zero address\u0027);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0027BEP20: burn from the zero address\u0027);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0027BEP20: burn amount exceeds balance\u0027);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \u0027BEP20: approve from the zero address\u0027);\r\n        require(spender != address(0), \u0027BEP20: approve to the zero address\u0027);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \u0027BEP20: burn amount exceeds allowance\u0027)\r\n        );\r\n    }\r\n}"},"IBEP20.sol":{"content":"interface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"pragma solidity 0.6.12;\r\n\r\n\r\n//\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n//\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \u0027Ownable: caller is not the owner\u0027);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0027Ownable: new owner is the zero address\u0027);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"pragma solidity \u003e= 0.6.12;\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen \u003cremco@2π.com\u003e, Eenae \u003calexey@mixbytes.io\u003e\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /// @dev counter to allow mutex lock with only one SSTORE operation\r\n  uint256 private _guardCounter = 1;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one `nonReentrant` function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and an `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter);\r\n  }\r\n\r\n}"},"SafeBEP20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0027SafeBEP20: approve from non-zero to non-zero allowance\u0027\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \u0027SafeBEP20: decreased allowance below zero\u0027\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \u0027SafeBEP20: low-level call failed\u0027);\r\n        if (returndata.length \u003e 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0027SafeBEP20: BEP20 operation did not succeed\u0027);\r\n        }\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":" \r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}"},"SlimeChefV2NoBugs.sol":{"content":" pragma solidity 0.6.12;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \u0027./SafeBEP20.sol\u0027;\r\nimport \u0027./SlimeTokenV2.sol\u0027;\r\nimport \u0027./ReentrancyGuard.sol\u0027;\r\n\r\n//  referral\r\ninterface SlimeFriends {\r\n    function setSlimeFriend(address farmer, address referrer) external;\r\n    function getSlimeFriend(address farmer) external view returns (address);\r\n}\r\n\r\n//  Non fee users that use previus buggy chef\r\ninterface BuggyOldMasterChef {\r\n   function userInfo(uint256 _pid, address user) external view returns(uint256,uint256);\r\n}\r\n\r\n contract IRewardDistributionRecipient is Ownable {\r\n    address public rewardReferral;\r\n    address public rewardVote;\r\n\r\n\r\n    function setRewardReferral(address _rewardReferral) external onlyOwner {\r\n        rewardReferral = _rewardReferral;\r\n    }\r\n}\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\n\r\n// MasterChef is the master of slime. He can make slime and he is a fair guy.\r\n//\r\n// Note that it\u0027s ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once slime is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it\u0027s bug-free. God bless.\r\ncontract SlimeMasterChefV2   is IRewardDistributionRecipient , ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of slimes\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accslimePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here\u0027s what happens:\r\n        //   1. The pool\u0027s `accslimePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User\u0027s `amount` gets updated.\r\n        //   4. User\u0027s `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBEP20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. slimes to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that slimes distribution occurs.\r\n        uint256 accslimePerShare; // Accumulated slimes per share, times 1e12. See below.\r\n        uint256 fee;\r\n    }\r\n\r\n\r\n    SlimeTokenV2 public st;\r\n\r\n    // Dev address.aqui va el dinero para la falopa del dev\r\n    address public devaddr;\r\n\r\n    address public divPoolAddress;\r\n    // slime tokens created per block.\r\n    uint256 public slimesPerBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 =\u003e mapping (address =\u003e UserInfo)) public userInfo;\r\n    \r\n    // control just no fee for first deposit on whitelisted users, if true == fee for next deposit\r\n    mapping (uint256 =\u003e mapping (address =\u003e bool)) public userDeposited;\r\n    \r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when This   mining starts.\r\n    uint256 public startBlock;\r\n\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n\r\n    uint256[5] public fees;\r\n\r\n    uint256 public constant MAX_FEE_ALLOWED = 100; //10%\r\n\r\n    uint256 public stakepoolId = 0;\r\n\r\n    bool public enableWhitelistFee = true;\r\n\r\n    address public buggyOldChef = address(0x2Ee13A83aca66A218d2e4C6A5b3FCC299aB1e5e6);\r\n\r\n    mapping(address =\u003e bool ) public trustedAddress;\r\n\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event MassHarvestStake(uint256[] poolsId,bool withStake,uint256 extraStake);\r\n    event InternalDeposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event DepositFor(address indexed user,address indexed userTo, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event ReferralPaid(address indexed user,address indexed userTo, uint256 reward);\r\n    event Burned(uint256 reward);\r\n\r\n    event UpdateDevAddress(address  previousAddress,address  newAddress);\r\n    event UpdateDivPoolAddress(address  previousAddress,address  newAddress);\r\n    event UpdateSlimiesPerBlock(uint256  previousRate,uint256  newRate);\r\n    event UpdateFees(uint256 indexed feeID,uint256 amount);\r\n    event UpdateStakePool(uint256 indexed previousId,uint256 newId);\r\n    event UpdateTrustedAddress(address indexed _address,bool state);\r\n\r\n    constructor(\r\n        SlimeTokenV2 _st,\r\n\r\n        address _devaddr,\r\n        address _divPoolAddress,\r\n        uint256 _slimesPerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        st = _st;\r\n\r\n        devaddr = _devaddr;\r\n        divPoolAddress = _divPoolAddress;\r\n        slimesPerBlock = _slimesPerBlock;\r\n        startBlock = _startBlock;\r\n\r\n        totalAllocPoint = 0;\r\n\r\n        fees[0] = 15;  // referral Fee (Slime) = 1.5%\r\n        fees[1] = 70;  // treasury Fee (Slime) = 7%\r\n        fees[2] = 30;  // dev Fee (Slime) = 3%\r\n        fees[3] = 30;  // treasury deposit Fee  = 3%\r\n        fees[4] = 10; // dev deposit Fee  = 1%\r\n    }\r\n\r\n    modifier validatePoolByPid(uint256 _pid) {\r\n    require (_pid \u003c poolLength(),\"Pool does not exist\");\r\n    _;\r\n    }\r\n\r\n    modifier nonDuplicated(IBEP20 token) {\r\n        require(tokenList[token] == false, \"nonDuplicated: duplicated\");\r\n        _;\r\n    }\r\n\r\n\r\n    mapping(IBEP20 =\u003e bool) public tokenList;\r\n\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate,\r\n     uint256 __lastRewardBlock,uint256 __fee) external onlyOwner nonDuplicated(_lpToken) {\r\n\r\n          // if _fee == 100 then 100% of dev and treasury fee is applied, if _fee = 50 then 50% discount, if 0 , no fee\r\n        require(__fee\u003c=100);\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 lastRewardBlock = __lastRewardBlock == 0 ? block.number \u003e startBlock ? block.number : startBlock : __lastRewardBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\r\n        tokenList[_lpToken] = true;\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accslimePerShare: 0,\r\n            fee:__fee\r\n        }));\r\n\r\n    }\r\n\r\n    // Update the given pool\u0027s SLIME allocation point. Can only be called by the owner. if update lastrewardblock, need update pools\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate,\r\n     uint256 __lastRewardBloc,uint256 __fee) external onlyOwner validatePoolByPid(_pid) {\r\n        // if _fee == 100 then 100% of dev and treasury fee is applied, if _fee = 50 then 50% discount, if 0 , no fee\r\n         require(__fee\u003c=100);\r\n\r\n         if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        if(__lastRewardBloc\u003e0)\r\n            poolInfo[_pid].lastRewardBlock = __lastRewardBloc;\r\n\r\n            poolInfo[_pid].fee = __fee;\r\n    }\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    /**\r\n     * Check if address used previus masterchef pool to avoid pay fee again\r\n     */\r\n    function isUserWhiteListed (uint256 _pid,address _address) public view returns (bool) {\r\n        if(buggyOldChef==address(0) || enableWhitelistFee==false || userDeposited[_pid][_address]==true)\r\n            return false;\r\n\r\n       (uint256 amount,uint256 rewardDebt) = BuggyOldMasterChef(buggyOldChef).userInfo(_pid, _address);\r\n        if(rewardDebt\u003e0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // View function to see pending tokens on frontend.\r\n    function pendingReward(uint256 _pid, address _user) validatePoolByPid(_pid)  external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accslimePerShare = pool.accslimePerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number \u003e pool.lastRewardBlock \u0026\u0026 lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 slimeReward = multiplier.mul(slimesPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n            accslimePerShare = accslimePerShare.add(slimeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number \u003c= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 slimeReward = multiplier.mul(slimesPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n         st.mint(address(this), slimeReward);\r\n         //treasury and dev\r\n         st.mint(divPoolAddress, slimeReward.mul(fees[1]).div(1000));\r\n         st.mint(devaddr, slimeReward.mul(fees[2]).div(1000));\r\n\r\n        pool.accslimePerShare = pool.accslimePerShare.add(slimeReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n     // Update reward variables of the given pool to be up-to-date. Internal function used for massHarvestStake for gas optimization\r\n     function internalUpdatePool(uint256 _pid) internal returns(uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number \u003c= pool.lastRewardBlock) {\r\n            return 0;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return 0;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 slimeReward = multiplier.mul(slimesPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\r\n\r\n        pool.accslimePerShare = pool.accslimePerShare.add(slimeReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n        return slimeReward;\r\n    }\r\n    /**\r\n    ** Harvest all pools where user has pending balance at same time!  Be careful of gas spending!\r\n    ** ids[] list of pools id to harvest, [0] to harvest all\r\n    ** stake if true all pending balance is staked To Stake Pool  (stakepoolId)\r\n    ** extraStake if \u003e0, desired user balance will be added to pending for stake too\r\n    **/\r\n    function massHarvestStake(uint256[] memory ids,bool stake,uint256 extraStake) external nonReentrant {\r\n        bool zeroLenght = ids.length==0;\r\n        uint256 idxlength = ids.length;\r\n\r\n        //if empty check all\r\n        if(zeroLenght)\r\n              idxlength = poolInfo.length;\r\n\r\n        uint256 totalPending = 0;\r\n        uint256 accumulatedSlimeReward = 0;\r\n\r\n          for (uint256 i = 0; i \u003c idxlength;  i++) {\r\n                   uint256 pid = zeroLenght ? i :  ids[i];\r\n                   require (pid \u003c poolLength(),\"Pool does not exist\");\r\n                    // updated updatePool to gas optimization\r\n                    accumulatedSlimeReward = accumulatedSlimeReward.add(internalUpdatePool(pid));\r\n\r\n                   PoolInfo storage pool = poolInfo[pid];\r\n                   UserInfo storage user = userInfo[pid][msg.sender];\r\n                   uint256 pending = user.amount.mul(pool.accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n                   if(pending \u003e 0) {\r\n                       totalPending = totalPending.add(pending);\r\n                    }\r\n                   user.rewardDebt = user.amount.mul(pool.accslimePerShare).div(1e12);\r\n            }\r\n\r\n            st.mint(address(this), accumulatedSlimeReward);\r\n            st.mint(divPoolAddress, accumulatedSlimeReward.mul(fees[1]).div(1000));\r\n            st.mint(devaddr, accumulatedSlimeReward.mul(fees[2]).div(1000));\r\n\r\n            if(totalPending\u003e0)\r\n            {\r\n                payRefFees(totalPending);\r\n                uint256 totalHarvested = deflacionaryHarvest(st,msg.sender,totalPending);\r\n                emit RewardPaid(msg.sender, totalPending);\r\n\r\n                if( stake \u0026\u0026 stakepoolId!=0)\r\n                {\r\n                     if(extraStake\u003e0)\r\n                      totalHarvested = totalHarvested.add(extraStake);\r\n\r\n                     internalDeposit(stakepoolId, totalHarvested);\r\n                }\r\n            }\r\n        emit MassHarvestStake(ids,stake,extraStake);\r\n    }\r\n\r\n    /**\r\n     * Avoid nonReentrant only for massHarvestStake autoStake method, removed updatePool \u0026\u0026 pending payment\r\n     *\r\n     */\r\n    function internalDeposit(uint256 _pid, uint256 _amount) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        internalUpdatePool(_pid);\r\n        \r\n        if (user.amount \u003e 0) {\r\n            uint256  pending = user.amount.mul(pool.accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n               if(pending \u003e 0) {\r\n                    payRefFees(pending);\r\n                    safeStransfer(msg.sender, pending);\r\n                    emit RewardPaid(msg.sender, pending);\r\n                }\r\n        }\r\n        if (_amount \u003e 0) {\r\n            //check for deflacionary assets\r\n            _amount = deflacionaryDeposit(pool.lpToken,_amount);\r\n\r\n           if(pool.fee \u003e 0){\r\n\r\n                uint256  treasuryfee = _amount.mul(pool.fee).mul(fees[3]).div(100000);\r\n                uint256 devfee = _amount.mul(pool.fee).mul(fees[4]).div(100000);\r\n\r\n                 if(treasuryfee\u003e0)\r\n                    pool.lpToken.safeTransfer(divPoolAddress, treasuryfee);\r\n                if(devfee\u003e0)\r\n                    pool.lpToken.safeTransfer(devaddr, devfee);\r\n\r\n                user.amount = user.amount.add(_amount).sub(treasuryfee).sub(devfee);\r\n            }else{\r\n                user.amount = user.amount.add(_amount);\r\n            }\r\n\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accslimePerShare).div(1e12);\r\n\r\n        emit InternalDeposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    /**\r\n    * Allow 3* part aplication do deposit for a user just when user (tx.origin) use them and \"tx.origin\" must be equals \"to\" for security (unauthorized actions)  , deposit amount is requested to msg.sender\r\n     */\r\n    function depositFor(uint256 _pid, uint256 _amount,address to) external nonReentrant validatePoolByPid(_pid) {\r\n        require(tx.origin==to || trustedAddress[msg.sender]);\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][to];\r\n \r\n\r\n        updatePool(_pid);\r\n\r\n        if (user.amount \u003e 0) {\r\n             uint256 pending = user.amount.mul(pool.accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n               if(pending \u003e 0) {\r\n                    payRefFees(pending);\r\n                    safeStransfer(to, pending);\r\n                    emit RewardPaid(to, pending);\r\n                }\r\n        }\r\n\r\n        if (_amount \u003e 0) {\r\n            //check for deflacionary assets\r\n            _amount = deflacionaryDeposit(pool.lpToken,_amount);\r\n\r\n           bool isWhiteListed = isUserWhiteListed(_pid, to);\r\n           if(isWhiteListed==false \u0026\u0026 pool.fee \u003e 0){\r\n\r\n                uint256  treasuryfee = _amount.mul(pool.fee).mul(fees[3]).div(100000);\r\n                uint256 devfee = _amount.mul(pool.fee).mul(fees[4]).div(100000);\r\n\r\n                 if(treasuryfee\u003e0)\r\n                    pool.lpToken.safeTransfer(divPoolAddress, treasuryfee);\r\n                if(devfee\u003e0)\r\n                    pool.lpToken.safeTransfer(devaddr, devfee);\r\n\r\n                user.amount = user.amount.add(_amount).sub(treasuryfee).sub(devfee);\r\n                userDeposited[_pid][to] = true; \r\n            }else{\r\n                user.amount = user.amount.add(_amount);\r\n            }\r\n            \r\n             \r\n\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accslimePerShare).div(1e12);\r\n\r\n        emit DepositFor(msg.sender,to, _pid, _amount);\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount,address referrer) public nonReentrant validatePoolByPid(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n \r\n        updatePool(_pid);\r\n         if (_amount\u003e0 \u0026\u0026 rewardReferral != address(0) \u0026\u0026 referrer != address(0)) {\r\n            SlimeFriends(rewardReferral).setSlimeFriend (msg.sender, referrer);\r\n        }\r\n\r\n        if (user.amount \u003e 0) {\r\n            uint256  pending = user.amount.mul(pool.accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n               if(pending \u003e 0) {\r\n                    payRefFees(pending);\r\n                    safeStransfer(msg.sender, pending);\r\n                    emit RewardPaid(msg.sender, pending);\r\n                }\r\n        }\r\n\r\n        if (_amount \u003e 0) {\r\n            //check for deflacionary assets\r\n            _amount = deflacionaryDeposit(pool.lpToken,_amount);\r\n\r\n           bool isWhiteListed = isUserWhiteListed(_pid, msg.sender);\r\n           if(isWhiteListed==false \u0026\u0026 pool.fee \u003e 0){\r\n\r\n                uint256  treasuryfee = _amount.mul(pool.fee).mul(fees[3]).div(100000);\r\n                uint256 devfee = _amount.mul(pool.fee).mul(fees[4]).div(100000);\r\n\r\n                 if(treasuryfee\u003e0)\r\n                    pool.lpToken.safeTransfer(divPoolAddress, treasuryfee);\r\n                if(devfee\u003e0)\r\n                    pool.lpToken.safeTransfer(devaddr, devfee);\r\n\r\n                user.amount = user.amount.add(_amount).sub(treasuryfee).sub(devfee);\r\n                userDeposited[_pid][msg.sender] = true;   \r\n            }else{\r\n                user.amount = user.amount.add(_amount);\r\n            }\r\n            \r\n            \r\n\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accslimePerShare).div(1e12);\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n     *  send deposit and check the final amount deposited by a user and if deflation occurs update amount\r\n     *\r\n     */\r\n    function deflacionaryDeposit(IBEP20 token ,uint256 _amount)  internal returns(uint256)\r\n    {\r\n\r\n        uint256 balanceBeforeDeposit = token.balanceOf(address(this));\r\n        token.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 balanceAfterDeposit = token.balanceOf(address(this));\r\n        _amount = balanceAfterDeposit.sub(balanceBeforeDeposit);\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     *  Pay harvest and check the final amount harvested by a user and if deflation occurs update amount * used by massHarvestStake\r\n     *\r\n     */\r\n    function deflacionaryHarvest(IBEP20 token ,address to, uint256 _amount)  internal returns(uint256)\r\n    {\r\n\r\n        uint256 balanceBeforeHarvest = token.balanceOf(to);\r\n         safeStransfer(to, _amount);\r\n        uint256 balanceAfterHarvest = token.balanceOf(to);\r\n        _amount = balanceAfterHarvest.sub(balanceBeforeHarvest);\r\n\r\n        return _amount;\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant validatePoolByPid(_pid) {\r\n\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount \u003e= _amount, \"withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n\r\n        uint256 pending = user.amount.mul(pool.accslimePerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n\r\n        if(pending \u003e 0) {\r\n            safeStransfer(msg.sender, pending);\r\n            emit RewardPaid(msg.sender, pending);\r\n        }\r\n\r\n        if(_amount \u003e 0)\r\n          {\r\n              user.amount = user.amount.sub(_amount);\r\n              pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n          }\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accslimePerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function payRefFees( uint256 pending ) internal\r\n    {\r\n        uint256 toReferral = pending.mul(fees[0]).div(1000);\r\n\r\n        address referrer = address(0);\r\n        if (rewardReferral != address(0)) {\r\n            referrer = SlimeFriends(rewardReferral).getSlimeFriend (msg.sender);\r\n\r\n        }\r\n\r\n        if (referrer != address(0)) { // send commission to referrer\r\n            st.mint(referrer, toReferral);\r\n            emit ReferralPaid(msg.sender, referrer,toReferral);\r\n        }\r\n    }\r\n\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external nonReentrant validatePoolByPid(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid,amount);\r\n\r\n    }\r\n\r\n    function changeSlimiesPerBlock(uint256 _slimesPerBlock) external onlyOwner {\r\n\r\n        emit UpdateSlimiesPerBlock(slimesPerBlock,_slimesPerBlock);\r\n        slimesPerBlock = _slimesPerBlock;\r\n    }\r\n\r\n    function safeStransfer(address _to, uint256 _amount) internal {\r\n        uint256 sbal = st.balanceOf(address(this));\r\n        if (_amount \u003e sbal) {\r\n            st.transfer(_to, sbal);\r\n        } else {\r\n            st.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n\r\n    function updateFees(uint256 _feeID, uint256 _amount) external onlyOwner{\r\n\r\n       require(_amount \u003c= MAX_FEE_ALLOWED);\r\n       fees[_feeID] = _amount;\r\n\r\n        emit UpdateFees( _feeID, _amount);\r\n    }\r\n\r\n\r\n    function updateAddresses(address _divPoolAddress,address _devaddr)  external onlyOwner  {\r\n\r\n        emit UpdateDivPoolAddress(divPoolAddress,_divPoolAddress);\r\n        divPoolAddress = _divPoolAddress;\r\n\r\n\r\n        emit UpdateDevAddress(devaddr,_devaddr);\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    function updateTrustedAddress(address _address,bool state) external onlyOwner\r\n    {\r\n        trustedAddress[_address] = state;\r\n        emit UpdateTrustedAddress(_address,state);\r\n    }\r\n\r\n     function updateEnableWhitelistFee( bool state) external onlyOwner\r\n    {\r\n        enableWhitelistFee = state;\r\n    }\r\n\r\n     function updateWhitelistChefAddress( address _chefAddress) external onlyOwner\r\n    {\r\n        buggyOldChef = _chefAddress;\r\n    }\r\n    //set what will be the stake pool\r\n    function setStakePoolId(uint256 _id)  external onlyOwner  {\r\n\r\n        emit UpdateStakePool(stakepoolId,_id);\r\n        stakepoolId = _id;\r\n    }\r\n\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n}"},"SlimeTokenV2.sol":{"content":"/**\r\n * @title SlimeToken V2\r\n */\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./IBEP20.sol\u0027;\r\nimport \u0027./BEP20Token.sol\u0027;\r\n\r\n\r\ninterface DeflationController{\r\n    function checkDeflation(address origin,address caller,address from,address recipient, uint256 amount) external view returns (uint256) ;\r\n}\r\n\r\n// SLIMEV2\r\ncontract SlimeTokenV2 is BEP20(\u0027Slime V2\u0027, \u0027SLIME\u0027) {\r\n  using SafeMath for uint256;\r\n\r\n   mapping (address =\u003e bool ) public minters;\r\n\r\n   address public deflationController;\r\n\r\n   event SetMinter(address indexed _address,bool status);\r\n   event SetDeflationController(address indexed _addresss);\r\n   event EmergencyBEP20Drain(address token , address owner, uint256 amount);\r\n\r\n   constructor() public\r\n   {\r\n     minters[owner()]= true;\r\n   }\r\n\r\n   modifier onlyMinter(address _address) {\r\n        require(minters[_address] == true, \"Slime: No minter allowed\");\r\n        _;\r\n    }\r\n\r\n    function mint(uint256 amount) public override onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n     }\r\n\r\n    function mint(address _to, uint256 _amount) public onlyMinter(msg.sender) {\r\n        _mint(_to, _amount);\r\n     }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public  override returns (bool) {\r\n         uint256 toBurn = 0;\r\n\r\n        if(address(0)!=deflationController \u0026\u0026 amount\u003e0)\r\n            toBurn = DeflationController(deflationController).checkDeflation(tx.origin,_msgSender(), _msgSender(), recipient, amount);\r\n\r\n         if(toBurn\u003e0 \u0026\u0026 toBurn\u003camount)\r\n         {\r\n             amount = amount.sub(toBurn);\r\n             _burn(_msgSender(),toBurn);\r\n         }\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n         return true;\r\n    }\r\n\r\n    function setMinter(address _address,bool status) external onlyOwner {\r\n\r\n        minters[_address] = status;\r\n        emit SetMinter(_address,status);\r\n    }\r\n\r\n    function setDeflationController(address _address ) external onlyOwner {\r\n\r\n        deflationController = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public  override returns (bool) {\r\n          uint256 toBurn = 0;\r\n\r\n         if(address(0)!=deflationController \u0026\u0026 amount\u003e0)\r\n          toBurn = DeflationController(deflationController).checkDeflation(tx.origin,_msgSender(),sender, recipient, amount);\r\n\r\n         if(toBurn\u003e0 \u0026\u0026 toBurn\u003camount)\r\n         {\r\n             amount = amount.sub(toBurn);\r\n             _burn(sender,toBurn);\r\n         }\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n             allowance(sender,_msgSender()).sub(amount, \u0027BEP20: transfer amount exceeds allowance\u0027)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // owner can drain tokens that are sent here by mistake\r\n    function emergencyBEP20Drain(BEP20 token, uint amount) external onlyOwner {\r\n        emit EmergencyBEP20Drain(address(token), owner(), amount);\r\n        token.transfer(owner(), amount);\r\n    }\r\n}\r\n"}}