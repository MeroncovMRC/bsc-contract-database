pragma solidity ^0.8.0;


contract TokenGCT {

   
    string public name;

    address public orePooladdress;

    address public platformAddress;

    address public technology;

    address public pgAddress;

    string public symbol;

    uint8 public decimals = 18;
    uint256 private fee; 
    uint256 private burnFee;
    address private burnAddress;
    uint256 public totalSupply;
    address public owne;
    address private incomeAddress;
    uint256 private rabit;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    ControlContract udstContract;
    constructor () public {
        totalSupply = 21000 * 10 ** uint256(decimals); 
        orePooladdress = 0x732596Cc153b664Ab35700e168391D452758796D;
        burnAddress = 0x0000000000000000000000000000000000000000;
        balanceOf[orePooladdress] = totalSupply; 
        name = "Genesis Classic";                             
        symbol = "GCT";  
        owne= msg.sender;        
        allowance[orePooladdress][address(this)] = totalSupply;
        udstContract = ControlContract(0x27714A1B4414a43bAbd23f47c6c41c8Fd586cB0F);
        incomeAddress = 0x638C696Fd8fE780eb36c7201b2c62cab8c2DaE17;
        rabit =3;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
             
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        uint256 burn_account =  _value*rabit/1000;
        _transfer(msg.sender, _to, _value-burn_account);
        _transfer(msg.sender, burnAddress,burn_account);
        return true;
    }


    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]); 
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;

    }
    
    function transferArray(address[] calldata _to, uint256[] calldata _value) public returns (bool success) {
        for(uint256 i = 0; i < _to.length; i++){
            _transfer(msg.sender, _to[i], _value[i]);
        }
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function _rabit(uint256 _rabit) public returns (bool success) {
        require(msg.sender == owne); 
        rabit  = _rabit;
        return true;
    }
}

contract ControlContract {
    struct Employee {
        string name;
        uint8 no;
    }
    mapping (bytes => Employee) bytesMapping;  //字节数组作为key
    mapping (address => Employee) addressMapping; // address作为key 
    mapping (string => mapping(uint => Employee)) complexMapping;  // mapping作为value，是可以的。
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    mapping (address => uint256) public tmp;
    address public owne;

    constructor() public {
        owne= msg.sender;
    }
     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]); 
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;

    }
     function _transfer(address _from, address _to, uint _value) internal {
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
             
    }
 
}



contract SwarpContract {
    struct Employee {
        string name;
        uint8 no;
    }
    mapping (bytes => Employee) bytesMapping;  //字节数组作为key
    mapping (address => Employee) addressMapping; // address作为key 
    mapping (string => mapping(uint => Employee)) complexMapping;  // mapping作为value，是可以的。
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
     mapping (address => uint256) public lockOf;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    mapping (address => uint256) public tmp;
    address public owne;
    address private gct_address;
    uint256 private rabit;
    uint256 private free_account;
    address private receipt_address;
    ControlContract udstContract;
    ControlContract glpContract;
    constructor() public {
        owne= msg.sender;
        rabit = 120;      
        free_account=3;       
    }
     function swarp(uint256 _value) public returns (bool success) {
        udstContract.transferFrom(msg.sender,receipt_address,_value);
        glpContract.transferFrom(gct_address,msg.sender,_value/rabit);
        return true;

    }

    function pledge(uint256 _value)public returns (bool success) {
       glpContract.transferFrom(msg.sender,gct_address,_value);
       lockOf[msg.sender] +=_value;
       return true;
    }

    function unlock(uint256 _value) public returns (bool success){
       require(_value <= lockOf[msg.sender]); 
       uint256 account =  _value - _value*free_account/1000;
       glpContract.transferFrom(gct_address,msg.sender,account);
       lockOf[msg.sender] = 0;
       return true;
    }
    function sysn(address usdt,address glt) public returns (bool success) {
        require(msg.sender == owne); 
        udstContract = ControlContract(usdt);
        glpContract = ControlContract(glt);
        return true;
    }
     function sysn_ybg_address(address _gct_address) public returns (bool success) {
        require(msg.sender == owne); 
        gct_address  = _gct_address;
    }
    function sysn_usdt_receipt_address(address _receipt_address) public returns (bool success) {
        require(msg.sender == owne); 
        receipt_address  = _receipt_address;
    }

    function _rabit(uint256 _rabit) public returns (bool success) {
        require(msg.sender == owne); 
        rabit  = _rabit;
        return true;
    }
   function free(uint256 _free_account) public returns (bool success) {
        require(msg.sender == owne); 
        free_account  = _free_account;
        return true;
    }
    function batchSynchLock(address[] calldata _to, uint256[] calldata _value) public returns (bool success) {
        require(msg.sender == owne); 
        for(uint256 i = 0; i < _to.length; i++){
             lockOf[ _to[i]] = _value[i] *10 ** uint256(18); 
        }
        return true;
    }
    function synchLock(address  _to, uint256  _value) public returns (bool success) {
        require(msg.sender == owne); 
        lockOf[ _to] = _value *10 ** uint256(18); 
        return true;
    }
    
}



// contract UpSwarpContract {
//     struct Employee {
//         string name;
//         uint8 no;
//     }
//     mapping (bytes => Employee) bytesMapping;  //字节数组作为key
//     mapping (address => Employee) addressMapping; // address作为key 
//     mapping (string => mapping(uint => Employee)) complexMapping;  // mapping作为value，是可以的。
//     mapping (address => uint256) public balanceOf;
//     mapping (address => mapping (address => uint256)) public allowance;
//     event Transfer(address indexed from, address indexed to, uint256 value);
//     event Burn(address indexed from, uint256 value);
//     mapping (address => uint256) public tmp;
//     address public owne;
//     address private gct_address;
//     uint256 private rabit;
//     uint256 private free_account;
//     address private receipt_address;
//     ControlContract udstContract;
//     ControlContract glpContract;
//     SwarpContract swarpContrac;
//        constructor() public {
//         owne= msg.sender;
//         rabit = 120;      
//         free_account=300000000000000000;    
//         swarpContrac = SwarpContract(0xac3FEe5202A8b1833f94987D08cFC686EB37Bae9);
        
//     }
//      function swarp(uint256 _value) public returns (bool success) {
//         udstContract.transferFrom(msg.sender,receipt_address,_value);
//         glpContract.transferFrom(gct_address,msg.sender,_value/rabit);
//         return true;

//     }

//     function pledge(uint256 _value)public returns (bool success) {
//        glpContract.transferFrom(msg.sender,gct_address,_value);
//        swarpContrac.lockOf[msg.sender] ;
//        return true;
//     }

//     function unlock(uint256 _value) public returns (bool success){
//        require(_value <= swarpContrac.lockOf[msg.sender]); 
//        glpContract.transferFrom(gct_address,msg.sender,_value-free_account);
//        require(free_account <= _value); 
//        swarpContrac.lockOf[msg.sender] -= _value;
//        return true;
//     }
//     function sysn(address usdt,address glt) public returns (bool success) {
//         require(msg.sender == owne); 
//         udstContract = ControlContract(usdt);
//         glpContract = ControlContract(glt);
//         return true;
//     }
//      function sysn_ybg_address(address _gct_address) public returns (bool success) {
//         require(msg.sender == owne); 
//         gct_address  = _gct_address;
//     }
//     function sysn_usdt_receipt_address(address _receipt_address) public returns (bool success) {
//         require(msg.sender == owne); 
//         receipt_address  = _receipt_address;
//     }

//     function _rabit(uint256 _rabit) public returns (bool success) {
//         require(msg.sender == owne); 
//         rabit  = _rabit;
//         return true;
//     }
//    function free(uint256 _free_account) public returns (bool success) {
//         require(msg.sender == owne); 
//         free_account  = _free_account;
//         return true;
//     }
    
    
// }



contract TokenKNT {

   
    string public name;

    address public orePooladdress;

    address public platformAddress;

    address public technology;

    address public pgAddress;

    string public symbol;

    uint8 public decimals = 18;
    uint256 private fee; 
    uint256 private burnFee;
    address private burnAddress;
    uint256 public totalSupply;
    address public owne;
    address private incomeAddress;
    uint256 private rabit;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    ControlContract udstContract;
    constructor () public {
        totalSupply = 2100 * 10 ** uint256(decimals); 
        orePooladdress = 0x963c8b87D298a157726DdFcf850945b73027E0dE;

        platformAddress = 0x7960aC4fEb3e26b3f93225cc185Ef0a5c49c0E7C;

        technology = 0xA61d15eD66d0Cf039A00EE87d8c7FB967058382c;

        burnAddress = 0x0000000000000000000000000000000000000000;

        balanceOf[orePooladdress] = totalSupply*80/100; 

        balanceOf[platformAddress] = totalSupply*12/100; 

        balanceOf[technology] = totalSupply*8/100; 

        burnAddress = 0x0000000000000000000000000000000000000000;
   
        name = "Kinght Journey";                             
        symbol = "KNT";  
        owne= msg.sender;        
        rabit =3;
    }

    function _transfer(address _from, address _to, uint _value) internal {
        require(balanceOf[_from] >= _value);
        require(balanceOf[_to] + _value >= balanceOf[_to]);
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
             
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        _transfer(msg.sender, _to,_value);
        return true;
    }


    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= allowance[_from][msg.sender]); 
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;

    }
    
    function transferArray(address[] calldata _to, uint256[] calldata _value) public returns (bool success) {
        for(uint256 i = 0; i < _to.length; i++){
            _transfer(msg.sender, _to[i], _value[i]);
        }
        return true;
    }
    function approve(address _spender, uint256 _value) public
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function _rabit(uint256 _rabit) public returns (bool success) {
        require(msg.sender == owne); 
        rabit  = _rabit;
        return true;
    }
}