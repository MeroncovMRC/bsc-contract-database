// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;
library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}
contract TLV {
using SafeMath for uint256;
    address private  _owner;

     constructor() {   
        _owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == _owner);
        _;
    }
   
 
  function withdraw(address payable withdrawal, uint256 amountInEth) public onlyOwner {
    uint256 amountInWei = SafeMath.mul(amountInEth, 1 ether);
    require(amountInWei > 0, "Amount must be greater than zero.");
    require(amountInWei <= address(this).balance, "Insufficient balance.");
    withdrawal.transfer(amountInWei);
}

    function invest() public payable {
    }

    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
}