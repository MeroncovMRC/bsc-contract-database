pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity ^0.8.0;


// File: @openzeppelin/contracts/ownership/Ownable.sol
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {

    using Address for address;

    address private _owner;

    mapping(address => bool) private isWhite;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    modifier isWhiteAddress() {
        if (tx.origin != msg.sender){

            require(isWhite[msg.sender], "not white");
        }
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function setWhite(address whiteAddress, bool isWhiteBool) public  onlyOwner {
        isWhite[whiteAddress] = isWhiteBool;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



pragma solidity ^0.8.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}
pragma solidity ^0.8.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

pragma solidity ^0.8.0;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

pragma solidity ^0.8.0;


interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}



pragma solidity ^0.8.0;


library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


pragma solidity ^0.8.0;



library String { 
    function equals(string memory a, string memory b)
        internal pure returns(bool) {
        
        bytes memory ba = bytes(a);
        bytes memory bb = bytes(b);
        
        uint256 la = ba.length;
        uint256 lb = bb.length;
        for (uint256 i = 0; i != la && i != lb; ++i) {
            if (ba[i] != bb[i]) {
                return false;
            }
        }
        
        return la == lb;
    }
        
    function concat(string memory a, string memory b)
        internal pure returns(string memory) {
            
        bytes memory ba = bytes(a);
        bytes memory bb = bytes(b);
        bytes memory bc = new bytes(ba.length + bb.length);
        
        uint256 bal = ba.length;
        uint256 bbl = bb.length;
        uint256 k = 0;
        
        for (uint256 i = 0; i != bal; ++i) {
            bc[k++] = ba[i];
        }
        for (uint256 i = 0; i != bbl; ++i) {
            bc[k++] = bb[i];
        }
        
        return string(bc);
    }
}

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1, "Math: mulDiv overflow");

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);
        }
    }
}



pragma solidity ^0.8.0;

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // must be unchecked in order to support `n = type(int256).min`
            return uint256(n >= 0 ? n : -n);
        }
    }
}

pragma solidity ^0.8.0;



/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `int256` to its ASCII `string` decimal representation.
     */
    function toString(int256 value) internal pure returns (string memory) {
        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(bytes(a)) == keccak256(bytes(b));
    }
}



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}



pragma solidity ^0.8.0;



/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}



pragma solidity ^0.8.0;



/**
 * @dev _Available since v3.1._
 */
interface IERC1155Receiver is IERC165 {
    /**
     * @dev Handles the receipt of a single ERC1155 token type. This function is
     * called at the end of a `safeTransferFrom` after the balance has been updated.
     *
     * NOTE: To accept the transfer, this must return
     * `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`
     * (i.e. 0xf23a6e61, or its own function selector).
     *
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param value The amount of tokens being transferred
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed
     */
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);

    /**
     * @dev Handles the receipt of a multiple ERC1155 token types. This function
     * is called at the end of a `safeBatchTransferFrom` after the balances have
     * been updated.
     *
     * NOTE: To accept the transfer(s), this must return
     * `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`
     * (i.e. 0xbc197c81, or its own function selector).
     *
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     * @param data Additional data with no specified format
     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed
     */
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    ) external returns (bytes4);
}

pragma solidity ^0.8.0;


/**
 * @dev _Available since v3.1._
 */
abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
    }
}


pragma solidity ^0.8.0;



/**
 * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.
 *
 * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be
 * stuck.
 *
 * @dev _Available since v3.1._
 */
contract ERC1155Holder is ERC1155Receiver {
    function onERC1155Received(
        address,
        address,
        uint256,
        uint256,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155Received.selector;
    }

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) public virtual override returns (bytes4) {
        return this.onERC1155BatchReceived.selector;
    }
}




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;



abstract contract IERC721{
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual;

    function getLevel(
        uint256 tokenId
    ) public virtual pure returns(uint256);
}

abstract contract IERC20{
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual;

    function balanceOf(address account) public virtual view  returns (uint256);

    function allowance(address owner, address spender) public virtual view  returns (uint256);

    function approve(address spender, uint256 amount) external virtual returns (bool);
    function transfer(address recipient, uint256 amount) external virtual returns (bool);
}
abstract contract IERC1155{
    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) public virtual;
}

contract NewTransaction is Ownable, ERC1155Holder{
    using SafeMath for uint256;
    using Address for address;

    using Strings for address;
    using String for string;

    error Erc721AddressError(address erc721Address);


    event CreateOrders(uint256 orderId, uint256 nftTokenId, address erc721Address, address seller, uint256 price, uint256 tokenType);


    event TradeOrder(uint256 orderid, uint256 sellerOrderid, uint256 nftTokenId, uint256 price, address erc721Address, uint256 fees,address seller,address buyers,uint256 tokenType);


    event CancelOrder(uint256 orderid,uint256 nftTokenId,uint256 tokenType);

   
    struct orderMsg {
        bool isUsed;
        uint256 orderId; 
        address erc721Address;
        uint256 nftTokenId;
        uint256 price;
        uint256 createTime;
        address seller; 
        uint256 tokenType;
    }


    struct tradeOrdersMsg {
        uint256 tradeOrderId;
        uint256 nftTokenId;
        address erc721Address;
        uint256 price;
        uint256 fees;
        uint256 tradeTime; 
        address seller;
        address buyers;
        uint256 tokenType;
    }

    address public technicalOperationAddress;

    address public level3Address; 

    address public level4Address;

    address public level5Address; 

    uint256 public technicalOperationFeeMolecule; 
    uint256 public level3FeeMolecule;
    uint256 public level4FeeMolecule; 
    uint256 public level5FeeMolecule; 

    address public LFTAddress;
    function setLFTAddress(address _LFTAddress)public onlyOwner isWhiteAddress{
        LFTAddress = _LFTAddress;
    }

    address public USDTAddress;

    function setUSDTAddress(address _USDTAddress) public onlyOwner isWhiteAddress{
        USDTAddress = _USDTAddress;
    }

    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public isShareOutBonus;

    address public GSDAddress;

    function setShareOutBonus(bool _isShareOutBonus) public onlyOwner isWhiteAddress{
        isShareOutBonus = _isShareOutBonus;
    }

    function shareOutBonus() public onlyOwner isWhiteAddress{
        
        uint256 totalFeeMolecule = technicalOperationFeeMolecule.add(level3FeeMolecule).add(level4FeeMolecule).add(level5FeeMolecule);

        uint256 GSDAmount = IERC20(GSDAddress).balanceOf(address(this));
        require(GSDAmount > 0, "not have GSDAmount");

        uint256 beforeUSDTAmount = IERC20(USDTAddress).balanceOf(address(this));
        swapTokensForExactTokens(GSDAddress, USDTAddress, GSDAmount);
        uint256 laterUSDTAmount = IERC20(USDTAddress).balanceOf(address(this));
        require(laterUSDTAmount > beforeUSDTAmount,"swap usdt error");
        uint256 usdtFee = laterUSDTAmount.sub(beforeUSDTAmount);

        uint256 beforeLFTAmount = IERC20(LFTAddress).balanceOf(address(this));
        swapTokensForExactTokens(USDTAddress, LFTAddress, usdtFee);
        uint256 laterLFTAmount = IERC20(USDTAddress).balanceOf(address(this));
        require(laterLFTAmount > beforeLFTAmount,"swap lft error");
        uint256 totalFee = laterLFTAmount.sub(beforeLFTAmount);
        
        IERC20(LFTAddress).transfer(technicalOperationAddress, totalFee.mul(technicalOperationFeeMolecule).div(totalFeeMolecule));
        IERC20(LFTAddress).transfer(level3Address, totalFee.mul(level3FeeMolecule).div(totalFeeMolecule));
        IERC20(LFTAddress).transfer(level4Address, totalFee.mul(level4FeeMolecule).div(totalFeeMolecule));
        IERC20(LFTAddress).transfer(level5Address, totalFee.mul(level5FeeMolecule).div(totalFeeMolecule));
    }


    function swapTokensForExactTokens(address token0, address token1, uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = token1;

        IERC20(token0).approve(
            router,
            tokenAmount
        );
        IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }


    function takeOrder(
        uint256 sellOrderId 
    ) external isWhiteAddress  returns (uint256 tradeOrderId){
        orderMsg memory order = allOrderMsgList[sellOrderId];

        require(order.isUsed, "Not Exists Order!");
        require(order.seller != msg.sender, "Buy user error");
        
        require(order.price <= IERC20(GSDAddress).balanceOf(msg.sender) && order.price <= IERC20(GSDAddress).allowance(msg.sender,address(this)), "Insufficient amount");

        uint256 totalFeeMolecule = technicalOperationFeeMolecule.add(level3FeeMolecule).add(level4FeeMolecule).add(level5FeeMolecule);

        tradeOrderId = order.orderId;
        tradeOrdersMsg memory fOrder;
        fOrder.tradeOrderId = tradeOrderId;
        fOrder.nftTokenId = order.nftTokenId;
        fOrder.erc721Address = order.erc721Address;
        fOrder.price = order.price;
        fOrder.fees = order.price.mul(totalFeeMolecule).div(feeDenominator);
        fOrder.tradeTime = block.timestamp;
        fOrder.seller = order.seller;
        fOrder.buyers = msg.sender;
        fOrder.tokenType = order.tokenType;

        allTradeOrdersMsgList.push(fOrder);

        userOr721AddressOrderMapping[msg.sender].tradeOrdersMsgList.push(fOrder);
        userOr721AddressOrderMapping[order.seller].tradeOrdersMsgList.push(fOrder);


        IERC20(GSDAddress).transferFrom(msg.sender, address(this), order.price);
        if (isShareOutBonus) {
            uint256 beforeUSDTAmount = IERC20(USDTAddress).balanceOf(address(this));

            swapTokensForExactTokens(GSDAddress, USDTAddress, fOrder.fees);
            uint256 laterUSDTAmount = IERC20(USDTAddress).balanceOf(address(this));
            require(laterUSDTAmount > beforeUSDTAmount,"swap usdt error");
            uint256 usdtFee = laterUSDTAmount.sub(beforeUSDTAmount);

            uint256 beforeLFTAmount = IERC20(LFTAddress).balanceOf(address(this));
            swapTokensForExactTokens(USDTAddress, LFTAddress, usdtFee);
            uint256 laterLFTAmount = IERC20(LFTAddress).balanceOf(address(this));
            require(laterLFTAmount > beforeLFTAmount,"swap lft error");
            uint256 totalFee = laterLFTAmount.sub(beforeLFTAmount);
        
            IERC20(LFTAddress).transfer(technicalOperationAddress, totalFee.mul(technicalOperationFeeMolecule).div(totalFeeMolecule));
            IERC20(LFTAddress).transfer(level3Address, totalFee.mul(level3FeeMolecule).div(totalFeeMolecule));
            IERC20(LFTAddress).transfer(level4Address, totalFee.mul(level4FeeMolecule).div(totalFeeMolecule));
            IERC20(LFTAddress).transfer(level5Address, totalFee.mul(level5FeeMolecule).div(totalFeeMolecule));
        }
        
        
        IERC20(GSDAddress).transfer(order.seller, order.price.sub(fOrder.fees));


        if(order.tokenType == 6) {
            IERC1155(order.erc721Address).safeTransferFrom(address(this), msg.sender, 1, 1, "0x0");
        }else {
            IERC721(order.erc721Address).transferFrom(
                address(this),
                msg.sender,
                order.nftTokenId
            );
        }

        emit TradeOrder(
            tradeOrderId,
            sellOrderId,
            order.nftTokenId,
            order.price,
            order.erc721Address,
            fOrder.fees,
            order.seller,
            msg.sender,
            order.tokenType
        );

        deleteThisSellerOrder(sellOrderId);
    }



    constructor(
        address _GSDAddress,
        address _landAddress,
        address _soilAddress,
        address _tribalMedalAddress,
        address _technicalOperationAddress,
        address _level3Address,
        address _level4Address,
        address _level5Address,
        uint256 _technicalOperationFeeMolecule,
        uint256 _level3FeeMolecule,
        uint256 _level4FeeMolecule,
        uint256 _level5FeeMolecule
    ){
        technicalOperationAddress = _technicalOperationAddress;
        level3Address = _level3Address;
        level4Address = _level4Address;
        level5Address = _level5Address;
        GSDAddress = _GSDAddress;
        landAddress = _landAddress;
        soilAddress = _soilAddress;
        tribalMedalAddress = _tribalMedalAddress;
        technicalOperationFeeMolecule = _technicalOperationFeeMolecule;
        level3FeeMolecule = _level3FeeMolecule;
        level4FeeMolecule = _level4FeeMolecule;
        level5FeeMolecule = _level5FeeMolecule;
        isShareOutBonus = false;
    }


    function setFeeMolecule(
        address _technicalOperationAddress, 
        address _level3Address, 
        address _level4Address, 
        address _level5Address,
        uint256 _technicalOperationFeeMolecule,
        uint256 _level3FeeMolecule,
        uint256 _level4FeeMolecule,
        uint256 _level5FeeMolecule
        ) public onlyOwner isWhiteAddress{
        technicalOperationAddress = _technicalOperationAddress;
        level3Address = _level3Address;
        level4Address = _level4Address;
        level5Address = _level5Address;
        technicalOperationFeeMolecule = _technicalOperationFeeMolecule;
        level3FeeMolecule = _level3FeeMolecule;
        level4FeeMolecule = _level4FeeMolecule;
        level5FeeMolecule = _level5FeeMolecule;
    }



    address public landAddress;

    address public soilAddress;

    address public tribalMedalAddress; 

    uint256 private constant feeDenominator = 10000;



    struct allOrderMsg{
        orderMsg[] orderMsgList;
        tradeOrdersMsg[] tradeOrdersMsgList;
        uint256[5] tokenLevels;
    }

    orderMsg[] allOrderMsgList;

    tradeOrdersMsg[] allTradeOrdersMsgList;

    uint256[5] fixedArray = [0, 0, 0, 0, 0];

    struct indexToIndex{
        mapping(uint256 => uint256) indexMapping;
    }


    mapping(address => allOrderMsg) userOr721AddressOrderMapping;


    mapping(address => indexToIndex) addressToIndexMapping;


    function getAllOrderCountByUserAddress(address userAddress) public view returns (uint256[5] memory){
        
        if(userOr721AddressOrderMapping[userAddress].orderMsgList.length > 0) {
            return userOr721AddressOrderMapping[userAddress].tokenLevels;
        }
        return fixedArray;
    }



    function cancelOrder(uint256 orderId) isWhiteAddress external {
        orderMsg memory order = allOrderMsgList[orderId];
        require(order.seller == msg.sender, "invalid order");
        require(order.isUsed, "invalid order");

        if(order.tokenType == 6) {
            IERC1155(order.erc721Address).safeTransferFrom(address(this), msg.sender, 1, 1, "0x0");
        }else {
            IERC721(order.erc721Address).transferFrom(
                address(this),
                msg.sender,
                order.nftTokenId
            );
        }

        emit CancelOrder(orderId, order.nftTokenId, getTokenTypeByErc721Address(order.erc721Address, order.nftTokenId));

        deleteThisSellerOrder(orderId);
    }


    function createOrder(
        uint256 nftTokenId,
        uint256 price,
        address erc721Address
    ) external isWhiteAddress{
        require(price > 0,"Price must be greater than 0");
        uint256 tokenType = getTokenTypeByErc721Address(erc721Address, nftTokenId);
        if(tokenType == 6) {
            IERC1155(erc721Address).safeTransferFrom(msg.sender, address(this), 1, 1, "0x0");
        }else {
            IERC721(erc721Address).transferFrom(
                msg.sender,
                address(this),
                nftTokenId);
        }
        if (userOr721AddressOrderMapping[msg.sender].orderMsgList.length == 0){
            userOr721AddressOrderMapping[msg.sender].tokenLevels = [0,0,0,0,0];
        }
        uint256 orderId = allOrderMsgList.length;
        orderMsg memory thisOrderMsg;
        thisOrderMsg.isUsed = true;
        thisOrderMsg.orderId = orderId;
        thisOrderMsg.erc721Address = erc721Address;
        thisOrderMsg.nftTokenId = nftTokenId;
        thisOrderMsg.price = price;
        thisOrderMsg.createTime = block.timestamp;
        thisOrderMsg.seller = msg.sender;
        thisOrderMsg.tokenType = tokenType;

        emit CreateOrders(
            orderId,
            nftTokenId,
            erc721Address,
            msg.sender,
            price,
            3
        );


        allOrderMsgList.push(thisOrderMsg);


        userOr721AddressOrderMapping[msg.sender].orderMsgList.push(thisOrderMsg);
        if (tokenType < 6){
            userOr721AddressOrderMapping[msg.sender].tokenLevels[tokenType.sub(1)] = userOr721AddressOrderMapping[msg.sender].tokenLevels[tokenType.sub(1)].add(1);
        }

        addressToIndexMapping[msg.sender].indexMapping[orderId] = userOr721AddressOrderMapping[msg.sender].orderMsgList.length.sub(1);

        userOr721AddressOrderMapping[erc721Address].orderMsgList.push(thisOrderMsg);

        addressToIndexMapping[erc721Address].indexMapping[orderId] = userOr721AddressOrderMapping[erc721Address].orderMsgList.length.sub(1);

    }





    function getTokenTypeByErc721Address(address erc721Address, uint256 tokenId) public view returns (uint256) {
        if (erc721Address == landAddress) {

            return IERC721(erc721Address).getLevel(tokenId);
        } else if (erc721Address == soilAddress) {

            return 6;
        } else if (erc721Address == tribalMedalAddress) {

            return 7;
        } else {
            revert Erc721AddressError(erc721Address);
        }
    }


    function deleteThisSellerOrder(uint256 deleteOrderId) internal {
        require(deleteOrderId < allOrderMsgList.length,"orderId error");
        orderMsg storage thisorderMsg = allOrderMsgList[deleteOrderId];
        thisorderMsg.isUsed = false;

        address userAddress = thisorderMsg.seller;

        orderMsg[] storage thisUserOrderMsgList = userOr721AddressOrderMapping[userAddress].orderMsgList;
        if (thisorderMsg.tokenType < 6) {

            uint256[5] storage thisUserTokenLevels = userOr721AddressOrderMapping[userAddress].tokenLevels;
            thisUserTokenLevels[thisorderMsg.tokenType.sub(1)] = thisUserTokenLevels[thisorderMsg.tokenType.sub(1)].sub(1);
        }

        mapping(uint256 => uint256) storage thisUserIndexMapping = addressToIndexMapping[userAddress].indexMapping;

        thisUserIndexMapping[thisUserOrderMsgList[thisUserOrderMsgList.length.sub(1)].orderId] = thisUserIndexMapping[deleteOrderId];

        thisUserOrderMsgList[thisUserIndexMapping[deleteOrderId]] = thisUserOrderMsgList[thisUserOrderMsgList.length.sub(1)];
        

        thisUserOrderMsgList.pop();


        address erc721Address = thisorderMsg.erc721Address;

        orderMsg[] storage this721OrderMsgList = userOr721AddressOrderMapping[erc721Address].orderMsgList;

        mapping(uint256 => uint256) storage this721IndexMapping = addressToIndexMapping[erc721Address].indexMapping;
 
        this721IndexMapping[this721OrderMsgList[this721OrderMsgList.length.sub(1)].orderId] = this721IndexMapping[deleteOrderId];
        this721OrderMsgList[this721IndexMapping[deleteOrderId]] = this721OrderMsgList[this721OrderMsgList.length.sub(1)];
        this721OrderMsgList.pop();
        

    }


    function getAllTradeOrderByUserAddress(address userAddress) public view returns (tradeOrdersMsg[] memory){
        return userOr721AddressOrderMapping[userAddress].tradeOrdersMsgList;
    }


    function getAllSellOrderMsgByErc721Address(address erc721Address)public view returns (orderMsg[] memory){
         return userOr721AddressOrderMapping[erc721Address].orderMsgList;
    }
    

    function getAllSellOrderMsgByUserAddress(address userAddress)public view returns (orderMsg[] memory){
        return userOr721AddressOrderMapping[userAddress].orderMsgList;
    }

    


    function setGSDAddress(address _GSDAddress) public onlyOwner isWhiteAddress{
        GSDAddress = _GSDAddress;
    }


    function setLandAddress(address _landAddress) public onlyOwner isWhiteAddress{
        landAddress = _landAddress;
    }


    function setSoilAddress(address _soilAddress) public onlyOwner isWhiteAddress{
        soilAddress = _soilAddress;
    }


    function setTribalMedalAddress(address _tribalMedalAddress) public onlyOwner isWhiteAddress{
        tribalMedalAddress = _tribalMedalAddress;
    }

    
}