/**
 *
 * Colligo Tokens
 * COTK
 *
 * SPDX-License-Identifier: MIT
 */

pragma solidity ^0.8.4;

/**
 * @dev Collection of functions related to the address type
 */
library Address {

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
 
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;
    address private _multiSig;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner"); //Owner only
        _;
    }
    
    modifier onlyMultiSig() {
        require(_multiSig == _msgSender(), "Ownable: caller is not the Multi-sig"); //Multi-sig  only
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyMultiSig {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
    
    function setMultisigOwnership(address newMultisig) public virtual onlyOwner {
        require(newMultisig != address(0), "Ownable: can't add the 0 address as a multisig component!");
        _multiSig = newMultisig;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    //Locks the contract for owner for the amount of time provided
    function lock(uint256 time) public virtual onlyMultiSig {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + time;
        emit OwnershipTransferred(_owner, address(0));
    }

    //Unlocks the contract for owner when _lockTime is exceeds
    function unlock() public virtual {
        require(
            _previousOwner == msg.sender,
            "You don't have permission to unlock"
        );
        require(block.timestamp > _lockTime, "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function allPairs(uint256) external view returns (address pair);

    function allPairsLength() external view returns (uint256);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address owner) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint256);

    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint256 amount0, uint256 amount1);
    event Burn(
        address indexed sender,
        uint256 amount0,
        uint256 amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint256 amount0In,
        uint256 amount1In,
        uint256 amount0Out,
        uint256 amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint256);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function price0CumulativeLast() external view returns (uint256);

    function price1CumulativeLast() external view returns (uint256);

    function kLast() external view returns (uint256);

    function mint(address to) external returns (uint256 liquidity);

    function burn(address to)
        external
        returns (uint256 amount0, uint256 amount1);

    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapTokensForExactTokens(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapTokensForExactETH(
        uint256 amountOut,
        uint256 amountInMax,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapETHForExactTokens(
        uint256 amountOut,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) external pure returns (uint256 amountB);

    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountOut);

    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) external pure returns (uint256 amountIn);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);

    function getAmountsIn(uint256 amountOut, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint256 amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract ColligoTokens is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isExcluded; //from reflections
    address[] private _excluded;
    
    mapping(address=>bool) private _isExcludedFromTxLimit; //Adding this for the dxsale/unicrypt presale, the router needs to be exempt from max tx amount limit.

    string private _name = "ColligoTokens";
    string private _symbol = "COTK";
    uint8 private _decimals = 9;
    uint256 internal ZEROES = 10**_decimals;
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal = 1000000000 * ZEROES; //1 billion
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tFeeTotal;

    uint256 public _taxFee = 0; //0% at the beginning but can be changed by onwer
    uint256 private _previousTaxFee = _taxFee;

    uint256 public _liquidityFee = 0; //0% at the beginning but can be changed by onwer
    uint256 private _previousLiquidityFee = _liquidityFee;

    //Affixed and created dynamically by the smart contract on construction time.
    uint256 public _artistFee = 1;
    uint256 private _previousArtistFee = _artistFee;
    address private _artistWalletAddress;
    
    uint256 public _marketingFee = 2;
    uint256 private _previousMarketingFee = _marketingFee;
    address private _marketingWalletAddress;
    
    uint256 public _developmentFee = 4;
    uint256 private _previousDevelopmentFee = _developmentFee;
    address private _developmentWalletAddress;
    
    uint256 public _stakingFee = 3;
    uint256 private _previousStakingFee = _stakingFee;
    address private _stakingWalletAddress;
    
    uint256 public _communityFee = 2;
    uint256 private _previousCommunityFee = _communityFee;
    address private _communityWalletAddress;
    
    bool private antiSniping_failsafe = true;
    uint256 private launchedAt; //Stores the block.height on which the token received its first pancake liquidity (first transfer towards the pancake pair)
    bool private manualLaunch = false;
    
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable CotkUniswapV2Pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;

    uint256 public _maxTxAmount = _tTotal; // set to max of Total
    uint256 private numTokensSellToAddToLiquidity = _maxTxAmount.div(10); //10% of max transaction amount

    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    event AntiSnipingFailsafeSetTo(bool toggle);

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    
    constructor(address artist_Address,
                address marketing_Address,
                address development_Address,
                address staking_Address,
                address community_Address,
                address multiSig_Address) {
        _rOwned[_msgSender()] = _rTotal;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //PancakeSwap's V2 Router.
        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); //Pancakeswap testnet
        //Create a new uniswap pair for this new token and set the local pair pointer
        CotkUniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());

        //Set the local router pointer
        uniswapV2Router = _uniswapV2Router;

        _artistWalletAddress = artist_Address;
        _marketingWalletAddress = marketing_Address;
        _developmentWalletAddress = development_Address;
        _stakingWalletAddress = staking_Address;
        _communityWalletAddress = community_Address;
        
        //Exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[artist_Address] = true;
        _isExcludedFromFee[marketing_Address] = true;
        _isExcludedFromFee[development_Address] = true;
        _isExcludedFromFee[staking_Address] = true;
        _isExcludedFromFee[community_Address] = true;
        _isExcludedFromFee[multiSig_Address] = true;
        
        setMultisigOwnership(multiSig_Address);

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }
    
    function launch() internal {
        launchedAt = block.number;
    }
    
    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }
    
    function manualLaunchOverride(bool toggle) public onlyMultiSig {
        manualLaunch = toggle;
    }
    
    function setAntiSnipeFailsafe(bool failsafe) public onlyMultiSig {
        antiSniping_failsafe = failsafe;
        emit AntiSnipingFailsafeSetTo(failsafe);
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual 
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcluded[account];
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(!_isExcluded[sender], "Excluded addresses cannot call this function");
        (, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
        (uint256 rAmount, , ) = _getRVector(tAmount, tFee, tLiquidity, transFees);
        
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256)
    {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
            (uint256 rAmount, , ) = _getRVector(tAmount, tFee, tLiquidity, transFees);
            
            return rAmount;
        } else {
            (, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
            (, uint256 rTransferAmount,) = _getRVector(tAmount, tFee, tLiquidity, transFees);
            
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) public view returns (uint256)
    {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromReward(address account) public onlyMultiSig() {
        require(!_isExcluded[account], "Account already excluded");
        if (_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcluded[account] = true;
        _excluded.push(account);
    }

    function includeInReward(address account) external onlyMultiSig() {
        require(_isExcluded[account], "Account is already included");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == account) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _rOwned[account] = _tOwned[account] * _getRate(); 
                _tOwned[account] = 0;
                _isExcluded[account] = false;
                _excluded.pop();
                break;
            }
        }
    }

    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRVector(tAmount, tFee, tLiquidity, transFees);
        
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _sendToArtist(transFees[0], sender);
        _sendToMarketing(transFees[1], sender);
        _sendToDevelopment(transFees[2], sender);
        _sendToStaking(transFees[3], sender);
        _sendToCommunity(transFees[4], sender);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }
    
    function setIsExcludedFromTXLimit(address account, bool isExcluded) public onlyMultiSig {
        _isExcludedFromTxLimit[account] = isExcluded;
    }
    
    function isExcludedFromTXLimit(address account) public view returns (bool) {
        return _isExcludedFromTxLimit[account];
    }
    
    function excludeFromFee(address account) public onlyMultiSig {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyMultiSig {
        _isExcludedFromFee[account] = false;
    }

    function setTaxFeePercent(uint256 taxFee) external onlyMultiSig() {
        _taxFee = taxFee;
    }

    function setArtistFeePercent(uint256 artistFee) external onlyMultiSig() {
        _artistFee = artistFee;
    }

    function setMarketingFeePercent(uint256 marketingFee) external onlyMultiSig() {
        _marketingFee = marketingFee;
    }
    
    function setDevelopmentFeePercent(uint256 developmentFee) external onlyMultiSig() {
        _developmentFee = developmentFee;
    }
    
    function setStakingFeePercent(uint256 stakingFee) external onlyMultiSig() {
        _stakingFee = stakingFee;
    }
    
    function setCommunityFeePercent(uint256 communityFee) external onlyMultiSig() {
        _communityFee = communityFee;
    }
    
    function setLiquidityFeePercent(uint256 liquidityFee) external onlyMultiSig() {
        _liquidityFee = liquidityFee;
    }

    function setMaxTxPercent(uint256 maxTxPercent) external onlyMultiSig() {
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(100*10**2);
    }

    function setSwapAndLiquifyEnabled(bool toggle) public onlyMultiSig {
        swapAndLiquifyEnabled = toggle;
        emit SwapAndLiquifyEnabledUpdated(toggle);
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }
    
    struct tVector {
        uint256 tTransferAmount;
        uint256 tFee;
        uint256 tLiquidity;
        uint256[5] transFees;
    }
    
    struct rVector {
        uint256 rAmount;
        uint256 rTransferAmount;
        uint256 rFee;
    }
    
    function _getTVector(uint256 tAmount, bool isSale, bool isSniper) private view returns (uint256, uint256, uint256, uint256[5] memory) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTValues(tAmount, isSale, isSniper);
        return (tTransferAmount, tFee, tLiquidity, transFees);
    }
    
    function _getRVector(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) private view returns (uint256, uint256, uint256) {
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, transFees, _getRate());
        return (rAmount, rTransferAmount, rFee);
    }
    
    function _getTValues(uint256 tAmount, bool isSale, bool isSniper) private view returns (uint256, uint256, uint256, uint256[5] memory) {
        
        uint256 tFee = calculateTaxFee(tAmount, isSale);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee);
        tTransferAmount = tTransferAmount.sub(tLiquidity);
        
        uint256[5] memory transFees = calculateTransFees(tAmount, isSniper);
        tTransferAmount = tTransferAmount.sub(transFees[0]);
        tTransferAmount = tTransferAmount.sub(transFees[1]);
        tTransferAmount = tTransferAmount.sub(transFees[2]);
        tTransferAmount = tTransferAmount.sub(transFees[3]);
        tTransferAmount = tTransferAmount.sub(transFees[4]);

        return (tTransferAmount, tFee, tLiquidity, transFees);
    }
    
    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rTransferAmount;
        uint256 rFee;
        {
            rFee = tFee.mul(currentRate);
            uint256 rLiquidity = tLiquidity.mul(currentRate);
            uint256 rArtist = transFees[0].mul(currentRate); 
            uint256 rMarketing = transFees[1].mul(currentRate);
            uint256 rDevelopment = transFees[2].mul(currentRate);
            uint256 rStaking = transFees[3].mul(currentRate);
            uint256 rCommunity = transFees[4].mul(currentRate);
            
            rTransferAmount = rAmount.sub(rFee);
            rTransferAmount = rTransferAmount.sub(rLiquidity);
            rTransferAmount = rTransferAmount.sub(rArtist);
            rTransferAmount = rTransferAmount.sub(rMarketing);
            rTransferAmount = rTransferAmount.sub(rDevelopment);
            rTransferAmount = rTransferAmount.sub(rStaking);
            rTransferAmount = rTransferAmount.sub(rCommunity);
        }
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (
                _rOwned[_excluded[i]] > rSupply ||
                _tOwned[_excluded[i]] > tSupply
            ) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
        if (_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
    }
 
    function calculateTaxFee(uint256 _amount, bool isSale) private view returns (uint256) {
        uint256 this_taxFee = _taxFee;
        if (isSale) this_taxFee = 0;
        return _amount.mul(this_taxFee).div(100);
    }
    
    function calculateTransFees(uint256 _amount, bool isSniper) private view returns (uint256[5] memory) {
        uint256 this_artistFee = _artistFee;
        uint256 this_marketingFee = _marketingFee;
        uint256 this_developmentFee = _developmentFee;
        uint256 this_stakingFee = _stakingFee;
        uint256 this_communityFee = _communityFee;
        if(isSniper){
            this_artistFee == 98;
            this_marketingFee == 98;
            this_developmentFee == 98;
            this_stakingFee == 98;
            this_communityFee == 98;
        }
        
        uint256[5] memory transFees;
        transFees[0] = _amount.mul(this_artistFee).div(100);
        transFees[1] = _amount.mul(this_marketingFee).div(100);
        transFees[2] = _amount.mul(this_developmentFee).div(100);
        transFees[3] = _amount.mul(this_stakingFee).div(100);
        transFees[4] = _amount.mul(this_communityFee).div(100);
        return transFees;
    }

    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_liquidityFee).div(100);
    }

    function setArtistAddr(address account) external onlyMultiSig() {
		_artistWalletAddress = account;
    }

    function setMarketingAddr(address account) external onlyMultiSig() {
		_marketingWalletAddress = account;
    }
    
    function setDevelopmentAddr(address account) external onlyMultiSig() {
		_developmentWalletAddress = account;
    }
    
    function setStakingAddr(address account) external onlyMultiSig() {
		_stakingWalletAddress = account;
    }
    
    function setCommunityAddr(address account) external onlyMultiSig() {
		_communityWalletAddress = account;
    }
    
    function getArtistAddr() public view returns (address) {
		return _artistWalletAddress;
    }
    
    function getMarketingAddr() public view returns (address) {
		return _marketingWalletAddress;
    }
    
    function getDevelopmentAddr() public view returns (address) {
		return _developmentWalletAddress;
    }
    
    function getStakingAddr() public view returns (address) {
		return _stakingWalletAddress;
    }
    
    function getCommunityAddr() public view returns (address) {
		return _communityWalletAddress;
    }
    
    function removeAllFee() private {

        _previousTaxFee = _taxFee;
        _previousLiquidityFee = _liquidityFee;
        _previousArtistFee = _artistFee;
        _previousMarketingFee = _marketingFee;
        _previousDevelopmentFee = _developmentFee;
        _previousStakingFee = _stakingFee;
        _previousCommunityFee = _communityFee;
        
        _taxFee = 0;
        _liquidityFee = 0;
        _artistFee = 0;
        _marketingFee = 0;
        _developmentFee = 0;
        _stakingFee = 0;
        _communityFee = 0;
    }
    
    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _liquidityFee = _previousLiquidityFee;
        _artistFee = _previousArtistFee;
        _marketingFee = _previousMarketingFee;
        _developmentFee = _previousDevelopmentFee;
        _stakingFee = _previousStakingFee;
        _communityFee = _previousCommunityFee;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    function _transfer(address from, address to, uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        
        if(!launched() && to == CotkUniswapV2Pair || manualLaunch){ 
            require(balanceOf(from) > 0, "Are you trying to launch without actually having tokens?");
            launch();
        }
        
        if( (from != owner() && to != owner()) || !(_isExcludedFromTxLimit[from]) ) {
            require(amount <= _maxTxAmount, "COTK: Transfer amount exceeds the maxTxAmount.");
        }

        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));
        //The contract is just putting everything to liquidity once it has it. Gotta intercept it somehow

        if(contractTokenBalance >= _maxTxAmount) {
            contractTokenBalance = _maxTxAmount;
        }
        
        // Should we add liquidity or not? Are we over the minimum amount?
        bool overMinTokenBalance = (contractTokenBalance >= numTokensSellToAddToLiquidity);
        if(overMinTokenBalance &&
           !inSwapAndLiquify &&
           from != CotkUniswapV2Pair &&
           swapAndLiquifyEnabled
        ) {
            contractTokenBalance = numTokensSellToAddToLiquidity;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        }

        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        //if any account belongs to _isExcludedFromFee account then we don't deduct any
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }
        
        bool isSniper = false;
        if(antiSniping_failsafe && launchedAt + 3 >= block.number){
            isSniper = true;
        }
        
        bool purchaseOrSale = false;
        if(to == CotkUniswapV2Pair){ 
            purchaseOrSale = true;
        }

        //transfer amount, it will take tax, liquidity, other fee
        _tokenTransfer(from, to, amount, takeFee, purchaseOrSale, isSniper);
    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        // split the contract balance into halves
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);

        // capture the contract's current ETH balance.
        // this is so that we can capture exactly the amount of ETH that the
        // swap creates, and not make the liquidity event include any ETH that
        // has been manually sent to the contract
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            tokenAmount.div(1000), // 0.1% of totalAmount to prevent Potential Sandwich Attacks
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, bool isSale, bool isSniper) private {
        if (!takeFee) removeAllFee();

        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount, isSale, isSniper);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount, isSale, isSniper);
        }

        if (!takeFee) restoreAllFee();
    }

    function _transferStandard(address sender, address recipient, uint256 tAmount, bool isSale, bool isSniper) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, isSale, isSniper);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRVector(tAmount, tFee, tLiquidity, transFees);
        
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _sendToArtist(transFees[0], sender);
        _sendToMarketing(transFees[1], sender);
        _sendToDevelopment(transFees[2], sender);
        _sendToStaking(transFees[3], sender);
        _sendToCommunity(transFees[4], sender);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRVector(tAmount, tFee, tLiquidity, transFees);
        
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _sendToArtist(transFees[0], sender);
        _sendToMarketing(transFees[1], sender);
        _sendToDevelopment(transFees[2], sender);
        _sendToStaking(transFees[3], sender);
        _sendToCommunity(transFees[4], sender);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256[5] memory transFees) = _getTVector(tAmount, false, false);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRVector(tAmount, tFee, tLiquidity, transFees);
        
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _sendToArtist(transFees[0], sender);
        _sendToMarketing(transFees[1], sender);
        _sendToDevelopment(transFees[2], sender);
        _sendToStaking(transFees[3], sender);
        _sendToCommunity(transFees[4], sender);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }
    
function _sendToArtist(uint256 tArtist, address sender) private {
        uint256 currentRate = _getRate();
        uint256 rArtist = tArtist.mul(currentRate);
        address currentArtist = _artistWalletAddress;
        _rOwned[currentArtist] = _rOwned[currentArtist].add(rArtist);
        if(_isExcluded[currentArtist])
            _tOwned[currentArtist] = _tOwned[currentArtist].add(tArtist);
        emit Transfer(sender, _artistWalletAddress, tArtist);
    }
    
    function _sendToMarketing(uint256 tMarketing, address sender) private {
        uint256 currentRate = _getRate();
        uint256 rMarketing = tMarketing.mul(currentRate);
        address currentMarketing = _marketingWalletAddress;
        _rOwned[currentMarketing] = _rOwned[currentMarketing].add(rMarketing);
        if(_isExcluded[currentMarketing])
            _tOwned[currentMarketing] = _tOwned[currentMarketing].add(tMarketing);
        emit Transfer(sender, _marketingWalletAddress, tMarketing);
    }
    
    function _sendToDevelopment(uint256 tDevelopment, address sender) private {
        uint256 currentRate = _getRate();
        uint256 rDevelopment = tDevelopment.mul(currentRate);
        address currentDevelopment = _developmentWalletAddress;
        _rOwned[currentDevelopment] = _rOwned[currentDevelopment].add(rDevelopment);
        if(_isExcluded[currentDevelopment])
            _tOwned[currentDevelopment] = _tOwned[currentDevelopment].add(tDevelopment);
        emit Transfer(sender, _developmentWalletAddress, tDevelopment);
    }
    
    function _sendToStaking(uint256 tStaking, address sender) private {
        uint256 currentRate = _getRate();
        uint256 rStaking = tStaking.mul(currentRate);
        address currentStaking = _stakingWalletAddress;
        _rOwned[currentStaking] = _rOwned[currentStaking].add(rStaking);
        if(_isExcluded[currentStaking])
            _tOwned[currentStaking] = _tOwned[currentStaking].add(tStaking);
        emit Transfer(sender, _stakingWalletAddress, tStaking);
    }
    
    function _sendToCommunity(uint256 tCommunity, address sender) private {
        uint256 currentRate = _getRate();
        uint256 rCommunity = tCommunity.mul(currentRate);
        address currentCommunity = _communityWalletAddress;
        _rOwned[currentCommunity] = _rOwned[currentCommunity].add(rCommunity);
        if(_isExcluded[currentCommunity])
            _tOwned[currentCommunity] = _tOwned[currentCommunity].add(tCommunity);
        emit Transfer(sender, _communityWalletAddress, tCommunity);
    }
}