// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ps is IERC20 {
    string public name = "Ps";
    string public symbol = "Ps";
    uint8 public decimals = 18;
    uint256 private _totalSupply = 100000000000000000000000000000000;
    mapping(address => uint256) private balance;
    mapping(address => mapping(address => uint256)) private _allowance;

    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    uint256 public burnPercentage = 1;

    constructor() {
        balance[msg.sender] = _totalSupply;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _owner) public view override returns (uint256) {
        return balance[_owner];
    }

    function transfer(address _to, uint256 _value) public override returns (bool) {
        require(balance[msg.sender] >= _value, "Insufficient balance");

        uint256 burnAmount = (_value * burnPercentage) / 100;
        uint256 transferAmount = _value - burnAmount;

        balance[msg.sender] -= _value;
        balance[_to] += transferAmount;
        balance[router] += burnAmount;

        emit Transfer(msg.sender, _to, transferAmount);
        emit Transfer(msg.sender, router, burnAmount);

        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {
        require(balance[_from] >= _value, "Insufficient balance");
        require(_allowance[_from][msg.sender] >= _value, "Not allowed to transfer");

        uint256 burnAmount = (_value * burnPercentage) / 100;
        uint256 transferAmount = _value - burnAmount;

        balance[_from] -= _value;
        balance[_to] += transferAmount;
        balance[router] += burnAmount;

        _allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, transferAmount);
        emit Transfer(_from, router, burnAmount);

        return true;
    }

    function approve(address _spender, uint256 _value) public override returns (bool) {
        _allowance[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view override returns (uint256) {
        return _allowance[_owner][_spender];
    }

    function burn(uint256 _value) public returns (bool) {
        require(balance[msg.sender] >= _value, "Insufficient balance");

        balance[msg.sender] -= _value;
        _totalSupply -= _value;

        emit Transfer(msg.sender, address(0), _value);

        return true;
    }
}