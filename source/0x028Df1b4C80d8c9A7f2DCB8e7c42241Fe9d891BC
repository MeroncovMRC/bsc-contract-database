{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\nimport \"./Context.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./IBEP20Metadata.sol\";\r\n\r\ncontract ERC20 is Context, IBEP20, IBEP20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTransfer(from, to, amount);\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        _afterTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function _beforeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"},"IBEP20.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\ninterface IBEP20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}"},"IBEP20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\nimport \"./IBEP20.sol\";\r\n\r\ninterface IBEP20Metadata is IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\nimport \"./Context.sol\";\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }    \r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"SafeMath.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"TokenDeploy.sol":{"content":"// SPDX-License-Identifier: MIT\r\n/**\r\n* Submitted for verification at BscScan.com on 2023-04-03\r\n* SEAHOLDINGS Sharing Economy Alliance\r\n* Website: https://www.seaclub.asia\r\n*/\r\npragma solidity ^0.8.15;\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract SeaToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 public tokenReceive;\r\n    event TokenLocked(address indexed account, uint256 amount);\r\n    event TokenUnlocked(address indexed account, uint256 amount);\r\n    event TransfersEnabled(bool newStatus);\r\n    event AuthorizeRoleAssigned(address authorizeRole);            \r\n    mapping(address =\u003e uint256) public lockedBalanceOf;\r\n    mapping(address =\u003e uint256) public userLockTimeLastUpdated;    \r\n    mapping(address =\u003e uint256) public countLockTransOfUser;\r\n    address public authorizeRole;\r\n    bool public transfersEnabled;\r\n    uint256 public oneDollar = 1000000000000000000; // 1 Dollar\r\n    uint256 public maxLimit = 1000000 * 10 ** 18;\r\n    uint256 public minLimit = 60 * 10 ** 18;\r\n    uint256 public percentLimit;\r\n    uint256 public secondOfDay;\r\n    uint256 public percentCal;\r\n    constructor() ERC20(\"Sharing Economy Alliance \", \"SEA\") {\r\n        _mint(msg.sender, 72000000 * 10 ** decimals());\r\n        secondOfDay = 24*60*60;\r\n        percentCal = 2;\r\n        percentLimit = percentCal * 10 ** 15;\r\n        tokenReceive = ERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n    modifier transfersAllowed {\r\n        require(transfersEnabled, \"Transfers not available\");\r\n        _;\r\n    }\r\n    modifier onlyAuthorized {\r\n        require(_msgSender() == owner() || _msgSender() == authorizeRole, \"Not authorized\");\r\n        _;\r\n    }\r\n    function getBalanceOfReceive(address _address) public view returns(uint256) {\r\n        uint256 amount = tokenReceive.balanceOf(_address);\r\n        return amount;\r\n    }\r\n    function currentBalanceBNB(address _contractAddress) public view returns (uint) {\r\n        return address(_contractAddress).balance;\r\n    }\r\n    function setContractReceive(address _contractAddress) public onlyAuthorized returns (bool) {\r\n        tokenReceive = ERC20(_contractAddress);\r\n        return true;\r\n    }\r\n    function setPercentLimit(uint256 _value) public onlyAuthorized returns (bool) {\r\n        require(_value \u003e 0, \"Input value do not match\");\r\n        percentLimit = _value;\r\n        return true;\r\n    }\r\n    function unlockPercentOfUser(address _wallet) public onlyAuthorized {\r\n        uint256 percentReceive = lockedBalanceOf[_wallet].mul(percentCal).div(1000);\r\n        require(lockedBalanceOf[_wallet] \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet] \u003e= percentReceive, \"Not enough unlocked token balance\");\r\n        if(block.timestamp - userLockTimeLastUpdated[_wallet] \u003e= secondOfDay) {\r\n            if (lockedBalanceOf[_wallet] \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet] \u003c= percentLimit) {\r\n                lockedBalanceOf[_wallet] = lockedBalanceOf[_wallet].sub(lockedBalanceOf[_wallet]);\r\n                userLockTimeLastUpdated[_wallet] = userLockTimeLastUpdated[_wallet] = block.timestamp;\r\n                countLockTransOfUser[_wallet] = countLockTransOfUser[_wallet].add(1);\r\n                emit TokenUnlocked(_wallet, lockedBalanceOf[_wallet]);\r\n            } else if (percentReceive \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet] \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet] \u003e= percentReceive) {\r\n                lockedBalanceOf[_wallet] = lockedBalanceOf[_wallet].sub(percentReceive);\r\n                userLockTimeLastUpdated[_wallet] = userLockTimeLastUpdated[_wallet] = block.timestamp;\r\n                countLockTransOfUser[_wallet] = countLockTransOfUser[_wallet].add(1);\r\n                emit TokenUnlocked(_wallet, percentReceive);\r\n            }\r\n        }\r\n    }\r\n    function unlockPercentDailys(address[] memory _wallet) public onlyAuthorized {\r\n        require(_wallet.length \u003e 0, \"Input lengths do not match\");\r\n        for (uint256 i = 0; i \u003c _wallet.length; i++) {\r\n            uint256 percentReceive = lockedBalanceOf[_wallet[i]].mul(percentCal).div(1000);\r\n            if (lockedBalanceOf[_wallet[i]] \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet[i]] \u003c= percentLimit) {\r\n                lockedBalanceOf[_wallet[i]] = lockedBalanceOf[_wallet[i]].sub(lockedBalanceOf[_wallet[i]]);\r\n                userLockTimeLastUpdated[_wallet[i]] = userLockTimeLastUpdated[_wallet[i]] = block.timestamp;\r\n                countLockTransOfUser[_wallet[i]] = countLockTransOfUser[_wallet[i]].add(1);\r\n                emit TokenUnlocked(_wallet[i], lockedBalanceOf[_wallet[i]]);\r\n            } else if (percentReceive \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet[i]] \u003e 0 \u0026\u0026 lockedBalanceOf[_wallet[i]] \u003e= percentReceive) {\r\n                lockedBalanceOf[_wallet[i]] = lockedBalanceOf[_wallet[i]].sub(percentReceive);\r\n                userLockTimeLastUpdated[_wallet[i]] = userLockTimeLastUpdated[_wallet[i]] = block.timestamp;\r\n                countLockTransOfUser[_wallet[i]] = countLockTransOfUser[_wallet[i]].add(1);\r\n                emit TokenUnlocked(_wallet[i], percentReceive);\r\n            }            \r\n        }\r\n    }\r\n    function timetemp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n    function unlockedBalanceOf(address account) public view returns (uint256) {\r\n        return balanceOf(account).sub(lockedBalanceOf[account]);\r\n    }\r\n    function unlockAmountOfUser(address accounts, uint256 amount) public onlyAuthorized returns (bool) {\r\n        if (lockedBalanceOf[accounts] \u003e= amount) {\r\n            lockedBalanceOf[accounts] = lockedBalanceOf[accounts].sub(amount);\r\n            emit TokenUnlocked(accounts, amount);\r\n        }\r\n        return true;\r\n    }\r\n    function unlockAmountOfUsers(address[] memory accounts, uint256 [] memory amounts) public onlyAuthorized returns (bool) {\r\n        require(accounts.length == amounts.length, \"Input lengths do not match\");\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            if (lockedBalanceOf[accounts[i]] \u003e= amounts[i]) {\r\n                lockedBalanceOf[accounts[i]] = lockedBalanceOf[accounts[i]].sub(amounts[i]);\r\n                emit TokenUnlocked(accounts[i], amounts[i]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function withdraw(address accounts) public onlyAuthorized returns (bool) {\r\n        uint256 amount = lockedBalanceOf[accounts];\r\n        if (lockedBalanceOf[accounts] \u003e 0) {\r\n            lockedBalanceOf[accounts] = lockedBalanceOf[accounts].sub(amount);\r\n            emit TokenUnlocked(accounts, amount);\r\n        }\r\n        return true;\r\n    }\r\n    function withdraws(address[] memory accounts) public onlyAuthorized returns (bool) {\r\n        require(accounts.length \u003e 0, \"Input lengths do not match\");\r\n        for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n            uint256 amount = lockedBalanceOf[accounts[i]];\r\n            if (lockedBalanceOf[accounts[i]] \u003e 0) {\r\n                lockedBalanceOf[accounts[i]] = lockedBalanceOf[accounts[i]].sub(amount);\r\n                emit TokenUnlocked(accounts[i], amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        require(unlockedBalanceOf(_msgSender()) \u003e= amount, \"Not enough unlocked token balance\");\r\n        return super.transfer(to, amount);\r\n    }\r\n    function transfers(\r\n        address[] memory recipients,\r\n        uint256[] memory values\r\n    ) public transfersAllowed returns (bool) {\r\n        require(recipients.length == values.length, \"Input lengths do not match\");\r\n        for (uint256 i = 0; i \u003c recipients.length; i++) {\r\n            require(values[i] \u003e 0 \u0026\u0026 unlockedBalanceOf(recipients[i]) \u003e= values[i], \"Not enough unlocked token balance\");\r\n            transfer(recipients[i], values[i]);\r\n        }\r\n        return true;\r\n    }\r\n    function transferLock(address recipient, uint256 amount) public onlyAuthorized returns (bool) {\r\n        require(amount \u003e 0 \u0026\u0026 unlockedBalanceOf(_msgSender()) \u003e= amount, \"Not enough unlocked token balance\");\r\n        super.transfer(recipient, amount);\r\n        lockedBalanceOf[recipient] = lockedBalanceOf[recipient].add(amount);\r\n        emit TokenLocked(recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from,\r\n        address to,\r\n        uint256 amount) public returns (bool) {\r\n        require(amount \u003e 0 \u0026\u0026 unlockedBalanceOf(from) \u003e= amount, \"Not enough unlocked token balance of sender\");\r\n        return transferFrom(from, to, amount);\r\n    }\r\n    function setSecondOfDay(uint256 _value) public onlyAuthorized {\r\n        secondOfDay = _value;\r\n    }\r\n    function setPercentCal(uint256 _value) public onlyAuthorized {\r\n        require(_value \u003e 0, \"Input value do not match\");\r\n        percentCal = _value;\r\n        percentLimit = _value * 10 ** 15;\r\n    }\r\n}"}}