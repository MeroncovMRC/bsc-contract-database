
// File: /home/fabio/Projetos/new_truffle/contracts/Beta.sol
// contracts/SimpleToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


/**
 * @title Beta.Fork
 */
contract Beta is IERC20 {


    mapping (address => Holder) private _holders;
    
    struct Holder { 
       uint256 date;
       uint256 balance;
       uint tier;
       bool is_sc;
       bool in_array;
    }

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 _tiers_percentage   = 8000;
    uint256 _reserve_percentage = 2000;
    uint256 _fee                = 200;
    
    
    uint256 public collected_fee;
    uint256 public total_collected_fee;
    address private reserve_address;
    
    address[] private holders_list;
    address[] private tmp;
   
   
   struct Tier {
    
        string name;
        uint256 min_days;
        uint256 min_deposit;
        uint256 accumulated;
        uint256 percentage;
        address[] members;
        
   }
   
   struct Owner {
       bool active;
   }
   
   mapping(uint256 => Tier) public tiers;
   
   mapping(address => Owner) private owners;
   
    modifier onlyOwner(){
        require(
            owners[msg.sender].active,
            "Not authorized."
        );
        _;
    }


    uint256 constant private _totalSupply = 10000000 ether;
    string constant private _name = "Beta.Fork";
    string constant private _symbol = "BETAF";
    uint8 constant private _decimals = 18;


    constructor() {

        _holders[msg.sender].balance = _totalSupply;
        emit Transfer(address(this), msg.sender, _totalSupply);
        owners[msg.sender].active = true;
        
        reserve_address = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;
        _holders[reserve_address].is_sc = true;
        _holders[msg.sender].is_sc = true;

        tiers[0].name = "Silver";
        tiers[0].min_days = 0;
        tiers[0].min_deposit = 0;
        tiers[0].percentage  = 500;
    
        tiers[1].name = "Gold";
        tiers[1].min_days = 5 days;
        tiers[1].min_deposit = 15000 ether;
        tiers[1].percentage  = 1500;
        
        tiers[2].name = "Platinum";
        tiers[2].min_days = 10 days;
        tiers[2].min_deposit = 25000 ether;
        tiers[2].percentage  = 2500;
        
        tiers[3].name = "Diamond";
        tiers[3].min_days = 15 days;
        tiers[3].min_deposit = 55000 ether;
        tiers[3].percentage  = 5500;

    }


    function add_holders_list(address addr) internal {
       
       if(!_holders[addr].in_array && !_holders[addr].is_sc){
           
           holders_list.push(addr);
           _holders[addr].in_array = true;
           
       }
       
    }
    
    
    function update_holders_list() internal {
       
        delete tmp;
       
        for(uint256 i = 0; i < holders_list.length; i++){
           
            if(_holders[holders_list[i]].balance > 0 && !_holders[holders_list[i]].is_sc){
               
               tmp.push(holders_list[i]);
               
            }
           
        }
       
        holders_list = tmp;
       
    }
    
    
    

    function addOwner(address addr) public onlyOwner {
       
       owners[addr].active = true;
       
    }
   
   function removeOwner(address addr) public onlyOwner {
       
        delete owners[addr];
        
    }
    
    function excludeAddress(address addr, bool active) public onlyOwner {
       
        _holders[addr].is_sc = active;
        
    }

    function setReserveAddress(address addr) public onlyOwner {
       
        reserve_address = addr;
        
    }
    
    function setFee(uint256 fee) public onlyOwner {
       
        _fee = fee;
        
    }
    
    function setTiersPercentage(uint256 fee) public onlyOwner {
       
        _tiers_percentage = fee;
        
    }
    
    function setReservePercentage(uint256 fee) public onlyOwner {
       
        _reserve_percentage = fee;
        
    }
    
    function setTiersDist(uint256 tier, uint256 dist) public onlyOwner {
        
        tiers[tier].percentage  = dist;

    }
    
    function setTiersDeposit(uint256 tier, uint256 deposit) public onlyOwner {
        
        tiers[tier].min_deposit  = deposit;

    }
    
    
    function setTiersDays(uint256 tier, uint256 d) public onlyOwner {
        
        tiers[tier].min_days  = d;

    }
    
    function setTiersName(uint256 tier, string calldata nme) public onlyOwner {
        
        tiers[tier].name  = nme;

    }
    

    function check_tier(uint256 date, uint256 balance) internal view returns(uint256){
       
        uint256 actual = block.timestamp;
        
        uint256 tier;
    
    
        for(uint i = 0; i <= 3; i++){
            
            if((date + tiers[i].min_days <= actual) && (balance >= tiers[i].min_deposit)){
                
                tier = i;
                
            }
            
        }
       
       return tier;
       
    }
    
    
    function tierCount(uint256 tier) public view returns(uint256){
       
       return tiers[tier].members.length;
       
    }
    
    function holderTier(address addr) public view returns(uint256, string memory){
       
       return (_holders[addr].tier, tiers[_holders[addr].tier].name);
       
    }

    function tierName(uint256 tier) public view returns(string memory){
       
       return tiers[tier].name;
       
    }
    
    
    function balance_tier(uint256 amount) internal view returns(uint256){
       
        uint256 tier;
    
        for(uint i = 0; i <= 3; i++){
            
            if(amount >= tiers[i].min_deposit){
                
                tier = i;
                
            }
            
        }
       
       return tier;
       
    }
    
    function give_tiers() public onlyOwner{
        
        //REMOVE 0 BALANCES AND SC ADDRESSES
        update_holders_list();
        
        
        //RESET MEMBERS FROM TIERS
        for(uint i = 0; i <= 3; i++){
            
            delete tiers[i].members;
            
        }
        
        
        for(uint i = 0; i < holders_list.length; i++){
            
            uint256 tier = check_tier(_holders[holders_list[i]].date, _holders[holders_list[i]].balance);
            _holders[holders_list[i]].tier = tier;
            tiers[tier].members.push(holders_list[i]);
            
        }
        
    }
    
    function fee_calc(uint256 ammount) internal view returns(uint256, uint256){
        
        uint256 fee_ammount        = ammount * _fee / 10000;
        uint256 result             = ammount - fee_ammount;
        
        return (fee_ammount, result);
        
    }
   
    
    function update_data(address addr, uint256 balance_before, uint256 balance_after) internal{
        
       
        
        if(_holders[addr].date == 0){
            
            _holders[addr].date = block.timestamp;
            tiers[0].members.push(addr);
            
        } else {
            
            
             uint256 tier_before = balance_tier(balance_before);
             uint256 tier_after  = balance_tier(balance_after);
             
             if(tier_after > tier_before){
                 
                _holders[addr].date = block.timestamp;
                 
             } else if(tier_after < tier_before){
                 
                _holders[addr].date = block.timestamp;
                
             }
            
        }
        
        
    }
    
    function rewards_calc(uint256 amount) internal view returns(uint256, uint256, uint256, uint256, uint256){
        
        uint256 tiers_amount      = amount * _tiers_percentage / 10000;
        uint256 reserve_amount    = amount * _reserve_percentage / 10000;
        
        
        uint256 tier_0  = tiers_amount * tiers[0].percentage / 10000;
        uint256 tier_1  = tiers_amount * tiers[1].percentage / 10000;
        uint256 tier_2  = tiers_amount * tiers[2].percentage / 10000;
        uint256 tier_3  = tiers_amount * tiers[3].percentage / 10000;
        
        return (tier_0, tier_1, tier_2, tier_3, reserve_amount);
        
    }
    
    
    function rewards_dist() public onlyOwner{
     
        
        (uint256 tier_0, uint256 tier_1, uint256 tier_2, uint256 tier_3, uint256 reserve) = rewards_calc(collected_fee);
        
        
        
                
        tiers[0].accumulated += tier_0;
        tiers[1].accumulated += tier_1;
        tiers[2].accumulated += tier_2;
        tiers[3].accumulated += tier_3;
        
        
        for(uint i = 0; i <= 3; i++){
            
            if(tiers[i].members.length > 0 && tiers[i].accumulated > 0){
                
                uint256 amount_to_dist = tiers[i].accumulated / tiers[i].members.length;

                for(uint e = 0; e < tiers[i].members.length; e++){
                    
                    _holders[tiers[i].members[e]].balance += amount_to_dist;
                    emit Transfer(address(this), tiers[i].members[e], amount_to_dist);
                    
                    
                }
                
                tiers[i].accumulated = 0;
            }
            
        }
        
        
        _holders[reserve_address].balance += reserve;
        emit Transfer(address(this), reserve_address, reserve);
        
        
        collected_fee = 0;
        
    }
    
    
    
    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5,05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overloaded;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }



    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external override pure returns (uint256){
        
        return _totalSupply;

    }

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external override view returns (uint256){

        return _holders[account].balance;

    }

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external override returns (bool){

        _transfer(msg.sender, recipient, amount);
        return true;

    }


    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external override view returns (uint256){

        return _allowances[owner][spender];

    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external override returns (bool){

        _approve(msg.sender, spender, amount);
        return true;

    }



    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){

        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);

        return true;

    }


    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        

        uint256 senderBalance = _holders[sender].balance;
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        
        (uint256 fee, uint256 new_ammount) = fee_calc(amount);
        collected_fee += fee;
        total_collected_fee += fee;
        
        add_holders_list(sender);
        add_holders_list(recipient);
        
        update_data(sender, senderBalance, (senderBalance - amount));
        update_data(recipient, _holders[recipient].balance, (_holders[recipient].balance + new_ammount));
        
        _holders[sender].balance = senderBalance - amount;
        _holders[recipient].balance += new_ammount;
       
        emit Transfer(sender, recipient, amount);

    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }




}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

