/**
 *Submitted for verification at BscScan.com on 2023-05-15
*/

/**
 *Submitted for verification at BscScan.com on 2023-03-28
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract BindParent is Ownable {
    address public creator = 0x3EeFACD62b898b8dDB4F9DaBe6b47AdE399EFa1a;
    mapping(address => address) public parentMap;
    mapping(address => address[]) public childsMap;
    function getParent(address _user) public view returns (address){
        return parentMap[_user];
    }
    function getChilds(address _user) public view returns (address[] memory){
        return childsMap[_user];
    }
    function bindParent(address _parent) public {
        require(msg.sender != creator,"cannot be creator");
        require(parentMap[msg.sender] == address(0),"has bind");
        require(_parent == creator || parentMap[_parent] != address(0),"parent is invalid");
        parentMap[msg.sender] = _parent;
        childsMap[_parent].push(msg.sender);
    }
}