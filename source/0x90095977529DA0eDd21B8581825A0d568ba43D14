
// File: /contracts/Vesting3.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";
import "../utils/IBEP20.sol";

contract Vesting3 is Ownable {

  // The token being vested
  IBEP20 public token;
  
  // Address where LTT tokens are located (with allowance to contract)
  address public immutable tokenWallet;

  // Vesting time
  uint256 public immutable startTime;
  uint256 public constant cliff = 90 days; //time before first release

  //Vesting release parameters are per thousand to avoid rounding errors and are assumed as not /1000
  uint public constant immediateReleasePercentage = 200;
  uint public constant gradualReleasePercentage = 100;
  uint256 public constant gradualReleasePeriod = 30 days;
  uint public constant nVestingPhases = 8;

  // Total tokens for this vesting is 5% of the tokens cap
  uint256 public constant totalTokensVesting = 2000000000 * 0.05 * 10**9;
  uint256 public totalTokensDelivered = 0;
  uint256 public totalTokensToDeliver = 0;

  struct Allocation {
    uint256 amountBought;
    uint256 amountClaimed;
    uint256 phaseClaimed;
    bool immediateReleaseClaimed;
  }

  mapping (address => Allocation) public Allocations;
  uint public totalAllocations;

  /**
   * @dev Creates the first Vesting, from the selected start time and token. 
   * The wallet selected as tokenWallet should have enough funds to fulfill this vesting period.
   */
  constructor(IBEP20 _token, uint256 _startTime, address _tokenWallet, address _owner) {
    token = _token;
    startTime = _startTime;
    tokenWallet = _tokenWallet;
    _transferOwnership(_owner);
  }

  
  /**
   * @dev Calculate the amount to be given to a certain recipient. This function do not withdraw funds.
   */
  function getVestedAmount(address _recipient) public view returns(uint phasesVested, uint256 amountVested) {
    Allocation storage recipientAllocation = Allocations[_recipient];
    require(recipientAllocation.amountClaimed < recipientAllocation.amountBought, "Allocation fully claimed");
    uint256 endOfCliff = startTime + cliff;
    if (block.timestamp < endOfCliff) {
      return (0, 0);
    }

    uint currentVestingPhase = 1 + (block.timestamp - endOfCliff) / gradualReleasePeriod;

    if(currentVestingPhase >= nVestingPhases) {
      uint256 remainingAllocation = recipientAllocation.amountBought - recipientAllocation.amountClaimed;
      if(!recipientAllocation.immediateReleaseClaimed){
         remainingAllocation -= (recipientAllocation.amountBought * immediateReleasePercentage / 1000);
      }
      return (nVestingPhases, remainingAllocation);
    }

    phasesVested = currentVestingPhase - recipientAllocation.phaseClaimed;
    amountVested = (phasesVested * recipientAllocation.amountBought * gradualReleasePercentage / 1000);
  }

  /**
   * @dev Get allocation details from a given recipient.
   */
  function getAllocationDetails(address _recipient) external view returns(Allocation memory) {
    return Allocations[_recipient];
  }

  /**
   * @dev Add new users in the vesting. 
   * This contract need to have enough allowance in a wallet (preferably multisignature) to fullfill the previous + this amount vested. 
   */
  function addAllocation(address _recipient, uint256 _amount) external onlyOwner {
    _addAllocation(_recipient, _amount);
    totalAllocations += 1;
  }

  /**
   * @dev Batch function to add new users in the vesting. 
   * This contract need to have enough allowance in a wallet (preferably multisignature) to fullfill the previous + this amount vested. 
   */
  function addMultipleAllocations(address[] calldata _recipients, uint256[] calldata _amounts) external onlyOwner {
    require(_recipients.length == _amounts.length, "Invalid input lengths");
    uint256 totalAmount = 0;
    for (uint i = 0; i < _recipients.length; i++) {
      totalAmount += _amounts[i];
      _addAllocation(_recipients[i], _amounts[i]);
    }
    totalAllocations += _recipients.length;
  }
  
  /**
   * @dev Release the vested tokens in the vesting to the caller according to the time period.
   */
  function releaseVestedTokens() external {
    _releaseVestedTokens(msg.sender);
  }

  /**
   * @dev Batch function to release the vested tokens in the vesting to the selected recipients according to the time period.
   */
  function batchReleaseVestedTokens(address[] calldata _recipients) external {
    for (uint i = 0; i < _recipients.length; i++) {
      _releaseVestedTokens(_recipients[i]);
    }
  }

  /**
   * @dev Release all the immediate tokens in the vesting to the caller.
   */
  function releaseImmediateTokens() external {
    _releaseImmediateTokens(msg.sender);
  }
  
  /**
   * @dev Batch function to release all the immediate tokens in the vesting to the selected recipients.
   */
  function batchImmediateReleaseTokens(address[] calldata _recipients) external {
    for (uint i = 0; i < _recipients.length; i++) {
      _releaseImmediateTokens(_recipients[i]);
    }
  }

  /**
   * @dev Add new users in the vesting. 
   * This contract need to have enough allowance in a wallet (preferably multisignature) to fullfill the previous + this amount vested. 
   */
  function transferAllocation(address _oldRecipient, address _newRecipient) external onlyOwner {
    _transferAllocation(_oldRecipient, _newRecipient);
    totalAllocations += 1;
  }

  /**
   * @dev Create a new allocation of the given amount to the selected recipient in this vesting.
   */
  function _addAllocation(address _recipient, uint256 _amount) internal {
    require(Allocations[_recipient].amountBought == 0, "Allocation for this recipient already exists");
    require(_amount >= nVestingPhases, "Amount too low (less than 1 token per vesting period)");
    require(totalTokensToDeliver + _amount <= totalTokensVesting, "This vesting period arrived to the total token capacity.");

    Allocation memory allocation = Allocation({
    amountBought: _amount,
    amountClaimed: 0,
    phaseClaimed: 0,
    immediateReleaseClaimed: false
    });
    Allocations[_recipient] = allocation;
    
    totalTokensToDeliver+=_amount;
  }

  /**
   * @dev Transfer an allocation to a new address in case of wallet loss.
   */
  function _transferAllocation(address _oldRecipient, address _newRecipient) internal {
    require(Allocations[_newRecipient].amountBought == 0, "Allocation for the new recipient already exists");
    require(Allocations[_oldRecipient].amountBought > Allocations[_oldRecipient].amountClaimed, "All tokens have already been claimed for this allocation.");
    Allocation memory allocation = Allocation({
    amountBought: Allocations[_oldRecipient].amountBought,
    amountClaimed: Allocations[_oldRecipient].amountClaimed,
    phaseClaimed: Allocations[_oldRecipient].phaseClaimed,
    immediateReleaseClaimed: Allocations[_oldRecipient].immediateReleaseClaimed
    });
    Allocations[_newRecipient] = allocation;
    
    Allocations[_oldRecipient].amountClaimed = Allocations[_oldRecipient].amountBought;
    Allocations[_oldRecipient].immediateReleaseClaimed = true;
    Allocations[_oldRecipient].phaseClaimed = nVestingPhases;
  }
  
  /**
   * @dev Release the vested delivery amount of tokens in this vesting period sending from allowance wallet to recipient.
   */
  function _releaseVestedTokens(address _recipient) internal {
    (uint phasesVested, uint256 amountVested) = getVestedAmount(_recipient);
    require(amountVested > 0, "Vested amount is 0");

    Allocation storage recipientAllocation = Allocations[_recipient];
    recipientAllocation.phaseClaimed = recipientAllocation.phaseClaimed + phasesVested;
    recipientAllocation.amountClaimed = recipientAllocation.amountClaimed + amountVested;

    _deliverTokens(_recipient, amountVested);
  }
  
  /**
   * @dev Release the immediate delivery amount of tokens sending from allowance wallet to recipient.
   */
  function _releaseImmediateTokens(address _recipient) internal {
    Allocation storage recipientAllocation = Allocations[_recipient];
    require(immediateReleasePercentage > 0, "No immediate release available in this vesting");
    require(recipientAllocation.amountBought > 0, "No tokens vested.");
    require(recipientAllocation.immediateReleaseClaimed == false, "Immediate release tokens already claimed");

    uint256 amountImmediateRelease = recipientAllocation.amountBought * immediateReleasePercentage / 1000;
    recipientAllocation.amountClaimed = recipientAllocation.amountClaimed + amountImmediateRelease;
    recipientAllocation.immediateReleaseClaimed = true;
    _deliverTokens(_recipient,amountImmediateRelease);
  }

  /**
   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.
   * @param _beneficiary Address performing the token purchase
   * @param _tokenAmount Number of tokens to be emitted
   */
  function _deliverTokens(
    address _beneficiary,
    uint256 _tokenAmount
  )
    internal
  {
    require(_tokenAmount>0, "Amount of tokens to deliver is equal or lower than 0");
    totalTokensDelivered+=_tokenAmount;
    token.transferFrom(tokenWallet,_beneficiary, _tokenAmount);
  }
}


// File: /utils/IBEP20.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

