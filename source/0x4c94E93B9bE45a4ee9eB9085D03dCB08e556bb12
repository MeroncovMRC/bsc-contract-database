
// File: NostaToken.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "Ownable.sol";
import "ERC20.sol";
import "Pausable.sol";
import "IPancakeRouter02.sol";
import "IPancakeV2Pair.sol";
import "IPancakeV2Factory.sol";


/**
 * @title NostaToken.
 */
contract NostaToken is ERC20, Ownable, Pausable {


    // Defining tax variables
    uint256 public partnerNum;   // parner tax that should be sent as BUSD in percentage
    uint256 public liquidityNum;     // percentage to add to liquidity
    uint256 public burnNum;          // percentage to burn
    uint256 public stakingWalletNum; // percentage to put aside for staking rewards
    uint256 public teamWalletNum;    // percentage to send to team wallet
    uint256 public algoWalletNum;    // percentage to send to algo wallet when relevant
    uint256 constant public MAX_TAX = 1500; // maximum allowed tax
    uint256 constant public DENOMINATOR = 10_000;

    mapping(address => bool) public whitelist;
    mapping(address => bool) public blocklist;  // accounts frozen that cannot transfer nor receive tokens
    mapping(address => bool) public partners;   // true if address has been enrolled as a partner
    mapping(address => address) public affiliatedWith;  // mapping addresses to their partners
    mapping(address => uint256) public numAffiliatesPerPartner; // how many affiliates each partner has

    address public teamWallet;
    address public algoWallet;
    address public stakingWallet;
    address public partnerWallet;

    // Variables pertaining to the slippage tolerance
    uint256 public slippageToleranceNum = 1_000_000; // initially disabled
    address public mainLP;  // this LP pair is considered to be the main source of liquidity
    mapping(address => bool) public LPs;   // sending to these addresses is considered a token sale
    uint256 private constant FLOAT_PRECISION = 100_000;
    uint256 private constant SLIPPAGE_TOLERANCE_DENOMINATOR = 1_000_000;

    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;

    IPancakeRouter02 public router;  // router where the token is listed and has most of its BUSD liquidity

    constructor (uint256 _totalSupply,
                address _router,
                address _teamWallet,
                address _algoWallet,
                address _stakingWallet,
                address _partnerWallet) ERC20("Nosta - https://t.me/nostatoken", "NOSTA") isValidTax {
        setRouter(_router);
        setTeamWallet(_teamWallet);
        setAlgoWallet(_algoWallet);
        setStakingWallet(_stakingWallet);
        setPartnerWallet(_partnerWallet);
        _mint(msg.sender, _totalSupply);
        addToWhitelist(msg.sender);
        addToWhitelist(address(this));
    }

    receive() external payable {
    }

    // check that the combination of all the taxes is valid
    modifier isValidTax{
        _;
        require(currentMaxTax() <= MAX_TAX, "tax is too high");
    }

    function zeroAllTaxes() external onlyOwner {
        partnerNum = 0;
        burnNum = 0;
        liquidityNum = 0;
        stakingWalletNum = 0;
        teamWalletNum = 0;
        algoWalletNum = 0;
    }

    function setAllTaxes(uint256 _partnerNum, uint256 _burnNum, uint256 _liquidityNum,
            uint256 _stakingWalletNum, uint256 _teamWalletNum,
            uint256 _algoWalletNum) external isValidTax onlyOwner {
       partnerNum = _partnerNum;
       burnNum = _burnNum;
       liquidityNum = _liquidityNum;
       stakingWalletNum = _stakingWalletNum;
       teamWalletNum = _teamWalletNum;
       algoWalletNum = _algoWalletNum;
    }

    // Register a partner address
    function addPartner(address partner) onlyOwner external {
        require(!partners[partner], "already a partner");
        partners[partner] = true;
    }

    // Removes a partner address. Accounts already affiliated with it
    // will not be removed.
    function removePartner(address partner) onlyOwner external {
        require(partners[partner], "not a partner");
        partners[partner] = false;
    }

    // Registers a new affiliate with a partner
    function addAffiliate(address partner) external {
        require(partners[partner], "not a partner");
        require(affiliatedWith[msg.sender] == address(0), "already affiliated with a partner");
        affiliatedWith[msg.sender] = partner;
        numAffiliatesPerPartner[partner] += 1;
    }

    // allow owner to add an affiliate to a partner manually
    function addAffiliateByOwner(address partner, address affiliate) external onlyOwner {
        require(partners[partner], "not a partner");
        require(affiliatedWith[affiliate] == address(0), "already affiliated with a partner");
        affiliatedWith[affiliate] = partner;
        numAffiliatesPerPartner[partner] += 1;
    }

    // adding an LP address to LPs. Transferring to an address in `LPs` is considered a sale
    function addLPAddress(address _newLP) external onlyOwner {
        require(!LPs[_newLP], "already added");
        LPs[_newLP] = true;
    }

    function removeLPAddress(address _LP) external onlyOwner {
        require(LPs[_LP], "not set");
        require(_LP != mainLP, "cannot remove main LP");
        LPs[_LP] = false;
    }

    function setSlippageToleranceNum(uint256 _newSlippageToleranceNum) external onlyOwner {
        require(_newSlippageToleranceNum <= SLIPPAGE_TOLERANCE_DENOMINATOR, "numerator is too high");
        slippageToleranceNum = _newSlippageToleranceNum;
    }

    /**
     * @dev Pauses functions modified with `whenNotPaused`.
     */
    function pause() external virtual whenNotPaused onlyOwner {
        _pause();
    }

    /**
     * @dev Unpauses functions modified with `whenNotPaused`.
     */
    function unpause() external virtual whenPaused onlyOwner {
        _unpause();
    }

    /**
     * @dev Withdrawing tokens from contract.
     * @param _token: token address
     */
    function withdrawTokens(address _token) external onlyOwner {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount > 0, "balance is 0");
        IERC20(_token).transfer(owner(), amount);
    }

    function setPartnerNum(uint256 _newPartnerNum) public isValidTax onlyOwner {
        partnerNum = _newPartnerNum;
    }

    function setBurnNum(uint256 _newBurnNum) public isValidTax onlyOwner {
        burnNum = _newBurnNum;
    }

    function setLiquidityNum(uint256 _newLiquidityNum) public isValidTax onlyOwner {
        liquidityNum = _newLiquidityNum;
    }

    function setStakingWalletNum(uint256 _newStakingWalletNum) public isValidTax onlyOwner {
        stakingWalletNum = _newStakingWalletNum;
    }

    function setTeamWalletNum(uint256 _newTeamWalletNum) public isValidTax onlyOwner {
        teamWalletNum = _newTeamWalletNum;
    }

    function setAlgoWalletNum(uint256 _newAlgoWalletNum) public isValidTax onlyOwner {
        algoWalletNum = _newAlgoWalletNum;
    }

    // update the router. Updating the router automatically updates the main LP.
    function setRouter(address _newRouter) public onlyOwner {
        require(_newRouter != address(0), "cannot be the zero address");
        router = IPancakeRouter02(_newRouter);
        mainLP = IPancakeV2Factory(router.factory()).createPair(address(this), BUSD);
        LPs[mainLP] = true;
        _approve(address(this), address(router), type(uint256).max);
        ERC20(BUSD).approve(address(router), type(uint256).max);
    }

    function setTeamWallet(address _newTeamWallet) public onlyOwner {
        require(_newTeamWallet != address(0), "cannot be the zero address");
        teamWallet = _newTeamWallet;
    }

    function setAlgoWallet(address _newAlgoWallet) public onlyOwner {
        require(_newAlgoWallet != address(0), "cannot be the zero address");
        algoWallet = _newAlgoWallet;
    }

    function setStakingWallet(address _newStakingWallet) public onlyOwner {
        require(_newStakingWallet != address(0), "cannot be the zero address");
        stakingWallet = _newStakingWallet;
    }

    function setPartnerWallet(address _newPartnerWallet) public onlyOwner {
        require(_newPartnerWallet != address(0), "cannot be the zero address");
        partnerWallet = _newPartnerWallet;
    }

    // add an account to the whitelist
    function addToWhitelist(address account) public onlyOwner {
        require(!whitelist[account], "account is already whitelisted");
        whitelist[account] = true;
    }

    // remove an account from the whitelist
    function removeFromWhitelist(address account) public onlyOwner {
        require(whitelist[account], "account is not whitelisted");
        whitelist[account] = false;
    }

    // add an account to the blocklist
    function addToBlocklist(address account) public onlyOwner {
        require(!blocklist[account], "account is already blocklisted");
        blocklist[account] = true;
    }

    // remove an account to the blocklist
    function removeFromBlocklist(address account) public onlyOwner {
        require(blocklist[account], "account is not blocklisted");
        blocklist[account] = false;
    }

    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function currentMaxTax() public view returns(uint256){
        return partnerNum + burnNum + liquidityNum
                + stakingWalletNum + teamWalletNum + algoWalletNum;
    }

    function applyFees(address recipient, uint256 amountIn) public view returns
        (uint256 amountOut,
        uint256 toPartner,
        uint256 toStakingWallet,
        uint256 toTeamWallet,
        uint256 toAlgoWallet,
        uint256 toLiquidityNum,
        uint256 toBurn) {
            toPartner = (amountIn * partnerNum) / DENOMINATOR;
            toStakingWallet = (amountIn * stakingWalletNum) / DENOMINATOR;
            toTeamWallet = (amountIn * teamWalletNum) / DENOMINATOR;
            toAlgoWallet = _shouldApplySlippageTax(recipient, amountIn) ? (amountIn * algoWalletNum) / DENOMINATOR : 0;
            toLiquidityNum = (amountIn * liquidityNum) / DENOMINATOR;
            toBurn = (amountIn * burnNum) / DENOMINATOR;
            amountOut = amountIn - (toPartner + toStakingWallet
                        + toTeamWallet + toAlgoWallet + toLiquidityNum + toBurn);
        }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override whenNotPaused {
        require(!blocklist[sender] && !blocklist[recipient], "blocklisted");

        if(!whitelist[sender] && !whitelist[recipient] && currentMaxTax() > 0){
            (
                 uint256 _amountOut,
                 uint256 _toPartner,
                 uint256 _toStakingWallet,
                 uint256 _toTeamWallet,
                 uint256 _toAlgoWallet,
                 uint256 _toLiquidity,
                 uint256 _toBurn
            ) = applyFees(recipient, amount);

            // if sender is not affiliated with a partner, set the cut receiver to be the staking wallet
            address partnerRecipient = affiliatedWith[sender] != address(0) ? affiliatedWith[sender] : partnerWallet;

            if(sender == mainLP){ // bypassing swap `lock`
                amount = _amountOut;
                super._transfer(sender, partnerRecipient, _toPartner);
                super._transfer(sender, stakingWallet, _toStakingWallet + _toLiquidity);
                super._transfer(sender, teamWallet, _toTeamWallet);
                _burn(sender, _toBurn);
            } else {
                super._transfer(sender, address(this), amount);
                amount = _amountOut;

                // send tax to partner
                _swapTokensForBUSDAndTransfer(_toPartner, partnerRecipient);

                // send tax to staking wallet
                _swapTokensForBUSDAndTransfer(_toStakingWallet, stakingWallet);

                // send tax to team wallet
                _swapTokensForBUSDAndTransfer(_toTeamWallet, teamWallet);

                // add liquidity
                _addBUSDLiquidity(_toLiquidity);

                // send algo cut if relevant
                _swapTokensForBUSDAndTransfer(_toAlgoWallet, algoWallet);

                // burn some tokens
                _burn(address(this), _toBurn);
                sender = address(this);
            }
        }

        super._transfer(sender, recipient, amount);
    }

    function _addBUSDLiquidity(uint256 amount) internal {
        uint256 toBUSD = amount / 2;
        uint256 amountNativeToken = amount - toBUSD;
        uint256 initialBUSDBalance = ERC20(BUSD).balanceOf(address(this));
        _swapTokensForBUSBToThisContract(toBUSD);
        uint256 amountBUSDswapped = ERC20(BUSD).balanceOf(address(this)) - initialBUSDBalance;

        // add liquidity
        router.addLiquidity(
                address(this),
                BUSD,
                amountNativeToken,
                amountBUSDswapped,
                0,
                0,
                address(0),
                1e18 // absurdly high value
        );
    }

    // swap tokens for BUSD and transfer
    function _swapTokensForBUSDAndTransfer(uint256 amount, address to) internal {
        if(amount > 0){
            address[] memory _path = new address[](2);

            _path[0] = address(this);
            _path[1] = BUSD;

            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                        amount,
                        0,
                        _path,
                        to,
                        1e18
                    );
            }
        }

    // swap some NOSTA for BUSD and send them to this contract. The function uses two swaps in order
    // to bypass some router limitation. Function is quite inelegant.
    function _swapTokensForBUSBToThisContract(uint256 amount) internal {
        if(amount > 0){
            // 1. Swap NOSTA for BNB
            address[] memory _path = new address[](3);
            _path[0] = address(this);
            _path[1] = BUSD;
            _path[2] = router.WETH();

            uint256 _BNBBalance = address(this).balance;
            router.swapExactTokensForETHSupportingFeeOnTransferTokens(
                        amount,
                        0,
                        _path,
                        address(this),
                        1e18
                    );

            _BNBBalance = address(this).balance - _BNBBalance;

            // 2. Swap BNB for BUSD
            address[] memory _path2 = new address[](2);
            _path2[0] = router.WETH();
            _path2[1] = BUSD;
            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _BNBBalance}(
                        0,
                        _path2,
                        address(this),
                        1e18
                    );
            }
        }

    function _shouldApplySlippageTax(address recipient, uint256 amount) internal view returns(bool){
        // check if receiver is an LP i.e. if the transfer is a sale.
        if(!LPs[recipient] || algoWalletNum == 0){
            return false;
        }
        return _calculateSlippage(amount) > slippageToleranceNum ? true : false;
    }

    // Calculate slippage wrt the main liquidity pair.
    // No matter the LP used, the main source of liquidity is assumed to be
    // the BUSD-NOSTA pair on `router` and the virtual slippage is calculated
    // wrt this pair.
    function _calculateSlippage(uint256 amount) internal view returns(uint256){
        address[] memory _path = new address[](2);
        _path[0] = address(this);
        _path[1] = BUSD;

        uint256 _instantPrice = router.getAmountsOut(FLOAT_PRECISION, _path)[1];
        uint256 _amountOut = router.getAmountsOut(amount, _path)[1];
        uint256 _amountOutInstant = (amount * _instantPrice) / FLOAT_PRECISION;
        if(_amountOutInstant < _amountOut || amount < FLOAT_PRECISION){
            return 0;
        }
        return SLIPPAGE_TOLERANCE_DENOMINATOR - (_amountOut * SLIPPAGE_TOLERANCE_DENOMINATOR) / _amountOutInstant;
    }
}

// File: Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "IERC20.sol";
import "IERC20Metadata.sol";
import "Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
            unchecked {
                _approve(sender, _msgSender(), currentAllowance - amount);
            }
        }

        _transfer(sender, recipient, amount);

        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `sender` to `recipient`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}


// File: Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;

import "Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: IPancakeRouter02.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.6.2;

import "IPancakeRouter01.sol";

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: IPancakeRouter01.sol
// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.6.2;

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}


// File: IPancakeV2Pair.sol
pragma solidity >=0.5.0;

interface IPancakeV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: IPancakeV2Factory.sol
pragma solidity >=0.5.0;

interface IPancakeV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}
