
// File: contracts/peripherals/TimeLockPricefeed.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IVaultPriceFeedV3 {
    function setPriceSampleSpace(uint256 _priceSampleSpace) external;
    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints) external;

    function setAdjustment(address _token, bool _isAdditive, uint256 _adjustmentBps) external;
    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints) external;
    function setTokenChainlinkConfig(address _token, address _chainlinkContract, bool _isStrictStable)external;
    function setBitTokens(address[] memory _tokens,  uint256[] memory _tokenPrecisions) external;
    function transferOwnership(address _gov) external;

}


contract TimelockPricefeed is Ownable {
    using SafeMath for uint256;

    uint256 public constant MAX_BUFFER = 5 days;
    uint256 public buffer = 24 hours;

    mapping (bytes32 => uint256) public pendingActions;

    event SignalSetAdjustment(address _target, address _token, bool _isAdditive, uint256 _adjustmentBps);
    event SetAdjustment(address _target, address _token, bool _isAdditive, uint256 _adjustmentBps);
    event SetSpreadBasisPoints(address _target,address _token, uint256 _spreadBasisPoints);
 
    event SignalSetSpreadThresholdBasisPoints(address _target, uint256 _spreadThresholdBasisPoints);
    event SetSpreadThresholdBasisPoints(address _target, uint256 _spreadThresholdBasisPoints);
    
    event SignalSetTokenChainlinkConfig(address _target, address _token, address _chainlinkContract, bool _isStrictStable);
    event SetTokenChainlinkConfig(address _target, address _token, address _chainlinkContract, bool _isStrictStable);
    
    event SignalSetBitTokens(address _target, address[] _tokens,  uint256[] _tokenPrecisions);
    event SetBitTokens(address _target, address[] _tokens,  uint256[] _tokenPrecisions);
    
    event ClearAction(bytes32 action);
    event SignalPendingAction(bytes32 action);

    event TransferOwnership(address _target,address _govn);
    event SignalTransferOwnership(address _target,address _gov);


    function setBuffer(uint256 _buffer) external onlyOwner {
        require(_buffer <= MAX_BUFFER, "Timelock: invalid _buffer");
        require(_buffer > buffer, "Timelock: buffer cannot be decreased");
        buffer = _buffer;
    }

    function setPriceSampleSpace(address _target, uint256 _priceSampleSpace) external onlyOwner {
        IVaultPriceFeedV3(_target).setPriceSampleSpace(_priceSampleSpace);
    }

    function setAdjustment(address _target, address _token, uint256 _spreadBasisPoints) external onlyOwner {
        IVaultPriceFeedV3(_target).setSpreadBasisPoints(_token, _spreadBasisPoints);
        emit SetSpreadBasisPoints(_target, _token, _spreadBasisPoints);
    }



    //----------------------------- Timelock functions
    function signalSetAdjustment(address _target, address _token, bool _isAdditive, uint256 _adjustmentBps) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setAdjustment",_target, _token, _isAdditive, _adjustmentBps));
        _setPendingAction(action);
        emit SignalSetAdjustment(_target, _token, _isAdditive, _adjustmentBps);
    }
    function setAdjustment(address _target, address _token, bool _isAdditive, uint256 _adjustmentBps) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setAdjustment",_target, _token, _isAdditive, _adjustmentBps));
        _validateAction(action);
        _clearAction(action);
        IVaultPriceFeedV3(_target).setAdjustment(_token, _isAdditive, _adjustmentBps);
        emit SetAdjustment(_target, _token, _isAdditive, _adjustmentBps);
    }

    function signalSetSpreadThresholdBasisPoints(address _target,uint256 _spreadThresholdBasisPoints) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setSpreadThresholdBasisPoints",_target, _spreadThresholdBasisPoints));
        _setPendingAction(action);
        emit SignalSetSpreadThresholdBasisPoints(_target, _spreadThresholdBasisPoints);
    }
    function setSpreadThresholdBasisPoints(address _target, uint256 _spreadThresholdBasisPoints) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setSpreadThresholdBasisPoints",_target, _spreadThresholdBasisPoints));
        _validateAction(action);
        _clearAction(action);
        IVaultPriceFeedV3(_target).setSpreadThresholdBasisPoints(_spreadThresholdBasisPoints);
        emit SetSpreadThresholdBasisPoints(_target, _spreadThresholdBasisPoints);
    }


    function signalSetTokenChainlinkConfig(address _target, address _token, address _chainlinkContract, bool _isStrictStable) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setTokenChainlinkConfig",_target, _token, _chainlinkContract, _isStrictStable));
        _setPendingAction(action);
        emit SignalSetTokenChainlinkConfig(_target, _token, _chainlinkContract, _isStrictStable);
    }
    function setTokenChainlinkConfig(address _target, address _token, address _chainlinkContract, bool _isStrictStable) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("setTokenChainlinkConfig",_target, _token, _chainlinkContract, _isStrictStable));
        _validateAction(action);
        _clearAction(action);
        IVaultPriceFeedV3(_target).setTokenChainlinkConfig(_token, _chainlinkContract, _isStrictStable);
        emit SetTokenChainlinkConfig(_target, _token, _chainlinkContract, _isStrictStable);
    }

    function signalSetBitTokens(address _target, address[] memory _tokens,  uint256[] memory _tokenPrecisions) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("signalSetBitTokens",_target, _tokens, _tokenPrecisions));
        _setPendingAction(action);
        emit SignalSetBitTokens(_target, _tokens, _tokenPrecisions);
    }
    function setBitTokens(address _target, address[] memory _tokens,  uint256[] memory _tokenPrecisions) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("signalSetBitTokens",_target, _tokens, _tokenPrecisions));
        _validateAction(action);
        _clearAction(action);
        IVaultPriceFeedV3(_target).setBitTokens(_tokens, _tokenPrecisions);
        emit SetBitTokens(_target, _tokens, _tokenPrecisions);
    }


    function signalTransferTargetOwnership(address _target, address _new_owner) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("transferOwnership",_target, _new_owner));
        _setPendingAction(action);
        emit SignalTransferOwnership(_target, _new_owner);
    }
    function transferTargetOwnership(address _target, address _new_owner) external onlyOwner {
        bytes32 action = keccak256(abi.encodePacked("transferOwnership",_target, _new_owner));
        _validateAction(action);
        _clearAction(action);
        IVaultPriceFeedV3(_target).transferOwnership(_new_owner);
        emit TransferOwnership(_target, _new_owner);
    }





    //---------------------- signal functoins
    function cancelAction(bytes32 _action) external onlyOwner {
        _clearAction(_action);
    }

    function _setPendingAction(bytes32 _action) private {
        require(pendingActions[_action] == 0, "Timelock: action already signalled");
        pendingActions[_action] = block.timestamp.add(buffer);
        emit SignalPendingAction(_action);
    }

    function _validateAction(bytes32 _action) private view {
        require(pendingActions[_action] != 0, "Timelock: action not signalled");
        require(pendingActions[_action] < block.timestamp, "Timelock: action time not yet passed");
    }

    function _clearAction(bytes32 _action) private {
        require(pendingActions[_action] != 0, "Timelock: invalid _action");
        delete pendingActions[_action];
        emit ClearAction(_action);
    }
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

