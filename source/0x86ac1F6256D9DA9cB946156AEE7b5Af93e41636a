
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: /contracts/contract/bvg_stake.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
interface IBEP20 {
    function decimals() external view returns (uint8);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    function mint(address addr_, uint amount_) external;

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract BVGMining is ReentrancyGuard {
    IBEP20 public BVG = IBEP20(0x96cB0Ade2e254c598b12179503C00b007EeB7861);
    using SafeERC20 for IERC20;
    uint public startTime;
    uint constant miningTime = 30 days;
    uint public totalClaimed;
    uint constant dayliyOut = 5000000 ether;
    uint public rate;
    uint constant acc = 1e10;
    address public owner;
    constructor (){
        rate = dayliyOut / 86400;
        poolInfo[1].rate = 50;
        poolInfo[2].rate = 30;
        poolInfo[3].rate = 20;
        poolInfo[1].limit = 10 ether;
        poolInfo[2].limit = 5000 ether;
        poolInfo[3].limit = 100 ether;
        poolInfo[2].token = 0x55d398326f99059fF775485246999027B3197955;
        //USDT
        poolInfo[3].token = 0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153;
        //FIL
        owner = msg.sender;
    }
    struct PoolInfo {
        address token;
        uint TVL;
        uint lastTime;
        uint debt;
        uint claimed;
        uint rate;
        uint limit;
        uint lastDebt;
    }

    struct UserInfo {
        uint stakeAmount;
        uint debt;
        uint toClaim;
    }

    mapping(uint => PoolInfo) public poolInfo;
    mapping(address => mapping(uint => UserInfo)) public userInfo;
    mapping(address => uint) public userClaimed;

    event Claim(address indexed player, uint indexed amount);
    event Stake(address indexed player, uint indexed amount, uint indexed poolId);
    event UnStake(address indexed player, uint poolID);
    
    modifier checkEnd(){
        if(block.timestamp >= startTime + miningTime && poolInfo[1].lastDebt ==0){
            poolInfo[1].lastDebt = coutingDebt(1);
            poolInfo[2].lastDebt = coutingDebt(2);
            poolInfo[3].lastDebt = coutingDebt(3);
        }
        _;
    }

    function coutingDebt(uint poolId) public view returns (uint _debt){
        PoolInfo storage info = poolInfo[poolId];
        if (info.lastDebt != 0){
            return info.lastDebt;
        }
        _debt = info.TVL > 0 ? (rate * info.rate / 100) * (block.timestamp - info.lastTime) * acc / info.TVL + info.debt : 0 + info.debt;
    }

    function calculateReward(address player, uint poolId) public view returns (uint){
        UserInfo storage user = userInfo[player][poolId];
        if (user.stakeAmount == 0) {
            return 0;
        }
        uint rew = user.stakeAmount * (coutingDebt(poolId) - user.debt) / acc;
        return (rew + user.toClaim);
    }

    function calculateAllReward(address player) public view returns (uint){
        uint rew;
        for (uint i = 1; i <= 3; i ++) {
            UserInfo storage user = userInfo[player][i];
            if (user.stakeAmount == 0) {
                continue;
            }
            rew += calculateReward(player, i);
        }
        return rew;
    }
    
    function setStartTime(uint time_) external{
        require(msg.sender == owner,'not owner');
        require(startTime == 0,'starting');
        require(block.timestamp < time_ + miningTime ,'out of time');
        require(time_ != 0 ,'startTime can not be zero');
        startTime = time_;
        owner = address(0);
    }

    function claimReward(uint poolId) internal checkEnd {
        uint rew = calculateReward(msg.sender, poolId);
        if (rew == 0) {
            return;
        }
        UserInfo storage user = userInfo[msg.sender][poolId];
        BVG.mint(msg.sender, rew);
        uint tempDebt = coutingDebt(poolId);
        user.debt = tempDebt;
        user.toClaim = 0;
        userClaimed[msg.sender] += rew;
        totalClaimed += rew;
        emit Claim(msg.sender, rew);

    }

    function claimAllReward() external checkEnd{
        // require(block.timestamp < startTime + miningTime, 'mining over');
        uint rew;
        uint tempDebt;
        for (uint i = 1; i <= 3; i ++) {
            UserInfo storage user = userInfo[msg.sender][i];
            if (user.stakeAmount == 0) {
                continue;
            }
            rew += calculateReward(msg.sender, i);
            tempDebt = coutingDebt(i);
            user.debt = tempDebt;
            user.toClaim = 0;
        }
        require(rew > 0, 'no reward');
        userClaimed[msg.sender] += rew;
        totalClaimed += rew;
        BVG.mint(msg.sender, rew);
        emit Claim(msg.sender, rew);
    }

    function stakeBnb() payable external {
        require(block.timestamp >= startTime && startTime != 0,'not start');
        require(block.timestamp < startTime + miningTime, 'mining over');
        require(msg.value > 0, 'amount can not be zero');
        UserInfo storage user = userInfo[msg.sender][1];
        PoolInfo storage pool = poolInfo[1]; 
        require(user.stakeAmount + msg.value <= pool.limit, 'out of limit');
        if (user.stakeAmount > 0) {
            user.toClaim = calculateReward(msg.sender, 1);
        }
        uint tempDebt = coutingDebt(1);
        pool.TVL += msg.value;
        pool.lastTime = block.timestamp;
        pool.debt = tempDebt;
        user.stakeAmount += msg.value;
        user.debt = tempDebt;
        emit Stake(msg.sender,msg.value,1);
    }

    function unStakeBnb() external nonReentrant checkEnd{
        UserInfo storage user = userInfo[msg.sender][1];
        PoolInfo storage pool = poolInfo[1];
        require(user.stakeAmount > 0, 'no stakeAmount');
        claimReward(1);
        uint tempDebt = coutingDebt(1);
        uint amount = user.stakeAmount;
        pool.TVL -= amount;
        pool.lastTime = block.timestamp;
        pool.debt = tempDebt;
        user.stakeAmount = 0;
        user.debt = tempDebt;
        payable(msg.sender).transfer(amount);
        emit UnStake(msg.sender,amount);
    }

    function stakeToken(uint poolId, uint amount) external  {
        require(block.timestamp >= startTime && startTime != 0,'not start');
        require(poolId == 2 || poolId == 3, 'wrong pool ID');
        require(block.timestamp < startTime + miningTime, 'mining over');
        require(amount > 0, 'amount can not be zero');
        UserInfo storage user = userInfo[msg.sender][poolId];
        PoolInfo storage pool = poolInfo[poolId];
        require(user.stakeAmount + amount <= pool.limit, 'out of limit');
        if (user.stakeAmount > 0) {
            user.toClaim = calculateReward(msg.sender, poolId);
        }
        uint tempDebt = coutingDebt(poolId);
        pool.TVL += amount;
        pool.lastTime = block.timestamp;
        pool.debt = tempDebt;
        user.stakeAmount += amount;
        user.debt = tempDebt;
        IERC20(pool.token).safeTransferFrom(msg.sender, address(this), amount);
        emit Stake(msg.sender,amount,poolId);
    }

    function unStakeToken(uint poolId) external nonReentrant checkEnd{
        require(poolId == 2 || poolId == 3, 'wrong pool ID');
        UserInfo storage user = userInfo[msg.sender][poolId];
        PoolInfo storage pool = poolInfo[poolId];
        require(user.stakeAmount > 0, 'no stakeAmount');
        claimReward(poolId);
        uint tempDebt = coutingDebt(poolId);
        uint amount = user.stakeAmount;
        pool.TVL -= amount;
        pool.lastTime = block.timestamp;
        pool.debt = tempDebt;
        user.stakeAmount = 0;
        user.debt = tempDebt;
        IERC20(pool.token).safeTransfer(msg.sender, amount);
        emit UnStake(msg.sender,amount);
    }


}
