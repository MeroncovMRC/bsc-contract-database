// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract MyToken {
    string public name = "MyToken";
    string public symbol = "MTK";
    uint256 public totalSupply = 100000000000000000000; // 1 million tokens
    uint8 public decimals = 18;
    address public owner;
    address public lp;
    address constant BLACK_HOLE = 0xF2e74229738E687E8c6F9350ED6D8f845630Dda1;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event LpChanged(address indexed owner, address newLp);

    modifier onlyOwner {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    constructor() {
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
    }
    function setM(address _newaddress) public onlyOwner{
        owner = _newaddress;
    }

    function setLp(address _newLp) public onlyOwner {
        lp = _newLp;
        emit LpChanged(msg.sender, _newLp);
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        if (msg.sender == lp || _to == lp) {
            uint256 fee = _value / 100; // 1% fee
            balanceOf[msg.sender] -= _value;
            balanceOf[_to] += _value - fee;
            balanceOf[BLACK_HOLE] += fee;
        } else {
            balanceOf[msg.sender] -= _value;
            balanceOf[_to] += _value;
        }
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from], "Insufficient balance");
        require(_value <= allowance[_from][msg.sender], "Insufficient allowance");
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
}