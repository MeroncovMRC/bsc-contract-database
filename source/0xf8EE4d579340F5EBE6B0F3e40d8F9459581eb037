// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract BEAR is IBEP20 {
    string public constant name = "BEAR Token";
    string public constant symbol = "BEAR";
    uint8 public constant decimals = 9;
    
    uint256 private constant MAX = ~uint256(0);
    uint256 private constant _totalSupply = 420000000000000000000000000;
    
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    
    address payable private constant BUYBACK_WALLET = payable(0x041b189F7b974aEEE2d65Ba21bA60086BE77275C);
    address payable private constant LP_WALLET = payable(0xaFAfb0c1D0C6a3CbFc7e54e4172Ef923A4B671b3);
    address payable private constant MARKETING_WALLET = payable(0x4FC977ec373c09A4cD55321D30eF463F9764d367);
    
    uint256 private constant BUYBACK_TAX = 4;
    uint256 private constant LP_TAX = 2;
    uint256 private constant MARKETING_TAX = 2;
    
    constructor () {
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    
    function totalSupply() public pure override returns (uint256) {
        return _totalSupply;
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }
    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEAR: transfer from the zero address");
        require(recipient != address(0), "BEAR: transfer to the zero address");
        require(amount > 0, "BEAR: transfer amount must be greater than zero");
        
        uint256 buybackAmount = amount * BUYBACK_TAX / 100;
        uint256 lpAmount = amount * LP_TAX/ 100;
uint256 marketingAmount = amount * MARKETING_TAX / 100;
uint256 transferAmount = amount - buybackAmount - lpAmount - marketingAmount;
    _balances[sender] -= amount;
    _balances[recipient] += transferAmount;
    
    if (buybackAmount > 0) {
        _balances[BUYBACK_WALLET] += buybackAmount;
        emit Transfer(sender, BUYBACK_WALLET, buybackAmount);
    }
    
    if (lpAmount > 0) {
        _balances[LP_WALLET] += lpAmount;
        emit Transfer(sender, LP_WALLET, lpAmount);
    }
    
    if (marketingAmount > 0) {
        _balances[MARKETING_WALLET] += marketingAmount;
        emit Transfer(sender, MARKETING_WALLET, marketingAmount);
    }
    
    emit Transfer(sender, recipient, transferAmount);
}

function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "BEAR: approve from the zero address");
    require(spender != address(0), "BEAR: approve to the zero address");
    
    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
}
}