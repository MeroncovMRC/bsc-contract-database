
// File: contracts/PepeMintsBuyback.sol
pragma solidity 0.8.16;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

import "./BoringOwnable.sol";


interface IPancakeFactory {
    function getPair(address token1, address token2) external pure returns (address);
}

interface IPepeMints {
    function burn(uint amounts) external;
}

contract PepeMintsBuyback is BoringOwnable, ReentrancyGuard {
  
    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    IPepeMints public pepeMints;

    address public _token1Receiver = 0x000000000000000000000000000000000000dEaD; // we want to burn IPepeMints tokens
    address public _token2Receiver = 0xBFF8a1F9B5165B787a00659216D7313354D25472; // TODO check if this is the right address to receive token 2 (Drip)
    address public _token3Receiver;

    address public contrAddr;

    address public addressToken1; // PepeMints, to set in constructor
    address public addressToken2 = 0x20f663CEa80FaCE82ACDFA3aAE6862d246cE0333;  // DRIP
    address public addressToken3 = 0x0000000000000000000000000000000000000000;  // 0x0

    address public constant _pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    IUniswapV2Router02 _pancakeRouter;

    uint public share1 = 8000;
    uint public share2 = 2000;
    uint public share3 = 0;


    /* Time of contract launch */
    uint256 public LAUNCH_TIME;
    uint256 public oneWeek = 30 minutes;// TODO: change back to 7 days
    uint256 public currentWeek = 0;
    

    constructor(uint _LAUNCH_TIME, IPepeMints _pepeMints) {
        LAUNCH_TIME = _LAUNCH_TIME;
        pepeMints = _pepeMints;

        addressToken1 = address(pepeMints);

        _pancakeRouter = IUniswapV2Router02(_pancakeRouterAddress);
        contrAddr = address(this);
    }

    function setTokenReceivers(address token1Receiver,  address token2Receiver,  address token3Receiver) external onlyOwner {
        _token1Receiver = token1Receiver;
        _token2Receiver = token2Receiver;
        _token3Receiver = token3Receiver;
    }

    // Set lenght of "one Week"
    function lengtOfWeek (uint256 _oneWeek) external onlyOwner {
        oneWeek = _oneWeek;
    }

    // Set buyback schare 1 and 2
    function setBuyBackShare(uint _share1, uint _share2, uint _share3) external onlyOwner {
      require(_share1 + _share2 + _share3 <= 10000, "Share1 + Share2 + Share3 can`t be more than 100!");
        share1 = _share1;
        share2 = _share2;
        share3 = _share3;
    }

    // Set Address token1 token2
    // BOTH token need a Liquidity with WETH on the Pancake Router!
    function setTokenAddresses(address _token1, address _token2, address _token3) external onlyOwner {
        addressToken1 = _token1;
        addressToken2 = _token2;
        addressToken3 = _token3;
    }

    // function to see which week it is
    function thisWeek() public view returns (uint256) {
        if (LAUNCH_TIME > block.timestamp) return 0;
        return (block.timestamp - LAUNCH_TIME) / oneWeek;
    }

    // time in seconds until next week starts
    function whenNextWeek() public view returns (uint256) {
        if (LAUNCH_TIME > block.timestamp) return LAUNCH_TIME - block.timestamp;
        return oneWeek - (block.timestamp - (LAUNCH_TIME + thisWeek() * oneWeek));
    }

    // receive all token from contract
    function getAllToken(address token) public onlyOwner {
        uint256 amountToken = IERC20(token).balanceOf(contrAddr);
        IERC20(token).transfer(owner, amountToken);
    }

    function recoverETH(address to, uint amount) external onlyOwner {
        if (amount > 0) {
        (bool transferSuccess, ) = payable(to).call{
            value: amount
        }("");
        require(transferSuccess, "ETH transfer failed");
        }
    }

    // to make the contract being able to receive ETH
    receive() external payable {}

    // function to buyback 2 different token with the collected USDC
    function burnAndBuyback () public nonReentrant {   
        require(LAUNCH_TIME < block.timestamp, "BuyBacks not started yet!");
        require(currentWeek != thisWeek(), "BuyBack already happened this Week!");     
        currentWeek = thisWeek(); 
 
        uint256 ethBal = contrAddr.balance;

        if (ethBal > 1000000) {  // check if there is an usable amount of eth in the contract
            burnAndBuybackForPartner(addressToken1, _token1Receiver, share1, ethBal);
            burnAndBuybackForPartner(addressToken2, _token2Receiver, share2, ethBal);
            burnAndBuybackForPartner(addressToken3, _token3Receiver, share3, ethBal);
        }
    }

    function burnAndBuybackForPartner(address tokenAddress, address tokenReceiver, uint shareBP, uint ethBalance) internal {
        uint256 buyBackShare = ethBalance * shareBP / 10000;
        if (buyBackShare > 100000 && tokenAddress != address(0)) {
            uint256 tokenBalBefore = IERC20(tokenAddress).balanceOf(contrAddr);

            address[] memory path = new address[](2);
            path[0] = _pancakeRouter.WETH();
            path[1] = tokenAddress;
            
            // Buyback token 2 from LP from received USDC
            _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: buyBackShare}(
                0,
                path,
                contrAddr,
                block.timestamp+1
            );

            // send received Token to _tokenReceiver
            uint256 receivedToken = IERC20(tokenAddress).balanceOf(contrAddr) - tokenBalBefore;
            if (receivedToken > 10000){
                if (tokenAddress == address(pepeMints) && (tokenReceiver == BURN_ADDRESS || tokenReceiver == address(0)))
                    pepeMints.burn(receivedToken);
                else
                    IERC20(tokenAddress).transfer(tokenReceiver, receivedToken);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol
pragma solidity >=0.6.2;

import './IUniswapV2Router01.sol';

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}


// File: contracts/BoringOwnable.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol
// Simplified by BoringCrypto

// Source Code: https://github.com/boringcrypto/BoringSolidity/blob/78f4817d9c0d95fe9c45cd42e307ccd22cf5f4fc/contracts/BoringOwnable.sol

contract BoringOwnableData {
    address public owner;
    address public pendingOwner;
}

contract BoringOwnable is BoringOwnableData {
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /// @notice `owner` defaults to msg.sender on construction.
    constructor() {
        owner = msg.sender;
        emit OwnershipTransferred(address(0), msg.sender);
    }

    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.
    /// Can only be invoked by the current `owner`.
    /// @param newOwner Address of the new owner.
    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.
    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.
    function transferOwnership(
        address newOwner,
        bool direct,
        bool renounce
    ) public onlyOwner {
        if (direct) {
            // Checks
            require(newOwner != address(0) || renounce, "Ownable: zero address");

            // Effects
            emit OwnershipTransferred(owner, newOwner);
            owner = newOwner;
            pendingOwner = address(0);
        } else {
            // Effects
            pendingOwner = newOwner;
        }
    }

    /// @notice Needs to be called by `pendingOwner` to claim ownership.
    function claimOwnership() public {
        address _pendingOwner = pendingOwner;

        // Checks
        require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");

        // Effects
        emit OwnershipTransferred(owner, _pendingOwner);
        owner = _pendingOwner;
        pendingOwner = address(0);
    }

    /// @notice Only allows the `owner` to execute the function.
    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }
}

// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol
pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

