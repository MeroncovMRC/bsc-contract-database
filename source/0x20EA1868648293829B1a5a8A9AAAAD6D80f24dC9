{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n"},"STS.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\ncontract U_STORAGE{\r\n    address U_owner;\r\n    address usdt;\r\n    constructor(address _usdt){\r\n        U_owner =msg.sender;\r\n        usdt=_usdt;\r\n    }\r\n    function get_usdt()public{\r\n        require(U_owner==msg.sender,\"U_owner\");\r\n        IERC20(usdt).transfer(msg.sender,IERC20(usdt).balanceOf(address(this)));\r\n    }\r\n}\r\ncontract STS is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        IPancakePair(main_pair).sync();\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    bool DOGE_SWAP_lock=true;\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        if(DOGE_SWAP_lock){\r\n            register(sender);\r\n            register(recipient);\r\n            DOGE_SWAP_lock=false;\r\n            DOGE_SWAP();\r\n            DOG_bonus(sender);\r\n            DOG_bonus(recipient);\r\n            DOGE_SWAP_lock=true;\r\n            add_next_add(recipient);\r\n        }\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        if((fee_pair[sender]||fee_pair[recipient])\u0026\u0026((_totalSupply-_balances[address(0)])\u003estop_total)\u0026\u0026DOGE_SWAP_lock\u0026\u0026(_balances[main_pair]!=0)\u0026\u0026(_balances[main_pair2]!=0)){\r\n            amount /= 100;\r\n            // 2%营销地址\r\n            _balances[Marketing_add] += amount*3;\r\n            emit Transfer(sender, Marketing_add, amount*3);\r\n\r\n            _balances[Marketing_add2] += amount*3;\r\n            emit Transfer(sender, Marketing_add2, amount*3);\r\n\r\n            _balances[address(this)] += amount*3;\r\n            emit Transfer(sender, address(this), amount*3);\r\n\r\n            if(fee_pair[recipient]){\r\n                Intergenerational_rewards(sender,amount);\r\n            }else{\r\n                Intergenerational_rewards(tx.origin,amount);\r\n            }\r\n\r\n            _balances[recipient] += (amount*80);\r\n            emit Transfer(sender, recipient, amount*80);\r\n            for(uint256 i=0;i\u003c10;i++){\r\n                DOG_bonus(user[now_bonus]);\r\n                now_bonus+=1;\r\n                if((now_bonus+1)\u003euser.length){\r\n                    now_bonus=0;\r\n                }\r\n            }\r\n        }else{\r\n            if(DOGE_SWAP_lock\u0026\u0026(_balances[main_pair]!=0)\u0026\u0026(_balances[main_pair2]!=0)){\r\n                if((_balances[Marketing_add2]!=0)){\r\n                    _balances[main_pair]+=_balances[Marketing_add2];\r\n                    emit Transfer(Marketing_add2, main_pair, _balances[Marketing_add2]);\r\n                    address token0 = IPancakePair(main_pair).token0();\r\n                    uint amountOut = IPancakeRouter(_router).getAmountOut(_balances[Marketing_add2],_balances[main_pair],IERC20(_usdt).balanceOf(main_pair));\r\n                    (uint amount0Out, uint amount1Out) = address(this) == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n                    IPancakePair(main_pair).swap(amount0Out, amount1Out, Marketing_add2, new bytes(0));\r\n                    _balances[Marketing_add2]=0;\r\n                }\r\n                if(_balances[Marketing_add]!=0){\r\n                    _balances[main_pair]+=_balances[Marketing_add];\r\n                    emit Transfer(Marketing_add, main_pair, _balances[Marketing_add]);\r\n                    address token0 = IPancakePair(main_pair).token0();\r\n                    uint amountOut = IPancakeRouter(_router).getAmountOut(_balances[Marketing_add],_balances[main_pair],IERC20(_usdt).balanceOf(main_pair));\r\n                    (uint amount0Out, uint amount1Out) = address(this) == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n                    IPancakePair(main_pair).swap(amount0Out, amount1Out, Marketing_add, new bytes(0));\r\n                    _balances[Marketing_add]=0;\r\n                }\r\n            }\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n    uint256 now_bonus;\r\n    mapping(address=\u003ebool)public user_bool;\r\n    address[] user;\r\n    function register(address new_user)private{\r\n        if(user_bool[new_user])return;\r\n        user_bool[new_user]=true;\r\n        user.push(new_user);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    // 持币分红\r\n    mapping(address=\u003euint)public last_DOG_bonus;\r\n    uint256 public total_DOG_bonus;\r\n    uint256 public pool_fee_bonus;\r\n    function DOG_bonus(address sender)private{\r\n        uint256 bouns = (total_DOG_bonus-last_DOG_bonus[sender])*_balances[sender]/_totalSupply;\r\n        last_DOG_bonus[sender]=total_DOG_bonus;\r\n        if(bouns!=0){\r\n            if(fee_pair[sender]){\r\n                pool_fee_bonus+=bouns;\r\n            }else{\r\n                IERC20(Doge_add).transfer(sender,bouns);\r\n            }\r\n        }\r\n    }\r\n    // 兑换狗币\r\n    function DOGE_SWAP()private{\r\n        if((_balances[address(this)]==0)||(_balances[main_pair]==0)||(_balances[main_pair2]==0))return;\r\n        uint256 now_dog_bonus = IERC20(Doge_add).balanceOf(address(this));\r\n        if(msg.sender == main_pair){\r\n            address[] memory path =new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = _bnb;\r\n            path[2] = Doge_add;\r\n            IPancakeRouter(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(_balances[address(this)],0,path,address(this),block.timestamp+10);\r\n            total_DOG_bonus += (IERC20(Doge_add).balanceOf(address(this)) - now_dog_bonus);\r\n        }else{\r\n            address[] memory path =new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _usdt;\r\n            IPancakeRouter(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(_balances[address(this)],0,path,address(STS_U),block.timestamp+10);\r\n            STS_U.get_usdt();\r\n            total_DOG_bonus += (IERC20(Doge_add).balanceOf(address(this)) - now_dog_bonus);\r\n        }\r\n    }\r\n\r\n    // 代际奖励\r\n    mapping(address=\u003eaddress)public pre_add;\r\n    function add_next_add(address recipient)private{\r\n        if(pre_add[recipient]==address(0)){\r\n            if(fee_pair[msg.sender])return;\r\n            pre_add[recipient]=msg.sender;\r\n        }\r\n    }\r\n    function Intergenerational_rewards(address sender,uint amount)private{\r\n        address pre=pre_add[sender];\r\n        uint total=amount*11;\r\n        uint a;\r\n        if(pre!=address(0)){\r\n            // 一代奖励\r\n            a=amount*5;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 二代奖励\r\n            a=amount*2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 三代奖励\r\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 四代奖励\r\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 五代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 六代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 七代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 八代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 九代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(total!=0){\r\n            _balances[address(0)]+=a;\r\n            emit Transfer(sender, address(0), total);\r\n        }\r\n    }\r\n\r\n\r\n    mapping(address=\u003ebool) public fee_pair;\r\n    // 薄饼识别手续费\r\n    uint256 public _liquidityFee = 20;\r\n    // 主要配对合约\r\n    address  main_pair;\r\n    address  main_pair2;\r\n    address _router;\r\n    address _usdt;\r\n    address _bnb;\r\n    address Marketing_add;//营销地址\r\n    address Marketing_add2;//营销地址\r\n    address Doge_add;\r\n    uint256 stop_total = 5*10**22;\r\n    U_STORAGE public STS_U;\r\n    address Owner;\r\n    constructor() {\r\n        _name = \"STS\";\r\n        _symbol = \"STS\";\r\n        // _mint(msg.sender,5000*10**22);\r\n        _mint(0x761E954B55949340110Af7d26E653179103bbD1c,5000*10**22);\r\n        // transfer(0x761E954B55949340110Af7d26E653179103bbD1c,5000*10**22);\r\n        set_info();\r\n        _allowances[address(this)][_router] = _totalSupply;\r\n        _allowances[msg.sender][_router] = _totalSupply;\r\n        STS_U = new U_STORAGE(_usdt);\r\n        // _allowances[address(0)][0xc69f5D5a77B5c293617ab2B1B1869144191fE489] = _totalSupply;\r\n        // pre_add[msg.sender]=msg.sender;\r\n        // pre_add[address(100)]=address(200);\r\n        // pre_add[address(200)]=address(100);\r\n    }\r\n    // 地址预测\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n            hex\u0027ff\u0027,\r\n            factory,\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027   // BNB\r\n            // hex\u00270ab1c22732234a358b1b7f5502e426dd5324047600eeee39766a5afed9b8f841\u0027//test\r\n        )))));\r\n    }\r\n    function set_info() private{\r\n        _router=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        _usdt= 0x55d398326f99059fF775485246999027B3197955;\r\n        _bnb= 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        main_pair = pairFor(IPancakeRouter(_router).factory(),address(this),_usdt);\r\n        main_pair2 = pairFor(IPancakeRouter(_router).factory(),address(this),_bnb);\r\n        fee_pair[main_pair]=true;\r\n        fee_pair[main_pair2]=true;\r\n        Marketing_add =0xc47E655BC521Bf15981134E392709af5b25947B4;\r\n        Marketing_add2 = 0xb315F61372F6C722B5D394fe19Fd0FA8860e3021;\r\n        Doge_add = _usdt;\r\n    }\r\n    // function set_info() private{\r\n    //     _router=0x7002994Ade218D1EC9BfCfA7ACf9C46eA042156E;\r\n    //     _usdt= 0x99833E039b6F64c6Df32D8f3563d6FAbe77A03a4;\r\n    //     _bnb= 0xb0e3D5e9A59cE2219E861B4DBea22079E8909e83;\r\n    //     main_pair = pairFor(IPancakeRouter(_router).factory(),address(this),_usdt);\r\n    //     main_pair2 = pairFor(IPancakeRouter(_router).factory(),address(this),_bnb);\r\n    //     fee_pair[main_pair]=true;\r\n    //     fee_pair[main_pair2]=true;\r\n    //     Marketing_add =0xc47E655BC521Bf15981134E392709af5b25947B4;\r\n    //     Marketing_add2 = 0xc69f5D5a77B5c293617ab2B1B1869144191fE489;\r\n    //     Doge_add = _usdt;\r\n    // }\r\n}\r\n\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\ninterface IPancakePair{\r\n    function sync() external;\r\n    function token0() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}"}}