
// File: /Users/markfrance/HBSC/HBSCNew/contracts/IBEP20.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the BEP20 standard as defined in the EIP.
 */
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: /Users/markfrance/HBSC/HBSCNew/contracts/IHBSC.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @dev Interface of the BEP20 standard as defined in the EIP.
 */
interface IHBSC {
	 function mintTo(address to, uint256 amount) external;
	 function approve(address spender, uint256 amount) external returns (bool);
	 function allowance(address owner, address spender) external view returns (uint256);
	 function balanceOf(address account) external view returns (uint256);
	 function burnTokens(uint256 amount) external returns (bool);
	 function transfer(address recipient, uint256 amount) external returns (bool);
	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

// File: /Users/markfrance/HBSC/HBSCNew/contracts/IPancakeRouter02.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts\interfaces\IPancakeRouter02.sol

pragma solidity >=0.6.2;

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: /Users/markfrance/HBSC/HBSCNew/contracts/SafeMath.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: /Users/markfrance/HBSC/HBSCNew/contracts/reservation/HBSCReservation.sol
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../SafeMath.sol";
import "../IBEP20.sol";
import "../IPancakeRouter02.sol";
import "../IHBSC.sol";

/**
 * @dev HBSC Reservation contract
 */
contract HBSCReservation{

using SafeMath for uint256;

	struct Pool {
        uint256 endTime;
        uint256 totalUsers;
        uint256 totalContribution;
    }

    struct ContributionShare {
        uint256 userContribution;
        uint256 currentShare;
    }

    address _adminAddress;
    address constant _pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address owner;
    IPancakeRouter02 _pancakeRouter;
    IHBSC _hbscToken;
    IBEP20 _busdToken;
    uint256 _poolLength;
    uint256 totalContribution; //in BUSD

    uint8 constant MAX_POOLS = 20;
    bool complete = false;
    bool swapAndLiquifyEnabled = false;
    
    uint256 public endDate;
    
    mapping(uint8 => Pool) public pools;
    mapping(uint256 => mapping(address => uint256)) public amountPerPool;
    mapping(address => bool) public hasClaimed;

    modifier onlyAdmin() {
        require(msg.sender == _adminAddress || msg.sender == owner, "Admin only function");
        _;
    }

  	modifier reservationDatePassed() {
        require(block.timestamp > endDate, "Please wait until reservation period has ended");
        _;
    }

    modifier reservationCompleted() {
        require(complete == true, "Reservation must first be completed");
        _;
    }

    modifier onlyAfter365Days() {
        require(block.timestamp > (endDate + 365 days), "Admin can only claim after 1 year");
        _;
    }

    event reservationMade(
        address user,
        uint256 amount
    );

    event tokensClaimed(
        address user,
        uint256 amount
    );

    event SwapAndLiquifyEnabledUpdated(
        address user,
        bool enabled
    );

	 constructor(
        address hbscTokenAddress, 
        address busdTokenAddress, 
        address adminWallet, 
        uint256 poolLength
    ) 
	{
	 	_pancakeRouter = IPancakeRouter02(_pancakeRouterAddress);
	 	_hbscToken = IHBSC(hbscTokenAddress);
        _busdToken = IBEP20(busdTokenAddress);
        _poolLength = poolLength;
        owner = msg.sender;
        _adminAddress = adminWallet;
        endDate = block.timestamp + (_poolLength * (MAX_POOLS + 1));
        _hbscToken.approve(_pancakeRouterAddress, 2**256 - 1);
        _busdToken.approve(_pancakeRouterAddress, 2**256 - 1);
        createPools();
	}

    /**
     * @dev Returns array of all pool data
     * Used for UI
     */
    function getAllPools() 
        external 
        view 
        returns (Pool[] memory)
    {
        Pool[] memory ret = new Pool[](MAX_POOLS);
        for (uint8 i = 0; i < MAX_POOLS; i++) {
            ret[i] = pools[i];
        }
        return ret;
    }

    /**
     * @dev Returns array of all contribution and current token share per user per pool
     * Used for UI
     */
    function getAllContributionsAndShare(address user) 
        external 
        view 
        returns (ContributionShare[] memory)
    {
        ContributionShare[] memory ret = new ContributionShare[](MAX_POOLS);
        uint256 contribution;
        uint256 share;
        for (uint8 i = 0; i < MAX_POOLS; i++) {
            contribution = getContributionAmount(user, i);
            share = getTokenShare(i, contribution);
            ret[i] = ContributionShare(contribution, share);
        }
        return ret;
    }

     /**
     * @dev Allows user to contribute to specified pool
     */
    function reserve(uint8 poolId, uint256 busdAmount) 
    	external 
        returns (bool)
    {
        require(_busdToken.allowance(msg.sender, address(this)) >= busdAmount, "Please first approve BUSD");
        require(_busdToken.transferFrom(msg.sender, address(this), busdAmount), "Transfer failed");
    	Pool memory requestedPool = pools[poolId];
    	require(requestedPool.endTime > block.timestamp , "Pool is closed");

    	requestedPool.totalUsers++;
    	requestedPool.totalContribution += busdAmount;
    	amountPerPool[poolId][msg.sender] += busdAmount;

        pools[poolId] = requestedPool;
        totalContribution += busdAmount;

        emit reservationMade(msg.sender, busdAmount);
        return true;
    }

     /**
     * @dev Allows user to claim tokens based on contribution amounts from each pool
     */
    function claim() 
        external
    	reservationDatePassed 
        returns (bool)
    {
    	require(hasClaimed[msg.sender] == false, "User already claimed tokens");
    	uint256 tokensToClaim;
    	for(uint8 i = 0; i< MAX_POOLS; i++){
    		uint256 amountContributed = getContributionAmount(msg.sender, i);
    		if(amountContributed > 0){
    			tokensToClaim += getTokenShare(i, amountContributed);
    		}
    	}

    	_hbscToken.mintTo(msg.sender, tokensToClaim * 10 ** 18);
    	hasClaimed[msg.sender] = true;
        emit tokensClaimed(msg.sender, tokensToClaim);
        return true;
    }

    /**
     * @dev Mints tokens before pushing to pancakeswap, transfers busd to admin used for dividends
     */
    function CompleteReservations() 
        external
        onlyAdmin
        reservationDatePassed
        returns (bool)
    {
        uint256 tokensToSend = 4000 * 10 ** 18;
        uint256 busdToPush = totalContribution.div(2);
     
        _hbscToken.mintTo(address(this), tokensToSend);
        _busdToken.transfer(_adminAddress, busdToPush);

        complete = true;
        return true;
    }

    /**
     * @dev Update the swapAndLiquifyEnabled, used by PancakeSwap.
     */
    function updateSwapAndLiquifyEnabled(bool enabled) public onlyAdmin {
        swapAndLiquifyEnabled = enabled;
        emit SwapAndLiquifyEnabledUpdated(msg.sender, enabled);
    }

     /**
     * @dev Push liquidity and creates a pair on pancake swap after reservation period
     */
    function pushLiquidityToPancakeSwap() 
        external
        onlyAdmin
        reservationCompleted
        returns (bool)
    {
        uint256 tokensToSend = 4000 * 10 ** 18;
        uint256 busdToPush = totalContribution.div(2);

        _pancakeRouter.addLiquidity
        (
            address(_hbscToken),
            address(_busdToken),
            tokensToSend,
            busdToPush,
            0,
            0,
            address(this),
            block.timestamp + 10 minutes
        );

        return true;
    }

    /**
     * @dev Allows dev to claim liquidity tokens
     */
    function claimLPToken(address _token) 
        external 
        onlyAdmin 
        onlyAfter365Days
    {    
        require(IBEP20(_token).transfer(
            _adminAddress, 
            IBEP20(_token).balanceOf(address(this))
        ), "Error claiming LP Tokens");
    }

    /**
     * @dev Gets contribution amount of user for specific pool
    */
    function getContributionAmount(address user, uint8 poolId) 
        public 
        view 
        returns(uint256) 
    {
        return amountPerPool[poolId][user];
    }

    /**
     * @dev Gets amount of tokens based on amount contributed in pool
    */
    function getTokenShare(uint8 poolId, uint256 amountContributed)
        public
        view
        returns(uint256)
    {
        uint256 total = pools[poolId].totalContribution;
        if(amountContributed <= 0 || total <= 0){
            return 0;
        }
        
        return amountContributed.mul(200) / total;
    }

    /**
     * @dev Creates the inital pools
     */
    function createPools() 
        private
    {
        uint256 endTime = block.timestamp + (_poolLength * 2); //First pool closes after 2 days

        for(uint8 i = 0; i< MAX_POOLS;i++){

            pools[i] = Pool(endTime, 0, 0);
            endTime += _poolLength;
        }
    }
}
