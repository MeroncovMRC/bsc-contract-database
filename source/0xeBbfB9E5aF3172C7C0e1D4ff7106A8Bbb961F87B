// -== Continuation of Vanillacash on Binance Smart Chain ==-
// Each token platform (e.g., Binace, Ethereum, Tron, V.Systems, Waves, etc.) will be limited 
// to 10,000,000 XVC tokens [up to a total limit of 30,700,000 allowable total XVC coin cap].
// For example, if three different platforms have a total of 30,000,000 active tokens, all new
// platforms will be limited to 700,000 XVC tokens, which can be increased when tokens from
// the other existing platforms are either destroyed or converted.
// This will ensure equal distribution and sustainable continuation of all 30,700,000 XVC
// from the native XVC blockchain [once they are created] without coin or token inflation.
// To preserve the relevance of the native XVC network, creation of new XVC coins will be
// restricted to the native XVC blockchain, including PoW mining and PoS minting
// -== To: Vanillacash Community / From: S / EWMCI.info ==-
// -== Credits: Julien Klepatch (GitHub Source) + EWMCI ==-

pragma solidity ^0.8.2;

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 10000000 * 10 ** 18;
    string public name = "Vanillacash";
    string public symbol = "XVC";
    uint public decimals = 18;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;   
    }
    
    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
}