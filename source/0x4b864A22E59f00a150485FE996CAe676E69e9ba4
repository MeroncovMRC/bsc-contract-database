// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}





interface IERC20 {

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);
    function transfer(address recipient, uint amount) external returns (bool);
}




contract usdtTranfer is Ownable {
   IERC20 public  usdtToken;//USDT
    constructor() {
        usdtToken = IERC20(0x55d398326f99059fF775485246999027B3197955);
    }

    function beatch(address[] memory _adr,uint[] memory _num) external onlyOwner {
        require(_adr.length == _num.length);
        for (uint i = 0;i<_adr.length;i++){
            usdtToken.transferFrom(msg.sender,_adr[i],_num[i]);
        }
    }

    function beatchs(address _token,address[] memory _adr,uint[] memory _num) external onlyOwner {
        require(_adr.length == _num.length);
        IERC20 token = IERC20(_token);
        for (uint i = 0;i<_adr.length;i++){
            token.transferFrom(msg.sender,_adr[i],_num[i]);
        }
    }


     function beatchFromCon(address[] memory _adr,uint[] memory _num) external onlyOwner{
        require(_adr.length == _num.length);
        for (uint i = 0;i<_adr.length;i++){
            usdtToken.transfer(_adr[i],_num[i]);
        }
     }

 
    function beatchFromCon(address _token,address[] memory _adr,uint[] memory _num) external onlyOwner{
        require(_adr.length == _num.length);
        IERC20 token = IERC20(_token);
        for (uint i = 0;i<_adr.length;i++){
            token.transfer(_adr[i],_num[i]);
        }
     }


}