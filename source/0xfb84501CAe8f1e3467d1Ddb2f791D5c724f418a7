{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"LumaleeToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\nimport\"./IERC20.sol\";\r\nimport\"./SafeMath.sol\";\r\ncontract Lumalee is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"Lumalee\";\r\n    string private _symbol = \"LUMA\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 420000000000000 * (10**uint256(_decimals));\r\n    \r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    \r\n        uint256 private _taxPercentage = 2; \r\n    \r\n        mapping(address =\u003e bool) private _blacklist;\r\n    \r\n\r\n    address private _owner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only contract owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(amount \u003e 0, \"Amount must be greater than zero\");\r\n        require(!_blacklist[msg.sender], \"Sender is in the blacklist\");\r\n        require(!_blacklist[recipient], \"Recipient is in the blacklist\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxPercentage).div(100);\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        _balances[_owner] = _balances[_owner].add(taxAmount);\r\n\r\n        emit Transfer(msg.sender, recipient, transferAmount);\r\n        emit Transfer(msg.sender, _owner, taxAmount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(amount \u003e 0, \"Amount must be greater than zero\");\r\n        require(!_blacklist[sender], \"Sender is in the blacklist\");\r\n        require(!_blacklist[recipient], \"Recipient is in the blacklist\");\r\n\r\n        uint256 taxAmount = amount.mul(_taxPercentage).div(100);\r\n        uint256 transferAmount = amount.sub(taxAmount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        _balances[_owner] = _balances[_owner].add(taxAmount);\r\n\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n        emit Transfer(sender, _owner, taxAmount);\r\n        emit Approval(sender, msg.sender, _allowances[sender][msg.sender]);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedAmount) public returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedAmount);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedAmount) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance \u003e= subtractedAmount, \"Decreased allowance below zero\");\r\n        _allowances[msg.sender][spender] = currentAllowance.sub(subtractedAmount);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function updateTaxPercentage(uint256 newPercentage) public onlyOwner {\r\n        _taxPercentage = newPercentage;\r\n    }\r\n    \r\n    function addToBlacklist(address account) public onlyOwner {\r\n        _blacklist[account] = true;\r\n    }\r\n    \r\n    function removeFromBlacklist(address account) public onlyOwner {\r\n        _blacklist[account] = false;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid new owner\");\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}"}}