//░██████╗████████╗██████╗░███████╗███████╗████████╗  ██████╗░░█████╗░░██████╗░███████╗
//██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔════╝╚══██╔══╝  ██╔══██╗██╔══██╗██╔════╝░██╔════╝
//╚█████╗░░░░██║░░░██████╔╝█████╗░░█████╗░░░░░██║░░░  ██║░░██║██║░░██║██║░░██╗░█████╗░░
//░╚═══██╗░░░██║░░░██╔══██╗██╔══╝░░██╔══╝░░░░░██║░░░  ██║░░██║██║░░██║██║░░╚██╗██╔══╝░░
//██████╔╝░░░██║░░░██║░░██║███████╗███████╗░░░██║░░░  ██████╔╝╚█████╔╝╚██████╔╝███████╗
//╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚══════╝░░░╚═╝░░░  ╚═════╝░░╚════╝░░╚═════╝░╚══════╝
//Created by 🅒🅡🅨🅟🅣🅞  🅗🅤🅑  -  🅦🅔🅑➌  🅐🅖🅔🅝🅒🅨 // cryptohub.agency - power by Black Hawk https://blackhawk.finance/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

/*
    Details needed for deployment
    pancakeRouter: 0x10ED43C718714eb63d5aA57B78B54704E256024E
    wbnb: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c
*/
/*
    Edit these constant before deployement
*/
string constant NAME = "STREET DOGE COIN";

string constant SYMBOL = "STREETDOGE";

uint256 constant TOTAL_SUPPLY = 200000000;

uint256 constant DECIMALS = 18;

// used to calculate percentages (so that we can use decimals) if you change this please change the tax constants below
// if in doubt leave it as is
uint256 constant FEE_DENOMINATOR = 1000;

/*
    Percentages are calculated by dividing the tax by the FEE_DENOMINATOR
 */
uint64 constant SELL_ADMIN_TAX = 70;

// 7%
uint64 constant SELL_AUTO_LP_TAX = 5;

// 0.5%
uint64 constant SELL_CHARITY_TAX = 5;

// 0.5%
uint64 constant SELL_REFLECTION_TAX = 10;

// 1%
uint64 constant BUY_ADMIN_TAX = 30;

// 3%
uint64 constant BUY_AUTO_LP_TAX = 5;

// 0.5%
uint64 constant BUY_CHARITY_TAX = 5;

// 0.5%
uint64 constant BUY_REFLECTION_TAX = 10;

// 1%
uint256 constant MAX_SELL_AMOUNT_IN_STREET_DOGE = TOTAL_SUPPLY * 10 ** DECIMALS;

// 1 token (setting this too low can cause issues with swap router)
// This is the minimum amount of tokens for reflextion/auto LP to trigger a swap
uint256 constant MIN_TOKENS_TO_SWAP = 10 ** DECIMALS;

uint256 constant MIN_BALANCE_TO_QUALIFY_FOR_REFLECTION = 10 ** DECIMALS;

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(
        address account
    ) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(
        address owner,
        address spender
    ) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(
        address spender,
        uint256 amount
    ) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(
            currentAllowance >= subtractedValue,
            "ERC20: decreased allowance below zero"
        );
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(
            fromBalance >= amount,
            "ERC20: transfer amount exceeds balance"
        );
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(
                currentAllowance >= amount,
                "ERC20: insufficient allowance"
            );
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function quote(
        uint amountA,
        uint reserveA,
        uint reserveB
    ) external pure returns (uint amountB);

    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountOut);

    function getAmountIn(
        uint amountOut,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountIn);

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function getAmountsIn(
        uint amountOut,
        address[] calldata path
    ) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(
        uint256 a,
        uint256 b
    ) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

struct ShareHolder {
    uint256 shares;
    uint256 rewardDebt;
    uint256 claimed;
    uint256 pending;
}

contract HODLRewardsDistributor is Ownable {
    using SafeMath for uint256;

    bool _inSwapAndLiquify;
    modifier inSwapAndLiquify() {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }

    address public immutable wbnb;

    uint256 public accPerShare; // Accumulated per share, times 1e36.
    uint256 public totalShares; // total number of shares
    uint256 public totalClaimed; // total amount claimed
    uint256 public totalRewardsDebt; // total amount claimed

    // use getShare-holderInfo function to get this data
    mapping(address => ShareHolder) shareHolders;
    address[] public allShareHolders;
    mapping(address => uint256) public indexOfShareHolders;

    uint256 private _lastProccessedIndex = 1;

    mapping(address => bool) public excludedFromRewards;

    // events
    event Claimed(address indexed claimer, uint256 indexed amount);
    event RewardsAdded(uint256 indexed amount);
    event ShareUpdated(
        address indexed shareHolder,
        uint256 indexed sharesAmount
    );
    event IncludedInRewards(address indexed shareHolder);
    event ExcludedFromRewards(address indexed shareHolder);

    receive() external payable {
        if (!_inSwapAndLiquify) _updateGlobalShares(msg.value);
    }

    constructor(address wbnb_) {
        wbnb = wbnb_;
        allShareHolders.push(address(0)); // use the index zero for address zero
    }

    /**
        retruns the pending rewards amount
        */
    function pending(
        address sharholderAddress_
    ) public view returns (uint256 pendingAmount) {
        ShareHolder storage user = shareHolders[sharholderAddress_];
        pendingAmount = user.shares.mul(accPerShare).div(1e36).sub(
            user.rewardDebt
        );
    }

    function totalPending() public view returns (uint256) {
        return accPerShare.mul(totalShares).div(1e36).sub(totalRewardsDebt);
    }

    /**
        returns information about the share holder
        */
    function shareHolderInfo(
        address shareHoldr_
    ) external view returns (ShareHolder memory) {
        ShareHolder storage user = shareHolders[shareHoldr_];
        return
            ShareHolder(
                user.shares, // How many tokens the user is holding.
                user.rewardDebt, // see @masterChef contract for more details
                user.claimed,
                pending(shareHoldr_)
            );
    }

    function holders() external view returns (uint256) {
        return allShareHolders.length;
    }

    function _setShare(address sharholderAddress_, uint256 amount_) internal {
        ShareHolder storage user = shareHolders[sharholderAddress_];

        // pay any pending rewards
        if (user.shares > 0) claimPending(sharholderAddress_);
        // update total shares
        _updateUserShares(sharholderAddress_, amount_);
    }

    /*
        excludes shareHolderToBeExcluded_ from participating in rewards
        Will distribute what ever pending rewards he has to all other shareholders
        This is needed in case a contract that can't claim needs to be excluded
        If owner wants the excluded to receive their pending rewards he can call claimPending on their behalf before calling this function
    */
    function excludeFromRewards(
        address shareHolderToBeExcluded_
    ) external onlyOwner {
        _excludeFromRewards(shareHolderToBeExcluded_);
    }

    function _excludeFromRewards(address shareHolderToBeExcluded_) internal {
        if (excludedFromRewards[shareHolderToBeExcluded_]) return;

        uint256 amountPending = pending(shareHolderToBeExcluded_);
        // update this user's shares to 0
        _updateUserShares(shareHolderToBeExcluded_, 0);
        // distribute his pending share to all shareholders
        if (amountPending > 0) _updateGlobalShares(amountPending);
        excludedFromRewards[shareHolderToBeExcluded_] = true;
        emit ExcludedFromRewards(shareHolderToBeExcluded_);
    }

    /** 
        @dev
        claim pending rewards for sharholderAddress_
        can be called by anyone but only sharholderAddress_
        can receive the reward
    */
    function claimPending(address sharholderAddress_) public {
        ShareHolder storage user = shareHolders[sharholderAddress_];

        uint256 pendingAmount = user.shares.mul(accPerShare).div(1e36).sub(
            user.rewardDebt
        );

        if (pendingAmount <= 0) return;

        (bool sent, ) = payable(sharholderAddress_).call{value: pendingAmount}(
            ""
        );
        //if !sent means probably the receiver is a non payable address
        if (!sent) return;

        emit Claimed(sharholderAddress_, pendingAmount);

        user.claimed = user.claimed.add(pendingAmount);
        totalClaimed = totalClaimed.add(pendingAmount);

        totalRewardsDebt = totalRewardsDebt.sub(user.rewardDebt);
        user.rewardDebt = user.shares.mul(accPerShare).div(1e36);
        totalRewardsDebt = totalRewardsDebt.add(user.rewardDebt);
    }

    function batchProcessClaims(uint256 gas) public {
        if (gasleft() < gas) return;
        uint256 gasUsed = 0;
        uint256 gasLeft = gasleft();
        uint256 iterations = 1; // index 0 is ocupied by address(0)

        // we
        while (gasUsed < gas && iterations < allShareHolders.length) {
            claimPending(allShareHolders[_lastProccessedIndex]);
            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
            gasLeft = gasleft();
            _incrementLastProccessed();
            iterations++;
        }
    }

    /**
        updates the accumulatedPerShare amount based on the new amount and total shares
        */
    uint256 reserved = 0;

    function _updateGlobalShares(uint256 amount_) internal {
        if (totalShares == 0) {
            reserved = reserved.add(amount_);
            return;
        }
        accPerShare = accPerShare.add(amount_.mul(1e36).div(totalShares)).add(
            reserved.mul(1e36).div(totalShares)
        );
        emit RewardsAdded(amount_);
    }

    /**
        updates a user share
    */
    function _updateUserShares(
        address sharholderAddress_,
        uint256 newAmount_
    ) internal {
        ShareHolder storage user = shareHolders[sharholderAddress_];
        totalShares = totalShares.sub(user.shares).add(newAmount_);
        totalRewardsDebt = totalRewardsDebt.sub(user.rewardDebt);
        user.shares = newAmount_;
        user.rewardDebt = user.shares.mul(accPerShare).div(1e36);
        totalRewardsDebt = totalRewardsDebt.add(user.rewardDebt);
        if (user.shares > 0 && indexOfShareHolders[sharholderAddress_] == 0) {
            // add this shareHolder to array
            allShareHolders.push(sharholderAddress_);

            indexOfShareHolders[sharholderAddress_] =
                allShareHolders.length -
                1;
        } else if (
            user.shares == 0 && indexOfShareHolders[sharholderAddress_] != 0
        ) {
            // remove this share holder from array
            uint256 index = indexOfShareHolders[sharholderAddress_];

            allShareHolders[index] = allShareHolders[
                allShareHolders.length - 1
            ];

            indexOfShareHolders[
                allShareHolders[allShareHolders.length - 1]
            ] = index;

            allShareHolders.pop();

            indexOfShareHolders[sharholderAddress_] = 0;
        }
        emit ShareUpdated(sharholderAddress_, newAmount_);
    }

    function _incrementLastProccessed() internal {
        _lastProccessedIndex++;
        if (_lastProccessedIndex >= allShareHolders.length)
            _lastProccessedIndex = 1;
    }
}

// 1 token
struct Tax {
    uint64 autoLP;
    uint64 charity;
    uint64 reflection;
    uint64 admin;
}

contract StreeDogeERC20 is ERC20, Ownable, HODLRewardsDistributor {
    IUniswapV2Router02 public immutable pancakeRouter;
    address public immutable pancakePair;

    address public adminWallet;
    address public charityWallet;
    address public autoLPWallet;

    Tax public sellTax =
        Tax(
            SELL_AUTO_LP_TAX,
            SELL_CHARITY_TAX,
            SELL_REFLECTION_TAX,
            SELL_ADMIN_TAX
        );
    Tax public buyTax =
        Tax(
            BUY_AUTO_LP_TAX,
            BUY_CHARITY_TAX,
            BUY_REFLECTION_TAX,
            BUY_ADMIN_TAX
        );

    uint256 public reflectionReserve = 0;
    uint256 public autoLPReserve = 0;

    mapping(address => bool) public isExcludedFromFees;
    mapping(address => bool) public isExcludedFromMaxSell;

    mapping(address => bool) public isLP;

    uint256 public maxSellAmount = MAX_SELL_AMOUNT_IN_STREET_DOGE;

    bool public swapAndLiquifyEnabled = true;

    bool public taxEnabled = false;

    bool public swapReflectionEnabled = true;

    bool public autoDistribute = true;

    uint256 public maxAutoProcessGas = 500000;

    uint256 public minShareForRewards = MIN_BALANCE_TO_QUALIFY_FOR_REFLECTION;

    uint256 minToSwap = MIN_TOKENS_TO_SWAP;

    constructor(
        IUniswapV2Router02 _pancakeRouter,
        address _wbnb,
        address _charityWallet,
        address _autoLPWallet
    ) ERC20("STREET DOGE COIN", "STREET DOGE") HODLRewardsDistributor(_wbnb) {
        pancakeRouter = _pancakeRouter;

        charityWallet = _charityWallet;
        autoLPWallet = _autoLPWallet;
        adminWallet = msg.sender;

        pancakePair = IUniswapV2Factory(_pancakeRouter.factory()).createPair(
            address(this),
            _wbnb
        );

        _approve(address(this), address(pancakeRouter), type(uint256).max);

        isExcludedFromFees[address(this)] = true;
        isExcludedFromFees[msg.sender] = true;
        isExcludedFromFees[_charityWallet] = true;
        isExcludedFromFees[_autoLPWallet] = true;

        isExcludedFromMaxSell[address(this)] = true;
        isExcludedFromMaxSell[msg.sender] = true;
        isExcludedFromMaxSell[_charityWallet] = true;
        isExcludedFromMaxSell[_autoLPWallet] = true;

        _excludeFromRewards(pancakePair);
        _excludeFromRewards(address(this));
        _excludeFromRewards(msg.sender);
        _excludeFromRewards(_charityWallet);
        _excludeFromRewards(_autoLPWallet);
        _excludeFromRewards(address(_pancakeRouter));

        isLP[pancakePair] = true;

        _mint(msg.sender, TOTAL_SUPPLY * 10 ** DECIMALS);
    }

    function setExemptFromMaxSell(
        address _address,
        bool _exempt
    ) external onlyOwner {
        isExcludedFromMaxSell[_address] = _exempt;
    }

    function setProcessingGasLimit(uint256 maxAmount_) external onlyOwner {
        maxAutoProcessGas = maxAmount_;
    }

    function setAutoDistribute(bool _autoDistribute) external onlyOwner {
        autoDistribute = _autoDistribute;
    }

    function setSwapReflectionEnabled(
        bool _swapReflectionEnabled
    ) external onlyOwner {
        swapReflectionEnabled = _swapReflectionEnabled;
    }

    function setTaxEnabled(bool _taxEnabled) external onlyOwner {
        taxEnabled = _taxEnabled;
    }

    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        swapAndLiquifyEnabled = _enabled;
    }

    function setIsLp(address _lp, bool _isLp) external onlyOwner {
        require(_lp != pancakePair, "Can't change pair");
        isLP[_lp] = _isLp;
        // exclude from rewards
        if (_isLp) {
            _excludeFromRewards(_lp);
        } else {
            _excludeFromRewards(_lp);
        }
    }

    function setExemptFromFees(
        address _address,
        bool _exempt
    ) external onlyOwner {
        isExcludedFromFees[_address] = _exempt;
    }

    function setBuyTax(
        uint64 _autoLP,
        uint64 _charity,
        uint64 _reflection,
        uint64 _admin
    ) external onlyOwner {
        require(
            _autoLP + _charity + _reflection + _admin <= 190, // max tax is 19%
            "Invalid tax"
        );
        buyTax = Tax(_autoLP, _charity, _reflection, _admin);
    }

    function setSellTax(
        uint64 _autoLP,
        uint64 _charity,
        uint64 _reflection,
        uint64 _admin
    ) external onlyOwner {
        require(
            _autoLP + _charity + _reflection + _admin <= 190, // max tax is 19%
            "Invalid tax"
        );
        sellTax = Tax(_autoLP, _charity, _reflection, _admin);
    }

    function setMinToSwap(uint256 _minToSwap) external onlyOwner {
        minToSwap = _minToSwap;
    }

    function setMinSharePerRewards(
        uint256 _minSharePerRewards
    ) external onlyOwner {
        minShareForRewards = _minSharePerRewards;
    }

    function _customTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool) {
        if ((!isLP[sender] && !isLP[recipient]) || !taxEnabled) {
            if (swapReflectionEnabled && autoLPReserve / 2 >= minToSwap) {
                swapAndLiquify(autoLPReserve);
                autoLPReserve = 0;
            }

            if (swapReflectionEnabled && reflectionReserve > minToSwap) {
                swapForBNB(reflectionReserve);
                reflectionReserve = 0;
            }
            _transfer(sender, recipient, amount);
            return true;
        } else {
            // this is a buy or sell
            _transferWithFees(sender, recipient, amount);
            return true;
        }
    }

    function _transferWithFees(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        if (isExcludedFromFees[sender] || isExcludedFromFees[recipient]) {
            _transfer(sender, recipient, amount);
        } else {
            // if sell check max sell amount
            if (isLP[sender] && !isExcludedFromMaxSell[recipient]) {
                require(
                    amount <= maxSellAmount,
                    "Sell amount exceeds max sell amount"
                );
            }

            bool inSwap = sender == pancakePair || recipient == pancakePair;
            Tax storage currentTax = isLP[sender] ? buyTax : sellTax;

            uint256 autoLPAmount = (amount * currentTax.autoLP) /
                FEE_DENOMINATOR;
            uint256 charityAmount = (amount * currentTax.charity) /
                FEE_DENOMINATOR;
            uint256 reflectionAmount = (amount * currentTax.reflection) /
                FEE_DENOMINATOR;
            uint256 adminAmount = (amount * currentTax.admin) / FEE_DENOMINATOR;

            _transfer(sender, charityWallet, charityAmount);
            _transfer(sender, adminWallet, adminAmount);
            _transfer(sender, address(this), reflectionAmount + autoLPAmount);

            uint256 left = amount -
                autoLPAmount -
                charityAmount -
                adminAmount -
                reflectionAmount;

            reflectionReserve += reflectionAmount;
            autoLPReserve += autoLPAmount;
            if (!inSwap) {
                if (swapReflectionEnabled && autoLPReserve / 2 >= minToSwap) {
                    swapAndLiquify(autoLPReserve);
                    autoLPReserve = 0;
                }

                if (swapReflectionEnabled && reflectionReserve > minToSwap) {
                    swapForBNB(reflectionReserve);
                    reflectionReserve = 0;
                }
            }

            _transfer(sender, recipient, left);
        }
    }

    function setMaxSellAmount(uint256 _maxSellAmount) external onlyOwner {
        maxSellAmount = _maxSellAmount;
    }

    function setAdminWallet(address _adminWallet) external onlyOwner {
        require(_adminWallet != address(0), "NO ZERO ADDRESS");
        adminWallet = _adminWallet;
    }

    function setAutoLPWallet(address _autoLPWallet) external onlyOwner {
        require(_autoLPWallet != address(0), "NO ZERO ADDRESS");
        autoLPWallet = _autoLPWallet;
    }

    function setCharityWallet(address _charityWallet) external onlyOwner {
        require(_charityWallet != address(0), "NO ZERO ADDRESS");
        charityWallet = _charityWallet;
    }

    function swapAndLiquify(uint256 _amount) internal inSwapAndLiquify {
        if (_amount == 0) return;
        uint256 half = _amount / 2;
        uint256 otherHalf = _amount - half;

        uint256 initialBalance = address(this).balance;

        swapForBNB(half);

        uint256 newBalance = address(this).balance - initialBalance;

        addLiquidity(otherHalf, newBalance);
    }

    function swapForBNB(uint256 _amount) internal {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pancakeRouter.WETH();

        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            _amount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 _tokenAmount, uint256 _bnbAmount) private {
        pancakeRouter.addLiquidityETH{value: _bnbAmount}(
            address(this),
            _tokenAmount,
            0,
            0,
            autoLPWallet,
            block.timestamp
        );
    }

    function _afterTokenTransfer(
        address from_,
        address to_,
        uint256 amount_
    ) internal override {
        super._afterTokenTransfer(from_, to_, amount_);

        _updateShare(from_);
        _updateShare(to_);
        _massProcess();
    }

    function _massProcess() internal {
        if (autoDistribute)
            batchProcessClaims(
                gasleft() > maxAutoProcessGas
                    ? maxAutoProcessGas
                    : (gasleft() * 80) / 100
            );
    }

    function _updateShare(address wallet) internal {
        if (!excludedFromRewards[wallet])
            _setShare(
                wallet,
                balanceOf(wallet) > minShareForRewards ? balanceOf(wallet) : 0
            );
    }

    function decimals() public view virtual override returns (uint8) {
        return uint8(DECIMALS);
    }

    function transfer(
        address to_,
        uint256 amount_
    ) public virtual override returns (bool) {
        return _customTransfer(_msgSender(), to_, amount_);
    }

    function transferFrom(
        address from_,
        address to_,
        uint256 amount_
    ) public virtual override returns (bool) {
        // check allowance
        require(allowance(from_, _msgSender()) >= amount_, "> allowance");
        bool success = _customTransfer(from_, to_, amount_);
        approve(from_, allowance(from_, _msgSender()) - (amount_));
        return success;
    }

    function clearLostTokens(
        address tokenAddress,
        address to,
        uint256 amount
    ) external onlyOwner {
        if (tokenAddress == address(this)) {
            uint256 tokenBalacne = balanceOf(address(this));
            require(
                tokenBalacne - autoLPReserve - reflectionReserve >= amount,
                "Not enough tokens"
            );
            amount = tokenBalacne - autoLPReserve - reflectionReserve;
        }
        IERC20(tokenAddress).transfer(to, amount);
    }

    /*
        allow shareHolderToBeExcluded_ to participating in rewards
    */
    function includeInRewards(
        address shareHolderToBeIncluded_
    ) external onlyOwner {
        require(
            excludedFromRewards[shareHolderToBeIncluded_],
            "HODLRewardsDistributor: not excluded"
        );

        _updateUserShares(
            shareHolderToBeIncluded_,
            balanceOf(shareHolderToBeIncluded_)
        );
        excludedFromRewards[shareHolderToBeIncluded_] = false;
        emit IncludedInRewards(shareHolderToBeIncluded_);
    }
}