
// File: contracts/GaslessVaultFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {GaslessVaultProxy} from "./GaslessVaultProxy.sol";
import {GaslessVaultInstance} from "./GaslessVaultInstance.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {IFactory} from "./interfaces/IFactory.sol";
import {IVault} from "./interfaces/IVault.sol";

// GaslessVaultFactory
// This factory deploys new proxy instances through build()
// Deployed proxy addresses are logged
contract GaslessVaultFactory is Ownable, IFactory {
    uint256 private immutable chainID;
    address private ecosystemFund;
    uint256 private ecosystemFee;
    address private vaultImplementation;

    mapping(address => uint256) public nonces;
    mapping(address => address) public vaults;

    // various hashes
    bytes32 public immutable BUILD_HASH = keccak256(bytes("BUILD_HASH"));
    bytes32 public immutable ETH_TRANSFER_HASH =
        keccak256(bytes("ETH_TRANSFER_HASH"));
    bytes32 public immutable ERC20_TRANSFER_HASH =
        keccak256(bytes("ERC20_TRANSFER_HASH"));
    bytes32 public immutable CALL_FN_HASH = keccak256(bytes("CALL_FN_HASH"));
    bytes32 public immutable DOMAIN_SEPARATOR;

    constructor() {
        chainID = block.chainid;

        bytes32 typehash = keccak256(
            bytes(
                "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
            )
        );

        DOMAIN_SEPARATOR = keccak256(
            abi.encode(typehash, "build", "1", block.chainid, address(this))
        );

        ecosystemFund = msg.sender;

        vaultImplementation = address(new GaslessVaultInstance());
    }

    // deploys a new proxy instance
    // sets custom owner of proxy
    function build(
        uint256 nonce,
        address whom,
        bytes memory sig
    ) public returns (address payable vault) {
        bytes32 digest = prefixed(
            keccak256(abi.encode(BUILD_HASH, nonce, whom))
        );

        _checkNonce(whom, nonce);

        // Verify the _owner with the address recovered from the signatures
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);
        require(whom == ecrecover(digest, v, r, s), "invalid-signatures");

        require(vaults[whom] == address(0), "Vault already created");

        // Verify the _owner is not address zero
        require(whom != address(0), "invalid-address-0");

        vault = payable(address(new GaslessVaultProxy(address(this))));
        emit Created(vault, whom);
        vaults[whom] = vault;

        // init vault
        IVault(vault).initialize(whom, address(this));
    }

    function transferToken(
        uint256 nonce,
        address token,
        address from,
        address to,
        uint256 amount,
        bytes memory sig
    ) external {
        _checkNonce(from, nonce);

        bytes32 digest = prefixed(
            keccak256(
                abi.encode(ERC20_TRANSFER_HASH, nonce, token, from, to, amount)
            )
        );

        // Verify the _owner with the address recovered from the signatures
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);
        require(from == ecrecover(digest, v, r, s), "invalid-signatures");

        // Verify the _owner is not address zero
        require(vaults[from] != address(0), "no vault for user");

        GaslessVaultInstance vault = GaslessVaultInstance(vaults[from]);
        vault.transferERC20(token, amount, to);
    }

    function transferETH(
        uint256 nonce,
        address from,
        address to,
        uint256 amount,
        bytes memory sig
    ) external {
        _checkNonce(from, nonce);

        bytes32 digest = prefixed(
            keccak256(abi.encode(ETH_TRANSFER_HASH, nonce, from, to, amount))
        );

        // Verify the _owner with the address recovered from the signatures
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);
        require(from == ecrecover(digest, v, r, s), "invalid-signatures");

        // Verify the _owner is not address zero
        require(vaults[from] != address(0), "no vault for user");

        GaslessVaultInstance vault = GaslessVaultInstance(vaults[from]);
        vault.transferETH(amount, to);
    }

    function callFunction(
        uint256 nonce,
        address from,
        address to,
        bytes memory fnSignature,
        bytes memory sig
    ) external {
        _checkNonce(from, nonce);

        bytes32 digest = prefixed(
            keccak256(abi.encode(CALL_FN_HASH, nonce, from, to, fnSignature))
        );

        // Verify the _owner with the address recovered from the signatures
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);
        require(from == ecrecover(digest, v, r, s), "invalid-signatures");

        // Verify the _owner is not address zero
        require(vaults[from] != address(0), "no vault for user");

        GaslessVaultInstance vault = GaslessVaultInstance(vaults[from]);
        vault.callFunction(to, fnSignature);
    }

    function setEcosystemFund(address _fund) external onlyOwner {
        ecosystemFund = _fund;
        emit EcosystemFundChanged(msg.sender, _fund);
    }

    function setEcosystemFee(uint256 _fee) external onlyOwner {
        ecosystemFee = _fee;
        emit EcosystemFeeChanged(msg.sender, _fee);
    }

    function setVaultImplementation(address _vaultImplementation)
        external
        onlyOwner
    {
        vaultImplementation = _vaultImplementation;
        emit VaultImplementationChanged(msg.sender, vaultImplementation);
    }

    function getVaultImplementation() external view override returns (address) {
        return vaultImplementation;
    }

    function getEcosystemFund() external view override returns (address) {
        return ecosystemFund;
    }

    function getEcosystemFee() external view override returns (uint256) {
        return ecosystemFee;
    }

    function splitSignature(bytes memory sig)
        internal
        pure
        returns (
            uint8,
            bytes32,
            bytes32
        )
    {
        require(sig.length == 65);

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            // first 32 bytes, after the length prefix
            r := mload(add(sig, 32))
            // second 32 bytes
            s := mload(add(sig, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(sig, 96)))
        }

        return (v, r, s);
    }

    // Builds a prefixed hash to mimic the behavior of eth_sign.
    function prefixed(bytes32 hashstr) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encodePacked("\x19Ethereum Signed Message:\n32", hashstr)
            );
    }

    function _checkNonce(address who, uint256 nonce) internal {
        require(nonces[who] < nonce, "nonce too old");
        nonces[who] = nonce;
    }
}


// File: contracts/GaslessVaultProxy.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeMath} from "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {Context} from "@openzeppelin/contracts/utils/Context.sol";
import {IFactory} from "./interfaces/IFactory.sol";
import {IERCProxy} from "./interfaces/IERCProxy.sol";

contract GaslessVaultProxy is IERCProxy, Context {
    IFactory public proxyFactory;

    constructor(address _factory) {
        proxyFactory = IFactory(_factory);
    }

    fallback() external payable {
        delegatedFwd(loadImplementation(), msg.data);
    }

    receive() external payable {
        delegatedFwd(loadImplementation(), _msgData());
    }

    function implementation() external view override returns (address) {
        return loadImplementation();
    }

    function loadImplementation() internal view returns (address) {
        return proxyFactory.getVaultImplementation();
    }

    function delegatedFwd(address _dst, bytes memory _calldata) internal {
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            let result := delegatecall(
                sub(gas(), 10000),
                _dst,
                add(_calldata, 0x20),
                mload(_calldata),
                0,
                0
            )
            let size := returndatasize()

            let ptr := mload(0x40)
            returndatacopy(ptr, 0, size)

            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.
            // if the call returned error data, forward it
            switch result
            case 0 {
                revert(ptr, size)
            }
            default {
                return(ptr, size)
            }
        }
    }

    function proxyType()
        external
        pure
        virtual
        override
        returns (uint256 proxyTypeId)
    {
        // Upgradeable proxy
        proxyTypeId = 2;
    }
}


// File: contracts/GaslessVaultInstance.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeMath} from "@openzeppelin/contracts/utils/math/SafeMath.sol";
import {IFactory} from "./interfaces/IFactory.sol";
import {IVault} from "./interfaces/IVault.sol";

contract GaslessVaultInstance is IVault {
    using SafeMath for uint256;
    IFactory public factory;
    address public owner;
    address public me;

    function initialize(address _owner, address _factory) external override {
        require(me == address(0), "already initialized");
        owner = _owner;
        factory = IFactory(_factory);
        me = address(this);
    }

    modifier onlyFactoryOrOwner() {
        require(
            msg.sender == owner || msg.sender == address(factory),
            "not owner or factory"
        );
        _;
    }

    function transferERC20(
        address _token,
        uint256 amount,
        address recipient
    ) public onlyFactoryOrOwner {
        IERC20 token = IERC20(_token);

        // Verify the _owner is not address zero
        require(
            token.balanceOf(address(this)) >= amount,
            "insufficient balance"
        );
        require(amount > 0, "invalid amount");

        uint256 fees = amount.div(factory.getEcosystemFee());

        // this contract gives fees to ecosystem
        token.transfer(recipient, amount.sub(fees));
        token.transfer(factory.getEcosystemFund(), fees);
    }

    function transferETH(uint256 amount, address recipient)
        public
        payable
        onlyFactoryOrOwner
    {
        // Verify the _owner is not address zero
        require(me.balance >= amount, "insufficient balance");
        require(amount > 0, "invalid amount");

        uint256 fees = amount.div(factory.getEcosystemFee());

        // send fees to the ecosystem fund
        payable(recipient).transfer(amount.sub(fees));
        payable(factory.getEcosystemFund()).transfer(fees);
    }

    function callFunction(address target, bytes memory signature)
        external
        payable
        onlyFactoryOrOwner
    {
        (bool success, bytes memory response) = target.call(signature);
        require(success, string(response));
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/interfaces/IFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IFactory {
    event Created(address indexed vault, address owner);
    event EcosystemFundChanged(address whom, address fund);
    event EcosystemFeeChanged(address whom, uint256 fee);
    event VaultImplementationChanged(address whom, address impl);

    function getVaultImplementation() external view returns (address);

    function getEcosystemFund() external view returns (address);

    function getEcosystemFee() external view returns (uint256);
}


// File: contracts/interfaces/IVault.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVault {
    function initialize(address _owner, address _factory) external;
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: @openzeppelin/contracts/utils/math/SafeMath.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/interfaces/IERCProxy.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERCProxy {
    function proxyType() external pure returns (uint256 proxyTypeId);

    function implementation() external view returns (address codeAddr);
}

