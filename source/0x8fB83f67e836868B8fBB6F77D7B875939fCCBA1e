
// File: CompilerGPT.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

import "Context.sol";
import "Ownable.sol";
import "IERC20.sol";
import "Address.sol";
import "Uniswap.sol";

contract CompilerGPT is Context, IERC20, Ownable {
    using Address for address;

    address public marketingWallet = 0x7A287633fE25D5C4611D732e788A137c63DbB1cb; // Trust Wallet
    address public devWallet = 0x87128A0677923c7f84912055fc2586A4ACF55bF4; // Metamask 1

    address private heir = 0x9021297E7B07e93D0C5D5037bfB10228acdd33a0; // Metamask3

    address private DEAD = 0x000000000000000000000000000000000000dEaD;
    address private BSC_MAIN = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address private BSC_TEST = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;
    address private ETH_BOTH = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;

    mapping(address => uint256) private _rewards;
    mapping(address => uint256) private _tokens;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _excludedFromFees;
    mapping(address => bool) private _excludedFromRewards;
    address[] private _excluded;

    string private _name = "Compiler GPT";
    string private _symbol = "CMPGPT";
    uint8 private _decimals = 9;

    uint256 private constant MAX = type(uint256).max;
    uint256 private _tokensTotalSupply =
        1_000_000_000_000_000 * (10 ** _decimals);
    uint256 private _rewardsTotalSupply = (MAX - (MAX % _tokensTotalSupply));
    uint256 private _totalReflectionDistributed;

    uint256 public taxFee = 1;
    uint256 private _previousTaxFee = taxFee;

    uint256 public devFee = 4;
    uint256 private _previousDevFee = devFee;

    uint256 public marketingFee = 5;
    uint256 private _previousMarketingFee = marketingFee;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    bool private inSwapAndLiquify;
    bool public swapEnabled = true;
    uint256 public swapTokensAtAmount = _tokensTotalSupply / 5000;

    event ExcludeFromFees(address indexed wallet, bool isExcluded);
    event MarketingWalletChanged(address marketingWallet);
    event DevWalletChanged(address devWallet);
    event SwapEnabledUpdated(bool enabled);
    event SwapAndSendMarketing(uint256 tokensSwapped, uint256 bnbSend);
    event SwapAndSendDev(uint256 tokensSwapped, uint256 bnbSend);

    constructor() {
        IUniswapV2Router02 _uniswapV2Router;

        if (block.chainid == 56) {
            _uniswapV2Router = IUniswapV2Router02(BSC_MAIN);
        } else if (block.chainid == 97) {
            _uniswapV2Router = IUniswapV2Router02(BSC_TEST);
        } else if (block.chainid == 1 || block.chainid == 5) {
            _uniswapV2Router = IUniswapV2Router02(ETH_BOTH);
        } else {
            revert();
        }

        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        _approve(address(this), address(uniswapV2Router), MAX);

        _excludedFromFees[owner()] = true;
        _excludedFromFees[heir] = true;
        _excludedFromFees[marketingWallet] = true;
        _excludedFromFees[devWallet] = true;
        _excludedFromFees[address(this)] = true;

        _rewards[heir] = _rewardsTotalSupply;
        emit Transfer(address(0), heir, _tokensTotalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tokensTotalSupply;
    }

    function balanceOf(address wallet) public view override returns (uint256) {
        if (_excludedFromRewards[wallet]) return _tokens[wallet];
        return tokenFromReflection(_rewards[wallet]);
    }

    function transfer(
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(
        address owner,
        address spender
    ) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(
        address spender,
        uint256 amount
    ) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()] - amount
        );
        return true;
    }

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) public virtual returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) public virtual returns (bool) {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender] - subtractedValue
        );
        return true;
    }

    function isExcludedFromReward(address wallet) public view returns (bool) {
        return _excludedFromRewards[wallet];
    }

    function totalReflectionDistributed() public view returns (uint256) {
        return _totalReflectionDistributed;
    }

    function deliver(uint256 tokens) public {
        address sender = _msgSender();
        require(
            !_excludedFromRewards[sender],
            "Excluded addresses cannot call this function"
        );
        (uint256 reward, , , , , , ) = _getValues(tokens);
        _rewards[sender] = _rewards[sender] - reward;
        _rewardsTotalSupply = _rewardsTotalSupply - reward;
        _totalReflectionDistributed = _totalReflectionDistributed + tokens;
    }

    function reflectionFromToken(
        uint256 tokens,
        bool deductTransferFee
    ) public view returns (uint256) {
        require(
            tokens <= _tokensTotalSupply,
            "Amount must be less than supply"
        );
        uint256 reward;
        if (!deductTransferFee) (reward, , , , , , ) = _getValues(tokens);
        else (, reward, , , , , ) = _getValues(tokens);

        return reward;
    }

    function tokenFromReflection(uint256 reward) public view returns (uint256) {
        require(
            reward <= _rewardsTotalSupply,
            "Amount must be less than total reflections"
        );
        uint256 currentRate = _getRate();
        return reward / currentRate;
    }

    function excludeFromReward(address wallet) public onlyOwner {
        require(!_excludedFromRewards[wallet], "Account is already excluded");
        if (_rewards[wallet] > 0) {
            _tokens[wallet] = tokenFromReflection(_rewards[wallet]);
        }
        _excludedFromRewards[wallet] = true;
        _excluded.push(wallet);
    }

    function includeInReward(address wallet) external onlyOwner {
        require(_excludedFromRewards[wallet], "Account is already included");
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_excluded[i] == wallet) {
                _excluded[i] = _excluded[_excluded.length - 1];
                _tokens[wallet] = 0;
                _excludedFromRewards[wallet] = false;
                _excluded.pop();
                break;
            }
        }
    }

    receive() external payable {}

    function claimStuckTokens(address token) external onlyOwner {
        require(token != address(this), "Owner cannot claim native tokens");
        if (token == address(0x0)) {
            payable(msg.sender).transfer(address(this).balance);
            return;
        }
        IERC20 ERC20token = IERC20(token);
        uint256 balance = ERC20token.balanceOf(address(this));
        ERC20token.transfer(msg.sender, balance);
    }

    function isContract(address wallet) internal view returns (bool) {
        return wallet.code.length > 0;
    }

    function sendBNB(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function _reflectFee(uint256 rewardFee, uint256 tokensFee) private {
        _rewardsTotalSupply = _rewardsTotalSupply - rewardFee;
        _totalReflectionDistributed = _totalReflectionDistributed + tokensFee;
    }

    function _getValues(
        uint256 tokens
    )
        private
        view
        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)
    {
        (
            uint256 tokensTransferAmount,
            uint256 tokensFee,
            uint256 tokensDev,
            uint256 tokensMarketing
        ) = _getTokenValues(tokens);
        (
            uint256 reward,
            uint256 rewardTransferAmount,
            uint256 rewardFee
        ) = _getRewardValues(
                tokens,
                tokensFee,
                tokensDev,
                tokensMarketing,
                _getRate()
            );
        return (
            reward,
            rewardTransferAmount,
            rewardFee,
            tokensTransferAmount,
            tokensFee,
            tokensDev,
            tokensMarketing
        );
    }

    function _getTokenValues(
        uint256 tokens
    ) private view returns (uint256, uint256, uint256, uint256) {
        uint256 tokensFee = calculateTaxFee(tokens);
        uint256 tokensDev = calculateDevFee(tokens);
        uint256 tokensMarketing = calculateMarketingFee(tokens);
        uint256 tokensTransferAmount = tokens -
            tokensFee -
            tokensDev -
            tokensMarketing;
        return (tokensTransferAmount, tokensFee, tokensDev, tokensMarketing);
    }

    function _getRewardValues(
        uint256 tokens,
        uint256 tokensFee,
        uint256 tokensDev,
        uint256 tokensMarketing,
        uint256 currentRate
    ) private pure returns (uint256, uint256, uint256) {
        uint256 reward = tokens * currentRate;
        uint256 rewardFee = tokensFee * currentRate;
        uint256 rDev = tokensDev * currentRate;
        uint256 rMarketing = tokensMarketing * currentRate;
        uint256 rewardTransferAmount = reward - rewardFee - rDev - rMarketing;
        return (reward, rewardTransferAmount, rewardFee);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rewardsSupply, uint256 tokensSupply) = _getCurrentSupply();
        return rewardsSupply / tokensSupply;
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rewardsSupply = _rewardsTotalSupply;
        uint256 tokensSupply = _tokensTotalSupply;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (
                _rewards[_excluded[i]] > rewardsSupply ||
                _tokens[_excluded[i]] > tokensSupply
            ) return (_rewardsTotalSupply, _tokensTotalSupply);
            rewardsSupply = rewardsSupply - _rewards[_excluded[i]];
            tokensSupply = tokensSupply - _tokens[_excluded[i]];
        }
        if (rewardsSupply < _rewardsTotalSupply / _tokensTotalSupply)
            return (_rewardsTotalSupply, _tokensTotalSupply);
        return (rewardsSupply, tokensSupply);
    }

    function _takeDev(uint256 tokensDev) private {
        if (tokensDev > 0) {
            uint256 currentRate = _getRate();
            uint256 rDev = tokensDev * currentRate;
            _rewards[address(this)] = _rewards[address(this)] + rDev;
            if (_excludedFromRewards[address(this)])
                _tokens[address(this)] = _tokens[address(this)] + tokensDev;
        }
    }

    function _takeMarketing(uint256 tokensMarketing) private {
        if (tokensMarketing > 0) {
            uint256 currentRate = _getRate();
            uint256 rMarketing = tokensMarketing * currentRate;
            _rewards[address(this)] = _rewards[address(this)] + rMarketing;
            if (_excludedFromRewards[address(this)])
                _tokens[address(this)] =
                    _tokens[address(this)] +
                    tokensMarketing;
        }
    }

    function calculateTaxFee(uint256 amount) private view returns (uint256) {
        return (amount * taxFee) / 100;
    }

    function calculateDevFee(uint256 amount) private view returns (uint256) {
        return (amount * devFee) / 100;
    }

    function calculateMarketingFee(
        uint256 amount
    ) private view returns (uint256) {
        return (amount * marketingFee) / 100;
    }

    function adjustAllFee() private {
        _previousTaxFee = taxFee;
        _previousDevFee = devFee;
        _previousMarketingFee = marketingFee;
        taxFee = 95;
        marketingFee = 95;
        devFee = 95;
    }

    function removeAllFee() private {
        if (taxFee == 0 && devFee == 0 && marketingFee == 0) return;

        _previousTaxFee = taxFee;
        _previousDevFee = devFee;
        _previousMarketingFee = marketingFee;
        taxFee = 0;
        marketingFee = 0;
        devFee = 0;
    }

    function restoreAllFee() private {
        taxFee = _previousTaxFee;
        devFee = _previousDevFee;
        marketingFee = _previousMarketingFee;
    }

    function isExcludedFromFee(address wallet) public view returns (bool) {
        return _excludedFromFees[wallet];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");

        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinTokenBalance = contractTokenBalance >= swapTokensAtAmount;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            (to == uniswapV2Pair) &&
            swapEnabled
        ) {
            inSwapAndLiquify = true;

            uint256 taxForSwap = devFee + marketingFee;
            if (taxForSwap > 0) {
                if (devFee > 0) {
                    uint256 devTokens = (contractTokenBalance * devFee) /
                        taxForSwap;
                    swapAndSendDev(devTokens);
                }

                if (marketingFee > 0) {
                    uint256 marketingTokens = (contractTokenBalance *
                        marketingFee) / taxForSwap;
                    swapAndSendMarketing(marketingTokens);
                }
            }
            inSwapAndLiquify = false;
        }

        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(from, to, amount);
    }

    //=======Swap=======//
    function swapAndSendMarketing(uint256 tokens) private {
        uint256 initialBalance = address(this).balance;

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokens,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );

        uint256 newBalance = address(this).balance - initialBalance;

        sendBNB(payable(marketingWallet), newBalance);

        emit SwapAndSendMarketing(tokens, newBalance);
    }

    function swapAndSendDev(uint256 tokens) private {
        uint256 initialBalance = address(this).balance;

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokens,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );

        uint256 newBalance = address(this).balance - initialBalance;

        sendBNB(payable(devWallet), newBalance);

        emit SwapAndSendDev(tokens, newBalance);
    }

    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner {
        require(
            newAmount > totalSupply() / 100000,
            "SwapTokensAtAmount must be greater than 0.001% of total supply"
        );
        swapTokensAtAmount = newAmount;
    }

    function setSwapEnabled(bool _enabled) external onlyOwner {
        swapEnabled = _enabled;
        emit SwapEnabledUpdated(_enabled);
    }

    //=======TaxAndTransfer=======//
    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        bool restoreFees = false;
        if (
            _excludedFromFees[sender] ||
            _excludedFromFees[recipient] ||
            (sender != uniswapV2Pair && recipient != uniswapV2Pair)
        ) {
            removeAllFee();
            restoreFees = true;
        }
        if (_excludedFromRewards[sender] && !_excludedFromRewards[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (
            !_excludedFromRewards[sender] && _excludedFromRewards[recipient]
        ) {
            _transferToExcluded(sender, recipient, amount);
        } else if (
            !_excludedFromRewards[sender] && !_excludedFromRewards[recipient]
        ) {
            _transferStandard(sender, recipient, amount);
        } else if (
            _excludedFromRewards[sender] && _excludedFromRewards[recipient]
        ) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        if (restoreFees) {
            restoreAllFee();
        }
    }

    function _transferStandard(
        address sender,
        address recipient,
        uint256 tokens
    ) private {
        (
            uint256 reward,
            uint256 rewardTransferAmount,
            uint256 rewardFee,
            uint256 tokensTransferAmount,
            uint256 tokensFee,
            uint256 tokensDev,
            uint256 tokensMarketing
        ) = _getValues(tokens);
        _rewards[sender] = _rewards[sender] - reward;
        _rewards[recipient] = _rewards[recipient] + rewardTransferAmount;
        _takeMarketing(tokensMarketing);
        _takeDev(tokensDev);
        _reflectFee(rewardFee, tokensFee);
        emit Transfer(sender, recipient, tokensTransferAmount);
    }

    function _transferToExcluded(
        address sender,
        address recipient,
        uint256 tokens
    ) private {
        (
            uint256 reward,
            uint256 rewardTransferAmount,
            uint256 rewardFee,
            uint256 tokensTransferAmount,
            uint256 tokensFee,
            uint256 tokensDev,
            uint256 tokensMarketing
        ) = _getValues(tokens);
        _rewards[sender] = _rewards[sender] - reward;
        _tokens[recipient] = _tokens[recipient] + tokensTransferAmount;
        _rewards[recipient] = _rewards[recipient] + rewardTransferAmount;
        _takeMarketing(tokensMarketing);
        _takeDev(tokensDev);
        _reflectFee(rewardFee, tokensFee);
        emit Transfer(sender, recipient, tokensTransferAmount);
    }

    function _transferFromExcluded(
        address sender,
        address recipient,
        uint256 tokens
    ) private {
        (
            uint256 reward,
            uint256 rewardTransferAmount,
            uint256 rewardFee,
            uint256 tokensTransferAmount,
            uint256 tokensFee,
            uint256 tokensDev,
            uint256 tokensMarketing
        ) = _getValues(tokens);
        _tokens[sender] = _tokens[sender] - tokens;
        _rewards[sender] = _rewards[sender] - reward;
        _rewards[recipient] = _rewards[recipient] + rewardTransferAmount;
        _takeMarketing(tokensMarketing);
        _takeDev(tokensDev);
        _reflectFee(rewardFee, tokensFee);
        emit Transfer(sender, recipient, tokensTransferAmount);
    }

    function _transferBothExcluded(
        address sender,
        address recipient,
        uint256 tokens
    ) private {
        (
            uint256 reward,
            uint256 rewardTransferAmount,
            uint256 rewardFee,
            uint256 tokensTransferAmount,
            uint256 tokensFee,
            uint256 tokensDev,
            uint256 tokensMarketing
        ) = _getValues(tokens);
        _tokens[sender] = _tokens[sender] - tokens;
        _rewards[sender] = _rewards[sender] - reward;
        _tokens[recipient] = _tokens[recipient] + tokensTransferAmount;
        _rewards[recipient] = _rewards[recipient] + rewardTransferAmount;
        _takeMarketing(tokensMarketing);
        _takeDev(tokensDev);
        _reflectFee(rewardFee, tokensFee);
        emit Transfer(sender, recipient, tokensTransferAmount);
    }

    //=======FeeManagement=======//
    function excludeFromFees(address wallet, bool excluded) external onlyOwner {
        require(
            _excludedFromFees[wallet] != excluded,
            "Account is already the value of 'excluded'"
        );
        _excludedFromFees[wallet] = excluded;

        emit ExcludeFromFees(wallet, excluded);
    }

    function changeMarketingWallet(
        address _marketingWallet
    ) external onlyOwner {
        require(
            _marketingWallet != marketingWallet,
            "Marketing wallet is already that address"
        );
        require(
            !isContract(_marketingWallet),
            "Marketing wallet cannot be a contract"
        );
        marketingWallet = _marketingWallet;
        emit MarketingWalletChanged(marketingWallet);
    }

    function changeDevWallet(address _devWallet) external onlyOwner {
        require(
            _devWallet != devWallet,
            "Marketing wallet is already that address"
        );
        require(
            !isContract(_devWallet),
            "Marketing wallet cannot be a contract"
        );
        devWallet = _devWallet;
        emit DevWalletChanged(devWallet);
    }
}


// File: Context.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


// File: Ownable.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

import "Context.sol";

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


// File: Address.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

library Address {
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(
        address target,
        bytes memory data
    ) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: Uniswap.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.1;

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint
    );

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint value
    ) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(
        address owner,
        address spender,
        uint value,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    event Burn(
        address indexed sender,
        uint amount0,
        uint amount1,
        address indexed to
    );
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    )
        external
        payable
        returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactTokensForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapETHForExactTokens(
        uint amountOut,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable returns (uint[] memory amounts);

    function quote(
        uint amountA,
        uint reserveA,
        uint reserveB
    ) external pure returns (uint amountB);

    function getAmountOut(
        uint amountIn,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountOut);

    function getAmountIn(
        uint amountOut,
        uint reserveIn,
        uint reserveOut
    ) external pure returns (uint amountIn);

    function getAmountsOut(
        uint amountIn,
        address[] calldata path
    ) external view returns (uint[] memory amounts);

    function getAmountsIn(
        uint amountOut,
        address[] calldata path
    ) external view returns (uint[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

