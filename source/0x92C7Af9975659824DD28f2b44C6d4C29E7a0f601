// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GURT{
    address public owner;
    mapping(address => bool) public isBlacklisted;

    string public name = "GURT";
    string public symbol = "GURT";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Blacklisted(address indexed target);
    event Unblacklisted(address indexed target);

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    modifier notBlacklisted(address target) {
        require(!isBlacklisted[target], "Address is blacklisted");
        _;
    }

    constructor(uint256 initialSupply) {
        owner = msg.sender;
        totalSupply = initialSupply * 10**uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public notBlacklisted(msg.sender) notBlacklisted(to) returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

     function getBalance(address sender) public view returns (uint256) {
        return balanceOf[sender];
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public notBlacklisted(from) notBlacklisted(to) returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Allowance too low");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        emit Transfer(from, to, value);
        return true;
    }

    function blacklist(address target) public onlyOwner {
        require(target != owner, "Cannot blacklist the owner");
        isBlacklisted[target] = true;
        emit Blacklisted(target);
    }

    function unblacklist(address target) public onlyOwner {
        isBlacklisted[target] = false;
        emit Unblacklisted(target);}}