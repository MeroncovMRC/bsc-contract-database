// File: contracts\DexIntegratePS.sol

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract MyDex {

    IPancakeRouter02 pancakeRouter;

    address owner;
    address feeRecipientAddress;
    uint256 feePercent;

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    constructor(address _pancakeRouterAddress) {
        pancakeRouter = IPancakeRouter02(_pancakeRouterAddress);
        owner = msg.sender;
    }

    event SwapTransfer(address from, address to, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);

    function setFeeRecipient(address recipient, uint256 percent) public onlyOwner {
        feeRecipientAddress = recipient;
        feePercent = percent;
    }

    function viewFeeRecipient() public onlyOwner view returns (address) {
        return feeRecipientAddress;
    }

     function viewFeePercent() public onlyOwner view returns (uint256) {
        return feePercent;
    }

    function sendFeeToRecipient(uint256 amountFee) private {
        address payable account = payable(feeRecipientAddress);
        account.transfer(amountFee);
    }

    function swapExactBNBForTokens(uint amountOutMin, address tokenOut) external payable {
        address[] memory path = new address[](2);
        path[0] = pancakeRouter.WETH();
        path[1] = tokenOut;
        uint256 valueFee = feePercent * msg.value / 100;
        uint256 valueBNB = msg.value - valueFee;
        IERC20(pancakeRouter.WETH()).approve(address(pancakeRouter), valueBNB);
        pancakeRouter.swapExactETHForTokens{value: valueBNB}(amountOutMin, path, msg.sender, block.timestamp + 60*10);
        sendFeeToRecipient(valueFee);
        uint256[] memory amounts = pancakeRouter.getAmountsOut(valueBNB, path);
        emit SwapTransfer(address(pancakeRouter), msg.sender, pancakeRouter.WETH(), tokenOut, valueBNB, amounts[1]);
    }

    function swapTokensForExactBNB(address token, uint amountInMax, uint amountOut) external {
        IERC20(token).transferFrom(msg.sender, address(this), amountInMax);
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = pancakeRouter.WETH();
        uint256 valueFee = feePercent * amountOut / 100;
        uint256 valueBNB = amountOut - valueFee;
        IERC20(token).approve(address(pancakeRouter), amountInMax);
        pancakeRouter.swapTokensForExactETH(valueBNB, amountInMax, path, msg.sender, block.timestamp + 60*10);
        sendFeeToRecipient(valueFee);
        emit SwapTransfer(address(pancakeRouter), msg.sender, path[0], path[1], amountInMax, valueBNB);
    }

    function getAmountOfTokenForBNB(address tokenOut, uint amountBNB) external view returns (uint256){
        address[] memory path = new address[](2);
        path[0] = pancakeRouter.WETH();
        path[1] = tokenOut;
        uint256[] memory amounts = pancakeRouter.getAmountsOut(amountBNB, path);
        return amounts[1];
    }

    function getAmountOfBNBForToken(address tokenIn, uint amountTokenIn) external view returns (uint256){
        address[] memory path = new address[](2);
        path[0] = tokenIn;
        path[1] = pancakeRouter.WETH();
        uint256[] memory amounts = pancakeRouter.getAmountsOut(amountTokenIn, path);
        return amounts[1];
    }
}