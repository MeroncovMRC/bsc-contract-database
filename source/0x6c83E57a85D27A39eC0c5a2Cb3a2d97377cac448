{"CarbonCoin.sol":{"content":"\n\npragma solidity ^0.6.12;\n\n// SPDX-License-Identifier: Unlicensed\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\n \nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = now + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\n        require(now \u003e _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () public {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    modifier isHuman() {\n        require(tx.origin == msg.sender, \"Humans only\");\n        _;\n    }\n}\n\n// pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ncontract CarbonCoin is Context, IERC20, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address =\u003e uint256) private _rOwned;\n    mapping (address =\u003e uint256) private _tOwned;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n    mapping (address =\u003e bool) private _isExcludedFromFee;\n    mapping (address =\u003e bool) private _isExcluded;\n    mapping (address =\u003e bool) private _isExcludedFromReward;\n    mapping (address =\u003e uint256) public nextAvailableClaimDate;\n\n    address[] private _excluded;\n    address[] private _excludedFromReward;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 1000 * 10**6 * 10**6 * 10**18;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 private _tCommTotal;\n    uint256 private _tBurnTotal;\n    \n    string private   _name = \"Carbon Coin - CNES\";\n    string private _symbol = \"CBC\";\n    uint8 private _decimals = 18;\n    \n    uint256 public _taxFee = 0;\n    uint256 private _previousTaxFee = _taxFee;\n    \n    uint256 public _liquidityFee = 9;\n    uint256 private _previousLiquidityFee = _liquidityFee;\n    uint256 private _previousLiquidityFee2 = 4;\n    \n    uint256 public _communityFee = 1;\n    uint256 private _previouscommunityFee = _communityFee;\n\n    uint256 public rewardCycleBlock = 7 days;\n    uint256 public threshHoldTopUpRate = 25;\n    uint256 private claimEventTime = 0;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = false;\n    \n    uint256 public _maxTxAmount = 0;\n    uint256 private numTokensSellToAddToLiquidityOrBurn = 2 * 10**5 * 10**6 * 10**18;\n    \n    address private _cWallet = 0x6BaD595848175D3FF9969Ac6f0BcB0cACBD40F25;\n    address private _burnPool = 0x000000000000000000000000000000000000dEaD;\n    address private _usdt = 0x55d398326f99059fF775485246999027B3197955;\n\n    IERC20 usdt = IERC20(_usdt);\n    \n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event ClaimUSDTSuccessfully(\n        address recipient,\n        uint256 ethReceived,\n        uint256 nextAvailableClaimDate\n    );\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    \n    constructor () public {\n        _rOwned[_msgSender()] = _rTotal;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \n        \n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        // set the rest of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n        \n        //exclude owner and this contract from fee\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(0)] = true;\n        _isExcludedFromFee[_cWallet] = true;\n\n        _isExcludedFromReward[address(this)] = false;\n        _isExcludedFromReward[_cWallet] = false;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n        //transfer(devWallet3,devWalletAmount);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n    \n    function totalCommunityFee() public view returns (uint256) {\n        return _tCommTotal;\n    }\n    \n    function totalBurned() public view returns (uint256) {\n        return _tBurnTotal;\n    }\n    \n    function getCWallet() public view returns (address) {\n        return _cWallet;\n    }\n\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOwner() {\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \u0027We can not exclude Uniswap router.\u0027);\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] \u003e 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n    \n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    \n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n    \n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n        _taxFee = taxFee;\n    }\n    \n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\n        _liquidityFee = liquidityFee;\n    }\n   \n    function setMaxTxPercent(uint256 maxTxPercent) public onlyOwner() {   // 100 \u003c=\u003e 0.01; 20 \u003c=\u003e0.002\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\n            10000\n        );\n    }\n    \n    function getMaxTxAmount() public view returns (uint256){\n        return _maxTxAmount;\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n    \n     //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n    \n    function _reflectFee(uint256 rFee, uint256 rCommFee, uint256 tFee, uint256 tCommFee) private {\n        _rTotal     = _rTotal.sub(rFee);\n        _tFeeTotal  = _tFeeTotal.add(tFee);\n        _tCommTotal = _tCommTotal.add(tCommFee);\n        _rOwned[_cWallet] = _rOwned[_cWallet].add(rCommFee);\n\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n        \n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n        return (tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n    \n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_taxFee).div(\n            10**2\n        );\n    }\n\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_liquidityFee).div(\n            10**2\n        );\n    }\n    \n    function calculateCommunityFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_communityFee).div(\n            10**2\n        );\n    }\n    \n    function removeAllFee() private {\n        if(_taxFee == 0 \u0026\u0026 _liquidityFee == 0 ) return;\n        \n        _previousTaxFee = _taxFee;\n        _previousLiquidityFee = _liquidityFee;\n        _previouscommunityFee = _communityFee;\n        _taxFee = 0;\n        _liquidityFee = 0;\n        _communityFee = 0;\n    }\n    \n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _liquidityFee = _previousLiquidityFee;\n        _communityFee = _previouscommunityFee;\n    }\n    \n    function deductFee() private {\n        if (_liquidityFee == 4) return;\n        _previousLiquidityFee2 = _liquidityFee;\n        _liquidityFee = 4;\n    }\n    \n    function restoreDeductFee() private {\n        _liquidityFee = _previousLiquidityFee2;\n    }\n    \n    \n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from,address to,uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n        if(from != owner() \u0026\u0026 to != owner())\n            require(amount \u003c= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don\u0027t get caught in a circular liquidity event.\n        // also, don\u0027t swap \u0026 liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n        \n        if(contractTokenBalance \u003e= _maxTxAmount)\n        {\n            contractTokenBalance = _maxTxAmount;\n        }\n        \n        bool overMinTokenBalance = contractTokenBalance \u003e= numTokensSellToAddToLiquidityOrBurn;\n        \n        if (\n            overMinTokenBalance \u0026\u0026\n            !inSwapAndLiquify \u0026\u0026\n            from != uniswapV2Pair \u0026\u0026\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidityOrBurn;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n        \n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n        \n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n            takeFee = false;\n        }\n        \n        //transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from,to,amount,takeFee);\n\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n\n        // split to 3 pieces for burn/liq/swapEth\n        uint256 toBurnAmount = contractTokenBalance.div(9);\n        uint256 toLiqAmount = contractTokenBalance.div(9).mul(2);\n        uint256 toSwapEthAmount = contractTokenBalance.sub(toBurnAmount).sub(toLiqAmount);\n\n        uint256 initialEthBalance = address(this).balance;\n        swapTokensForEth(toSwapEthAmount); \n        uint256 swapedEthAmount = address(this).balance.sub(initialEthBalance);\n\n        //split ethAmount to 3 pieces\n        uint256 toLiqEthAmount = swapedEthAmount.div(3);\n        uint256 toSwapRewardTokenAmount = swapedEthAmount.sub(toLiqEthAmount);\n        \n        addLiquidity(toLiqAmount, toLiqEthAmount);\n        \n        swapEthForRewardTokens(toSwapRewardTokenAmount);\n        \n        burn(toBurnAmount);\n\n        emit SwapAndLiquify(toLiqAmount, toLiqEthAmount, toLiqAmount);\n    }\n\n    function burn(uint256 bAmount) private {\n        uint256 currentRate =  _getRate();\n        uint256 rbAmount = bAmount.mul(currentRate);\n\t\t_rOwned[address(this)] = _rOwned[address(this)].sub(rbAmount);\n        _rOwned[_burnPool] = _rOwned[_burnPool].add(rbAmount);\n        if(_isExcluded[address(this)]){\n            _tOwned[address(this)] = _tOwned[address(this)].sub(bAmount);\n            _tOwned[_burnPool]     = _tOwned[_burnPool].add(bAmount);\n        }\n        _tBurnTotal = _tBurnTotal.add(bAmount);\n\t\temit Transfer(address(this), _burnPool, bAmount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function swapEthForRewardTokens(uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), ethAmount);\n\n        address[] memory path1 = new address[](2);\n\n        path1[0] = uniswapV2Router.WETH();\n        path1[1] = _usdt;\n\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\n            0, // accept any amount of reward token\n            path1,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n        if(!takeFee)\n            removeAllFee();\n        \n        topUpClaimCycleByAmount(recipient, amount);\n\n        if (_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] \u0026\u0026 !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] \u0026\u0026 _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n        \n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        if (sender == uniswapV2Pair \u0026\u0026 !_isExcludedFromFee[recipient]){  \n            deductFee();\n            uint256 currentRate =  _getRate();\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n            restoreDeductFee();\n            uint256 tCommFee = calculateCommunityFee(tAmount);\n            uint256 rCommFee = tCommFee.mul(currentRate);\n            rTransferAmount = rTransferAmount.sub(rCommFee);\n            tTransferAmount = tTransferAmount.sub(tCommFee);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeLiquidity(tLiquidity);\n            _reflectFee(rFee, rCommFee, tFee, tCommFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        } else {\n            if (sender != address(this) \u0026\u0026 sender != _cWallet \u0026\u0026 !_isExcludedFromReward[sender]){\n                _isExcludedFromReward[sender] = true;\n                _excludedFromReward.push(sender);\n            }\n            uint256 currentRate =  _getRate();\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n            uint256 tCommFee = calculateCommunityFee(tAmount);\n            uint256 rCommFee = tCommFee.mul(currentRate);\n            rTransferAmount = rTransferAmount.sub(rCommFee);\n            tTransferAmount = tTransferAmount.sub(tCommFee);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeLiquidity(tLiquidity);\n            _reflectFee(rFee, rCommFee, tFee, tCommFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n    }\n    \n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        if (sender == uniswapV2Pair){\n            deductFee();\n            uint256 currentRate =  _getRate();\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,  uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n            restoreDeductFee();\n            uint256 tCommFee = calculateCommunityFee(tAmount);\n            uint256 rCommFee = tCommFee.mul(currentRate);\n            rTransferAmount = rTransferAmount.sub(rCommFee);\n            tTransferAmount = tTransferAmount.sub(tCommFee);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeLiquidity(tLiquidity);\n            _reflectFee(rFee, rCommFee, tFee, tCommFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        } else {\n            if (sender != address(this) \u0026\u0026 sender != _cWallet \u0026\u0026 !_isExcludedFromReward[sender]){\n                _isExcludedFromReward[sender] = true;\n                _excludedFromReward.push(sender);\n            }\n            uint256 currentRate =  _getRate();\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,  uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n            uint256 tCommFee = calculateCommunityFee(tAmount);\n            uint256 rCommFee = tCommFee.mul(currentRate);\n            rTransferAmount = rTransferAmount.sub(rCommFee);\n            tTransferAmount = tTransferAmount.sub(tCommFee);\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n            _takeLiquidity(tLiquidity);\n            _reflectFee(rFee, rCommFee, tFee, tCommFee);\n            emit Transfer(sender, recipient, tTransferAmount);\n        }\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        \n        if (sender != address(this) \u0026\u0026 !_isExcludedFromReward[sender]){\n                _isExcludedFromReward[sender] = true;\n                _excludedFromReward.push(sender);\n            }\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        uint256 tCommFee = calculateCommunityFee(tAmount);\n        uint256 rCommFee = tCommFee.mul(currentRate);\n        rTransferAmount = rTransferAmount.sub(rCommFee);\n        tTransferAmount = tTransferAmount.sub(tCommFee);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, rCommFee, tFee, tCommFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n    \n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        \n        if (sender != address(this) \u0026\u0026 !_isExcludedFromReward[sender]){\n                _isExcludedFromReward[sender] = true;\n                _excludedFromReward.push(sender);\n            }\n\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        uint256 tCommFee = calculateCommunityFee(tAmount);\n        uint256 rCommFee = tCommFee.mul(currentRate);\n        rTransferAmount = rTransferAmount.sub(rCommFee);\n        tTransferAmount = tTransferAmount.sub(tCommFee);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, rCommFee, tFee, tCommFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function setClaimEventTime(uint256 num) private {\n        claimEventTime = block.timestamp + num.mul(60);\n        // minutes;\n    }\n\n    function getClaimEventTime() public view returns (uint256){\n        return claimEventTime;\n    }\n\n    uint256 private nextExcludedSupplyCalculateTime = 0;\n    uint256 private excludedSupply = 0;\n    \n    function getNextExcludedSupplyCalculateTime() public view onlyOwner returns (uint256){\n        return nextExcludedSupplyCalculateTime;\n    }\n\n    function getExcludeSupply() public view onlyOwner returns (uint256){\n        return excludedSupply;\n    }\n\n    function calculateExcludedSupply() private {\n        if (excludedSupply == 0){\n            for (uint256 i = 0; i \u003c _excludedFromReward.length; i++){\n                excludedSupply += balanceOf(_excludedFromReward[i]);\n            }\n        }\n\n        if (nextExcludedSupplyCalculateTime \u003c block.timestamp \u0026\u0026 excludedSupply != 0){\n            excludedSupply = 0;\n            for (uint256 i = 0; i \u003c _excludedFromReward.length; i++){\n                excludedSupply += balanceOf(_excludedFromReward[i]);\n            }\n            nextExcludedSupplyCalculateTime = block.timestamp + 30 minutes;\n        }\n    }\n\n    function getTotalRewardTokens() public view returns (uint256){\n        return usdt.balanceOf(address(this));\n    }\n\n    function checkReward() public view returns (uint256) {\n        if (_isExcludedFromReward[msg.sender]){\n            return 0;\n        }\n        uint256 cTotalSupply = uint256(_tTotal)\n        .sub(balanceOf(address(0)))\n        .sub(balanceOf(0x000000000000000000000000000000000000dEaD))\n        .sub(excludedSupply)\n        .sub(balanceOf(address(uniswapV2Pair)));\n        return _calculateReward(\n            balanceOf(address(msg.sender)),\n            usdt.balanceOf(address(this)),\n            cTotalSupply\n        );\n    }\n    \n    function _calculateReward(uint256 currentBalance,uint256 currentUsdtPool,uint256 cTotalSupply) private pure returns (uint256) {\n        uint256 multiplier = 100;\n        uint256 usdtReward = currentUsdtPool.mul(multiplier).mul(currentBalance).div(100).div(cTotalSupply);\n        return usdtReward;\n    }\n    \n    function checkClaimCycle() public view returns (uint256) {\n        if (nextAvailableClaimDate[msg.sender] \u003c= block.timestamp) {\n            return 0;\n        }\n        return nextAvailableClaimDate[msg.sender].sub(block.timestamp);\n    }\n\n    function claimReward() isHuman nonReentrant public {\n        require(!_isExcludedFromReward[msg.sender], \u0027Error: You have already been excluded from reward!\u0027);\n        require(claimEventTime \u003c block.timestamp,\u0027Error: The claim event does not start yet\u0027);\n        require(nextAvailableClaimDate[msg.sender] \u003c= block.timestamp, \u0027Error: next available not reached\u0027);\n        require(balanceOf(msg.sender) \u003e= 0, \u0027Error: You must own Tokens to claim reward!\u0027);\n        uint256 usdtR = checkReward();\n        _approve(address(this), _usdt, usdtR);\n        usdt.transfer(msg.sender, usdtR);\n        nextAvailableClaimDate[msg.sender] = block.timestamp + rewardCycleBlock;\n\n        //calculateExcludedSupply();\n\n        emit ClaimUSDTSuccessfully(msg.sender, usdtR, nextAvailableClaimDate[msg.sender]);\n    }\n\n    function topUpClaimCycleByAmount(address recipient, uint256 amount) private {\n        uint256 currentRecipientBalance = balanceOf(recipient);\n        uint256 basedRewardCycleBlock = rewardCycleBlock;\n\n        nextAvailableClaimDate[recipient] = nextAvailableClaimDate[recipient] + _calculateTopUpClaim(\n            currentRecipientBalance,\n            basedRewardCycleBlock,\n            amount\n        );\n    }\n\n    function _calculateTopUpClaim(uint256 RecipientBalance,uint256 basedRewardCycleBlock,uint256 amount) private view returns (uint256) {\n        if (RecipientBalance == 0) {\n            return block.timestamp + basedRewardCycleBlock;\n        }\n        else {\n            uint256 rate = amount.mul(100).div(RecipientBalance);\n            if (uint256(rate) \u003e= threshHoldTopUpRate) {\n                uint256 incurCycleBlock = basedRewardCycleBlock.mul(uint256(rate)).div(100);\n\n                if (incurCycleBlock \u003e= basedRewardCycleBlock) {\n                    incurCycleBlock = basedRewardCycleBlock;\n                }\n\n                return incurCycleBlock;\n            }\n            return 0;\n        }\n    }\n\n    function migrateToken(address _newadress, uint256 _amount) public onlyOwner {\n        removeAllFee();\n        _transferStandard(address(this), _newadress, _amount);\n        restoreAllFee();\n    }\n\n    function migrateRewardToken(address _newadress, uint256 rewardTokenAmount) public onlyOwner {\n        _approve(address(this), _usdt, rewardTokenAmount);\n        usdt.transfer(_newadress, rewardTokenAmount);\n    }\n\n    function migrateBNB(address payable _newadd,uint256 amount) public onlyOwner {\n        (bool success, ) = address(_newadd).call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, charity may have reverted\");    \n    }\n\n    function activate(uint256 txPercent,uint256 evevtTime) public onlyOwner {\n        setMaxTxPercent(txPercent);\n        //setMaxTxPercent(20);\n        setSwapAndLiquifyEnabled(true);\n        //setClaimEventTime(15);\n        setClaimEventTime(evevtTime);\n        nextExcludedSupplyCalculateTime = block.timestamp;\n    }\n\n}"},"ClaimRewards.sol":{"content":"pragma solidity ^0.6.12;\n\n// SPDX-License-Identifier: MIT\n\n\nimport \u0027./CarbonCoin.sol\u0027;\n\n\ncontract ClaimRewardsContract is Ownable,ReentrancyGuard {\n    using SafeMath for uint256;\n\n    CarbonCoin public cbc;\n    address private _usdt = 0x55d398326f99059fF775485246999027B3197955;\n    uint256 private _tTotal = 1000 * 10**6 * 10**6 * 10**18;\n    uint256 private rewardCycleBlock = 7 days;\n    mapping (address =\u003e uint256) private nextAvailableClaimDate;\n    mapping (address =\u003e uint256) private previousNextAvailableClaimDate;\n    mapping (address =\u003e bool) private isExcludedFromReward;\n    address public uniswapV2Pair;\n    address private _cWalletAddr;\n    IERC20 usdt = IERC20(_usdt);\n\n    event ClaimUSDTSuccessfully(\n        address recipient,\n        uint256 ethReceived,\n        uint256 nextAvailableClaimDate\n    );\n    \n    constructor (CarbonCoin _cbcContract) public {\n        cbc=_cbcContract;\n        uniswapV2Pair = cbc.uniswapV2Pair();\n        _cWalletAddr = cbc.getCWallet();\n    }\n    \n    \n    function newLock(uint256 time) public onlyOwner {\n        cbc.lock(time);\n    }\n    \n    function newUnlock() public  onlyOwner {\n        cbc.unlock();\n    }\n    \n    function newTransferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        cbc.transferOwnership(newOwner);\n    } \n    \n    function getTotalUsdt() public view returns (uint256){\n        return usdt.balanceOf(address(this));\n    }\n\n    function getTotalUsdtOfOld() public view returns (uint256){\n        return usdt.balanceOf(address(cbc));\n    }\n    \n    //----------------------------\n    \n    function setcWalletAddr(address addr)public onlyOwner{\n        _cWalletAddr = addr;\n    }\n    \n    function getcWalletAddr()public view returns(address){\n        return _cWalletAddr;\n    }\n    \n    function setRewardCycleBlock(uint256 timestamp) public onlyOwner{\n        rewardCycleBlock = timestamp;\n    }\n    \n    function getRewardCycleBlock() public view returns(uint256){\n        return rewardCycleBlock;\n    }\n    \n\n    function setNextAvailableClaimDate(address addrs, uint256 timestamp) public onlyOwner{\n        nextAvailableClaimDate[addrs] = timestamp;\n    }\n    \n    function getNextAvailableClaimDate(address addr) public view returns(uint256){\n        return nextAvailableClaimDate[addr];\n    }\n    \n    function setExcludeFromReward(address[] memory addrs) public {\n        require(msg.sender == _cWalletAddr || msg.sender == address(owner()),\"You can\u0027t invoke me!\");\n\n        for (uint256 i=0;i\u003caddrs.length;i++){\n            isExcludedFromReward[addrs[i]] = true;\n        }\n    }\n    \n    function getExcludeFromReward(address addr) public view returns(bool){\n        return isExcludedFromReward[addr];\n    }\n\n    function newCheckClaimCycle() public view returns (uint256) {\n        if (nextAvailableClaimDate[msg.sender] \u003c= block.timestamp) {\n            return 0;\n        }\n        return nextAvailableClaimDate[msg.sender].sub(block.timestamp);\n    }\n\n    receive() external payable {}\n\n    //----------------------------\n    function newClaimReward(uint256 tag) isHuman nonReentrant public {\n\n        if (tag==0 \u0026\u0026 newCheckReward()!=0) {\n            isExcludedFromReward[msg.sender]=true;\n        }\n        \n        require(!isExcludedFromReward[msg.sender], \u0027Error: You have already been excluded from reward!\u0027);\n        require(cbc.nextAvailableClaimDate(msg.sender) \u003c= block.timestamp, \u0027Error: next available not reached\u0027);\n        require(nextAvailableClaimDate[msg.sender] \u003c= block.timestamp, \u0027Error: next available not reached\u0027);\n        require(cbc.balanceOf(msg.sender) \u003e= 0, \u0027Error: You must own Tokens to claim reward!\u0027);\n\n        uint256 usdtR = newCheckReward();\n\n        cbc.unlock();\n        cbc.migrateRewardToken(msg.sender,usdtR);\n        cbc.lock(1);\n\n        nextAvailableClaimDate[msg.sender] = block.timestamp.add(rewardCycleBlock);\n\n        emit ClaimUSDTSuccessfully(msg.sender, usdtR, nextAvailableClaimDate[msg.sender]);  \n        \n\n    }\n    \n    function newCheckReward() public view returns (uint256) {\n        \n        if (isExcludedFromReward[msg.sender]){\n            return 0;\n        }\n        uint256 cTotalSupply = uint256(_tTotal)\n        .sub(cbc.balanceOf(address(0)))\n        .sub(cbc.balanceOf(0x000000000000000000000000000000000000dEaD))\n        .sub(cbc.balanceOf(address(uniswapV2Pair))); \n        return _newCalculateReward(\n            cbc.balanceOf(msg.sender),\n            usdt.balanceOf(address(cbc)),\n            cTotalSupply\n        );\n    }\n    \n    function _newCalculateReward(uint256 currentBalance,uint256 currentUsdtPool,uint256 cTotalSupply) private pure returns (uint256) {\n        uint256 multiplier = 100;\n        uint256 usdtReward = currentUsdtPool.mul(multiplier).mul(currentBalance).div(100).div(cTotalSupply);\n        return usdtReward;\n    }\n    \n    function checkRewardForExactAddr(address addr)public view onlyOwner returns(uint256){\n        if (isExcludedFromReward[addr]){\n            return 0;\n        }\n        uint256 cTotalSupply = uint256(_tTotal)\n        .sub(cbc.balanceOf(address(0)))\n        .sub(cbc.balanceOf(0x000000000000000000000000000000000000dEaD))\n        .sub(cbc.balanceOf(address(uniswapV2Pair))); \n        return _newCalculateReward(\n            cbc.balanceOf(address(addr)),\n            usdt.balanceOf(address(cbc)),\n            cTotalSupply\n        );\n    }\n    \n    //----------------------------\n    \n}\n"}}