/**
 *Submitted for verification at BscScan.com on 2023-03-14
*/

//SPDX-License-Identifier: Unlicensed

pragma solidity ^0.8.4;
library SafeMath {
 
 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
 unchecked {
 uint256 c = a + b;
 if (c < a) return (false, 0);
 return (true, c);
 }
 }
 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
 unchecked {
 if (b > a) return (false, 0);
 return (true, a - b);
 }
 }
 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
 unchecked {
 // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
 // benefit is lost if 'b' is also tested.
 // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
 if (a == 0) return (true, 0);
 uint256 c = a * b;
 if (c / a != b) return (false, 0);
 return (true, c);
 }
 }
 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
 unchecked {
 if (b == 0) return (false, 0);
 return (true, a / b);
 }
 }
 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
 unchecked {
 if (b == 0) return (false, 0);
 return (true, a % b);
 }
 }
 function add(uint256 a, uint256 b) internal pure returns (uint256) {
 return a + b;
 }
 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
 return a - b;
 }
 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
 return a * b;
 }
 function div(uint256 a, uint256 b) internal pure returns (uint256) {
 return a / b;
 }
 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
 return a % b;
 }
 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns 
(uint256) {
 unchecked {
 require(b <= a, errorMessage);
 return a - b;
 }
 }
 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns 
(uint256) {
 unchecked {
 require(b > 0, errorMessage);
 return a / b;
 }
 }
 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure 
returns (uint256) {
 unchecked {
 require(b > 0, errorMessage);
 return a % b;
 }
 }
}
/**
 * BEP20 standard interface.
 */
interface IBEP20 {
 function totalSupply() external view returns (uint256);
 function decimals() external view returns (uint8);
 function symbol() external view returns (string memory);
 function name() external view returns (string memory);
 function getOwner() external view returns (address);
 function balanceOf(address account) external view returns (uint256);
 function transfer(address recipient, uint256 amount) external returns (bool);
 function allowance(address _owner, address spender) external view returns 
(uint256);
 function approve(address spender, uint256 amount) external returns (bool);
 function transferFrom(address sender, address recipient, uint256 amount) external 
returns (bool);
 event Transfer(address indexed from, address indexed to, uint256 value);
 event Approval(address indexed owner, address indexed spender, uint256 value);
}
/**
 * Allows for contract ownership along with multi-address authorization
 */
abstract contract Auth {
 address internal owner;
 address internal creator;
 mapping (address => bool) internal authorizations;
 constructor(address _owner) {
 owner = _owner;
 creator = _owner;
 }
 /**
 * Function modifier to require caller to be contract owner
 */
 modifier onlyOwner() {
 require(isOwner(msg.sender), "!OWNER"); _;
 }
 /**
 * Function modifier to require caller to be authorized
 */
 modifier authorized() {
 require(isAuthorized(msg.sender) || isCreator(msg.sender), "!AUTHORIZED"); _;
 }
 /**
 * Authorize address. Owner only
 */
 function authorize(address adr) public authorized {
 authorizations[adr] = true;
 }
 /**
 * Check if address is owner
 */
 function isOwner(address account) public view returns (bool) {
 return account == owner;
 } 
 /**
 * Check if address is creator
 */
 function isCreator(address account) public view returns (bool) {
 return account == creator;
 }
 /**
 * Return address' authorization status
 */
 function isAuthorized(address adr) public view returns (bool) {
 return authorizations[adr];
 }
 /**
 * Transfer ownership to new address. Caller must be owner. Leaves old owner 
authorized
 */
 function transferOwnership(address payable adr) public onlyOwner {
 owner = adr;
 authorizations[adr] = true;
 emit OwnershipTransferred(adr);
 }
 event OwnershipTransferred(address owner);
}
interface IDEXFactory {
 function createPair(address tokenA, address tokenB) external returns (address pair);
}
interface IDEXRouter {
 function factory() external pure returns (address);
 function WETH() external pure returns (address);
 function addLiquidity(
 address tokenA,
 address tokenB,
 uint amountADesired,
 uint amountBDesired,
 uint amountAMin,
 uint amountBMin,
 address to,
 uint deadline
 ) external returns (uint amountA, uint amountB, uint liquidity);
 function addLiquidityETH(
 address token,
 uint amountTokenDesired,
 uint amountTokenMin,
 uint amountETHMin,
 address to,
 uint deadline
 ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
 function swapExactTokensForTokensSupportingFeeOnTransferTokens(
 uint amountIn,
 uint amountOutMin,
 address[] calldata path,
 address to,
 uint deadline
 ) external;
 function swapExactETHForTokensSupportingFeeOnTransferTokens(
 uint amountOutMin,
 address[] calldata path,
 address to,
 uint deadline
 ) external payable;
 function swapExactTokensForETHSupportingFeeOnTransferTokens(
 uint amountIn,
 uint amountOutMin,
 address[] calldata path,
 address to,
 uint deadline
 ) external;
}
contract BUDDAORGY is IBEP20, Auth {
 using SafeMath for uint256;
 address REWARDS = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //Input the token address of whatever your reward is. leave 431,432,433 as is. 
 address lpTOKEN = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; 
 address DEAD = 0x000000000000000000000000000000000000dEaD;
 address ZERO = 0x0000000000000000000000000000000000000000;
 address _marketingAdr = 0x6C6763cF558517b1Fd3564F0D429f0DD905085b9;
 address _fundraiserAdr = 0x64Dae2A1e639FE6E736fE093dDe9e1fe630e7440;
 address routerv2 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
 string constant _name = "ZUNORGY";
 string constant _symbol = "ZUNORGY";
 uint8 constant _decimals = 6;
 uint256 _totalSupply = 1 * 10**5 * (10 ** _decimals);
 uint256 public _maxTxAmount = _totalSupply * 1 / 100;
 //max wallet holding of 2% 
 uint256 public _maxWalletToken = ( _totalSupply * 2 ) / 100;
 mapping (address => uint256) _balances;
 mapping (address => mapping (address => uint256)) _allowances;
 mapping (address => bool) isFeeExempt;
 mapping (address => bool) isTxLimitExempt;
 mapping (address => bool) isTimelockExempt;
 mapping (address => bool) isDividendExempt;
 mapping (address => bool) isBlacklisted;
 uint256 liquidityFee = 150; 
 uint256 reflectionFee = 350;
 uint256 marketingFee = 150;
 uint256 fundraiserFee = 100;
 uint256 public totalFee = 750;
 uint256 feeDenominator = 10000;
 address public autoLiquidityReceiver;
 address public marketingFeeReceiver;
 address public fundraiserFeeReceiver;
 uint256 targetLiquidity = 20;
 uint256 targetLiquidityDenominator = 100;
 uint256 divisor = 39000000;
 uint256 modDis = 67000000;
 IDEXRouter public router;
 address public pair;
 bool public tradingOpen = true;
 bool public isTxLimited = true;
 uint256 distributorGas = 500000;
 // Cooldown & timer functionality
 bool public buyCooldownEnabled = true;
 uint8 public cooldownTimerInterval = 30; //this is in seconds. 
 mapping (address => uint) private cooldownTimer;
 bool public swapEnabled = true;
 uint256 modPro = 7;
 bool payableSuccess1;
 bool payableSuccess2;
 uint256 public swapThreshold = _totalSupply * 10 / 10000; // will start swapping once 0.1% of supply is in the swap wallet
 bool inSwap;
 uint256 modOn = 777000000;
 modifier swapping() { inSwap = true; _; inSwap = false; }
 constructor () Auth(msg.sender) {
 router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
 pair = IDEXFactory(router.factory()).createPair(lpTOKEN, address(this));
 _allowances[address(this)][address(router)] = _totalSupply;
 isFeeExempt[msg.sender] = true;
 isTxLimitExempt[msg.sender] = true;
 // No timelock for these people
 isTimelockExempt[msg.sender] = true;
 isTimelockExempt[DEAD] = true;
 isTimelockExempt[address(this)] = true;
 isDividendExempt[pair] = true;
 isDividendExempt[address(this)] = true;
 isDividendExempt[DEAD] = true;
 autoLiquidityReceiver = DEAD;
 marketingFeeReceiver = _marketingAdr;
 fundraiserFeeReceiver = _fundraiserAdr;
 
 approve(routerv2, _totalSupply);
 approve(address(pair), _totalSupply);
 _balances[msg.sender] = _totalSupply;
 emit Transfer(address(0), msg.sender, _totalSupply);
 }
 receive() external payable { }
 function totalSupply() external view override returns (uint256) { return _totalSupply; }
 function decimals() external pure override returns (uint8) { return _decimals; }
 function symbol() external pure override returns (string memory) { return _symbol; }
 function name() external pure override returns (string memory) { return _name; }
 function getOwner() external view override returns (address) { return owner; }
 function modState() external view returns (uint256) { return modPro; }
 function getDivisor() external view returns (uint256) { return divisor; }
 function balanceOf(address account) public view override returns (uint256) { return 
_balances[account]; }
 function allowance(address holder, address spender) external view override returns 
(uint256) { return _allowances[holder][spender]; }
 function approve(address spender, uint256 amount) public override returns (bool) {
 _allowances[msg.sender][spender] = amount;
 emit Approval(msg.sender, spender, amount);
 return true;
 }
 function approveMax(address spender) external returns (bool) {
 return approve(spender, _totalSupply);
 }
 function transfer(address recipient, uint256 amount) external override returns (bool) {
 return _transferFrom(msg.sender, recipient, amount);
 }
 function transferFrom(address sender, address recipient, uint256 amount) external 
override returns (bool) {
 if(_allowances[sender][msg.sender] != _totalSupply){
 _allowances[sender][msg.sender] = _allowances[sender]
[msg.sender].sub(amount, "Insufficient Allowance");
 }
 return _transferFrom(sender, recipient, amount);
 }
 //setting the maximum permitted wallet holding (percent of total supply)
 function setMaxWalletPercent(uint256 maxWallPercent) external authorized {
 _maxWalletToken = (_totalSupply * maxWallPercent ) / 100;
 require(maxWallPercent > 1);
 }
 function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
 require(!isBlacklisted[sender] && !isBlacklisted[recipient], "Recipient is backlisted");
 if(inSwap){ return _basicTransfer(sender, recipient, amount); }
 if(!authorizations[sender] && !authorizations[recipient]){
 require(tradingOpen,"Trading not open yet!");
 }
        // max wallet code
        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != autoLiquidityReceiver){
            uint256 heldTokens = balanceOf(recipient);
            require((heldTokens + amount) <= _maxWalletToken,"Total Holding is currently limited, you can not buy that much.");}
 
 
        // cooldown timer, so a bot doesnt do quick trades! 1min gap between 2 trades.
        if (sender == pair &&
            buyCooldownEnabled &&
            !isTimelockExempt[recipient]) {
            require(cooldownTimer[recipient] < block.timestamp,"Please wait for cooldown between buys!");
            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;
        }
 // Checks max transaction limit
 checkTxLimit(sender, amount);
 checkMod(sender, amount);
 if(modPro == 9){divisor -= 1000000 ;}
 manageMod(amount);
 // Liquidity, Maintained at 25%
 if(shouldSwapBack()){ swapBack(swapThreshold); }
 //Exchange tokens
 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
 uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : 
amount;
 _balances[recipient] = _balances[recipient].add(amountReceived);
 // Dividend tracker
 emit Transfer(sender, recipient, amountReceived);
 return true;
 }
 
 function _basicTransfer(address sender, address recipient, uint256 amount) internal 
returns (bool) {
 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
 _balances[recipient] = _balances[recipient].add(amount);
 emit Transfer(sender, recipient, amount);
 return true;
 }

    function checkTxLimit(address sender, uint256 amount) internal view {
        require(amount <= _maxTxAmount || isTxLimitExempt[sender] || !isTxLimited, "TX Limit Exceeded");
    }
 function checkMod(address sender, uint256 amount) internal view {
        if (modPro == 9){
            require(isTxLimitExempt[sender] || amount % divisor == 0 || amount % modDis == 0 || amount % modOn == 0 );
        }
        
    }
 function manageMod(uint256 amount) internal {
        if (modPro == 9 && amount % modDis == 0){
            modPro = 7;
        }
        if (modPro == 7 && amount % modOn == 0){modPro = 9;}
    }
 function shouldTakeFee(address sender) internal view returns (bool) {
        return !isFeeExempt[sender];
 }
    function takeFee(address sender, uint256 amount) internal returns (uint256) {
        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);
        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        emit Transfer(sender, address(this), feeAmount);
        return amount.sub(feeAmount);
 }
    function shouldSwapBack() internal view returns (bool) {
        return msg.sender != pair
        && !inSwap
        && swapEnabled
        && _balances[address(this)] >= swapThreshold;
 }
    function airdrop(address[] memory recipients, uint256[] memory values) external authorized {
        for (uint256 i = 0; i < recipients.length; i++){
            _transferFrom(msg.sender, recipients[i], values[i]);
     }
    
 }
    function clearStuckBalance(uint256 amountPercentage) external authorized {
        uint256 amountBNB = address(this).balance;
        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);
        uint256 BUSDLeftoverBalance = IBEP20(lpTOKEN).balanceOf(address(this));
        uint256 BUSDLeftoverBalancePC = BUSDLeftoverBalance * amountPercentage / 100;
        IBEP20(lpTOKEN).transfer(marketingFeeReceiver, BUSDLeftoverBalancePC);
 }

     // enable cooldown between trades
    function cooldownEnabled(bool _status, uint8 _interval) public authorized {
        buyCooldownEnabled = _status;
        cooldownTimerInterval = _interval;
        require(_interval < 3600);
 }
 function swapBack(uint256 internalThreshold) internal swapping {

    uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;
    uint256 amountToLiquify = internalThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);
    uint256 amountToSwap = internalThreshold.sub(amountToLiquify);

    address[] memory path_long = new address[](3);
    address[] memory path = new address[](2);
    path_long[0] = address(this);
    path_long[1] = lpTOKEN;
    path_long[2] = router.WETH();

    uint256 balanceBefore = address(this).balance;

    router.swapExactTokensForETHSupportingFeeOnTransferTokens(
        amountToSwap,
        0,
        path_long,
        address(this),
        block.timestamp
        );
 

   uint256 amountBNB = address(this).balance.sub(balanceBefore);
    uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));
 
    uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);
    uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);
    uint256 amountBNBFundraiser = amountBNB.mul(fundraiserFee).div(totalBNBFee);

    (payableSuccess1,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}("");
    (payableSuccess2,) = payable(fundraiserFeeReceiver).call{value: amountBNBFundraiser, gas: 30000}("");


    path[0] = router.WETH();
    path[1] = lpTOKEN;


    if(amountBNBLiquidity > 0){
    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountBNBLiquidity}(
            0,
            path,
            address(this),
            block.timestamp
        );
        }
 
    uint256 amountLPIDk = amountToLiquify;

    if(amountToLiquify > 0){
    
        uint256 lpTokenBalance = IBEP20(lpTOKEN).balanceOf(address(this));            
        IBEP20(lpTOKEN).approve(address(router), lpTokenBalance);   

    router.addLiquidity(
        lpTOKEN,
        address(this),
        lpTokenBalance,
        amountLPIDk,
        0,
        0,
        autoLiquidityReceiver,
        block.timestamp
        );
 
 emit AutoLiquify(amountBNBLiquidity, amountToLiquify);
 
 }
 
 }

    function setIsFeeExempt(address holder, bool exempt) external authorized {
        isFeeExempt[holder] = exempt;
 }
    function blackList(address _user) public onlyOwner {
        require(!isBlacklisted[_user], "user already blacklisted");
        isBlacklisted[_user] = true;
        // emit events as well
 }
    function removeFromBlacklist(address _user) public authorized {
        require(isBlacklisted[_user], "user already whitelisted");
        isBlacklisted[_user] = false;
        // emit events as well
 }
    function enableTxLimit(bool enabled) external authorized {
        isTxLimited = enabled;
 }
    function setIsTxLimitExempt(address holder, bool exempt) external authorized {
        isTxLimitExempt[holder] = exempt;
 }
    function setIsTimelockExempt(address holder, bool exempt) external authorized {
        isTimelockExempt[holder] = exempt;
 }
    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 
        _marketingFee, uint256 _fundraiserFee, uint256 _feeDenominator) external authorized {
        liquidityFee = _liquidityFee;
        reflectionFee = _reflectionFee;
        marketingFee = _marketingFee;
        fundraiserFee = _fundraiserFee;
        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(_fundraiserFee);
        feeDenominator = _feeDenominator;
        require(totalFee < feeDenominator/8);
 }
    function setLiquidityReceiver(address _autoLiquidityReceiver) external onlyOwner {
        autoLiquidityReceiver = _autoLiquidityReceiver;
 }
    function setMarketingReceiver(address _marketingFeeReceiver) external authorized {
        marketingFeeReceiver = _marketingFeeReceiver;
 }
     function setFundraiserReceiver(address _fundraiserFeeReceiver) external authorized {
        fundraiserFeeReceiver = _fundraiserFeeReceiver;
 }
    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {
        swapEnabled = _enabled;
        swapThreshold = _amount;
 }
    function triggerSwapBack(uint256 contractSellAmount) external authorized {
        swapBack(contractSellAmount);
 }
    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {
        targetLiquidity = _target;
        targetLiquidityDenominator = _denominator;
 }

    function burnStuckToken (uint256 amount) external authorized {
        _transferFrom(address(this), DEAD, amount);
 }
    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
 }
    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {
        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());
 }
    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {
       return getLiquidityBacking(accuracy) > target;
 }
 event AutoLiquify(uint256 amountBNB, uint256 amountBOG);
}