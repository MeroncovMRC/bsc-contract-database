{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"HashFarming.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./IPancakePair.sol\";\r\n\r\ncontract HashFarming is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public AGREEMENT = \"I confirm I am not a citizen, national, resident (tax or otherwise) or holder of a green card of the USA and have never been a citizen, national, resident (tax or otherwise) or holder of a green card of the USA in the past.\";\r\n    string constant AGREEMENT_LENGTH = \"223\";\r\n\r\n    address public hashTokenAddress;\r\n\r\n    struct Pool {\r\n        address token;\r\n        bool hashTokenPosition;\r\n        uint stakingTokensLeft;\r\n        uint partnerTokensLeft;\r\n        uint partnerPercent;\r\n        uint blocksTotal;\r\n        uint startBlock;\r\n        uint endBlock;\r\n        uint rewardPerBlock;\r\n        uint maxApr;\r\n        uint currentStakedAmount;\r\n        uint finalStakedAmount;\r\n    }\r\n    Pool[] public pools;\r\n\r\n    struct User {\r\n        bytes agreementSignature;\r\n        address partner;\r\n        uint16 referral;\r\n    }\r\n    mapping(address =\u003e User) public users;\r\n\r\n    struct Stake {\r\n        uint amount;\r\n        uint lastRewardBlock;\r\n        uint rewardCollected;\r\n        uint partnerRewardCollected;\r\n    }\r\n    mapping(uint =\u003e mapping(address =\u003e Stake)) public stakes;\r\n\r\n    address[] public participants;\r\n\r\n    event Staked(\r\n        uint indexed poolId,\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 referral,\r\n        uint addedAmount,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward\r\n    );\r\n    event Unstaked(\r\n        uint indexed poolId,\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 referral,\r\n        uint withdrawnAmount,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward,\r\n        bool emergency\r\n    );\r\n    event Collected(\r\n        uint indexed poolId,\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint16 referral,\r\n        uint currentAmount,\r\n        uint reward,\r\n        uint partnerReward\r\n    );\r\n\r\n    constructor(address _hashTokenAddress) {\r\n        hashTokenAddress = _hashTokenAddress;\r\n    }\r\n\r\n    function addPool(\r\n        address _token,\r\n        uint _stakingTokensLimit,\r\n        uint _partnerPercent,\r\n        uint _blocksTotal,\r\n        uint _maxApr\r\n    ) external onlyOwner {\r\n        uint partnerTokensLimit = _stakingTokensLimit.div(100).mul(_partnerPercent);\r\n        uint rewardPerBlock = _stakingTokensLimit.div(_blocksTotal);\r\n        pools.push(Pool(\r\n                _token,\r\n                _getLiquidityHashPosition(_token),\r\n                _stakingTokensLimit,\r\n                partnerTokensLimit,\r\n                _partnerPercent,\r\n                _blocksTotal,\r\n                block.number,\r\n                block.number.add(_blocksTotal),\r\n                rewardPerBlock,\r\n                _maxApr,\r\n                0,\r\n                0\r\n            ));\r\n    }\r\n\r\n    function editPool(\r\n        uint _poolId,\r\n        uint _stakingTokensLimit,\r\n        uint _partnerPercent,\r\n        uint _blocksTotal,\r\n        uint _maxApr,\r\n        bool _recalculateReward\r\n    ) external onlyOwner {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        Pool storage pool = pools[_poolId];\r\n        pool.stakingTokensLeft = _stakingTokensLimit;\r\n        pool.partnerPercent = _partnerPercent;\r\n        pool.partnerTokensLeft = _stakingTokensLimit.div(100).mul(_partnerPercent);\r\n        pool.blocksTotal = _blocksTotal;\r\n        pool.endBlock = pool.startBlock.add(_blocksTotal);\r\n        pool.maxApr = _maxApr;\r\n        if (_recalculateReward) {\r\n            pool.rewardPerBlock = _stakingTokensLimit.div(_blocksTotal);\r\n        }\r\n    }\r\n\r\n    function withdrawRemainingTokens() external onlyOwner {\r\n        uint contractBalance = _getHashBalance(address(this));\r\n        uint reservedBalance = 0;\r\n        for (uint i = 0; i \u003c pools.length; i++) {\r\n            require(block.number \u003e pools[i].endBlock, \"The farming is not finished yet\");\r\n            for (uint j = 0; j \u003c participants.length; j++) {\r\n                uint userReward = _calculateReward(i, participants[j]);\r\n                reservedBalance = reservedBalance.add(userReward);\r\n                if (users[participants[j]].partner != address(0)) {\r\n                    reservedBalance = reservedBalance.add(userReward.mul(pools[i].partnerPercent).div(100));\r\n                }\r\n            }\r\n        }\r\n        require(contractBalance \u003e reservedBalance, \"Nothing to withdraw\");\r\n        TransferHelper.safeTransfer(hashTokenAddress, msg.sender, contractBalance.sub(reservedBalance));\r\n    }\r\n\r\n    function stake(\r\n        uint _poolId,\r\n        uint _amount,\r\n        address _partner,\r\n        uint16 _referral,\r\n        bytes calldata _agreementSignature\r\n    ) external {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        require(block.number \u003c pools[_poolId].endBlock, \"The farming is finished\");\r\n        require(_amount \u003e 0, \"Incorrect amount\");\r\n        User storage user = users[msg.sender];\r\n        if (user.agreementSignature.length == 0) {\r\n            require (_verifySignature(_agreementSignature, msg.sender), \"Incorrect agreement signature\");\r\n            user.agreementSignature = _agreementSignature;\r\n            if (_partner != address(0)) {\r\n                user.partner = _partner;\r\n            }\r\n            if (_referral \u003e 0) {\r\n                user.referral = _referral;\r\n            }\r\n            participants.push(msg.sender);\r\n        }\r\n        (uint reward, uint partnerReward) = _collect(_poolId, msg.sender);\r\n        Stake storage userStake = stakes[_poolId][msg.sender];\r\n        userStake.amount = userStake.amount.add(_amount);\r\n        pools[_poolId].currentStakedAmount = pools[_poolId].currentStakedAmount.add(_amount);\r\n        TransferHelper.safeTransferFrom(pools[_poolId].token, msg.sender, address(this), _amount);\r\n        emit Staked(\r\n            _poolId,\r\n            msg.sender,\r\n            user.partner,\r\n            user.referral,\r\n            _amount,\r\n            userStake.amount,\r\n            reward,\r\n            partnerReward\r\n        );\r\n    }\r\n\r\n    function unstake(uint _poolId, uint _amount) external {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        _unstake(_poolId, msg.sender, _amount, false);\r\n    }\r\n\r\n    function unstakeAll(uint _poolId) external {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        _unstake(_poolId, msg.sender, stakes[_poolId][msg.sender].amount, false);\r\n    }\r\n\r\n    function emergencyWithdraw(uint _poolId) external {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        _unstake(_poolId, msg.sender, stakes[_poolId][msg.sender].amount, true);\r\n    }\r\n\r\n    function collect(uint _poolId) external {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        (uint reward, uint partnerReward) = _collect(_poolId, msg.sender);\r\n        require(reward \u003e 0, \"Nothing to collect\");\r\n        emit Collected(\r\n            _poolId,\r\n            msg.sender,\r\n            users[msg.sender].partner,\r\n            users[msg.sender].referral,\r\n            stakes[_poolId][msg.sender].amount,\r\n            reward,\r\n            partnerReward\r\n        );\r\n    }\r\n\r\n    function getCurrentAPR(uint _poolId) public view returns (uint apr) {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        Pool storage pool = pools[_poolId];\r\n        if (block.number \u003e= pool.endBlock) {\r\n            apr = 0;\r\n        } else if (pool.currentStakedAmount == 0) {\r\n            apr = pool.maxApr;\r\n        } else {\r\n            apr = pool.stakingTokensLeft\r\n            .mul(pool.blocksTotal)\r\n            .mul(100)\r\n            .div(_convertLpTokensToHash(pool.token, pool.hashTokenPosition, pool.currentStakedAmount))\r\n            .div(pool.endBlock.sub(block.number));\r\n            if (apr \u003e pool.maxApr) {\r\n                apr = pool.maxApr;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPendingReward(uint _poolId, address _address) public view returns (uint) {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        return _calculateReward(_poolId, _address);\r\n    }\r\n\r\n    function getPendingPartnerReward(uint _poolId, address _address) external view returns (uint partnerReward) {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        partnerReward = 0;\r\n        for (uint i = 0; i \u003c participants.length; i++) {\r\n            if (users[participants[i]].partner == _address) {\r\n                uint userReward = _calculateReward(_poolId, participants[i]);\r\n                partnerReward = partnerReward.add(userReward.mul(pools[_poolId].partnerPercent).div(100));\r\n            }\r\n        }\r\n    }\r\n\r\n    function countParticipants() external view returns (uint) {\r\n        return participants.length;\r\n    }\r\n\r\n    function getCurrentInfo(uint _poolId, address _address) external view returns (\r\n        uint apr,\r\n        uint totalStakedAmount,\r\n        uint userPendingReward,\r\n        bool isParticipant,\r\n        uint blocksLeft,\r\n        uint referrals,\r\n        uint activeReferrals,\r\n        uint referralsStakedAmount,\r\n        uint referralsRewardCollected\r\n    ) {\r\n        require(_poolId \u003c pools.length, \"Incorrect pool ID\");\r\n        Pool storage pool = pools[_poolId];\r\n        apr = getCurrentAPR(_poolId);\r\n        totalStakedAmount = pool.currentStakedAmount;\r\n        userPendingReward = getPendingReward(_poolId, _address);\r\n        isParticipant = users[_address].agreementSignature.length \u003e 0;\r\n        if (block.number \u003c pool.endBlock) {\r\n            blocksLeft = pool.endBlock - block.number;\r\n        } else {\r\n            blocksLeft = 0;\r\n        }\r\n        referrals = 0;\r\n        activeReferrals = 0;\r\n        referralsStakedAmount = 0;\r\n        referralsRewardCollected = 0;\r\n        for (uint i = 0; i \u003c participants.length; i++) {\r\n            if (users[participants[i]].partner == _address) {\r\n                referrals++;\r\n                if (stakes[_poolId][participants[i]].amount \u003e 0) {\r\n                    activeReferrals++;\r\n                    referralsStakedAmount += stakes[_poolId][participants[i]].amount;\r\n                }\r\n                referralsRewardCollected += stakes[_poolId][participants[i]].rewardCollected;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _unstake(uint _poolId, address _address, uint _amount, bool _emergency) internal {\r\n        require(_amount \u003e 0, \"Incorrect amount\");\r\n        Pool storage pool = pools[_poolId];\r\n        User storage user = users[_address];\r\n        Stake storage userStake = stakes[_poolId][_address];\r\n        if (block.number \u003e= pool.endBlock \u0026\u0026 pool.finalStakedAmount == 0) {\r\n            pool.finalStakedAmount = pool.currentStakedAmount;\r\n        }\r\n        (uint reward, uint partnerReward) = (0, 0);\r\n        if (!_emergency) {\r\n            (reward, partnerReward) = _collect(_poolId, _address);\r\n        }\r\n        require(_amount \u003c= userStake.amount, \"Incorrect amount\");\r\n        userStake.amount = userStake.amount.sub(_amount);\r\n        pool.currentStakedAmount = pool.currentStakedAmount.sub(_amount);\r\n        TransferHelper.safeTransfer(pool.token, _address, _amount);\r\n        emit Unstaked(\r\n            _poolId,\r\n            _address,\r\n            user.partner,\r\n            user.referral,\r\n            _amount,\r\n            userStake.amount,\r\n            reward,\r\n            partnerReward,\r\n            _emergency\r\n        );\r\n    }\r\n\r\n    function _collect(uint _poolId, address _address) internal returns (uint reward, uint partnerReward) {\r\n        Pool storage pool = pools[_poolId];\r\n        User storage user = users[_address];\r\n        Stake storage userStake = stakes[_poolId][_address];\r\n        reward = _calculateReward(_poolId, _address);\r\n        partnerReward = 0;\r\n        if (reward \u003e 0) {\r\n            TransferHelper.safeTransfer(hashTokenAddress, _address, reward);\r\n            pool.stakingTokensLeft = pool.stakingTokensLeft.sub(reward);\r\n            userStake.rewardCollected = userStake.rewardCollected.add(reward);\r\n            if (user.partner != address(0)) {\r\n                partnerReward = reward.mul(pool.partnerPercent).div(100);\r\n                if (partnerReward \u003e 0) {\r\n                    TransferHelper.safeTransfer(hashTokenAddress, user.partner, partnerReward);\r\n                    pool.partnerTokensLeft = pool.partnerTokensLeft.sub(partnerReward);\r\n                    stakes[_poolId][user.partner].partnerRewardCollected = stakes[_poolId][user.partner].partnerRewardCollected.add(partnerReward);\r\n                }\r\n            }\r\n        }\r\n        userStake.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function _calculateReward(uint _poolId, address _address) internal view returns (uint) {\r\n        Pool storage pool = pools[_poolId];\r\n        Stake storage userStake = stakes[_poolId][_address];\r\n        if (pool.currentStakedAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint currentBlock = block.number;\r\n        uint blocks = 0;\r\n        if (currentBlock \u003e pool.endBlock) {\r\n            currentBlock = pool.endBlock;\r\n        }\r\n        if (currentBlock \u003e userStake.lastRewardBlock) {\r\n            blocks = currentBlock.sub(userStake.lastRewardBlock);\r\n        }\r\n        uint totalStakedAmount = pool.finalStakedAmount \u003e 0 ? pool.finalStakedAmount : pool.currentStakedAmount;\r\n        uint maxReward = _convertLpTokensToHash(pool.token, pool.hashTokenPosition, userStake.amount)\r\n        .mul(pool.maxApr)\r\n        .mul(blocks)\r\n        .div(pool.blocksTotal)\r\n        .div(100);\r\n        uint reward = pool.rewardPerBlock.mul(blocks).mul(userStake.amount).div(totalStakedAmount);\r\n        if (reward \u003e maxReward) {\r\n            reward = maxReward;\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function _getHashBalance(address _address) internal returns (uint) {\r\n        (bool success, bytes memory data) = hashTokenAddress.call(\r\n            abi.encodeWithSelector(bytes4(keccak256(bytes(\u0027balanceOf(address)\u0027))), _address)\r\n        );\r\n        require(success, \"Getting HASH balance failed\");\r\n        return abi.decode(data, (uint));\r\n    }\r\n\r\n    function _getLiquidityHashPosition(address _address) internal view returns (bool position) {\r\n        (address token0, address token1) = _getLiquidityTokens(_address);\r\n        if (hashTokenAddress == token0) {\r\n            position = false;\r\n        } else if (hashTokenAddress == token1) {\r\n            position = true;\r\n        } else {\r\n            revert(\"Wrong liquidity: no HASH token\");\r\n        }\r\n    }\r\n\r\n    function _getLiquidityTokens(address _address) internal view returns (address token0, address token1) {\r\n        token0 = IPancakePair(_address).token0();\r\n        require(token0 != address(0), \"Getting token0 address failed\");\r\n        token1 = IPancakePair(_address).token1();\r\n        require(token1 != address(0), \"Getting token1 address failed\");\r\n    }\r\n\r\n    function _getLiquidityHashReserves(address _address, bool _position) internal view returns (uint reserves) {\r\n        (uint reserves0, uint reserves1) = _getLiquidityReserves(_address);\r\n        reserves = _position ? reserves1 : reserves0;\r\n    }\r\n\r\n    function _getLiquidityReserves(address _address) internal view returns (uint reserves0, uint reserves1) {\r\n        uint32 timestamp;\r\n        (reserves0, reserves1, timestamp) = IPancakePair(_address).getReserves();\r\n        require(reserves0 \u003e 0 \u0026\u0026 reserves1 \u003e 0, \"Getting liquidity reserves failed\");\r\n    }\r\n\r\n    function _getLiquidityTotalSupply(address _address) internal view returns (uint totalSupply) {\r\n        totalSupply = IPancakePair(_address).totalSupply();\r\n        require(totalSupply \u003e 0, \"Getting liquidity total supply failed\");\r\n    }\r\n\r\n    function _convertLpTokensToHash(address _address, bool _hashPosition, uint _lpAmount) internal view returns (uint hashAmount) {\r\n        uint hashReserves = _getLiquidityHashReserves(_address, _hashPosition);\r\n        uint totalSupply = _getLiquidityTotalSupply(_address);\r\n        hashAmount = hashReserves.mul(_lpAmount).div(totalSupply);\r\n    }\r\n\r\n    function _verifySignature(bytes memory _sign, address _signer) pure internal returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", AGREEMENT_LENGTH, AGREEMENT));\r\n        address[] memory signList = _recoverAddresses(hash, _sign);\r\n        return signList[0] == _signer;\r\n    }\r\n\r\n    function _recoverAddresses(bytes32 _hash, bytes memory _signatures) pure internal returns (address[] memory addresses) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint count = _countSignatures(_signatures);\r\n        addresses = new address[](count);\r\n        for (uint i = 0; i \u003c count; i++) {\r\n            (v, r, s) = _parseSignature(_signatures, i);\r\n            addresses[i] = ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    function _parseSignature(bytes memory _signatures, uint _pos) pure internal returns (uint8 v, bytes32 r, bytes32 s) {\r\n        uint offset = _pos * 65;\r\n        assembly {\r\n            r := mload(add(_signatures, add(32, offset)))\r\n            s := mload(add(_signatures, add(64, offset)))\r\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\r\n        }\r\n        if (v \u003c 27) v += 27;\r\n        require(v == 27 || v == 28);\r\n    }\r\n\r\n    function _countSignatures(bytes memory _signatures) pure internal returns (uint) {\r\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\r\n    }\r\n}"},"IPancakePair.sol":{"content":"pragma solidity \u003e=0.5.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::safeApprove: approve failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::safeTransfer: transfer failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \u0027TransferHelper::transferFrom: transferFrom failed\u0027\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \u0027TransferHelper::safeTransferETH: ETH transfer failed\u0027);\r\n    }\r\n}"}}