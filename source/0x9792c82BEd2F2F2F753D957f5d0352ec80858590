{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"NexusPrivateSale.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity \u003e= 0.8.17;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract NexusPrivateSale is Ownable {\r\n    event SpacelistAdd(address indexed wallet);\r\n    event SpacelistRemove(address indexed wallet);\r\n    event SpacelistLocked();\r\n\r\n    // --- Settings ---\r\n\r\n    IERC20 public Token;\r\n    IERC20 public USDC;\r\n\r\n    uint256 public allocationWindow = 3600;\r\n    uint256 public currentTier = 0;\r\n    uint256[] public tierPrice = [0, 0.0075 ether, 0.0080 ether, 0.0085 ether, 0.0090 ether, 0.0095 ether];\r\n    uint256[] public tierSupply = [0, 2000000 ether, 3000000 ether, 4000000 ether, 5000000 ether, 6000000 ether];\r\n    bool public saleEndedForever;\r\n    bool public salePaused;\r\n\r\n    mapping (address =\u003e bool) public isSpacelisted;\r\n    uint256 public slCount;\r\n    bool public slLocked;\r\n\r\n    mapping (uint256 =\u003e mapping (address =\u003e uint256)) public tierAndAddressToAmountBought;\r\n    mapping (uint256 =\u003e uint256) public tierToAmountLeft;\r\n    mapping (uint256 =\u003e uint256) public tierToAllocation;\r\n    mapping (uint256 =\u003e uint256) public tierStartTimestamp;\r\n\r\n    uint256 public constant vestingPercentageTGE = 50;\r\n    \r\n    constructor (address _tokenAddr, address _usdcAddr) {\r\n        Token = IERC20(_tokenAddr);\r\n        USDC = IERC20(_usdcAddr);\r\n    }\r\n\r\n    // --- Owner config ---\r\n\r\n    /*\r\n     * @dev Add or remove addresses to/from SL\r\n     */\r\n    function updateSpacelist(address[] calldata walletsToAdd, address[] calldata walletsToRemove) external onlyOwner {\r\n        require(!slLocked, \"Locked\");\r\n\r\n        for (uint256 i=0; i\u003cwalletsToAdd.length; i++) {\r\n            require(isSpacelisted[walletsToAdd[i]] == false, \"Already spacelisted\");\r\n            isSpacelisted[walletsToAdd[i]] = true;\r\n            emit SpacelistAdd(walletsToAdd[i]);\r\n        }\r\n        for (uint256 i=0; i\u003cwalletsToRemove.length; i++) {\r\n            require(isSpacelisted[walletsToRemove[i]] == true, \"Wallet is not spacelisted\");\r\n            isSpacelisted[walletsToRemove[i]] = false;\r\n            emit SpacelistRemove(walletsToRemove[i]);\r\n        }\r\n        slCount = slCount + walletsToAdd.length - walletsToRemove.length;\r\n    }\r\n\r\n    /*\r\n     * @dev Lock SL\r\n     */\r\n    function lockSL() external onlyOwner {\r\n        require(!slLocked, \"Already locked\");\r\n        slLocked = true;\r\n        emit SpacelistLocked();\r\n    }\r\n\r\n    /*\r\n     * @dev Trigger next tier\r\n     */\r\n    function triggerNextTier(uint256 nextTier) external onlyOwner {\r\n        require(slLocked, \"SL not locked\");\r\n        require(currentTier+1 == nextTier, \"Next tier invalid\");\r\n        require(nextTier \u003c= 5, \"Can\u0027t go past tier 5\");\r\n\r\n        if (nextTier == 1) {\r\n            require(Token.balanceOf(address(this)) == 10000000 ether, \"Token not deposited\");\r\n        }\r\n\r\n        currentTier = nextTier;\r\n        tierToAllocation[currentTier] = tierSupply[currentTier] / slCount;\r\n        tierStartTimestamp[currentTier] = block.timestamp;\r\n        tierToAmountLeft[currentTier] = tierSupply[currentTier];\r\n    }\r\n\r\n    /*\r\n     * @dev Toggle pause sale\r\n     */\r\n    function togglePauseSale() external onlyOwner {\r\n        salePaused = !salePaused;\r\n    }\r\n\r\n    /*\r\n     * @dev End sale forever\r\n     */\r\n    function endSaleForever() external onlyOwner {\r\n        saleEndedForever = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw USDC balance from the contract\r\n     */\r\n    function withdrawUSDC() external onlyOwner {\r\n        uint256 balance = USDC.balanceOf(address(this));\r\n        USDC.transfer(msg.sender, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw token balance from the contract\r\n     */\r\n    function withdrawToken() external onlyOwner {\r\n        uint256 balance = Token.balanceOf(address(this));\r\n        Token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    // --- Sale ---\r\n\r\n    /*\r\n     * @dev Buy token in private sale\r\n     */\r\n    function buy(uint256 tokenAmountNoDecimals) external {\r\n        require(salePaused == false, \"Sale temporarily paused\");\r\n        require(currentTier \u003e 0, \"Sale not started\");\r\n        require(saleEndedForever == false, \"Sale ended\");\r\n        require(isSpacelisted[msg.sender], \"Not spacelisted\");\r\n\r\n        uint256 amountLeftForTier = tierToAmountLeft[currentTier];\r\n        require(amountLeftForTier \u003e 0, \"Current tier sold out\");\r\n\r\n        uint256 tokenAmount = tokenAmountNoDecimals * 10**18;\r\n\r\n        if (block.timestamp \u003c (tierStartTimestamp[currentTier] + allocationWindow)) {\r\n            require(tierAndAddressToAmountBought[currentTier][msg.sender] + tokenAmount \u003c= tierToAllocation[currentTier], \"Allocation exceeded\");\r\n            tierAndAddressToAmountBought[currentTier][msg.sender] += tokenAmount;\r\n        }\r\n\r\n        if (tokenAmount \u003e amountLeftForTier) {\r\n            tokenAmount = amountLeftForTier;\r\n        }\r\n\r\n        uint256 usdcCost = (tokenAmount / 10**18) * tierPrice[currentTier];\r\n        USDC.transferFrom(msg.sender, address(this), usdcCost);\r\n\r\n        uint256 tokenAmountToReceive = tokenAmount * vestingPercentageTGE / 100;\r\n        Token.transfer(msg.sender, tokenAmountToReceive);\r\n\r\n        tierToAmountLeft[currentTier] -= tokenAmount;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}}