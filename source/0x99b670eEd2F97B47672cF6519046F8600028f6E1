
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/PixSwapStake.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

import '@openzeppelin/contracts/access/Ownable.sol';

contract PixSwapStake is Ownable {
    IERC20 public immutable stakingToken;
    
    uint public constant NINETY_DAYS_IN_SECONDS = 90 * 24 * 60 * 60;

    struct Stake {
        uint id;
        uint amount;
        uint stakedTime;
        bool withdrawn;
    }

    uint public monthlyReward = 187;

    uint public maxSupply = 8_000_000 * 1e18;

    uint public minimumStakeAmount = 10_000 * 1e18;

    mapping(address => uint[]) public stakedIdsOf;

    mapping(uint => Stake) public stakes;

    uint public currentId;
    // Total staked
    uint public totalSupply;

    event Staked(address indexed user, uint id);
    event Restaked(address indexed user, uint id);
    event Withdrawn(address indexed user, uint id);

    constructor(address _stakingToken) {
        stakingToken = IERC20(_stakingToken);
    }

    function setMonthlyReward(uint _monthlyReward) external onlyOwner {
        monthlyReward = _monthlyReward;
    }

    function setMinimumStakeAmount(uint _minimumAmount) external onlyOwner {
        minimumStakeAmount = _minimumAmount;
    }

    function setMaxSupply(uint _maxSupply) external onlyOwner {
        maxSupply = _maxSupply;
    }

    function stake(uint _amount) external {
        require(_amount > 0, "amount = 0");
        require(totalSupply + _amount < maxSupply, "max supply reached");
        require(_amount >= minimumStakeAmount, "amount is less than minimum stake amount");
        stakingToken.transferFrom(msg.sender, address(this), _amount);
        stakedIdsOf[msg.sender].push(currentId);
        stakes[currentId].stakedTime = block.timestamp;
        stakes[currentId].amount = _amount; 
        stakes[currentId].id = currentId;
        totalSupply += _amount;
        emit Staked(msg.sender,  currentId);
        currentId++;
    }

    function withdraw(uint id) external {
        require(block.timestamp - stakes[id].stakedTime >= NINETY_DAYS_IN_SECONDS, "cannot withdraw before 90 days");
        require(checkIfSenderOwnsStakeId(id), "sender does not own this stake");
        require(!stakes[id].withdrawn, "id has already been withdrawn");
        stakes[id].withdrawn = true;
        totalSupply -= stakes[id].amount;        
        stakingToken.transfer(msg.sender, stakes[id].amount + getRewardsForAmount(stakes[id].amount));
        emit Withdrawn(msg.sender, id);
    }

    function restake(uint id) external {
        require(block.timestamp - stakes[id].stakedTime >= NINETY_DAYS_IN_SECONDS, "cannot restake before 90 days");
        require(checkIfSenderOwnsStakeId(id), "sender does not own this stake");
        require(!stakes[id].withdrawn, "id has already been withdrawn");
        stakes[id].withdrawn = true;
        stakedIdsOf[msg.sender].push(currentId);
        stakes[currentId].stakedTime = block.timestamp;
        uint currentReward = getRewardsForAmount(stakes[id].amount);
        stakes[currentId].amount = stakes[id].amount + currentReward;
        stakes[currentId].id = currentId;
        totalSupply += currentReward;
        emit Restaked(msg.sender, currentId);
        currentId++;
    }

    function balanceOf(address _account) external view returns (uint) {
        uint balance = 0;
        for(uint i = 0; i < stakedIdsOf[_account].length; i++){
            if(!stakes[stakedIdsOf[_account][i]].withdrawn){
                balance += stakes[stakedIdsOf[_account][i]].amount;
            }
        }
        return balance;    
    }

    function stakesOf(address _account) external view returns (Stake[] memory values) {
        values = new Stake[](stakedIdsOf[_account].length);
        for(uint i = 0; i < stakedIdsOf[_account].length; i++){
            Stake memory currentStake = stakes[stakedIdsOf[_account][i]];
            values[i] = currentStake;
        }
    }

    function checkIfSenderOwnsStakeId(uint id) private view returns(bool){
        for(uint i = 0; i < stakedIdsOf[msg.sender].length; i++){
            if(stakedIdsOf[msg.sender][i] == id){
                return true;
            }
        }
        return false;
    }

    function ownerWithdraw(uint _amount) external onlyOwner {
        stakingToken.transfer(msg.sender, _amount);
    }

    function getRewardsForAmount(uint amount) public view returns (uint) {
        return amount * (((1e4 + monthlyReward)**3) - 1e12) / 1e12;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}
