//SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

interface IERC20 {

    function totalSupply() external view returns (uint256);
    
    function symbol() external view returns(string memory);
    
    function name() external view returns(string memory);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);
    
    /**
     * @dev Returns the number of decimal places
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IMDB {
    function getOwner() external view returns (address);
}

interface IYieldFarm {
    function depositRewards(uint256 amount) external;
}

interface IAutoFarm {
    function compound() external;
}

contract BuyReceiver {

    // MDB token
    address public token = 0x0557a288A93ed0DF218785F2787dac1cd077F8f3;

    // Recipients Of Fees
    address public trustFund = 0x45F8F3a7A91e302935eB644f371bdE63D0b1bAc6;
    address public marketing = 0x511DEaD182a47c60034FEdf36eA0714972625E85;
    address public yieldFarm = 0x08254Df4F9461f8Fc15235be5092862BfF4824d4;
    address public staking = 0xe8f699B68ddE8e59DBe8fdF20955931B25fe7dFa;
    address public MDBPFarm = 0x65545d6eBf5F4245Ca2f9c90468dE38fE88E3672;
    address public BNBAutoFarm = 0x805Cc5aA1EBeE725250084D2ECcD9473c8bE46A9;

    /**
        Minimum Amount Of MDB In Contract To Trigger `trigger` Unless `approved`
            If Set To A Very High Number, Only Approved May Call Trigger Function
            If Set To A Very Low Number, Anybody May Call At Their Leasure
     */
    uint256 public minimumTokensRequiredToTrigger;

    // Address => Can Call Trigger
    mapping ( address => bool ) public approved;

    // Events
    event Approved(address caller, bool isApproved);
    event MinTriggerAmountUpdated(uint256 newMinTriggerAmount);
    event TrustFundPercentageUpdated(uint256 newTrustFundPercentage);
    event MarketingPercentageUpdated(uint256 newMarketingPercentage); 
    event TokenUpdated(address newToken);
    event TrustFundUpdated(address newTrustFund);
    event MarketingUpdated(address newMarketing);
    event YieldFarmUpdated(address newYieldFarm);
    event StakingUpdated(address newStaking);
    event MDBPFarmUpdated(address newMDBPFarm);
    event BNBAutoFarmUpdated(address newBNBAutoFarm);

    // Trust Fund Allocation
    uint256 public marketingPercentage = 200;
    uint256 public trustFundPercentage = 80;

    modifier onlyOwner(){
        require(
            msg.sender == IMDB(token).getOwner(),
            'Only MDB Owner'
        );
        _;
    }

    constructor() {
        // set initial approved
        approved[msg.sender] = true;

        // trust fund percentage
        trustFundPercentage = 80;

        // only approved can trigger at the start
        minimumTokensRequiredToTrigger = 10**30;
    }

    function trigger() external {

        // MDB Balance In Contract
        uint balance = IERC20(token).balanceOf(address(this));

        if (balance < minimumTokensRequiredToTrigger && !approved[msg.sender]) {
            return;
        }

        // fraction out tokens
        uint part1 = balance * trustFundPercentage / 1000;
        uint part2 = balance * marketingPercentage / 1000;

        // send to destinations
        _send(trustFund, part1);
        _send(marketing, part2);

        uint remainder = IERC20(token).balanceOf(address(this));
        uint forFarms = remainder / 3;
        uint forStaking = remainder - ( 2 * forFarms );

        // Send to farms
        IERC20(token).approve(yieldFarm, 10**50);
        IYieldFarm(yieldFarm).depositRewards(forFarms);

        // Send to Autocompounding Farm
        _send(MDBPFarm, forFarms);

        // Send to staking
        _send(staking, forStaking);

        // compound auto yield farms
        IAutoFarm(MDBPFarm).compound();
        IAutoFarm(BNBAutoFarm).compound();
    }
   
    function setApproved(address caller, bool isApproved) external onlyOwner {
        approved[caller] = isApproved;
        emit Approved(caller, isApproved);
    }
    
    function setMinTriggerAmount(uint256 minTriggerAmount) external onlyOwner {
        minimumTokensRequiredToTrigger = minTriggerAmount;
        emit MinTriggerAmountUpdated(minTriggerAmount);
    }
    
    function setTrustFundPercentage(uint256 newAllocatiton) external onlyOwner {
        require(newAllocatiton <= 1000, "Invalid allocation");
        trustFundPercentage = newAllocatiton;
        emit TrustFundPercentageUpdated(newAllocatiton);
    }

    function setMarketingPercentage(uint256 newAllocatiton) external onlyOwner {
        require(newAllocatiton <= 1000, "Invalid allocation");
        marketingPercentage = newAllocatiton;
        emit MarketingPercentageUpdated(newAllocatiton);
    }
    

    function setToken(address newToken) external onlyOwner {
        require(newToken != address(0), "Invalid token address");
        require(IERC20(newToken).totalSupply() > 0, "Invalid ERC20 token");
        token = newToken;
        emit TokenUpdated(newToken);
    }

    function setTrustFund(address newTrustFund) external onlyOwner {
        trustFund = newTrustFund;
        emit TrustFundUpdated(newTrustFund);
    }

    function setMarketing(address newMarketing) external onlyOwner {
        marketing = newMarketing;
        emit MarketingUpdated(newMarketing);
    }

    function setYieldFarm(address newYieldFarm) external onlyOwner {
        yieldFarm = newYieldFarm;
        emit YieldFarmUpdated(newYieldFarm);
    }

    function setStaking(address newStaking) external onlyOwner {
        staking = newStaking;
        emit StakingUpdated(newStaking);
    }

    function setMDBPFarm(address newMDBPFarm) external onlyOwner {
        MDBPFarm = newMDBPFarm;
        emit MDBPFarmUpdated(newMDBPFarm);
    }

    function setBNBAutoFarm(address newBNBAutoFarm) external onlyOwner {
        BNBAutoFarm = newBNBAutoFarm;
        emit BNBAutoFarmUpdated(newBNBAutoFarm);
    }
    
    function withdraw() external onlyOwner {
        (bool s,) = payable(msg.sender).call{value: address(this).balance}("");
        require(s);
    }
    
    function withdraw(address _token) external onlyOwner {
        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));
    }
    
    receive() external payable {}

    function _send(address recipient, uint amount) internal {
        bool s = IERC20(token).transfer(recipient, amount);
        require(s, 'Failure On Token Transfer');
    }
}