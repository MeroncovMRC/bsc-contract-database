// File: contracts/Ownable.sol
// SPDX-License-Identifier: No-License

pragma solidity ^0.8.0;

contract Ownable  {
    
    address private _owner;
    
    address private _newOwner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor ()  {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

  
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _newOwner = newOwner;
        //_transferOwnership(newOwner);
    }
    
    function acceptOwnership() public  {
        require(msg.sender == _newOwner);
        _transferOwnership(_newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts/TransferHelper.sol



pragma solidity ^0.8.0;

// helper methods for interacting with BEP20 tokens and sending BNB that do not consistently return true/false
library TransferHelper {
    
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferFund(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: BNB_TRANSFER_FAILED');
    }
    
}

// File: contracts/PreSale.sol



pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;



interface IBEP20 {
    function decimals() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
}   

interface IPrice {
    function getCurrencyPrice(address _which) external view returns(uint256);   // 1 - BNB, 2 - ETH, 3 - BTC
}

interface IKycChecker {
    function checkValidity(address _which) external view returns(bool); 
}

interface IEscrow{
    function deposit(address token, uint256 amount, address user) external returns(bool);
}

contract TokenVault {

    address public owner ;
    
    address public token ;
    
    
    constructor(address _owner,address _token) {
        owner = _owner;
        token = _token;
    }
    
    
    function transferToken(address _whom,uint256 _amount) external returns (bool){
        require(msg.sender == owner,"caller should be owner");
        TransferHelper.safeTransfer(token,_whom,_amount);
        return true;
    }
    
}

contract PreSale is Ownable {
    
    uint256 constant RATE_NOMINATOR = 10000;    // rate nominator

    uint256 constant SECONDS = 31536000;    // number of seconde in a year (365 days)
    
    uint256 public ethSideFee;
    
    uint256 public OptionIds;
    
    uint256 public OrderIds;
    
    struct Option {
        address vault;
        address token;
        uint256 tokenDecimal;
        uint128 period; // staking period in seconds
        uint128 rate;   // rate with 2 decimals (i.e. 4570 = 45.7%)
        uint256 fee;
        uint256 faceValue; // faceValue with 9 decimals 
        uint256 startDate; 
        uint256 endDate;
        uint256 minInvest; // user have to invest this much minimum investment
        uint256 maxInvest; // user can inveset max this much amount,
        bool isEscrow;
    }
    
    struct Order {
        uint256 optionId;
        address token;
        uint256 startDate; 
        uint256 endDate; 
        address user;
        bool fullfilled;
        uint256 reward;
        uint256 tokenAmount;
        uint256 usdAmount;
        bool isEscrow;
    }
    
    event SaleCreated(
        address indexed vault,
        address rewardToken,
        uint256 OptionId,
        address token,      
        uint256 faceValue,
        uint128[2]  periodRate,// [0] period , [1] rate
        uint256[2]  date, // [0] startDate , [1] endDate
        uint256[2]  invest // [0] minInvest , [1] maxInvest
    );
    
    event Stake(uint256 indexed OptionId,uint256 indexed OrderId,address indexed user,address token,uint256 usdAmount,uint256 lockDate,uint256 unlockDate ,uint256 tokenAmount,uint256 rewardAmount);
    
    event StakeWithEth(uint256 indexed OptionId,address indexed user,bytes32 txHash);
    
    event OptionChanged(uint256 indexed OptionId,string key,bytes value);
    
    // Determine vault owners 
    mapping (address => address) public vaultOwner;
    
    mapping (uint256 => address) public saleOwner;
    
    mapping (uint256 => Option) public options;   // vault => Options
    
    mapping (uint256 => Order) public stakingOrders;  // user => Orders
    
    mapping (bytes32 => bool) public ethTx;  // user => Orders
    
    mapping (address => uint256[]) public userOrder;
    
    mapping (address => mapping(uint256 => uint256[])) public userOrderOptionWise;
    
    mapping (uint256 => uint256) public totalSoldOut;
    
    mapping (uint256 => uint256) public totalRaised;
    
    mapping(address => mapping(uint256 => uint256)) public optionWiseInvesment;
    
    // from higher fee to lower one  with 9 decimals
    uint256[] public amountUsd;
    
    // two decimals 
    uint256[] public fee;
    
    address public company; // company address receive fee
    
    address public system; 

    IPrice public priceFeed;    // currency price contract
    
    IKycChecker public kycCheker; 
    
    IEscrow public escrow;
    
    constructor(address _company,address _priceFeed,address _system,address _kycCheker ) {
        require(_company != address(0)&&_system != address(0));
        company = _company;
        system = _system;
        priceFeed = IPrice(_priceFeed);
        amountUsd = [0];
        fee = [0];
        kycCheker = IKycChecker(_kycCheker);
    } 
    

    function setSystem(address payable _system) external onlyOwner returns(bool) {
        require(_system != address(0));
        system = _system;
        return true;
    }
    
    function setCompany(address payable _company) external onlyOwner returns(bool) {
        require(_company != address(0));
        company = _company;
        return true;
    }

    function setPriceFeed(address _priceFeed) external onlyOwner returns(bool) {
        priceFeed = IPrice(_priceFeed);
        return true;
    }
    

    function setEthFee(uint256  _fee) external onlyOwner returns(bool) {
        ethSideFee = _fee;
        return true;     
    }
    
    function setRestFee(uint256[] memory _amountUsd,uint256[] memory _fee) external onlyOwner returns(bool) {
        amountUsd = _amountUsd;
        fee = _fee;
        return true;     
    }
    
    function setKycChecker(address _kycCheker)  external onlyOwner returns(bool) {
        require(_kycCheker != address(0),"ZERO ADDRESS");
        kycCheker = IKycChecker(_kycCheker);
        return true;
    }
    
    function setEscrow(address _escrow)  external onlyOwner returns(bool) {
        require(_escrow != address(0),"ZERO ADDRESS");
        escrow = IEscrow(_escrow);
        return true;
    }
    

    modifier onlySaleOwner(uint256 optionId){
        require(msg.sender == saleOwner[optionId],"only presale onwer");
        _;
    }
    
    
    function changeRate(uint256 optionId,uint128 rate) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        o.rate = rate;
        emit OptionChanged(optionId,"rate",abi.encodePacked(rate));
        return true;
    }
    
    
    function changeMinInvest(uint256 optionId,uint256 minInvest) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        require(o.maxInvest > minInvest,"max inveset should greater then min invest");
        o.minInvest = minInvest;
        emit OptionChanged(optionId,"minInvest",abi.encodePacked(minInvest));
        return true;
    }
    
    function changeMaxInvest(uint256 optionId,uint256 maxInvest) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        require(maxInvest > o.minInvest,"max inveset should greater then min invest");
        o.maxInvest = maxInvest;
        emit OptionChanged(optionId,"maxInvest",abi.encodePacked(maxInvest));
        return true;
    }
    
    function changeEndDate(uint256 optionId,uint256 endDate) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        o.endDate = endDate;
        emit OptionChanged(optionId,"endDate",abi.encodePacked(endDate));
        return true;
    }
    
    function changeFaceValue(uint256 optionId,uint256 faceValue) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        o.faceValue = faceValue;
        emit OptionChanged(optionId,"faceValue",abi.encodePacked(faceValue));
        return true;
    }
    

    function changeOptionPeriod(uint256 optionId,uint128 time) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        o.period = time;
        emit OptionChanged(optionId,"time",abi.encodePacked(time));
        return true;
    }
    
    
    function changeIsEscrow(uint256 optionId,bool isEscrow) external onlySaleOwner(optionId) returns(bool){
        Option storage o = options[optionId];
        o.isEscrow = isEscrow;
        emit OptionChanged(optionId,"isEscrow",abi.encodePacked(isEscrow));
        return true;
    }
    
    
    function stakeWithEth(uint256 optionId,address user,uint256 amount,bytes32 txHash) external returns(bool){
        require(msg.sender == system,"caller should be system");
        require(!ethTx[txHash],"Already staked with hash");
        emit StakeWithEth(optionId,user,txHash);
        ethTx[txHash] = true;
        return _stake(optionId,user,amount); 
    } 
    
    
    function stakeWithBnb(uint256 optionId) external payable returns (bool){
        require(msg.value > 0,"should be more then zero");
        
        uint256 bnbPrice = priceFeed.getCurrencyPrice(address(1));

        uint256 usdAmount = (msg.value*bnbPrice)/10**18;

        uint256 _fee = options[optionId].fee;
        
        uint256 companyPart = msg.value * _fee / RATE_NOMINATOR;
        TransferHelper.safeTransferFund(company, companyPart);
        TransferHelper.safeTransferFund(saleOwner[optionId], msg.value - companyPart);
        return _stake(optionId,msg.sender,usdAmount);
    }


    function _stake(uint256 optionId,address user, uint256 usdAmount) internal returns(bool) {
        
        require(optionId <= OptionIds, "Wrong option ID");
        require(usdAmount > 0, "Amount can't be zero");
        
        Option memory o = options[optionId];
        
        require(optionWiseInvesment[user][optionId]+usdAmount >= o.minInvest ,"min invest error");
        require(optionWiseInvesment[user][optionId]+usdAmount <= o.maxInvest ,"max invest error");
        
        require(block.timestamp >= o.startDate , "pre sale not start yet");
        require(block.timestamp <= o.endDate , "pre sale finished");
        
        uint256 tokenAmount = usdAmount*10**o.tokenDecimal/o.faceValue;
        
        uint256 reward = (tokenAmount * o.period * o.rate) / (SECONDS * RATE_NOMINATOR);
        
        TokenVault(o.vault).transferToken(address(this),reward+tokenAmount);
        
        OrderIds += 1;
        stakingOrders[OrderIds] = Order(optionId,o.token,block.timestamp,(block.timestamp+o.period),user,false,reward,tokenAmount,usdAmount,o.isEscrow);
        
        
        userOrderOptionWise[user][optionId].push(OrderIds);
        userOrder[user].push(OrderIds);
        totalSoldOut[optionId] += (tokenAmount+reward);
        totalRaised[optionId] += usdAmount;
        optionWiseInvesment[user][optionId] += usdAmount;
        emit Stake(optionId,OrderIds,user,o.token,usdAmount,block.timestamp,(block.timestamp+o.period),tokenAmount,reward);
        return true;
    }
    
    function getSoldOutRatio(uint256 optionId) external view returns(uint256){
        Option memory o = options[optionId];
        uint256 vaultBalance = IBEP20(o.token).balanceOf(o.vault);
        uint256 _totalSoldOut = totalSoldOut[optionId];

        if(vaultBalance == 0){
            return 10000;
        }else{
            return (_totalSoldOut*10000)/(vaultBalance+_totalSoldOut);
        }
    
    }
    
    function getUserOrderOptionWiseById(address user,uint256 optionId) external view returns(uint256[] memory){
        return userOrderOptionWise[user][optionId];
    }
    
    function getUserOrderOptionWiseByData(address user,uint256 optionId) external view returns(Order[] memory){
        uint256[] memory orderdata = userOrderOptionWise[user][optionId];
        Order[] memory _orders = new Order[](orderdata.length);
        
        for(uint x = 0 ; x < orderdata.length;x++){
            _orders[x] = stakingOrders[orderdata[x]];
        }
        
        return _orders;
    }
    
    function getAllUserOrderById(address user) external view returns(uint256[] memory){
        return userOrder[user];
    }
    
    
    function getAllUserOrderByData(address user) external view returns(Order[] memory){
        uint256[] memory orderdata = userOrder[user];
        Order[] memory _orders = new Order[](orderdata.length);
        
        for(uint x = 0 ; x < orderdata.length;x++){
            _orders[x] = stakingOrders[orderdata[x]];
        }
        
        return _orders;
    }
    
    function unstake(uint256 orderId) external returns(bool) {
        require(orderId <= OrderIds, "Wrong option ID");
        Order storage o = stakingOrders[orderId];
        require(kycCheker.checkValidity(o.user),"kyc checker fail");
        require(block.timestamp > o.endDate ,"staking time is not over"); 
        require(!o.fullfilled, "Already withdrawn");
        if(o.isEscrow){
            TransferHelper.safeApprove(o.token,address(escrow),o.reward+o.tokenAmount);
            escrow.deposit(o.token,o.reward+o.tokenAmount,o.user);
        }else
            TransferHelper.safeTransfer(o.token,o.user,o.reward+o.tokenAmount);
        stakingOrders[orderId].fullfilled = true;
        return true;
    }

    
    // taking array because stack to deep error 
    function createSale(
        address token,      // token contract address
        uint256 amount,     // amount of tokens for bonus supply
        uint256 faceValue,
        uint128[2] memory periodRate,// [0] period , [1] rate
        uint256[2] memory date, // [0] startDate , [1] endDate
        uint256[2] memory invest, // [0] minInvest , [1] maxInvest
        bool isEscrow
    ) external payable returns(bool) {
        

        require(amount != 0, "Zero amount");
        require(date[1] > date[0],"date not perfect");
        require(invest[1] > invest[0],"invest not perfect");
        uint256 _fee;
        require(msg.value >= ethSideFee,"eth side fee is not paid");
        
        uint256 usdAmount = (priceFeed.getCurrencyPrice(address(1)) * (msg.value - ethSideFee))/10**18;
        TransferHelper.safeTransferFund(company,msg.value);
        
            
        for (uint256 i = 0; i < amountUsd.length; i++) {
            if(usdAmount >= amountUsd[i]){
                _fee = fee[i];
                break;
            }    
        }
        
        TokenVault vault = new TokenVault(address(this),token);
        vaultOwner[address(vault)] = msg.sender;
        
        TransferHelper.safeTransferFrom(token,msg.sender,address(vault),amount);
        
        OptionIds += 1;
        options[OptionIds] = Option(address(vault),token,IBEP20(token).decimals(),periodRate[0],periodRate[1],_fee,faceValue,date[0],date[1],invest[0],invest[1],isEscrow);
        saleOwner[OptionIds] = msg.sender;
    
        
        emit SaleCreated(address(vault),token,OptionIds,token,faceValue,periodRate,date,invest);
        
        return true;
    }

    function withdraw(address vault, address recipient, uint256 amount) external returns(bool) {
        require(msg.sender == vaultOwner[vault], "Caller is not the vault owner");
        TokenVault(vault).transferToken(recipient,amount);
        return true;
    }
}