// File: @openzeppelin/contracts/utils/Context.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol

// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Withdraw.sol

pragma solidity ^0.8.0;

interface INEB {
    function withdraw(
        uint256 amount,
        uint256 tid,
        address to
    ) external;
}

contract Withdraw is Ownable {
    address public neb;
    address[] public signatories;
    mapping(uint256 => mapping(address => uint256)) public withdrawedAmount;
    mapping(string => bool) _withdrawed;
    mapping(string => bool) _canceled;

    event AddedSignatory(address signatory);
    event RemovedSignatory(address signatory);
    event Withdrawed(
        string id,
        uint256 tid,
        uint256 amount,
        address from,
        address to
    );
    event Canceled(string id);

    constructor(address _neb, address[] memory _signatories) {
        neb = _neb;

        for (uint256 i = 0; i < _signatories.length; i++) {
            _addSignatory(_signatories[i]);
        }
    }

    function updateNeb(address _neb) public onlyOwner {
        neb = _neb;
    }

    function addSignatory(address signatory) public onlyOwner {
        _addSignatory(signatory);
    }

    function _addSignatory(address signatory) internal {
        if (signatoriesContains(signatory)) {
            return;
        }
        signatories.push(signatory);
        emit AddedSignatory(signatory);
    }

    function removeSignatory(address signatory) public onlyOwner {
        for (uint256 i = 0; i < signatories.length; i++) {
            if (signatories[i] == signatory) {
                if (i < signatories.length - 1) {
                    signatories[i] = signatories[signatories.length - 1];
                }
                signatories.pop();
                emit RemovedSignatory(signatory);
                break;
            }
        }
    }

    function signatoriesContains(address signatory) public view returns (bool) {
        for (uint256 i = 0; i < signatories.length; i++) {
            if (signatories[i] == signatory) {
                return true;
            }
        }
        return false;
    }

    function getSignatories()
        public
        view
        returns (
            uint256,
            uint256,
            address[] memory
        )
    {
        return (
            signatories.length,
            getSignatoriesThresholdValue(),
            signatories
        );
    }

    function getSignatoriesThresholdValue() internal view returns (uint256) {
        return (signatories.length * 2) / 3 + 1;
    }

    function withdraw(
        string memory id,
        address from,
        address to,
        uint256 tid,
        uint256 amount,
        bytes[] memory signatures
    ) public {
        require(!_withdrawed[id], "withdrawed");
        require(!_canceled[id], "canceled");
        require(
            verify(id, from, to, tid, amount, signatures),
            "not enough signatories"
        );

        INEB(neb).withdraw(amount, tid, to);
        _withdrawed[id] = true;
        withdrawedAmount[tid][from] += amount;
        emit Withdrawed(id, tid, amount, from, to);
    }

    function cancel(
        string memory id,
        address from,
        address to,
        uint256 tid,
        uint256 amount,
        bytes[] memory signatures
    ) public {
        require(!_withdrawed[id], "withdrawed");
        require(!_canceled[id], "canceled");
        require(
            verify(id, from, to, tid, amount, signatures),
            "not enough signatories"
        );

        _canceled[id] = true;
        emit Canceled(id);
    }

    function verify(
        string memory id,
        address from,
        address to,
        uint256 tid,
        uint256 amount,
        bytes[] memory signatures
    ) public view returns (bool) {
        bytes32 messageHash = getMessageHash(id, from, to, tid, amount);
        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);
        uint256 signedCount;

        for (uint256 i = 0; i < signatures.length; i++) {
            address signatory = recoverSigner(
                ethSignedMessageHash,
                signatures[i]
            );

            if (signatory != address(0) && signatoriesContains(signatory)) {
                signedCount++;
            }
        }

        return signedCount >= getSignatoriesThresholdValue();
    }

    function getMessageHash(
        string memory id,
        address from,
        address to,
        uint256 tid,
        uint256 amount
    ) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(id, from, to, tid, amount));
    }

    function getEthSignedMessageHash(bytes32 _messageHash)
        public
        pure
        returns (bytes32)
    {
        return
            keccak256(
                abi.encodePacked(
                    "\x19Ethereum Signed Message:\n32",
                    _messageHash
                )
            );
    }

    function recoverSigner(
        bytes32 _ethSignedMessageHash,
        bytes memory _signature
    ) public pure returns (address) {
        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);
        return ecrecover(_ethSignedMessageHash, v, r, s);
    }

    function splitSignature(bytes memory _signature)
        public
        pure
        returns (
            bytes32 r,
            bytes32 s,
            uint8 v
        )
    {
        require(_signature.length == 65, "invalid signature length");

        assembly {
            // first 32 bytes, after the length prefix
            r := mload(add(_signature, 32))
            // second 32 bytes
            s := mload(add(_signature, 64))
            // final byte (first byte of the next 32 bytes)
            v := byte(0, mload(add(_signature, 96)))
        }
    }
}