//SPDX-License-Identifier:NOLICENSE
pragma solidity 0.8.17;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

pragma solidity 0.8.17;

interface IFactory {
    struct Projects {
        address projectAddress;
        address investWithToken;
        address entrepreneur;
        Counters.Counter currentId;
        uint totalSupply;
        uint fundRaised;
        Dividend dividendInfo;
        uint startedOn;
        uint endOn;
        bool isClaimReleased;
        bool isDivReleased;
    }

    struct Dividend {
        uint divPerShare;
        uint dividend;
        uint totalDivClaimed;
    }

    struct investorDiv {
        uint investAmt;
        bool isDivClaimed;
    }

    struct Entrepreneur {
        Counters.Counter totalProjects;
        uint[] ownedProjects;
        uint totalFundRaised;
        uint totalWithdrawn;
    }

    function projectsList(uint projectId) external view returns (Projects calldata project);
    function investor(uint projectId, uint investId) external view returns (investorDiv calldata investorInfo);
    function projectCurrId() external view returns (Counters.Counter calldata id);
    function invest(
        address investorAddress,
        uint projectId, 
        uint investAmt, 
        uint deadLine, 
        bool doPay,
        string memory tokenURI,
        bytes memory signature
    ) external;
}

pragma solidity ^0.8.0;

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

pragma solidity 0.8.17;

/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        uint256 _value; // default: 0
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function current(Counter memory counter) internal pure returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }
}

pragma solidity 0.8.17;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

pragma solidity 0.8.17;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

pragma solidity 0.8.17;

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

contract HouseOfCryptoDivTracker is
    Ownable,
    Pausable
{
    using Counters for Counters.Counter;

    IFactory public factory;

    uint256 constant internal MAGNITUDE = 2 ** 64;

    mapping(uint => uint) public totalProfitShared;
    mapping(uint => uint) public profitPerShare;
    mapping(uint => mapping(uint => int256)) public payoutsTo;
    mapping(uint => mapping(uint => uint)) public totalInvestorClaim;

    event SetDivProfitShare(
        uint projectId,
        uint amount,
        uint at
    );

    event ClaimDiv(
        uint projectId,
        uint investorId,
        uint dividend,
        uint at
    );

    constructor(IFactory factory_) {
        factory = factory_;
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function setFactory(IFactory newFactory) external onlyOwner {
        require(
            address(newFactory) != address(0),
            "setFactory: new factory is zero"
        );
        factory = newFactory;
    }

    function setDivProfitShare(uint projectId, uint amount) public whenNotPaused {
        IFactory.Projects memory project = factory.projectsList(projectId);
        require(
            project.entrepreneur == _msgSender(),
            "setDivShare: Not a entrepreneur"
        );
        require(
            amount != 0, 
            "setDivShare: amount is zero"
        );
        require(
            project.fundRaised != 0, 
            "No fund had raised"
        );
        require(
            project.endOn < block.timestamp, 
            "investment is active"
        );
        require(
            project.isClaimReleased, 
            "fund not yet released"
        );

        profitPerShare[projectId] += amount * MAGNITUDE / project.fundRaised;
        totalProfitShared[projectId] += amount;

        send(
            project.investWithToken,
            abi.encodeWithSelector(
                IERC20.transferFrom.selector, 
                _msgSender(),
                address(this),
                amount
            )
        );  

        emit SetDivProfitShare(
            projectId,
            amount,
            block.timestamp
        );
    }

    function claimDiv(uint projectId, uint investId) public whenNotPaused {
        IFactory.Projects memory project = factory.projectsList(projectId);
        IFactory.investorDiv memory investDiv = factory.investor(projectId, investId);
        Counters.Counter memory projectIds = factory.projectCurrId();

        require(
            projectId >= 0 && 
            projectId < projectIds.current(), 
            "claimDiv: invalid project id"
        );
        require(
            investId >=0 && 
            investId <= project.currentId.current(),
            "claimDiv: invalid invest id"
        );
        require(
            project.endOn < block.timestamp, 
            "claimDiv: investment is active"
        );
        require(
            IERC721(project.projectAddress).ownerOf(investId) == _msgSender(),
            "claimDiv: Not a investor"
        );
        
        uint256 dividends = (uint256) ((int256)(profitPerShare[projectId] * investDiv.investAmt) - payoutsTo[projectId][investId]) / MAGNITUDE;
        payoutsTo[projectId][investId] += (int256) (dividends * MAGNITUDE);
        totalInvestorClaim[projectId][investId] += dividends;

        send(
            project.investWithToken,
            abi.encodeWithSelector(
                IERC20.transfer.selector, 
                _msgSender(), 
                dividends
            )
        );

        emit ClaimDiv(
            projectId,
            investId,
            dividends,
            block.timestamp
        );
    }

    function batchInvest(
        address investorAddress,
        uint projectId, 
        uint[] memory investAmt, 
        uint[] memory deadLine, 
        bool[] memory doPay,
        string[] memory tokenURI,
        bytes[] memory signature
    )
        public 
    {
        require(
            investAmt.length == deadLine.length && 
            doPay.length == tokenURI.length && 
            signature.length == tokenURI.length &&
            deadLine.length == signature.length,
            "batchInvest: length mismatch"
        );
        for(uint i=0;i<investAmt.length;i++) {
            factory.invest(
                investorAddress,
                projectId, 
                investAmt[i], 
                deadLine[i], 
                doPay[i],
                tokenURI[i],
                signature[i]
            );
        }
    }

    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) public onlyOwner {
        require(_tokenAddress != address(0), "token is zero");
        require(_tokenAmount != 0, "amount is zero");
        IERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);
    }

    function send(
        address txAddress, 
        bytes memory callData
    ) 
        private 
    {
        (bool txStatus, ) = address(txAddress).call(callData);
        require(txStatus,"tx failed!!");
    }
}