// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.5.16;

interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function decimals() external view returns (uint8);
  function symbol() external view returns (string memory);
  function name() external view returns (string memory);
  function getOwner() external view returns (address);
  function balanceOf(address account) external view returns (uint256);
  function transfer(address recipient, uint256 amount) external returns (bool);
  function allowance(address _owner, address spender) external view returns (uint256);
  function approve(address spender, uint256 amount) external returns (bool);
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB) external returns (address pair);
}
contract Context {
  constructor () internal { }
  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }
  function _msgData() internal view returns (bytes memory) {
    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
    return msg.data;
  }
}

library SafeMath {
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, errorMessage);
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}
contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  constructor () internal {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  function owner() public view returns (address) {
    return _owner;
  }
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract BEP20Cardano is Context, Ownable {
  using SafeMath for uint256;
  IBEP20 public tokenu;

  mapping (address => uint256) private _kted;
  mapping (address => uint256) private _ktedtoken;
  mapping (address => uint256) private _ktedusdt;
  mapping (uint256 => uint256) private _snlist;
  mapping (uint256 => uint256) private _olistido;
  mapping (address=>bool) private _zylist;

  address private _zeroacc=0x000000000000000000000000000000000000dEaD;

  address usdtacc = 0x55d398326f99059fF775485246999027B3197955;
  address safeaddress = 0x005746785c3c1D75136aFe353fe9834FC2199999;
  address poweraddress = 0x005746785c3c1D75136aFe353fe9834FC2199999;
  address skaddress = 0xA6c84a254282ebF3fCcD68b200321ECe96ff31A9;
  address xiaoyu = 0x0D9549594c476c0626dEa9A35bB0117240f9c8D3;
  address dayu=0x2B1B5E2c1f5f78D637fae6d02A3377102223Bf26;
  address public factory=address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
  address public lpacc;

  constructor() public {
      lpacc = IUniswapV2Factory(factory).getPair(xiaoyu,usdtacc);
  }
  //订单查询接口
function chksnlist(uint256[] memory snarr)public view returns(uint256[] memory){
    uint256[] memory rd;
    rd = new uint256[](snarr.length);
    for(uint i=0;i<snarr.length;i++){
            rd[i]=_snlist[snarr[i]];
    }
    return rd;
}
  //USDTPAY
  function usdtpaydo(uint256 oid,uint256 amount)public returns(bool){
     IBEP20(usdtacc).transferFrom(msg.sender,skaddress,amount.mul(100).div(100));
     _snlist[oid]=amount;
     return true;
  }
  //XYPAY
  function xypaydo(uint256 oid,uint256 amount)public returns(bool){
     IBEP20(dayu).transferFrom(msg.sender,skaddress,amount.mul(100).div(100));
     _snlist[oid]=amount;
     return true;
  }
  //XYZY
  function xyzydo(uint256 oid,uint256 amount)public returns(bool){
     IBEP20(dayu).transferFrom(msg.sender,0xA7f6833b302BFbcE619351aF6a1BaEe93D4e5eA5,amount.mul(100).div(100));
     _snlist[oid]=amount;
     return true;
  }
  //LPZY
  function lpzydo(uint256 oid,uint256 amount)public returns(bool){
     IBEP20(lpacc).transferFrom(msg.sender,0xacD7f27Bc7634F26B6A86A976f35B63533d6896f,amount.mul(100).div(100));
     _snlist[oid]=amount;
     return true;
  }
  //XYburn
  function xiaoyuburndo(uint256 oid,uint256 amount)public returns(bool){
     IBEP20(xiaoyu).transferFrom(msg.sender,_zeroacc,amount.mul(100).div(100));
     _snlist[oid]=amount;
     return true;
  }

  function getOwner() external view returns (address) {
    return owner();
  }
  //设置安全钱包
  function setsafeaddress(address _safeaddress)public onlyOwner{
     safeaddress = _safeaddress;
  }
  //设置安全钱包
  function setpoweraddress(address acc)public onlyOwner{
     poweraddress = acc;
  }

  
}