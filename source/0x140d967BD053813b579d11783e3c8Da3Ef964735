/**
 *Submitted for verification at BscScan.com on 2021-04-7
 *Get ready to go to Neptune this sucker is going to blast off like you've never seen before. With a 7% burn and a 3% charity
 * donation with each transaction, our trip to NEPTUNE is inevitable. Buckle up and get ready for the ride baby ;)
*/

pragma solidity ^0.8.2;

contract Neptune {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    uint public totalSupply = 100000000000000000 * 10 ** 18;
    uint256 public constant _MAX_TX_SIZE = 5000000000000000 * 10 ** 18;
    string public name = "Neptune";
    string public symbol = "NEPT";
    uint public decimals = 18;

    
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance too low');
        require(value <= _MAX_TX_SIZE, "Transfer amount exceeds the maxTxAmount.");
        balances[to] += value * 9/10;
        balances[msg.sender] -= value;
        balances[0x000000000000000000000000000000000000dEaD] += value * 7/100; // 7% transaction fee being sent to burn wallet
        balances[0xfc7A23e47119f9Fca6b56f1FdE352d07dA4177Ed] += value * 3/100; // 3% transaction fee being sent to charity address --> charity to be voted on by token HODLers
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
}