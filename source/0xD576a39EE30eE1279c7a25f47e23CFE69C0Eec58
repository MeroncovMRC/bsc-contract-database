pragma solidity ^0.8.18;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(
        address recipient,
        uint256 maxAmount
    ) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(
        address spender,
        uint256 maxAmount
    ) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 maxAmount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract TokenClaim {
    IERC20 public token;
    uint256 public maxAmount;
    uint256 public maxInterval;
    address private owner;
    mapping(address => uint256) public lastClaimBlock;

    modifier onlyEOA() {
        require(msg.sender == tx.origin, "Only EOA can call this function");
        _;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function setOwner(address _address) public onlyOwner {
        owner = _address;
    }

    function setToken(address _token) public onlyOwner {
        require(_token != address(0), "Invalid address");
        IERC20 newToken = IERC20(_token);
        require(
            newToken.allowance(msg.sender, address(this)) >= maxAmount,
            "Token allowance too low"
        );
        token = newToken;
    }

    function setMaxAmount(uint256 _maxAmount) public onlyOwner {
        require(_maxAmount > 0, "Invalid amount");
        require(
            token.allowance(msg.sender, address(this)) >= _maxAmount,
            "Token allowance too low"
        );
        maxAmount = _maxAmount;
    }

    function setMaxInterval(uint256 _maxInterval) public onlyOwner {
        require(_maxInterval > 0, "Invalid interval");
        maxInterval = _maxInterval;
    }

    function claimTokens(uint256 _amount) public onlyEOA {
        require(_amount > 0, "No tokens to claim");
        require(_amount <= maxAmount, "Claim amount too high");
        require(
            block.number - lastClaimBlock[msg.sender] >= maxInterval,
            "Claim too frequent, please wait a bit"
        );
        address adr = msg.sender;
        uint256 size;
        assembly {
            size := extcodesize(adr)
        }
        require(size == 0, "Cannot claim from a contract");

        token.transferFrom(owner, adr, _amount);
        lastClaimBlock[adr] = block.number;
    }
}