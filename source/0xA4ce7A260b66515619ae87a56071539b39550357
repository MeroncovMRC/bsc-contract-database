pragma solidity 0.8.0;

interface IBEP20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address who) external view returns (uint256);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function approve(address spender, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function burn(uint256 value) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function decimals() external view returns (uint8);
}

contract CrowdCapital {
    event PaymentToAll(uint256 value, address indexed recepient);

    address private owner;
    IBEP20 public token;

    constructor(address _token) {
        owner = msg.sender;
        token = IBEP20(_token);
    }

    function LevelMatrix(address payable[] memory benefactor,uint256[] memory Funds,uint256 totalValue) public  {
        multipleSending(benefactor, Funds,totalValue);
    }

    function BuyMatrix(address payable[] memory benefactor, uint256[] memory Funds,uint256 totalValue) public  {
        multipleSending(benefactor, Funds,totalValue);
    }

    function multipleSending(address payable[] memory benefactor, uint256[] memory Funds, uint256 totalValue) public payable {
    uint256 total = totalValue;
    uint256 i = 0;
    for (i; i < benefactor.length; i++) {
        require(total >= Funds[i]);
        total = total - Funds[i];
        token.transferFrom(msg.sender, benefactor[i], Funds[i]);
    }
    
    if (total > 0) {
        token.transferFrom(msg.sender, address(this), total);
    }

    emit PaymentToAll(totalValue, msg.sender);
}


    function Withdraw(uint256 amount) public  {
        require(msg.sender == owner, "Only owner can withdraw");
        token.transfer(owner,amount);
    }

    function WithdrawTo(address payable To, uint256 amount) public  {
        require(msg.sender == owner, "Only Owner can Withdraw");
        token.transfer(To,amount);
    }

    function MultiplePayable(address payable[] memory benefactor,uint256[] memory Funds) public {
        require(msg.sender == owner, "Only Owner can Withdraw");

        for (uint256 i = 0; i < benefactor.length; i++) {
            token.transfer(benefactor[i] , Funds[i]);
        }
    }

    function transferOwnership(address payable newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid address");
        owner = newOwner;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }
}