{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n"},"Flippy.sol":{"content":"/*\r\nBEANMINE Games official links:\r\n\r\nFLIPPY: https://flippy.beanmine.app - Web3 Games #\r\n\r\n--------------------------------------\r\nWeb3 Games: https://games.beanmine.app\r\n--------------------------------------\r\n\r\nBUSD Rewards: https://beanmine.app\r\nTelegram: https://t.me/beanmine\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./LinkTokenInterface.sol\";\r\nimport \"./VRFCoordinatorV2Interface.sol\";\r\nimport \"./VRFConsumerBaseV2.sol\";\r\n\r\nlibrary Math {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a**b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n}\r\n\r\ncontract FlippyFlip is Ownable, VRFConsumerBaseV2, ReentrancyGuard {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n\r\n    /* Contract Information:\r\n     ***********/\r\n\r\n    address constant vrfCoordinator =\r\n        0xc587d9053cd1118f25F645F9E08BB98c9712A4EE;\r\n    address constant link_token_contract =\r\n        0x404460C6A5EdE2D891e8297795264fDe62ADBB75;\r\n\r\n    bytes32 private keyHash =\r\n        0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;\r\n    uint16 constant requestConfirmations = 3;\r\n    uint32 constant callbackGasLimit = 2e5;\r\n    uint32 constant numWords = 1;\r\n    uint64 subscriptionId;\r\n    uint256 private contractBalance;\r\n    uint256 private betCondTwoNumber = 4;\r\n    uint256 private betCondFourNumber = 6;\r\n    uint256 public totalAmountWon;\r\n    mapping(address =\u003e uint256) private wonCount;\r\n    mapping(address =\u003e uint256) private loseCount;\r\n\r\n    struct Temp {\r\n        uint256 id;\r\n        uint256 result;\r\n        address playerAddress;\r\n        uint256 gameModeTemp;\r\n    }\r\n\r\n    struct PlayerByAddress {\r\n        uint256 balance;\r\n        uint256 betAmount;\r\n        uint256 betChoice;\r\n        address playerAddress;\r\n        bool betOngoing;\r\n    }\r\n\r\n    mapping(address =\u003e PlayerByAddress) public playersByAddress;\r\n    mapping(uint256 =\u003e Temp) public temps;\r\n\r\n    /* Events:\r\n     *********/\r\n\r\n    event DepositToContract(\r\n        address user,\r\n        uint256 depositAmount,\r\n        uint256 newBalance\r\n    );\r\n    event Withdrawal(address player, uint256 amount);\r\n    event NewIdRequest(address indexed player, uint256 requestId);\r\n    event GeneratedRandomNumberTwo(\r\n        uint256 requestId,\r\n        uint256 randomNumber,\r\n        uint256 randomWordsGot\r\n    );\r\n    event GeneratedRandomNumberFour(\r\n        uint256 requestId,\r\n        uint256 randomNumber,\r\n        uint256 randomWordsGot\r\n    );\r\n    event BetResult(address indexed player, bool victory, uint256 amount);\r\n\r\n    /* Constructor:\r\n     **************/\r\n\r\n    constructor(uint64 _subscriptionId)\r\n        payable\r\n        initCosts(0.001 ether)\r\n        VRFConsumerBaseV2(vrfCoordinator)\r\n    {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        LINKTOKEN = LinkTokenInterface(link_token_contract);\r\n        subscriptionId = _subscriptionId;\r\n        contractBalance += msg.value;\r\n    }\r\n\r\n    /* Modifiers:\r\n     ************/\r\n\r\n    modifier initCosts(uint256 initCost) {\r\n        require(msg.value \u003e= initCost, \"FLIPPY: Contract needs BNB\");\r\n        _;\r\n    }\r\n\r\n    modifier betConditionsTwo() {\r\n        require(msg.value \u003e= 0.01 ether, \"FLIPPY: Minimum Bet is 0.01 BNB\");\r\n        require(\r\n            msg.value \u003c= getContractBalance() / betCondTwoNumber,\r\n            \"FLIPPY: Lower your Bet\"\r\n        );\r\n        require(\r\n            !playersByAddress[_msgSender()].betOngoing,\r\n            \"FLIPPY: Bet Already Ongoing...\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier betConditionsFour() {\r\n        require(msg.value \u003e= 0.01 ether, \"FLIPPY: Minimum Bet is 0.01 BNB\");\r\n        require(\r\n            msg.value \u003c= getContractBalance() / betCondFourNumber,\r\n            \"FLIPPY: Lower your Bet\"\r\n        );\r\n        require(\r\n            !playersByAddress[_msgSender()].betOngoing,\r\n            \"FLIPPY: Bet Already Ongoing...\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* Functions:\r\n     *************/\r\n\r\n    function betTwo(uint256 _betChoice)\r\n        public\r\n        payable\r\n        betConditionsTwo\r\n        nonReentrant\r\n    {\r\n        require(_betChoice == 0 || _betChoice == 1, \"FLIPPY: Must be 0||1\");\r\n\r\n        address player = _msgSender();\r\n\r\n        playersByAddress[player].playerAddress = player;\r\n        playersByAddress[player].betChoice = _betChoice;\r\n        playersByAddress[player].betOngoing = true;\r\n        playersByAddress[player].betAmount = msg.value;\r\n        contractBalance += playersByAddress[player].betAmount;\r\n\r\n        uint256 requestId = requestRandomWords();\r\n        temps[requestId].playerAddress = player;\r\n        temps[requestId].id = requestId;\r\n        temps[requestId].gameModeTemp = 0;\r\n\r\n        emit NewIdRequest(player, requestId);\r\n    }\r\n\r\n    function betFour(uint256 _betChoice)\r\n        public\r\n        payable\r\n        betConditionsFour\r\n        nonReentrant\r\n    {\r\n        require(\r\n            _betChoice == 0 ||\r\n                _betChoice == 1 ||\r\n                _betChoice == 2 ||\r\n                _betChoice == 3,\r\n            \"FLIPPY: Must be 0||1||2||3\"\r\n        );\r\n\r\n        address player = _msgSender();\r\n\r\n        playersByAddress[player].playerAddress = player;\r\n        playersByAddress[player].betChoice = _betChoice;\r\n        playersByAddress[player].betOngoing = true;\r\n        playersByAddress[player].betAmount = msg.value;\r\n        contractBalance += playersByAddress[player].betAmount;\r\n\r\n        uint256 requestId = requestRandomWords();\r\n        temps[requestId].playerAddress = player;\r\n        temps[requestId].id = requestId;\r\n        temps[requestId].gameModeTemp = 1;\r\n\r\n        emit NewIdRequest(player, requestId);\r\n    }\r\n\r\n    function requestRandomWords() public returns (uint256) {\r\n        return\r\n            COORDINATOR.requestRandomWords(\r\n                keyHash,\r\n                subscriptionId,\r\n                requestConfirmations,\r\n                callbackGasLimit,\r\n                numWords\r\n            );\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        if (temps[_requestId].gameModeTemp == 0) {\r\n            uint256 randomResult = _randomWords[0] % 2;\r\n            temps[_requestId].result = randomResult;\r\n            emit GeneratedRandomNumberTwo(\r\n                _requestId,\r\n                randomResult,\r\n                _randomWords[0]\r\n            );\r\n\r\n            checkResult(randomResult, _requestId);\r\n        } else {\r\n            uint256 randomResult = _randomWords[0] % 4;\r\n            temps[_requestId].result = randomResult;\r\n            emit GeneratedRandomNumberFour(\r\n                _requestId,\r\n                randomResult,\r\n                _randomWords[0]\r\n            );\r\n\r\n            checkResult(randomResult, _requestId);\r\n        }\r\n    }\r\n\r\n    function checkResult(uint256 _randomResult, uint256 _requestId)\r\n        private\r\n        returns (bool)\r\n    {\r\n        address player = temps[_requestId].playerAddress;\r\n        bool win = false;\r\n        uint256 amountWon = 0;\r\n\r\n        if (temps[_requestId].gameModeTemp == 0) {\r\n            if (playersByAddress[player].betChoice == _randomResult) {\r\n                win = true;\r\n                amountWon = playersByAddress[player].betAmount * 2;\r\n                totalAmountWon = playersByAddress[player].betAmount * 2;\r\n                wonCount[player] = Math.add(wonCount[player], 1);\r\n                playersByAddress[player].balance =\r\n                    playersByAddress[player].balance +\r\n                    amountWon;\r\n                contractBalance -= amountWon;\r\n            } else {\r\n                amountWon = playersByAddress[player].betAmount;\r\n                loseCount[player] = Math.add(loseCount[player], 1);\r\n            }\r\n        } else {\r\n            if (playersByAddress[player].betChoice == _randomResult) {\r\n                win = true;\r\n                amountWon = playersByAddress[player].betAmount * 4;\r\n                totalAmountWon = playersByAddress[player].betAmount * 4;\r\n                wonCount[player] = Math.add(wonCount[player], 1);\r\n                playersByAddress[player].balance =\r\n                    playersByAddress[player].balance +\r\n                    amountWon;\r\n                contractBalance -= amountWon;\r\n            } else {\r\n                amountWon = playersByAddress[player].betAmount;\r\n                loseCount[player] = Math.add(loseCount[player], 1);\r\n            }\r\n        }\r\n\r\n        emit BetResult(player, win, amountWon);\r\n\r\n        playersByAddress[player].betAmount = 0;\r\n        playersByAddress[player].betOngoing = false;\r\n\r\n        delete (temps[_requestId]);\r\n        return win;\r\n    }\r\n\r\n    function deposit() external payable {\r\n        require(msg.value \u003e 0);\r\n        contractBalance += msg.value;\r\n        emit DepositToContract(_msgSender(), msg.value, contractBalance);\r\n    }\r\n\r\n    function withdrawPlayerBalance() external nonReentrant {\r\n        address player = _msgSender();\r\n        require(player != address(0), \"FLIPPY: This address doesn\u0027t exist\");\r\n        require(\r\n            playersByAddress[player].balance \u003e 0,\r\n            \"FLIPPY: No funds to withdraw\"\r\n        );\r\n        require(!playersByAddress[player].betOngoing, \"FLIPPY: Bet Ongoing...\");\r\n\r\n        uint256 amount = playersByAddress[player].balance;\r\n        payable(player).transfer(amount);\r\n        delete (playersByAddress[player]);\r\n\r\n        emit Withdrawal(player, amount);\r\n    }\r\n\r\n    /* View functions:\r\n     *******************/\r\n\r\n    function getPlayerBalance() external view returns (uint256) {\r\n        return playersByAddress[_msgSender()].balance;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return contractBalance;\r\n    }\r\n\r\n    function getMaxBetTwo() public view returns (uint256) {\r\n        return contractBalance / betCondTwoNumber;\r\n    }\r\n\r\n    function getMaxBetFour() public view returns (uint256) {\r\n        return contractBalance / betCondFourNumber;\r\n    }\r\n\r\n    function getCondBetTwo() public view returns (uint256) {\r\n        return betCondTwoNumber;\r\n    }\r\n\r\n    function getCondBetFour() public view returns (uint256) {\r\n        return betCondFourNumber;\r\n    }\r\n\r\n    function getWonCount(address adr) public view returns (uint256) {\r\n        return wonCount[adr];\r\n    }\r\n\r\n    function getLoseCount(address adr) public view returns (uint256) {\r\n        return loseCount[adr];\r\n    }\r\n\r\n    /* Restricted :\r\n     **************/\r\n\r\n    function withdrawContractBalance() external onlyOwner {\r\n        _payout();\r\n        if (LINKTOKEN.balanceOf(address(this)) \u003e 0) {\r\n            bool isSuccess = LINKTOKEN.transfer(\r\n                owner(),\r\n                LINKTOKEN.balanceOf(address(this))\r\n            );\r\n            require(isSuccess, \"FLIPPY: Link withdraw failed\");\r\n        }\r\n    }\r\n\r\n    function addConsumer(address consumerAddress) external onlyOwner {\r\n        COORDINATOR.addConsumer(subscriptionId, consumerAddress);\r\n    }\r\n\r\n    function removeConsumer(address consumerAddress) external onlyOwner {\r\n        // Remove a consumer contract from the subscription.\r\n        COORDINATOR.removeConsumer(subscriptionId, consumerAddress);\r\n    }\r\n\r\n    function cancelSubscription(address receivingWallet)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        // Cancel the subscription and send the remaining LINK to a wallet address.\r\n        uint64 temp = subscriptionId;\r\n        subscriptionId = 0;\r\n        COORDINATOR.cancelSubscription(temp, receivingWallet);\r\n    }\r\n\r\n    function setNumberTwo(uint256 number) external onlyOwner {\r\n        betCondTwoNumber = number;\r\n    }\r\n\r\n    function setNumberFour(uint256 number) external onlyOwner {\r\n        betCondFourNumber = number;\r\n    }\r\n\r\n    function setPrivateHex(bytes32 number) external onlyOwner {\r\n        keyHash = number;\r\n    }\r\n\r\n    /* Private :\r\n     ***********/\r\n\r\n    function _payout() private returns (uint256) {\r\n        require(contractBalance != 0, \"FLIPPY: No funds to withdraw\");\r\n\r\n        uint256 toTransfer = address(this).balance;\r\n        contractBalance = 0;\r\n        payable(owner()).transfer(toTransfer);\r\n        return toTransfer;\r\n    }\r\n}\r\n"},"LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he\u0027s not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase\u0027s attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(\u003cother arguments\u003e, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         \u003cinitialization with other arguments goes here\u003e\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let\u0027s call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle\u0027s response\r\n * @dev to your request, it will call your contract\u0027s fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it\u0027s critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract\u0027s random behavior is free\r\n * @dev from malicious interference, it\u0027s best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract\u0027s user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you\u0027d like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}"},"VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash\u0027s have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you\u0027d like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you\u0027d like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you\u0027d like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}"}}