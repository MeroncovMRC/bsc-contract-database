// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol


pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );
}

// File: ronta/cintro.sol




pragma solidity ^0.8.0;



interface IBEP20 {
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract SaxStaking {
    using SafeMath for uint256;
    
    address public owner;
    IBEP20 private token;
    uint public rewardBalance;
    uint256 private totalStakedAmount;
    address private bnbAddress;
    AggregatorV3Interface internal priceFeed;

    struct User {
        uint256 stakedAmount;
        uint256 lastStakedTime;
        uint256 rewardAmount;
        uint256 lastClaimTime;
    }

    uint256 private constant rewardRate = 100;
    uint256 private constant precision = 1e18;
    uint256 private constant lockPeriod = 1 hours;
    mapping(address => User) private users;

    constructor(address _token, address _bnbAddress, address _priceFeedAddress) {
        owner = msg.sender;
        token = IBEP20(_token);
        bnbAddress = _bnbAddress;
        priceFeed = AggregatorV3Interface(_priceFeedAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can access this function");
        _;
    }

    function depositReward() public payable {
        rewardBalance += msg.value;
    }

function withdrawReward() public onlyOwner {
    uint256 balance = rewardBalance;
    require(balance > 0, "No reward balance found");
    rewardBalance = 0;
    payable(msg.sender).transfer(balance);
}




    function getBNBPrice() public view returns (uint256) {
        (, int256 price, , , ) = priceFeed.latestRoundData();
        return uint256(price);
    }

    function stake(uint256 amount) public {
        require(amount > 0, "Staked amount must be greater than 0");
        require(token.transferFrom(msg.sender, address(this), amount), "Transfer failed");

        User storage user = users[msg.sender];
        user.stakedAmount = user.stakedAmount.add(amount);
        user.lastStakedTime = block.timestamp;

        totalStakedAmount = totalStakedAmount.add(amount);
    }

    function unstake() public {
        User storage user = users[msg.sender];
        require(user.stakedAmount > 0, "No staked amount found");

        uint256 rewardAmount = getRewardBNBAmount(msg.sender);

        require(IBEP20(bnbAddress).transfer(msg.sender, rewardAmount), "BNB Transfer failed");

        user.rewardAmount = 0;
        user.lastClaimTime = block.timestamp;

        totalStakedAmount = totalStakedAmount.sub(user.stakedAmount);
        require(token.transfer(msg.sender, user.stakedAmount), "Transfer failed");
        user.stakedAmount = 0;
    }

    function getRewardBNBAmount(address userAddress) public view returns (uint256) {
        User storage user = users[userAddress];
        uint256 stakedAmount = user.stakedAmount;
        uint256 lastClaimTime = user.lastClaimTime;

        if (stakedAmount == 0) {
            return 0;
        }

        uint256 rewardDuration = block.timestamp.sub(lastClaimTime);
        uint256 reward = stakedAmount.mul(rewardDuration).mul(rewardRate).mul(1e18) / precision;
        uint256 bnbPrice = getBNBPrice();
        return (reward * bnbPrice) / 1e18;
    }
function getRewardAmount(address userAddress) public view returns (uint256) {
        User storage user = users[userAddress];
        uint256 stakedAmount = user.stakedAmount;
        uint256 lastClaimTime = user.lastClaimTime;

        if (stakedAmount == 0) {
            return 0;
        }

        uint256 rewardDuration = block.timestamp.sub(lastClaimTime);
        uint256 reward = stakedAmount.mul(rewardDuration).mul(rewardRate).mul(1e18) / precision;
        uint256 bnbPrice = getBNBPrice();
        uint256 rewardBNBAmount = (reward * bnbPrice) / 1e18;

        return rewardBNBAmount;
    }
}