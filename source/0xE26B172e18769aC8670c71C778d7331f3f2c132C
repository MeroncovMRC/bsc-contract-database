{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"IUniswapV2Router02.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"},"MDB+Arby.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ninterface IXUSD {\r\n    function sell(uint256 amount) external returns (uint256);\r\n}\r\n\r\ncontract Arby is Ownable {\r\n\r\n    // token info    \r\n    IUniswapV2Router02 constant router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address constant xUSD = 0x9f8BB16f49393eeA4331A39B69071759e54e16ea;\r\n    address constant busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public ARBY = 0x80A124fBBC1fE3860B29fa1f9824d85216854D07;\r\n    address public Recipient = 0x45F8F3a7A91e302935eB644f371bdE63D0b1bAc6;\r\n    \r\n    // paths\r\n    address[] buyPath;\r\n    address[] sellPath;\r\n\r\n    // BUSD -\u003e BNB\r\n    address[] busdBNB;\r\n    \r\n    // cost to run cycle + incentive\r\n    uint256 public gasCost = 24 * 10**14;\r\n    \r\n    constructor() {\r\n        buyPath = new address[](2);\r\n        buyPath[0] = router.WETH();\r\n        buyPath[1] = xUSD;\r\n        sellPath = new address[](2);\r\n        sellPath[0] = xUSD;\r\n        sellPath[1] = router.WETH();\r\n        busdBNB = new address[](2);\r\n        busdBNB[0] = busd;\r\n        busdBNB[1] = router.WETH();\r\n    }\r\n\r\n    function setArby(address ARBY_) external onlyOwner {\r\n        ARBY = ARBY_;\r\n    }\r\n\r\n    function setRecipient(address recipient_) external onlyOwner {\r\n        Recipient = recipient_;\r\n    }\r\n\r\n    function setGasCost(uint256 gasCost_) external onlyOwner {\r\n        gasCost = gasCost_;\r\n    }\r\n\r\n    function withdraw(address token) external onlyOwner {\r\n        uint256 bal = IERC20(token).balanceOf(address(this));\r\n        require(bal \u003e 0, \u0027Zero Tokens\u0027);\r\n        IERC20(token).transfer(msg.sender, bal);\r\n    }\r\n    \r\n    function withdrawBNB() external onlyOwner {\r\n        (bool s,) = payable(msg.sender).call{value:address(this).balance}(\"\");\r\n        require(s, \u0027Failure on BNB Withdrawal\u0027);\r\n    }\r\n    \r\n    function buyCycle() external payable {\r\n        _buyCycle(msg.value);\r\n    }\r\n    \r\n    function sellCycle() external payable {\r\n        _sellCycle(msg.value);\r\n    }\r\n\r\n    function _buyCycle(uint256 amountBNB) private {\r\n        _buyXUSD(amountBNB, true);\r\n        _sellXUSD(IERC20(xUSD).balanceOf(address(this)), false);\r\n        _swapBUSDForBNB(IERC20(busd).balanceOf(address(this)));\r\n        (bool s,) = payable(ARBY).call{value: amountBNB + gasCost}(\"\");\r\n        require(s, \u0027F0\u0027);\r\n        (bool s1,) = payable(Recipient).call{value: address(this).balance}(\"\");\r\n        require(s1, \u0027F1\u0027);\r\n    }\r\n    \r\n    function _sellCycle(uint256 amount) private {\r\n        _buyXUSD(amount, false);\r\n        _sellXUSD(IERC20(xUSD).balanceOf(address(this)), true);\r\n        (bool s,) = payable(ARBY).call{value: amount + gasCost}(\"\");\r\n        require(s, \u0027F0\u0027);\r\n        (bool s1,) = payable(Recipient).call{value: address(this).balance}(\"\");\r\n        require(s1, \u0027F1\u0027);\r\n    }\r\n\r\n    function _swapBUSDForBNB(uint256 nBUSD) internal {\r\n        IERC20(busd).approve(address(router), nBUSD);\r\n        router.swapExactTokensForETH(\r\n            nBUSD,\r\n            0,\r\n            busdBNB,\r\n            address(this),\r\n            block.timestamp + 30\r\n        );\r\n    }\r\n    \r\n    function _buyXUSD(uint256 amountBNB, bool PCS) internal {\r\n        if (PCS) {\r\n            // buy XUSD on PCS\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountBNB}(\r\n                0,\r\n                buyPath,\r\n                address(this),\r\n                block.timestamp + 30\r\n            );\r\n        } else {\r\n            // buy XUSD with BNB\r\n            (bool s,) = payable(xUSD).call{value: amountBNB}(\"\");\r\n            require(s, \u0027Failure on XUSD Purchase\u0027);\r\n        }\r\n    }\r\n\r\n    function _sellXUSD(uint256 amount, bool PCS) internal {\r\n        if (PCS) {\r\n            IERC20(xUSD).approve(address(router), amount);\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0,\r\n                sellPath,\r\n                address(this),\r\n                block.timestamp + 30\r\n            );\r\n        } else {\r\n            // sell XUSD\r\n            IXUSD(xUSD).sell(amount);\r\n        }\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set \u0026 change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of \u0027require\u0027 evaluates to \u0027false\u0027, execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use \u0027require\u0027 to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // \u0027msg.sender\u0027 is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}"}}