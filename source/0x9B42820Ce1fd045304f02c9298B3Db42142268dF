{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size \u003e 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(\r\n\t\t\taddress(this).balance \u003e= amount,\r\n\t\t\t\"Address: insufficient balance\"\r\n\t\t);\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data)\r\n\t\tinternal\r\n\t\treturns (bytes memory)\r\n\t{\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn\r\n\t\t\tfunctionCallWithValue(\r\n\t\t\t\ttarget,\r\n\t\t\t\tdata,\r\n\t\t\t\tvalue,\r\n\t\t\t\t\"Address: low-level call with value failed\"\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(\r\n\t\t\taddress(this).balance \u003e= value,\r\n\t\t\t\"Address: insufficient balance for call\"\r\n\t\t);\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) =\r\n\t\t\ttarget.call{ value: value }(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\t\tfunctionStaticCall(\r\n\t\t\t\ttarget,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"Address: low-level static call failed\"\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data)\r\n\t\tinternal\r\n\t\treturns (bytes memory)\r\n\t{\r\n\t\treturn\r\n\t\t\tfunctionDelegateCall(\r\n\t\t\t\ttarget,\r\n\t\t\t\tdata,\r\n\t\t\t\t\"Address: low-level delegate call failed\"\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) private pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length \u003e 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n"},"IERC20MetaData.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(\r\n\t\taddress indexed token0,\r\n\t\taddress indexed token1,\r\n\t\taddress pair,\r\n\t\tuint256\r\n\t);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\treturns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256 amountA,\r\n\t\t\tuint256 amountB,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (\r\n\t\t\tuint256 amountToken,\r\n\t\t\tuint256 amountETH,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256[] memory amounts);\r\n}\r\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IUniswapV2Router01.sol\";\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(\r\n\t\t\tnewOwner != address(0),\r\n\t\t\t\"Ownable: new owner is the zero address\"\r\n\t\t);\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n"},"Untold.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./IUniswapV2Factory.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./UntoldMetaData.sol\";\r\n\r\ncontract Untold is Ownable, UntoldMetaData {\r\n\tevent SwapAndLiquefy(\r\n\t\tuint256 tokensSwapped,\r\n\t\tuint256 ethReceived,\r\n\t\tuint256 tokensIntoLiqudity\r\n\t);\r\n\tevent SwapAndLiquefyStateUpdate(bool state);\r\n\r\n\t/**\r\n\t *@dev Adds the Address library utility methods to the type {address}.\r\n\t */\r\n\tusing Address for address;\r\n\r\n\t/**\r\n\t *@dev the maximum uint256 value in solidity, which is used to convert the total supply of tokens to reflections for the reward mechanism.\r\n\t */\r\n\tuint256 private constant MAX_INT_VALUE = type(uint256).max;\r\n\r\n\tuint256 private _tokenSupply = 10**9 * 10**18;\r\n\t/**\r\n\t *@dev Convert the total supply to reflections with perfect rouding using the maximum uint256 as the numerator.\r\n\t */\r\n\tuint256 private _reflectionSupply = (MAX_INT_VALUE -\r\n\t\t(MAX_INT_VALUE % _tokenSupply));\r\n\r\n\t/**\r\n\t *@dev The total amount of fees paid by the users.\r\n\t */\r\n\tuint256 private _totalTokenFees;\r\n\r\n\t/**\r\n\t *@dev The transaction fee users will incur upon selling the token. 2 percent of the principal.\r\n\t */\r\n\tuint8 public taxFee = 2;\r\n\t/**\r\n\t *@dev The wallet which holds the account balance in reflections.\r\n\t */\r\n\tmapping(address =\u003e uint256) private _reflectionBalance;\r\n\r\n\t/**\r\n\t *@dev Accounts which are excluded from paying txs fees.\r\n\t */\r\n\tmapping(address =\u003e bool) private _isExcludedFromFees;\r\n\r\n\t/**\r\n\t *@dev Contains the allowances a parent account has provided to children accounts in reflections;\r\n\t */\r\n\tmapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n\t/**\r\n\t *@dev A maximum amount that can be transfered at once. Which is equivalent to 0.5% of the total supply.\r\n\t */\r\n\tuint256 public maxTxAmount = 5 * 10**6 * 10**18;\r\n\r\n\t/**\r\n\t *@dev Number of tokens needed to provide liquidity to the pool\r\n\t */\r\n\tuint256 private _numberTokensSellToAddToLiquidity = 5 * 10**6 * 10**18;\r\n\r\n\t/**\r\n\t *@dev State indicating that we are in a liquefaction process to prevent stacking liquefaction events.\r\n\t */\r\n\tbool swapAndLiquifyingInProgress;\r\n\r\n\t/**\r\n\t *@dev Variable to allow the owner to enable or disable liquefaction  events\r\n\t */\r\n\tbool public isSwapAndLiquifyingEnabled = false;\r\n\r\n\tbool public startTrading = false;\r\n\r\n\tbool public catchWhales = true;\r\n\r\n\tIUniswapV2Router02 public immutable uniswapV2Router;\r\n\taddress public immutable uniswapV2WETHPair;\r\n\r\n\taddress public immutable UntoldFund;\r\n\r\n\tconstructor(address routerAddress, address UntoldFundAddress) {\r\n\t\t/**\r\n\t\t *@dev Gives all the reflection to the deplyer (the first owner) of the contract upon creation.\r\n\t\t */\r\n\t\t_reflectionBalance[_msgSender()] = _reflectionSupply;\r\n\r\n\t\t// Tells solidity this address follows the IUniswapV2Router interface\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n\t\t// Creates a pair between our token and WETH and saves the address in a state variable\r\n\t\tuniswapV2WETHPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\t\t\t.createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\t\t// Saves the UniswapV2Router in a state variable\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\r\n\t\tUntoldFund = UntoldFundAddress;\r\n\r\n\t\t_isExcludedFromFees[owner()] = true;\r\n\t\t_isExcludedFromFees[address(this)] = true;\r\n\t\t_isExcludedFromFees[UntoldFundAddress] = true;\r\n\r\n\t\temit Transfer(address(0), _msgSender(), _tokenSupply);\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Tell the contract we are swapping\r\n\t */\r\n\tmodifier lockTheSwap {\r\n\t\tswapAndLiquifyingInProgress = true;\r\n\t\t_;\r\n\t\tswapAndLiquifyingInProgress = false;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev returns the total supply of tokens.\r\n\t */\r\n\tfunction totalSupply() external view override returns (uint256) {\r\n\t\treturn _tokenSupply;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Returns the rate betweenthe total reflections and the total tokens.\r\n\t */\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\treturn _reflectionSupply / _tokenSupply;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Converts an amount of tokens to reflections using the current rate.\r\n\t */\r\n\tfunction _reflectionFromToken(uint256 amount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(\r\n\t\t\t_tokenSupply \u003e= amount,\r\n\t\t\t\"You cannot own more tokens than the total token supply\"\r\n\t\t);\r\n\t\treturn amount * _getRate();\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Converts an amount of reflections to tokens using the current rate.\r\n\t */\r\n\tfunction _tokenFromReflection(uint256 reflectionAmount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(\r\n\t\t\t_reflectionSupply \u003e= reflectionAmount,\r\n\t\t\t\"Cannot have a personal reflection amount larger than total reflection\"\r\n\t\t);\r\n\t\treturn reflectionAmount / _getRate();\r\n\t}\r\n\r\n\t/**\r\n\t *@dev returns the total tokens a user holds. It first finds the reflections and converts to tokens to reflect the rewards the user has accrued over time.\r\n\t * if the account does not receive rewards. It returns the balance from the token balance.\r\n\t */\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _tokenFromReflection(_reflectionBalance[account]);\r\n\t}\r\n\r\n\tfunction totalFees() external view returns (uint256) {\r\n\t\treturn _totalTokenFees;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev It allows a non excluded account to airdrop to other users.\r\n\t */\r\n\tfunction deliver(uint256 amount) external {\r\n\t\taddress sender = _msgSender();\r\n\t\tuint256 reflectionAmount = _reflectionFromToken(amount);\r\n\t\t_reflectionBalance[sender] =\r\n\t\t\t_reflectionBalance[sender] -\r\n\t\t\treflectionAmount;\r\n\t\t_reflectionSupply -= reflectionAmount;\r\n\t\t_totalTokenFees += amount;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Removes all fees and saves them to be reinstated at a later date.\r\n\t */\r\n\tfunction removeAllFees() private {\r\n\t\tif (taxFee == 0) return;\r\n\r\n\t\ttaxFee = 0;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Restores the fees to their previous values.\r\n\t */\r\n\tfunction restoreAllFees() private {\r\n\t\ttaxFee = 2;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Gives the owner of the contract control if the logic to add liquidity to the pool is enabled or not.\r\n\t */\r\n\tfunction enableSwapAndLiquifyingState() external onlyOwner() {\r\n\t\tisSwapAndLiquifyingEnabled = true;\r\n\t\temit SwapAndLiquefyStateUpdate(true);\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Calculates a fee final amount based on a ratio.\r\n\t *important This funciton only works with values based on token supply and NOT reflection supply.\r\n\t */\r\n\tfunction _calculateFee(uint256 amount, uint8 fee)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn (amount * fee) / 100;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Returns the final amount for the tax.\r\n\t *important This function only works with values based on token supply and NOT reflection supply.\r\n\t */\r\n\tfunction _calculateTax(uint256 amount) private view returns (uint256) {\r\n\t\treturn _calculateFee(amount, taxFee);\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Updates the value of the total fees paid and reduces the reflection supply to reward all holders.\r\n\t */\r\n\tfunction _reflectFee(uint256 rfee, uint256 fee) private {\r\n\t\t_reflectionSupply -= rfee;\r\n\t\t_totalTokenFees += fee + fee + fee;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Stores the liquidity fee in the contract\u0027s address\r\n\t */\r\n\tfunction _takeLiquidity(uint256 amount) private {\r\n\t\t_reflectionBalance[address(this)] =\r\n\t\t\t_reflectionBalance[address(this)] +\r\n\t\t\tamount;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev This is used to recieve ETH from uniswapv2router when swaping.\r\n\t */\r\n\treceive() external payable {}\r\n\r\n\t/**\r\n\t *@dev Allows a user to transfer his reflections to another user. It taxes the sender by the tax fee while inflating the all tokens value.\r\n\t */\r\n\tfunction _transferToken(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount,\r\n\t\tbool removeFees\r\n\t) private {\r\n\t\t// If this is a feeless transaction. Remove all fees and store them.\r\n\t\tif (removeFees) removeAllFees();\r\n\r\n\t\tuint256 rAmount = _reflectionFromToken(amount);\r\n\r\n\t\tif (\r\n\t\t\tcatchWhales \u0026\u0026\r\n\t\t\trecipient != uniswapV2WETHPair \u0026\u0026\r\n\t\t\tsender != owner() \u0026\u0026\r\n\t\t\trecipient != owner()\r\n\t\t) {\r\n\t\t\trequire(\r\n\t\t\t\t_tokenFromReflection(_reflectionBalance[recipient] + rAmount) \u003c=\r\n\t\t\t\t\tmaxTxAmount,\r\n\t\t\t\t\"No whales allowed right now :)\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Because this account comes from a excluded account to an excluded. We only to reduce it\u0027s reflections and tokens.\r\n\t\t_reflectionBalance[sender] = _reflectionBalance[sender] - rAmount;\r\n\r\n\t\t// Calculates transaction fee\r\n\t\tuint256 tax = _calculateTax(amount);\r\n\t\tuint256 rTax = _reflectionFromToken(tax);\r\n\r\n\t\t// Since the recipient is also  excluded. We need to update his reflections and tokens.\r\n\t\t_reflectionBalance[recipient] =\r\n\t\t\t_reflectionBalance[recipient] +\r\n\t\t\trAmount -\r\n\t\t\trTax -\r\n\t\t\trTax -\r\n\t\t\trTax;\r\n\r\n\t\t_reflectionBalance[UntoldFund] = _reflectionBalance[UntoldFund] + rTax;\r\n\r\n\t\t_takeLiquidity(rTax);\r\n\t\t_reflectFee(rTax, tax);\r\n\r\n\t\temit Transfer(sender, recipient, amount - tax * 3);\r\n\r\n\t\t// Restores all fees if they were disabled.\r\n\t\tif (removeFees) restoreAllFees();\r\n\t}\r\n\r\n\t/**\r\n\t *@dev buys ETH with tokens stored in this contract\r\n\t */\r\n\tfunction _swapTokensForEth(uint256 tokenAmount) private {\r\n\t\t// generate the uniswap pair path of token -\u003e weth\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// make the swap\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Adds equal amount of eth and tokens to the ETH liquidity pool\r\n\t */\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t// approve token transfer to cover all possible scenarios\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// add the liquidity\r\n\t\tuniswapV2Router.addLiquidityETH{ value: ethAmount }(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\taddress(0),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _swapAndLiquefy() private lockTheSwap {\r\n\t\t// split the contract token balance into halves\r\n\t\tuint256 half = _numberTokensSellToAddToLiquidity / 2;\r\n\t\tuint256 otherHalf = _numberTokensSellToAddToLiquidity - half;\r\n\r\n\t\tuint256 initialETHContractBalance = address(this).balance;\r\n\r\n\t\t// Buys ETH at current token price\r\n\t\t_swapTokensForEth(half);\r\n\r\n\t\t// This is to make sure we are only using ETH derived from the liquidity fee\r\n\t\tuint256 ethBought = address(this).balance - initialETHContractBalance;\r\n\r\n\t\t// Add liquidity to the pool\r\n\t\t_addLiquidity(otherHalf, ethBought);\r\n\r\n\t\temit SwapAndLiquefy(half, ethBought, otherHalf);\r\n\t}\r\n\r\n\t/**\r\n    @dev Function to enable trading\r\n   */\r\n\tfunction enableTrading() external onlyOwner() {\r\n\t\tstartTrading = true;\r\n\t}\r\n\r\n\t/**\r\n\t@dev Function to allow holders to have more than 0.5% of tokens\r\n\t */\r\n\tfunction freeWhales() external onlyOwner() {\r\n\t\tcatchWhales = false;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev This function first adds liquidity to the pool, then transfers tokens between accounts\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(\r\n\t\t\tsender != address(0),\r\n\t\t\t\"ERC20: Sender cannot be the zero address\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\trecipient != address(0),\r\n\t\t\t\"ERC20: Recipient cannot be the zero address\"\r\n\t\t);\r\n\t\trequire(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\t\tif (sender != owner() \u0026\u0026 recipient != owner()) {\r\n\t\t\trequire(\r\n\t\t\t\tamount \u003c= maxTxAmount,\r\n\t\t\t\t\"Transfer amount exceeds the maxTxAmount.\"\r\n\t\t\t);\r\n\r\n\t\t\trequire(startTrading, \"Nice try :)\");\r\n\t\t}\r\n\r\n\t\t// Condition 1: Make sure the contract has the enough tokens to liquefy\r\n\t\t// Condition 2: We are not in a liquefication event\r\n\t\t// Condition 3: Liquification is enabled\r\n\t\t// Condition 4: It is not the uniswapPair that is sending tokens\r\n\r\n\t\tif (\r\n\t\t\tbalanceOf(address(this)) \u003e= _numberTokensSellToAddToLiquidity \u0026\u0026\r\n\t\t\t!swapAndLiquifyingInProgress \u0026\u0026\r\n\t\t\tisSwapAndLiquifyingEnabled \u0026\u0026\r\n\t\t\tsender != uniswapV2WETHPair\r\n\t\t) _swapAndLiquefy();\r\n\r\n\t\t_transferToken(\r\n\t\t\tsender,\r\n\t\t\trecipient,\r\n\t\t\tamount,\r\n\t\t\t_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Gives allowance to an account\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress beneficiary,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(\r\n\t\t\tbeneficiary != address(0),\r\n\t\t\t\"The burn address is not allowed to receive approval for allowances.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\towner != address(0),\r\n\t\t\t\"The burn address is not allowed to approve allowances.\"\r\n\t\t);\r\n\r\n\t\t_allowances[owner][beneficiary] = amount;\r\n\t\temit Approval(owner, beneficiary, amount);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\t\texternal\r\n\t\toverride\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address beneficiary, uint256 amount)\r\n\t\texternal\r\n\t\toverride\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(_msgSender(), beneficiary, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev It allows an account to transfer it\u0027s allowance to any other account;\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress provider,\r\n\t\taddress beneficiary,\r\n\t\tuint256 amount\r\n\t) external override returns (bool) {\r\n\t\t_transfer(provider, beneficiary, amount);\r\n\t\t_approve(\r\n\t\t\tprovider,\r\n\t\t\t_msgSender(),\r\n\t\t\t_allowances[provider][_msgSender()] - amount\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Shows the allowance of a beneficiary in tokens.\r\n\t */\r\n\tfunction allowance(address owner, address beneficiary)\r\n\t\texternal\r\n\t\tview\r\n\t\toverride\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _allowances[owner][beneficiary];\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Increases the allowance of a beneficiary\r\n\t */\r\n\tfunction increaseAllowance(address beneficiary, uint256 amount)\r\n\t\texternal\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tbeneficiary,\r\n\t\t\t_allowances[_msgSender()][beneficiary] + amount\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev Decreases the allowance of a beneficiary\r\n\t */\r\n\tfunction decreaseAllowance(address beneficiary, uint256 amount)\r\n\t\texternal\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tbeneficiary,\r\n\t\t\t_allowances[_msgSender()][beneficiary] - amount\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n}"},"UntoldMetaData.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IERC20MetaData.sol\";\r\n\r\nabstract contract UntoldMetaData is IERC20Metadata {\r\n\t/**\r\n\t *@dev The name of the token managed by the this smart contract.\r\n\t */\r\n\tstring private _name = \"Untoldtoken.io\";\r\n\r\n\t/**\r\n\t *@dev The symbol of the token managed by the this smart contract.\r\n\t */\r\n\tstring private _symbol = \"UTDK\";\r\n\r\n\t/**\r\n\t *@dev The decimals of the token managed by the this smart contract.\r\n\t */\r\n\tuint8 private _decimals = 18;\r\n\r\n\t/**\r\n\t *@dev It returns the name of the token.\r\n\t */\r\n\tfunction name() public view override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev It returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() public view override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t *@dev It returns the decimal of the token.\r\n\t */\r\n\tfunction decimals() public view override returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n}"}}