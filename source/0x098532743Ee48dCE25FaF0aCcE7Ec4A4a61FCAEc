{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \u0027./Context.sol\u0027;\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"Staker.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n// import \"hardhat/console.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003c= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c \u003e= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Staker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Stake {\r\n        uint256 amountStaked;\r\n        uint256 start;\r\n        uint256 withdrawnOn;\r\n        bool withdrawn;\r\n        uint256 totalReward;\r\n        uint256 id;\r\n        uint256 stakedFor;\r\n        uint256 withdrawableDate;\r\n    }\r\n    uint256 private _index = 0;\r\n    mapping(address =\u003e Stake[]) public stakingRecord;\r\n    IBEP20 private acceptedToken;\r\n    IBEP20 private rewardToken;\r\n    uint256 public rewardPerDay;\r\n    // Stake Time to reward per\r\n    uint8 public earlyWithdrawFee;\r\n    uint256 public totalAmountStaked;\r\n    uint256 public totalAmountRewarded;\r\n    uint16 public earlyWithdrawDayCount;\r\n    uint256 public startTime;\r\n    uint256 public stakeTime;\r\n    uint256 public earlyWithdrawLockTime;\r\n    uint256 public totalStakedUsers;\r\n\r\n    mapping(address =\u003e bool) hasStaked;\r\n    // Number of Days =\u003e percentage of Reward\r\n    mapping(uint256 =\u003e uint256) public longevityBonus;\r\n    event tokensStaked(\r\n        address indexed from,\r\n        uint256 indexed amount,\r\n        uint256 indexed startTime,\r\n        uint256 _index\r\n    );\r\n    event tokensUnStaked(\r\n        address indexed from,\r\n        uint256 indexed rewardedAmount,\r\n        uint256 _index\r\n    );\r\n    event feesDeducted(bool isDeducted, uint256 deducedAmount);\r\n\r\n    constructor(\r\n        address _acceptedToken,\r\n        address _rewardToken,\r\n        uint256 _rewardPerDay,\r\n        uint256 _earlyWithdrawLockTime,\r\n        uint8 _earlyWithdrawFee,\r\n        uint16 _earlyWithdrawDayCount,\r\n        uint256 _stakeTime,\r\n        uint256[] memory longevityPeriods,\r\n        uint256[] memory longevityRewards\r\n    ) {\r\n        // Initializing State variables;\r\n        startTime = block.timestamp;\r\n        stakeTime = _stakeTime;\r\n        earlyWithdrawLockTime = _earlyWithdrawLockTime;\r\n        earlyWithdrawDayCount = _earlyWithdrawDayCount;\r\n        earlyWithdrawFee = _earlyWithdrawFee;\r\n        rewardPerDay = _rewardPerDay;\r\n        rewardToken = IBEP20(_rewardToken);\r\n        acceptedToken = IBEP20(_acceptedToken);\r\n        for (uint256 index = 0; index \u003c longevityPeriods.length; index++) {\r\n            longevityBonus[longevityPeriods[index]] = longevityRewards[index];\r\n        }\r\n    }\r\n\r\n    function setrewardPerDay(uint256 _rewardPerDay) public onlyOwner {\r\n        rewardPerDay = _rewardPerDay;\r\n    }\r\n\r\n    function getUserStakes(address toGet) public view returns (Stake[] memory) {\r\n        return stakingRecord[toGet];\r\n    }\r\n\r\n    function setEarlyWithdrawLockTime(uint256 _earlyWithdrawLockTime)\r\n        public\r\n        onlyOwner\r\n    {\r\n        earlyWithdrawLockTime = _earlyWithdrawLockTime;\r\n    }\r\n\r\n    function updateLongevityBonus(uint256 timeStaked, uint256 rewardMultiple)\r\n        public\r\n        onlyOwner\r\n    {\r\n        longevityBonus[timeStaked] = rewardMultiple;\r\n    }\r\n\r\n    function setEarlyWithDrawFee(uint8 _earlyWithdrawFee) public onlyOwner {\r\n        earlyWithdrawFee = _earlyWithdrawFee;\r\n    }\r\n\r\n    function setEarlyWithdrawDayCount(uint16 _earlyWithdrawDayCount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        earlyWithdrawDayCount = _earlyWithdrawDayCount;\r\n    }\r\n\r\n    function setstakeTime(uint256 _stakeTime) public onlyOwner {\r\n        stakeTime = _stakeTime;\r\n    }\r\n\r\n    function deposit(uint256 _amount, uint256 timeToStake) public {\r\n        require(_amount \u003e 0, \"Amount Staked should be greater than zero\");\r\n        require(\r\n            block.timestamp \u003e startTime,\r\n            \"Staking Time has to be after contract was initiated\"\r\n        );\r\n\r\n        require(\r\n            acceptedToken.transferFrom(_msgSender(), address(this), _amount),\r\n            \"Could Not Transfer Accepted Token\"\r\n        );\r\n        uint256 index = stakingRecord[_msgSender()].length;\r\n        Stake memory _stake = Stake({\r\n            amountStaked: _amount,\r\n            start: block.timestamp,\r\n            withdrawableDate: block.timestamp + (timeToStake * 1 days),\r\n            stakedFor: timeToStake,\r\n            withdrawnOn: 0,\r\n            withdrawn: false,\r\n            totalReward: 0,\r\n            id: index\r\n        });\r\n        if (hasStaked[msg.sender] == false) {\r\n            totalStakedUsers = totalStakedUsers.add(1);\r\n            hasStaked[msg.sender] = true;\r\n        }\r\n        stakingRecord[_msgSender()].push(_stake);\r\n        totalAmountStaked = totalAmountStaked.add(_amount);\r\n        emit tokensStaked(_msgSender(), _amount, block.timestamp, index);\r\n    }\r\n\r\n    // Function returns\r\n    function _calculateReward(address _stakerAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Stake memory _stakingRecord = stakingRecord[_stakerAddress][index];\r\n        uint256 toCalculateTo = block.timestamp;\r\n        // number of days user has staked token for\r\n        uint256 daysDifference = (toCalculateTo - _stakingRecord.start)\r\n            .div(60)\r\n            .div(60)\r\n            .div(24);\r\n\r\n        uint256 rewardPerDayLocal = 0;\r\n        if (longevityBonus[_stakingRecord.stakedFor] != 0) {\r\n            rewardPerDayLocal = (\r\n                ((longevityBonus[_stakingRecord.stakedFor].sub(100)).mul(1e5))\r\n                    .div(_stakingRecord.stakedFor)\r\n            ).div(1e3);\r\n        }\r\n\r\n        uint256 updatedReward = _stakingRecord\r\n            .amountStaked\r\n            .mul(rewardPerDayLocal)\r\n            .div(10000);\r\n\r\n        if (updatedReward \u003e _stakingRecord.amountStaked) {\r\n            updatedReward.sub(_stakingRecord.amountStaked);\r\n        }\r\n        // In case 1 year has passed we only show reward for the amount he staked for as reward\r\n        if (daysDifference \u003e= _stakingRecord.stakedFor) {\r\n            return updatedReward.mul(_stakingRecord.stakedFor);\r\n        }\r\n        // If not we return the reward for the amount of days user has staked\r\n        else {\r\n            return updatedReward.mul(daysDifference);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 index) public {\r\n        // We fetch the staking record\r\n        Stake memory _stakingRecord = stakingRecord[_msgSender()][index];\r\n        // We Check for which time are we withdrawing from\r\n        require(_stakingRecord.withdrawn == false, \"Already Withdrawn\");\r\n        uint256 toCalculateTo = block.timestamp;\r\n        // In case user has withdrawn early this will not be zero so we calculate on the\r\n        // date he withdrawn early on\r\n        if (_stakingRecord.withdrawnOn != 0) {\r\n            toCalculateTo = _stakingRecord.withdrawnOn;\r\n        }\r\n        // Number of days user has staked their tokens for\r\n        uint256 daysDifference = (toCalculateTo - _stakingRecord.start)\r\n            .div(60)\r\n            .div(60)\r\n            .div(24);\r\n        // Minimum time to stake tokens without early withdraw penalty\r\n        uint256 miniumTimeToStakeForReward = earlyWithdrawDayCount;\r\n        // Calculate latest reward, again for the number of days user has staked for\r\n        // so in case he has staked for 400 days we calculate for 365 only,\r\n        // In case he has staked for lest time we calculate for 100 days\r\n        uint256 totalReward = _calculateReward(_msgSender(), index);\r\n        // User Is Withdrawing before minimum staking Time Has Elapsed;\r\n        // Deduction of Fees\r\n        if (daysDifference \u003c miniumTimeToStakeForReward) {\r\n            // Calculating the amount that is to be deducted, from 100 days\r\n            uint256 toDeduct = (totalReward.mul(earlyWithdrawFee).div(100)).sub(\r\n                totalReward\r\n            );\r\n            // Reduce the total reward calculated by deduction rate\r\n            totalReward = totalReward.sub(toDeduct);\r\n            // If this is the first time user is withdrawing earlier\r\n            if (_stakingRecord.withdrawnOn == 0) {\r\n                _stakingRecord.withdrawnOn = block.timestamp;\r\n                stakingRecord[_msgSender()][index] = _stakingRecord;\r\n            } else {\r\n                // Check that let say 7 days have passed from initial withdrawn\r\n                require(\r\n                    block.timestamp \u003e=\r\n                        _stakingRecord.withdrawnOn.add(\r\n                            earlyWithdrawLockTime.mul(24).mul(60).mul(60)\r\n                        ),\r\n                    \"Early With draw lock period not acheived\"\r\n                );\r\n\r\n                require(\r\n                    rewardToken.transfer(_msgSender(), totalReward),\r\n                    \"Could Not Mint Tokens\"\r\n                );\r\n\r\n                require(\r\n                    acceptedToken.transfer(\r\n                        _msgSender(),\r\n                        _stakingRecord.amountStaked\r\n                    ),\r\n                    \"Could not return original staked amount\"\r\n                );\r\n                emit feesDeducted(true, toDeduct);\r\n                stakingRecord[_msgSender()][index] = Stake({\r\n                    amountStaked: _stakingRecord.amountStaked,\r\n                    start: _stakingRecord.start,\r\n                    stakedFor: _stakingRecord.stakedFor,\r\n                    withdrawableDate: _stakingRecord.withdrawableDate,\r\n                    withdrawnOn: block.timestamp,\r\n                    withdrawn: true,\r\n                    totalReward: totalReward,\r\n                    id: _stakingRecord.id\r\n                });\r\n                emit tokensUnStaked(\r\n                    _msgSender(),\r\n                    totalReward,\r\n                    _stakingRecord.id\r\n                );\r\n            }\r\n        } else {\r\n            require(\r\n                rewardToken.transfer(_msgSender(), totalReward),\r\n                \"Could Not Mint Tokens\"\r\n            );\r\n            require(\r\n                acceptedToken.transfer(\r\n                    _msgSender(),\r\n                    _stakingRecord.amountStaked\r\n                ),\r\n                \"Could not return original staked amount\"\r\n            );\r\n            emit feesDeducted(false, totalReward);\r\n            stakingRecord[_msgSender()][index] = Stake({\r\n                amountStaked: _stakingRecord.amountStaked,\r\n                start: _stakingRecord.start,\r\n                withdrawnOn: block.timestamp,\r\n                stakedFor: _stakingRecord.stakedFor,\r\n                withdrawableDate: _stakingRecord.withdrawableDate,\r\n                withdrawn: true,\r\n                totalReward: totalReward,\r\n                id: _stakingRecord.id\r\n            });\r\n            totalAmountRewarded = totalAmountRewarded.add(totalReward);\r\n\r\n            emit tokensUnStaked(_msgSender(), totalReward, _stakingRecord.id);\r\n        }\r\n    }\r\n}\r\n"}}