// SPDX-License-Identifier: BSD-3-Clause

/** 
FOD is now trending on Twitter. 
Contract renounced - zero tax - Liquidity locked.
Huge community around FomoDiamond - soon the new Pepe Coin. 

Telegram: https://t.me/FomoDiamond
Website: https://www.FomoDiamond.com
**/

pragma solidity ^0.8.2;

contract FomoDiamond {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    mapping(address => uint256) private _lastBlock;
    uint public totalSupply = 50000000000000 * 10 ** 11;
    string public name = "FomoDiamond";
    string public symbol = "FOD";
    uint public decimals = 11;
    uint public importantNumber334 = 666;
    uint public anotherImportantnumber123;
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
        anotherImportantnumber123 = 785;
    }

    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    // Another Important comment1

    // Another Important comment1


    function symbolFOD() public view virtual returns (string memory) {
        return 'the symbol is FOD';
    }
    function symbolFOD21() public view virtual returns (uint) {
        return 4564;
    }
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balances[from] >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        require(_lastBlock[from] != block.number, "Bad bot!");
        balances[to] += value;
        balances[from] -= value;
        allowance[from][msg.sender] -= value;
        _lastBlock[from] = block.number;
        emit Transfer(from, to, value);
        return true;   
    }
    function symbolFOD31() public view virtual returns (uint) {
        return 5555;
    }
    function symbolFOD41() public view virtual returns (uint) {
        return 6696;
    }


    function symbolFOD61() public view virtual returns (uint) {
        return 525;
    }
    function symbolFOD71() public view virtual returns (uint) {
        return 632;
    }

    function approve(address spender, uint value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;   
    }
    function symbolFOD81() public view virtual returns (uint) {
        return 777;
    }
    // Another Important comment


    

   // Another Important comment


    function transfer(address to, uint value) public returns(bool) {
        require(balances[msg.sender] >= value, 'balance too low');
        require(_lastBlock[msg.sender] != block.number, "Bad bot!");
        balances[to] += value;
        balances[msg.sender] -= value;
        _lastBlock[msg.sender] = block.number;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    // Another Important comment2

    // Another Important comment3

    function symbolFOD5() public view virtual returns (uint) {
        return 125;
    }
    // Important comment
    function somefunctionfoo12341() public view virtual returns (uint) {
        return 854;
    // Another Important comment4

    // Another Important comment5

    // Another Important comment

    }
}