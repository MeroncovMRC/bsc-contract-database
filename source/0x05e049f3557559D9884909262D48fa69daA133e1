{"IERC20.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    \n    function symbol() external view returns(string memory);\n    \n    function name() external view returns(string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n    \n    /**\n     * @dev Returns the number of decimal places\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"Subscription.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"./IERC20.sol\";\n\ninterface ISubscriptionDatabase {\n    function setUserData(address user, uint256 amountPaid, uint256 newPaidUntil) external;\n    function userPaidUntil(address user) external view returns (uint256);\n    function getOwner() external view returns (address);\n}\n\n/**\n    Truth Seekers Subscription Smart Contract\n    Learn More At dappd.net/hosting\n */\ncontract TruthSeekersSubscription {\n\n    /** Constants */\n    uint256 public constant month = 864000;\n    uint256 public constant year = month * 12;\n\n    /** Subscription Database */\n    ISubscriptionDatabase public immutable database;\n\n    /** Token To Accept As Payment */\n    address public payToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n    \n    /** Payment Recipient */\n    address public paymentRecipient = 0x664A3c02Bc8F3c90d843a5420E67cC1fBb2f62FB;\n\n    /** Cost Per Month */\n    uint256 public monthlyCost = 995 * 10**16;\n    \n    /** Cost Per Year */\n    uint256 public yearlyCost = 89 * 10**18;\n\n    /** Only Database Owner Can Modify */\n    modifier onlyOwner() {\n        require(msg.sender == database.getOwner(), \u0027Only Owner\u0027);\n        _;\n    }\n\n    constructor(address db_) {\n        database = ISubscriptionDatabase(db_);\n    }\n\n    ////////////////////////////////////\n    /////     OWNER FUNCTIONS     //////\n    ////////////////////////////////////\n\n    function setPayRecipient(address newRecipient) external onlyOwner {\n        require(\n            newRecipient != address(0),\n            \u0027Zero Address\u0027\n        );\n        paymentRecipient = newRecipient;\n    }\n\n    function setPayToken(address newToken) external onlyOwner {\n        payToken = newToken;\n    }\n\n    function setMonthlyCost(uint newCost) external onlyOwner {\n        monthlyCost = newCost;\n    }\n\n    function setYearlyCost(uint newCost) external onlyOwner {\n        yearlyCost = newCost;\n    }\n\n\n    ////////////////////////////////////\n    /////     PUBLIC FUNCTIONS    //////\n    ////////////////////////////////////\n\n\n    function paySubscription(bool monthly) external {\n\n        // determine either monthly or yearly amount\n        uint amount = monthly ? monthlyCost : yearlyCost;\n        uint additionalBlocks = monthly ? month : year;\n\n        // send payment to payment receiver\n        require(\n            IERC20(payToken).allowance(msg.sender, address(this)) \u003e= amount,\n            \u0027Insufficient Allowance\u0027\n        );\n        require(\n            IERC20(payToken).transferFrom(\n                msg.sender,\n                paymentRecipient,\n                amount\n            ),\n            \u0027Failure Transfer From\u0027\n        );\n\n        // fetch user paid until date\n        uint paidUntilPrevious = database.userPaidUntil(msg.sender);\n\n        // determine future paid until date\n        uint paidUntilCurrent = paidUntilPrevious \u003e block.number ? paidUntilPrevious + additionalBlocks : block.number + additionalBlocks;\n\n        // set data in database\n        database.setUserData(msg.sender, amount, paidUntilCurrent);\n    }\n}"}}