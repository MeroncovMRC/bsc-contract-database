// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

// ------------------------------------- Address -------------------------------------------
library Address {
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
// ------------------------------------- SafeERC20 -------------------------------------------
library SafeERC20 {
    using Address for address;
    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }
    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}
// ------------------------------------- Context -------------------------------------------
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
// ------------------------------------- Ownable -------------------------------------------
abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        _transferOwnership(_msgSender());
    }
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
// ------------------------------------- IERC20 -------------------------------------------
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function mint(address _to, uint256 _amount) external;
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
// ------------------------------------- ReentrancyGuard -------------------------------------------
abstract contract ReentrancyGuard {
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;
    uint256 private _status;
    constructor() {
        _status = _NOT_ENTERED;
    }
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}
// -------------------------------------- IUniswapV2Pair -------------------------------------------
interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}
// -------------------------------------- IUniswapV2Router01 -------------------------------------------
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
// -------------------------------------- IUniswapV2Router02 -------------------------------------------
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// ------------------------------------- IWETH -------------------------------------------
interface IWETH {
    function deposit() external payable;
}
// ------------------------------------- IPenaltyReceiver -------------------------------------------
interface IPenaltyReceiver {
    function notifyReward(uint256 reward) external;
}

// Shade staked within this contact entitles stakers to a portion of the admin fees generated by Shade Payment contracts
contract TORII_Loyalty is ReentrancyGuard, Ownable {
    using SafeERC20 for IERC20;
    
    // -------------------------------- VARIABLES -----------------------------------
    
    struct LockedBalance {
        uint256 amount;
        uint256 unlockTime;
    }
    struct RewardData {
        address token;
        uint256 amount;
    }

	IUniswapV2Router02 public immutable router;
    IUniswapV2Pair public immutable pair;	
	address[] public path;
	address public immutable token;		
	address public immutable WETH;    	
	
	uint256 public periodFinish = 0;
    uint256 public rewardRate = 0;
    uint256 public lastUpdateTime;
    uint256 public rewardPerTokenStored;
	mapping(address => uint256) public userRewardPerTokenPaid;
    mapping(address => uint256) public rewards;
    
    uint256 public constant rewardsDuration = 2 days; // 
	uint256 public constant lockDurationMultiplier = 15; // 
    // Duration of lock period
    uint256 public constant lockDuration = rewardsDuration * lockDurationMultiplier; 
        
    // addresses that allowed to stake in lock
    mapping(address => bool) public lockStakers;

    uint256 public totalSupply;

	uint256 public penaltyPercent;
	uint256 public constant penaltyPercentMAX = 50;	
    
    mapping(address => uint256) public balances;    	
	mapping(address => mapping(uint256 => LockedBalance)) public userLocks;
	mapping(address => uint256) public startIndex;
	mapping(address => uint256) public userLocksLength;

	bool public emergencyMode;
    uint256 public emergencyModeStartTime;
	uint256 public immutable recoveryDelay;
        
    // -------------------------------- CONSTRUCTOR -----------------------------------
    constructor() Ownable() {        
		token = address(0xD9979e2479AEa29751D31AE512a61297B98Fbbf4); // TORII mainnet	
		router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mainnet        
        WETH = router.WETH();    
		
		pair = IUniswapV2Pair(address(0xEE6739F85f6a87fF90c360Ea2210D5F2cB620320)); // TORII LP mainnet
        require(pair.factory() == router.factory(), 'iiVault Swapper: Incompatible liquidity pair factory');
		path = [WETH, token];
				            
		penaltyPercent = 20;

		lastUpdateTime = block.timestamp;
		periodFinish = block.timestamp;
		recoveryDelay = 7 days;
    }

    // -------------------------------- CONFIG -----------------------------------

	// Penalty
    function setPenaltyPercent(uint256 newPenaltyPercent) public onlyOwner {
        require(newPenaltyPercent <= penaltyPercentMAX, "Penalty percent max");
		penaltyPercent = newPenaltyPercent;   
		emit SetPenalty(newPenaltyPercent);     
    }

	// EmergencyMode
    function setEmergencyMode() public onlyOwner {
        emergencyMode = true; 
		emergencyModeStartTime = block.timestamp;  
		emit SetEmergencyMode();     
    }

    // -------------------------------- VIEWS -----------------------------------
    //
    function rewardPerToken() internal view returns (uint256) {
        if (totalSupply == 0) {
            return rewardPerTokenStored;
        }        
        return rewardPerTokenStored + ( (lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18 / totalSupply );
    }

    //
    function earned(address account) internal view returns (uint256) {
        return balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / 1e18 + rewards[account];
    }

    //
    function lastTimeRewardApplicable() internal view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }

    //
    function claimRewardForDuration() internal view returns (uint256) {
        return rewardRate * rewardsDuration;
    }

	function lockedBalance(address account) public view returns (uint256 amount) {
		for (uint i = startIndex[account]; i < userLocksLength[account]; i++) {
            if (userLocks[account][i].unlockTime > block.timestamp) {
                amount += userLocks[account][i].amount;
			}  			         
        } 		
	}

    // Contract Data method for decrease number of request to contract from dApp UI
    function contractData() public view returns (
        uint256 _totalDeposited,            // totalSupply
        uint256 _rewardPerToken,   // rewardPerToken        
        uint256 _claimRewardForDuration,   // claimRewardForDuration        
        uint256 _rewardsDuration,            // rewardsDuration   
        uint256 _lockDuration,            // lockDuration   
		uint256 _balanceToken,
        uint256 _penaltyPercent        
		) {
            _totalDeposited = totalSupply;			
			_rewardPerToken = rewardPerToken();
			_claimRewardForDuration = claimRewardForDuration();
            _balanceToken = IERC20(token).balanceOf(address(this));
			_rewardsDuration = rewardsDuration;
			_lockDuration = lockDuration;
            _penaltyPercent = penaltyPercent;
    }

    // User Data method for decrease number of request to contract from dApp UI
    function userData(address account) public view returns (
        uint256 _deposited,  // Staked balance
        uint256 _locked,  // Locked balance
        LockedBalance[] memory _userLocks,     // Locks
        uint256 _earned,        // claimableRewards
        uint256 _allowance,                     // allowance of staking token        
        uint256 _balance                    // balance of staking token        
        ) {
			_deposited = balances[account];                
			_userLocks = new LockedBalance[](userLocksLength[account] - startIndex[account]);
			uint256 idx;
			for (uint i = startIndex[account]; i < userLocksLength[account]; i++) {
				if (userLocks[account][i].unlockTime > block.timestamp) {
                   	_userLocks[idx] = userLocks[account][i]; 
					_locked += userLocks[account][i].amount;                    
                    idx ++;             
                }            
            }
			            
            _earned = earned(account);
            _allowance = IERC20(token).allowance(account, address(this));
            _balance = IERC20(token).balanceOf(account);        
    }

    // -------------------------------- MUTATIVE FUNCTIONS -----------------------------------        
    // Deposit tokens to receive rewards
    function deposit(uint256 amount) public nonReentrant {
        _updateUserLocks(msg.sender);
        _updateReward(msg.sender);        
        _deposit(msg.sender, amount, true);
    }
    
    // Withdraw defined amount of staked tokens
    // If amount higher than unlocked we get extra from locks and pay penalty
    function withdraw(uint256 amount) public nonReentrant {
        _updateUserLocks(msg.sender);
        _updateReward(msg.sender);

        require(amount != 0, "Can't withdraw 0");  

        uint256 balance = balances[msg.sender];
        require(balance >= amount, "Not enough tokens to withdraw"); 
		balances[msg.sender] -= amount;   
       
        uint256 unlocked = balance - lockedBalance(msg.sender);
        uint256 penalty;
        
        if (amount > unlocked) {
			require(penaltyPercent != 0, "Can't withdraw locked without penalty");  

            uint256 remaining = amount - unlocked;
			require(remaining >= 100, "Can't withdraw locked less than 100 wei"); 
			
            penalty = remaining / 100 * penaltyPercent;
            amount = unlocked + remaining - penalty;
                      
            for (uint i = startIndex[msg.sender]; i < userLocksLength[msg.sender]; i++) {
                uint256 lockAmount = userLocks[msg.sender][i].amount;
                if (lockAmount < remaining) {
                    remaining = remaining - lockAmount;
                    delete userLocks[msg.sender][i];
                } else if (lockAmount == remaining) {
                    delete userLocks[msg.sender][i];
                    break;
                } else { 
                    userLocks[msg.sender][i].amount = lockAmount - remaining;
                    break;
                }            
            }
        }
        _sendTokensAndPenalty(amount, penalty);
        emit Withdrawn(msg.sender, amount);		
    }
    
    // Withdraw defined amount of unlocked tokens
    function withdrawUnlocked() public nonReentrant {
        _updateUserLocks(msg.sender);
        _updateReward(msg.sender);
        
        uint256 balance = balances[msg.sender];
        require(balance != 0, "No tokens on balance"); 
		uint256 locked = lockedBalance(msg.sender);  

        uint256 amount = balance - locked; 
		require(amount != 0, "No unlocked tokens");

        balances[msg.sender] -= amount;    
		
		_sendTokensAndPenalty(amount, 0);                
        emit Withdrawn(msg.sender, amount);
    }

    // Withdraw all user locked tokens
    function withdrawLocked() public nonReentrant {
        _updateUserLocks(msg.sender); 
        _updateReward(msg.sender);
                
        uint256 amount = lockedBalance(msg.sender);
        require(amount != 0, "Can't withdraw 0");  

		require(penaltyPercent != 0, "Can't withdraw locked without penalty");  
		require(amount >= 100, "Can't withdraw locked less than 100 wei");    
        
        balances[msg.sender] -= amount;
                
        for (uint i = startIndex[msg.sender]; i < userLocksLength[msg.sender]; i++) {
            delete userLocks[msg.sender][i];
        }
		startIndex[msg.sender] = 0;
        userLocksLength[msg.sender] = 0;

		uint256 penalty = amount / 100 * penaltyPercent;
        amount -= penalty; 

        _sendTokensAndPenalty(amount, penalty);
        emit Withdrawn(msg.sender, amount);
    }

	// Withdraw full unlocked balance and claim pending rewards
    function withdrawAll() public nonReentrant {         
        _updateUserLocks(msg.sender);    
        _updateReward(msg.sender);   
       
		uint256 balance = balances[msg.sender];
        require(balance != 0, "Can't withdraw 0"); 
		 
		uint256 locked = lockedBalance(msg.sender);    
		if (locked != 0) {
			require(penaltyPercent != 0, "Can't withdraw locked without penalty");  
			require(locked >= 100, "Can't withdraw locked less than 100 wei"); 
		}   
        uint256 unlocked = balance - locked;
		
		uint256 penalty = locked / 100 * penaltyPercent;
        uint256 amount = unlocked + locked - penalty; 

        balances[msg.sender] = 0;
		for (uint i = startIndex[msg.sender]; i < userLocksLength[msg.sender]; i++) {
            delete userLocks[msg.sender][i];
        }
		startIndex[msg.sender] = 0;
        userLocksLength[msg.sender] = 0;

        _sendTokensAndPenalty(amount, penalty);

		emit Withdrawn(msg.sender, amount);
    }

	// Withdraw full unlocked balance and claim pending rewards
    function withdrawEmergency() public nonReentrant { 
        require(emergencyMode, "Emergency mode not enabled"); 
		
		uint256 amount = balances[msg.sender];
        require(amount != 0, "Can't withdraw 0"); 
		       
		startIndex[msg.sender] = 0;
        userLocksLength[msg.sender] = 0;
		balances[msg.sender] = 0;

        _sendTokensAndPenalty(amount, 0);

		emit EmergencyWithdrawn(msg.sender, amount);
    }

    // Claim all pending staking rewards
    function claim() public nonReentrant {		
        _updateReward(msg.sender);
        _claimReward(msg.sender, true);        
    }
    // Claim all pending staking rewards
    function claimAndDeposit() public nonReentrant {		
        _updateReward(msg.sender);        
        uint256 reward = _claimReward(msg.sender, false);
        if (reward != 0) { 
            _updateUserLocks(msg.sender);
            _deposit(msg.sender, reward, false);          
        }   
    }
    
    //
    function updateUserLocks() public {
        _updateUserLocks(msg.sender);
    }
	//notifyReward
    function notifyReward(uint256 amount) public {
        uint256 balanceWETH = IERC20(WETH).balanceOf(address(this));
        if (balanceWETH != 0) {
            _updateReward(address(0));
			
            uint256 balance = IERC20(token).balanceOf(address(this));			
			IERC20(WETH).approve(address(router), balanceWETH);
			router.swapExactTokensForTokens(balanceWETH, 0, path, address(this), block.timestamp);			
			uint256 tokenAmount = IERC20(token).balanceOf(address(this)) - balance;
			
			_notifyReward(tokenAmount);
			emit RewardAdded(tokenAmount);
		}
    }
    function notifyRewardAmount(uint256 amount) public {
        if (amount != 0) {
			_updateReward(address(0));
			IERC20(WETH).safeTransferFrom(msg.sender, address(this), amount);
			uint256 balanceWETH = IERC20(WETH).balanceOf(address(this));				
			
            uint256 balance = IERC20(token).balanceOf(address(this));			
			IERC20(WETH).approve(address(router), balanceWETH);
			router.swapExactTokensForTokens(balanceWETH, 0, path, address(this), block.timestamp);			
			uint256 tokenAmount = IERC20(token).balanceOf(address(this)) - balance;
			
			_notifyReward(tokenAmount);
			emit RewardAdded(tokenAmount);
		}
    }
	// 
    function notifyRewardToken(uint256 amount) public {        
        _updateReward(address(0));
		
		uint256 balance = IERC20(token).balanceOf(address(this));
        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);	
		uint256 tokensIn = IERC20(token).balanceOf(address(this)) - balance;

		require(tokensIn != 0, "No reward"); 	
		
		_notifyReward(tokensIn);
        emit TokenReceived(tokensIn);     
    }
	// 
    function notifyRewardETH() public payable {        
        require(msg.value != 0, "No reward"); 
        _updateReward(address(0));
		
        IWETH(WETH).deposit{ value: msg.value }();

		notifyReward(0);
        emit ETHReceived(msg.value);     
    }
	//
	receive() external payable {
		notifyRewardETH();
    }

    // Added to support recovering 
    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
		if (!emergencyMode) {
			require(tokenAddress != token, "Can't withdraw staking/reward token");
		} else {
			if (tokenAddress == token) {
				require(block.timestamp >= emergencyModeStartTime + recoveryDelay, "Can't withdraw staking/reward token before recovery delay");
			}
		}                
		IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);
        emit Recovered(tokenAddress, tokenAmount);
    }
	
    // -------------------------------- RESTRICTED -----------------------------------
    // Locked tokens can't be withdrawn for lockDuration and are eligible to receive staking rewards
    function _deposit(address account, uint256 amount, bool transfer) internal {               
        require(amount != 0, "Can't stake 0");
       
        uint256 unlockTime = (block.timestamp / rewardsDuration * rewardsDuration) + lockDuration;
        uint256 locksLength = userLocksLength[account];
		
		if (locksLength == 0 || userLocks[account][locksLength-1].unlockTime < unlockTime) {                
			userLocks[account][locksLength] = LockedBalance({
                amount: amount, 
                unlockTime: unlockTime
            }); 
			userLocksLength[account] ++;                
        } else {				
            userLocks[account][locksLength-1].amount += amount;
        }

        if (transfer) {
            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);
        } 
        
		balances[account] += amount;
        totalSupply += amount;

        emit Deposited(account, amount);
    }
    // Update all currently locked tokens where the unlock time has passed
    function _updateUserLocks(address account) internal {
        require(!emergencyMode, "Not allowed in emergency mode");
        uint256 locksLength = userLocksLength[account];
        // return if user has no locks
        if (locksLength == 0) return;
		
        // searching for expired locks from stratIndex untill first locked found or end reached        
        while (userLocks[account][startIndex[account]].unlockTime <= block.timestamp && startIndex[account] < locksLength) {
			startIndex[account] ++;
		} 
		
		// if end reached it means no lock found and we can reset startedIndex and clear all locks array
		if (startIndex[account] >= locksLength) {
            startIndex[account] = 0;
            userLocksLength[account] = 0;
        }
    }

    function _updateReward(address account) internal {
        require(!emergencyMode, "Not allowed in emergency mode");
        rewardPerTokenStored = rewardPerToken();            
        lastUpdateTime = lastTimeRewardApplicable();        
		if (account != address(0)) {
            rewards[account] = earned(account);
            userRewardPerTokenPaid[account] = rewardPerTokenStored;
        }                
    }

    // Claim all pending staking rewards
    function _claimReward(address account, bool transfer) internal returns (uint256 reward) {
		reward = rewards[account];
        if (reward != 0) {
            rewards[account] = 0;
            if (transfer) {
                IERC20(token).safeTransfer(account, reward);
                emit RewardPaid(account, reward);
            } 
        }        
    }

    // Transfer tokens to user and penalty to xShade rewards distributor or wallet
    function _sendTokensAndPenalty(uint256 tokensAmount, uint256 penaltyAmount) internal {         
		IERC20(token).safeTransfer(msg.sender, tokensAmount);
        totalSupply -= (tokensAmount + penaltyAmount);

		if (penaltyAmount != 0) {
			_notifyReward(penaltyAmount);			
			emit PenaltyPaid(msg.sender, penaltyAmount); 
        }
    }

    //  
    function _notifyReward(uint256 reward) internal {   
		if (block.timestamp >= periodFinish) {
            rewardRate = reward / rewardsDuration;
        } else {
            uint256 remaining = periodFinish - block.timestamp;
            uint256 leftover = remaining * rewardRate;
            rewardRate = (reward + leftover) / rewardsDuration;
        }

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp + rewardsDuration;
    }

    // -------------------------------- EVENTS -----------------------------------
    event RewardAdded(uint256 reward);
    event Deposited(address indexed user, uint256 amount);    
	event Withdrawn(address indexed user, uint256 amount);

	event PenaltyPaid(address indexed user, uint256 amount);     
    event RewardPaid(address indexed user, uint256 reward);    
    event Recovered(address token, uint256 amount);	
    
	event SetPenalty(uint256 penalty);
	event SetEmergencyMode();
	
	event TokenReceived(uint256 amount);
	event ETHReceived(uint256 amount);
	
	event EmergencyWithdrawn(address indexed user, uint256 amount);	
}